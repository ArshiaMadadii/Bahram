
LM35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  080078f8  080078f8  000088f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d88  08007d88  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d88  08007d88  00008d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d90  08007d90  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d94  08007d94  00008d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d98  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001d4  08007f6c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08007f6c  000093d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009182  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7b  00000000  00000000  0001237f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  00014000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000681  00000000  00000000  00014898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000030b0  00000000  00000000  00014f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b362  00000000  00000000  00017fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d23  00000000  00000000  0002332b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac04e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000ac094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  000af6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080078dc 	.word	0x080078dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080078dc 	.word	0x080078dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_d2lz>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	460d      	mov	r5, r1
 8000cda:	f7ff ff23 	bl	8000b24 <__aeabi_dcmplt>
 8000cde:	b928      	cbnz	r0, 8000cec <__aeabi_d2lz+0x1c>
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce8:	f000 b80a 	b.w	8000d00 <__aeabi_d2ulz>
 8000cec:	4620      	mov	r0, r4
 8000cee:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cf2:	f000 f805 	bl	8000d00 <__aeabi_d2ulz>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	bd38      	pop	{r3, r4, r5, pc}
 8000cfe:	bf00      	nop

08000d00 <__aeabi_d2ulz>:
 8000d00:	b5d0      	push	{r4, r6, r7, lr}
 8000d02:	2200      	movs	r2, #0
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <__aeabi_d2ulz+0x34>)
 8000d06:	4606      	mov	r6, r0
 8000d08:	460f      	mov	r7, r1
 8000d0a:	f7ff fc99 	bl	8000640 <__aeabi_dmul>
 8000d0e:	f7ff ff6f 	bl	8000bf0 <__aeabi_d2uiz>
 8000d12:	4604      	mov	r4, r0
 8000d14:	f7ff fc1a 	bl	800054c <__aeabi_ui2d>
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <__aeabi_d2ulz+0x38>)
 8000d1c:	f7ff fc90 	bl	8000640 <__aeabi_dmul>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4630      	mov	r0, r6
 8000d26:	4639      	mov	r1, r7
 8000d28:	f7ff fad2 	bl	80002d0 <__aeabi_dsub>
 8000d2c:	f7ff ff60 	bl	8000bf0 <__aeabi_d2uiz>
 8000d30:	4621      	mov	r1, r4
 8000d32:	bdd0      	pop	{r4, r6, r7, pc}
 8000d34:	3df00000 	.word	0x3df00000
 8000d38:	41f00000 	.word	0x41f00000
 8000d3c:	00000000 	.word	0x00000000

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f000 fb5c 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d48:	f000 f872 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4c:	f000 f928 	bl	8000fa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d50:	f000 f8be 	bl	8000ed0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d54:	f000 f8fa 	bl	8000f4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


	HAL_ADC_Init(&hadc1);
 8000d58:	482d      	ldr	r0, [pc, #180]	@ (8000e10 <main+0xd0>)
 8000d5a:	f000 fbd7 	bl	800150c <HAL_ADC_Init>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000d5e:	482c      	ldr	r0, [pc, #176]	@ (8000e10 <main+0xd0>)
 8000d60:	f001 f800 	bl	8001d64 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8000d64:	482a      	ldr	r0, [pc, #168]	@ (8000e10 <main+0xd0>)
 8000d66:	f000 fca9 	bl	80016bc <HAL_ADC_Start>


  /* USER CODE END 2 */
	uartx_write_text(&huart1, "Hello LM35...\r\n");
 8000d6a:	492a      	ldr	r1, [pc, #168]	@ (8000e14 <main+0xd4>)
 8000d6c:	482a      	ldr	r0, [pc, #168]	@ (8000e18 <main+0xd8>)
 8000d6e:	f000 fb0a 	bl	8001386 <uartx_write_text>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

		if(HAL_ADC_PollForConversion(&hadc1,100) == HAL_OK)
 8000d72:	2164      	movs	r1, #100	@ 0x64
 8000d74:	4826      	ldr	r0, [pc, #152]	@ (8000e10 <main+0xd0>)
 8000d76:	f000 fd4f 	bl	8001818 <HAL_ADC_PollForConversion>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d128      	bne.n	8000dd2 <main+0x92>
			{
			adc_value = HAL_ADC_GetValue(&hadc1);
 8000d80:	4823      	ldr	r0, [pc, #140]	@ (8000e10 <main+0xd0>)
 8000d82:	f000 fe4f 	bl	8001a24 <HAL_ADC_GetValue>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <main+0xdc>)
 8000d8c:	601a      	str	r2, [r3, #0]
			temp = (float)(adc_value * 3.3 / 4095.0) * 100.0;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <main+0xdc>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fbea 	bl	800056c <__aeabi_i2d>
 8000d98:	a319      	add	r3, pc, #100	@ (adr r3, 8000e00 <main+0xc0>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	f7ff fc4f 	bl	8000640 <__aeabi_dmul>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	a317      	add	r3, pc, #92	@ (adr r3, 8000e08 <main+0xc8>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff fd70 	bl	8000894 <__aeabi_ddiv>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff ff38 	bl	8000c30 <__aeabi_d2f>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4917      	ldr	r1, [pc, #92]	@ (8000e20 <main+0xe0>)
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff f9cb 	bl	8000160 <__aeabi_fmul>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <main+0xe4>)
 8000dd0:	601a      	str	r2, [r3, #0]

			}
	    sprintf(x,"TEMP:%2.2f\r\n",temp);
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <main+0xe4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fbda 	bl	8000590 <__aeabi_f2d>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4911      	ldr	r1, [pc, #68]	@ (8000e28 <main+0xe8>)
 8000de2:	4812      	ldr	r0, [pc, #72]	@ (8000e2c <main+0xec>)
 8000de4:	f003 f94e 	bl	8004084 <siprintf>
		uartx_write_text(&huart1, x);
 8000de8:	4910      	ldr	r1, [pc, #64]	@ (8000e2c <main+0xec>)
 8000dea:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <main+0xd8>)
 8000dec:	f000 facb 	bl	8001386 <uartx_write_text>
		HAL_Delay(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df4:	f000 fb66 	bl	80014c4 <HAL_Delay>
		if(HAL_ADC_PollForConversion(&hadc1,100) == HAL_OK)
 8000df8:	e7bb      	b.n	8000d72 <main+0x32>
 8000dfa:	bf00      	nop
 8000dfc:	f3af 8000 	nop.w
 8000e00:	66666666 	.word	0x66666666
 8000e04:	400a6666 	.word	0x400a6666
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40affe00 	.word	0x40affe00
 8000e10:	200001f0 	.word	0x200001f0
 8000e14:	080078f8 	.word	0x080078f8
 8000e18:	20000220 	.word	0x20000220
 8000e1c:	2000027c 	.word	0x2000027c
 8000e20:	42c80000 	.word	0x42c80000
 8000e24:	20000280 	.word	0x20000280
 8000e28:	08007908 	.word	0x08007908
 8000e2c:	20000268 	.word	0x20000268

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b094      	sub	sp, #80	@ 0x50
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e3a:	2228      	movs	r2, #40	@ 0x28
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 f983 	bl	800414a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	2301      	movs	r3, #1
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e68:	2310      	movs	r3, #16
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fa8b 	bl	8002390 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e80:	f000 f8bc 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fcf8 	bl	8002894 <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000eaa:	f000 f8a7 	bl	8000ffc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fe79 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ec4:	f000 f89a 	bl	8000ffc <Error_Handler>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3750      	adds	r7, #80	@ 0x50
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000ee2:	4a19      	ldr	r2, [pc, #100]	@ (8000f48 <MX_ADC1_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000efa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000efe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0c:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000f0e:	f000 fafd 	bl	800150c <HAL_ADC_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f18:	f000 f870 	bl	8000ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_ADC1_Init+0x74>)
 8000f2e:	f000 fd85 	bl	8001a3c <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f38:	f000 f860 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001f0 	.word	0x200001f0
 8000f48:	40012400 	.word	0x40012400

08000f4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <MX_USART1_UART_Init+0x50>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f58:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_USART1_UART_Init+0x4c>)
 8000f84:	f001 ff80 	bl	8002e88 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f8e:	f000 f835 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000220 	.word	0x20000220
 8000f9c:	40013800 	.word	0x40013800

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <MX_GPIO_Init+0x58>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <Error_Handler+0x8>

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_MspInit+0x5c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <HAL_MspInit+0x5c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_MspInit+0x5c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <HAL_MspInit+0x5c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_MspInit+0x5c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_MspInit+0x5c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_MspInit+0x60>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_MspInit+0x60>)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000

0800106c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <HAL_ADC_MspInit+0x6c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d121      	bne.n	80010d0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <HAL_ADC_MspInit+0x70>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <HAL_ADC_MspInit+0x70>)
 8001092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <HAL_ADC_MspInit+0x70>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <HAL_ADC_MspInit+0x70>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <HAL_ADC_MspInit+0x70>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_ADC_MspInit+0x70>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010bc:	2301      	movs	r3, #1
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c0:	2303      	movs	r3, #3
 80010c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_ADC_MspInit+0x74>)
 80010cc:	f000 ffdc 	bl	8002088 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40012400 	.word	0x40012400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010c00 	.word	0x40010c00

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001170 <HAL_UART_MspInit+0x8c>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d131      	bne.n	8001168 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <HAL_UART_MspInit+0x90>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a1a      	ldr	r2, [pc, #104]	@ (8001174 <HAL_UART_MspInit+0x90>)
 800110a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <HAL_UART_MspInit+0x90>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_UART_MspInit+0x90>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <HAL_UART_MspInit+0x90>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_UART_MspInit+0x90>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4619      	mov	r1, r3
 8001148:	480b      	ldr	r0, [pc, #44]	@ (8001178 <HAL_UART_MspInit+0x94>)
 800114a:	f000 ff9d 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800114e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <HAL_UART_MspInit+0x94>)
 8001164:	f000 ff90 	bl	8002088 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40013800 	.word	0x40013800
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <MemManage_Handler+0x4>

08001194 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f95e 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return 1;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <_kill>:

int _kill(int pid, int sig)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ec:	f003 f800 	bl	80041f0 <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2216      	movs	r2, #22
 80011f4:	601a      	str	r2, [r3, #0]
  return -1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_exit>:

void _exit (int status)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800120a:	f04f 31ff 	mov.w	r1, #4294967295
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffe7 	bl	80011e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <_exit+0x12>

08001218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e00a      	b.n	8001240 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800122a:	f3af 8000 	nop.w
 800122e:	4601      	mov	r1, r0
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbf0      	blt.n	800122a <_read+0x12>
  }

  return len;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e009      	b.n	8001278 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	60ba      	str	r2, [r7, #8]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbf1      	blt.n	8001264 <_write+0x12>
  }
  return len;
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_close>:

int _close(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b0:	605a      	str	r2, [r3, #4]
  return 0;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <_isatty>:

int _isatty(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b085      	sub	sp, #20
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d207      	bcs.n	800132c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800131c:	f002 ff68 	bl	80041f0 <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	220c      	movs	r2, #12
 8001324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e009      	b.n	8001340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <_sbrk+0x64>)
 800133c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20005000 	.word	0x20005000
 800134c:	00000400 	.word	0x00000400
 8001350:	20000284 	.word	0x20000284
 8001354:	200003d8 	.word	0x200003d8

08001358 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <uartx_write>:

#include "uart.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 8001370:	1cf9      	adds	r1, r7, #3
 8001372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001376:	2201      	movs	r2, #1
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f001 fdd5 	bl	8002f28 <HAL_UART_Transmit>

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 8001390:	e007      	b.n	80013a2 <uartx_write_text+0x1c>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	603a      	str	r2, [r7, #0]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe1 	bl	8001364 <uartx_write>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f3      	bne.n	8001392 <uartx_write_text+0xc>

}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b4:	f7ff ffd0 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ba:	490c      	ldr	r1, [pc, #48]	@ (80013ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013bc:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a09      	ldr	r2, [pc, #36]	@ (80013f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013d0:	4c09      	ldr	r4, [pc, #36]	@ (80013f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f002 ff0d 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e2:	f7ff fcad 	bl	8000d40 <main>
  bx lr
 80013e6:	4770      	bx	lr
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80013f0:	08007d98 	.word	0x08007d98
  ldr r2, =_sbss
 80013f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80013f8:	200003d8 	.word	0x200003d8

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <HAL_Init+0x28>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	@ (8001428 <HAL_Init+0x28>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 fe05 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff fdf4 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fe0f 	bl	800206e <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 fde5 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	20000008 	.word	0x20000008
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <HAL_IncTick+0x1c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_IncTick+0x20>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a03      	ldr	r2, [pc, #12]	@ (80014ac <HAL_IncTick+0x20>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000288 	.word	0x20000288

080014b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b02      	ldr	r3, [pc, #8]	@ (80014c0 <HAL_GetTick+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000288 	.word	0x20000288

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff fff0 	bl	80014b0 <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <HAL_Delay+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ea:	bf00      	nop
 80014ec:	f7ff ffe0 	bl	80014b0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
  {
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008

0800150c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0be      	b.n	80016ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fd8e 	bl	800106c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 fbc5 	bl	8001ce0 <ADC_ConversionStop_Disable>
 8001556:	4603      	mov	r3, r0
 8001558:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 8099 	bne.w	800169a <HAL_ADC_Init+0x18e>
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8095 	bne.w	800169a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001574:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001578:	f023 0302 	bic.w	r3, r3, #2
 800157c:	f043 0202 	orr.w	r2, r3, #2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800158c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7b1b      	ldrb	r3, [r3, #12]
 8001592:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001594:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	4313      	orrs	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015a4:	d003      	beq.n	80015ae <HAL_ADC_Init+0xa2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <HAL_ADC_Init+0xa8>
 80015ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b2:	e000      	b.n	80015b6 <HAL_ADC_Init+0xaa>
 80015b4:	2300      	movs	r3, #0
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7d1b      	ldrb	r3, [r3, #20]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d119      	bne.n	80015f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7b1b      	ldrb	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	035a      	lsls	r2, r3, #13
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	e00b      	b.n	80015f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	f043 0220 	orr.w	r2, r3, #32
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	430a      	orrs	r2, r1
 800160a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <HAL_ADC_Init+0x1a8>)
 8001614:	4013      	ands	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	430b      	orrs	r3, r1
 800161e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001628:	d003      	beq.n	8001632 <HAL_ADC_Init+0x126>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d104      	bne.n	800163c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	3b01      	subs	r3, #1
 8001638:	051b      	lsls	r3, r3, #20
 800163a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001642:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	430a      	orrs	r2, r1
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_ADC_Init+0x1ac>)
 8001658:	4013      	ands	r3, r2
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	429a      	cmp	r2, r3
 800165e:	d10b      	bne.n	8001678 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166a:	f023 0303 	bic.w	r3, r3, #3
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001676:	e018      	b.n	80016aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	f023 0312 	bic.w	r3, r3, #18
 8001680:	f043 0210 	orr.w	r2, r3, #16
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001698:	e007      	b.n	80016aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	f043 0210 	orr.w	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	ffe1f7fd 	.word	0xffe1f7fd
 80016b8:	ff1f0efe 	.word	0xff1f0efe

080016bc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_Start+0x1a>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e098      	b.n	8001808 <HAL_ADC_Start+0x14c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 faa4 	bl	8001c2c <ADC_Enable>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 8087 	bne.w	80017fe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a41      	ldr	r2, [pc, #260]	@ (8001810 <HAL_ADC_Start+0x154>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d105      	bne.n	800171a <HAL_ADC_Start+0x5e>
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_ADC_Start+0x158>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d026      	beq.n	8001782 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001738:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800173c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001744:	e01d      	b.n	8001782 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2f      	ldr	r2, [pc, #188]	@ (8001814 <HAL_ADC_Start+0x158>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d004      	beq.n	8001766 <HAL_ADC_Start+0xaa>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2b      	ldr	r2, [pc, #172]	@ (8001810 <HAL_ADC_Start+0x154>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10d      	bne.n	8001782 <HAL_ADC_Start+0xc6>
 8001766:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_ADC_Start+0x158>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001776:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800177a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	f023 0206 	bic.w	r2, r3, #6
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	62da      	str	r2, [r3, #44]	@ 0x2c
 800179a:	e002      	b.n	80017a2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f06f 0202 	mvn.w	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017be:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017c2:	d113      	bne.n	80017ec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017c8:	4a11      	ldr	r2, [pc, #68]	@ (8001810 <HAL_ADC_Start+0x154>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d105      	bne.n	80017da <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_ADC_Start+0x158>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d108      	bne.n	80017ec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	e00c      	b.n	8001806 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e003      	b.n	8001806 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40012800 	.word	0x40012800
 8001814:	40012400 	.word	0x40012400

08001818 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800182e:	f7ff fe3f 	bl	80014b0 <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	f043 0220 	orr.w	r2, r3, #32
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0d3      	b.n	8001a02 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d131      	bne.n	80018cc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001872:	2b00      	cmp	r3, #0
 8001874:	d12a      	bne.n	80018cc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001876:	e021      	b.n	80018bc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187e:	d01d      	beq.n	80018bc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_ADC_PollForConversion+0x7e>
 8001886:	f7ff fe13 	bl	80014b0 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d212      	bcs.n	80018bc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10b      	bne.n	80018bc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	f043 0204 	orr.w	r2, r3, #4
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0a2      	b.n	8001a02 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0d6      	beq.n	8001878 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018ca:	e070      	b.n	80019ae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018cc:	4b4f      	ldr	r3, [pc, #316]	@ (8001a0c <HAL_ADC_PollForConversion+0x1f4>)
 80018ce:	681c      	ldr	r4, [r3, #0]
 80018d0:	2002      	movs	r0, #2
 80018d2:	f001 fa23 	bl	8002d1c <HAL_RCCEx_GetPeriphCLKFreq>
 80018d6:	4603      	mov	r3, r0
 80018d8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6919      	ldr	r1, [r3, #16]
 80018e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001a10 <HAL_ADC_PollForConversion+0x1f8>)
 80018e4:	400b      	ands	r3, r1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_ADC_PollForConversion+0x104>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68d9      	ldr	r1, [r3, #12]
 80018f0:	4b48      	ldr	r3, [pc, #288]	@ (8001a14 <HAL_ADC_PollForConversion+0x1fc>)
 80018f2:	400b      	ands	r3, r1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_ADC_PollForConversion+0x104>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6919      	ldr	r1, [r3, #16]
 80018fe:	4b46      	ldr	r3, [pc, #280]	@ (8001a18 <HAL_ADC_PollForConversion+0x200>)
 8001900:	400b      	ands	r3, r1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <HAL_ADC_PollForConversion+0x100>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68d9      	ldr	r1, [r3, #12]
 800190c:	4b43      	ldr	r3, [pc, #268]	@ (8001a1c <HAL_ADC_PollForConversion+0x204>)
 800190e:	400b      	ands	r3, r1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_PollForConversion+0x100>
 8001914:	2314      	movs	r3, #20
 8001916:	e020      	b.n	800195a <HAL_ADC_PollForConversion+0x142>
 8001918:	2329      	movs	r3, #41	@ 0x29
 800191a:	e01e      	b.n	800195a <HAL_ADC_PollForConversion+0x142>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6919      	ldr	r1, [r3, #16]
 8001922:	4b3d      	ldr	r3, [pc, #244]	@ (8001a18 <HAL_ADC_PollForConversion+0x200>)
 8001924:	400b      	ands	r3, r1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_ADC_PollForConversion+0x120>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68d9      	ldr	r1, [r3, #12]
 8001930:	4b3a      	ldr	r3, [pc, #232]	@ (8001a1c <HAL_ADC_PollForConversion+0x204>)
 8001932:	400b      	ands	r3, r1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00d      	beq.n	8001954 <HAL_ADC_PollForConversion+0x13c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6919      	ldr	r1, [r3, #16]
 800193e:	4b38      	ldr	r3, [pc, #224]	@ (8001a20 <HAL_ADC_PollForConversion+0x208>)
 8001940:	400b      	ands	r3, r1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <HAL_ADC_PollForConversion+0x140>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68d9      	ldr	r1, [r3, #12]
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <HAL_ADC_PollForConversion+0x208>)
 800194e:	400b      	ands	r3, r1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_ADC_PollForConversion+0x140>
 8001954:	2354      	movs	r3, #84	@ 0x54
 8001956:	e000      	b.n	800195a <HAL_ADC_PollForConversion+0x142>
 8001958:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001960:	e021      	b.n	80019a6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d01a      	beq.n	80019a0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_ADC_PollForConversion+0x168>
 8001970:	f7ff fd9e 	bl	80014b0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d20f      	bcs.n	80019a0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d90b      	bls.n	80019a0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	f043 0204 	orr.w	r2, r3, #4
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e030      	b.n	8001a02 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d8d9      	bhi.n	8001962 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f06f 0212 	mvn.w	r2, #18
 80019b6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019d2:	d115      	bne.n	8001a00 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	24924924 	.word	0x24924924
 8001a14:	00924924 	.word	0x00924924
 8001a18:	12492492 	.word	0x12492492
 8001a1c:	00492492 	.word	0x00492492
 8001a20:	00249249 	.word	0x00249249

08001a24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x20>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0dc      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x1da>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b06      	cmp	r3, #6
 8001a6a:	d81c      	bhi.n	8001aa6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b05      	subs	r3, #5
 8001a7e:	221f      	movs	r2, #31
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	4019      	ands	r1, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	3b05      	subs	r3, #5
 8001a98:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aa4:	e03c      	b.n	8001b20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d81c      	bhi.n	8001ae8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3b23      	subs	r3, #35	@ 0x23
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	4019      	ands	r1, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b23      	subs	r3, #35	@ 0x23
 8001ada:	fa00 f203 	lsl.w	r2, r0, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ae6:	e01b      	b.n	8001b20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	3b41      	subs	r3, #65	@ 0x41
 8001afa:	221f      	movs	r2, #31
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4019      	ands	r1, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b41      	subs	r3, #65	@ 0x41
 8001b14:	fa00 f203 	lsl.w	r2, r0, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b09      	cmp	r3, #9
 8001b26:	d91c      	bls.n	8001b62 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68d9      	ldr	r1, [r3, #12]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	3b1e      	subs	r3, #30
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4019      	ands	r1, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6898      	ldr	r0, [r3, #8]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	3b1e      	subs	r3, #30
 8001b54:	fa00 f203 	lsl.w	r2, r0, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	e019      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6919      	ldr	r1, [r3, #16]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4019      	ands	r1, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6898      	ldr	r0, [r3, #8]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d003      	beq.n	8001ba6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ba2:	2b11      	cmp	r3, #17
 8001ba4:	d132      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1d      	ldr	r2, [pc, #116]	@ (8001c20 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d125      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d126      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001bcc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d11a      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd6:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a13      	ldr	r2, [pc, #76]	@ (8001c28 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9a      	lsrs	r2, r3, #18
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x1b2>
 8001bfa:	e007      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	f043 0220 	orr.w	r2, r3, #32
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	40012400 	.word	0x40012400
 8001c24:	20000000 	.word	0x20000000
 8001c28:	431bde83 	.word	0x431bde83

08001c2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d040      	beq.n	8001ccc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <ADC_Enable+0xac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cdc <ADC_Enable+0xb0>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c68:	e002      	b.n	8001c70 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f9      	bne.n	8001c6a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c76:	f7ff fc1b 	bl	80014b0 <HAL_GetTick>
 8001c7a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c7c:	e01f      	b.n	8001cbe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c7e:	f7ff fc17 	bl	80014b0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d918      	bls.n	8001cbe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d011      	beq.n	8001cbe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9e:	f043 0210 	orr.w	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e007      	b.n	8001cce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d1d8      	bne.n	8001c7e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	431bde83 	.word	0x431bde83

08001ce0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d12e      	bne.n	8001d58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d0a:	f7ff fbd1 	bl	80014b0 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d10:	e01b      	b.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d12:	f7ff fbcd 	bl	80014b0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d914      	bls.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10d      	bne.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e007      	b.n	8001d5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d0dc      	beq.n	8001d12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADCEx_Calibration_Start+0x1e>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e097      	b.n	8001eb2 <HAL_ADCEx_Calibration_Start+0x14e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ADC_ConversionStop_Disable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff49 	bl	8001c2c <ADC_Enable>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 8081 	bne.w	8001ea8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dae:	f023 0302 	bic.w	r3, r3, #2
 8001db2:	f043 0202 	orr.w	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001dba:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <HAL_ADCEx_Calibration_Start+0x158>)
 8001dbc:	681c      	ldr	r4, [r3, #0]
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f000 ffac 	bl	8002d1c <HAL_RCCEx_GetPeriphCLKFreq>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001dca:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001dcc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001dce:	e002      	b.n	8001dd6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f9      	bne.n	8001dd0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0208 	orr.w	r2, r2, #8
 8001dea:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001dec:	f7ff fb60 	bl	80014b0 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001df2:	e01b      	b.n	8001e2c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001df4:	f7ff fb5c 	bl	80014b0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b0a      	cmp	r3, #10
 8001e00:	d914      	bls.n	8001e2c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00d      	beq.n	8001e2c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	f023 0312 	bic.w	r3, r3, #18
 8001e18:	f043 0210 	orr.w	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e042      	b.n	8001eb2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1dc      	bne.n	8001df4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0204 	orr.w	r2, r2, #4
 8001e48:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e4a:	f7ff fb31 	bl	80014b0 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e50:	e01b      	b.n	8001e8a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e52:	f7ff fb2d 	bl	80014b0 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	d914      	bls.n	8001e8a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	f023 0312 	bic.w	r3, r3, #18
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e013      	b.n	8001eb2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1dc      	bne.n	8001e52 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f023 0303 	bic.w	r3, r3, #3
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	@ (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	@ 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff90 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	@ (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff49 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff5e 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff90 	bl	8001f78 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff5f 	bl	8001f24 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffb0 	bl	8001fdc <SysTick_Config>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b08b      	sub	sp, #44	@ 0x2c
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209a:	e169      	b.n	8002370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800209c:	2201      	movs	r2, #1
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f040 8158 	bne.w	800236a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a9a      	ldr	r2, [pc, #616]	@ (8002328 <HAL_GPIO_Init+0x2a0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d05e      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020c4:	4a98      	ldr	r2, [pc, #608]	@ (8002328 <HAL_GPIO_Init+0x2a0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d875      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020ca:	4a98      	ldr	r2, [pc, #608]	@ (800232c <HAL_GPIO_Init+0x2a4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d058      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020d0:	4a96      	ldr	r2, [pc, #600]	@ (800232c <HAL_GPIO_Init+0x2a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d86f      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020d6:	4a96      	ldr	r2, [pc, #600]	@ (8002330 <HAL_GPIO_Init+0x2a8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d052      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020dc:	4a94      	ldr	r2, [pc, #592]	@ (8002330 <HAL_GPIO_Init+0x2a8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d869      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020e2:	4a94      	ldr	r2, [pc, #592]	@ (8002334 <HAL_GPIO_Init+0x2ac>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04c      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020e8:	4a92      	ldr	r2, [pc, #584]	@ (8002334 <HAL_GPIO_Init+0x2ac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d863      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020ee:	4a92      	ldr	r2, [pc, #584]	@ (8002338 <HAL_GPIO_Init+0x2b0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d046      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020f4:	4a90      	ldr	r2, [pc, #576]	@ (8002338 <HAL_GPIO_Init+0x2b0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d85d      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d82a      	bhi.n	8002154 <HAL_GPIO_Init+0xcc>
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d859      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 8002102:	a201      	add	r2, pc, #4	@ (adr r2, 8002108 <HAL_GPIO_Init+0x80>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002183 	.word	0x08002183
 800210c:	0800215d 	.word	0x0800215d
 8002110:	0800216f 	.word	0x0800216f
 8002114:	080021b1 	.word	0x080021b1
 8002118:	080021b7 	.word	0x080021b7
 800211c:	080021b7 	.word	0x080021b7
 8002120:	080021b7 	.word	0x080021b7
 8002124:	080021b7 	.word	0x080021b7
 8002128:	080021b7 	.word	0x080021b7
 800212c:	080021b7 	.word	0x080021b7
 8002130:	080021b7 	.word	0x080021b7
 8002134:	080021b7 	.word	0x080021b7
 8002138:	080021b7 	.word	0x080021b7
 800213c:	080021b7 	.word	0x080021b7
 8002140:	080021b7 	.word	0x080021b7
 8002144:	080021b7 	.word	0x080021b7
 8002148:	080021b7 	.word	0x080021b7
 800214c:	08002165 	.word	0x08002165
 8002150:	08002179 	.word	0x08002179
 8002154:	4a79      	ldr	r2, [pc, #484]	@ (800233c <HAL_GPIO_Init+0x2b4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800215a:	e02c      	b.n	80021b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e029      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	3304      	adds	r3, #4
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e024      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	3308      	adds	r3, #8
 8002174:	623b      	str	r3, [r7, #32]
          break;
 8002176:	e01f      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	330c      	adds	r3, #12
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e01a      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800218a:	2304      	movs	r3, #4
 800218c:	623b      	str	r3, [r7, #32]
          break;
 800218e:	e013      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002198:	2308      	movs	r3, #8
 800219a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	611a      	str	r2, [r3, #16]
          break;
 80021a2:	e009      	b.n	80021b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a4:	2308      	movs	r3, #8
 80021a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	615a      	str	r2, [r3, #20]
          break;
 80021ae:	e003      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          break;
 80021b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2bff      	cmp	r3, #255	@ 0xff
 80021bc:	d801      	bhi.n	80021c2 <HAL_GPIO_Init+0x13a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_Init+0x13e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2bff      	cmp	r3, #255	@ 0xff
 80021cc:	d802      	bhi.n	80021d4 <HAL_GPIO_Init+0x14c>
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x152>
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	3b08      	subs	r3, #8
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	210f      	movs	r1, #15
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	401a      	ands	r2, r3
 80021ec:	6a39      	ldr	r1, [r7, #32]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80b1 	beq.w	800236a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002208:	4b4d      	ldr	r3, [pc, #308]	@ (8002340 <HAL_GPIO_Init+0x2b8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a4c      	ldr	r2, [pc, #304]	@ (8002340 <HAL_GPIO_Init+0x2b8>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_GPIO_Init+0x2b8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002220:	4a48      	ldr	r2, [pc, #288]	@ (8002344 <HAL_GPIO_Init+0x2bc>)
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a40      	ldr	r2, [pc, #256]	@ (8002348 <HAL_GPIO_Init+0x2c0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_GPIO_Init+0x1ec>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3f      	ldr	r2, [pc, #252]	@ (800234c <HAL_GPIO_Init+0x2c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00d      	beq.n	8002270 <HAL_GPIO_Init+0x1e8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3e      	ldr	r2, [pc, #248]	@ (8002350 <HAL_GPIO_Init+0x2c8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <HAL_GPIO_Init+0x1e4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3d      	ldr	r2, [pc, #244]	@ (8002354 <HAL_GPIO_Init+0x2cc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_GPIO_Init+0x1e0>
 8002264:	2303      	movs	r3, #3
 8002266:	e006      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002268:	2304      	movs	r3, #4
 800226a:	e004      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 800226c:	2302      	movs	r3, #2
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002274:	2300      	movs	r3, #0
 8002276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4093      	lsls	r3, r2
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002286:	492f      	ldr	r1, [pc, #188]	@ (8002344 <HAL_GPIO_Init+0x2bc>)
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	492c      	ldr	r1, [pc, #176]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4928      	ldr	r1, [pc, #160]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	4922      	ldr	r1, [pc, #136]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	43db      	mvns	r3, r3
 80022de:	491e      	ldr	r1, [pc, #120]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4918      	ldr	r1, [pc, #96]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022fe:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	43db      	mvns	r3, r3
 8002306:	4914      	ldr	r1, [pc, #80]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 8002308:	4013      	ands	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d021      	beq.n	800235c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	490e      	ldr	r1, [pc, #56]	@ (8002358 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
 8002324:	e021      	b.n	800236a <HAL_GPIO_Init+0x2e2>
 8002326:	bf00      	nop
 8002328:	10320000 	.word	0x10320000
 800232c:	10310000 	.word	0x10310000
 8002330:	10220000 	.word	0x10220000
 8002334:	10210000 	.word	0x10210000
 8002338:	10120000 	.word	0x10120000
 800233c:	10110000 	.word	0x10110000
 8002340:	40021000 	.word	0x40021000
 8002344:	40010000 	.word	0x40010000
 8002348:	40010800 	.word	0x40010800
 800234c:	40010c00 	.word	0x40010c00
 8002350:	40011000 	.word	0x40011000
 8002354:	40011400 	.word	0x40011400
 8002358:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_GPIO_Init+0x304>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	43db      	mvns	r3, r3
 8002364:	4909      	ldr	r1, [pc, #36]	@ (800238c <HAL_GPIO_Init+0x304>)
 8002366:	4013      	ands	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	f47f ae8e 	bne.w	800209c <HAL_GPIO_Init+0x14>
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	372c      	adds	r7, #44	@ 0x2c
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	40010400 	.word	0x40010400

08002390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e272      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b0:	4b92      	ldr	r3, [pc, #584]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d00c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023bc:	4b8f      	ldr	r3, [pc, #572]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d112      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
 80023c8:	4b8c      	ldr	r3, [pc, #560]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d4:	d10b      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d6:	4b89      	ldr	r3, [pc, #548]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06c      	beq.n	80024bc <HAL_RCC_OscConfig+0x12c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d168      	bne.n	80024bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e24c      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x76>
 80023f8:	4b80      	ldr	r3, [pc, #512]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a7f      	ldr	r2, [pc, #508]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e02e      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x98>
 800240e:	4b7b      	ldr	r3, [pc, #492]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7a      	ldr	r2, [pc, #488]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b78      	ldr	r3, [pc, #480]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a77      	ldr	r2, [pc, #476]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002420:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e01d      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0xbc>
 8002432:	4b72      	ldr	r3, [pc, #456]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a71      	ldr	r2, [pc, #452]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b6f      	ldr	r3, [pc, #444]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a6e      	ldr	r2, [pc, #440]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 800244c:	4b6b      	ldr	r3, [pc, #428]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6a      	ldr	r2, [pc, #424]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b68      	ldr	r3, [pc, #416]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a67      	ldr	r2, [pc, #412]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002462:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff f820 	bl	80014b0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff f81c 	bl	80014b0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e200      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b5d      	ldr	r3, [pc, #372]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0xe4>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7ff f80c 	bl	80014b0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff f808 	bl	80014b0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1ec      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b53      	ldr	r3, [pc, #332]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x10c>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d063      	beq.n	8002592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ca:	4b4c      	ldr	r3, [pc, #304]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024d6:	4b49      	ldr	r3, [pc, #292]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11c      	bne.n	800251c <HAL_RCC_OscConfig+0x18c>
 80024e2:	4b46      	ldr	r3, [pc, #280]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d116      	bne.n	800251c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	4b43      	ldr	r3, [pc, #268]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x176>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1c0      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b3d      	ldr	r3, [pc, #244]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4939      	ldr	r1, [pc, #228]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	e03a      	b.n	8002592 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002524:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe ffc1 	bl	80014b0 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7fe ffbd 	bl	80014b0 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e1a1      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b2a      	ldr	r3, [pc, #168]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4927      	ldr	r1, [pc, #156]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]
 8002564:	e015      	b.n	8002592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002566:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <HAL_RCC_OscConfig+0x270>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe ffa0 	bl	80014b0 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7fe ff9c 	bl	80014b0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e180      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03a      	beq.n	8002614 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d019      	beq.n	80025da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a6:	4b17      	ldr	r3, [pc, #92]	@ (8002604 <HAL_RCC_OscConfig+0x274>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7fe ff80 	bl	80014b0 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7fe ff7c 	bl	80014b0 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e160      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	4b0d      	ldr	r3, [pc, #52]	@ (80025fc <HAL_RCC_OscConfig+0x26c>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f000 face 	bl	8002b74 <RCC_Delay>
 80025d8:	e01c      	b.n	8002614 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_RCC_OscConfig+0x274>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe ff66 	bl	80014b0 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e6:	e00f      	b.n	8002608 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7fe ff62 	bl	80014b0 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e146      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	42420000 	.word	0x42420000
 8002604:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b92      	ldr	r3, [pc, #584]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e9      	bne.n	80025e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a6 	beq.w	800276e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b8b      	ldr	r3, [pc, #556]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	4b88      	ldr	r3, [pc, #544]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4a87      	ldr	r2, [pc, #540]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263c:	61d3      	str	r3, [r2, #28]
 800263e:	4b85      	ldr	r3, [pc, #532]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <HAL_RCC_OscConfig+0x4c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d118      	bne.n	800268c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b7f      	ldr	r3, [pc, #508]	@ (8002858 <HAL_RCC_OscConfig+0x4c8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7e      	ldr	r2, [pc, #504]	@ (8002858 <HAL_RCC_OscConfig+0x4c8>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7fe ff23 	bl	80014b0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7fe ff1f 	bl	80014b0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b64      	cmp	r3, #100	@ 0x64
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e103      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	4b75      	ldr	r3, [pc, #468]	@ (8002858 <HAL_RCC_OscConfig+0x4c8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x312>
 8002694:	4b6f      	ldr	r3, [pc, #444]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a6e      	ldr	r2, [pc, #440]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	e02d      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x334>
 80026aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a69      	ldr	r2, [pc, #420]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b67      	ldr	r3, [pc, #412]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a66      	ldr	r2, [pc, #408]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	e01c      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x356>
 80026cc:	4b61      	ldr	r3, [pc, #388]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a60      	ldr	r2, [pc, #384]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e00b      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	4b58      	ldr	r3, [pc, #352]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a57      	ldr	r2, [pc, #348]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe fed3 	bl	80014b0 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fecf 	bl	80014b0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0b1      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCC_OscConfig+0x37e>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe febd 	bl	80014b0 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe feb9 	bl	80014b0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e09b      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4b40      	ldr	r3, [pc, #256]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b3c      	ldr	r3, [pc, #240]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a3b      	ldr	r2, [pc, #236]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800276c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8087 	beq.w	8002886 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002778:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d061      	beq.n	8002848 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d146      	bne.n	800281a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_RCC_OscConfig+0x4cc>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe fe8d 	bl	80014b0 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fe89 	bl	80014b0 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e06d      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ac:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027c2:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4921      	ldr	r1, [pc, #132]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a19      	ldr	r1, [r3, #32]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	430b      	orrs	r3, r1
 80027e6:	491b      	ldr	r1, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fe5d 	bl	80014b0 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fe59 	bl	80014b0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e03d      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x46a>
 8002818:	e035      	b.n	8002886 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCC_OscConfig+0x4cc>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fe46 	bl	80014b0 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fe42 	bl	80014b0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e026      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x498>
 8002846:	e01e      	b.n	8002886 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e019      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
 800285c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002860:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_RCC_OscConfig+0x500>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	429a      	cmp	r2, r3
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0d0      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d910      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b67      	ldr	r3, [pc, #412]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4965      	ldr	r1, [pc, #404]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b63      	ldr	r3, [pc, #396]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0b8      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f0:	4b59      	ldr	r3, [pc, #356]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a58      	ldr	r2, [pc, #352]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002908:	4b53      	ldr	r3, [pc, #332]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a52      	ldr	r2, [pc, #328]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002912:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b50      	ldr	r3, [pc, #320]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	494d      	ldr	r1, [pc, #308]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d040      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b47      	ldr	r3, [pc, #284]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d115      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e07f      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b41      	ldr	r3, [pc, #260]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e073      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	4b3d      	ldr	r3, [pc, #244]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06b      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b39      	ldr	r3, [pc, #228]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4936      	ldr	r1, [pc, #216]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002984:	f7fe fd94 	bl	80014b0 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fe fd90 	bl	80014b0 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e053      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b27      	ldr	r3, [pc, #156]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d210      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b24      	ldr	r3, [pc, #144]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	4922      	ldr	r1, [pc, #136]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e032      	b.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4916      	ldr	r1, [pc, #88]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	490e      	ldr	r1, [pc, #56]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a22:	f000 f821 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	490a      	ldr	r1, [pc, #40]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a34:	5ccb      	ldrb	r3, [r1, r3]
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	4a09      	ldr	r2, [pc, #36]	@ (8002a60 <HAL_RCC_ClockConfig+0x1cc>)
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3e:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <HAL_RCC_ClockConfig+0x1d0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fcf2 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	08007918 	.word	0x08007918
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a82:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x94>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d002      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x30>
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x36>
 8002a96:	e027      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a98:	4b19      	ldr	r3, [pc, #100]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9a:	613b      	str	r3, [r7, #16]
      break;
 8002a9c:	e027      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	0c9b      	lsrs	r3, r3, #18
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	4a17      	ldr	r2, [pc, #92]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002aa8:	5cd3      	ldrb	r3, [r2, r3]
 8002aaa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d010      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ab6:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	0c5b      	lsrs	r3, r3, #17
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	4a11      	ldr	r2, [pc, #68]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aca:	fb03 f202 	mul.w	r2, r3, r2
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e004      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	613b      	str	r3, [r7, #16]
      break;
 8002ae6:	e002      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aea:	613b      	str	r3, [r7, #16]
      break;
 8002aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aee:	693b      	ldr	r3, [r7, #16]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	007a1200 	.word	0x007a1200
 8002b04:	08007930 	.word	0x08007930
 8002b08:	08007940 	.word	0x08007940
 8002b0c:	003d0900 	.word	0x003d0900

08002b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b14:	4b02      	ldr	r3, [pc, #8]	@ (8002b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	20000000 	.word	0x20000000

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b28:	f7ff fff2 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	@ (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08007928 	.word	0x08007928

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b50:	f7ff ffde 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	0adb      	lsrs	r3, r3, #11
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	@ (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08007928 	.word	0x08007928

08002b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <RCC_Delay+0x34>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	@ (8002bac <RCC_Delay+0x38>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0a5b      	lsrs	r3, r3, #9
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b90:	bf00      	nop
  }
  while (Delay --);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e5a      	subs	r2, r3, #1
 8002b96:	60fa      	str	r2, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f9      	bne.n	8002b90 <RCC_Delay+0x1c>
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	10624dd3 	.word	0x10624dd3

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d07d      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	4a4b      	ldr	r2, [pc, #300]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	61d3      	str	r3, [r2, #28]
 8002be8:	4b49      	ldr	r3, [pc, #292]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	4b46      	ldr	r3, [pc, #280]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d118      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c04:	4b43      	ldr	r3, [pc, #268]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a42      	ldr	r2, [pc, #264]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c10:	f7fe fc4e 	bl	80014b0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	e008      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7fe fc4a 	bl	80014b0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	@ 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e06d      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c36:	4b36      	ldr	r3, [pc, #216]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d02e      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d027      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c54:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c64:	4b2c      	ldr	r3, [pc, #176]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c6a:	4a29      	ldr	r2, [pc, #164]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d014      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fc19 	bl	80014b0 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fc15 	bl	80014b0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e036      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ee      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4917      	ldr	r1, [pc, #92]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	4a13      	ldr	r2, [pc, #76]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	490b      	ldr	r1, [pc, #44]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	4904      	ldr	r1, [pc, #16]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	42420440 	.word	0x42420440

08002d1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	f200 808a 	bhi.w	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d045      	beq.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d075      	beq.n	8002e3e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d52:	e082      	b.n	8002e5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002d54:	4b46      	ldr	r3, [pc, #280]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d5a:	4b45      	ldr	r3, [pc, #276]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d07b      	beq.n	8002e5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a41      	ldr	r2, [pc, #260]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0c5b      	lsrs	r3, r3, #17
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	4a3b      	ldr	r2, [pc, #236]	@ (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d98:	4a38      	ldr	r2, [pc, #224]	@ (8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e004      	b.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4a34      	ldr	r2, [pc, #208]	@ (8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002db4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	61bb      	str	r3, [r7, #24]
      break;
 8002dc6:	e04a      	b.n	8002e5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
      break;
 8002dd6:	e042      	b.n	8002e5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002dd8:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002de8:	d108      	bne.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002df4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e01f      	b.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e06:	d109      	bne.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002e14:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e00f      	b.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e26:	d11c      	bne.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002e34:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002e38:	61bb      	str	r3, [r7, #24]
      break;
 8002e3a:	e012      	b.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e3c:	e011      	b.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e3e:	f7ff fe85 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8002e42:	4602      	mov	r2, r0
 8002e44:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	0b9b      	lsrs	r3, r3, #14
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	61bb      	str	r3, [r7, #24]
      break;
 8002e58:	e004      	b.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e62:	bf00      	nop
    }
  }
  return (frequency);
 8002e64:	69bb      	ldr	r3, [r7, #24]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	08007944 	.word	0x08007944
 8002e78:	08007954 	.word	0x08007954
 8002e7c:	007a1200 	.word	0x007a1200
 8002e80:	003d0900 	.word	0x003d0900
 8002e84:	aaaaaaab 	.word	0xaaaaaaab

08002e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e042      	b.n	8002f20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe f918 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	@ 0x24
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f91d 	bl	800310c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	@ 0x28
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d16d      	bne.n	8003024 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_UART_Transmit+0x2c>
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e066      	b.n	8003026 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2221      	movs	r2, #33	@ 0x21
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f66:	f7fe faa3 	bl	80014b0 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	88fa      	ldrh	r2, [r7, #6]
 8002f76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f80:	d108      	bne.n	8002f94 <HAL_UART_Transmit+0x6c>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	e003      	b.n	8002f9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f9c:	e02a      	b.n	8002ff4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2180      	movs	r1, #128	@ 0x80
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f840 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e036      	b.n	8003026 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	e007      	b.n	8002fe6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1cf      	bne.n	8002f9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	2140      	movs	r1, #64	@ 0x40
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f810 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e006      	b.n	8003026 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b090      	sub	sp, #64	@ 0x40
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303e:	e050      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d04c      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x30>
 800304e:	f7fe fa2f 	bl	80014b0 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800305a:	429a      	cmp	r2, r3
 800305c:	d241      	bcs.n	80030e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	330c      	adds	r3, #12
 800307c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800307e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003080:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800308c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e5      	bne.n	800305e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3314      	adds	r3, #20
 8003098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	613b      	str	r3, [r7, #16]
   return(result);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030b2:	623a      	str	r2, [r7, #32]
 80030b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	69f9      	ldr	r1, [r7, #28]
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	61bb      	str	r3, [r7, #24]
   return(result);
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e5      	bne.n	8003092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e00f      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d09f      	beq.n	8003040 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3740      	adds	r7, #64	@ 0x40
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003146:	f023 030c 	bic.w	r3, r3, #12
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	430b      	orrs	r3, r1
 8003152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2c      	ldr	r2, [pc, #176]	@ (8003220 <UART_SetConfig+0x114>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d103      	bne.n	800317c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff fcea 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	e002      	b.n	8003182 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7ff fcd2 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8003180:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009a      	lsls	r2, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	4a22      	ldr	r2, [pc, #136]	@ (8003224 <UART_SetConfig+0x118>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	0119      	lsls	r1, r3, #4
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009a      	lsls	r2, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <UART_SetConfig+0x118>)
 80031ba:	fba3 0302 	umull	r0, r3, r3, r2
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2064      	movs	r0, #100	@ 0x64
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	3332      	adds	r3, #50	@ 0x32
 80031cc:	4a15      	ldr	r2, [pc, #84]	@ (8003224 <UART_SetConfig+0x118>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031d8:	4419      	add	r1, r3
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009a      	lsls	r2, r3, #2
 80031e4:	441a      	add	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <UART_SetConfig+0x118>)
 80031f2:	fba3 0302 	umull	r0, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	2064      	movs	r0, #100	@ 0x64
 80031fa:	fb00 f303 	mul.w	r3, r0, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	3332      	adds	r3, #50	@ 0x32
 8003204:	4a07      	ldr	r2, [pc, #28]	@ (8003224 <UART_SetConfig+0x118>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	440a      	add	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40013800 	.word	0x40013800
 8003224:	51eb851f 	.word	0x51eb851f

08003228 <__cvt>:
 8003228:	2b00      	cmp	r3, #0
 800322a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800322e:	461d      	mov	r5, r3
 8003230:	bfbb      	ittet	lt
 8003232:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003236:	461d      	movlt	r5, r3
 8003238:	2300      	movge	r3, #0
 800323a:	232d      	movlt	r3, #45	@ 0x2d
 800323c:	b088      	sub	sp, #32
 800323e:	4614      	mov	r4, r2
 8003240:	bfb8      	it	lt
 8003242:	4614      	movlt	r4, r2
 8003244:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003246:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003248:	7013      	strb	r3, [r2, #0]
 800324a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800324c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003250:	f023 0820 	bic.w	r8, r3, #32
 8003254:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003258:	d005      	beq.n	8003266 <__cvt+0x3e>
 800325a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800325e:	d100      	bne.n	8003262 <__cvt+0x3a>
 8003260:	3601      	adds	r6, #1
 8003262:	2302      	movs	r3, #2
 8003264:	e000      	b.n	8003268 <__cvt+0x40>
 8003266:	2303      	movs	r3, #3
 8003268:	aa07      	add	r2, sp, #28
 800326a:	9204      	str	r2, [sp, #16]
 800326c:	aa06      	add	r2, sp, #24
 800326e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003272:	e9cd 3600 	strd	r3, r6, [sp]
 8003276:	4622      	mov	r2, r4
 8003278:	462b      	mov	r3, r5
 800327a:	f001 f881 	bl	8004380 <_dtoa_r>
 800327e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003282:	4607      	mov	r7, r0
 8003284:	d119      	bne.n	80032ba <__cvt+0x92>
 8003286:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003288:	07db      	lsls	r3, r3, #31
 800328a:	d50e      	bpl.n	80032aa <__cvt+0x82>
 800328c:	eb00 0906 	add.w	r9, r0, r6
 8003290:	2200      	movs	r2, #0
 8003292:	2300      	movs	r3, #0
 8003294:	4620      	mov	r0, r4
 8003296:	4629      	mov	r1, r5
 8003298:	f7fd fc3a 	bl	8000b10 <__aeabi_dcmpeq>
 800329c:	b108      	cbz	r0, 80032a2 <__cvt+0x7a>
 800329e:	f8cd 901c 	str.w	r9, [sp, #28]
 80032a2:	2230      	movs	r2, #48	@ 0x30
 80032a4:	9b07      	ldr	r3, [sp, #28]
 80032a6:	454b      	cmp	r3, r9
 80032a8:	d31e      	bcc.n	80032e8 <__cvt+0xc0>
 80032aa:	4638      	mov	r0, r7
 80032ac:	9b07      	ldr	r3, [sp, #28]
 80032ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80032b0:	1bdb      	subs	r3, r3, r7
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	b008      	add	sp, #32
 80032b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032be:	eb00 0906 	add.w	r9, r0, r6
 80032c2:	d1e5      	bne.n	8003290 <__cvt+0x68>
 80032c4:	7803      	ldrb	r3, [r0, #0]
 80032c6:	2b30      	cmp	r3, #48	@ 0x30
 80032c8:	d10a      	bne.n	80032e0 <__cvt+0xb8>
 80032ca:	2200      	movs	r2, #0
 80032cc:	2300      	movs	r3, #0
 80032ce:	4620      	mov	r0, r4
 80032d0:	4629      	mov	r1, r5
 80032d2:	f7fd fc1d 	bl	8000b10 <__aeabi_dcmpeq>
 80032d6:	b918      	cbnz	r0, 80032e0 <__cvt+0xb8>
 80032d8:	f1c6 0601 	rsb	r6, r6, #1
 80032dc:	f8ca 6000 	str.w	r6, [sl]
 80032e0:	f8da 3000 	ldr.w	r3, [sl]
 80032e4:	4499      	add	r9, r3
 80032e6:	e7d3      	b.n	8003290 <__cvt+0x68>
 80032e8:	1c59      	adds	r1, r3, #1
 80032ea:	9107      	str	r1, [sp, #28]
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e7d9      	b.n	80032a4 <__cvt+0x7c>

080032f0 <__exponent>:
 80032f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032f2:	2900      	cmp	r1, #0
 80032f4:	bfb6      	itet	lt
 80032f6:	232d      	movlt	r3, #45	@ 0x2d
 80032f8:	232b      	movge	r3, #43	@ 0x2b
 80032fa:	4249      	neglt	r1, r1
 80032fc:	2909      	cmp	r1, #9
 80032fe:	7002      	strb	r2, [r0, #0]
 8003300:	7043      	strb	r3, [r0, #1]
 8003302:	dd29      	ble.n	8003358 <__exponent+0x68>
 8003304:	f10d 0307 	add.w	r3, sp, #7
 8003308:	461d      	mov	r5, r3
 800330a:	270a      	movs	r7, #10
 800330c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003310:	461a      	mov	r2, r3
 8003312:	fb07 1416 	mls	r4, r7, r6, r1
 8003316:	3430      	adds	r4, #48	@ 0x30
 8003318:	f802 4c01 	strb.w	r4, [r2, #-1]
 800331c:	460c      	mov	r4, r1
 800331e:	2c63      	cmp	r4, #99	@ 0x63
 8003320:	4631      	mov	r1, r6
 8003322:	f103 33ff 	add.w	r3, r3, #4294967295
 8003326:	dcf1      	bgt.n	800330c <__exponent+0x1c>
 8003328:	3130      	adds	r1, #48	@ 0x30
 800332a:	1e94      	subs	r4, r2, #2
 800332c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003330:	4623      	mov	r3, r4
 8003332:	1c41      	adds	r1, r0, #1
 8003334:	42ab      	cmp	r3, r5
 8003336:	d30a      	bcc.n	800334e <__exponent+0x5e>
 8003338:	f10d 0309 	add.w	r3, sp, #9
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	42ac      	cmp	r4, r5
 8003340:	bf88      	it	hi
 8003342:	2300      	movhi	r3, #0
 8003344:	3302      	adds	r3, #2
 8003346:	4403      	add	r3, r0
 8003348:	1a18      	subs	r0, r3, r0
 800334a:	b003      	add	sp, #12
 800334c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800334e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003352:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003356:	e7ed      	b.n	8003334 <__exponent+0x44>
 8003358:	2330      	movs	r3, #48	@ 0x30
 800335a:	3130      	adds	r1, #48	@ 0x30
 800335c:	7083      	strb	r3, [r0, #2]
 800335e:	70c1      	strb	r1, [r0, #3]
 8003360:	1d03      	adds	r3, r0, #4
 8003362:	e7f1      	b.n	8003348 <__exponent+0x58>

08003364 <_printf_float>:
 8003364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003368:	b091      	sub	sp, #68	@ 0x44
 800336a:	460c      	mov	r4, r1
 800336c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003370:	4616      	mov	r6, r2
 8003372:	461f      	mov	r7, r3
 8003374:	4605      	mov	r5, r0
 8003376:	f000 fef1 	bl	800415c <_localeconv_r>
 800337a:	6803      	ldr	r3, [r0, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	9308      	str	r3, [sp, #32]
 8003380:	f7fc fee6 	bl	8000150 <strlen>
 8003384:	2300      	movs	r3, #0
 8003386:	930e      	str	r3, [sp, #56]	@ 0x38
 8003388:	f8d8 3000 	ldr.w	r3, [r8]
 800338c:	9009      	str	r0, [sp, #36]	@ 0x24
 800338e:	3307      	adds	r3, #7
 8003390:	f023 0307 	bic.w	r3, r3, #7
 8003394:	f103 0208 	add.w	r2, r3, #8
 8003398:	f894 a018 	ldrb.w	sl, [r4, #24]
 800339c:	f8d4 b000 	ldr.w	fp, [r4]
 80033a0:	f8c8 2000 	str.w	r2, [r8]
 80033a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80033ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80033ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80033b2:	f04f 32ff 	mov.w	r2, #4294967295
 80033b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80033be:	4b9c      	ldr	r3, [pc, #624]	@ (8003630 <_printf_float+0x2cc>)
 80033c0:	f7fd fbd8 	bl	8000b74 <__aeabi_dcmpun>
 80033c4:	bb70      	cbnz	r0, 8003424 <_printf_float+0xc0>
 80033c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	4b98      	ldr	r3, [pc, #608]	@ (8003630 <_printf_float+0x2cc>)
 80033d0:	f7fd fbb2 	bl	8000b38 <__aeabi_dcmple>
 80033d4:	bb30      	cbnz	r0, 8003424 <_printf_float+0xc0>
 80033d6:	2200      	movs	r2, #0
 80033d8:	2300      	movs	r3, #0
 80033da:	4640      	mov	r0, r8
 80033dc:	4649      	mov	r1, r9
 80033de:	f7fd fba1 	bl	8000b24 <__aeabi_dcmplt>
 80033e2:	b110      	cbz	r0, 80033ea <_printf_float+0x86>
 80033e4:	232d      	movs	r3, #45	@ 0x2d
 80033e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033ea:	4a92      	ldr	r2, [pc, #584]	@ (8003634 <_printf_float+0x2d0>)
 80033ec:	4b92      	ldr	r3, [pc, #584]	@ (8003638 <_printf_float+0x2d4>)
 80033ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80033f2:	bf94      	ite	ls
 80033f4:	4690      	movls	r8, r2
 80033f6:	4698      	movhi	r8, r3
 80033f8:	2303      	movs	r3, #3
 80033fa:	f04f 0900 	mov.w	r9, #0
 80033fe:	6123      	str	r3, [r4, #16]
 8003400:	f02b 0304 	bic.w	r3, fp, #4
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	4633      	mov	r3, r6
 8003408:	4621      	mov	r1, r4
 800340a:	4628      	mov	r0, r5
 800340c:	9700      	str	r7, [sp, #0]
 800340e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003410:	f000 f9d4 	bl	80037bc <_printf_common>
 8003414:	3001      	adds	r0, #1
 8003416:	f040 8090 	bne.w	800353a <_printf_float+0x1d6>
 800341a:	f04f 30ff 	mov.w	r0, #4294967295
 800341e:	b011      	add	sp, #68	@ 0x44
 8003420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003424:	4642      	mov	r2, r8
 8003426:	464b      	mov	r3, r9
 8003428:	4640      	mov	r0, r8
 800342a:	4649      	mov	r1, r9
 800342c:	f7fd fba2 	bl	8000b74 <__aeabi_dcmpun>
 8003430:	b148      	cbz	r0, 8003446 <_printf_float+0xe2>
 8003432:	464b      	mov	r3, r9
 8003434:	2b00      	cmp	r3, #0
 8003436:	bfb8      	it	lt
 8003438:	232d      	movlt	r3, #45	@ 0x2d
 800343a:	4a80      	ldr	r2, [pc, #512]	@ (800363c <_printf_float+0x2d8>)
 800343c:	bfb8      	it	lt
 800343e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003442:	4b7f      	ldr	r3, [pc, #508]	@ (8003640 <_printf_float+0x2dc>)
 8003444:	e7d3      	b.n	80033ee <_printf_float+0x8a>
 8003446:	6863      	ldr	r3, [r4, #4]
 8003448:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	d13f      	bne.n	80034d0 <_printf_float+0x16c>
 8003450:	2306      	movs	r3, #6
 8003452:	6063      	str	r3, [r4, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	9206      	str	r2, [sp, #24]
 800345e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003460:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003464:	aa0d      	add	r2, sp, #52	@ 0x34
 8003466:	9203      	str	r2, [sp, #12]
 8003468:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800346c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003470:	6863      	ldr	r3, [r4, #4]
 8003472:	4642      	mov	r2, r8
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	4628      	mov	r0, r5
 8003478:	464b      	mov	r3, r9
 800347a:	910a      	str	r1, [sp, #40]	@ 0x28
 800347c:	f7ff fed4 	bl	8003228 <__cvt>
 8003480:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003482:	4680      	mov	r8, r0
 8003484:	2947      	cmp	r1, #71	@ 0x47
 8003486:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003488:	d128      	bne.n	80034dc <_printf_float+0x178>
 800348a:	1cc8      	adds	r0, r1, #3
 800348c:	db02      	blt.n	8003494 <_printf_float+0x130>
 800348e:	6863      	ldr	r3, [r4, #4]
 8003490:	4299      	cmp	r1, r3
 8003492:	dd40      	ble.n	8003516 <_printf_float+0x1b2>
 8003494:	f1aa 0a02 	sub.w	sl, sl, #2
 8003498:	fa5f fa8a 	uxtb.w	sl, sl
 800349c:	4652      	mov	r2, sl
 800349e:	3901      	subs	r1, #1
 80034a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80034a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80034a6:	f7ff ff23 	bl	80032f0 <__exponent>
 80034aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80034ac:	4681      	mov	r9, r0
 80034ae:	1813      	adds	r3, r2, r0
 80034b0:	2a01      	cmp	r2, #1
 80034b2:	6123      	str	r3, [r4, #16]
 80034b4:	dc02      	bgt.n	80034bc <_printf_float+0x158>
 80034b6:	6822      	ldr	r2, [r4, #0]
 80034b8:	07d2      	lsls	r2, r2, #31
 80034ba:	d501      	bpl.n	80034c0 <_printf_float+0x15c>
 80034bc:	3301      	adds	r3, #1
 80034be:	6123      	str	r3, [r4, #16]
 80034c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d09e      	beq.n	8003406 <_printf_float+0xa2>
 80034c8:	232d      	movs	r3, #45	@ 0x2d
 80034ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034ce:	e79a      	b.n	8003406 <_printf_float+0xa2>
 80034d0:	2947      	cmp	r1, #71	@ 0x47
 80034d2:	d1bf      	bne.n	8003454 <_printf_float+0xf0>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1bd      	bne.n	8003454 <_printf_float+0xf0>
 80034d8:	2301      	movs	r3, #1
 80034da:	e7ba      	b.n	8003452 <_printf_float+0xee>
 80034dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80034e0:	d9dc      	bls.n	800349c <_printf_float+0x138>
 80034e2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80034e6:	d118      	bne.n	800351a <_printf_float+0x1b6>
 80034e8:	2900      	cmp	r1, #0
 80034ea:	6863      	ldr	r3, [r4, #4]
 80034ec:	dd0b      	ble.n	8003506 <_printf_float+0x1a2>
 80034ee:	6121      	str	r1, [r4, #16]
 80034f0:	b913      	cbnz	r3, 80034f8 <_printf_float+0x194>
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	07d0      	lsls	r0, r2, #31
 80034f6:	d502      	bpl.n	80034fe <_printf_float+0x19a>
 80034f8:	3301      	adds	r3, #1
 80034fa:	440b      	add	r3, r1
 80034fc:	6123      	str	r3, [r4, #16]
 80034fe:	f04f 0900 	mov.w	r9, #0
 8003502:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003504:	e7dc      	b.n	80034c0 <_printf_float+0x15c>
 8003506:	b913      	cbnz	r3, 800350e <_printf_float+0x1aa>
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	07d2      	lsls	r2, r2, #31
 800350c:	d501      	bpl.n	8003512 <_printf_float+0x1ae>
 800350e:	3302      	adds	r3, #2
 8003510:	e7f4      	b.n	80034fc <_printf_float+0x198>
 8003512:	2301      	movs	r3, #1
 8003514:	e7f2      	b.n	80034fc <_printf_float+0x198>
 8003516:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800351a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800351c:	4299      	cmp	r1, r3
 800351e:	db05      	blt.n	800352c <_printf_float+0x1c8>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	6121      	str	r1, [r4, #16]
 8003524:	07d8      	lsls	r0, r3, #31
 8003526:	d5ea      	bpl.n	80034fe <_printf_float+0x19a>
 8003528:	1c4b      	adds	r3, r1, #1
 800352a:	e7e7      	b.n	80034fc <_printf_float+0x198>
 800352c:	2900      	cmp	r1, #0
 800352e:	bfcc      	ite	gt
 8003530:	2201      	movgt	r2, #1
 8003532:	f1c1 0202 	rsble	r2, r1, #2
 8003536:	4413      	add	r3, r2
 8003538:	e7e0      	b.n	80034fc <_printf_float+0x198>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	055a      	lsls	r2, r3, #21
 800353e:	d407      	bmi.n	8003550 <_printf_float+0x1ec>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	4642      	mov	r2, r8
 8003544:	4631      	mov	r1, r6
 8003546:	4628      	mov	r0, r5
 8003548:	47b8      	blx	r7
 800354a:	3001      	adds	r0, #1
 800354c:	d12b      	bne.n	80035a6 <_printf_float+0x242>
 800354e:	e764      	b.n	800341a <_printf_float+0xb6>
 8003550:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003554:	f240 80dc 	bls.w	8003710 <_printf_float+0x3ac>
 8003558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800355c:	2200      	movs	r2, #0
 800355e:	2300      	movs	r3, #0
 8003560:	f7fd fad6 	bl	8000b10 <__aeabi_dcmpeq>
 8003564:	2800      	cmp	r0, #0
 8003566:	d033      	beq.n	80035d0 <_printf_float+0x26c>
 8003568:	2301      	movs	r3, #1
 800356a:	4631      	mov	r1, r6
 800356c:	4628      	mov	r0, r5
 800356e:	4a35      	ldr	r2, [pc, #212]	@ (8003644 <_printf_float+0x2e0>)
 8003570:	47b8      	blx	r7
 8003572:	3001      	adds	r0, #1
 8003574:	f43f af51 	beq.w	800341a <_printf_float+0xb6>
 8003578:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800357c:	4543      	cmp	r3, r8
 800357e:	db02      	blt.n	8003586 <_printf_float+0x222>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	07d8      	lsls	r0, r3, #31
 8003584:	d50f      	bpl.n	80035a6 <_printf_float+0x242>
 8003586:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800358a:	4631      	mov	r1, r6
 800358c:	4628      	mov	r0, r5
 800358e:	47b8      	blx	r7
 8003590:	3001      	adds	r0, #1
 8003592:	f43f af42 	beq.w	800341a <_printf_float+0xb6>
 8003596:	f04f 0900 	mov.w	r9, #0
 800359a:	f108 38ff 	add.w	r8, r8, #4294967295
 800359e:	f104 0a1a 	add.w	sl, r4, #26
 80035a2:	45c8      	cmp	r8, r9
 80035a4:	dc09      	bgt.n	80035ba <_printf_float+0x256>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	079b      	lsls	r3, r3, #30
 80035aa:	f100 8102 	bmi.w	80037b2 <_printf_float+0x44e>
 80035ae:	68e0      	ldr	r0, [r4, #12]
 80035b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80035b2:	4298      	cmp	r0, r3
 80035b4:	bfb8      	it	lt
 80035b6:	4618      	movlt	r0, r3
 80035b8:	e731      	b.n	800341e <_printf_float+0xba>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4652      	mov	r2, sl
 80035be:	4631      	mov	r1, r6
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b8      	blx	r7
 80035c4:	3001      	adds	r0, #1
 80035c6:	f43f af28 	beq.w	800341a <_printf_float+0xb6>
 80035ca:	f109 0901 	add.w	r9, r9, #1
 80035ce:	e7e8      	b.n	80035a2 <_printf_float+0x23e>
 80035d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	dc38      	bgt.n	8003648 <_printf_float+0x2e4>
 80035d6:	2301      	movs	r3, #1
 80035d8:	4631      	mov	r1, r6
 80035da:	4628      	mov	r0, r5
 80035dc:	4a19      	ldr	r2, [pc, #100]	@ (8003644 <_printf_float+0x2e0>)
 80035de:	47b8      	blx	r7
 80035e0:	3001      	adds	r0, #1
 80035e2:	f43f af1a 	beq.w	800341a <_printf_float+0xb6>
 80035e6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80035ea:	ea59 0303 	orrs.w	r3, r9, r3
 80035ee:	d102      	bne.n	80035f6 <_printf_float+0x292>
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	07d9      	lsls	r1, r3, #31
 80035f4:	d5d7      	bpl.n	80035a6 <_printf_float+0x242>
 80035f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035fa:	4631      	mov	r1, r6
 80035fc:	4628      	mov	r0, r5
 80035fe:	47b8      	blx	r7
 8003600:	3001      	adds	r0, #1
 8003602:	f43f af0a 	beq.w	800341a <_printf_float+0xb6>
 8003606:	f04f 0a00 	mov.w	sl, #0
 800360a:	f104 0b1a 	add.w	fp, r4, #26
 800360e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003610:	425b      	negs	r3, r3
 8003612:	4553      	cmp	r3, sl
 8003614:	dc01      	bgt.n	800361a <_printf_float+0x2b6>
 8003616:	464b      	mov	r3, r9
 8003618:	e793      	b.n	8003542 <_printf_float+0x1de>
 800361a:	2301      	movs	r3, #1
 800361c:	465a      	mov	r2, fp
 800361e:	4631      	mov	r1, r6
 8003620:	4628      	mov	r0, r5
 8003622:	47b8      	blx	r7
 8003624:	3001      	adds	r0, #1
 8003626:	f43f aef8 	beq.w	800341a <_printf_float+0xb6>
 800362a:	f10a 0a01 	add.w	sl, sl, #1
 800362e:	e7ee      	b.n	800360e <_printf_float+0x2aa>
 8003630:	7fefffff 	.word	0x7fefffff
 8003634:	08007956 	.word	0x08007956
 8003638:	0800795a 	.word	0x0800795a
 800363c:	0800795e 	.word	0x0800795e
 8003640:	08007962 	.word	0x08007962
 8003644:	08007966 	.word	0x08007966
 8003648:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800364a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800364e:	4553      	cmp	r3, sl
 8003650:	bfa8      	it	ge
 8003652:	4653      	movge	r3, sl
 8003654:	2b00      	cmp	r3, #0
 8003656:	4699      	mov	r9, r3
 8003658:	dc36      	bgt.n	80036c8 <_printf_float+0x364>
 800365a:	f04f 0b00 	mov.w	fp, #0
 800365e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003662:	f104 021a 	add.w	r2, r4, #26
 8003666:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003668:	930a      	str	r3, [sp, #40]	@ 0x28
 800366a:	eba3 0309 	sub.w	r3, r3, r9
 800366e:	455b      	cmp	r3, fp
 8003670:	dc31      	bgt.n	80036d6 <_printf_float+0x372>
 8003672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003674:	459a      	cmp	sl, r3
 8003676:	dc3a      	bgt.n	80036ee <_printf_float+0x38a>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	07da      	lsls	r2, r3, #31
 800367c:	d437      	bmi.n	80036ee <_printf_float+0x38a>
 800367e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003680:	ebaa 0903 	sub.w	r9, sl, r3
 8003684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003686:	ebaa 0303 	sub.w	r3, sl, r3
 800368a:	4599      	cmp	r9, r3
 800368c:	bfa8      	it	ge
 800368e:	4699      	movge	r9, r3
 8003690:	f1b9 0f00 	cmp.w	r9, #0
 8003694:	dc33      	bgt.n	80036fe <_printf_float+0x39a>
 8003696:	f04f 0800 	mov.w	r8, #0
 800369a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800369e:	f104 0b1a 	add.w	fp, r4, #26
 80036a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036a4:	ebaa 0303 	sub.w	r3, sl, r3
 80036a8:	eba3 0309 	sub.w	r3, r3, r9
 80036ac:	4543      	cmp	r3, r8
 80036ae:	f77f af7a 	ble.w	80035a6 <_printf_float+0x242>
 80036b2:	2301      	movs	r3, #1
 80036b4:	465a      	mov	r2, fp
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b8      	blx	r7
 80036bc:	3001      	adds	r0, #1
 80036be:	f43f aeac 	beq.w	800341a <_printf_float+0xb6>
 80036c2:	f108 0801 	add.w	r8, r8, #1
 80036c6:	e7ec      	b.n	80036a2 <_printf_float+0x33e>
 80036c8:	4642      	mov	r2, r8
 80036ca:	4631      	mov	r1, r6
 80036cc:	4628      	mov	r0, r5
 80036ce:	47b8      	blx	r7
 80036d0:	3001      	adds	r0, #1
 80036d2:	d1c2      	bne.n	800365a <_printf_float+0x2f6>
 80036d4:	e6a1      	b.n	800341a <_printf_float+0xb6>
 80036d6:	2301      	movs	r3, #1
 80036d8:	4631      	mov	r1, r6
 80036da:	4628      	mov	r0, r5
 80036dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	f43f ae9a 	beq.w	800341a <_printf_float+0xb6>
 80036e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80036e8:	f10b 0b01 	add.w	fp, fp, #1
 80036ec:	e7bb      	b.n	8003666 <_printf_float+0x302>
 80036ee:	4631      	mov	r1, r6
 80036f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036f4:	4628      	mov	r0, r5
 80036f6:	47b8      	blx	r7
 80036f8:	3001      	adds	r0, #1
 80036fa:	d1c0      	bne.n	800367e <_printf_float+0x31a>
 80036fc:	e68d      	b.n	800341a <_printf_float+0xb6>
 80036fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003700:	464b      	mov	r3, r9
 8003702:	4631      	mov	r1, r6
 8003704:	4628      	mov	r0, r5
 8003706:	4442      	add	r2, r8
 8003708:	47b8      	blx	r7
 800370a:	3001      	adds	r0, #1
 800370c:	d1c3      	bne.n	8003696 <_printf_float+0x332>
 800370e:	e684      	b.n	800341a <_printf_float+0xb6>
 8003710:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003714:	f1ba 0f01 	cmp.w	sl, #1
 8003718:	dc01      	bgt.n	800371e <_printf_float+0x3ba>
 800371a:	07db      	lsls	r3, r3, #31
 800371c:	d536      	bpl.n	800378c <_printf_float+0x428>
 800371e:	2301      	movs	r3, #1
 8003720:	4642      	mov	r2, r8
 8003722:	4631      	mov	r1, r6
 8003724:	4628      	mov	r0, r5
 8003726:	47b8      	blx	r7
 8003728:	3001      	adds	r0, #1
 800372a:	f43f ae76 	beq.w	800341a <_printf_float+0xb6>
 800372e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003732:	4631      	mov	r1, r6
 8003734:	4628      	mov	r0, r5
 8003736:	47b8      	blx	r7
 8003738:	3001      	adds	r0, #1
 800373a:	f43f ae6e 	beq.w	800341a <_printf_float+0xb6>
 800373e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003742:	2200      	movs	r2, #0
 8003744:	2300      	movs	r3, #0
 8003746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800374a:	f7fd f9e1 	bl	8000b10 <__aeabi_dcmpeq>
 800374e:	b9c0      	cbnz	r0, 8003782 <_printf_float+0x41e>
 8003750:	4653      	mov	r3, sl
 8003752:	f108 0201 	add.w	r2, r8, #1
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	47b8      	blx	r7
 800375c:	3001      	adds	r0, #1
 800375e:	d10c      	bne.n	800377a <_printf_float+0x416>
 8003760:	e65b      	b.n	800341a <_printf_float+0xb6>
 8003762:	2301      	movs	r3, #1
 8003764:	465a      	mov	r2, fp
 8003766:	4631      	mov	r1, r6
 8003768:	4628      	mov	r0, r5
 800376a:	47b8      	blx	r7
 800376c:	3001      	adds	r0, #1
 800376e:	f43f ae54 	beq.w	800341a <_printf_float+0xb6>
 8003772:	f108 0801 	add.w	r8, r8, #1
 8003776:	45d0      	cmp	r8, sl
 8003778:	dbf3      	blt.n	8003762 <_printf_float+0x3fe>
 800377a:	464b      	mov	r3, r9
 800377c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003780:	e6e0      	b.n	8003544 <_printf_float+0x1e0>
 8003782:	f04f 0800 	mov.w	r8, #0
 8003786:	f104 0b1a 	add.w	fp, r4, #26
 800378a:	e7f4      	b.n	8003776 <_printf_float+0x412>
 800378c:	2301      	movs	r3, #1
 800378e:	4642      	mov	r2, r8
 8003790:	e7e1      	b.n	8003756 <_printf_float+0x3f2>
 8003792:	2301      	movs	r3, #1
 8003794:	464a      	mov	r2, r9
 8003796:	4631      	mov	r1, r6
 8003798:	4628      	mov	r0, r5
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f ae3c 	beq.w	800341a <_printf_float+0xb6>
 80037a2:	f108 0801 	add.w	r8, r8, #1
 80037a6:	68e3      	ldr	r3, [r4, #12]
 80037a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80037aa:	1a5b      	subs	r3, r3, r1
 80037ac:	4543      	cmp	r3, r8
 80037ae:	dcf0      	bgt.n	8003792 <_printf_float+0x42e>
 80037b0:	e6fd      	b.n	80035ae <_printf_float+0x24a>
 80037b2:	f04f 0800 	mov.w	r8, #0
 80037b6:	f104 0919 	add.w	r9, r4, #25
 80037ba:	e7f4      	b.n	80037a6 <_printf_float+0x442>

080037bc <_printf_common>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	4616      	mov	r6, r2
 80037c2:	4698      	mov	r8, r3
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	4607      	mov	r7, r0
 80037ca:	4293      	cmp	r3, r2
 80037cc:	bfb8      	it	lt
 80037ce:	4613      	movlt	r3, r2
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037d6:	460c      	mov	r4, r1
 80037d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037dc:	b10a      	cbz	r2, 80037e2 <_printf_common+0x26>
 80037de:	3301      	adds	r3, #1
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	0699      	lsls	r1, r3, #26
 80037e6:	bf42      	ittt	mi
 80037e8:	6833      	ldrmi	r3, [r6, #0]
 80037ea:	3302      	addmi	r3, #2
 80037ec:	6033      	strmi	r3, [r6, #0]
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f015 0506 	ands.w	r5, r5, #6
 80037f4:	d106      	bne.n	8003804 <_printf_common+0x48>
 80037f6:	f104 0a19 	add.w	sl, r4, #25
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	6832      	ldr	r2, [r6, #0]
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	42ab      	cmp	r3, r5
 8003802:	dc2b      	bgt.n	800385c <_printf_common+0xa0>
 8003804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003808:	6822      	ldr	r2, [r4, #0]
 800380a:	3b00      	subs	r3, #0
 800380c:	bf18      	it	ne
 800380e:	2301      	movne	r3, #1
 8003810:	0692      	lsls	r2, r2, #26
 8003812:	d430      	bmi.n	8003876 <_printf_common+0xba>
 8003814:	4641      	mov	r1, r8
 8003816:	4638      	mov	r0, r7
 8003818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800381c:	47c8      	blx	r9
 800381e:	3001      	adds	r0, #1
 8003820:	d023      	beq.n	800386a <_printf_common+0xae>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	6922      	ldr	r2, [r4, #16]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf14      	ite	ne
 800382e:	2500      	movne	r5, #0
 8003830:	6833      	ldreq	r3, [r6, #0]
 8003832:	f04f 0600 	mov.w	r6, #0
 8003836:	bf08      	it	eq
 8003838:	68e5      	ldreq	r5, [r4, #12]
 800383a:	f104 041a 	add.w	r4, r4, #26
 800383e:	bf08      	it	eq
 8003840:	1aed      	subeq	r5, r5, r3
 8003842:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003846:	bf08      	it	eq
 8003848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800384c:	4293      	cmp	r3, r2
 800384e:	bfc4      	itt	gt
 8003850:	1a9b      	subgt	r3, r3, r2
 8003852:	18ed      	addgt	r5, r5, r3
 8003854:	42b5      	cmp	r5, r6
 8003856:	d11a      	bne.n	800388e <_printf_common+0xd2>
 8003858:	2000      	movs	r0, #0
 800385a:	e008      	b.n	800386e <_printf_common+0xb2>
 800385c:	2301      	movs	r3, #1
 800385e:	4652      	mov	r2, sl
 8003860:	4641      	mov	r1, r8
 8003862:	4638      	mov	r0, r7
 8003864:	47c8      	blx	r9
 8003866:	3001      	adds	r0, #1
 8003868:	d103      	bne.n	8003872 <_printf_common+0xb6>
 800386a:	f04f 30ff 	mov.w	r0, #4294967295
 800386e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003872:	3501      	adds	r5, #1
 8003874:	e7c1      	b.n	80037fa <_printf_common+0x3e>
 8003876:	2030      	movs	r0, #48	@ 0x30
 8003878:	18e1      	adds	r1, r4, r3
 800387a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003884:	4422      	add	r2, r4
 8003886:	3302      	adds	r3, #2
 8003888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800388c:	e7c2      	b.n	8003814 <_printf_common+0x58>
 800388e:	2301      	movs	r3, #1
 8003890:	4622      	mov	r2, r4
 8003892:	4641      	mov	r1, r8
 8003894:	4638      	mov	r0, r7
 8003896:	47c8      	blx	r9
 8003898:	3001      	adds	r0, #1
 800389a:	d0e6      	beq.n	800386a <_printf_common+0xae>
 800389c:	3601      	adds	r6, #1
 800389e:	e7d9      	b.n	8003854 <_printf_common+0x98>

080038a0 <_printf_i>:
 80038a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038a4:	7e0f      	ldrb	r7, [r1, #24]
 80038a6:	4691      	mov	r9, r2
 80038a8:	2f78      	cmp	r7, #120	@ 0x78
 80038aa:	4680      	mov	r8, r0
 80038ac:	460c      	mov	r4, r1
 80038ae:	469a      	mov	sl, r3
 80038b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038b6:	d807      	bhi.n	80038c8 <_printf_i+0x28>
 80038b8:	2f62      	cmp	r7, #98	@ 0x62
 80038ba:	d80a      	bhi.n	80038d2 <_printf_i+0x32>
 80038bc:	2f00      	cmp	r7, #0
 80038be:	f000 80d3 	beq.w	8003a68 <_printf_i+0x1c8>
 80038c2:	2f58      	cmp	r7, #88	@ 0x58
 80038c4:	f000 80ba 	beq.w	8003a3c <_printf_i+0x19c>
 80038c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038d0:	e03a      	b.n	8003948 <_printf_i+0xa8>
 80038d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038d6:	2b15      	cmp	r3, #21
 80038d8:	d8f6      	bhi.n	80038c8 <_printf_i+0x28>
 80038da:	a101      	add	r1, pc, #4	@ (adr r1, 80038e0 <_printf_i+0x40>)
 80038dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038e0:	08003939 	.word	0x08003939
 80038e4:	0800394d 	.word	0x0800394d
 80038e8:	080038c9 	.word	0x080038c9
 80038ec:	080038c9 	.word	0x080038c9
 80038f0:	080038c9 	.word	0x080038c9
 80038f4:	080038c9 	.word	0x080038c9
 80038f8:	0800394d 	.word	0x0800394d
 80038fc:	080038c9 	.word	0x080038c9
 8003900:	080038c9 	.word	0x080038c9
 8003904:	080038c9 	.word	0x080038c9
 8003908:	080038c9 	.word	0x080038c9
 800390c:	08003a4f 	.word	0x08003a4f
 8003910:	08003977 	.word	0x08003977
 8003914:	08003a09 	.word	0x08003a09
 8003918:	080038c9 	.word	0x080038c9
 800391c:	080038c9 	.word	0x080038c9
 8003920:	08003a71 	.word	0x08003a71
 8003924:	080038c9 	.word	0x080038c9
 8003928:	08003977 	.word	0x08003977
 800392c:	080038c9 	.word	0x080038c9
 8003930:	080038c9 	.word	0x080038c9
 8003934:	08003a11 	.word	0x08003a11
 8003938:	6833      	ldr	r3, [r6, #0]
 800393a:	1d1a      	adds	r2, r3, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6032      	str	r2, [r6, #0]
 8003940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003948:	2301      	movs	r3, #1
 800394a:	e09e      	b.n	8003a8a <_printf_i+0x1ea>
 800394c:	6833      	ldr	r3, [r6, #0]
 800394e:	6820      	ldr	r0, [r4, #0]
 8003950:	1d19      	adds	r1, r3, #4
 8003952:	6031      	str	r1, [r6, #0]
 8003954:	0606      	lsls	r6, r0, #24
 8003956:	d501      	bpl.n	800395c <_printf_i+0xbc>
 8003958:	681d      	ldr	r5, [r3, #0]
 800395a:	e003      	b.n	8003964 <_printf_i+0xc4>
 800395c:	0645      	lsls	r5, r0, #25
 800395e:	d5fb      	bpl.n	8003958 <_printf_i+0xb8>
 8003960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003964:	2d00      	cmp	r5, #0
 8003966:	da03      	bge.n	8003970 <_printf_i+0xd0>
 8003968:	232d      	movs	r3, #45	@ 0x2d
 800396a:	426d      	negs	r5, r5
 800396c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003970:	230a      	movs	r3, #10
 8003972:	4859      	ldr	r0, [pc, #356]	@ (8003ad8 <_printf_i+0x238>)
 8003974:	e011      	b.n	800399a <_printf_i+0xfa>
 8003976:	6821      	ldr	r1, [r4, #0]
 8003978:	6833      	ldr	r3, [r6, #0]
 800397a:	0608      	lsls	r0, r1, #24
 800397c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003980:	d402      	bmi.n	8003988 <_printf_i+0xe8>
 8003982:	0649      	lsls	r1, r1, #25
 8003984:	bf48      	it	mi
 8003986:	b2ad      	uxthmi	r5, r5
 8003988:	2f6f      	cmp	r7, #111	@ 0x6f
 800398a:	6033      	str	r3, [r6, #0]
 800398c:	bf14      	ite	ne
 800398e:	230a      	movne	r3, #10
 8003990:	2308      	moveq	r3, #8
 8003992:	4851      	ldr	r0, [pc, #324]	@ (8003ad8 <_printf_i+0x238>)
 8003994:	2100      	movs	r1, #0
 8003996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800399a:	6866      	ldr	r6, [r4, #4]
 800399c:	2e00      	cmp	r6, #0
 800399e:	bfa8      	it	ge
 80039a0:	6821      	ldrge	r1, [r4, #0]
 80039a2:	60a6      	str	r6, [r4, #8]
 80039a4:	bfa4      	itt	ge
 80039a6:	f021 0104 	bicge.w	r1, r1, #4
 80039aa:	6021      	strge	r1, [r4, #0]
 80039ac:	b90d      	cbnz	r5, 80039b2 <_printf_i+0x112>
 80039ae:	2e00      	cmp	r6, #0
 80039b0:	d04b      	beq.n	8003a4a <_printf_i+0x1aa>
 80039b2:	4616      	mov	r6, r2
 80039b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80039b8:	fb03 5711 	mls	r7, r3, r1, r5
 80039bc:	5dc7      	ldrb	r7, [r0, r7]
 80039be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039c2:	462f      	mov	r7, r5
 80039c4:	42bb      	cmp	r3, r7
 80039c6:	460d      	mov	r5, r1
 80039c8:	d9f4      	bls.n	80039b4 <_printf_i+0x114>
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d10b      	bne.n	80039e6 <_printf_i+0x146>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	07df      	lsls	r7, r3, #31
 80039d2:	d508      	bpl.n	80039e6 <_printf_i+0x146>
 80039d4:	6923      	ldr	r3, [r4, #16]
 80039d6:	6861      	ldr	r1, [r4, #4]
 80039d8:	4299      	cmp	r1, r3
 80039da:	bfde      	ittt	le
 80039dc:	2330      	movle	r3, #48	@ 0x30
 80039de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039e6:	1b92      	subs	r2, r2, r6
 80039e8:	6122      	str	r2, [r4, #16]
 80039ea:	464b      	mov	r3, r9
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f8cd a000 	str.w	sl, [sp]
 80039f4:	aa03      	add	r2, sp, #12
 80039f6:	f7ff fee1 	bl	80037bc <_printf_common>
 80039fa:	3001      	adds	r0, #1
 80039fc:	d14a      	bne.n	8003a94 <_printf_i+0x1f4>
 80039fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003a02:	b004      	add	sp, #16
 8003a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f043 0320 	orr.w	r3, r3, #32
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	2778      	movs	r7, #120	@ 0x78
 8003a12:	4832      	ldr	r0, [pc, #200]	@ (8003adc <_printf_i+0x23c>)
 8003a14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	6831      	ldr	r1, [r6, #0]
 8003a1c:	061f      	lsls	r7, r3, #24
 8003a1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a22:	d402      	bmi.n	8003a2a <_printf_i+0x18a>
 8003a24:	065f      	lsls	r7, r3, #25
 8003a26:	bf48      	it	mi
 8003a28:	b2ad      	uxthmi	r5, r5
 8003a2a:	6031      	str	r1, [r6, #0]
 8003a2c:	07d9      	lsls	r1, r3, #31
 8003a2e:	bf44      	itt	mi
 8003a30:	f043 0320 	orrmi.w	r3, r3, #32
 8003a34:	6023      	strmi	r3, [r4, #0]
 8003a36:	b11d      	cbz	r5, 8003a40 <_printf_i+0x1a0>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	e7ab      	b.n	8003994 <_printf_i+0xf4>
 8003a3c:	4826      	ldr	r0, [pc, #152]	@ (8003ad8 <_printf_i+0x238>)
 8003a3e:	e7e9      	b.n	8003a14 <_printf_i+0x174>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	f023 0320 	bic.w	r3, r3, #32
 8003a46:	6023      	str	r3, [r4, #0]
 8003a48:	e7f6      	b.n	8003a38 <_printf_i+0x198>
 8003a4a:	4616      	mov	r6, r2
 8003a4c:	e7bd      	b.n	80039ca <_printf_i+0x12a>
 8003a4e:	6833      	ldr	r3, [r6, #0]
 8003a50:	6825      	ldr	r5, [r4, #0]
 8003a52:	1d18      	adds	r0, r3, #4
 8003a54:	6961      	ldr	r1, [r4, #20]
 8003a56:	6030      	str	r0, [r6, #0]
 8003a58:	062e      	lsls	r6, r5, #24
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	d501      	bpl.n	8003a62 <_printf_i+0x1c2>
 8003a5e:	6019      	str	r1, [r3, #0]
 8003a60:	e002      	b.n	8003a68 <_printf_i+0x1c8>
 8003a62:	0668      	lsls	r0, r5, #25
 8003a64:	d5fb      	bpl.n	8003a5e <_printf_i+0x1be>
 8003a66:	8019      	strh	r1, [r3, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	4616      	mov	r6, r2
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	e7bc      	b.n	80039ea <_printf_i+0x14a>
 8003a70:	6833      	ldr	r3, [r6, #0]
 8003a72:	2100      	movs	r1, #0
 8003a74:	1d1a      	adds	r2, r3, #4
 8003a76:	6032      	str	r2, [r6, #0]
 8003a78:	681e      	ldr	r6, [r3, #0]
 8003a7a:	6862      	ldr	r2, [r4, #4]
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 fbe4 	bl	800424a <memchr>
 8003a82:	b108      	cbz	r0, 8003a88 <_printf_i+0x1e8>
 8003a84:	1b80      	subs	r0, r0, r6
 8003a86:	6060      	str	r0, [r4, #4]
 8003a88:	6863      	ldr	r3, [r4, #4]
 8003a8a:	6123      	str	r3, [r4, #16]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a92:	e7aa      	b.n	80039ea <_printf_i+0x14a>
 8003a94:	4632      	mov	r2, r6
 8003a96:	4649      	mov	r1, r9
 8003a98:	4640      	mov	r0, r8
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	47d0      	blx	sl
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	d0ad      	beq.n	80039fe <_printf_i+0x15e>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	079b      	lsls	r3, r3, #30
 8003aa6:	d413      	bmi.n	8003ad0 <_printf_i+0x230>
 8003aa8:	68e0      	ldr	r0, [r4, #12]
 8003aaa:	9b03      	ldr	r3, [sp, #12]
 8003aac:	4298      	cmp	r0, r3
 8003aae:	bfb8      	it	lt
 8003ab0:	4618      	movlt	r0, r3
 8003ab2:	e7a6      	b.n	8003a02 <_printf_i+0x162>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	4649      	mov	r1, r9
 8003aba:	4640      	mov	r0, r8
 8003abc:	47d0      	blx	sl
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d09d      	beq.n	80039fe <_printf_i+0x15e>
 8003ac2:	3501      	adds	r5, #1
 8003ac4:	68e3      	ldr	r3, [r4, #12]
 8003ac6:	9903      	ldr	r1, [sp, #12]
 8003ac8:	1a5b      	subs	r3, r3, r1
 8003aca:	42ab      	cmp	r3, r5
 8003acc:	dcf2      	bgt.n	8003ab4 <_printf_i+0x214>
 8003ace:	e7eb      	b.n	8003aa8 <_printf_i+0x208>
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	f104 0619 	add.w	r6, r4, #25
 8003ad6:	e7f5      	b.n	8003ac4 <_printf_i+0x224>
 8003ad8:	08007968 	.word	0x08007968
 8003adc:	08007979 	.word	0x08007979

08003ae0 <_scanf_float>:
 8003ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	9303      	str	r3, [sp, #12]
 8003ae8:	688b      	ldr	r3, [r1, #8]
 8003aea:	4617      	mov	r7, r2
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003af2:	bf82      	ittt	hi
 8003af4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003af8:	eb03 0b05 	addhi.w	fp, r3, r5
 8003afc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003b00:	460a      	mov	r2, r1
 8003b02:	f04f 0500 	mov.w	r5, #0
 8003b06:	bf88      	it	hi
 8003b08:	608b      	strhi	r3, [r1, #8]
 8003b0a:	680b      	ldr	r3, [r1, #0]
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003b12:	f842 3b1c 	str.w	r3, [r2], #28
 8003b16:	460c      	mov	r4, r1
 8003b18:	bf98      	it	ls
 8003b1a:	f04f 0b00 	movls.w	fp, #0
 8003b1e:	4616      	mov	r6, r2
 8003b20:	46aa      	mov	sl, r5
 8003b22:	46a9      	mov	r9, r5
 8003b24:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b28:	9201      	str	r2, [sp, #4]
 8003b2a:	9502      	str	r5, [sp, #8]
 8003b2c:	68a2      	ldr	r2, [r4, #8]
 8003b2e:	b152      	cbz	r2, 8003b46 <_scanf_float+0x66>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b36:	d865      	bhi.n	8003c04 <_scanf_float+0x124>
 8003b38:	2b40      	cmp	r3, #64	@ 0x40
 8003b3a:	d83d      	bhi.n	8003bb8 <_scanf_float+0xd8>
 8003b3c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003b40:	b2c8      	uxtb	r0, r1
 8003b42:	280e      	cmp	r0, #14
 8003b44:	d93b      	bls.n	8003bbe <_scanf_float+0xde>
 8003b46:	f1b9 0f00 	cmp.w	r9, #0
 8003b4a:	d003      	beq.n	8003b54 <_scanf_float+0x74>
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b52:	6023      	str	r3, [r4, #0]
 8003b54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b58:	f1ba 0f01 	cmp.w	sl, #1
 8003b5c:	f200 8118 	bhi.w	8003d90 <_scanf_float+0x2b0>
 8003b60:	9b01      	ldr	r3, [sp, #4]
 8003b62:	429e      	cmp	r6, r3
 8003b64:	f200 8109 	bhi.w	8003d7a <_scanf_float+0x29a>
 8003b68:	2001      	movs	r0, #1
 8003b6a:	b007      	add	sp, #28
 8003b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b70:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003b74:	2a0d      	cmp	r2, #13
 8003b76:	d8e6      	bhi.n	8003b46 <_scanf_float+0x66>
 8003b78:	a101      	add	r1, pc, #4	@ (adr r1, 8003b80 <_scanf_float+0xa0>)
 8003b7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003cc7 	.word	0x08003cc7
 8003b84:	08003b47 	.word	0x08003b47
 8003b88:	08003b47 	.word	0x08003b47
 8003b8c:	08003b47 	.word	0x08003b47
 8003b90:	08003d27 	.word	0x08003d27
 8003b94:	08003cff 	.word	0x08003cff
 8003b98:	08003b47 	.word	0x08003b47
 8003b9c:	08003b47 	.word	0x08003b47
 8003ba0:	08003cd5 	.word	0x08003cd5
 8003ba4:	08003b47 	.word	0x08003b47
 8003ba8:	08003b47 	.word	0x08003b47
 8003bac:	08003b47 	.word	0x08003b47
 8003bb0:	08003b47 	.word	0x08003b47
 8003bb4:	08003c8d 	.word	0x08003c8d
 8003bb8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003bbc:	e7da      	b.n	8003b74 <_scanf_float+0x94>
 8003bbe:	290e      	cmp	r1, #14
 8003bc0:	d8c1      	bhi.n	8003b46 <_scanf_float+0x66>
 8003bc2:	a001      	add	r0, pc, #4	@ (adr r0, 8003bc8 <_scanf_float+0xe8>)
 8003bc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003bc8:	08003c7d 	.word	0x08003c7d
 8003bcc:	08003b47 	.word	0x08003b47
 8003bd0:	08003c7d 	.word	0x08003c7d
 8003bd4:	08003d13 	.word	0x08003d13
 8003bd8:	08003b47 	.word	0x08003b47
 8003bdc:	08003c25 	.word	0x08003c25
 8003be0:	08003c63 	.word	0x08003c63
 8003be4:	08003c63 	.word	0x08003c63
 8003be8:	08003c63 	.word	0x08003c63
 8003bec:	08003c63 	.word	0x08003c63
 8003bf0:	08003c63 	.word	0x08003c63
 8003bf4:	08003c63 	.word	0x08003c63
 8003bf8:	08003c63 	.word	0x08003c63
 8003bfc:	08003c63 	.word	0x08003c63
 8003c00:	08003c63 	.word	0x08003c63
 8003c04:	2b6e      	cmp	r3, #110	@ 0x6e
 8003c06:	d809      	bhi.n	8003c1c <_scanf_float+0x13c>
 8003c08:	2b60      	cmp	r3, #96	@ 0x60
 8003c0a:	d8b1      	bhi.n	8003b70 <_scanf_float+0x90>
 8003c0c:	2b54      	cmp	r3, #84	@ 0x54
 8003c0e:	d07b      	beq.n	8003d08 <_scanf_float+0x228>
 8003c10:	2b59      	cmp	r3, #89	@ 0x59
 8003c12:	d198      	bne.n	8003b46 <_scanf_float+0x66>
 8003c14:	2d07      	cmp	r5, #7
 8003c16:	d196      	bne.n	8003b46 <_scanf_float+0x66>
 8003c18:	2508      	movs	r5, #8
 8003c1a:	e02c      	b.n	8003c76 <_scanf_float+0x196>
 8003c1c:	2b74      	cmp	r3, #116	@ 0x74
 8003c1e:	d073      	beq.n	8003d08 <_scanf_float+0x228>
 8003c20:	2b79      	cmp	r3, #121	@ 0x79
 8003c22:	e7f6      	b.n	8003c12 <_scanf_float+0x132>
 8003c24:	6821      	ldr	r1, [r4, #0]
 8003c26:	05c8      	lsls	r0, r1, #23
 8003c28:	d51b      	bpl.n	8003c62 <_scanf_float+0x182>
 8003c2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003c2e:	6021      	str	r1, [r4, #0]
 8003c30:	f109 0901 	add.w	r9, r9, #1
 8003c34:	f1bb 0f00 	cmp.w	fp, #0
 8003c38:	d003      	beq.n	8003c42 <_scanf_float+0x162>
 8003c3a:	3201      	adds	r2, #1
 8003c3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c40:	60a2      	str	r2, [r4, #8]
 8003c42:	68a3      	ldr	r3, [r4, #8]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	60a3      	str	r3, [r4, #8]
 8003c48:	6923      	ldr	r3, [r4, #16]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	f340 8087 	ble.w	8003d68 <_scanf_float+0x288>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	e764      	b.n	8003b2c <_scanf_float+0x4c>
 8003c62:	eb1a 0105 	adds.w	r1, sl, r5
 8003c66:	f47f af6e 	bne.w	8003b46 <_scanf_float+0x66>
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	468a      	mov	sl, r1
 8003c6e:	6822      	ldr	r2, [r4, #0]
 8003c70:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003c74:	6022      	str	r2, [r4, #0]
 8003c76:	f806 3b01 	strb.w	r3, [r6], #1
 8003c7a:	e7e2      	b.n	8003c42 <_scanf_float+0x162>
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	0610      	lsls	r0, r2, #24
 8003c80:	f57f af61 	bpl.w	8003b46 <_scanf_float+0x66>
 8003c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c88:	6022      	str	r2, [r4, #0]
 8003c8a:	e7f4      	b.n	8003c76 <_scanf_float+0x196>
 8003c8c:	f1ba 0f00 	cmp.w	sl, #0
 8003c90:	d10e      	bne.n	8003cb0 <_scanf_float+0x1d0>
 8003c92:	f1b9 0f00 	cmp.w	r9, #0
 8003c96:	d10e      	bne.n	8003cb6 <_scanf_float+0x1d6>
 8003c98:	6822      	ldr	r2, [r4, #0]
 8003c9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003c9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003ca2:	d108      	bne.n	8003cb6 <_scanf_float+0x1d6>
 8003ca4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003ca8:	f04f 0a01 	mov.w	sl, #1
 8003cac:	6022      	str	r2, [r4, #0]
 8003cae:	e7e2      	b.n	8003c76 <_scanf_float+0x196>
 8003cb0:	f1ba 0f02 	cmp.w	sl, #2
 8003cb4:	d055      	beq.n	8003d62 <_scanf_float+0x282>
 8003cb6:	2d01      	cmp	r5, #1
 8003cb8:	d002      	beq.n	8003cc0 <_scanf_float+0x1e0>
 8003cba:	2d04      	cmp	r5, #4
 8003cbc:	f47f af43 	bne.w	8003b46 <_scanf_float+0x66>
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	b2ed      	uxtb	r5, r5
 8003cc4:	e7d7      	b.n	8003c76 <_scanf_float+0x196>
 8003cc6:	f1ba 0f01 	cmp.w	sl, #1
 8003cca:	f47f af3c 	bne.w	8003b46 <_scanf_float+0x66>
 8003cce:	f04f 0a02 	mov.w	sl, #2
 8003cd2:	e7d0      	b.n	8003c76 <_scanf_float+0x196>
 8003cd4:	b97d      	cbnz	r5, 8003cf6 <_scanf_float+0x216>
 8003cd6:	f1b9 0f00 	cmp.w	r9, #0
 8003cda:	f47f af37 	bne.w	8003b4c <_scanf_float+0x6c>
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003ce4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003ce8:	f040 8103 	bne.w	8003ef2 <_scanf_float+0x412>
 8003cec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003cf0:	2501      	movs	r5, #1
 8003cf2:	6022      	str	r2, [r4, #0]
 8003cf4:	e7bf      	b.n	8003c76 <_scanf_float+0x196>
 8003cf6:	2d03      	cmp	r5, #3
 8003cf8:	d0e2      	beq.n	8003cc0 <_scanf_float+0x1e0>
 8003cfa:	2d05      	cmp	r5, #5
 8003cfc:	e7de      	b.n	8003cbc <_scanf_float+0x1dc>
 8003cfe:	2d02      	cmp	r5, #2
 8003d00:	f47f af21 	bne.w	8003b46 <_scanf_float+0x66>
 8003d04:	2503      	movs	r5, #3
 8003d06:	e7b6      	b.n	8003c76 <_scanf_float+0x196>
 8003d08:	2d06      	cmp	r5, #6
 8003d0a:	f47f af1c 	bne.w	8003b46 <_scanf_float+0x66>
 8003d0e:	2507      	movs	r5, #7
 8003d10:	e7b1      	b.n	8003c76 <_scanf_float+0x196>
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	0591      	lsls	r1, r2, #22
 8003d16:	f57f af16 	bpl.w	8003b46 <_scanf_float+0x66>
 8003d1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003d1e:	6022      	str	r2, [r4, #0]
 8003d20:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d24:	e7a7      	b.n	8003c76 <_scanf_float+0x196>
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003d2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003d30:	d006      	beq.n	8003d40 <_scanf_float+0x260>
 8003d32:	0550      	lsls	r0, r2, #21
 8003d34:	f57f af07 	bpl.w	8003b46 <_scanf_float+0x66>
 8003d38:	f1b9 0f00 	cmp.w	r9, #0
 8003d3c:	f000 80d9 	beq.w	8003ef2 <_scanf_float+0x412>
 8003d40:	0591      	lsls	r1, r2, #22
 8003d42:	bf58      	it	pl
 8003d44:	9902      	ldrpl	r1, [sp, #8]
 8003d46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003d4a:	bf58      	it	pl
 8003d4c:	eba9 0101 	subpl.w	r1, r9, r1
 8003d50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003d54:	f04f 0900 	mov.w	r9, #0
 8003d58:	bf58      	it	pl
 8003d5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003d5e:	6022      	str	r2, [r4, #0]
 8003d60:	e789      	b.n	8003c76 <_scanf_float+0x196>
 8003d62:	f04f 0a03 	mov.w	sl, #3
 8003d66:	e786      	b.n	8003c76 <_scanf_float+0x196>
 8003d68:	4639      	mov	r1, r7
 8003d6a:	4640      	mov	r0, r8
 8003d6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003d70:	4798      	blx	r3
 8003d72:	2800      	cmp	r0, #0
 8003d74:	f43f aeda 	beq.w	8003b2c <_scanf_float+0x4c>
 8003d78:	e6e5      	b.n	8003b46 <_scanf_float+0x66>
 8003d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d7e:	463a      	mov	r2, r7
 8003d80:	4640      	mov	r0, r8
 8003d82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d86:	4798      	blx	r3
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	6123      	str	r3, [r4, #16]
 8003d8e:	e6e7      	b.n	8003b60 <_scanf_float+0x80>
 8003d90:	1e6b      	subs	r3, r5, #1
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d824      	bhi.n	8003de0 <_scanf_float+0x300>
 8003d96:	2d02      	cmp	r5, #2
 8003d98:	d836      	bhi.n	8003e08 <_scanf_float+0x328>
 8003d9a:	9b01      	ldr	r3, [sp, #4]
 8003d9c:	429e      	cmp	r6, r3
 8003d9e:	f67f aee3 	bls.w	8003b68 <_scanf_float+0x88>
 8003da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003da6:	463a      	mov	r2, r7
 8003da8:	4640      	mov	r0, r8
 8003daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003dae:	4798      	blx	r3
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	6123      	str	r3, [r4, #16]
 8003db6:	e7f0      	b.n	8003d9a <_scanf_float+0x2ba>
 8003db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dbc:	463a      	mov	r2, r7
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003dc4:	4798      	blx	r3
 8003dc6:	6923      	ldr	r3, [r4, #16]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	6123      	str	r3, [r4, #16]
 8003dcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dd0:	fa5f fa8a 	uxtb.w	sl, sl
 8003dd4:	f1ba 0f02 	cmp.w	sl, #2
 8003dd8:	d1ee      	bne.n	8003db8 <_scanf_float+0x2d8>
 8003dda:	3d03      	subs	r5, #3
 8003ddc:	b2ed      	uxtb	r5, r5
 8003dde:	1b76      	subs	r6, r6, r5
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	05da      	lsls	r2, r3, #23
 8003de4:	d530      	bpl.n	8003e48 <_scanf_float+0x368>
 8003de6:	055b      	lsls	r3, r3, #21
 8003de8:	d511      	bpl.n	8003e0e <_scanf_float+0x32e>
 8003dea:	9b01      	ldr	r3, [sp, #4]
 8003dec:	429e      	cmp	r6, r3
 8003dee:	f67f aebb 	bls.w	8003b68 <_scanf_float+0x88>
 8003df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003df6:	463a      	mov	r2, r7
 8003df8:	4640      	mov	r0, r8
 8003dfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003dfe:	4798      	blx	r3
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	e7f0      	b.n	8003dea <_scanf_float+0x30a>
 8003e08:	46aa      	mov	sl, r5
 8003e0a:	46b3      	mov	fp, r6
 8003e0c:	e7de      	b.n	8003dcc <_scanf_float+0x2ec>
 8003e0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003e12:	6923      	ldr	r3, [r4, #16]
 8003e14:	2965      	cmp	r1, #101	@ 0x65
 8003e16:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e1e:	6123      	str	r3, [r4, #16]
 8003e20:	d00c      	beq.n	8003e3c <_scanf_float+0x35c>
 8003e22:	2945      	cmp	r1, #69	@ 0x45
 8003e24:	d00a      	beq.n	8003e3c <_scanf_float+0x35c>
 8003e26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e2a:	463a      	mov	r2, r7
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	4798      	blx	r3
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	1eb5      	subs	r5, r6, #2
 8003e3a:	6123      	str	r3, [r4, #16]
 8003e3c:	463a      	mov	r2, r7
 8003e3e:	4640      	mov	r0, r8
 8003e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e44:	4798      	blx	r3
 8003e46:	462e      	mov	r6, r5
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	f012 0210 	ands.w	r2, r2, #16
 8003e4e:	d001      	beq.n	8003e54 <_scanf_float+0x374>
 8003e50:	2000      	movs	r0, #0
 8003e52:	e68a      	b.n	8003b6a <_scanf_float+0x8a>
 8003e54:	7032      	strb	r2, [r6, #0]
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e60:	d11c      	bne.n	8003e9c <_scanf_float+0x3bc>
 8003e62:	9b02      	ldr	r3, [sp, #8]
 8003e64:	454b      	cmp	r3, r9
 8003e66:	eba3 0209 	sub.w	r2, r3, r9
 8003e6a:	d123      	bne.n	8003eb4 <_scanf_float+0x3d4>
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4640      	mov	r0, r8
 8003e70:	9901      	ldr	r1, [sp, #4]
 8003e72:	f002 fbed 	bl	8006650 <_strtod_r>
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	6825      	ldr	r5, [r4, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f015 0f02 	tst.w	r5, #2
 8003e80:	4606      	mov	r6, r0
 8003e82:	460f      	mov	r7, r1
 8003e84:	f103 0204 	add.w	r2, r3, #4
 8003e88:	d01f      	beq.n	8003eca <_scanf_float+0x3ea>
 8003e8a:	9903      	ldr	r1, [sp, #12]
 8003e8c:	600a      	str	r2, [r1, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	e9c3 6700 	strd	r6, r7, [r3]
 8003e94:	68e3      	ldr	r3, [r4, #12]
 8003e96:	3301      	adds	r3, #1
 8003e98:	60e3      	str	r3, [r4, #12]
 8003e9a:	e7d9      	b.n	8003e50 <_scanf_float+0x370>
 8003e9c:	9b04      	ldr	r3, [sp, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0e4      	beq.n	8003e6c <_scanf_float+0x38c>
 8003ea2:	9905      	ldr	r1, [sp, #20]
 8003ea4:	230a      	movs	r3, #10
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	3101      	adds	r1, #1
 8003eaa:	f002 fc51 	bl	8006750 <_strtol_r>
 8003eae:	9b04      	ldr	r3, [sp, #16]
 8003eb0:	9e05      	ldr	r6, [sp, #20]
 8003eb2:	1ac2      	subs	r2, r0, r3
 8003eb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003eb8:	429e      	cmp	r6, r3
 8003eba:	bf28      	it	cs
 8003ebc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	490d      	ldr	r1, [pc, #52]	@ (8003ef8 <_scanf_float+0x418>)
 8003ec4:	f000 f8de 	bl	8004084 <siprintf>
 8003ec8:	e7d0      	b.n	8003e6c <_scanf_float+0x38c>
 8003eca:	076d      	lsls	r5, r5, #29
 8003ecc:	d4dd      	bmi.n	8003e8a <_scanf_float+0x3aa>
 8003ece:	9d03      	ldr	r5, [sp, #12]
 8003ed0:	602a      	str	r2, [r5, #0]
 8003ed2:	681d      	ldr	r5, [r3, #0]
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	f7fc fe4c 	bl	8000b74 <__aeabi_dcmpun>
 8003edc:	b120      	cbz	r0, 8003ee8 <_scanf_float+0x408>
 8003ede:	4807      	ldr	r0, [pc, #28]	@ (8003efc <_scanf_float+0x41c>)
 8003ee0:	f000 f9c2 	bl	8004268 <nanf>
 8003ee4:	6028      	str	r0, [r5, #0]
 8003ee6:	e7d5      	b.n	8003e94 <_scanf_float+0x3b4>
 8003ee8:	4630      	mov	r0, r6
 8003eea:	4639      	mov	r1, r7
 8003eec:	f7fc fea0 	bl	8000c30 <__aeabi_d2f>
 8003ef0:	e7f8      	b.n	8003ee4 <_scanf_float+0x404>
 8003ef2:	f04f 0900 	mov.w	r9, #0
 8003ef6:	e62d      	b.n	8003b54 <_scanf_float+0x74>
 8003ef8:	0800798a 	.word	0x0800798a
 8003efc:	08007d25 	.word	0x08007d25

08003f00 <std>:
 8003f00:	2300      	movs	r3, #0
 8003f02:	b510      	push	{r4, lr}
 8003f04:	4604      	mov	r4, r0
 8003f06:	e9c0 3300 	strd	r3, r3, [r0]
 8003f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f0e:	6083      	str	r3, [r0, #8]
 8003f10:	8181      	strh	r1, [r0, #12]
 8003f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f14:	81c2      	strh	r2, [r0, #14]
 8003f16:	6183      	str	r3, [r0, #24]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	305c      	adds	r0, #92	@ 0x5c
 8003f1e:	f000 f914 	bl	800414a <memset>
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <std+0x58>)
 8003f24:	6224      	str	r4, [r4, #32]
 8003f26:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f28:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <std+0x5c>)
 8003f2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <std+0x60>)
 8003f2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f30:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <std+0x64>)
 8003f32:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f34:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <std+0x68>)
 8003f36:	429c      	cmp	r4, r3
 8003f38:	d006      	beq.n	8003f48 <std+0x48>
 8003f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f3e:	4294      	cmp	r4, r2
 8003f40:	d002      	beq.n	8003f48 <std+0x48>
 8003f42:	33d0      	adds	r3, #208	@ 0xd0
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d105      	bne.n	8003f54 <std+0x54>
 8003f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f50:	f000 b978 	b.w	8004244 <__retarget_lock_init_recursive>
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	bf00      	nop
 8003f58:	080040c5 	.word	0x080040c5
 8003f5c:	080040e7 	.word	0x080040e7
 8003f60:	0800411f 	.word	0x0800411f
 8003f64:	08004143 	.word	0x08004143
 8003f68:	2000028c 	.word	0x2000028c

08003f6c <stdio_exit_handler>:
 8003f6c:	4a02      	ldr	r2, [pc, #8]	@ (8003f78 <stdio_exit_handler+0xc>)
 8003f6e:	4903      	ldr	r1, [pc, #12]	@ (8003f7c <stdio_exit_handler+0x10>)
 8003f70:	4803      	ldr	r0, [pc, #12]	@ (8003f80 <stdio_exit_handler+0x14>)
 8003f72:	f000 b869 	b.w	8004048 <_fwalk_sglue>
 8003f76:	bf00      	nop
 8003f78:	2000000c 	.word	0x2000000c
 8003f7c:	08006b05 	.word	0x08006b05
 8003f80:	2000001c 	.word	0x2000001c

08003f84 <cleanup_stdio>:
 8003f84:	6841      	ldr	r1, [r0, #4]
 8003f86:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <cleanup_stdio+0x34>)
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	4299      	cmp	r1, r3
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	d001      	beq.n	8003f94 <cleanup_stdio+0x10>
 8003f90:	f002 fdb8 	bl	8006b04 <_fflush_r>
 8003f94:	68a1      	ldr	r1, [r4, #8]
 8003f96:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <cleanup_stdio+0x38>)
 8003f98:	4299      	cmp	r1, r3
 8003f9a:	d002      	beq.n	8003fa2 <cleanup_stdio+0x1e>
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f002 fdb1 	bl	8006b04 <_fflush_r>
 8003fa2:	68e1      	ldr	r1, [r4, #12]
 8003fa4:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <cleanup_stdio+0x3c>)
 8003fa6:	4299      	cmp	r1, r3
 8003fa8:	d004      	beq.n	8003fb4 <cleanup_stdio+0x30>
 8003faa:	4620      	mov	r0, r4
 8003fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb0:	f002 bda8 	b.w	8006b04 <_fflush_r>
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	bf00      	nop
 8003fb8:	2000028c 	.word	0x2000028c
 8003fbc:	200002f4 	.word	0x200002f4
 8003fc0:	2000035c 	.word	0x2000035c

08003fc4 <global_stdio_init.part.0>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <global_stdio_init.part.0+0x30>)
 8003fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ff8 <global_stdio_init.part.0+0x34>)
 8003fca:	4a0c      	ldr	r2, [pc, #48]	@ (8003ffc <global_stdio_init.part.0+0x38>)
 8003fcc:	4620      	mov	r0, r4
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	2104      	movs	r1, #4
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f7ff ff94 	bl	8003f00 <std>
 8003fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2109      	movs	r1, #9
 8003fe0:	f7ff ff8e 	bl	8003f00 <std>
 8003fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fe8:	2202      	movs	r2, #2
 8003fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fee:	2112      	movs	r1, #18
 8003ff0:	f7ff bf86 	b.w	8003f00 <std>
 8003ff4:	200003c4 	.word	0x200003c4
 8003ff8:	2000028c 	.word	0x2000028c
 8003ffc:	08003f6d 	.word	0x08003f6d

08004000 <__sfp_lock_acquire>:
 8004000:	4801      	ldr	r0, [pc, #4]	@ (8004008 <__sfp_lock_acquire+0x8>)
 8004002:	f000 b920 	b.w	8004246 <__retarget_lock_acquire_recursive>
 8004006:	bf00      	nop
 8004008:	200003cd 	.word	0x200003cd

0800400c <__sfp_lock_release>:
 800400c:	4801      	ldr	r0, [pc, #4]	@ (8004014 <__sfp_lock_release+0x8>)
 800400e:	f000 b91b 	b.w	8004248 <__retarget_lock_release_recursive>
 8004012:	bf00      	nop
 8004014:	200003cd 	.word	0x200003cd

08004018 <__sinit>:
 8004018:	b510      	push	{r4, lr}
 800401a:	4604      	mov	r4, r0
 800401c:	f7ff fff0 	bl	8004000 <__sfp_lock_acquire>
 8004020:	6a23      	ldr	r3, [r4, #32]
 8004022:	b11b      	cbz	r3, 800402c <__sinit+0x14>
 8004024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004028:	f7ff bff0 	b.w	800400c <__sfp_lock_release>
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <__sinit+0x28>)
 800402e:	6223      	str	r3, [r4, #32]
 8004030:	4b04      	ldr	r3, [pc, #16]	@ (8004044 <__sinit+0x2c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f5      	bne.n	8004024 <__sinit+0xc>
 8004038:	f7ff ffc4 	bl	8003fc4 <global_stdio_init.part.0>
 800403c:	e7f2      	b.n	8004024 <__sinit+0xc>
 800403e:	bf00      	nop
 8004040:	08003f85 	.word	0x08003f85
 8004044:	200003c4 	.word	0x200003c4

08004048 <_fwalk_sglue>:
 8004048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800404c:	4607      	mov	r7, r0
 800404e:	4688      	mov	r8, r1
 8004050:	4614      	mov	r4, r2
 8004052:	2600      	movs	r6, #0
 8004054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004058:	f1b9 0901 	subs.w	r9, r9, #1
 800405c:	d505      	bpl.n	800406a <_fwalk_sglue+0x22>
 800405e:	6824      	ldr	r4, [r4, #0]
 8004060:	2c00      	cmp	r4, #0
 8004062:	d1f7      	bne.n	8004054 <_fwalk_sglue+0xc>
 8004064:	4630      	mov	r0, r6
 8004066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800406a:	89ab      	ldrh	r3, [r5, #12]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d907      	bls.n	8004080 <_fwalk_sglue+0x38>
 8004070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004074:	3301      	adds	r3, #1
 8004076:	d003      	beq.n	8004080 <_fwalk_sglue+0x38>
 8004078:	4629      	mov	r1, r5
 800407a:	4638      	mov	r0, r7
 800407c:	47c0      	blx	r8
 800407e:	4306      	orrs	r6, r0
 8004080:	3568      	adds	r5, #104	@ 0x68
 8004082:	e7e9      	b.n	8004058 <_fwalk_sglue+0x10>

08004084 <siprintf>:
 8004084:	b40e      	push	{r1, r2, r3}
 8004086:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800408a:	b500      	push	{lr}
 800408c:	b09c      	sub	sp, #112	@ 0x70
 800408e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004090:	9002      	str	r0, [sp, #8]
 8004092:	9006      	str	r0, [sp, #24]
 8004094:	9107      	str	r1, [sp, #28]
 8004096:	9104      	str	r1, [sp, #16]
 8004098:	4808      	ldr	r0, [pc, #32]	@ (80040bc <siprintf+0x38>)
 800409a:	4909      	ldr	r1, [pc, #36]	@ (80040c0 <siprintf+0x3c>)
 800409c:	f853 2b04 	ldr.w	r2, [r3], #4
 80040a0:	9105      	str	r1, [sp, #20]
 80040a2:	6800      	ldr	r0, [r0, #0]
 80040a4:	a902      	add	r1, sp, #8
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	f002 fbb0 	bl	800680c <_svfiprintf_r>
 80040ac:	2200      	movs	r2, #0
 80040ae:	9b02      	ldr	r3, [sp, #8]
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	b01c      	add	sp, #112	@ 0x70
 80040b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040b8:	b003      	add	sp, #12
 80040ba:	4770      	bx	lr
 80040bc:	20000018 	.word	0x20000018
 80040c0:	ffff0208 	.word	0xffff0208

080040c4 <__sread>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	460c      	mov	r4, r1
 80040c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040cc:	f000 f86c 	bl	80041a8 <_read_r>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	bfab      	itete	ge
 80040d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040d6:	89a3      	ldrhlt	r3, [r4, #12]
 80040d8:	181b      	addge	r3, r3, r0
 80040da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040de:	bfac      	ite	ge
 80040e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040e2:	81a3      	strhlt	r3, [r4, #12]
 80040e4:	bd10      	pop	{r4, pc}

080040e6 <__swrite>:
 80040e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ea:	461f      	mov	r7, r3
 80040ec:	898b      	ldrh	r3, [r1, #12]
 80040ee:	4605      	mov	r5, r0
 80040f0:	05db      	lsls	r3, r3, #23
 80040f2:	460c      	mov	r4, r1
 80040f4:	4616      	mov	r6, r2
 80040f6:	d505      	bpl.n	8004104 <__swrite+0x1e>
 80040f8:	2302      	movs	r3, #2
 80040fa:	2200      	movs	r2, #0
 80040fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004100:	f000 f840 	bl	8004184 <_lseek_r>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	4632      	mov	r2, r6
 8004108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800410c:	81a3      	strh	r3, [r4, #12]
 800410e:	4628      	mov	r0, r5
 8004110:	463b      	mov	r3, r7
 8004112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800411a:	f000 b857 	b.w	80041cc <_write_r>

0800411e <__sseek>:
 800411e:	b510      	push	{r4, lr}
 8004120:	460c      	mov	r4, r1
 8004122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004126:	f000 f82d 	bl	8004184 <_lseek_r>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	bf15      	itete	ne
 8004130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800413a:	81a3      	strheq	r3, [r4, #12]
 800413c:	bf18      	it	ne
 800413e:	81a3      	strhne	r3, [r4, #12]
 8004140:	bd10      	pop	{r4, pc}

08004142 <__sclose>:
 8004142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004146:	f000 b80d 	b.w	8004164 <_close_r>

0800414a <memset>:
 800414a:	4603      	mov	r3, r0
 800414c:	4402      	add	r2, r0
 800414e:	4293      	cmp	r3, r2
 8004150:	d100      	bne.n	8004154 <memset+0xa>
 8004152:	4770      	bx	lr
 8004154:	f803 1b01 	strb.w	r1, [r3], #1
 8004158:	e7f9      	b.n	800414e <memset+0x4>
	...

0800415c <_localeconv_r>:
 800415c:	4800      	ldr	r0, [pc, #0]	@ (8004160 <_localeconv_r+0x4>)
 800415e:	4770      	bx	lr
 8004160:	20000158 	.word	0x20000158

08004164 <_close_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	2300      	movs	r3, #0
 8004168:	4d05      	ldr	r5, [pc, #20]	@ (8004180 <_close_r+0x1c>)
 800416a:	4604      	mov	r4, r0
 800416c:	4608      	mov	r0, r1
 800416e:	602b      	str	r3, [r5, #0]
 8004170:	f7fd f88b 	bl	800128a <_close>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_close_r+0x1a>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_close_r+0x1a>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	200003c8 	.word	0x200003c8

08004184 <_lseek_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4604      	mov	r4, r0
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	2200      	movs	r2, #0
 800418e:	4d05      	ldr	r5, [pc, #20]	@ (80041a4 <_lseek_r+0x20>)
 8004190:	602a      	str	r2, [r5, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	f7fd f89d 	bl	80012d2 <_lseek>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_lseek_r+0x1e>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_lseek_r+0x1e>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	200003c8 	.word	0x200003c8

080041a8 <_read_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4604      	mov	r4, r0
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	2200      	movs	r2, #0
 80041b2:	4d05      	ldr	r5, [pc, #20]	@ (80041c8 <_read_r+0x20>)
 80041b4:	602a      	str	r2, [r5, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f7fd f82e 	bl	8001218 <_read>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d102      	bne.n	80041c6 <_read_r+0x1e>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	b103      	cbz	r3, 80041c6 <_read_r+0x1e>
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	200003c8 	.word	0x200003c8

080041cc <_write_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4604      	mov	r4, r0
 80041d0:	4608      	mov	r0, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	2200      	movs	r2, #0
 80041d6:	4d05      	ldr	r5, [pc, #20]	@ (80041ec <_write_r+0x20>)
 80041d8:	602a      	str	r2, [r5, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	f7fd f839 	bl	8001252 <_write>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_write_r+0x1e>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_write_r+0x1e>
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	200003c8 	.word	0x200003c8

080041f0 <__errno>:
 80041f0:	4b01      	ldr	r3, [pc, #4]	@ (80041f8 <__errno+0x8>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000018 	.word	0x20000018

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	2600      	movs	r6, #0
 8004200:	4d0c      	ldr	r5, [pc, #48]	@ (8004234 <__libc_init_array+0x38>)
 8004202:	4c0d      	ldr	r4, [pc, #52]	@ (8004238 <__libc_init_array+0x3c>)
 8004204:	1b64      	subs	r4, r4, r5
 8004206:	10a4      	asrs	r4, r4, #2
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	f003 fb66 	bl	80078dc <_init>
 8004210:	2600      	movs	r6, #0
 8004212:	4d0a      	ldr	r5, [pc, #40]	@ (800423c <__libc_init_array+0x40>)
 8004214:	4c0a      	ldr	r4, [pc, #40]	@ (8004240 <__libc_init_array+0x44>)
 8004216:	1b64      	subs	r4, r4, r5
 8004218:	10a4      	asrs	r4, r4, #2
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	08007d90 	.word	0x08007d90
 8004238:	08007d90 	.word	0x08007d90
 800423c:	08007d90 	.word	0x08007d90
 8004240:	08007d94 	.word	0x08007d94

08004244 <__retarget_lock_init_recursive>:
 8004244:	4770      	bx	lr

08004246 <__retarget_lock_acquire_recursive>:
 8004246:	4770      	bx	lr

08004248 <__retarget_lock_release_recursive>:
 8004248:	4770      	bx	lr

0800424a <memchr>:
 800424a:	4603      	mov	r3, r0
 800424c:	b510      	push	{r4, lr}
 800424e:	b2c9      	uxtb	r1, r1
 8004250:	4402      	add	r2, r0
 8004252:	4293      	cmp	r3, r2
 8004254:	4618      	mov	r0, r3
 8004256:	d101      	bne.n	800425c <memchr+0x12>
 8004258:	2000      	movs	r0, #0
 800425a:	e003      	b.n	8004264 <memchr+0x1a>
 800425c:	7804      	ldrb	r4, [r0, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	428c      	cmp	r4, r1
 8004262:	d1f6      	bne.n	8004252 <memchr+0x8>
 8004264:	bd10      	pop	{r4, pc}
	...

08004268 <nanf>:
 8004268:	4800      	ldr	r0, [pc, #0]	@ (800426c <nanf+0x4>)
 800426a:	4770      	bx	lr
 800426c:	7fc00000 	.word	0x7fc00000

08004270 <quorem>:
 8004270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	6903      	ldr	r3, [r0, #16]
 8004276:	690c      	ldr	r4, [r1, #16]
 8004278:	4607      	mov	r7, r0
 800427a:	42a3      	cmp	r3, r4
 800427c:	db7e      	blt.n	800437c <quorem+0x10c>
 800427e:	3c01      	subs	r4, #1
 8004280:	00a3      	lsls	r3, r4, #2
 8004282:	f100 0514 	add.w	r5, r0, #20
 8004286:	f101 0814 	add.w	r8, r1, #20
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800429a:	3301      	adds	r3, #1
 800429c:	429a      	cmp	r2, r3
 800429e:	fbb2 f6f3 	udiv	r6, r2, r3
 80042a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042a6:	d32e      	bcc.n	8004306 <quorem+0x96>
 80042a8:	f04f 0a00 	mov.w	sl, #0
 80042ac:	46c4      	mov	ip, r8
 80042ae:	46ae      	mov	lr, r5
 80042b0:	46d3      	mov	fp, sl
 80042b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80042b6:	b298      	uxth	r0, r3
 80042b8:	fb06 a000 	mla	r0, r6, r0, sl
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	0c02      	lsrs	r2, r0, #16
 80042c0:	fb06 2303 	mla	r3, r6, r3, r2
 80042c4:	f8de 2000 	ldr.w	r2, [lr]
 80042c8:	b280      	uxth	r0, r0
 80042ca:	b292      	uxth	r2, r2
 80042cc:	1a12      	subs	r2, r2, r0
 80042ce:	445a      	add	r2, fp
 80042d0:	f8de 0000 	ldr.w	r0, [lr]
 80042d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80042d8:	b29b      	uxth	r3, r3
 80042da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80042de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80042e2:	b292      	uxth	r2, r2
 80042e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80042e8:	45e1      	cmp	r9, ip
 80042ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80042ee:	f84e 2b04 	str.w	r2, [lr], #4
 80042f2:	d2de      	bcs.n	80042b2 <quorem+0x42>
 80042f4:	9b00      	ldr	r3, [sp, #0]
 80042f6:	58eb      	ldr	r3, [r5, r3]
 80042f8:	b92b      	cbnz	r3, 8004306 <quorem+0x96>
 80042fa:	9b01      	ldr	r3, [sp, #4]
 80042fc:	3b04      	subs	r3, #4
 80042fe:	429d      	cmp	r5, r3
 8004300:	461a      	mov	r2, r3
 8004302:	d32f      	bcc.n	8004364 <quorem+0xf4>
 8004304:	613c      	str	r4, [r7, #16]
 8004306:	4638      	mov	r0, r7
 8004308:	f001 f9c2 	bl	8005690 <__mcmp>
 800430c:	2800      	cmp	r0, #0
 800430e:	db25      	blt.n	800435c <quorem+0xec>
 8004310:	4629      	mov	r1, r5
 8004312:	2000      	movs	r0, #0
 8004314:	f858 2b04 	ldr.w	r2, [r8], #4
 8004318:	f8d1 c000 	ldr.w	ip, [r1]
 800431c:	fa1f fe82 	uxth.w	lr, r2
 8004320:	fa1f f38c 	uxth.w	r3, ip
 8004324:	eba3 030e 	sub.w	r3, r3, lr
 8004328:	4403      	add	r3, r0
 800432a:	0c12      	lsrs	r2, r2, #16
 800432c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004330:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004334:	b29b      	uxth	r3, r3
 8004336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800433a:	45c1      	cmp	r9, r8
 800433c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004340:	f841 3b04 	str.w	r3, [r1], #4
 8004344:	d2e6      	bcs.n	8004314 <quorem+0xa4>
 8004346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800434a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800434e:	b922      	cbnz	r2, 800435a <quorem+0xea>
 8004350:	3b04      	subs	r3, #4
 8004352:	429d      	cmp	r5, r3
 8004354:	461a      	mov	r2, r3
 8004356:	d30b      	bcc.n	8004370 <quorem+0x100>
 8004358:	613c      	str	r4, [r7, #16]
 800435a:	3601      	adds	r6, #1
 800435c:	4630      	mov	r0, r6
 800435e:	b003      	add	sp, #12
 8004360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	3b04      	subs	r3, #4
 8004368:	2a00      	cmp	r2, #0
 800436a:	d1cb      	bne.n	8004304 <quorem+0x94>
 800436c:	3c01      	subs	r4, #1
 800436e:	e7c6      	b.n	80042fe <quorem+0x8e>
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	3b04      	subs	r3, #4
 8004374:	2a00      	cmp	r2, #0
 8004376:	d1ef      	bne.n	8004358 <quorem+0xe8>
 8004378:	3c01      	subs	r4, #1
 800437a:	e7ea      	b.n	8004352 <quorem+0xe2>
 800437c:	2000      	movs	r0, #0
 800437e:	e7ee      	b.n	800435e <quorem+0xee>

08004380 <_dtoa_r>:
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	4614      	mov	r4, r2
 8004386:	461d      	mov	r5, r3
 8004388:	69c7      	ldr	r7, [r0, #28]
 800438a:	b097      	sub	sp, #92	@ 0x5c
 800438c:	4683      	mov	fp, r0
 800438e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004392:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004394:	b97f      	cbnz	r7, 80043b6 <_dtoa_r+0x36>
 8004396:	2010      	movs	r0, #16
 8004398:	f000 fe02 	bl	8004fa0 <malloc>
 800439c:	4602      	mov	r2, r0
 800439e:	f8cb 001c 	str.w	r0, [fp, #28]
 80043a2:	b920      	cbnz	r0, 80043ae <_dtoa_r+0x2e>
 80043a4:	21ef      	movs	r1, #239	@ 0xef
 80043a6:	4ba8      	ldr	r3, [pc, #672]	@ (8004648 <_dtoa_r+0x2c8>)
 80043a8:	48a8      	ldr	r0, [pc, #672]	@ (800464c <_dtoa_r+0x2cc>)
 80043aa:	f002 fc23 	bl	8006bf4 <__assert_func>
 80043ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80043b2:	6007      	str	r7, [r0, #0]
 80043b4:	60c7      	str	r7, [r0, #12]
 80043b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043ba:	6819      	ldr	r1, [r3, #0]
 80043bc:	b159      	cbz	r1, 80043d6 <_dtoa_r+0x56>
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	2301      	movs	r3, #1
 80043c2:	4093      	lsls	r3, r2
 80043c4:	604a      	str	r2, [r1, #4]
 80043c6:	608b      	str	r3, [r1, #8]
 80043c8:	4658      	mov	r0, fp
 80043ca:	f000 fedf 	bl	800518c <_Bfree>
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	1e2b      	subs	r3, r5, #0
 80043d8:	bfaf      	iteee	ge
 80043da:	2300      	movge	r3, #0
 80043dc:	2201      	movlt	r2, #1
 80043de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80043e2:	9303      	strlt	r3, [sp, #12]
 80043e4:	bfa8      	it	ge
 80043e6:	6033      	strge	r3, [r6, #0]
 80043e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80043ec:	4b98      	ldr	r3, [pc, #608]	@ (8004650 <_dtoa_r+0x2d0>)
 80043ee:	bfb8      	it	lt
 80043f0:	6032      	strlt	r2, [r6, #0]
 80043f2:	ea33 0308 	bics.w	r3, r3, r8
 80043f6:	d112      	bne.n	800441e <_dtoa_r+0x9e>
 80043f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80043fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004404:	4323      	orrs	r3, r4
 8004406:	f000 8550 	beq.w	8004eaa <_dtoa_r+0xb2a>
 800440a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800440c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004654 <_dtoa_r+0x2d4>
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8552 	beq.w	8004eba <_dtoa_r+0xb3a>
 8004416:	f10a 0303 	add.w	r3, sl, #3
 800441a:	f000 bd4c 	b.w	8004eb6 <_dtoa_r+0xb36>
 800441e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004422:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	2300      	movs	r3, #0
 800442e:	f7fc fb6f 	bl	8000b10 <__aeabi_dcmpeq>
 8004432:	4607      	mov	r7, r0
 8004434:	b158      	cbz	r0, 800444e <_dtoa_r+0xce>
 8004436:	2301      	movs	r3, #1
 8004438:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800443e:	b113      	cbz	r3, 8004446 <_dtoa_r+0xc6>
 8004440:	4b85      	ldr	r3, [pc, #532]	@ (8004658 <_dtoa_r+0x2d8>)
 8004442:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800465c <_dtoa_r+0x2dc>
 800444a:	f000 bd36 	b.w	8004eba <_dtoa_r+0xb3a>
 800444e:	ab14      	add	r3, sp, #80	@ 0x50
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	ab15      	add	r3, sp, #84	@ 0x54
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	4658      	mov	r0, fp
 8004458:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800445c:	f001 fa30 	bl	80058c0 <__d2b>
 8004460:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004464:	4681      	mov	r9, r0
 8004466:	2e00      	cmp	r6, #0
 8004468:	d077      	beq.n	800455a <_dtoa_r+0x1da>
 800446a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800446e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004470:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004478:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800447c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004480:	9712      	str	r7, [sp, #72]	@ 0x48
 8004482:	4619      	mov	r1, r3
 8004484:	2200      	movs	r2, #0
 8004486:	4b76      	ldr	r3, [pc, #472]	@ (8004660 <_dtoa_r+0x2e0>)
 8004488:	f7fb ff22 	bl	80002d0 <__aeabi_dsub>
 800448c:	a368      	add	r3, pc, #416	@ (adr r3, 8004630 <_dtoa_r+0x2b0>)
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	f7fc f8d5 	bl	8000640 <__aeabi_dmul>
 8004496:	a368      	add	r3, pc, #416	@ (adr r3, 8004638 <_dtoa_r+0x2b8>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fb ff1a 	bl	80002d4 <__adddf3>
 80044a0:	4604      	mov	r4, r0
 80044a2:	4630      	mov	r0, r6
 80044a4:	460d      	mov	r5, r1
 80044a6:	f7fc f861 	bl	800056c <__aeabi_i2d>
 80044aa:	a365      	add	r3, pc, #404	@ (adr r3, 8004640 <_dtoa_r+0x2c0>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f7fc f8c6 	bl	8000640 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4620      	mov	r0, r4
 80044ba:	4629      	mov	r1, r5
 80044bc:	f7fb ff0a 	bl	80002d4 <__adddf3>
 80044c0:	4604      	mov	r4, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	f7fc fb6c 	bl	8000ba0 <__aeabi_d2iz>
 80044c8:	2200      	movs	r2, #0
 80044ca:	4607      	mov	r7, r0
 80044cc:	2300      	movs	r3, #0
 80044ce:	4620      	mov	r0, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	f7fc fb27 	bl	8000b24 <__aeabi_dcmplt>
 80044d6:	b140      	cbz	r0, 80044ea <_dtoa_r+0x16a>
 80044d8:	4638      	mov	r0, r7
 80044da:	f7fc f847 	bl	800056c <__aeabi_i2d>
 80044de:	4622      	mov	r2, r4
 80044e0:	462b      	mov	r3, r5
 80044e2:	f7fc fb15 	bl	8000b10 <__aeabi_dcmpeq>
 80044e6:	b900      	cbnz	r0, 80044ea <_dtoa_r+0x16a>
 80044e8:	3f01      	subs	r7, #1
 80044ea:	2f16      	cmp	r7, #22
 80044ec:	d853      	bhi.n	8004596 <_dtoa_r+0x216>
 80044ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004664 <_dtoa_r+0x2e4>)
 80044f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fc fb12 	bl	8000b24 <__aeabi_dcmplt>
 8004500:	2800      	cmp	r0, #0
 8004502:	d04a      	beq.n	800459a <_dtoa_r+0x21a>
 8004504:	2300      	movs	r3, #0
 8004506:	3f01      	subs	r7, #1
 8004508:	930f      	str	r3, [sp, #60]	@ 0x3c
 800450a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800450c:	1b9b      	subs	r3, r3, r6
 800450e:	1e5a      	subs	r2, r3, #1
 8004510:	bf46      	itte	mi
 8004512:	f1c3 0801 	rsbmi	r8, r3, #1
 8004516:	2300      	movmi	r3, #0
 8004518:	f04f 0800 	movpl.w	r8, #0
 800451c:	9209      	str	r2, [sp, #36]	@ 0x24
 800451e:	bf48      	it	mi
 8004520:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004522:	2f00      	cmp	r7, #0
 8004524:	db3b      	blt.n	800459e <_dtoa_r+0x21e>
 8004526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004528:	970e      	str	r7, [sp, #56]	@ 0x38
 800452a:	443b      	add	r3, r7
 800452c:	9309      	str	r3, [sp, #36]	@ 0x24
 800452e:	2300      	movs	r3, #0
 8004530:	930a      	str	r3, [sp, #40]	@ 0x28
 8004532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004534:	2b09      	cmp	r3, #9
 8004536:	d866      	bhi.n	8004606 <_dtoa_r+0x286>
 8004538:	2b05      	cmp	r3, #5
 800453a:	bfc4      	itt	gt
 800453c:	3b04      	subgt	r3, #4
 800453e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004540:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004542:	bfc8      	it	gt
 8004544:	2400      	movgt	r4, #0
 8004546:	f1a3 0302 	sub.w	r3, r3, #2
 800454a:	bfd8      	it	le
 800454c:	2401      	movle	r4, #1
 800454e:	2b03      	cmp	r3, #3
 8004550:	d864      	bhi.n	800461c <_dtoa_r+0x29c>
 8004552:	e8df f003 	tbb	[pc, r3]
 8004556:	382b      	.short	0x382b
 8004558:	5636      	.short	0x5636
 800455a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800455e:	441e      	add	r6, r3
 8004560:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004564:	2b20      	cmp	r3, #32
 8004566:	bfc1      	itttt	gt
 8004568:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800456c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004570:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004574:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004578:	bfd6      	itet	le
 800457a:	f1c3 0320 	rsble	r3, r3, #32
 800457e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004582:	fa04 f003 	lslle.w	r0, r4, r3
 8004586:	f7fb ffe1 	bl	800054c <__aeabi_ui2d>
 800458a:	2201      	movs	r2, #1
 800458c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004590:	3e01      	subs	r6, #1
 8004592:	9212      	str	r2, [sp, #72]	@ 0x48
 8004594:	e775      	b.n	8004482 <_dtoa_r+0x102>
 8004596:	2301      	movs	r3, #1
 8004598:	e7b6      	b.n	8004508 <_dtoa_r+0x188>
 800459a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800459c:	e7b5      	b.n	800450a <_dtoa_r+0x18a>
 800459e:	427b      	negs	r3, r7
 80045a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80045a2:	2300      	movs	r3, #0
 80045a4:	eba8 0807 	sub.w	r8, r8, r7
 80045a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80045aa:	e7c2      	b.n	8004532 <_dtoa_r+0x1b2>
 80045ac:	2300      	movs	r3, #0
 80045ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	dc35      	bgt.n	8004622 <_dtoa_r+0x2a2>
 80045b6:	2301      	movs	r3, #1
 80045b8:	461a      	mov	r2, r3
 80045ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045be:	9221      	str	r2, [sp, #132]	@ 0x84
 80045c0:	e00b      	b.n	80045da <_dtoa_r+0x25a>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e7f3      	b.n	80045ae <_dtoa_r+0x22e>
 80045c6:	2300      	movs	r3, #0
 80045c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	9308      	str	r3, [sp, #32]
 80045d0:	3301      	adds	r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	9307      	str	r3, [sp, #28]
 80045d6:	bfb8      	it	lt
 80045d8:	2301      	movlt	r3, #1
 80045da:	2100      	movs	r1, #0
 80045dc:	2204      	movs	r2, #4
 80045de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80045e2:	f102 0514 	add.w	r5, r2, #20
 80045e6:	429d      	cmp	r5, r3
 80045e8:	d91f      	bls.n	800462a <_dtoa_r+0x2aa>
 80045ea:	6041      	str	r1, [r0, #4]
 80045ec:	4658      	mov	r0, fp
 80045ee:	f000 fd8d 	bl	800510c <_Balloc>
 80045f2:	4682      	mov	sl, r0
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d139      	bne.n	800466c <_dtoa_r+0x2ec>
 80045f8:	4602      	mov	r2, r0
 80045fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80045fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004668 <_dtoa_r+0x2e8>)
 8004600:	e6d2      	b.n	80043a8 <_dtoa_r+0x28>
 8004602:	2301      	movs	r3, #1
 8004604:	e7e0      	b.n	80045c8 <_dtoa_r+0x248>
 8004606:	2401      	movs	r4, #1
 8004608:	2300      	movs	r3, #0
 800460a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800460c:	9320      	str	r3, [sp, #128]	@ 0x80
 800460e:	f04f 33ff 	mov.w	r3, #4294967295
 8004612:	2200      	movs	r2, #0
 8004614:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004618:	2312      	movs	r3, #18
 800461a:	e7d0      	b.n	80045be <_dtoa_r+0x23e>
 800461c:	2301      	movs	r3, #1
 800461e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004620:	e7f5      	b.n	800460e <_dtoa_r+0x28e>
 8004622:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004624:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004628:	e7d7      	b.n	80045da <_dtoa_r+0x25a>
 800462a:	3101      	adds	r1, #1
 800462c:	0052      	lsls	r2, r2, #1
 800462e:	e7d8      	b.n	80045e2 <_dtoa_r+0x262>
 8004630:	636f4361 	.word	0x636f4361
 8004634:	3fd287a7 	.word	0x3fd287a7
 8004638:	8b60c8b3 	.word	0x8b60c8b3
 800463c:	3fc68a28 	.word	0x3fc68a28
 8004640:	509f79fb 	.word	0x509f79fb
 8004644:	3fd34413 	.word	0x3fd34413
 8004648:	0800799c 	.word	0x0800799c
 800464c:	080079b3 	.word	0x080079b3
 8004650:	7ff00000 	.word	0x7ff00000
 8004654:	08007998 	.word	0x08007998
 8004658:	08007967 	.word	0x08007967
 800465c:	08007966 	.word	0x08007966
 8004660:	3ff80000 	.word	0x3ff80000
 8004664:	08007ab0 	.word	0x08007ab0
 8004668:	08007a0b 	.word	0x08007a0b
 800466c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004670:	6018      	str	r0, [r3, #0]
 8004672:	9b07      	ldr	r3, [sp, #28]
 8004674:	2b0e      	cmp	r3, #14
 8004676:	f200 80a4 	bhi.w	80047c2 <_dtoa_r+0x442>
 800467a:	2c00      	cmp	r4, #0
 800467c:	f000 80a1 	beq.w	80047c2 <_dtoa_r+0x442>
 8004680:	2f00      	cmp	r7, #0
 8004682:	dd33      	ble.n	80046ec <_dtoa_r+0x36c>
 8004684:	4b86      	ldr	r3, [pc, #536]	@ (80048a0 <_dtoa_r+0x520>)
 8004686:	f007 020f 	and.w	r2, r7, #15
 800468a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800468e:	05f8      	lsls	r0, r7, #23
 8004690:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004694:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004698:	ea4f 1427 	mov.w	r4, r7, asr #4
 800469c:	d516      	bpl.n	80046cc <_dtoa_r+0x34c>
 800469e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046a2:	4b80      	ldr	r3, [pc, #512]	@ (80048a4 <_dtoa_r+0x524>)
 80046a4:	2603      	movs	r6, #3
 80046a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046aa:	f7fc f8f3 	bl	8000894 <__aeabi_ddiv>
 80046ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046b2:	f004 040f 	and.w	r4, r4, #15
 80046b6:	4d7b      	ldr	r5, [pc, #492]	@ (80048a4 <_dtoa_r+0x524>)
 80046b8:	b954      	cbnz	r4, 80046d0 <_dtoa_r+0x350>
 80046ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046c2:	f7fc f8e7 	bl	8000894 <__aeabi_ddiv>
 80046c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046ca:	e028      	b.n	800471e <_dtoa_r+0x39e>
 80046cc:	2602      	movs	r6, #2
 80046ce:	e7f2      	b.n	80046b6 <_dtoa_r+0x336>
 80046d0:	07e1      	lsls	r1, r4, #31
 80046d2:	d508      	bpl.n	80046e6 <_dtoa_r+0x366>
 80046d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046dc:	f7fb ffb0 	bl	8000640 <__aeabi_dmul>
 80046e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046e4:	3601      	adds	r6, #1
 80046e6:	1064      	asrs	r4, r4, #1
 80046e8:	3508      	adds	r5, #8
 80046ea:	e7e5      	b.n	80046b8 <_dtoa_r+0x338>
 80046ec:	f000 80d2 	beq.w	8004894 <_dtoa_r+0x514>
 80046f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046f4:	427c      	negs	r4, r7
 80046f6:	4b6a      	ldr	r3, [pc, #424]	@ (80048a0 <_dtoa_r+0x520>)
 80046f8:	f004 020f 	and.w	r2, r4, #15
 80046fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f7fb ff9c 	bl	8000640 <__aeabi_dmul>
 8004708:	2602      	movs	r6, #2
 800470a:	2300      	movs	r3, #0
 800470c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004710:	4d64      	ldr	r5, [pc, #400]	@ (80048a4 <_dtoa_r+0x524>)
 8004712:	1124      	asrs	r4, r4, #4
 8004714:	2c00      	cmp	r4, #0
 8004716:	f040 80b2 	bne.w	800487e <_dtoa_r+0x4fe>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1d3      	bne.n	80046c6 <_dtoa_r+0x346>
 800471e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80b7 	beq.w	8004898 <_dtoa_r+0x518>
 800472a:	2200      	movs	r2, #0
 800472c:	4620      	mov	r0, r4
 800472e:	4629      	mov	r1, r5
 8004730:	4b5d      	ldr	r3, [pc, #372]	@ (80048a8 <_dtoa_r+0x528>)
 8004732:	f7fc f9f7 	bl	8000b24 <__aeabi_dcmplt>
 8004736:	2800      	cmp	r0, #0
 8004738:	f000 80ae 	beq.w	8004898 <_dtoa_r+0x518>
 800473c:	9b07      	ldr	r3, [sp, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80aa 	beq.w	8004898 <_dtoa_r+0x518>
 8004744:	9b08      	ldr	r3, [sp, #32]
 8004746:	2b00      	cmp	r3, #0
 8004748:	dd37      	ble.n	80047ba <_dtoa_r+0x43a>
 800474a:	1e7b      	subs	r3, r7, #1
 800474c:	4620      	mov	r0, r4
 800474e:	9304      	str	r3, [sp, #16]
 8004750:	2200      	movs	r2, #0
 8004752:	4629      	mov	r1, r5
 8004754:	4b55      	ldr	r3, [pc, #340]	@ (80048ac <_dtoa_r+0x52c>)
 8004756:	f7fb ff73 	bl	8000640 <__aeabi_dmul>
 800475a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800475e:	9c08      	ldr	r4, [sp, #32]
 8004760:	3601      	adds	r6, #1
 8004762:	4630      	mov	r0, r6
 8004764:	f7fb ff02 	bl	800056c <__aeabi_i2d>
 8004768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800476c:	f7fb ff68 	bl	8000640 <__aeabi_dmul>
 8004770:	2200      	movs	r2, #0
 8004772:	4b4f      	ldr	r3, [pc, #316]	@ (80048b0 <_dtoa_r+0x530>)
 8004774:	f7fb fdae 	bl	80002d4 <__adddf3>
 8004778:	4605      	mov	r5, r0
 800477a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800477e:	2c00      	cmp	r4, #0
 8004780:	f040 809a 	bne.w	80048b8 <_dtoa_r+0x538>
 8004784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	4b4a      	ldr	r3, [pc, #296]	@ (80048b4 <_dtoa_r+0x534>)
 800478c:	f7fb fda0 	bl	80002d0 <__aeabi_dsub>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004798:	462a      	mov	r2, r5
 800479a:	4633      	mov	r3, r6
 800479c:	f7fc f9e0 	bl	8000b60 <__aeabi_dcmpgt>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	f040 828e 	bne.w	8004cc2 <_dtoa_r+0x942>
 80047a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047aa:	462a      	mov	r2, r5
 80047ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80047b0:	f7fc f9b8 	bl	8000b24 <__aeabi_dcmplt>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f040 8127 	bne.w	8004a08 <_dtoa_r+0x688>
 80047ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80047be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80047c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f2c0 8163 	blt.w	8004a90 <_dtoa_r+0x710>
 80047ca:	2f0e      	cmp	r7, #14
 80047cc:	f300 8160 	bgt.w	8004a90 <_dtoa_r+0x710>
 80047d0:	4b33      	ldr	r3, [pc, #204]	@ (80048a0 <_dtoa_r+0x520>)
 80047d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	da03      	bge.n	80047ec <_dtoa_r+0x46c>
 80047e4:	9b07      	ldr	r3, [sp, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f340 8100 	ble.w	80049ec <_dtoa_r+0x66c>
 80047ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80047f0:	4656      	mov	r6, sl
 80047f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f6:	4620      	mov	r0, r4
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fc f84b 	bl	8000894 <__aeabi_ddiv>
 80047fe:	f7fc f9cf 	bl	8000ba0 <__aeabi_d2iz>
 8004802:	4680      	mov	r8, r0
 8004804:	f7fb feb2 	bl	800056c <__aeabi_i2d>
 8004808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800480c:	f7fb ff18 	bl	8000640 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4620      	mov	r0, r4
 8004816:	4629      	mov	r1, r5
 8004818:	f7fb fd5a 	bl	80002d0 <__aeabi_dsub>
 800481c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004820:	9d07      	ldr	r5, [sp, #28]
 8004822:	f806 4b01 	strb.w	r4, [r6], #1
 8004826:	eba6 040a 	sub.w	r4, r6, sl
 800482a:	42a5      	cmp	r5, r4
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	f040 8116 	bne.w	8004a60 <_dtoa_r+0x6e0>
 8004834:	f7fb fd4e 	bl	80002d4 <__adddf3>
 8004838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800483c:	4604      	mov	r4, r0
 800483e:	460d      	mov	r5, r1
 8004840:	f7fc f98e 	bl	8000b60 <__aeabi_dcmpgt>
 8004844:	2800      	cmp	r0, #0
 8004846:	f040 80f8 	bne.w	8004a3a <_dtoa_r+0x6ba>
 800484a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800484e:	4620      	mov	r0, r4
 8004850:	4629      	mov	r1, r5
 8004852:	f7fc f95d 	bl	8000b10 <__aeabi_dcmpeq>
 8004856:	b118      	cbz	r0, 8004860 <_dtoa_r+0x4e0>
 8004858:	f018 0f01 	tst.w	r8, #1
 800485c:	f040 80ed 	bne.w	8004a3a <_dtoa_r+0x6ba>
 8004860:	4649      	mov	r1, r9
 8004862:	4658      	mov	r0, fp
 8004864:	f000 fc92 	bl	800518c <_Bfree>
 8004868:	2300      	movs	r3, #0
 800486a:	7033      	strb	r3, [r6, #0]
 800486c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800486e:	3701      	adds	r7, #1
 8004870:	601f      	str	r7, [r3, #0]
 8004872:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8320 	beq.w	8004eba <_dtoa_r+0xb3a>
 800487a:	601e      	str	r6, [r3, #0]
 800487c:	e31d      	b.n	8004eba <_dtoa_r+0xb3a>
 800487e:	07e2      	lsls	r2, r4, #31
 8004880:	d505      	bpl.n	800488e <_dtoa_r+0x50e>
 8004882:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004886:	f7fb fedb 	bl	8000640 <__aeabi_dmul>
 800488a:	2301      	movs	r3, #1
 800488c:	3601      	adds	r6, #1
 800488e:	1064      	asrs	r4, r4, #1
 8004890:	3508      	adds	r5, #8
 8004892:	e73f      	b.n	8004714 <_dtoa_r+0x394>
 8004894:	2602      	movs	r6, #2
 8004896:	e742      	b.n	800471e <_dtoa_r+0x39e>
 8004898:	9c07      	ldr	r4, [sp, #28]
 800489a:	9704      	str	r7, [sp, #16]
 800489c:	e761      	b.n	8004762 <_dtoa_r+0x3e2>
 800489e:	bf00      	nop
 80048a0:	08007ab0 	.word	0x08007ab0
 80048a4:	08007a88 	.word	0x08007a88
 80048a8:	3ff00000 	.word	0x3ff00000
 80048ac:	40240000 	.word	0x40240000
 80048b0:	401c0000 	.word	0x401c0000
 80048b4:	40140000 	.word	0x40140000
 80048b8:	4b70      	ldr	r3, [pc, #448]	@ (8004a7c <_dtoa_r+0x6fc>)
 80048ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048c4:	4454      	add	r4, sl
 80048c6:	2900      	cmp	r1, #0
 80048c8:	d045      	beq.n	8004956 <_dtoa_r+0x5d6>
 80048ca:	2000      	movs	r0, #0
 80048cc:	496c      	ldr	r1, [pc, #432]	@ (8004a80 <_dtoa_r+0x700>)
 80048ce:	f7fb ffe1 	bl	8000894 <__aeabi_ddiv>
 80048d2:	4633      	mov	r3, r6
 80048d4:	462a      	mov	r2, r5
 80048d6:	f7fb fcfb 	bl	80002d0 <__aeabi_dsub>
 80048da:	4656      	mov	r6, sl
 80048dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e4:	f7fc f95c 	bl	8000ba0 <__aeabi_d2iz>
 80048e8:	4605      	mov	r5, r0
 80048ea:	f7fb fe3f 	bl	800056c <__aeabi_i2d>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048f6:	f7fb fceb 	bl	80002d0 <__aeabi_dsub>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	3530      	adds	r5, #48	@ 0x30
 8004900:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004904:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004908:	f806 5b01 	strb.w	r5, [r6], #1
 800490c:	f7fc f90a 	bl	8000b24 <__aeabi_dcmplt>
 8004910:	2800      	cmp	r0, #0
 8004912:	d163      	bne.n	80049dc <_dtoa_r+0x65c>
 8004914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004918:	2000      	movs	r0, #0
 800491a:	495a      	ldr	r1, [pc, #360]	@ (8004a84 <_dtoa_r+0x704>)
 800491c:	f7fb fcd8 	bl	80002d0 <__aeabi_dsub>
 8004920:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004924:	f7fc f8fe 	bl	8000b24 <__aeabi_dcmplt>
 8004928:	2800      	cmp	r0, #0
 800492a:	f040 8087 	bne.w	8004a3c <_dtoa_r+0x6bc>
 800492e:	42a6      	cmp	r6, r4
 8004930:	f43f af43 	beq.w	80047ba <_dtoa_r+0x43a>
 8004934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004938:	2200      	movs	r2, #0
 800493a:	4b53      	ldr	r3, [pc, #332]	@ (8004a88 <_dtoa_r+0x708>)
 800493c:	f7fb fe80 	bl	8000640 <__aeabi_dmul>
 8004940:	2200      	movs	r2, #0
 8004942:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800494a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a88 <_dtoa_r+0x708>)
 800494c:	f7fb fe78 	bl	8000640 <__aeabi_dmul>
 8004950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004954:	e7c4      	b.n	80048e0 <_dtoa_r+0x560>
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	f7fb fe71 	bl	8000640 <__aeabi_dmul>
 800495e:	4656      	mov	r6, sl
 8004960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004964:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800496a:	f7fc f919 	bl	8000ba0 <__aeabi_d2iz>
 800496e:	4605      	mov	r5, r0
 8004970:	f7fb fdfc 	bl	800056c <__aeabi_i2d>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800497c:	f7fb fca8 	bl	80002d0 <__aeabi_dsub>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	3530      	adds	r5, #48	@ 0x30
 8004986:	f806 5b01 	strb.w	r5, [r6], #1
 800498a:	42a6      	cmp	r6, r4
 800498c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	d124      	bne.n	80049e0 <_dtoa_r+0x660>
 8004996:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800499a:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <_dtoa_r+0x700>)
 800499c:	f7fb fc9a 	bl	80002d4 <__adddf3>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049a8:	f7fc f8da 	bl	8000b60 <__aeabi_dcmpgt>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d145      	bne.n	8004a3c <_dtoa_r+0x6bc>
 80049b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80049b4:	2000      	movs	r0, #0
 80049b6:	4932      	ldr	r1, [pc, #200]	@ (8004a80 <_dtoa_r+0x700>)
 80049b8:	f7fb fc8a 	bl	80002d0 <__aeabi_dsub>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049c4:	f7fc f8ae 	bl	8000b24 <__aeabi_dcmplt>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	f43f aef6 	beq.w	80047ba <_dtoa_r+0x43a>
 80049ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80049d0:	1e73      	subs	r3, r6, #1
 80049d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80049d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80049d8:	2b30      	cmp	r3, #48	@ 0x30
 80049da:	d0f8      	beq.n	80049ce <_dtoa_r+0x64e>
 80049dc:	9f04      	ldr	r7, [sp, #16]
 80049de:	e73f      	b.n	8004860 <_dtoa_r+0x4e0>
 80049e0:	4b29      	ldr	r3, [pc, #164]	@ (8004a88 <_dtoa_r+0x708>)
 80049e2:	f7fb fe2d 	bl	8000640 <__aeabi_dmul>
 80049e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ea:	e7bc      	b.n	8004966 <_dtoa_r+0x5e6>
 80049ec:	d10c      	bne.n	8004a08 <_dtoa_r+0x688>
 80049ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049f2:	2200      	movs	r2, #0
 80049f4:	4b25      	ldr	r3, [pc, #148]	@ (8004a8c <_dtoa_r+0x70c>)
 80049f6:	f7fb fe23 	bl	8000640 <__aeabi_dmul>
 80049fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049fe:	f7fc f8a5 	bl	8000b4c <__aeabi_dcmpge>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	f000 815b 	beq.w	8004cbe <_dtoa_r+0x93e>
 8004a08:	2400      	movs	r4, #0
 8004a0a:	4625      	mov	r5, r4
 8004a0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a0e:	4656      	mov	r6, sl
 8004a10:	43db      	mvns	r3, r3
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	2700      	movs	r7, #0
 8004a16:	4621      	mov	r1, r4
 8004a18:	4658      	mov	r0, fp
 8004a1a:	f000 fbb7 	bl	800518c <_Bfree>
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	d0dc      	beq.n	80049dc <_dtoa_r+0x65c>
 8004a22:	b12f      	cbz	r7, 8004a30 <_dtoa_r+0x6b0>
 8004a24:	42af      	cmp	r7, r5
 8004a26:	d003      	beq.n	8004a30 <_dtoa_r+0x6b0>
 8004a28:	4639      	mov	r1, r7
 8004a2a:	4658      	mov	r0, fp
 8004a2c:	f000 fbae 	bl	800518c <_Bfree>
 8004a30:	4629      	mov	r1, r5
 8004a32:	4658      	mov	r0, fp
 8004a34:	f000 fbaa 	bl	800518c <_Bfree>
 8004a38:	e7d0      	b.n	80049dc <_dtoa_r+0x65c>
 8004a3a:	9704      	str	r7, [sp, #16]
 8004a3c:	4633      	mov	r3, r6
 8004a3e:	461e      	mov	r6, r3
 8004a40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a44:	2a39      	cmp	r2, #57	@ 0x39
 8004a46:	d107      	bne.n	8004a58 <_dtoa_r+0x6d8>
 8004a48:	459a      	cmp	sl, r3
 8004a4a:	d1f8      	bne.n	8004a3e <_dtoa_r+0x6be>
 8004a4c:	9a04      	ldr	r2, [sp, #16]
 8004a4e:	3201      	adds	r2, #1
 8004a50:	9204      	str	r2, [sp, #16]
 8004a52:	2230      	movs	r2, #48	@ 0x30
 8004a54:	f88a 2000 	strb.w	r2, [sl]
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	3201      	adds	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e7bd      	b.n	80049dc <_dtoa_r+0x65c>
 8004a60:	2200      	movs	r2, #0
 8004a62:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <_dtoa_r+0x708>)
 8004a64:	f7fb fdec 	bl	8000640 <__aeabi_dmul>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	460d      	mov	r5, r1
 8004a70:	f7fc f84e 	bl	8000b10 <__aeabi_dcmpeq>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	f43f aebc 	beq.w	80047f2 <_dtoa_r+0x472>
 8004a7a:	e6f1      	b.n	8004860 <_dtoa_r+0x4e0>
 8004a7c:	08007ab0 	.word	0x08007ab0
 8004a80:	3fe00000 	.word	0x3fe00000
 8004a84:	3ff00000 	.word	0x3ff00000
 8004a88:	40240000 	.word	0x40240000
 8004a8c:	40140000 	.word	0x40140000
 8004a90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	f000 80db 	beq.w	8004c4e <_dtoa_r+0x8ce>
 8004a98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a9a:	2a01      	cmp	r2, #1
 8004a9c:	f300 80bf 	bgt.w	8004c1e <_dtoa_r+0x89e>
 8004aa0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004aa2:	2a00      	cmp	r2, #0
 8004aa4:	f000 80b7 	beq.w	8004c16 <_dtoa_r+0x896>
 8004aa8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004aac:	4646      	mov	r6, r8
 8004aae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	441a      	add	r2, r3
 8004ab6:	4658      	mov	r0, fp
 8004ab8:	4498      	add	r8, r3
 8004aba:	9209      	str	r2, [sp, #36]	@ 0x24
 8004abc:	f000 fc64 	bl	8005388 <__i2b>
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	b15e      	cbz	r6, 8004adc <_dtoa_r+0x75c>
 8004ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dd08      	ble.n	8004adc <_dtoa_r+0x75c>
 8004aca:	42b3      	cmp	r3, r6
 8004acc:	bfa8      	it	ge
 8004ace:	4633      	movge	r3, r6
 8004ad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ad2:	eba8 0803 	sub.w	r8, r8, r3
 8004ad6:	1af6      	subs	r6, r6, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8004adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ade:	b1f3      	cbz	r3, 8004b1e <_dtoa_r+0x79e>
 8004ae0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80b7 	beq.w	8004c56 <_dtoa_r+0x8d6>
 8004ae8:	b18c      	cbz	r4, 8004b0e <_dtoa_r+0x78e>
 8004aea:	4629      	mov	r1, r5
 8004aec:	4622      	mov	r2, r4
 8004aee:	4658      	mov	r0, fp
 8004af0:	f000 fd08 	bl	8005504 <__pow5mult>
 8004af4:	464a      	mov	r2, r9
 8004af6:	4601      	mov	r1, r0
 8004af8:	4605      	mov	r5, r0
 8004afa:	4658      	mov	r0, fp
 8004afc:	f000 fc5a 	bl	80053b4 <__multiply>
 8004b00:	4649      	mov	r1, r9
 8004b02:	9004      	str	r0, [sp, #16]
 8004b04:	4658      	mov	r0, fp
 8004b06:	f000 fb41 	bl	800518c <_Bfree>
 8004b0a:	9b04      	ldr	r3, [sp, #16]
 8004b0c:	4699      	mov	r9, r3
 8004b0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b10:	1b1a      	subs	r2, r3, r4
 8004b12:	d004      	beq.n	8004b1e <_dtoa_r+0x79e>
 8004b14:	4649      	mov	r1, r9
 8004b16:	4658      	mov	r0, fp
 8004b18:	f000 fcf4 	bl	8005504 <__pow5mult>
 8004b1c:	4681      	mov	r9, r0
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4658      	mov	r0, fp
 8004b22:	f000 fc31 	bl	8005388 <__i2b>
 8004b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b28:	4604      	mov	r4, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 81c9 	beq.w	8004ec2 <_dtoa_r+0xb42>
 8004b30:	461a      	mov	r2, r3
 8004b32:	4601      	mov	r1, r0
 8004b34:	4658      	mov	r0, fp
 8004b36:	f000 fce5 	bl	8005504 <__pow5mult>
 8004b3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	f300 808f 	bgt.w	8004c62 <_dtoa_r+0x8e2>
 8004b44:	9b02      	ldr	r3, [sp, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 8087 	bne.w	8004c5a <_dtoa_r+0x8da>
 8004b4c:	9b03      	ldr	r3, [sp, #12]
 8004b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f040 8083 	bne.w	8004c5e <_dtoa_r+0x8de>
 8004b58:	9b03      	ldr	r3, [sp, #12]
 8004b5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b5e:	0d1b      	lsrs	r3, r3, #20
 8004b60:	051b      	lsls	r3, r3, #20
 8004b62:	b12b      	cbz	r3, 8004b70 <_dtoa_r+0x7f0>
 8004b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b66:	f108 0801 	add.w	r8, r8, #1
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b6e:	2301      	movs	r3, #1
 8004b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 81aa 	beq.w	8004ece <_dtoa_r+0xb4e>
 8004b7a:	6923      	ldr	r3, [r4, #16]
 8004b7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b80:	6918      	ldr	r0, [r3, #16]
 8004b82:	f000 fbb5 	bl	80052f0 <__hi0bits>
 8004b86:	f1c0 0020 	rsb	r0, r0, #32
 8004b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b8c:	4418      	add	r0, r3
 8004b8e:	f010 001f 	ands.w	r0, r0, #31
 8004b92:	d071      	beq.n	8004c78 <_dtoa_r+0x8f8>
 8004b94:	f1c0 0320 	rsb	r3, r0, #32
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	dd65      	ble.n	8004c68 <_dtoa_r+0x8e8>
 8004b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b9e:	f1c0 001c 	rsb	r0, r0, #28
 8004ba2:	4403      	add	r3, r0
 8004ba4:	4480      	add	r8, r0
 8004ba6:	4406      	add	r6, r0
 8004ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004baa:	f1b8 0f00 	cmp.w	r8, #0
 8004bae:	dd05      	ble.n	8004bbc <_dtoa_r+0x83c>
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4642      	mov	r2, r8
 8004bb4:	4658      	mov	r0, fp
 8004bb6:	f000 fcff 	bl	80055b8 <__lshift>
 8004bba:	4681      	mov	r9, r0
 8004bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	dd05      	ble.n	8004bce <_dtoa_r+0x84e>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4658      	mov	r0, fp
 8004bc8:	f000 fcf6 	bl	80055b8 <__lshift>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d053      	beq.n	8004c7c <_dtoa_r+0x8fc>
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4648      	mov	r0, r9
 8004bd8:	f000 fd5a 	bl	8005690 <__mcmp>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	da4d      	bge.n	8004c7c <_dtoa_r+0x8fc>
 8004be0:	1e7b      	subs	r3, r7, #1
 8004be2:	4649      	mov	r1, r9
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	220a      	movs	r2, #10
 8004be8:	2300      	movs	r3, #0
 8004bea:	4658      	mov	r0, fp
 8004bec:	f000 faf0 	bl	80051d0 <__multadd>
 8004bf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bf2:	4681      	mov	r9, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 816c 	beq.w	8004ed2 <_dtoa_r+0xb52>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	220a      	movs	r2, #10
 8004c00:	4658      	mov	r0, fp
 8004c02:	f000 fae5 	bl	80051d0 <__multadd>
 8004c06:	9b08      	ldr	r3, [sp, #32]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dc61      	bgt.n	8004cd2 <_dtoa_r+0x952>
 8004c0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	dc3b      	bgt.n	8004c8c <_dtoa_r+0x90c>
 8004c14:	e05d      	b.n	8004cd2 <_dtoa_r+0x952>
 8004c16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c18:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004c1c:	e746      	b.n	8004aac <_dtoa_r+0x72c>
 8004c1e:	9b07      	ldr	r3, [sp, #28]
 8004c20:	1e5c      	subs	r4, r3, #1
 8004c22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	bfbf      	itttt	lt
 8004c28:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004c2a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004c2c:	1ae3      	sublt	r3, r4, r3
 8004c2e:	18d2      	addlt	r2, r2, r3
 8004c30:	bfa8      	it	ge
 8004c32:	1b1c      	subge	r4, r3, r4
 8004c34:	9b07      	ldr	r3, [sp, #28]
 8004c36:	bfbe      	ittt	lt
 8004c38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004c3a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004c3c:	2400      	movlt	r4, #0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfb5      	itete	lt
 8004c42:	eba8 0603 	sublt.w	r6, r8, r3
 8004c46:	4646      	movge	r6, r8
 8004c48:	2300      	movlt	r3, #0
 8004c4a:	9b07      	ldrge	r3, [sp, #28]
 8004c4c:	e730      	b.n	8004ab0 <_dtoa_r+0x730>
 8004c4e:	4646      	mov	r6, r8
 8004c50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004c54:	e735      	b.n	8004ac2 <_dtoa_r+0x742>
 8004c56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c58:	e75c      	b.n	8004b14 <_dtoa_r+0x794>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e788      	b.n	8004b70 <_dtoa_r+0x7f0>
 8004c5e:	9b02      	ldr	r3, [sp, #8]
 8004c60:	e786      	b.n	8004b70 <_dtoa_r+0x7f0>
 8004c62:	2300      	movs	r3, #0
 8004c64:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c66:	e788      	b.n	8004b7a <_dtoa_r+0x7fa>
 8004c68:	d09f      	beq.n	8004baa <_dtoa_r+0x82a>
 8004c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c6c:	331c      	adds	r3, #28
 8004c6e:	441a      	add	r2, r3
 8004c70:	4498      	add	r8, r3
 8004c72:	441e      	add	r6, r3
 8004c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c76:	e798      	b.n	8004baa <_dtoa_r+0x82a>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	e7f6      	b.n	8004c6a <_dtoa_r+0x8ea>
 8004c7c:	9b07      	ldr	r3, [sp, #28]
 8004c7e:	9704      	str	r7, [sp, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dc20      	bgt.n	8004cc6 <_dtoa_r+0x946>
 8004c84:	9308      	str	r3, [sp, #32]
 8004c86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	dd1e      	ble.n	8004cca <_dtoa_r+0x94a>
 8004c8c:	9b08      	ldr	r3, [sp, #32]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f47f aebc 	bne.w	8004a0c <_dtoa_r+0x68c>
 8004c94:	4621      	mov	r1, r4
 8004c96:	2205      	movs	r2, #5
 8004c98:	4658      	mov	r0, fp
 8004c9a:	f000 fa99 	bl	80051d0 <__multadd>
 8004c9e:	4601      	mov	r1, r0
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	4648      	mov	r0, r9
 8004ca4:	f000 fcf4 	bl	8005690 <__mcmp>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	f77f aeaf 	ble.w	8004a0c <_dtoa_r+0x68c>
 8004cae:	2331      	movs	r3, #49	@ 0x31
 8004cb0:	4656      	mov	r6, sl
 8004cb2:	f806 3b01 	strb.w	r3, [r6], #1
 8004cb6:	9b04      	ldr	r3, [sp, #16]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	9304      	str	r3, [sp, #16]
 8004cbc:	e6aa      	b.n	8004a14 <_dtoa_r+0x694>
 8004cbe:	9c07      	ldr	r4, [sp, #28]
 8004cc0:	9704      	str	r7, [sp, #16]
 8004cc2:	4625      	mov	r5, r4
 8004cc4:	e7f3      	b.n	8004cae <_dtoa_r+0x92e>
 8004cc6:	9b07      	ldr	r3, [sp, #28]
 8004cc8:	9308      	str	r3, [sp, #32]
 8004cca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8104 	beq.w	8004eda <_dtoa_r+0xb5a>
 8004cd2:	2e00      	cmp	r6, #0
 8004cd4:	dd05      	ble.n	8004ce2 <_dtoa_r+0x962>
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4632      	mov	r2, r6
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f000 fc6c 	bl	80055b8 <__lshift>
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d05a      	beq.n	8004d9e <_dtoa_r+0xa1e>
 8004ce8:	4658      	mov	r0, fp
 8004cea:	6869      	ldr	r1, [r5, #4]
 8004cec:	f000 fa0e 	bl	800510c <_Balloc>
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	b928      	cbnz	r0, 8004d00 <_dtoa_r+0x980>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004cfa:	4b83      	ldr	r3, [pc, #524]	@ (8004f08 <_dtoa_r+0xb88>)
 8004cfc:	f7ff bb54 	b.w	80043a8 <_dtoa_r+0x28>
 8004d00:	692a      	ldr	r2, [r5, #16]
 8004d02:	f105 010c 	add.w	r1, r5, #12
 8004d06:	3202      	adds	r2, #2
 8004d08:	0092      	lsls	r2, r2, #2
 8004d0a:	300c      	adds	r0, #12
 8004d0c:	f001 ff5e 	bl	8006bcc <memcpy>
 8004d10:	2201      	movs	r2, #1
 8004d12:	4631      	mov	r1, r6
 8004d14:	4658      	mov	r0, fp
 8004d16:	f000 fc4f 	bl	80055b8 <__lshift>
 8004d1a:	462f      	mov	r7, r5
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	f10a 0301 	add.w	r3, sl, #1
 8004d22:	9307      	str	r3, [sp, #28]
 8004d24:	9b08      	ldr	r3, [sp, #32]
 8004d26:	4453      	add	r3, sl
 8004d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d2a:	9b02      	ldr	r3, [sp, #8]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d32:	9b07      	ldr	r3, [sp, #28]
 8004d34:	4621      	mov	r1, r4
 8004d36:	3b01      	subs	r3, #1
 8004d38:	4648      	mov	r0, r9
 8004d3a:	9302      	str	r3, [sp, #8]
 8004d3c:	f7ff fa98 	bl	8004270 <quorem>
 8004d40:	4639      	mov	r1, r7
 8004d42:	9008      	str	r0, [sp, #32]
 8004d44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d48:	4648      	mov	r0, r9
 8004d4a:	f000 fca1 	bl	8005690 <__mcmp>
 8004d4e:	462a      	mov	r2, r5
 8004d50:	9009      	str	r0, [sp, #36]	@ 0x24
 8004d52:	4621      	mov	r1, r4
 8004d54:	4658      	mov	r0, fp
 8004d56:	f000 fcb7 	bl	80056c8 <__mdiff>
 8004d5a:	68c2      	ldr	r2, [r0, #12]
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	bb02      	cbnz	r2, 8004da2 <_dtoa_r+0xa22>
 8004d60:	4601      	mov	r1, r0
 8004d62:	4648      	mov	r0, r9
 8004d64:	f000 fc94 	bl	8005690 <__mcmp>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4658      	mov	r0, fp
 8004d6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d70:	f000 fa0c 	bl	800518c <_Bfree>
 8004d74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004d78:	9e07      	ldr	r6, [sp, #28]
 8004d7a:	ea43 0102 	orr.w	r1, r3, r2
 8004d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d80:	4319      	orrs	r1, r3
 8004d82:	d110      	bne.n	8004da6 <_dtoa_r+0xa26>
 8004d84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d88:	d029      	beq.n	8004dde <_dtoa_r+0xa5e>
 8004d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	dd02      	ble.n	8004d96 <_dtoa_r+0xa16>
 8004d90:	9b08      	ldr	r3, [sp, #32]
 8004d92:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	f883 8000 	strb.w	r8, [r3]
 8004d9c:	e63b      	b.n	8004a16 <_dtoa_r+0x696>
 8004d9e:	4628      	mov	r0, r5
 8004da0:	e7bb      	b.n	8004d1a <_dtoa_r+0x99a>
 8004da2:	2201      	movs	r2, #1
 8004da4:	e7e1      	b.n	8004d6a <_dtoa_r+0x9ea>
 8004da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db04      	blt.n	8004db6 <_dtoa_r+0xa36>
 8004dac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004dae:	430b      	orrs	r3, r1
 8004db0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004db2:	430b      	orrs	r3, r1
 8004db4:	d120      	bne.n	8004df8 <_dtoa_r+0xa78>
 8004db6:	2a00      	cmp	r2, #0
 8004db8:	dded      	ble.n	8004d96 <_dtoa_r+0xa16>
 8004dba:	4649      	mov	r1, r9
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	4658      	mov	r0, fp
 8004dc0:	f000 fbfa 	bl	80055b8 <__lshift>
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4681      	mov	r9, r0
 8004dc8:	f000 fc62 	bl	8005690 <__mcmp>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	dc03      	bgt.n	8004dd8 <_dtoa_r+0xa58>
 8004dd0:	d1e1      	bne.n	8004d96 <_dtoa_r+0xa16>
 8004dd2:	f018 0f01 	tst.w	r8, #1
 8004dd6:	d0de      	beq.n	8004d96 <_dtoa_r+0xa16>
 8004dd8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ddc:	d1d8      	bne.n	8004d90 <_dtoa_r+0xa10>
 8004dde:	2339      	movs	r3, #57	@ 0x39
 8004de0:	9a02      	ldr	r2, [sp, #8]
 8004de2:	7013      	strb	r3, [r2, #0]
 8004de4:	4633      	mov	r3, r6
 8004de6:	461e      	mov	r6, r3
 8004de8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	2a39      	cmp	r2, #57	@ 0x39
 8004df0:	d052      	beq.n	8004e98 <_dtoa_r+0xb18>
 8004df2:	3201      	adds	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e60e      	b.n	8004a16 <_dtoa_r+0x696>
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	dd07      	ble.n	8004e0c <_dtoa_r+0xa8c>
 8004dfc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004e00:	d0ed      	beq.n	8004dde <_dtoa_r+0xa5e>
 8004e02:	9a02      	ldr	r2, [sp, #8]
 8004e04:	f108 0301 	add.w	r3, r8, #1
 8004e08:	7013      	strb	r3, [r2, #0]
 8004e0a:	e604      	b.n	8004a16 <_dtoa_r+0x696>
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	9a07      	ldr	r2, [sp, #28]
 8004e10:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d028      	beq.n	8004e6c <_dtoa_r+0xaec>
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	220a      	movs	r2, #10
 8004e20:	4658      	mov	r0, fp
 8004e22:	f000 f9d5 	bl	80051d0 <__multadd>
 8004e26:	42af      	cmp	r7, r5
 8004e28:	4681      	mov	r9, r0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	f04f 020a 	mov.w	r2, #10
 8004e32:	4639      	mov	r1, r7
 8004e34:	4658      	mov	r0, fp
 8004e36:	d107      	bne.n	8004e48 <_dtoa_r+0xac8>
 8004e38:	f000 f9ca 	bl	80051d0 <__multadd>
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	4605      	mov	r5, r0
 8004e40:	9b07      	ldr	r3, [sp, #28]
 8004e42:	3301      	adds	r3, #1
 8004e44:	9307      	str	r3, [sp, #28]
 8004e46:	e774      	b.n	8004d32 <_dtoa_r+0x9b2>
 8004e48:	f000 f9c2 	bl	80051d0 <__multadd>
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	4607      	mov	r7, r0
 8004e50:	2300      	movs	r3, #0
 8004e52:	220a      	movs	r2, #10
 8004e54:	4658      	mov	r0, fp
 8004e56:	f000 f9bb 	bl	80051d0 <__multadd>
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	e7f0      	b.n	8004e40 <_dtoa_r+0xac0>
 8004e5e:	9b08      	ldr	r3, [sp, #32]
 8004e60:	2700      	movs	r7, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bfcc      	ite	gt
 8004e66:	461e      	movgt	r6, r3
 8004e68:	2601      	movle	r6, #1
 8004e6a:	4456      	add	r6, sl
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4658      	mov	r0, fp
 8004e72:	f000 fba1 	bl	80055b8 <__lshift>
 8004e76:	4621      	mov	r1, r4
 8004e78:	4681      	mov	r9, r0
 8004e7a:	f000 fc09 	bl	8005690 <__mcmp>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	dcb0      	bgt.n	8004de4 <_dtoa_r+0xa64>
 8004e82:	d102      	bne.n	8004e8a <_dtoa_r+0xb0a>
 8004e84:	f018 0f01 	tst.w	r8, #1
 8004e88:	d1ac      	bne.n	8004de4 <_dtoa_r+0xa64>
 8004e8a:	4633      	mov	r3, r6
 8004e8c:	461e      	mov	r6, r3
 8004e8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e92:	2a30      	cmp	r2, #48	@ 0x30
 8004e94:	d0fa      	beq.n	8004e8c <_dtoa_r+0xb0c>
 8004e96:	e5be      	b.n	8004a16 <_dtoa_r+0x696>
 8004e98:	459a      	cmp	sl, r3
 8004e9a:	d1a4      	bne.n	8004de6 <_dtoa_r+0xa66>
 8004e9c:	9b04      	ldr	r3, [sp, #16]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	9304      	str	r3, [sp, #16]
 8004ea2:	2331      	movs	r3, #49	@ 0x31
 8004ea4:	f88a 3000 	strb.w	r3, [sl]
 8004ea8:	e5b5      	b.n	8004a16 <_dtoa_r+0x696>
 8004eaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004eac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004f0c <_dtoa_r+0xb8c>
 8004eb0:	b11b      	cbz	r3, 8004eba <_dtoa_r+0xb3a>
 8004eb2:	f10a 0308 	add.w	r3, sl, #8
 8004eb6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4650      	mov	r0, sl
 8004ebc:	b017      	add	sp, #92	@ 0x5c
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	f77f ae3d 	ble.w	8004b44 <_dtoa_r+0x7c4>
 8004eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ece:	2001      	movs	r0, #1
 8004ed0:	e65b      	b.n	8004b8a <_dtoa_r+0x80a>
 8004ed2:	9b08      	ldr	r3, [sp, #32]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f77f aed6 	ble.w	8004c86 <_dtoa_r+0x906>
 8004eda:	4656      	mov	r6, sl
 8004edc:	4621      	mov	r1, r4
 8004ede:	4648      	mov	r0, r9
 8004ee0:	f7ff f9c6 	bl	8004270 <quorem>
 8004ee4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ee8:	9b08      	ldr	r3, [sp, #32]
 8004eea:	f806 8b01 	strb.w	r8, [r6], #1
 8004eee:	eba6 020a 	sub.w	r2, r6, sl
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	ddb3      	ble.n	8004e5e <_dtoa_r+0xade>
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	2300      	movs	r3, #0
 8004efa:	220a      	movs	r2, #10
 8004efc:	4658      	mov	r0, fp
 8004efe:	f000 f967 	bl	80051d0 <__multadd>
 8004f02:	4681      	mov	r9, r0
 8004f04:	e7ea      	b.n	8004edc <_dtoa_r+0xb5c>
 8004f06:	bf00      	nop
 8004f08:	08007a0b 	.word	0x08007a0b
 8004f0c:	0800798f 	.word	0x0800798f

08004f10 <_free_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4605      	mov	r5, r0
 8004f14:	2900      	cmp	r1, #0
 8004f16:	d040      	beq.n	8004f9a <_free_r+0x8a>
 8004f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f1c:	1f0c      	subs	r4, r1, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bfb8      	it	lt
 8004f22:	18e4      	addlt	r4, r4, r3
 8004f24:	f000 f8e6 	bl	80050f4 <__malloc_lock>
 8004f28:	4a1c      	ldr	r2, [pc, #112]	@ (8004f9c <_free_r+0x8c>)
 8004f2a:	6813      	ldr	r3, [r2, #0]
 8004f2c:	b933      	cbnz	r3, 8004f3c <_free_r+0x2c>
 8004f2e:	6063      	str	r3, [r4, #4]
 8004f30:	6014      	str	r4, [r2, #0]
 8004f32:	4628      	mov	r0, r5
 8004f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f38:	f000 b8e2 	b.w	8005100 <__malloc_unlock>
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	d908      	bls.n	8004f52 <_free_r+0x42>
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	1821      	adds	r1, r4, r0
 8004f44:	428b      	cmp	r3, r1
 8004f46:	bf01      	itttt	eq
 8004f48:	6819      	ldreq	r1, [r3, #0]
 8004f4a:	685b      	ldreq	r3, [r3, #4]
 8004f4c:	1809      	addeq	r1, r1, r0
 8004f4e:	6021      	streq	r1, [r4, #0]
 8004f50:	e7ed      	b.n	8004f2e <_free_r+0x1e>
 8004f52:	461a      	mov	r2, r3
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	b10b      	cbz	r3, 8004f5c <_free_r+0x4c>
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	d9fa      	bls.n	8004f52 <_free_r+0x42>
 8004f5c:	6811      	ldr	r1, [r2, #0]
 8004f5e:	1850      	adds	r0, r2, r1
 8004f60:	42a0      	cmp	r0, r4
 8004f62:	d10b      	bne.n	8004f7c <_free_r+0x6c>
 8004f64:	6820      	ldr	r0, [r4, #0]
 8004f66:	4401      	add	r1, r0
 8004f68:	1850      	adds	r0, r2, r1
 8004f6a:	4283      	cmp	r3, r0
 8004f6c:	6011      	str	r1, [r2, #0]
 8004f6e:	d1e0      	bne.n	8004f32 <_free_r+0x22>
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4408      	add	r0, r1
 8004f76:	6010      	str	r0, [r2, #0]
 8004f78:	6053      	str	r3, [r2, #4]
 8004f7a:	e7da      	b.n	8004f32 <_free_r+0x22>
 8004f7c:	d902      	bls.n	8004f84 <_free_r+0x74>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	602b      	str	r3, [r5, #0]
 8004f82:	e7d6      	b.n	8004f32 <_free_r+0x22>
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	1821      	adds	r1, r4, r0
 8004f88:	428b      	cmp	r3, r1
 8004f8a:	bf01      	itttt	eq
 8004f8c:	6819      	ldreq	r1, [r3, #0]
 8004f8e:	685b      	ldreq	r3, [r3, #4]
 8004f90:	1809      	addeq	r1, r1, r0
 8004f92:	6021      	streq	r1, [r4, #0]
 8004f94:	6063      	str	r3, [r4, #4]
 8004f96:	6054      	str	r4, [r2, #4]
 8004f98:	e7cb      	b.n	8004f32 <_free_r+0x22>
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	200003d4 	.word	0x200003d4

08004fa0 <malloc>:
 8004fa0:	4b02      	ldr	r3, [pc, #8]	@ (8004fac <malloc+0xc>)
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	f000 b825 	b.w	8004ff4 <_malloc_r>
 8004faa:	bf00      	nop
 8004fac:	20000018 	.word	0x20000018

08004fb0 <sbrk_aligned>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8004ff0 <sbrk_aligned+0x40>)
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	6831      	ldr	r1, [r6, #0]
 8004fb8:	4605      	mov	r5, r0
 8004fba:	b911      	cbnz	r1, 8004fc2 <sbrk_aligned+0x12>
 8004fbc:	f001 fdf6 	bl	8006bac <_sbrk_r>
 8004fc0:	6030      	str	r0, [r6, #0]
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f001 fdf1 	bl	8006bac <_sbrk_r>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	d103      	bne.n	8004fd6 <sbrk_aligned+0x26>
 8004fce:	f04f 34ff 	mov.w	r4, #4294967295
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	bd70      	pop	{r4, r5, r6, pc}
 8004fd6:	1cc4      	adds	r4, r0, #3
 8004fd8:	f024 0403 	bic.w	r4, r4, #3
 8004fdc:	42a0      	cmp	r0, r4
 8004fde:	d0f8      	beq.n	8004fd2 <sbrk_aligned+0x22>
 8004fe0:	1a21      	subs	r1, r4, r0
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f001 fde2 	bl	8006bac <_sbrk_r>
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d1f2      	bne.n	8004fd2 <sbrk_aligned+0x22>
 8004fec:	e7ef      	b.n	8004fce <sbrk_aligned+0x1e>
 8004fee:	bf00      	nop
 8004ff0:	200003d0 	.word	0x200003d0

08004ff4 <_malloc_r>:
 8004ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff8:	1ccd      	adds	r5, r1, #3
 8004ffa:	f025 0503 	bic.w	r5, r5, #3
 8004ffe:	3508      	adds	r5, #8
 8005000:	2d0c      	cmp	r5, #12
 8005002:	bf38      	it	cc
 8005004:	250c      	movcc	r5, #12
 8005006:	2d00      	cmp	r5, #0
 8005008:	4606      	mov	r6, r0
 800500a:	db01      	blt.n	8005010 <_malloc_r+0x1c>
 800500c:	42a9      	cmp	r1, r5
 800500e:	d904      	bls.n	800501a <_malloc_r+0x26>
 8005010:	230c      	movs	r3, #12
 8005012:	6033      	str	r3, [r6, #0]
 8005014:	2000      	movs	r0, #0
 8005016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800501a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050f0 <_malloc_r+0xfc>
 800501e:	f000 f869 	bl	80050f4 <__malloc_lock>
 8005022:	f8d8 3000 	ldr.w	r3, [r8]
 8005026:	461c      	mov	r4, r3
 8005028:	bb44      	cbnz	r4, 800507c <_malloc_r+0x88>
 800502a:	4629      	mov	r1, r5
 800502c:	4630      	mov	r0, r6
 800502e:	f7ff ffbf 	bl	8004fb0 <sbrk_aligned>
 8005032:	1c43      	adds	r3, r0, #1
 8005034:	4604      	mov	r4, r0
 8005036:	d158      	bne.n	80050ea <_malloc_r+0xf6>
 8005038:	f8d8 4000 	ldr.w	r4, [r8]
 800503c:	4627      	mov	r7, r4
 800503e:	2f00      	cmp	r7, #0
 8005040:	d143      	bne.n	80050ca <_malloc_r+0xd6>
 8005042:	2c00      	cmp	r4, #0
 8005044:	d04b      	beq.n	80050de <_malloc_r+0xea>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	4639      	mov	r1, r7
 800504a:	4630      	mov	r0, r6
 800504c:	eb04 0903 	add.w	r9, r4, r3
 8005050:	f001 fdac 	bl	8006bac <_sbrk_r>
 8005054:	4581      	cmp	r9, r0
 8005056:	d142      	bne.n	80050de <_malloc_r+0xea>
 8005058:	6821      	ldr	r1, [r4, #0]
 800505a:	4630      	mov	r0, r6
 800505c:	1a6d      	subs	r5, r5, r1
 800505e:	4629      	mov	r1, r5
 8005060:	f7ff ffa6 	bl	8004fb0 <sbrk_aligned>
 8005064:	3001      	adds	r0, #1
 8005066:	d03a      	beq.n	80050de <_malloc_r+0xea>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	442b      	add	r3, r5
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	f8d8 3000 	ldr.w	r3, [r8]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	bb62      	cbnz	r2, 80050d0 <_malloc_r+0xdc>
 8005076:	f8c8 7000 	str.w	r7, [r8]
 800507a:	e00f      	b.n	800509c <_malloc_r+0xa8>
 800507c:	6822      	ldr	r2, [r4, #0]
 800507e:	1b52      	subs	r2, r2, r5
 8005080:	d420      	bmi.n	80050c4 <_malloc_r+0xd0>
 8005082:	2a0b      	cmp	r2, #11
 8005084:	d917      	bls.n	80050b6 <_malloc_r+0xc2>
 8005086:	1961      	adds	r1, r4, r5
 8005088:	42a3      	cmp	r3, r4
 800508a:	6025      	str	r5, [r4, #0]
 800508c:	bf18      	it	ne
 800508e:	6059      	strne	r1, [r3, #4]
 8005090:	6863      	ldr	r3, [r4, #4]
 8005092:	bf08      	it	eq
 8005094:	f8c8 1000 	streq.w	r1, [r8]
 8005098:	5162      	str	r2, [r4, r5]
 800509a:	604b      	str	r3, [r1, #4]
 800509c:	4630      	mov	r0, r6
 800509e:	f000 f82f 	bl	8005100 <__malloc_unlock>
 80050a2:	f104 000b 	add.w	r0, r4, #11
 80050a6:	1d23      	adds	r3, r4, #4
 80050a8:	f020 0007 	bic.w	r0, r0, #7
 80050ac:	1ac2      	subs	r2, r0, r3
 80050ae:	bf1c      	itt	ne
 80050b0:	1a1b      	subne	r3, r3, r0
 80050b2:	50a3      	strne	r3, [r4, r2]
 80050b4:	e7af      	b.n	8005016 <_malloc_r+0x22>
 80050b6:	6862      	ldr	r2, [r4, #4]
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	bf0c      	ite	eq
 80050bc:	f8c8 2000 	streq.w	r2, [r8]
 80050c0:	605a      	strne	r2, [r3, #4]
 80050c2:	e7eb      	b.n	800509c <_malloc_r+0xa8>
 80050c4:	4623      	mov	r3, r4
 80050c6:	6864      	ldr	r4, [r4, #4]
 80050c8:	e7ae      	b.n	8005028 <_malloc_r+0x34>
 80050ca:	463c      	mov	r4, r7
 80050cc:	687f      	ldr	r7, [r7, #4]
 80050ce:	e7b6      	b.n	800503e <_malloc_r+0x4a>
 80050d0:	461a      	mov	r2, r3
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	d1fb      	bne.n	80050d0 <_malloc_r+0xdc>
 80050d8:	2300      	movs	r3, #0
 80050da:	6053      	str	r3, [r2, #4]
 80050dc:	e7de      	b.n	800509c <_malloc_r+0xa8>
 80050de:	230c      	movs	r3, #12
 80050e0:	4630      	mov	r0, r6
 80050e2:	6033      	str	r3, [r6, #0]
 80050e4:	f000 f80c 	bl	8005100 <__malloc_unlock>
 80050e8:	e794      	b.n	8005014 <_malloc_r+0x20>
 80050ea:	6005      	str	r5, [r0, #0]
 80050ec:	e7d6      	b.n	800509c <_malloc_r+0xa8>
 80050ee:	bf00      	nop
 80050f0:	200003d4 	.word	0x200003d4

080050f4 <__malloc_lock>:
 80050f4:	4801      	ldr	r0, [pc, #4]	@ (80050fc <__malloc_lock+0x8>)
 80050f6:	f7ff b8a6 	b.w	8004246 <__retarget_lock_acquire_recursive>
 80050fa:	bf00      	nop
 80050fc:	200003cc 	.word	0x200003cc

08005100 <__malloc_unlock>:
 8005100:	4801      	ldr	r0, [pc, #4]	@ (8005108 <__malloc_unlock+0x8>)
 8005102:	f7ff b8a1 	b.w	8004248 <__retarget_lock_release_recursive>
 8005106:	bf00      	nop
 8005108:	200003cc 	.word	0x200003cc

0800510c <_Balloc>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	69c6      	ldr	r6, [r0, #28]
 8005110:	4604      	mov	r4, r0
 8005112:	460d      	mov	r5, r1
 8005114:	b976      	cbnz	r6, 8005134 <_Balloc+0x28>
 8005116:	2010      	movs	r0, #16
 8005118:	f7ff ff42 	bl	8004fa0 <malloc>
 800511c:	4602      	mov	r2, r0
 800511e:	61e0      	str	r0, [r4, #28]
 8005120:	b920      	cbnz	r0, 800512c <_Balloc+0x20>
 8005122:	216b      	movs	r1, #107	@ 0x6b
 8005124:	4b17      	ldr	r3, [pc, #92]	@ (8005184 <_Balloc+0x78>)
 8005126:	4818      	ldr	r0, [pc, #96]	@ (8005188 <_Balloc+0x7c>)
 8005128:	f001 fd64 	bl	8006bf4 <__assert_func>
 800512c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005130:	6006      	str	r6, [r0, #0]
 8005132:	60c6      	str	r6, [r0, #12]
 8005134:	69e6      	ldr	r6, [r4, #28]
 8005136:	68f3      	ldr	r3, [r6, #12]
 8005138:	b183      	cbz	r3, 800515c <_Balloc+0x50>
 800513a:	69e3      	ldr	r3, [r4, #28]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005142:	b9b8      	cbnz	r0, 8005174 <_Balloc+0x68>
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f605 	lsl.w	r6, r1, r5
 800514a:	1d72      	adds	r2, r6, #5
 800514c:	4620      	mov	r0, r4
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	f001 fd6e 	bl	8006c30 <_calloc_r>
 8005154:	b160      	cbz	r0, 8005170 <_Balloc+0x64>
 8005156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800515a:	e00e      	b.n	800517a <_Balloc+0x6e>
 800515c:	2221      	movs	r2, #33	@ 0x21
 800515e:	2104      	movs	r1, #4
 8005160:	4620      	mov	r0, r4
 8005162:	f001 fd65 	bl	8006c30 <_calloc_r>
 8005166:	69e3      	ldr	r3, [r4, #28]
 8005168:	60f0      	str	r0, [r6, #12]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e4      	bne.n	800513a <_Balloc+0x2e>
 8005170:	2000      	movs	r0, #0
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	6802      	ldr	r2, [r0, #0]
 8005176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800517a:	2300      	movs	r3, #0
 800517c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005180:	e7f7      	b.n	8005172 <_Balloc+0x66>
 8005182:	bf00      	nop
 8005184:	0800799c 	.word	0x0800799c
 8005188:	08007a1c 	.word	0x08007a1c

0800518c <_Bfree>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	69c6      	ldr	r6, [r0, #28]
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	b976      	cbnz	r6, 80051b4 <_Bfree+0x28>
 8005196:	2010      	movs	r0, #16
 8005198:	f7ff ff02 	bl	8004fa0 <malloc>
 800519c:	4602      	mov	r2, r0
 800519e:	61e8      	str	r0, [r5, #28]
 80051a0:	b920      	cbnz	r0, 80051ac <_Bfree+0x20>
 80051a2:	218f      	movs	r1, #143	@ 0x8f
 80051a4:	4b08      	ldr	r3, [pc, #32]	@ (80051c8 <_Bfree+0x3c>)
 80051a6:	4809      	ldr	r0, [pc, #36]	@ (80051cc <_Bfree+0x40>)
 80051a8:	f001 fd24 	bl	8006bf4 <__assert_func>
 80051ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051b0:	6006      	str	r6, [r0, #0]
 80051b2:	60c6      	str	r6, [r0, #12]
 80051b4:	b13c      	cbz	r4, 80051c6 <_Bfree+0x3a>
 80051b6:	69eb      	ldr	r3, [r5, #28]
 80051b8:	6862      	ldr	r2, [r4, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051c0:	6021      	str	r1, [r4, #0]
 80051c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	0800799c 	.word	0x0800799c
 80051cc:	08007a1c 	.word	0x08007a1c

080051d0 <__multadd>:
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	4607      	mov	r7, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	461e      	mov	r6, r3
 80051da:	2000      	movs	r0, #0
 80051dc:	690d      	ldr	r5, [r1, #16]
 80051de:	f101 0c14 	add.w	ip, r1, #20
 80051e2:	f8dc 3000 	ldr.w	r3, [ip]
 80051e6:	3001      	adds	r0, #1
 80051e8:	b299      	uxth	r1, r3
 80051ea:	fb02 6101 	mla	r1, r2, r1, r6
 80051ee:	0c1e      	lsrs	r6, r3, #16
 80051f0:	0c0b      	lsrs	r3, r1, #16
 80051f2:	fb02 3306 	mla	r3, r2, r6, r3
 80051f6:	b289      	uxth	r1, r1
 80051f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051fc:	4285      	cmp	r5, r0
 80051fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005202:	f84c 1b04 	str.w	r1, [ip], #4
 8005206:	dcec      	bgt.n	80051e2 <__multadd+0x12>
 8005208:	b30e      	cbz	r6, 800524e <__multadd+0x7e>
 800520a:	68a3      	ldr	r3, [r4, #8]
 800520c:	42ab      	cmp	r3, r5
 800520e:	dc19      	bgt.n	8005244 <__multadd+0x74>
 8005210:	6861      	ldr	r1, [r4, #4]
 8005212:	4638      	mov	r0, r7
 8005214:	3101      	adds	r1, #1
 8005216:	f7ff ff79 	bl	800510c <_Balloc>
 800521a:	4680      	mov	r8, r0
 800521c:	b928      	cbnz	r0, 800522a <__multadd+0x5a>
 800521e:	4602      	mov	r2, r0
 8005220:	21ba      	movs	r1, #186	@ 0xba
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <__multadd+0x84>)
 8005224:	480c      	ldr	r0, [pc, #48]	@ (8005258 <__multadd+0x88>)
 8005226:	f001 fce5 	bl	8006bf4 <__assert_func>
 800522a:	6922      	ldr	r2, [r4, #16]
 800522c:	f104 010c 	add.w	r1, r4, #12
 8005230:	3202      	adds	r2, #2
 8005232:	0092      	lsls	r2, r2, #2
 8005234:	300c      	adds	r0, #12
 8005236:	f001 fcc9 	bl	8006bcc <memcpy>
 800523a:	4621      	mov	r1, r4
 800523c:	4638      	mov	r0, r7
 800523e:	f7ff ffa5 	bl	800518c <_Bfree>
 8005242:	4644      	mov	r4, r8
 8005244:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005248:	3501      	adds	r5, #1
 800524a:	615e      	str	r6, [r3, #20]
 800524c:	6125      	str	r5, [r4, #16]
 800524e:	4620      	mov	r0, r4
 8005250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005254:	08007a0b 	.word	0x08007a0b
 8005258:	08007a1c 	.word	0x08007a1c

0800525c <__s2b>:
 800525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005260:	4615      	mov	r5, r2
 8005262:	2209      	movs	r2, #9
 8005264:	461f      	mov	r7, r3
 8005266:	3308      	adds	r3, #8
 8005268:	460c      	mov	r4, r1
 800526a:	fb93 f3f2 	sdiv	r3, r3, r2
 800526e:	4606      	mov	r6, r0
 8005270:	2201      	movs	r2, #1
 8005272:	2100      	movs	r1, #0
 8005274:	429a      	cmp	r2, r3
 8005276:	db09      	blt.n	800528c <__s2b+0x30>
 8005278:	4630      	mov	r0, r6
 800527a:	f7ff ff47 	bl	800510c <_Balloc>
 800527e:	b940      	cbnz	r0, 8005292 <__s2b+0x36>
 8005280:	4602      	mov	r2, r0
 8005282:	21d3      	movs	r1, #211	@ 0xd3
 8005284:	4b18      	ldr	r3, [pc, #96]	@ (80052e8 <__s2b+0x8c>)
 8005286:	4819      	ldr	r0, [pc, #100]	@ (80052ec <__s2b+0x90>)
 8005288:	f001 fcb4 	bl	8006bf4 <__assert_func>
 800528c:	0052      	lsls	r2, r2, #1
 800528e:	3101      	adds	r1, #1
 8005290:	e7f0      	b.n	8005274 <__s2b+0x18>
 8005292:	9b08      	ldr	r3, [sp, #32]
 8005294:	2d09      	cmp	r5, #9
 8005296:	6143      	str	r3, [r0, #20]
 8005298:	f04f 0301 	mov.w	r3, #1
 800529c:	6103      	str	r3, [r0, #16]
 800529e:	dd16      	ble.n	80052ce <__s2b+0x72>
 80052a0:	f104 0909 	add.w	r9, r4, #9
 80052a4:	46c8      	mov	r8, r9
 80052a6:	442c      	add	r4, r5
 80052a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80052ac:	4601      	mov	r1, r0
 80052ae:	220a      	movs	r2, #10
 80052b0:	4630      	mov	r0, r6
 80052b2:	3b30      	subs	r3, #48	@ 0x30
 80052b4:	f7ff ff8c 	bl	80051d0 <__multadd>
 80052b8:	45a0      	cmp	r8, r4
 80052ba:	d1f5      	bne.n	80052a8 <__s2b+0x4c>
 80052bc:	f1a5 0408 	sub.w	r4, r5, #8
 80052c0:	444c      	add	r4, r9
 80052c2:	1b2d      	subs	r5, r5, r4
 80052c4:	1963      	adds	r3, r4, r5
 80052c6:	42bb      	cmp	r3, r7
 80052c8:	db04      	blt.n	80052d4 <__s2b+0x78>
 80052ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ce:	2509      	movs	r5, #9
 80052d0:	340a      	adds	r4, #10
 80052d2:	e7f6      	b.n	80052c2 <__s2b+0x66>
 80052d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052d8:	4601      	mov	r1, r0
 80052da:	220a      	movs	r2, #10
 80052dc:	4630      	mov	r0, r6
 80052de:	3b30      	subs	r3, #48	@ 0x30
 80052e0:	f7ff ff76 	bl	80051d0 <__multadd>
 80052e4:	e7ee      	b.n	80052c4 <__s2b+0x68>
 80052e6:	bf00      	nop
 80052e8:	08007a0b 	.word	0x08007a0b
 80052ec:	08007a1c 	.word	0x08007a1c

080052f0 <__hi0bits>:
 80052f0:	4603      	mov	r3, r0
 80052f2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80052f6:	bf3a      	itte	cc
 80052f8:	0403      	lslcc	r3, r0, #16
 80052fa:	2010      	movcc	r0, #16
 80052fc:	2000      	movcs	r0, #0
 80052fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005302:	bf3c      	itt	cc
 8005304:	021b      	lslcc	r3, r3, #8
 8005306:	3008      	addcc	r0, #8
 8005308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800530c:	bf3c      	itt	cc
 800530e:	011b      	lslcc	r3, r3, #4
 8005310:	3004      	addcc	r0, #4
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005316:	bf3c      	itt	cc
 8005318:	009b      	lslcc	r3, r3, #2
 800531a:	3002      	addcc	r0, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	db05      	blt.n	800532c <__hi0bits+0x3c>
 8005320:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005324:	f100 0001 	add.w	r0, r0, #1
 8005328:	bf08      	it	eq
 800532a:	2020      	moveq	r0, #32
 800532c:	4770      	bx	lr

0800532e <__lo0bits>:
 800532e:	6803      	ldr	r3, [r0, #0]
 8005330:	4602      	mov	r2, r0
 8005332:	f013 0007 	ands.w	r0, r3, #7
 8005336:	d00b      	beq.n	8005350 <__lo0bits+0x22>
 8005338:	07d9      	lsls	r1, r3, #31
 800533a:	d421      	bmi.n	8005380 <__lo0bits+0x52>
 800533c:	0798      	lsls	r0, r3, #30
 800533e:	bf49      	itett	mi
 8005340:	085b      	lsrmi	r3, r3, #1
 8005342:	089b      	lsrpl	r3, r3, #2
 8005344:	2001      	movmi	r0, #1
 8005346:	6013      	strmi	r3, [r2, #0]
 8005348:	bf5c      	itt	pl
 800534a:	2002      	movpl	r0, #2
 800534c:	6013      	strpl	r3, [r2, #0]
 800534e:	4770      	bx	lr
 8005350:	b299      	uxth	r1, r3
 8005352:	b909      	cbnz	r1, 8005358 <__lo0bits+0x2a>
 8005354:	2010      	movs	r0, #16
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	b2d9      	uxtb	r1, r3
 800535a:	b909      	cbnz	r1, 8005360 <__lo0bits+0x32>
 800535c:	3008      	adds	r0, #8
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	0719      	lsls	r1, r3, #28
 8005362:	bf04      	itt	eq
 8005364:	091b      	lsreq	r3, r3, #4
 8005366:	3004      	addeq	r0, #4
 8005368:	0799      	lsls	r1, r3, #30
 800536a:	bf04      	itt	eq
 800536c:	089b      	lsreq	r3, r3, #2
 800536e:	3002      	addeq	r0, #2
 8005370:	07d9      	lsls	r1, r3, #31
 8005372:	d403      	bmi.n	800537c <__lo0bits+0x4e>
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	f100 0001 	add.w	r0, r0, #1
 800537a:	d003      	beq.n	8005384 <__lo0bits+0x56>
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4770      	bx	lr
 8005380:	2000      	movs	r0, #0
 8005382:	4770      	bx	lr
 8005384:	2020      	movs	r0, #32
 8005386:	4770      	bx	lr

08005388 <__i2b>:
 8005388:	b510      	push	{r4, lr}
 800538a:	460c      	mov	r4, r1
 800538c:	2101      	movs	r1, #1
 800538e:	f7ff febd 	bl	800510c <_Balloc>
 8005392:	4602      	mov	r2, r0
 8005394:	b928      	cbnz	r0, 80053a2 <__i2b+0x1a>
 8005396:	f240 1145 	movw	r1, #325	@ 0x145
 800539a:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <__i2b+0x24>)
 800539c:	4804      	ldr	r0, [pc, #16]	@ (80053b0 <__i2b+0x28>)
 800539e:	f001 fc29 	bl	8006bf4 <__assert_func>
 80053a2:	2301      	movs	r3, #1
 80053a4:	6144      	str	r4, [r0, #20]
 80053a6:	6103      	str	r3, [r0, #16]
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	bf00      	nop
 80053ac:	08007a0b 	.word	0x08007a0b
 80053b0:	08007a1c 	.word	0x08007a1c

080053b4 <__multiply>:
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	4614      	mov	r4, r2
 80053ba:	690a      	ldr	r2, [r1, #16]
 80053bc:	6923      	ldr	r3, [r4, #16]
 80053be:	460f      	mov	r7, r1
 80053c0:	429a      	cmp	r2, r3
 80053c2:	bfa2      	ittt	ge
 80053c4:	4623      	movge	r3, r4
 80053c6:	460c      	movge	r4, r1
 80053c8:	461f      	movge	r7, r3
 80053ca:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80053ce:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	6861      	ldr	r1, [r4, #4]
 80053d6:	eb0a 0609 	add.w	r6, sl, r9
 80053da:	42b3      	cmp	r3, r6
 80053dc:	b085      	sub	sp, #20
 80053de:	bfb8      	it	lt
 80053e0:	3101      	addlt	r1, #1
 80053e2:	f7ff fe93 	bl	800510c <_Balloc>
 80053e6:	b930      	cbnz	r0, 80053f6 <__multiply+0x42>
 80053e8:	4602      	mov	r2, r0
 80053ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80053ee:	4b43      	ldr	r3, [pc, #268]	@ (80054fc <__multiply+0x148>)
 80053f0:	4843      	ldr	r0, [pc, #268]	@ (8005500 <__multiply+0x14c>)
 80053f2:	f001 fbff 	bl	8006bf4 <__assert_func>
 80053f6:	f100 0514 	add.w	r5, r0, #20
 80053fa:	462b      	mov	r3, r5
 80053fc:	2200      	movs	r2, #0
 80053fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005402:	4543      	cmp	r3, r8
 8005404:	d321      	bcc.n	800544a <__multiply+0x96>
 8005406:	f107 0114 	add.w	r1, r7, #20
 800540a:	f104 0214 	add.w	r2, r4, #20
 800540e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005412:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005416:	9302      	str	r3, [sp, #8]
 8005418:	1b13      	subs	r3, r2, r4
 800541a:	3b15      	subs	r3, #21
 800541c:	f023 0303 	bic.w	r3, r3, #3
 8005420:	3304      	adds	r3, #4
 8005422:	f104 0715 	add.w	r7, r4, #21
 8005426:	42ba      	cmp	r2, r7
 8005428:	bf38      	it	cc
 800542a:	2304      	movcc	r3, #4
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	9b02      	ldr	r3, [sp, #8]
 8005430:	9103      	str	r1, [sp, #12]
 8005432:	428b      	cmp	r3, r1
 8005434:	d80c      	bhi.n	8005450 <__multiply+0x9c>
 8005436:	2e00      	cmp	r6, #0
 8005438:	dd03      	ble.n	8005442 <__multiply+0x8e>
 800543a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800543e:	2b00      	cmp	r3, #0
 8005440:	d05a      	beq.n	80054f8 <__multiply+0x144>
 8005442:	6106      	str	r6, [r0, #16]
 8005444:	b005      	add	sp, #20
 8005446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544a:	f843 2b04 	str.w	r2, [r3], #4
 800544e:	e7d8      	b.n	8005402 <__multiply+0x4e>
 8005450:	f8b1 a000 	ldrh.w	sl, [r1]
 8005454:	f1ba 0f00 	cmp.w	sl, #0
 8005458:	d023      	beq.n	80054a2 <__multiply+0xee>
 800545a:	46a9      	mov	r9, r5
 800545c:	f04f 0c00 	mov.w	ip, #0
 8005460:	f104 0e14 	add.w	lr, r4, #20
 8005464:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005468:	f8d9 3000 	ldr.w	r3, [r9]
 800546c:	fa1f fb87 	uxth.w	fp, r7
 8005470:	b29b      	uxth	r3, r3
 8005472:	fb0a 330b 	mla	r3, sl, fp, r3
 8005476:	4463      	add	r3, ip
 8005478:	f8d9 c000 	ldr.w	ip, [r9]
 800547c:	0c3f      	lsrs	r7, r7, #16
 800547e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005482:	fb0a c707 	mla	r7, sl, r7, ip
 8005486:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800548a:	b29b      	uxth	r3, r3
 800548c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005490:	4572      	cmp	r2, lr
 8005492:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005496:	f849 3b04 	str.w	r3, [r9], #4
 800549a:	d8e3      	bhi.n	8005464 <__multiply+0xb0>
 800549c:	9b01      	ldr	r3, [sp, #4]
 800549e:	f845 c003 	str.w	ip, [r5, r3]
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	3104      	adds	r1, #4
 80054a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80054aa:	f1b9 0f00 	cmp.w	r9, #0
 80054ae:	d021      	beq.n	80054f4 <__multiply+0x140>
 80054b0:	46ae      	mov	lr, r5
 80054b2:	f04f 0a00 	mov.w	sl, #0
 80054b6:	682b      	ldr	r3, [r5, #0]
 80054b8:	f104 0c14 	add.w	ip, r4, #20
 80054bc:	f8bc b000 	ldrh.w	fp, [ip]
 80054c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	fb09 770b 	mla	r7, r9, fp, r7
 80054ca:	4457      	add	r7, sl
 80054cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80054d0:	f84e 3b04 	str.w	r3, [lr], #4
 80054d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80054d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054dc:	f8be 3000 	ldrh.w	r3, [lr]
 80054e0:	4562      	cmp	r2, ip
 80054e2:	fb09 330a 	mla	r3, r9, sl, r3
 80054e6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80054ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054ee:	d8e5      	bhi.n	80054bc <__multiply+0x108>
 80054f0:	9f01      	ldr	r7, [sp, #4]
 80054f2:	51eb      	str	r3, [r5, r7]
 80054f4:	3504      	adds	r5, #4
 80054f6:	e79a      	b.n	800542e <__multiply+0x7a>
 80054f8:	3e01      	subs	r6, #1
 80054fa:	e79c      	b.n	8005436 <__multiply+0x82>
 80054fc:	08007a0b 	.word	0x08007a0b
 8005500:	08007a1c 	.word	0x08007a1c

08005504 <__pow5mult>:
 8005504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005508:	4615      	mov	r5, r2
 800550a:	f012 0203 	ands.w	r2, r2, #3
 800550e:	4607      	mov	r7, r0
 8005510:	460e      	mov	r6, r1
 8005512:	d007      	beq.n	8005524 <__pow5mult+0x20>
 8005514:	4c25      	ldr	r4, [pc, #148]	@ (80055ac <__pow5mult+0xa8>)
 8005516:	3a01      	subs	r2, #1
 8005518:	2300      	movs	r3, #0
 800551a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800551e:	f7ff fe57 	bl	80051d0 <__multadd>
 8005522:	4606      	mov	r6, r0
 8005524:	10ad      	asrs	r5, r5, #2
 8005526:	d03d      	beq.n	80055a4 <__pow5mult+0xa0>
 8005528:	69fc      	ldr	r4, [r7, #28]
 800552a:	b97c      	cbnz	r4, 800554c <__pow5mult+0x48>
 800552c:	2010      	movs	r0, #16
 800552e:	f7ff fd37 	bl	8004fa0 <malloc>
 8005532:	4602      	mov	r2, r0
 8005534:	61f8      	str	r0, [r7, #28]
 8005536:	b928      	cbnz	r0, 8005544 <__pow5mult+0x40>
 8005538:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800553c:	4b1c      	ldr	r3, [pc, #112]	@ (80055b0 <__pow5mult+0xac>)
 800553e:	481d      	ldr	r0, [pc, #116]	@ (80055b4 <__pow5mult+0xb0>)
 8005540:	f001 fb58 	bl	8006bf4 <__assert_func>
 8005544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005548:	6004      	str	r4, [r0, #0]
 800554a:	60c4      	str	r4, [r0, #12]
 800554c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005554:	b94c      	cbnz	r4, 800556a <__pow5mult+0x66>
 8005556:	f240 2171 	movw	r1, #625	@ 0x271
 800555a:	4638      	mov	r0, r7
 800555c:	f7ff ff14 	bl	8005388 <__i2b>
 8005560:	2300      	movs	r3, #0
 8005562:	4604      	mov	r4, r0
 8005564:	f8c8 0008 	str.w	r0, [r8, #8]
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	f04f 0900 	mov.w	r9, #0
 800556e:	07eb      	lsls	r3, r5, #31
 8005570:	d50a      	bpl.n	8005588 <__pow5mult+0x84>
 8005572:	4631      	mov	r1, r6
 8005574:	4622      	mov	r2, r4
 8005576:	4638      	mov	r0, r7
 8005578:	f7ff ff1c 	bl	80053b4 <__multiply>
 800557c:	4680      	mov	r8, r0
 800557e:	4631      	mov	r1, r6
 8005580:	4638      	mov	r0, r7
 8005582:	f7ff fe03 	bl	800518c <_Bfree>
 8005586:	4646      	mov	r6, r8
 8005588:	106d      	asrs	r5, r5, #1
 800558a:	d00b      	beq.n	80055a4 <__pow5mult+0xa0>
 800558c:	6820      	ldr	r0, [r4, #0]
 800558e:	b938      	cbnz	r0, 80055a0 <__pow5mult+0x9c>
 8005590:	4622      	mov	r2, r4
 8005592:	4621      	mov	r1, r4
 8005594:	4638      	mov	r0, r7
 8005596:	f7ff ff0d 	bl	80053b4 <__multiply>
 800559a:	6020      	str	r0, [r4, #0]
 800559c:	f8c0 9000 	str.w	r9, [r0]
 80055a0:	4604      	mov	r4, r0
 80055a2:	e7e4      	b.n	800556e <__pow5mult+0x6a>
 80055a4:	4630      	mov	r0, r6
 80055a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055aa:	bf00      	nop
 80055ac:	08007a78 	.word	0x08007a78
 80055b0:	0800799c 	.word	0x0800799c
 80055b4:	08007a1c 	.word	0x08007a1c

080055b8 <__lshift>:
 80055b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	460c      	mov	r4, r1
 80055be:	4607      	mov	r7, r0
 80055c0:	4691      	mov	r9, r2
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	6849      	ldr	r1, [r1, #4]
 80055c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055ca:	68a3      	ldr	r3, [r4, #8]
 80055cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055d0:	f108 0601 	add.w	r6, r8, #1
 80055d4:	42b3      	cmp	r3, r6
 80055d6:	db0b      	blt.n	80055f0 <__lshift+0x38>
 80055d8:	4638      	mov	r0, r7
 80055da:	f7ff fd97 	bl	800510c <_Balloc>
 80055de:	4605      	mov	r5, r0
 80055e0:	b948      	cbnz	r0, 80055f6 <__lshift+0x3e>
 80055e2:	4602      	mov	r2, r0
 80055e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80055e8:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <__lshift+0xd0>)
 80055ea:	4828      	ldr	r0, [pc, #160]	@ (800568c <__lshift+0xd4>)
 80055ec:	f001 fb02 	bl	8006bf4 <__assert_func>
 80055f0:	3101      	adds	r1, #1
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	e7ee      	b.n	80055d4 <__lshift+0x1c>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f100 0114 	add.w	r1, r0, #20
 80055fc:	f100 0210 	add.w	r2, r0, #16
 8005600:	4618      	mov	r0, r3
 8005602:	4553      	cmp	r3, sl
 8005604:	db33      	blt.n	800566e <__lshift+0xb6>
 8005606:	6920      	ldr	r0, [r4, #16]
 8005608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800560c:	f104 0314 	add.w	r3, r4, #20
 8005610:	f019 091f 	ands.w	r9, r9, #31
 8005614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005618:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800561c:	d02b      	beq.n	8005676 <__lshift+0xbe>
 800561e:	468a      	mov	sl, r1
 8005620:	2200      	movs	r2, #0
 8005622:	f1c9 0e20 	rsb	lr, r9, #32
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	fa00 f009 	lsl.w	r0, r0, r9
 800562c:	4310      	orrs	r0, r2
 800562e:	f84a 0b04 	str.w	r0, [sl], #4
 8005632:	f853 2b04 	ldr.w	r2, [r3], #4
 8005636:	459c      	cmp	ip, r3
 8005638:	fa22 f20e 	lsr.w	r2, r2, lr
 800563c:	d8f3      	bhi.n	8005626 <__lshift+0x6e>
 800563e:	ebac 0304 	sub.w	r3, ip, r4
 8005642:	3b15      	subs	r3, #21
 8005644:	f023 0303 	bic.w	r3, r3, #3
 8005648:	3304      	adds	r3, #4
 800564a:	f104 0015 	add.w	r0, r4, #21
 800564e:	4584      	cmp	ip, r0
 8005650:	bf38      	it	cc
 8005652:	2304      	movcc	r3, #4
 8005654:	50ca      	str	r2, [r1, r3]
 8005656:	b10a      	cbz	r2, 800565c <__lshift+0xa4>
 8005658:	f108 0602 	add.w	r6, r8, #2
 800565c:	3e01      	subs	r6, #1
 800565e:	4638      	mov	r0, r7
 8005660:	4621      	mov	r1, r4
 8005662:	612e      	str	r6, [r5, #16]
 8005664:	f7ff fd92 	bl	800518c <_Bfree>
 8005668:	4628      	mov	r0, r5
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005672:	3301      	adds	r3, #1
 8005674:	e7c5      	b.n	8005602 <__lshift+0x4a>
 8005676:	3904      	subs	r1, #4
 8005678:	f853 2b04 	ldr.w	r2, [r3], #4
 800567c:	459c      	cmp	ip, r3
 800567e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005682:	d8f9      	bhi.n	8005678 <__lshift+0xc0>
 8005684:	e7ea      	b.n	800565c <__lshift+0xa4>
 8005686:	bf00      	nop
 8005688:	08007a0b 	.word	0x08007a0b
 800568c:	08007a1c 	.word	0x08007a1c

08005690 <__mcmp>:
 8005690:	4603      	mov	r3, r0
 8005692:	690a      	ldr	r2, [r1, #16]
 8005694:	6900      	ldr	r0, [r0, #16]
 8005696:	b530      	push	{r4, r5, lr}
 8005698:	1a80      	subs	r0, r0, r2
 800569a:	d10e      	bne.n	80056ba <__mcmp+0x2a>
 800569c:	3314      	adds	r3, #20
 800569e:	3114      	adds	r1, #20
 80056a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80056a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80056a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80056ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056b0:	4295      	cmp	r5, r2
 80056b2:	d003      	beq.n	80056bc <__mcmp+0x2c>
 80056b4:	d205      	bcs.n	80056c2 <__mcmp+0x32>
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ba:	bd30      	pop	{r4, r5, pc}
 80056bc:	42a3      	cmp	r3, r4
 80056be:	d3f3      	bcc.n	80056a8 <__mcmp+0x18>
 80056c0:	e7fb      	b.n	80056ba <__mcmp+0x2a>
 80056c2:	2001      	movs	r0, #1
 80056c4:	e7f9      	b.n	80056ba <__mcmp+0x2a>
	...

080056c8 <__mdiff>:
 80056c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	4689      	mov	r9, r1
 80056ce:	4606      	mov	r6, r0
 80056d0:	4611      	mov	r1, r2
 80056d2:	4648      	mov	r0, r9
 80056d4:	4614      	mov	r4, r2
 80056d6:	f7ff ffdb 	bl	8005690 <__mcmp>
 80056da:	1e05      	subs	r5, r0, #0
 80056dc:	d112      	bne.n	8005704 <__mdiff+0x3c>
 80056de:	4629      	mov	r1, r5
 80056e0:	4630      	mov	r0, r6
 80056e2:	f7ff fd13 	bl	800510c <_Balloc>
 80056e6:	4602      	mov	r2, r0
 80056e8:	b928      	cbnz	r0, 80056f6 <__mdiff+0x2e>
 80056ea:	f240 2137 	movw	r1, #567	@ 0x237
 80056ee:	4b3e      	ldr	r3, [pc, #248]	@ (80057e8 <__mdiff+0x120>)
 80056f0:	483e      	ldr	r0, [pc, #248]	@ (80057ec <__mdiff+0x124>)
 80056f2:	f001 fa7f 	bl	8006bf4 <__assert_func>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056fc:	4610      	mov	r0, r2
 80056fe:	b003      	add	sp, #12
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	bfbc      	itt	lt
 8005706:	464b      	movlt	r3, r9
 8005708:	46a1      	movlt	r9, r4
 800570a:	4630      	mov	r0, r6
 800570c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005710:	bfba      	itte	lt
 8005712:	461c      	movlt	r4, r3
 8005714:	2501      	movlt	r5, #1
 8005716:	2500      	movge	r5, #0
 8005718:	f7ff fcf8 	bl	800510c <_Balloc>
 800571c:	4602      	mov	r2, r0
 800571e:	b918      	cbnz	r0, 8005728 <__mdiff+0x60>
 8005720:	f240 2145 	movw	r1, #581	@ 0x245
 8005724:	4b30      	ldr	r3, [pc, #192]	@ (80057e8 <__mdiff+0x120>)
 8005726:	e7e3      	b.n	80056f0 <__mdiff+0x28>
 8005728:	f100 0b14 	add.w	fp, r0, #20
 800572c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005730:	f109 0310 	add.w	r3, r9, #16
 8005734:	60c5      	str	r5, [r0, #12]
 8005736:	f04f 0c00 	mov.w	ip, #0
 800573a:	f109 0514 	add.w	r5, r9, #20
 800573e:	46d9      	mov	r9, fp
 8005740:	6926      	ldr	r6, [r4, #16]
 8005742:	f104 0e14 	add.w	lr, r4, #20
 8005746:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800574a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	9b01      	ldr	r3, [sp, #4]
 8005752:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005756:	f853 af04 	ldr.w	sl, [r3, #4]!
 800575a:	b281      	uxth	r1, r0
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	fa1f f38a 	uxth.w	r3, sl
 8005762:	1a5b      	subs	r3, r3, r1
 8005764:	0c00      	lsrs	r0, r0, #16
 8005766:	4463      	add	r3, ip
 8005768:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800576c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005776:	4576      	cmp	r6, lr
 8005778:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800577c:	f849 3b04 	str.w	r3, [r9], #4
 8005780:	d8e6      	bhi.n	8005750 <__mdiff+0x88>
 8005782:	1b33      	subs	r3, r6, r4
 8005784:	3b15      	subs	r3, #21
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	3415      	adds	r4, #21
 800578c:	3304      	adds	r3, #4
 800578e:	42a6      	cmp	r6, r4
 8005790:	bf38      	it	cc
 8005792:	2304      	movcc	r3, #4
 8005794:	441d      	add	r5, r3
 8005796:	445b      	add	r3, fp
 8005798:	461e      	mov	r6, r3
 800579a:	462c      	mov	r4, r5
 800579c:	4544      	cmp	r4, r8
 800579e:	d30e      	bcc.n	80057be <__mdiff+0xf6>
 80057a0:	f108 0103 	add.w	r1, r8, #3
 80057a4:	1b49      	subs	r1, r1, r5
 80057a6:	f021 0103 	bic.w	r1, r1, #3
 80057aa:	3d03      	subs	r5, #3
 80057ac:	45a8      	cmp	r8, r5
 80057ae:	bf38      	it	cc
 80057b0:	2100      	movcc	r1, #0
 80057b2:	440b      	add	r3, r1
 80057b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80057b8:	b199      	cbz	r1, 80057e2 <__mdiff+0x11a>
 80057ba:	6117      	str	r7, [r2, #16]
 80057bc:	e79e      	b.n	80056fc <__mdiff+0x34>
 80057be:	46e6      	mov	lr, ip
 80057c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80057c4:	fa1f fc81 	uxth.w	ip, r1
 80057c8:	44f4      	add	ip, lr
 80057ca:	0c08      	lsrs	r0, r1, #16
 80057cc:	4471      	add	r1, lr
 80057ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80057d2:	b289      	uxth	r1, r1
 80057d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80057d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057dc:	f846 1b04 	str.w	r1, [r6], #4
 80057e0:	e7dc      	b.n	800579c <__mdiff+0xd4>
 80057e2:	3f01      	subs	r7, #1
 80057e4:	e7e6      	b.n	80057b4 <__mdiff+0xec>
 80057e6:	bf00      	nop
 80057e8:	08007a0b 	.word	0x08007a0b
 80057ec:	08007a1c 	.word	0x08007a1c

080057f0 <__ulp>:
 80057f0:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <__ulp+0x3c>)
 80057f2:	400b      	ands	r3, r1
 80057f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	dc08      	bgt.n	800580e <__ulp+0x1e>
 80057fc:	425b      	negs	r3, r3
 80057fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005802:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005806:	da04      	bge.n	8005812 <__ulp+0x22>
 8005808:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800580c:	4113      	asrs	r3, r2
 800580e:	2200      	movs	r2, #0
 8005810:	e008      	b.n	8005824 <__ulp+0x34>
 8005812:	f1a2 0314 	sub.w	r3, r2, #20
 8005816:	2b1e      	cmp	r3, #30
 8005818:	bfd6      	itet	le
 800581a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800581e:	2201      	movgt	r2, #1
 8005820:	40da      	lsrle	r2, r3
 8005822:	2300      	movs	r3, #0
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	7ff00000 	.word	0x7ff00000

08005830 <__b2d>:
 8005830:	6902      	ldr	r2, [r0, #16]
 8005832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005834:	f100 0614 	add.w	r6, r0, #20
 8005838:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800583c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005840:	4f1e      	ldr	r7, [pc, #120]	@ (80058bc <__b2d+0x8c>)
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fd54 	bl	80052f0 <__hi0bits>
 8005848:	4603      	mov	r3, r0
 800584a:	f1c0 0020 	rsb	r0, r0, #32
 800584e:	2b0a      	cmp	r3, #10
 8005850:	f1a2 0504 	sub.w	r5, r2, #4
 8005854:	6008      	str	r0, [r1, #0]
 8005856:	dc12      	bgt.n	800587e <__b2d+0x4e>
 8005858:	42ae      	cmp	r6, r5
 800585a:	bf2c      	ite	cs
 800585c:	2200      	movcs	r2, #0
 800585e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005862:	f1c3 0c0b 	rsb	ip, r3, #11
 8005866:	3315      	adds	r3, #21
 8005868:	fa24 fe0c 	lsr.w	lr, r4, ip
 800586c:	fa04 f303 	lsl.w	r3, r4, r3
 8005870:	fa22 f20c 	lsr.w	r2, r2, ip
 8005874:	ea4e 0107 	orr.w	r1, lr, r7
 8005878:	431a      	orrs	r2, r3
 800587a:	4610      	mov	r0, r2
 800587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587e:	42ae      	cmp	r6, r5
 8005880:	bf36      	itet	cc
 8005882:	f1a2 0508 	subcc.w	r5, r2, #8
 8005886:	2200      	movcs	r2, #0
 8005888:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800588c:	3b0b      	subs	r3, #11
 800588e:	d012      	beq.n	80058b6 <__b2d+0x86>
 8005890:	f1c3 0720 	rsb	r7, r3, #32
 8005894:	fa22 f107 	lsr.w	r1, r2, r7
 8005898:	409c      	lsls	r4, r3
 800589a:	430c      	orrs	r4, r1
 800589c:	42b5      	cmp	r5, r6
 800589e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80058a2:	bf94      	ite	ls
 80058a4:	2400      	movls	r4, #0
 80058a6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80058aa:	409a      	lsls	r2, r3
 80058ac:	40fc      	lsrs	r4, r7
 80058ae:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80058b2:	4322      	orrs	r2, r4
 80058b4:	e7e1      	b.n	800587a <__b2d+0x4a>
 80058b6:	ea44 0107 	orr.w	r1, r4, r7
 80058ba:	e7de      	b.n	800587a <__b2d+0x4a>
 80058bc:	3ff00000 	.word	0x3ff00000

080058c0 <__d2b>:
 80058c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80058c4:	2101      	movs	r1, #1
 80058c6:	4690      	mov	r8, r2
 80058c8:	4699      	mov	r9, r3
 80058ca:	9e08      	ldr	r6, [sp, #32]
 80058cc:	f7ff fc1e 	bl	800510c <_Balloc>
 80058d0:	4604      	mov	r4, r0
 80058d2:	b930      	cbnz	r0, 80058e2 <__d2b+0x22>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f240 310f 	movw	r1, #783	@ 0x30f
 80058da:	4b23      	ldr	r3, [pc, #140]	@ (8005968 <__d2b+0xa8>)
 80058dc:	4823      	ldr	r0, [pc, #140]	@ (800596c <__d2b+0xac>)
 80058de:	f001 f989 	bl	8006bf4 <__assert_func>
 80058e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058ea:	b10d      	cbz	r5, 80058f0 <__d2b+0x30>
 80058ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	f1b8 0300 	subs.w	r3, r8, #0
 80058f6:	d024      	beq.n	8005942 <__d2b+0x82>
 80058f8:	4668      	mov	r0, sp
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	f7ff fd17 	bl	800532e <__lo0bits>
 8005900:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005904:	b1d8      	cbz	r0, 800593e <__d2b+0x7e>
 8005906:	f1c0 0320 	rsb	r3, r0, #32
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	430b      	orrs	r3, r1
 8005910:	40c2      	lsrs	r2, r0
 8005912:	6163      	str	r3, [r4, #20]
 8005914:	9201      	str	r2, [sp, #4]
 8005916:	9b01      	ldr	r3, [sp, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf0c      	ite	eq
 800591c:	2201      	moveq	r2, #1
 800591e:	2202      	movne	r2, #2
 8005920:	61a3      	str	r3, [r4, #24]
 8005922:	6122      	str	r2, [r4, #16]
 8005924:	b1ad      	cbz	r5, 8005952 <__d2b+0x92>
 8005926:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800592a:	4405      	add	r5, r0
 800592c:	6035      	str	r5, [r6, #0]
 800592e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005934:	6018      	str	r0, [r3, #0]
 8005936:	4620      	mov	r0, r4
 8005938:	b002      	add	sp, #8
 800593a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800593e:	6161      	str	r1, [r4, #20]
 8005940:	e7e9      	b.n	8005916 <__d2b+0x56>
 8005942:	a801      	add	r0, sp, #4
 8005944:	f7ff fcf3 	bl	800532e <__lo0bits>
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	6163      	str	r3, [r4, #20]
 800594e:	3020      	adds	r0, #32
 8005950:	e7e7      	b.n	8005922 <__d2b+0x62>
 8005952:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005956:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800595a:	6030      	str	r0, [r6, #0]
 800595c:	6918      	ldr	r0, [r3, #16]
 800595e:	f7ff fcc7 	bl	80052f0 <__hi0bits>
 8005962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005966:	e7e4      	b.n	8005932 <__d2b+0x72>
 8005968:	08007a0b 	.word	0x08007a0b
 800596c:	08007a1c 	.word	0x08007a1c

08005970 <__ratio>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	b085      	sub	sp, #20
 8005976:	e9cd 1000 	strd	r1, r0, [sp]
 800597a:	a902      	add	r1, sp, #8
 800597c:	f7ff ff58 	bl	8005830 <__b2d>
 8005980:	468b      	mov	fp, r1
 8005982:	4606      	mov	r6, r0
 8005984:	460f      	mov	r7, r1
 8005986:	9800      	ldr	r0, [sp, #0]
 8005988:	a903      	add	r1, sp, #12
 800598a:	f7ff ff51 	bl	8005830 <__b2d>
 800598e:	460d      	mov	r5, r1
 8005990:	9b01      	ldr	r3, [sp, #4]
 8005992:	4689      	mov	r9, r1
 8005994:	6919      	ldr	r1, [r3, #16]
 8005996:	9b00      	ldr	r3, [sp, #0]
 8005998:	4604      	mov	r4, r0
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	4630      	mov	r0, r6
 800599e:	1ac9      	subs	r1, r1, r3
 80059a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bfcd      	iteet	gt
 80059ae:	463a      	movgt	r2, r7
 80059b0:	462a      	movle	r2, r5
 80059b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80059b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80059ba:	bfd8      	it	le
 80059bc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80059c0:	464b      	mov	r3, r9
 80059c2:	4622      	mov	r2, r4
 80059c4:	4659      	mov	r1, fp
 80059c6:	f7fa ff65 	bl	8000894 <__aeabi_ddiv>
 80059ca:	b005      	add	sp, #20
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059d0 <__copybits>:
 80059d0:	3901      	subs	r1, #1
 80059d2:	b570      	push	{r4, r5, r6, lr}
 80059d4:	1149      	asrs	r1, r1, #5
 80059d6:	6914      	ldr	r4, [r2, #16]
 80059d8:	3101      	adds	r1, #1
 80059da:	f102 0314 	add.w	r3, r2, #20
 80059de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80059e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80059e6:	1f05      	subs	r5, r0, #4
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	d30c      	bcc.n	8005a06 <__copybits+0x36>
 80059ec:	1aa3      	subs	r3, r4, r2
 80059ee:	3b11      	subs	r3, #17
 80059f0:	f023 0303 	bic.w	r3, r3, #3
 80059f4:	3211      	adds	r2, #17
 80059f6:	42a2      	cmp	r2, r4
 80059f8:	bf88      	it	hi
 80059fa:	2300      	movhi	r3, #0
 80059fc:	4418      	add	r0, r3
 80059fe:	2300      	movs	r3, #0
 8005a00:	4288      	cmp	r0, r1
 8005a02:	d305      	bcc.n	8005a10 <__copybits+0x40>
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	f853 6b04 	ldr.w	r6, [r3], #4
 8005a0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8005a0e:	e7eb      	b.n	80059e8 <__copybits+0x18>
 8005a10:	f840 3b04 	str.w	r3, [r0], #4
 8005a14:	e7f4      	b.n	8005a00 <__copybits+0x30>

08005a16 <__any_on>:
 8005a16:	f100 0214 	add.w	r2, r0, #20
 8005a1a:	6900      	ldr	r0, [r0, #16]
 8005a1c:	114b      	asrs	r3, r1, #5
 8005a1e:	4298      	cmp	r0, r3
 8005a20:	b510      	push	{r4, lr}
 8005a22:	db11      	blt.n	8005a48 <__any_on+0x32>
 8005a24:	dd0a      	ble.n	8005a3c <__any_on+0x26>
 8005a26:	f011 011f 	ands.w	r1, r1, #31
 8005a2a:	d007      	beq.n	8005a3c <__any_on+0x26>
 8005a2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005a30:	fa24 f001 	lsr.w	r0, r4, r1
 8005a34:	fa00 f101 	lsl.w	r1, r0, r1
 8005a38:	428c      	cmp	r4, r1
 8005a3a:	d10b      	bne.n	8005a54 <__any_on+0x3e>
 8005a3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d803      	bhi.n	8005a4c <__any_on+0x36>
 8005a44:	2000      	movs	r0, #0
 8005a46:	bd10      	pop	{r4, pc}
 8005a48:	4603      	mov	r3, r0
 8005a4a:	e7f7      	b.n	8005a3c <__any_on+0x26>
 8005a4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a50:	2900      	cmp	r1, #0
 8005a52:	d0f5      	beq.n	8005a40 <__any_on+0x2a>
 8005a54:	2001      	movs	r0, #1
 8005a56:	e7f6      	b.n	8005a46 <__any_on+0x30>

08005a58 <sulp>:
 8005a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	4690      	mov	r8, r2
 8005a60:	f7ff fec6 	bl	80057f0 <__ulp>
 8005a64:	4604      	mov	r4, r0
 8005a66:	460d      	mov	r5, r1
 8005a68:	f1b8 0f00 	cmp.w	r8, #0
 8005a6c:	d011      	beq.n	8005a92 <sulp+0x3a>
 8005a6e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	dd0b      	ble.n	8005a92 <sulp+0x3a>
 8005a7a:	2400      	movs	r4, #0
 8005a7c:	051b      	lsls	r3, r3, #20
 8005a7e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a86:	4622      	mov	r2, r4
 8005a88:	462b      	mov	r3, r5
 8005a8a:	f7fa fdd9 	bl	8000640 <__aeabi_dmul>
 8005a8e:	4604      	mov	r4, r0
 8005a90:	460d      	mov	r5, r1
 8005a92:	4620      	mov	r0, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9a:	0000      	movs	r0, r0
 8005a9c:	0000      	movs	r0, r0
	...

08005aa0 <_strtod_l>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	b09f      	sub	sp, #124	@ 0x7c
 8005aa6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	921a      	str	r2, [sp, #104]	@ 0x68
 8005aae:	f04f 0a00 	mov.w	sl, #0
 8005ab2:	f04f 0b00 	mov.w	fp, #0
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	9005      	str	r0, [sp, #20]
 8005aba:	9219      	str	r2, [sp, #100]	@ 0x64
 8005abc:	7811      	ldrb	r1, [r2, #0]
 8005abe:	292b      	cmp	r1, #43	@ 0x2b
 8005ac0:	d048      	beq.n	8005b54 <_strtod_l+0xb4>
 8005ac2:	d836      	bhi.n	8005b32 <_strtod_l+0x92>
 8005ac4:	290d      	cmp	r1, #13
 8005ac6:	d830      	bhi.n	8005b2a <_strtod_l+0x8a>
 8005ac8:	2908      	cmp	r1, #8
 8005aca:	d830      	bhi.n	8005b2e <_strtod_l+0x8e>
 8005acc:	2900      	cmp	r1, #0
 8005ace:	d039      	beq.n	8005b44 <_strtod_l+0xa4>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005ad4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005ad6:	782a      	ldrb	r2, [r5, #0]
 8005ad8:	2a30      	cmp	r2, #48	@ 0x30
 8005ada:	f040 80b1 	bne.w	8005c40 <_strtod_l+0x1a0>
 8005ade:	786a      	ldrb	r2, [r5, #1]
 8005ae0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ae4:	2a58      	cmp	r2, #88	@ 0x58
 8005ae6:	d16c      	bne.n	8005bc2 <_strtod_l+0x122>
 8005ae8:	9302      	str	r3, [sp, #8]
 8005aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005aec:	4a8e      	ldr	r2, [pc, #568]	@ (8005d28 <_strtod_l+0x288>)
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	ab1a      	add	r3, sp, #104	@ 0x68
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	9805      	ldr	r0, [sp, #20]
 8005af6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005af8:	a919      	add	r1, sp, #100	@ 0x64
 8005afa:	f001 f915 	bl	8006d28 <__gethex>
 8005afe:	f010 060f 	ands.w	r6, r0, #15
 8005b02:	4604      	mov	r4, r0
 8005b04:	d005      	beq.n	8005b12 <_strtod_l+0x72>
 8005b06:	2e06      	cmp	r6, #6
 8005b08:	d126      	bne.n	8005b58 <_strtod_l+0xb8>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	3501      	adds	r5, #1
 8005b0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f040 8584 	bne.w	8006622 <_strtod_l+0xb82>
 8005b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b1c:	b1bb      	cbz	r3, 8005b4e <_strtod_l+0xae>
 8005b1e:	4650      	mov	r0, sl
 8005b20:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005b24:	b01f      	add	sp, #124	@ 0x7c
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	2920      	cmp	r1, #32
 8005b2c:	d1d0      	bne.n	8005ad0 <_strtod_l+0x30>
 8005b2e:	3201      	adds	r2, #1
 8005b30:	e7c3      	b.n	8005aba <_strtod_l+0x1a>
 8005b32:	292d      	cmp	r1, #45	@ 0x2d
 8005b34:	d1cc      	bne.n	8005ad0 <_strtod_l+0x30>
 8005b36:	2101      	movs	r1, #1
 8005b38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005b3a:	1c51      	adds	r1, r2, #1
 8005b3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005b3e:	7852      	ldrb	r2, [r2, #1]
 8005b40:	2a00      	cmp	r2, #0
 8005b42:	d1c7      	bne.n	8005ad4 <_strtod_l+0x34>
 8005b44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b46:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f040 8568 	bne.w	800661e <_strtod_l+0xb7e>
 8005b4e:	4650      	mov	r0, sl
 8005b50:	4659      	mov	r1, fp
 8005b52:	e7e7      	b.n	8005b24 <_strtod_l+0x84>
 8005b54:	2100      	movs	r1, #0
 8005b56:	e7ef      	b.n	8005b38 <_strtod_l+0x98>
 8005b58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005b5a:	b13a      	cbz	r2, 8005b6c <_strtod_l+0xcc>
 8005b5c:	2135      	movs	r1, #53	@ 0x35
 8005b5e:	a81c      	add	r0, sp, #112	@ 0x70
 8005b60:	f7ff ff36 	bl	80059d0 <__copybits>
 8005b64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b66:	9805      	ldr	r0, [sp, #20]
 8005b68:	f7ff fb10 	bl	800518c <_Bfree>
 8005b6c:	3e01      	subs	r6, #1
 8005b6e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005b70:	2e04      	cmp	r6, #4
 8005b72:	d806      	bhi.n	8005b82 <_strtod_l+0xe2>
 8005b74:	e8df f006 	tbb	[pc, r6]
 8005b78:	201d0314 	.word	0x201d0314
 8005b7c:	14          	.byte	0x14
 8005b7d:	00          	.byte	0x00
 8005b7e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005b82:	05e1      	lsls	r1, r4, #23
 8005b84:	bf48      	it	mi
 8005b86:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005b8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b8e:	0d1b      	lsrs	r3, r3, #20
 8005b90:	051b      	lsls	r3, r3, #20
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1bd      	bne.n	8005b12 <_strtod_l+0x72>
 8005b96:	f7fe fb2b 	bl	80041f0 <__errno>
 8005b9a:	2322      	movs	r3, #34	@ 0x22
 8005b9c:	6003      	str	r3, [r0, #0]
 8005b9e:	e7b8      	b.n	8005b12 <_strtod_l+0x72>
 8005ba0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005ba4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005ba8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005bac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005bb0:	e7e7      	b.n	8005b82 <_strtod_l+0xe2>
 8005bb2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005d2c <_strtod_l+0x28c>
 8005bb6:	e7e4      	b.n	8005b82 <_strtod_l+0xe2>
 8005bb8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005bbc:	f04f 3aff 	mov.w	sl, #4294967295
 8005bc0:	e7df      	b.n	8005b82 <_strtod_l+0xe2>
 8005bc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	2b30      	cmp	r3, #48	@ 0x30
 8005bcc:	d0f9      	beq.n	8005bc2 <_strtod_l+0x122>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d09f      	beq.n	8005b12 <_strtod_l+0x72>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bd8:	220a      	movs	r2, #10
 8005bda:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bdc:	2300      	movs	r3, #0
 8005bde:	461f      	mov	r7, r3
 8005be0:	9308      	str	r3, [sp, #32]
 8005be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005be4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005be6:	7805      	ldrb	r5, [r0, #0]
 8005be8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005bec:	b2d9      	uxtb	r1, r3
 8005bee:	2909      	cmp	r1, #9
 8005bf0:	d928      	bls.n	8005c44 <_strtod_l+0x1a4>
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	494e      	ldr	r1, [pc, #312]	@ (8005d30 <_strtod_l+0x290>)
 8005bf6:	f000 ffc7 	bl	8006b88 <strncmp>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d032      	beq.n	8005c64 <_strtod_l+0x1c4>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	462a      	mov	r2, r5
 8005c02:	4681      	mov	r9, r0
 8005c04:	463d      	mov	r5, r7
 8005c06:	4603      	mov	r3, r0
 8005c08:	2a65      	cmp	r2, #101	@ 0x65
 8005c0a:	d001      	beq.n	8005c10 <_strtod_l+0x170>
 8005c0c:	2a45      	cmp	r2, #69	@ 0x45
 8005c0e:	d114      	bne.n	8005c3a <_strtod_l+0x19a>
 8005c10:	b91d      	cbnz	r5, 8005c1a <_strtod_l+0x17a>
 8005c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c14:	4302      	orrs	r2, r0
 8005c16:	d095      	beq.n	8005b44 <_strtod_l+0xa4>
 8005c18:	2500      	movs	r5, #0
 8005c1a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005c1c:	1c62      	adds	r2, r4, #1
 8005c1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c20:	7862      	ldrb	r2, [r4, #1]
 8005c22:	2a2b      	cmp	r2, #43	@ 0x2b
 8005c24:	d077      	beq.n	8005d16 <_strtod_l+0x276>
 8005c26:	2a2d      	cmp	r2, #45	@ 0x2d
 8005c28:	d07b      	beq.n	8005d22 <_strtod_l+0x282>
 8005c2a:	f04f 0c00 	mov.w	ip, #0
 8005c2e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005c32:	2909      	cmp	r1, #9
 8005c34:	f240 8082 	bls.w	8005d3c <_strtod_l+0x29c>
 8005c38:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c3a:	f04f 0800 	mov.w	r8, #0
 8005c3e:	e0a2      	b.n	8005d86 <_strtod_l+0x2e6>
 8005c40:	2300      	movs	r3, #0
 8005c42:	e7c7      	b.n	8005bd4 <_strtod_l+0x134>
 8005c44:	2f08      	cmp	r7, #8
 8005c46:	bfd5      	itete	le
 8005c48:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005c4a:	9908      	ldrgt	r1, [sp, #32]
 8005c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c50:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005c54:	f100 0001 	add.w	r0, r0, #1
 8005c58:	bfd4      	ite	le
 8005c5a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005c5c:	9308      	strgt	r3, [sp, #32]
 8005c5e:	3701      	adds	r7, #1
 8005c60:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c62:	e7bf      	b.n	8005be4 <_strtod_l+0x144>
 8005c64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c6a:	785a      	ldrb	r2, [r3, #1]
 8005c6c:	b37f      	cbz	r7, 8005cce <_strtod_l+0x22e>
 8005c6e:	4681      	mov	r9, r0
 8005c70:	463d      	mov	r5, r7
 8005c72:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005c76:	2b09      	cmp	r3, #9
 8005c78:	d912      	bls.n	8005ca0 <_strtod_l+0x200>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e7c4      	b.n	8005c08 <_strtod_l+0x168>
 8005c7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c80:	3001      	adds	r0, #1
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c86:	785a      	ldrb	r2, [r3, #1]
 8005c88:	2a30      	cmp	r2, #48	@ 0x30
 8005c8a:	d0f8      	beq.n	8005c7e <_strtod_l+0x1de>
 8005c8c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	f200 84cb 	bhi.w	800662c <_strtod_l+0xb8c>
 8005c96:	4681      	mov	r9, r0
 8005c98:	2000      	movs	r0, #0
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ca0:	3a30      	subs	r2, #48	@ 0x30
 8005ca2:	f100 0301 	add.w	r3, r0, #1
 8005ca6:	d02a      	beq.n	8005cfe <_strtod_l+0x25e>
 8005ca8:	4499      	add	r9, r3
 8005caa:	210a      	movs	r1, #10
 8005cac:	462b      	mov	r3, r5
 8005cae:	eb00 0c05 	add.w	ip, r0, r5
 8005cb2:	4563      	cmp	r3, ip
 8005cb4:	d10d      	bne.n	8005cd2 <_strtod_l+0x232>
 8005cb6:	1c69      	adds	r1, r5, #1
 8005cb8:	4401      	add	r1, r0
 8005cba:	4428      	add	r0, r5
 8005cbc:	2808      	cmp	r0, #8
 8005cbe:	dc16      	bgt.n	8005cee <_strtod_l+0x24e>
 8005cc0:	230a      	movs	r3, #10
 8005cc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005cc4:	fb03 2300 	mla	r3, r3, r0, r2
 8005cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e018      	b.n	8005d00 <_strtod_l+0x260>
 8005cce:	4638      	mov	r0, r7
 8005cd0:	e7da      	b.n	8005c88 <_strtod_l+0x1e8>
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	f103 0301 	add.w	r3, r3, #1
 8005cd8:	dc03      	bgt.n	8005ce2 <_strtod_l+0x242>
 8005cda:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005cdc:	434e      	muls	r6, r1
 8005cde:	960a      	str	r6, [sp, #40]	@ 0x28
 8005ce0:	e7e7      	b.n	8005cb2 <_strtod_l+0x212>
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	bfde      	ittt	le
 8005ce6:	9e08      	ldrle	r6, [sp, #32]
 8005ce8:	434e      	mulle	r6, r1
 8005cea:	9608      	strle	r6, [sp, #32]
 8005cec:	e7e1      	b.n	8005cb2 <_strtod_l+0x212>
 8005cee:	280f      	cmp	r0, #15
 8005cf0:	dceb      	bgt.n	8005cca <_strtod_l+0x22a>
 8005cf2:	230a      	movs	r3, #10
 8005cf4:	9808      	ldr	r0, [sp, #32]
 8005cf6:	fb03 2300 	mla	r3, r3, r0, r2
 8005cfa:	9308      	str	r3, [sp, #32]
 8005cfc:	e7e5      	b.n	8005cca <_strtod_l+0x22a>
 8005cfe:	4629      	mov	r1, r5
 8005d00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d02:	460d      	mov	r5, r1
 8005d04:	1c50      	adds	r0, r2, #1
 8005d06:	9019      	str	r0, [sp, #100]	@ 0x64
 8005d08:	7852      	ldrb	r2, [r2, #1]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	e7b1      	b.n	8005c72 <_strtod_l+0x1d2>
 8005d0e:	f04f 0900 	mov.w	r9, #0
 8005d12:	2301      	movs	r3, #1
 8005d14:	e77d      	b.n	8005c12 <_strtod_l+0x172>
 8005d16:	f04f 0c00 	mov.w	ip, #0
 8005d1a:	1ca2      	adds	r2, r4, #2
 8005d1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d1e:	78a2      	ldrb	r2, [r4, #2]
 8005d20:	e785      	b.n	8005c2e <_strtod_l+0x18e>
 8005d22:	f04f 0c01 	mov.w	ip, #1
 8005d26:	e7f8      	b.n	8005d1a <_strtod_l+0x27a>
 8005d28:	08007b90 	.word	0x08007b90
 8005d2c:	7ff00000 	.word	0x7ff00000
 8005d30:	08007b78 	.word	0x08007b78
 8005d34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d36:	1c51      	adds	r1, r2, #1
 8005d38:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d3a:	7852      	ldrb	r2, [r2, #1]
 8005d3c:	2a30      	cmp	r2, #48	@ 0x30
 8005d3e:	d0f9      	beq.n	8005d34 <_strtod_l+0x294>
 8005d40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005d44:	2908      	cmp	r1, #8
 8005d46:	f63f af78 	bhi.w	8005c3a <_strtod_l+0x19a>
 8005d4a:	f04f 080a 	mov.w	r8, #10
 8005d4e:	3a30      	subs	r2, #48	@ 0x30
 8005d50:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005d56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d58:	1c56      	adds	r6, r2, #1
 8005d5a:	9619      	str	r6, [sp, #100]	@ 0x64
 8005d5c:	7852      	ldrb	r2, [r2, #1]
 8005d5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005d62:	f1be 0f09 	cmp.w	lr, #9
 8005d66:	d939      	bls.n	8005ddc <_strtod_l+0x33c>
 8005d68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005d6e:	1a76      	subs	r6, r6, r1
 8005d70:	2e08      	cmp	r6, #8
 8005d72:	dc03      	bgt.n	8005d7c <_strtod_l+0x2dc>
 8005d74:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d76:	4588      	cmp	r8, r1
 8005d78:	bfa8      	it	ge
 8005d7a:	4688      	movge	r8, r1
 8005d7c:	f1bc 0f00 	cmp.w	ip, #0
 8005d80:	d001      	beq.n	8005d86 <_strtod_l+0x2e6>
 8005d82:	f1c8 0800 	rsb	r8, r8, #0
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	d14e      	bne.n	8005e28 <_strtod_l+0x388>
 8005d8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d8c:	4308      	orrs	r0, r1
 8005d8e:	f47f aec0 	bne.w	8005b12 <_strtod_l+0x72>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f47f aed6 	bne.w	8005b44 <_strtod_l+0xa4>
 8005d98:	2a69      	cmp	r2, #105	@ 0x69
 8005d9a:	d028      	beq.n	8005dee <_strtod_l+0x34e>
 8005d9c:	dc25      	bgt.n	8005dea <_strtod_l+0x34a>
 8005d9e:	2a49      	cmp	r2, #73	@ 0x49
 8005da0:	d025      	beq.n	8005dee <_strtod_l+0x34e>
 8005da2:	2a4e      	cmp	r2, #78	@ 0x4e
 8005da4:	f47f aece 	bne.w	8005b44 <_strtod_l+0xa4>
 8005da8:	499a      	ldr	r1, [pc, #616]	@ (8006014 <_strtod_l+0x574>)
 8005daa:	a819      	add	r0, sp, #100	@ 0x64
 8005dac:	f001 f9de 	bl	800716c <__match>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f43f aec7 	beq.w	8005b44 <_strtod_l+0xa4>
 8005db6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b28      	cmp	r3, #40	@ 0x28
 8005dbc:	d12e      	bne.n	8005e1c <_strtod_l+0x37c>
 8005dbe:	4996      	ldr	r1, [pc, #600]	@ (8006018 <_strtod_l+0x578>)
 8005dc0:	aa1c      	add	r2, sp, #112	@ 0x70
 8005dc2:	a819      	add	r0, sp, #100	@ 0x64
 8005dc4:	f001 f9e6 	bl	8007194 <__hexnan>
 8005dc8:	2805      	cmp	r0, #5
 8005dca:	d127      	bne.n	8005e1c <_strtod_l+0x37c>
 8005dcc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005dce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005dd2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005dd6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005dda:	e69a      	b.n	8005b12 <_strtod_l+0x72>
 8005ddc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005dde:	fb08 2101 	mla	r1, r8, r1, r2
 8005de2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005de6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005de8:	e7b5      	b.n	8005d56 <_strtod_l+0x2b6>
 8005dea:	2a6e      	cmp	r2, #110	@ 0x6e
 8005dec:	e7da      	b.n	8005da4 <_strtod_l+0x304>
 8005dee:	498b      	ldr	r1, [pc, #556]	@ (800601c <_strtod_l+0x57c>)
 8005df0:	a819      	add	r0, sp, #100	@ 0x64
 8005df2:	f001 f9bb 	bl	800716c <__match>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	f43f aea4 	beq.w	8005b44 <_strtod_l+0xa4>
 8005dfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dfe:	4988      	ldr	r1, [pc, #544]	@ (8006020 <_strtod_l+0x580>)
 8005e00:	3b01      	subs	r3, #1
 8005e02:	a819      	add	r0, sp, #100	@ 0x64
 8005e04:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e06:	f001 f9b1 	bl	800716c <__match>
 8005e0a:	b910      	cbnz	r0, 8005e12 <_strtod_l+0x372>
 8005e0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e0e:	3301      	adds	r3, #1
 8005e10:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e12:	f04f 0a00 	mov.w	sl, #0
 8005e16:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006024 <_strtod_l+0x584>
 8005e1a:	e67a      	b.n	8005b12 <_strtod_l+0x72>
 8005e1c:	4882      	ldr	r0, [pc, #520]	@ (8006028 <_strtod_l+0x588>)
 8005e1e:	f000 fee3 	bl	8006be8 <nan>
 8005e22:	4682      	mov	sl, r0
 8005e24:	468b      	mov	fp, r1
 8005e26:	e674      	b.n	8005b12 <_strtod_l+0x72>
 8005e28:	eba8 0309 	sub.w	r3, r8, r9
 8005e2c:	2f00      	cmp	r7, #0
 8005e2e:	bf08      	it	eq
 8005e30:	462f      	moveq	r7, r5
 8005e32:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e34:	2d10      	cmp	r5, #16
 8005e36:	462c      	mov	r4, r5
 8005e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e3a:	bfa8      	it	ge
 8005e3c:	2410      	movge	r4, #16
 8005e3e:	f7fa fb85 	bl	800054c <__aeabi_ui2d>
 8005e42:	2d09      	cmp	r5, #9
 8005e44:	4682      	mov	sl, r0
 8005e46:	468b      	mov	fp, r1
 8005e48:	dc11      	bgt.n	8005e6e <_strtod_l+0x3ce>
 8005e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f43f ae60 	beq.w	8005b12 <_strtod_l+0x72>
 8005e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e54:	dd76      	ble.n	8005f44 <_strtod_l+0x4a4>
 8005e56:	2b16      	cmp	r3, #22
 8005e58:	dc5d      	bgt.n	8005f16 <_strtod_l+0x476>
 8005e5a:	4974      	ldr	r1, [pc, #464]	@ (800602c <_strtod_l+0x58c>)
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e62:	465b      	mov	r3, fp
 8005e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e68:	f7fa fbea 	bl	8000640 <__aeabi_dmul>
 8005e6c:	e7d9      	b.n	8005e22 <_strtod_l+0x382>
 8005e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800602c <_strtod_l+0x58c>)
 8005e70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005e78:	f7fa fbe2 	bl	8000640 <__aeabi_dmul>
 8005e7c:	4682      	mov	sl, r0
 8005e7e:	9808      	ldr	r0, [sp, #32]
 8005e80:	468b      	mov	fp, r1
 8005e82:	f7fa fb63 	bl	800054c <__aeabi_ui2d>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	f7fa fa21 	bl	80002d4 <__adddf3>
 8005e92:	2d0f      	cmp	r5, #15
 8005e94:	4682      	mov	sl, r0
 8005e96:	468b      	mov	fp, r1
 8005e98:	ddd7      	ble.n	8005e4a <_strtod_l+0x3aa>
 8005e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9c:	1b2c      	subs	r4, r5, r4
 8005e9e:	441c      	add	r4, r3
 8005ea0:	2c00      	cmp	r4, #0
 8005ea2:	f340 8096 	ble.w	8005fd2 <_strtod_l+0x532>
 8005ea6:	f014 030f 	ands.w	r3, r4, #15
 8005eaa:	d00a      	beq.n	8005ec2 <_strtod_l+0x422>
 8005eac:	495f      	ldr	r1, [pc, #380]	@ (800602c <_strtod_l+0x58c>)
 8005eae:	4652      	mov	r2, sl
 8005eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eb8:	465b      	mov	r3, fp
 8005eba:	f7fa fbc1 	bl	8000640 <__aeabi_dmul>
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	468b      	mov	fp, r1
 8005ec2:	f034 040f 	bics.w	r4, r4, #15
 8005ec6:	d073      	beq.n	8005fb0 <_strtod_l+0x510>
 8005ec8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005ecc:	dd48      	ble.n	8005f60 <_strtod_l+0x4c0>
 8005ece:	2400      	movs	r4, #0
 8005ed0:	46a0      	mov	r8, r4
 8005ed2:	46a1      	mov	r9, r4
 8005ed4:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ed6:	2322      	movs	r3, #34	@ 0x22
 8005ed8:	f04f 0a00 	mov.w	sl, #0
 8005edc:	9a05      	ldr	r2, [sp, #20]
 8005ede:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006024 <_strtod_l+0x584>
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f43f ae13 	beq.w	8005b12 <_strtod_l+0x72>
 8005eec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005eee:	9805      	ldr	r0, [sp, #20]
 8005ef0:	f7ff f94c 	bl	800518c <_Bfree>
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	9805      	ldr	r0, [sp, #20]
 8005ef8:	f7ff f948 	bl	800518c <_Bfree>
 8005efc:	4641      	mov	r1, r8
 8005efe:	9805      	ldr	r0, [sp, #20]
 8005f00:	f7ff f944 	bl	800518c <_Bfree>
 8005f04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f06:	9805      	ldr	r0, [sp, #20]
 8005f08:	f7ff f940 	bl	800518c <_Bfree>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	9805      	ldr	r0, [sp, #20]
 8005f10:	f7ff f93c 	bl	800518c <_Bfree>
 8005f14:	e5fd      	b.n	8005b12 <_strtod_l+0x72>
 8005f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	dbbc      	blt.n	8005e9a <_strtod_l+0x3fa>
 8005f20:	4c42      	ldr	r4, [pc, #264]	@ (800602c <_strtod_l+0x58c>)
 8005f22:	f1c5 050f 	rsb	r5, r5, #15
 8005f26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005f2a:	4652      	mov	r2, sl
 8005f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f30:	465b      	mov	r3, fp
 8005f32:	f7fa fb85 	bl	8000640 <__aeabi_dmul>
 8005f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f38:	1b5d      	subs	r5, r3, r5
 8005f3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f42:	e791      	b.n	8005e68 <_strtod_l+0x3c8>
 8005f44:	3316      	adds	r3, #22
 8005f46:	dba8      	blt.n	8005e9a <_strtod_l+0x3fa>
 8005f48:	4b38      	ldr	r3, [pc, #224]	@ (800602c <_strtod_l+0x58c>)
 8005f4a:	eba9 0808 	sub.w	r8, r9, r8
 8005f4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005f52:	4650      	mov	r0, sl
 8005f54:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005f58:	4659      	mov	r1, fp
 8005f5a:	f7fa fc9b 	bl	8000894 <__aeabi_ddiv>
 8005f5e:	e760      	b.n	8005e22 <_strtod_l+0x382>
 8005f60:	4b33      	ldr	r3, [pc, #204]	@ (8006030 <_strtod_l+0x590>)
 8005f62:	4650      	mov	r0, sl
 8005f64:	9308      	str	r3, [sp, #32]
 8005f66:	2300      	movs	r3, #0
 8005f68:	4659      	mov	r1, fp
 8005f6a:	461e      	mov	r6, r3
 8005f6c:	1124      	asrs	r4, r4, #4
 8005f6e:	2c01      	cmp	r4, #1
 8005f70:	dc21      	bgt.n	8005fb6 <_strtod_l+0x516>
 8005f72:	b10b      	cbz	r3, 8005f78 <_strtod_l+0x4d8>
 8005f74:	4682      	mov	sl, r0
 8005f76:	468b      	mov	fp, r1
 8005f78:	492d      	ldr	r1, [pc, #180]	@ (8006030 <_strtod_l+0x590>)
 8005f7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005f7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f82:	4652      	mov	r2, sl
 8005f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f88:	465b      	mov	r3, fp
 8005f8a:	f7fa fb59 	bl	8000640 <__aeabi_dmul>
 8005f8e:	4b25      	ldr	r3, [pc, #148]	@ (8006024 <_strtod_l+0x584>)
 8005f90:	460a      	mov	r2, r1
 8005f92:	400b      	ands	r3, r1
 8005f94:	4927      	ldr	r1, [pc, #156]	@ (8006034 <_strtod_l+0x594>)
 8005f96:	4682      	mov	sl, r0
 8005f98:	428b      	cmp	r3, r1
 8005f9a:	d898      	bhi.n	8005ece <_strtod_l+0x42e>
 8005f9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf86      	itte	hi
 8005fa4:	f04f 3aff 	movhi.w	sl, #4294967295
 8005fa8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006038 <_strtod_l+0x598>
 8005fac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9308      	str	r3, [sp, #32]
 8005fb4:	e07a      	b.n	80060ac <_strtod_l+0x60c>
 8005fb6:	07e2      	lsls	r2, r4, #31
 8005fb8:	d505      	bpl.n	8005fc6 <_strtod_l+0x526>
 8005fba:	9b08      	ldr	r3, [sp, #32]
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa fb3e 	bl	8000640 <__aeabi_dmul>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	9a08      	ldr	r2, [sp, #32]
 8005fc8:	3601      	adds	r6, #1
 8005fca:	3208      	adds	r2, #8
 8005fcc:	1064      	asrs	r4, r4, #1
 8005fce:	9208      	str	r2, [sp, #32]
 8005fd0:	e7cd      	b.n	8005f6e <_strtod_l+0x4ce>
 8005fd2:	d0ed      	beq.n	8005fb0 <_strtod_l+0x510>
 8005fd4:	4264      	negs	r4, r4
 8005fd6:	f014 020f 	ands.w	r2, r4, #15
 8005fda:	d00a      	beq.n	8005ff2 <_strtod_l+0x552>
 8005fdc:	4b13      	ldr	r3, [pc, #76]	@ (800602c <_strtod_l+0x58c>)
 8005fde:	4650      	mov	r0, sl
 8005fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f7fa fc53 	bl	8000894 <__aeabi_ddiv>
 8005fee:	4682      	mov	sl, r0
 8005ff0:	468b      	mov	fp, r1
 8005ff2:	1124      	asrs	r4, r4, #4
 8005ff4:	d0dc      	beq.n	8005fb0 <_strtod_l+0x510>
 8005ff6:	2c1f      	cmp	r4, #31
 8005ff8:	dd20      	ble.n	800603c <_strtod_l+0x59c>
 8005ffa:	2400      	movs	r4, #0
 8005ffc:	46a0      	mov	r8, r4
 8005ffe:	46a1      	mov	r9, r4
 8006000:	940a      	str	r4, [sp, #40]	@ 0x28
 8006002:	2322      	movs	r3, #34	@ 0x22
 8006004:	9a05      	ldr	r2, [sp, #20]
 8006006:	f04f 0a00 	mov.w	sl, #0
 800600a:	f04f 0b00 	mov.w	fp, #0
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	e768      	b.n	8005ee4 <_strtod_l+0x444>
 8006012:	bf00      	nop
 8006014:	08007963 	.word	0x08007963
 8006018:	08007b7c 	.word	0x08007b7c
 800601c:	0800795b 	.word	0x0800795b
 8006020:	08007992 	.word	0x08007992
 8006024:	7ff00000 	.word	0x7ff00000
 8006028:	08007d25 	.word	0x08007d25
 800602c:	08007ab0 	.word	0x08007ab0
 8006030:	08007a88 	.word	0x08007a88
 8006034:	7ca00000 	.word	0x7ca00000
 8006038:	7fefffff 	.word	0x7fefffff
 800603c:	f014 0310 	ands.w	r3, r4, #16
 8006040:	bf18      	it	ne
 8006042:	236a      	movne	r3, #106	@ 0x6a
 8006044:	4650      	mov	r0, sl
 8006046:	9308      	str	r3, [sp, #32]
 8006048:	4659      	mov	r1, fp
 800604a:	2300      	movs	r3, #0
 800604c:	4ea9      	ldr	r6, [pc, #676]	@ (80062f4 <_strtod_l+0x854>)
 800604e:	07e2      	lsls	r2, r4, #31
 8006050:	d504      	bpl.n	800605c <_strtod_l+0x5bc>
 8006052:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006056:	f7fa faf3 	bl	8000640 <__aeabi_dmul>
 800605a:	2301      	movs	r3, #1
 800605c:	1064      	asrs	r4, r4, #1
 800605e:	f106 0608 	add.w	r6, r6, #8
 8006062:	d1f4      	bne.n	800604e <_strtod_l+0x5ae>
 8006064:	b10b      	cbz	r3, 800606a <_strtod_l+0x5ca>
 8006066:	4682      	mov	sl, r0
 8006068:	468b      	mov	fp, r1
 800606a:	9b08      	ldr	r3, [sp, #32]
 800606c:	b1b3      	cbz	r3, 800609c <_strtod_l+0x5fc>
 800606e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006072:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006076:	2b00      	cmp	r3, #0
 8006078:	4659      	mov	r1, fp
 800607a:	dd0f      	ble.n	800609c <_strtod_l+0x5fc>
 800607c:	2b1f      	cmp	r3, #31
 800607e:	dd57      	ble.n	8006130 <_strtod_l+0x690>
 8006080:	2b34      	cmp	r3, #52	@ 0x34
 8006082:	bfd8      	it	le
 8006084:	f04f 33ff 	movle.w	r3, #4294967295
 8006088:	f04f 0a00 	mov.w	sl, #0
 800608c:	bfcf      	iteee	gt
 800608e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006092:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006096:	4093      	lslle	r3, r2
 8006098:	ea03 0b01 	andle.w	fp, r3, r1
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	4650      	mov	r0, sl
 80060a2:	4659      	mov	r1, fp
 80060a4:	f7fa fd34 	bl	8000b10 <__aeabi_dcmpeq>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d1a6      	bne.n	8005ffa <_strtod_l+0x55a>
 80060ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ae:	463a      	mov	r2, r7
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80060b4:	462b      	mov	r3, r5
 80060b6:	9805      	ldr	r0, [sp, #20]
 80060b8:	f7ff f8d0 	bl	800525c <__s2b>
 80060bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80060be:	2800      	cmp	r0, #0
 80060c0:	f43f af05 	beq.w	8005ece <_strtod_l+0x42e>
 80060c4:	2400      	movs	r4, #0
 80060c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060c8:	eba9 0308 	sub.w	r3, r9, r8
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	bfa8      	it	ge
 80060d0:	2300      	movge	r3, #0
 80060d2:	46a0      	mov	r8, r4
 80060d4:	9312      	str	r3, [sp, #72]	@ 0x48
 80060d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80060da:	9316      	str	r3, [sp, #88]	@ 0x58
 80060dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060de:	9805      	ldr	r0, [sp, #20]
 80060e0:	6859      	ldr	r1, [r3, #4]
 80060e2:	f7ff f813 	bl	800510c <_Balloc>
 80060e6:	4681      	mov	r9, r0
 80060e8:	2800      	cmp	r0, #0
 80060ea:	f43f aef4 	beq.w	8005ed6 <_strtod_l+0x436>
 80060ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f0:	300c      	adds	r0, #12
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	f103 010c 	add.w	r1, r3, #12
 80060f8:	3202      	adds	r2, #2
 80060fa:	0092      	lsls	r2, r2, #2
 80060fc:	f000 fd66 	bl	8006bcc <memcpy>
 8006100:	ab1c      	add	r3, sp, #112	@ 0x70
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	4652      	mov	r2, sl
 800610a:	465b      	mov	r3, fp
 800610c:	9805      	ldr	r0, [sp, #20]
 800610e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006112:	f7ff fbd5 	bl	80058c0 <__d2b>
 8006116:	901a      	str	r0, [sp, #104]	@ 0x68
 8006118:	2800      	cmp	r0, #0
 800611a:	f43f aedc 	beq.w	8005ed6 <_strtod_l+0x436>
 800611e:	2101      	movs	r1, #1
 8006120:	9805      	ldr	r0, [sp, #20]
 8006122:	f7ff f931 	bl	8005388 <__i2b>
 8006126:	4680      	mov	r8, r0
 8006128:	b948      	cbnz	r0, 800613e <_strtod_l+0x69e>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	e6d2      	b.n	8005ed6 <_strtod_l+0x436>
 8006130:	f04f 32ff 	mov.w	r2, #4294967295
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	ea03 0a0a 	and.w	sl, r3, sl
 800613c:	e7ae      	b.n	800609c <_strtod_l+0x5fc>
 800613e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006140:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006142:	2d00      	cmp	r5, #0
 8006144:	bfab      	itete	ge
 8006146:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006148:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800614a:	18ef      	addge	r7, r5, r3
 800614c:	1b5e      	sublt	r6, r3, r5
 800614e:	9b08      	ldr	r3, [sp, #32]
 8006150:	bfa8      	it	ge
 8006152:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006154:	eba5 0503 	sub.w	r5, r5, r3
 8006158:	4415      	add	r5, r2
 800615a:	4b67      	ldr	r3, [pc, #412]	@ (80062f8 <_strtod_l+0x858>)
 800615c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006160:	bfb8      	it	lt
 8006162:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006164:	429d      	cmp	r5, r3
 8006166:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800616a:	da50      	bge.n	800620e <_strtod_l+0x76e>
 800616c:	1b5b      	subs	r3, r3, r5
 800616e:	2b1f      	cmp	r3, #31
 8006170:	f04f 0101 	mov.w	r1, #1
 8006174:	eba2 0203 	sub.w	r2, r2, r3
 8006178:	dc3d      	bgt.n	80061f6 <_strtod_l+0x756>
 800617a:	fa01 f303 	lsl.w	r3, r1, r3
 800617e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006180:	2300      	movs	r3, #0
 8006182:	9310      	str	r3, [sp, #64]	@ 0x40
 8006184:	18bd      	adds	r5, r7, r2
 8006186:	9b08      	ldr	r3, [sp, #32]
 8006188:	42af      	cmp	r7, r5
 800618a:	4416      	add	r6, r2
 800618c:	441e      	add	r6, r3
 800618e:	463b      	mov	r3, r7
 8006190:	bfa8      	it	ge
 8006192:	462b      	movge	r3, r5
 8006194:	42b3      	cmp	r3, r6
 8006196:	bfa8      	it	ge
 8006198:	4633      	movge	r3, r6
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfc2      	ittt	gt
 800619e:	1aed      	subgt	r5, r5, r3
 80061a0:	1af6      	subgt	r6, r6, r3
 80061a2:	1aff      	subgt	r7, r7, r3
 80061a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	dd16      	ble.n	80061d8 <_strtod_l+0x738>
 80061aa:	4641      	mov	r1, r8
 80061ac:	461a      	mov	r2, r3
 80061ae:	9805      	ldr	r0, [sp, #20]
 80061b0:	f7ff f9a8 	bl	8005504 <__pow5mult>
 80061b4:	4680      	mov	r8, r0
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d0b7      	beq.n	800612a <_strtod_l+0x68a>
 80061ba:	4601      	mov	r1, r0
 80061bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80061be:	9805      	ldr	r0, [sp, #20]
 80061c0:	f7ff f8f8 	bl	80053b4 <__multiply>
 80061c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f43f ae85 	beq.w	8005ed6 <_strtod_l+0x436>
 80061cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061ce:	9805      	ldr	r0, [sp, #20]
 80061d0:	f7fe ffdc 	bl	800518c <_Bfree>
 80061d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80061d8:	2d00      	cmp	r5, #0
 80061da:	dc1d      	bgt.n	8006218 <_strtod_l+0x778>
 80061dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061de:	2b00      	cmp	r3, #0
 80061e0:	dd23      	ble.n	800622a <_strtod_l+0x78a>
 80061e2:	4649      	mov	r1, r9
 80061e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80061e6:	9805      	ldr	r0, [sp, #20]
 80061e8:	f7ff f98c 	bl	8005504 <__pow5mult>
 80061ec:	4681      	mov	r9, r0
 80061ee:	b9e0      	cbnz	r0, 800622a <_strtod_l+0x78a>
 80061f0:	f04f 0900 	mov.w	r9, #0
 80061f4:	e66f      	b.n	8005ed6 <_strtod_l+0x436>
 80061f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80061fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80061fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006202:	35e2      	adds	r5, #226	@ 0xe2
 8006204:	fa01 f305 	lsl.w	r3, r1, r5
 8006208:	9310      	str	r3, [sp, #64]	@ 0x40
 800620a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800620c:	e7ba      	b.n	8006184 <_strtod_l+0x6e4>
 800620e:	2300      	movs	r3, #0
 8006210:	9310      	str	r3, [sp, #64]	@ 0x40
 8006212:	2301      	movs	r3, #1
 8006214:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006216:	e7b5      	b.n	8006184 <_strtod_l+0x6e4>
 8006218:	462a      	mov	r2, r5
 800621a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800621c:	9805      	ldr	r0, [sp, #20]
 800621e:	f7ff f9cb 	bl	80055b8 <__lshift>
 8006222:	901a      	str	r0, [sp, #104]	@ 0x68
 8006224:	2800      	cmp	r0, #0
 8006226:	d1d9      	bne.n	80061dc <_strtod_l+0x73c>
 8006228:	e655      	b.n	8005ed6 <_strtod_l+0x436>
 800622a:	2e00      	cmp	r6, #0
 800622c:	dd07      	ble.n	800623e <_strtod_l+0x79e>
 800622e:	4649      	mov	r1, r9
 8006230:	4632      	mov	r2, r6
 8006232:	9805      	ldr	r0, [sp, #20]
 8006234:	f7ff f9c0 	bl	80055b8 <__lshift>
 8006238:	4681      	mov	r9, r0
 800623a:	2800      	cmp	r0, #0
 800623c:	d0d8      	beq.n	80061f0 <_strtod_l+0x750>
 800623e:	2f00      	cmp	r7, #0
 8006240:	dd08      	ble.n	8006254 <_strtod_l+0x7b4>
 8006242:	4641      	mov	r1, r8
 8006244:	463a      	mov	r2, r7
 8006246:	9805      	ldr	r0, [sp, #20]
 8006248:	f7ff f9b6 	bl	80055b8 <__lshift>
 800624c:	4680      	mov	r8, r0
 800624e:	2800      	cmp	r0, #0
 8006250:	f43f ae41 	beq.w	8005ed6 <_strtod_l+0x436>
 8006254:	464a      	mov	r2, r9
 8006256:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006258:	9805      	ldr	r0, [sp, #20]
 800625a:	f7ff fa35 	bl	80056c8 <__mdiff>
 800625e:	4604      	mov	r4, r0
 8006260:	2800      	cmp	r0, #0
 8006262:	f43f ae38 	beq.w	8005ed6 <_strtod_l+0x436>
 8006266:	68c3      	ldr	r3, [r0, #12]
 8006268:	4641      	mov	r1, r8
 800626a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800626c:	2300      	movs	r3, #0
 800626e:	60c3      	str	r3, [r0, #12]
 8006270:	f7ff fa0e 	bl	8005690 <__mcmp>
 8006274:	2800      	cmp	r0, #0
 8006276:	da45      	bge.n	8006304 <_strtod_l+0x864>
 8006278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800627a:	ea53 030a 	orrs.w	r3, r3, sl
 800627e:	d16b      	bne.n	8006358 <_strtod_l+0x8b8>
 8006280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006284:	2b00      	cmp	r3, #0
 8006286:	d167      	bne.n	8006358 <_strtod_l+0x8b8>
 8006288:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800628c:	0d1b      	lsrs	r3, r3, #20
 800628e:	051b      	lsls	r3, r3, #20
 8006290:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006294:	d960      	bls.n	8006358 <_strtod_l+0x8b8>
 8006296:	6963      	ldr	r3, [r4, #20]
 8006298:	b913      	cbnz	r3, 80062a0 <_strtod_l+0x800>
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	2b01      	cmp	r3, #1
 800629e:	dd5b      	ble.n	8006358 <_strtod_l+0x8b8>
 80062a0:	4621      	mov	r1, r4
 80062a2:	2201      	movs	r2, #1
 80062a4:	9805      	ldr	r0, [sp, #20]
 80062a6:	f7ff f987 	bl	80055b8 <__lshift>
 80062aa:	4641      	mov	r1, r8
 80062ac:	4604      	mov	r4, r0
 80062ae:	f7ff f9ef 	bl	8005690 <__mcmp>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	dd50      	ble.n	8006358 <_strtod_l+0x8b8>
 80062b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062ba:	9a08      	ldr	r2, [sp, #32]
 80062bc:	0d1b      	lsrs	r3, r3, #20
 80062be:	051b      	lsls	r3, r3, #20
 80062c0:	2a00      	cmp	r2, #0
 80062c2:	d06a      	beq.n	800639a <_strtod_l+0x8fa>
 80062c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80062c8:	d867      	bhi.n	800639a <_strtod_l+0x8fa>
 80062ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80062ce:	f67f ae98 	bls.w	8006002 <_strtod_l+0x562>
 80062d2:	4650      	mov	r0, sl
 80062d4:	4659      	mov	r1, fp
 80062d6:	4b09      	ldr	r3, [pc, #36]	@ (80062fc <_strtod_l+0x85c>)
 80062d8:	2200      	movs	r2, #0
 80062da:	f7fa f9b1 	bl	8000640 <__aeabi_dmul>
 80062de:	4b08      	ldr	r3, [pc, #32]	@ (8006300 <_strtod_l+0x860>)
 80062e0:	4682      	mov	sl, r0
 80062e2:	400b      	ands	r3, r1
 80062e4:	468b      	mov	fp, r1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f47f ae00 	bne.w	8005eec <_strtod_l+0x44c>
 80062ec:	2322      	movs	r3, #34	@ 0x22
 80062ee:	9a05      	ldr	r2, [sp, #20]
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e5fb      	b.n	8005eec <_strtod_l+0x44c>
 80062f4:	08007ba8 	.word	0x08007ba8
 80062f8:	fffffc02 	.word	0xfffffc02
 80062fc:	39500000 	.word	0x39500000
 8006300:	7ff00000 	.word	0x7ff00000
 8006304:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006308:	d165      	bne.n	80063d6 <_strtod_l+0x936>
 800630a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800630c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006310:	b35a      	cbz	r2, 800636a <_strtod_l+0x8ca>
 8006312:	4a99      	ldr	r2, [pc, #612]	@ (8006578 <_strtod_l+0xad8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d12b      	bne.n	8006370 <_strtod_l+0x8d0>
 8006318:	9b08      	ldr	r3, [sp, #32]
 800631a:	4651      	mov	r1, sl
 800631c:	b303      	cbz	r3, 8006360 <_strtod_l+0x8c0>
 800631e:	465a      	mov	r2, fp
 8006320:	4b96      	ldr	r3, [pc, #600]	@ (800657c <_strtod_l+0xadc>)
 8006322:	4013      	ands	r3, r2
 8006324:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006328:	f04f 32ff 	mov.w	r2, #4294967295
 800632c:	d81b      	bhi.n	8006366 <_strtod_l+0x8c6>
 800632e:	0d1b      	lsrs	r3, r3, #20
 8006330:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	4299      	cmp	r1, r3
 800633a:	d119      	bne.n	8006370 <_strtod_l+0x8d0>
 800633c:	4b90      	ldr	r3, [pc, #576]	@ (8006580 <_strtod_l+0xae0>)
 800633e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006340:	429a      	cmp	r2, r3
 8006342:	d102      	bne.n	800634a <_strtod_l+0x8aa>
 8006344:	3101      	adds	r1, #1
 8006346:	f43f adc6 	beq.w	8005ed6 <_strtod_l+0x436>
 800634a:	f04f 0a00 	mov.w	sl, #0
 800634e:	4b8b      	ldr	r3, [pc, #556]	@ (800657c <_strtod_l+0xadc>)
 8006350:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006352:	401a      	ands	r2, r3
 8006354:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006358:	9b08      	ldr	r3, [sp, #32]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1b9      	bne.n	80062d2 <_strtod_l+0x832>
 800635e:	e5c5      	b.n	8005eec <_strtod_l+0x44c>
 8006360:	f04f 33ff 	mov.w	r3, #4294967295
 8006364:	e7e8      	b.n	8006338 <_strtod_l+0x898>
 8006366:	4613      	mov	r3, r2
 8006368:	e7e6      	b.n	8006338 <_strtod_l+0x898>
 800636a:	ea53 030a 	orrs.w	r3, r3, sl
 800636e:	d0a2      	beq.n	80062b6 <_strtod_l+0x816>
 8006370:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006372:	b1db      	cbz	r3, 80063ac <_strtod_l+0x90c>
 8006374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006376:	4213      	tst	r3, r2
 8006378:	d0ee      	beq.n	8006358 <_strtod_l+0x8b8>
 800637a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800637c:	4650      	mov	r0, sl
 800637e:	4659      	mov	r1, fp
 8006380:	9a08      	ldr	r2, [sp, #32]
 8006382:	b1bb      	cbz	r3, 80063b4 <_strtod_l+0x914>
 8006384:	f7ff fb68 	bl	8005a58 <sulp>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006390:	f7f9 ffa0 	bl	80002d4 <__adddf3>
 8006394:	4682      	mov	sl, r0
 8006396:	468b      	mov	fp, r1
 8006398:	e7de      	b.n	8006358 <_strtod_l+0x8b8>
 800639a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800639e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80063a2:	f04f 3aff 	mov.w	sl, #4294967295
 80063a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80063aa:	e7d5      	b.n	8006358 <_strtod_l+0x8b8>
 80063ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063ae:	ea13 0f0a 	tst.w	r3, sl
 80063b2:	e7e1      	b.n	8006378 <_strtod_l+0x8d8>
 80063b4:	f7ff fb50 	bl	8005a58 <sulp>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063c0:	f7f9 ff86 	bl	80002d0 <__aeabi_dsub>
 80063c4:	2200      	movs	r2, #0
 80063c6:	2300      	movs	r3, #0
 80063c8:	4682      	mov	sl, r0
 80063ca:	468b      	mov	fp, r1
 80063cc:	f7fa fba0 	bl	8000b10 <__aeabi_dcmpeq>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d0c1      	beq.n	8006358 <_strtod_l+0x8b8>
 80063d4:	e615      	b.n	8006002 <_strtod_l+0x562>
 80063d6:	4641      	mov	r1, r8
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff fac9 	bl	8005970 <__ratio>
 80063de:	2200      	movs	r2, #0
 80063e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063e4:	4606      	mov	r6, r0
 80063e6:	460f      	mov	r7, r1
 80063e8:	f7fa fba6 	bl	8000b38 <__aeabi_dcmple>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d06d      	beq.n	80064cc <_strtod_l+0xa2c>
 80063f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d178      	bne.n	80064e8 <_strtod_l+0xa48>
 80063f6:	f1ba 0f00 	cmp.w	sl, #0
 80063fa:	d156      	bne.n	80064aa <_strtod_l+0xa0a>
 80063fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006402:	2b00      	cmp	r3, #0
 8006404:	d158      	bne.n	80064b8 <_strtod_l+0xa18>
 8006406:	2200      	movs	r2, #0
 8006408:	4630      	mov	r0, r6
 800640a:	4639      	mov	r1, r7
 800640c:	4b5d      	ldr	r3, [pc, #372]	@ (8006584 <_strtod_l+0xae4>)
 800640e:	f7fa fb89 	bl	8000b24 <__aeabi_dcmplt>
 8006412:	2800      	cmp	r0, #0
 8006414:	d157      	bne.n	80064c6 <_strtod_l+0xa26>
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	2200      	movs	r2, #0
 800641c:	4b5a      	ldr	r3, [pc, #360]	@ (8006588 <_strtod_l+0xae8>)
 800641e:	f7fa f90f 	bl	8000640 <__aeabi_dmul>
 8006422:	4606      	mov	r6, r0
 8006424:	460f      	mov	r7, r1
 8006426:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800642a:	9606      	str	r6, [sp, #24]
 800642c:	9307      	str	r3, [sp, #28]
 800642e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006432:	4d52      	ldr	r5, [pc, #328]	@ (800657c <_strtod_l+0xadc>)
 8006434:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800643a:	401d      	ands	r5, r3
 800643c:	4b53      	ldr	r3, [pc, #332]	@ (800658c <_strtod_l+0xaec>)
 800643e:	429d      	cmp	r5, r3
 8006440:	f040 80aa 	bne.w	8006598 <_strtod_l+0xaf8>
 8006444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006446:	4650      	mov	r0, sl
 8006448:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800644c:	4659      	mov	r1, fp
 800644e:	f7ff f9cf 	bl	80057f0 <__ulp>
 8006452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006456:	f7fa f8f3 	bl	8000640 <__aeabi_dmul>
 800645a:	4652      	mov	r2, sl
 800645c:	465b      	mov	r3, fp
 800645e:	f7f9 ff39 	bl	80002d4 <__adddf3>
 8006462:	460b      	mov	r3, r1
 8006464:	4945      	ldr	r1, [pc, #276]	@ (800657c <_strtod_l+0xadc>)
 8006466:	4a4a      	ldr	r2, [pc, #296]	@ (8006590 <_strtod_l+0xaf0>)
 8006468:	4019      	ands	r1, r3
 800646a:	4291      	cmp	r1, r2
 800646c:	4682      	mov	sl, r0
 800646e:	d942      	bls.n	80064f6 <_strtod_l+0xa56>
 8006470:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006472:	4b43      	ldr	r3, [pc, #268]	@ (8006580 <_strtod_l+0xae0>)
 8006474:	429a      	cmp	r2, r3
 8006476:	d103      	bne.n	8006480 <_strtod_l+0x9e0>
 8006478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800647a:	3301      	adds	r3, #1
 800647c:	f43f ad2b 	beq.w	8005ed6 <_strtod_l+0x436>
 8006480:	f04f 3aff 	mov.w	sl, #4294967295
 8006484:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006580 <_strtod_l+0xae0>
 8006488:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800648a:	9805      	ldr	r0, [sp, #20]
 800648c:	f7fe fe7e 	bl	800518c <_Bfree>
 8006490:	4649      	mov	r1, r9
 8006492:	9805      	ldr	r0, [sp, #20]
 8006494:	f7fe fe7a 	bl	800518c <_Bfree>
 8006498:	4641      	mov	r1, r8
 800649a:	9805      	ldr	r0, [sp, #20]
 800649c:	f7fe fe76 	bl	800518c <_Bfree>
 80064a0:	4621      	mov	r1, r4
 80064a2:	9805      	ldr	r0, [sp, #20]
 80064a4:	f7fe fe72 	bl	800518c <_Bfree>
 80064a8:	e618      	b.n	80060dc <_strtod_l+0x63c>
 80064aa:	f1ba 0f01 	cmp.w	sl, #1
 80064ae:	d103      	bne.n	80064b8 <_strtod_l+0xa18>
 80064b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f43f ada5 	beq.w	8006002 <_strtod_l+0x562>
 80064b8:	2200      	movs	r2, #0
 80064ba:	4b36      	ldr	r3, [pc, #216]	@ (8006594 <_strtod_l+0xaf4>)
 80064bc:	2600      	movs	r6, #0
 80064be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064c2:	4f30      	ldr	r7, [pc, #192]	@ (8006584 <_strtod_l+0xae4>)
 80064c4:	e7b3      	b.n	800642e <_strtod_l+0x98e>
 80064c6:	2600      	movs	r6, #0
 80064c8:	4f2f      	ldr	r7, [pc, #188]	@ (8006588 <_strtod_l+0xae8>)
 80064ca:	e7ac      	b.n	8006426 <_strtod_l+0x986>
 80064cc:	4630      	mov	r0, r6
 80064ce:	4639      	mov	r1, r7
 80064d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006588 <_strtod_l+0xae8>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	f7fa f8b4 	bl	8000640 <__aeabi_dmul>
 80064d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064da:	4606      	mov	r6, r0
 80064dc:	460f      	mov	r7, r1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0a1      	beq.n	8006426 <_strtod_l+0x986>
 80064e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80064e6:	e7a2      	b.n	800642e <_strtod_l+0x98e>
 80064e8:	2200      	movs	r2, #0
 80064ea:	4b26      	ldr	r3, [pc, #152]	@ (8006584 <_strtod_l+0xae4>)
 80064ec:	4616      	mov	r6, r2
 80064ee:	461f      	mov	r7, r3
 80064f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064f4:	e79b      	b.n	800642e <_strtod_l+0x98e>
 80064f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80064fa:	9b08      	ldr	r3, [sp, #32]
 80064fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1c1      	bne.n	8006488 <_strtod_l+0x9e8>
 8006504:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006508:	0d1b      	lsrs	r3, r3, #20
 800650a:	051b      	lsls	r3, r3, #20
 800650c:	429d      	cmp	r5, r3
 800650e:	d1bb      	bne.n	8006488 <_strtod_l+0x9e8>
 8006510:	4630      	mov	r0, r6
 8006512:	4639      	mov	r1, r7
 8006514:	f7fa fbdc 	bl	8000cd0 <__aeabi_d2lz>
 8006518:	f7fa f864 	bl	80005e4 <__aeabi_l2d>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7f9 fed4 	bl	80002d0 <__aeabi_dsub>
 8006528:	460b      	mov	r3, r1
 800652a:	4602      	mov	r2, r0
 800652c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006530:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006536:	ea46 060a 	orr.w	r6, r6, sl
 800653a:	431e      	orrs	r6, r3
 800653c:	d069      	beq.n	8006612 <_strtod_l+0xb72>
 800653e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006568 <_strtod_l+0xac8>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f7fa faee 	bl	8000b24 <__aeabi_dcmplt>
 8006548:	2800      	cmp	r0, #0
 800654a:	f47f accf 	bne.w	8005eec <_strtod_l+0x44c>
 800654e:	a308      	add	r3, pc, #32	@ (adr r3, 8006570 <_strtod_l+0xad0>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006558:	f7fa fb02 	bl	8000b60 <__aeabi_dcmpgt>
 800655c:	2800      	cmp	r0, #0
 800655e:	d093      	beq.n	8006488 <_strtod_l+0x9e8>
 8006560:	e4c4      	b.n	8005eec <_strtod_l+0x44c>
 8006562:	bf00      	nop
 8006564:	f3af 8000 	nop.w
 8006568:	94a03595 	.word	0x94a03595
 800656c:	3fdfffff 	.word	0x3fdfffff
 8006570:	35afe535 	.word	0x35afe535
 8006574:	3fe00000 	.word	0x3fe00000
 8006578:	000fffff 	.word	0x000fffff
 800657c:	7ff00000 	.word	0x7ff00000
 8006580:	7fefffff 	.word	0x7fefffff
 8006584:	3ff00000 	.word	0x3ff00000
 8006588:	3fe00000 	.word	0x3fe00000
 800658c:	7fe00000 	.word	0x7fe00000
 8006590:	7c9fffff 	.word	0x7c9fffff
 8006594:	bff00000 	.word	0xbff00000
 8006598:	9b08      	ldr	r3, [sp, #32]
 800659a:	b323      	cbz	r3, 80065e6 <_strtod_l+0xb46>
 800659c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80065a0:	d821      	bhi.n	80065e6 <_strtod_l+0xb46>
 80065a2:	a327      	add	r3, pc, #156	@ (adr r3, 8006640 <_strtod_l+0xba0>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	f7fa fac4 	bl	8000b38 <__aeabi_dcmple>
 80065b0:	b1a0      	cbz	r0, 80065dc <_strtod_l+0xb3c>
 80065b2:	4639      	mov	r1, r7
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7fa fb1b 	bl	8000bf0 <__aeabi_d2uiz>
 80065ba:	2801      	cmp	r0, #1
 80065bc:	bf38      	it	cc
 80065be:	2001      	movcc	r0, #1
 80065c0:	f7f9 ffc4 	bl	800054c <__aeabi_ui2d>
 80065c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	b9fb      	cbnz	r3, 800660c <_strtod_l+0xb6c>
 80065cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065d0:	9014      	str	r0, [sp, #80]	@ 0x50
 80065d2:	9315      	str	r3, [sp, #84]	@ 0x54
 80065d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80065d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80065dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065de:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80065e2:	1b5b      	subs	r3, r3, r5
 80065e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80065e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065ea:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80065ee:	f7ff f8ff 	bl	80057f0 <__ulp>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4650      	mov	r0, sl
 80065f8:	4659      	mov	r1, fp
 80065fa:	f7fa f821 	bl	8000640 <__aeabi_dmul>
 80065fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006602:	f7f9 fe67 	bl	80002d4 <__adddf3>
 8006606:	4682      	mov	sl, r0
 8006608:	468b      	mov	fp, r1
 800660a:	e776      	b.n	80064fa <_strtod_l+0xa5a>
 800660c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006610:	e7e0      	b.n	80065d4 <_strtod_l+0xb34>
 8006612:	a30d      	add	r3, pc, #52	@ (adr r3, 8006648 <_strtod_l+0xba8>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7fa fa84 	bl	8000b24 <__aeabi_dcmplt>
 800661c:	e79e      	b.n	800655c <_strtod_l+0xabc>
 800661e:	2300      	movs	r3, #0
 8006620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006622:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006624:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	f7ff ba77 	b.w	8005b1a <_strtod_l+0x7a>
 800662c:	2a65      	cmp	r2, #101	@ 0x65
 800662e:	f43f ab6e 	beq.w	8005d0e <_strtod_l+0x26e>
 8006632:	2a45      	cmp	r2, #69	@ 0x45
 8006634:	f43f ab6b 	beq.w	8005d0e <_strtod_l+0x26e>
 8006638:	2301      	movs	r3, #1
 800663a:	f7ff bba6 	b.w	8005d8a <_strtod_l+0x2ea>
 800663e:	bf00      	nop
 8006640:	ffc00000 	.word	0xffc00000
 8006644:	41dfffff 	.word	0x41dfffff
 8006648:	94a03595 	.word	0x94a03595
 800664c:	3fcfffff 	.word	0x3fcfffff

08006650 <_strtod_r>:
 8006650:	4b01      	ldr	r3, [pc, #4]	@ (8006658 <_strtod_r+0x8>)
 8006652:	f7ff ba25 	b.w	8005aa0 <_strtod_l>
 8006656:	bf00      	nop
 8006658:	20000068 	.word	0x20000068

0800665c <_strtol_l.constprop.0>:
 800665c:	2b24      	cmp	r3, #36	@ 0x24
 800665e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006662:	4686      	mov	lr, r0
 8006664:	4690      	mov	r8, r2
 8006666:	d801      	bhi.n	800666c <_strtol_l.constprop.0+0x10>
 8006668:	2b01      	cmp	r3, #1
 800666a:	d106      	bne.n	800667a <_strtol_l.constprop.0+0x1e>
 800666c:	f7fd fdc0 	bl	80041f0 <__errno>
 8006670:	2316      	movs	r3, #22
 8006672:	6003      	str	r3, [r0, #0]
 8006674:	2000      	movs	r0, #0
 8006676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667a:	460d      	mov	r5, r1
 800667c:	4833      	ldr	r0, [pc, #204]	@ (800674c <_strtol_l.constprop.0+0xf0>)
 800667e:	462a      	mov	r2, r5
 8006680:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006684:	5d06      	ldrb	r6, [r0, r4]
 8006686:	f016 0608 	ands.w	r6, r6, #8
 800668a:	d1f8      	bne.n	800667e <_strtol_l.constprop.0+0x22>
 800668c:	2c2d      	cmp	r4, #45	@ 0x2d
 800668e:	d12d      	bne.n	80066ec <_strtol_l.constprop.0+0x90>
 8006690:	2601      	movs	r6, #1
 8006692:	782c      	ldrb	r4, [r5, #0]
 8006694:	1c95      	adds	r5, r2, #2
 8006696:	f033 0210 	bics.w	r2, r3, #16
 800669a:	d109      	bne.n	80066b0 <_strtol_l.constprop.0+0x54>
 800669c:	2c30      	cmp	r4, #48	@ 0x30
 800669e:	d12a      	bne.n	80066f6 <_strtol_l.constprop.0+0x9a>
 80066a0:	782a      	ldrb	r2, [r5, #0]
 80066a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066a6:	2a58      	cmp	r2, #88	@ 0x58
 80066a8:	d125      	bne.n	80066f6 <_strtol_l.constprop.0+0x9a>
 80066aa:	2310      	movs	r3, #16
 80066ac:	786c      	ldrb	r4, [r5, #1]
 80066ae:	3502      	adds	r5, #2
 80066b0:	2200      	movs	r2, #0
 80066b2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80066b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80066ba:	fbbc f9f3 	udiv	r9, ip, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80066c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80066c8:	2f09      	cmp	r7, #9
 80066ca:	d81b      	bhi.n	8006704 <_strtol_l.constprop.0+0xa8>
 80066cc:	463c      	mov	r4, r7
 80066ce:	42a3      	cmp	r3, r4
 80066d0:	dd27      	ble.n	8006722 <_strtol_l.constprop.0+0xc6>
 80066d2:	1c57      	adds	r7, r2, #1
 80066d4:	d007      	beq.n	80066e6 <_strtol_l.constprop.0+0x8a>
 80066d6:	4581      	cmp	r9, r0
 80066d8:	d320      	bcc.n	800671c <_strtol_l.constprop.0+0xc0>
 80066da:	d101      	bne.n	80066e0 <_strtol_l.constprop.0+0x84>
 80066dc:	45a2      	cmp	sl, r4
 80066de:	db1d      	blt.n	800671c <_strtol_l.constprop.0+0xc0>
 80066e0:	2201      	movs	r2, #1
 80066e2:	fb00 4003 	mla	r0, r0, r3, r4
 80066e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066ea:	e7eb      	b.n	80066c4 <_strtol_l.constprop.0+0x68>
 80066ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80066ee:	bf04      	itt	eq
 80066f0:	782c      	ldrbeq	r4, [r5, #0]
 80066f2:	1c95      	addeq	r5, r2, #2
 80066f4:	e7cf      	b.n	8006696 <_strtol_l.constprop.0+0x3a>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1da      	bne.n	80066b0 <_strtol_l.constprop.0+0x54>
 80066fa:	2c30      	cmp	r4, #48	@ 0x30
 80066fc:	bf0c      	ite	eq
 80066fe:	2308      	moveq	r3, #8
 8006700:	230a      	movne	r3, #10
 8006702:	e7d5      	b.n	80066b0 <_strtol_l.constprop.0+0x54>
 8006704:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006708:	2f19      	cmp	r7, #25
 800670a:	d801      	bhi.n	8006710 <_strtol_l.constprop.0+0xb4>
 800670c:	3c37      	subs	r4, #55	@ 0x37
 800670e:	e7de      	b.n	80066ce <_strtol_l.constprop.0+0x72>
 8006710:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006714:	2f19      	cmp	r7, #25
 8006716:	d804      	bhi.n	8006722 <_strtol_l.constprop.0+0xc6>
 8006718:	3c57      	subs	r4, #87	@ 0x57
 800671a:	e7d8      	b.n	80066ce <_strtol_l.constprop.0+0x72>
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	e7e1      	b.n	80066e6 <_strtol_l.constprop.0+0x8a>
 8006722:	1c53      	adds	r3, r2, #1
 8006724:	d108      	bne.n	8006738 <_strtol_l.constprop.0+0xdc>
 8006726:	2322      	movs	r3, #34	@ 0x22
 8006728:	4660      	mov	r0, ip
 800672a:	f8ce 3000 	str.w	r3, [lr]
 800672e:	f1b8 0f00 	cmp.w	r8, #0
 8006732:	d0a0      	beq.n	8006676 <_strtol_l.constprop.0+0x1a>
 8006734:	1e69      	subs	r1, r5, #1
 8006736:	e006      	b.n	8006746 <_strtol_l.constprop.0+0xea>
 8006738:	b106      	cbz	r6, 800673c <_strtol_l.constprop.0+0xe0>
 800673a:	4240      	negs	r0, r0
 800673c:	f1b8 0f00 	cmp.w	r8, #0
 8006740:	d099      	beq.n	8006676 <_strtol_l.constprop.0+0x1a>
 8006742:	2a00      	cmp	r2, #0
 8006744:	d1f6      	bne.n	8006734 <_strtol_l.constprop.0+0xd8>
 8006746:	f8c8 1000 	str.w	r1, [r8]
 800674a:	e794      	b.n	8006676 <_strtol_l.constprop.0+0x1a>
 800674c:	08007bd1 	.word	0x08007bd1

08006750 <_strtol_r>:
 8006750:	f7ff bf84 	b.w	800665c <_strtol_l.constprop.0>

08006754 <__ssputs_r>:
 8006754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006758:	461f      	mov	r7, r3
 800675a:	688e      	ldr	r6, [r1, #8]
 800675c:	4682      	mov	sl, r0
 800675e:	42be      	cmp	r6, r7
 8006760:	460c      	mov	r4, r1
 8006762:	4690      	mov	r8, r2
 8006764:	680b      	ldr	r3, [r1, #0]
 8006766:	d82d      	bhi.n	80067c4 <__ssputs_r+0x70>
 8006768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800676c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006770:	d026      	beq.n	80067c0 <__ssputs_r+0x6c>
 8006772:	6965      	ldr	r5, [r4, #20]
 8006774:	6909      	ldr	r1, [r1, #16]
 8006776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800677a:	eba3 0901 	sub.w	r9, r3, r1
 800677e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006782:	1c7b      	adds	r3, r7, #1
 8006784:	444b      	add	r3, r9
 8006786:	106d      	asrs	r5, r5, #1
 8006788:	429d      	cmp	r5, r3
 800678a:	bf38      	it	cc
 800678c:	461d      	movcc	r5, r3
 800678e:	0553      	lsls	r3, r2, #21
 8006790:	d527      	bpl.n	80067e2 <__ssputs_r+0x8e>
 8006792:	4629      	mov	r1, r5
 8006794:	f7fe fc2e 	bl	8004ff4 <_malloc_r>
 8006798:	4606      	mov	r6, r0
 800679a:	b360      	cbz	r0, 80067f6 <__ssputs_r+0xa2>
 800679c:	464a      	mov	r2, r9
 800679e:	6921      	ldr	r1, [r4, #16]
 80067a0:	f000 fa14 	bl	8006bcc <memcpy>
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	6126      	str	r6, [r4, #16]
 80067b2:	444e      	add	r6, r9
 80067b4:	6026      	str	r6, [r4, #0]
 80067b6:	463e      	mov	r6, r7
 80067b8:	6165      	str	r5, [r4, #20]
 80067ba:	eba5 0509 	sub.w	r5, r5, r9
 80067be:	60a5      	str	r5, [r4, #8]
 80067c0:	42be      	cmp	r6, r7
 80067c2:	d900      	bls.n	80067c6 <__ssputs_r+0x72>
 80067c4:	463e      	mov	r6, r7
 80067c6:	4632      	mov	r2, r6
 80067c8:	4641      	mov	r1, r8
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	f000 f9c2 	bl	8006b54 <memmove>
 80067d0:	2000      	movs	r0, #0
 80067d2:	68a3      	ldr	r3, [r4, #8]
 80067d4:	1b9b      	subs	r3, r3, r6
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	4433      	add	r3, r6
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e2:	462a      	mov	r2, r5
 80067e4:	f000 fd83 	bl	80072ee <_realloc_r>
 80067e8:	4606      	mov	r6, r0
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d1e0      	bne.n	80067b0 <__ssputs_r+0x5c>
 80067ee:	4650      	mov	r0, sl
 80067f0:	6921      	ldr	r1, [r4, #16]
 80067f2:	f7fe fb8d 	bl	8004f10 <_free_r>
 80067f6:	230c      	movs	r3, #12
 80067f8:	f8ca 3000 	str.w	r3, [sl]
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	e7e9      	b.n	80067de <__ssputs_r+0x8a>
	...

0800680c <_svfiprintf_r>:
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	4698      	mov	r8, r3
 8006812:	898b      	ldrh	r3, [r1, #12]
 8006814:	4607      	mov	r7, r0
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	460d      	mov	r5, r1
 800681a:	4614      	mov	r4, r2
 800681c:	b09d      	sub	sp, #116	@ 0x74
 800681e:	d510      	bpl.n	8006842 <_svfiprintf_r+0x36>
 8006820:	690b      	ldr	r3, [r1, #16]
 8006822:	b973      	cbnz	r3, 8006842 <_svfiprintf_r+0x36>
 8006824:	2140      	movs	r1, #64	@ 0x40
 8006826:	f7fe fbe5 	bl	8004ff4 <_malloc_r>
 800682a:	6028      	str	r0, [r5, #0]
 800682c:	6128      	str	r0, [r5, #16]
 800682e:	b930      	cbnz	r0, 800683e <_svfiprintf_r+0x32>
 8006830:	230c      	movs	r3, #12
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	b01d      	add	sp, #116	@ 0x74
 800683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683e:	2340      	movs	r3, #64	@ 0x40
 8006840:	616b      	str	r3, [r5, #20]
 8006842:	2300      	movs	r3, #0
 8006844:	9309      	str	r3, [sp, #36]	@ 0x24
 8006846:	2320      	movs	r3, #32
 8006848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800684c:	2330      	movs	r3, #48	@ 0x30
 800684e:	f04f 0901 	mov.w	r9, #1
 8006852:	f8cd 800c 	str.w	r8, [sp, #12]
 8006856:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80069f0 <_svfiprintf_r+0x1e4>
 800685a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800685e:	4623      	mov	r3, r4
 8006860:	469a      	mov	sl, r3
 8006862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006866:	b10a      	cbz	r2, 800686c <_svfiprintf_r+0x60>
 8006868:	2a25      	cmp	r2, #37	@ 0x25
 800686a:	d1f9      	bne.n	8006860 <_svfiprintf_r+0x54>
 800686c:	ebba 0b04 	subs.w	fp, sl, r4
 8006870:	d00b      	beq.n	800688a <_svfiprintf_r+0x7e>
 8006872:	465b      	mov	r3, fp
 8006874:	4622      	mov	r2, r4
 8006876:	4629      	mov	r1, r5
 8006878:	4638      	mov	r0, r7
 800687a:	f7ff ff6b 	bl	8006754 <__ssputs_r>
 800687e:	3001      	adds	r0, #1
 8006880:	f000 80a7 	beq.w	80069d2 <_svfiprintf_r+0x1c6>
 8006884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006886:	445a      	add	r2, fp
 8006888:	9209      	str	r2, [sp, #36]	@ 0x24
 800688a:	f89a 3000 	ldrb.w	r3, [sl]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 809f 	beq.w	80069d2 <_svfiprintf_r+0x1c6>
 8006894:	2300      	movs	r3, #0
 8006896:	f04f 32ff 	mov.w	r2, #4294967295
 800689a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800689e:	f10a 0a01 	add.w	sl, sl, #1
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	9307      	str	r3, [sp, #28]
 80068a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80068ac:	4654      	mov	r4, sl
 80068ae:	2205      	movs	r2, #5
 80068b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b4:	484e      	ldr	r0, [pc, #312]	@ (80069f0 <_svfiprintf_r+0x1e4>)
 80068b6:	f7fd fcc8 	bl	800424a <memchr>
 80068ba:	9a04      	ldr	r2, [sp, #16]
 80068bc:	b9d8      	cbnz	r0, 80068f6 <_svfiprintf_r+0xea>
 80068be:	06d0      	lsls	r0, r2, #27
 80068c0:	bf44      	itt	mi
 80068c2:	2320      	movmi	r3, #32
 80068c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068c8:	0711      	lsls	r1, r2, #28
 80068ca:	bf44      	itt	mi
 80068cc:	232b      	movmi	r3, #43	@ 0x2b
 80068ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d2:	f89a 3000 	ldrb.w	r3, [sl]
 80068d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d8:	d015      	beq.n	8006906 <_svfiprintf_r+0xfa>
 80068da:	4654      	mov	r4, sl
 80068dc:	2000      	movs	r0, #0
 80068de:	f04f 0c0a 	mov.w	ip, #10
 80068e2:	9a07      	ldr	r2, [sp, #28]
 80068e4:	4621      	mov	r1, r4
 80068e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ea:	3b30      	subs	r3, #48	@ 0x30
 80068ec:	2b09      	cmp	r3, #9
 80068ee:	d94b      	bls.n	8006988 <_svfiprintf_r+0x17c>
 80068f0:	b1b0      	cbz	r0, 8006920 <_svfiprintf_r+0x114>
 80068f2:	9207      	str	r2, [sp, #28]
 80068f4:	e014      	b.n	8006920 <_svfiprintf_r+0x114>
 80068f6:	eba0 0308 	sub.w	r3, r0, r8
 80068fa:	fa09 f303 	lsl.w	r3, r9, r3
 80068fe:	4313      	orrs	r3, r2
 8006900:	46a2      	mov	sl, r4
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	e7d2      	b.n	80068ac <_svfiprintf_r+0xa0>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	1d19      	adds	r1, r3, #4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	9103      	str	r1, [sp, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	bfbb      	ittet	lt
 8006912:	425b      	neglt	r3, r3
 8006914:	f042 0202 	orrlt.w	r2, r2, #2
 8006918:	9307      	strge	r3, [sp, #28]
 800691a:	9307      	strlt	r3, [sp, #28]
 800691c:	bfb8      	it	lt
 800691e:	9204      	strlt	r2, [sp, #16]
 8006920:	7823      	ldrb	r3, [r4, #0]
 8006922:	2b2e      	cmp	r3, #46	@ 0x2e
 8006924:	d10a      	bne.n	800693c <_svfiprintf_r+0x130>
 8006926:	7863      	ldrb	r3, [r4, #1]
 8006928:	2b2a      	cmp	r3, #42	@ 0x2a
 800692a:	d132      	bne.n	8006992 <_svfiprintf_r+0x186>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	3402      	adds	r4, #2
 8006930:	1d1a      	adds	r2, r3, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	9203      	str	r2, [sp, #12]
 8006936:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80069f4 <_svfiprintf_r+0x1e8>
 8006940:	2203      	movs	r2, #3
 8006942:	4650      	mov	r0, sl
 8006944:	7821      	ldrb	r1, [r4, #0]
 8006946:	f7fd fc80 	bl	800424a <memchr>
 800694a:	b138      	cbz	r0, 800695c <_svfiprintf_r+0x150>
 800694c:	2240      	movs	r2, #64	@ 0x40
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	eba0 000a 	sub.w	r0, r0, sl
 8006954:	4082      	lsls	r2, r0
 8006956:	4313      	orrs	r3, r2
 8006958:	3401      	adds	r4, #1
 800695a:	9304      	str	r3, [sp, #16]
 800695c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006960:	2206      	movs	r2, #6
 8006962:	4825      	ldr	r0, [pc, #148]	@ (80069f8 <_svfiprintf_r+0x1ec>)
 8006964:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006968:	f7fd fc6f 	bl	800424a <memchr>
 800696c:	2800      	cmp	r0, #0
 800696e:	d036      	beq.n	80069de <_svfiprintf_r+0x1d2>
 8006970:	4b22      	ldr	r3, [pc, #136]	@ (80069fc <_svfiprintf_r+0x1f0>)
 8006972:	bb1b      	cbnz	r3, 80069bc <_svfiprintf_r+0x1b0>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	3307      	adds	r3, #7
 8006978:	f023 0307 	bic.w	r3, r3, #7
 800697c:	3308      	adds	r3, #8
 800697e:	9303      	str	r3, [sp, #12]
 8006980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006982:	4433      	add	r3, r6
 8006984:	9309      	str	r3, [sp, #36]	@ 0x24
 8006986:	e76a      	b.n	800685e <_svfiprintf_r+0x52>
 8006988:	460c      	mov	r4, r1
 800698a:	2001      	movs	r0, #1
 800698c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006990:	e7a8      	b.n	80068e4 <_svfiprintf_r+0xd8>
 8006992:	2300      	movs	r3, #0
 8006994:	f04f 0c0a 	mov.w	ip, #10
 8006998:	4619      	mov	r1, r3
 800699a:	3401      	adds	r4, #1
 800699c:	9305      	str	r3, [sp, #20]
 800699e:	4620      	mov	r0, r4
 80069a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a4:	3a30      	subs	r2, #48	@ 0x30
 80069a6:	2a09      	cmp	r2, #9
 80069a8:	d903      	bls.n	80069b2 <_svfiprintf_r+0x1a6>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0c6      	beq.n	800693c <_svfiprintf_r+0x130>
 80069ae:	9105      	str	r1, [sp, #20]
 80069b0:	e7c4      	b.n	800693c <_svfiprintf_r+0x130>
 80069b2:	4604      	mov	r4, r0
 80069b4:	2301      	movs	r3, #1
 80069b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069ba:	e7f0      	b.n	800699e <_svfiprintf_r+0x192>
 80069bc:	ab03      	add	r3, sp, #12
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	462a      	mov	r2, r5
 80069c2:	4638      	mov	r0, r7
 80069c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a00 <_svfiprintf_r+0x1f4>)
 80069c6:	a904      	add	r1, sp, #16
 80069c8:	f7fc fccc 	bl	8003364 <_printf_float>
 80069cc:	1c42      	adds	r2, r0, #1
 80069ce:	4606      	mov	r6, r0
 80069d0:	d1d6      	bne.n	8006980 <_svfiprintf_r+0x174>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	065b      	lsls	r3, r3, #25
 80069d6:	f53f af2d 	bmi.w	8006834 <_svfiprintf_r+0x28>
 80069da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069dc:	e72c      	b.n	8006838 <_svfiprintf_r+0x2c>
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	462a      	mov	r2, r5
 80069e4:	4638      	mov	r0, r7
 80069e6:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <_svfiprintf_r+0x1f4>)
 80069e8:	a904      	add	r1, sp, #16
 80069ea:	f7fc ff59 	bl	80038a0 <_printf_i>
 80069ee:	e7ed      	b.n	80069cc <_svfiprintf_r+0x1c0>
 80069f0:	08007cd1 	.word	0x08007cd1
 80069f4:	08007cd7 	.word	0x08007cd7
 80069f8:	08007cdb 	.word	0x08007cdb
 80069fc:	08003365 	.word	0x08003365
 8006a00:	08006755 	.word	0x08006755

08006a04 <__sflush_r>:
 8006a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	0716      	lsls	r6, r2, #28
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	d454      	bmi.n	8006abc <__sflush_r+0xb8>
 8006a12:	684b      	ldr	r3, [r1, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dc02      	bgt.n	8006a1e <__sflush_r+0x1a>
 8006a18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dd48      	ble.n	8006ab0 <__sflush_r+0xac>
 8006a1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a20:	2e00      	cmp	r6, #0
 8006a22:	d045      	beq.n	8006ab0 <__sflush_r+0xac>
 8006a24:	2300      	movs	r3, #0
 8006a26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a2a:	682f      	ldr	r7, [r5, #0]
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	d030      	beq.n	8006a94 <__sflush_r+0x90>
 8006a32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	0759      	lsls	r1, r3, #29
 8006a38:	d505      	bpl.n	8006a46 <__sflush_r+0x42>
 8006a3a:	6863      	ldr	r3, [r4, #4]
 8006a3c:	1ad2      	subs	r2, r2, r3
 8006a3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a40:	b10b      	cbz	r3, 8006a46 <__sflush_r+0x42>
 8006a42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a44:	1ad2      	subs	r2, r2, r3
 8006a46:	2300      	movs	r3, #0
 8006a48:	4628      	mov	r0, r5
 8006a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a4c:	6a21      	ldr	r1, [r4, #32]
 8006a4e:	47b0      	blx	r6
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	d106      	bne.n	8006a64 <__sflush_r+0x60>
 8006a56:	6829      	ldr	r1, [r5, #0]
 8006a58:	291d      	cmp	r1, #29
 8006a5a:	d82b      	bhi.n	8006ab4 <__sflush_r+0xb0>
 8006a5c:	4a28      	ldr	r2, [pc, #160]	@ (8006b00 <__sflush_r+0xfc>)
 8006a5e:	410a      	asrs	r2, r1
 8006a60:	07d6      	lsls	r6, r2, #31
 8006a62:	d427      	bmi.n	8006ab4 <__sflush_r+0xb0>
 8006a64:	2200      	movs	r2, #0
 8006a66:	6062      	str	r2, [r4, #4]
 8006a68:	6922      	ldr	r2, [r4, #16]
 8006a6a:	04d9      	lsls	r1, r3, #19
 8006a6c:	6022      	str	r2, [r4, #0]
 8006a6e:	d504      	bpl.n	8006a7a <__sflush_r+0x76>
 8006a70:	1c42      	adds	r2, r0, #1
 8006a72:	d101      	bne.n	8006a78 <__sflush_r+0x74>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b903      	cbnz	r3, 8006a7a <__sflush_r+0x76>
 8006a78:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a7c:	602f      	str	r7, [r5, #0]
 8006a7e:	b1b9      	cbz	r1, 8006ab0 <__sflush_r+0xac>
 8006a80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a84:	4299      	cmp	r1, r3
 8006a86:	d002      	beq.n	8006a8e <__sflush_r+0x8a>
 8006a88:	4628      	mov	r0, r5
 8006a8a:	f7fe fa41 	bl	8004f10 <_free_r>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a92:	e00d      	b.n	8006ab0 <__sflush_r+0xac>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b0      	blx	r6
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	1c50      	adds	r0, r2, #1
 8006a9e:	d1c9      	bne.n	8006a34 <__sflush_r+0x30>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0c6      	beq.n	8006a34 <__sflush_r+0x30>
 8006aa6:	2b1d      	cmp	r3, #29
 8006aa8:	d001      	beq.n	8006aae <__sflush_r+0xaa>
 8006aaa:	2b16      	cmp	r3, #22
 8006aac:	d11d      	bne.n	8006aea <__sflush_r+0xe6>
 8006aae:	602f      	str	r7, [r5, #0]
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e021      	b.n	8006af8 <__sflush_r+0xf4>
 8006ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab8:	b21b      	sxth	r3, r3
 8006aba:	e01a      	b.n	8006af2 <__sflush_r+0xee>
 8006abc:	690f      	ldr	r7, [r1, #16]
 8006abe:	2f00      	cmp	r7, #0
 8006ac0:	d0f6      	beq.n	8006ab0 <__sflush_r+0xac>
 8006ac2:	0793      	lsls	r3, r2, #30
 8006ac4:	bf18      	it	ne
 8006ac6:	2300      	movne	r3, #0
 8006ac8:	680e      	ldr	r6, [r1, #0]
 8006aca:	bf08      	it	eq
 8006acc:	694b      	ldreq	r3, [r1, #20]
 8006ace:	1bf6      	subs	r6, r6, r7
 8006ad0:	600f      	str	r7, [r1, #0]
 8006ad2:	608b      	str	r3, [r1, #8]
 8006ad4:	2e00      	cmp	r6, #0
 8006ad6:	ddeb      	ble.n	8006ab0 <__sflush_r+0xac>
 8006ad8:	4633      	mov	r3, r6
 8006ada:	463a      	mov	r2, r7
 8006adc:	4628      	mov	r0, r5
 8006ade:	6a21      	ldr	r1, [r4, #32]
 8006ae0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ae4:	47e0      	blx	ip
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dc07      	bgt.n	8006afa <__sflush_r+0xf6>
 8006aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af2:	f04f 30ff 	mov.w	r0, #4294967295
 8006af6:	81a3      	strh	r3, [r4, #12]
 8006af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006afa:	4407      	add	r7, r0
 8006afc:	1a36      	subs	r6, r6, r0
 8006afe:	e7e9      	b.n	8006ad4 <__sflush_r+0xd0>
 8006b00:	dfbffffe 	.word	0xdfbffffe

08006b04 <_fflush_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	b913      	cbnz	r3, 8006b14 <_fflush_r+0x10>
 8006b0e:	2500      	movs	r5, #0
 8006b10:	4628      	mov	r0, r5
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	b118      	cbz	r0, 8006b1e <_fflush_r+0x1a>
 8006b16:	6a03      	ldr	r3, [r0, #32]
 8006b18:	b90b      	cbnz	r3, 8006b1e <_fflush_r+0x1a>
 8006b1a:	f7fd fa7d 	bl	8004018 <__sinit>
 8006b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f3      	beq.n	8006b0e <_fflush_r+0xa>
 8006b26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b28:	07d0      	lsls	r0, r2, #31
 8006b2a:	d404      	bmi.n	8006b36 <_fflush_r+0x32>
 8006b2c:	0599      	lsls	r1, r3, #22
 8006b2e:	d402      	bmi.n	8006b36 <_fflush_r+0x32>
 8006b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b32:	f7fd fb88 	bl	8004246 <__retarget_lock_acquire_recursive>
 8006b36:	4628      	mov	r0, r5
 8006b38:	4621      	mov	r1, r4
 8006b3a:	f7ff ff63 	bl	8006a04 <__sflush_r>
 8006b3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b40:	4605      	mov	r5, r0
 8006b42:	07da      	lsls	r2, r3, #31
 8006b44:	d4e4      	bmi.n	8006b10 <_fflush_r+0xc>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	059b      	lsls	r3, r3, #22
 8006b4a:	d4e1      	bmi.n	8006b10 <_fflush_r+0xc>
 8006b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b4e:	f7fd fb7b 	bl	8004248 <__retarget_lock_release_recursive>
 8006b52:	e7dd      	b.n	8006b10 <_fflush_r+0xc>

08006b54 <memmove>:
 8006b54:	4288      	cmp	r0, r1
 8006b56:	b510      	push	{r4, lr}
 8006b58:	eb01 0402 	add.w	r4, r1, r2
 8006b5c:	d902      	bls.n	8006b64 <memmove+0x10>
 8006b5e:	4284      	cmp	r4, r0
 8006b60:	4623      	mov	r3, r4
 8006b62:	d807      	bhi.n	8006b74 <memmove+0x20>
 8006b64:	1e43      	subs	r3, r0, #1
 8006b66:	42a1      	cmp	r1, r4
 8006b68:	d008      	beq.n	8006b7c <memmove+0x28>
 8006b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b72:	e7f8      	b.n	8006b66 <memmove+0x12>
 8006b74:	4601      	mov	r1, r0
 8006b76:	4402      	add	r2, r0
 8006b78:	428a      	cmp	r2, r1
 8006b7a:	d100      	bne.n	8006b7e <memmove+0x2a>
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b86:	e7f7      	b.n	8006b78 <memmove+0x24>

08006b88 <strncmp>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	b16a      	cbz	r2, 8006ba8 <strncmp+0x20>
 8006b8c:	3901      	subs	r1, #1
 8006b8e:	1884      	adds	r4, r0, r2
 8006b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d103      	bne.n	8006ba4 <strncmp+0x1c>
 8006b9c:	42a0      	cmp	r0, r4
 8006b9e:	d001      	beq.n	8006ba4 <strncmp+0x1c>
 8006ba0:	2a00      	cmp	r2, #0
 8006ba2:	d1f5      	bne.n	8006b90 <strncmp+0x8>
 8006ba4:	1ad0      	subs	r0, r2, r3
 8006ba6:	bd10      	pop	{r4, pc}
 8006ba8:	4610      	mov	r0, r2
 8006baa:	e7fc      	b.n	8006ba6 <strncmp+0x1e>

08006bac <_sbrk_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	2300      	movs	r3, #0
 8006bb0:	4d05      	ldr	r5, [pc, #20]	@ (8006bc8 <_sbrk_r+0x1c>)
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	602b      	str	r3, [r5, #0]
 8006bb8:	f7fa fb98 	bl	80012ec <_sbrk>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_sbrk_r+0x1a>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_sbrk_r+0x1a>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	200003c8 	.word	0x200003c8

08006bcc <memcpy>:
 8006bcc:	440a      	add	r2, r1
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bd4:	d100      	bne.n	8006bd8 <memcpy+0xc>
 8006bd6:	4770      	bx	lr
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bde:	4291      	cmp	r1, r2
 8006be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006be4:	d1f9      	bne.n	8006bda <memcpy+0xe>
 8006be6:	bd10      	pop	{r4, pc}

08006be8 <nan>:
 8006be8:	2000      	movs	r0, #0
 8006bea:	4901      	ldr	r1, [pc, #4]	@ (8006bf0 <nan+0x8>)
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	7ff80000 	.word	0x7ff80000

08006bf4 <__assert_func>:
 8006bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4b09      	ldr	r3, [pc, #36]	@ (8006c20 <__assert_func+0x2c>)
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68d8      	ldr	r0, [r3, #12]
 8006c02:	b954      	cbnz	r4, 8006c1a <__assert_func+0x26>
 8006c04:	4b07      	ldr	r3, [pc, #28]	@ (8006c24 <__assert_func+0x30>)
 8006c06:	461c      	mov	r4, r3
 8006c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c0c:	9100      	str	r1, [sp, #0]
 8006c0e:	462b      	mov	r3, r5
 8006c10:	4905      	ldr	r1, [pc, #20]	@ (8006c28 <__assert_func+0x34>)
 8006c12:	f000 fba7 	bl	8007364 <fiprintf>
 8006c16:	f000 fbb7 	bl	8007388 <abort>
 8006c1a:	4b04      	ldr	r3, [pc, #16]	@ (8006c2c <__assert_func+0x38>)
 8006c1c:	e7f4      	b.n	8006c08 <__assert_func+0x14>
 8006c1e:	bf00      	nop
 8006c20:	20000018 	.word	0x20000018
 8006c24:	08007d25 	.word	0x08007d25
 8006c28:	08007cf7 	.word	0x08007cf7
 8006c2c:	08007cea 	.word	0x08007cea

08006c30 <_calloc_r>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	fba1 5402 	umull	r5, r4, r1, r2
 8006c36:	b93c      	cbnz	r4, 8006c48 <_calloc_r+0x18>
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7fe f9db 	bl	8004ff4 <_malloc_r>
 8006c3e:	4606      	mov	r6, r0
 8006c40:	b928      	cbnz	r0, 8006c4e <_calloc_r+0x1e>
 8006c42:	2600      	movs	r6, #0
 8006c44:	4630      	mov	r0, r6
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	220c      	movs	r2, #12
 8006c4a:	6002      	str	r2, [r0, #0]
 8006c4c:	e7f9      	b.n	8006c42 <_calloc_r+0x12>
 8006c4e:	462a      	mov	r2, r5
 8006c50:	4621      	mov	r1, r4
 8006c52:	f7fd fa7a 	bl	800414a <memset>
 8006c56:	e7f5      	b.n	8006c44 <_calloc_r+0x14>

08006c58 <rshift>:
 8006c58:	6903      	ldr	r3, [r0, #16]
 8006c5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c62:	f100 0414 	add.w	r4, r0, #20
 8006c66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c6a:	dd46      	ble.n	8006cfa <rshift+0xa2>
 8006c6c:	f011 011f 	ands.w	r1, r1, #31
 8006c70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c78:	d10c      	bne.n	8006c94 <rshift+0x3c>
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	f100 0710 	add.w	r7, r0, #16
 8006c80:	42b1      	cmp	r1, r6
 8006c82:	d335      	bcc.n	8006cf0 <rshift+0x98>
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	1eea      	subs	r2, r5, #3
 8006c8a:	4296      	cmp	r6, r2
 8006c8c:	bf38      	it	cc
 8006c8e:	2300      	movcc	r3, #0
 8006c90:	4423      	add	r3, r4
 8006c92:	e015      	b.n	8006cc0 <rshift+0x68>
 8006c94:	46a1      	mov	r9, r4
 8006c96:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c9a:	f1c1 0820 	rsb	r8, r1, #32
 8006c9e:	40cf      	lsrs	r7, r1
 8006ca0:	f105 0e04 	add.w	lr, r5, #4
 8006ca4:	4576      	cmp	r6, lr
 8006ca6:	46f4      	mov	ip, lr
 8006ca8:	d816      	bhi.n	8006cd8 <rshift+0x80>
 8006caa:	1a9a      	subs	r2, r3, r2
 8006cac:	0092      	lsls	r2, r2, #2
 8006cae:	3a04      	subs	r2, #4
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	42ae      	cmp	r6, r5
 8006cb4:	bf38      	it	cc
 8006cb6:	2200      	movcc	r2, #0
 8006cb8:	18a3      	adds	r3, r4, r2
 8006cba:	50a7      	str	r7, [r4, r2]
 8006cbc:	b107      	cbz	r7, 8006cc0 <rshift+0x68>
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	eba3 0204 	sub.w	r2, r3, r4
 8006cc6:	bf08      	it	eq
 8006cc8:	2300      	moveq	r3, #0
 8006cca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006cce:	6102      	str	r2, [r0, #16]
 8006cd0:	bf08      	it	eq
 8006cd2:	6143      	streq	r3, [r0, #20]
 8006cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cd8:	f8dc c000 	ldr.w	ip, [ip]
 8006cdc:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ce0:	ea4c 0707 	orr.w	r7, ip, r7
 8006ce4:	f849 7b04 	str.w	r7, [r9], #4
 8006ce8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cec:	40cf      	lsrs	r7, r1
 8006cee:	e7d9      	b.n	8006ca4 <rshift+0x4c>
 8006cf0:	f851 cb04 	ldr.w	ip, [r1], #4
 8006cf4:	f847 cf04 	str.w	ip, [r7, #4]!
 8006cf8:	e7c2      	b.n	8006c80 <rshift+0x28>
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	e7e0      	b.n	8006cc0 <rshift+0x68>

08006cfe <__hexdig_fun>:
 8006cfe:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006d02:	2b09      	cmp	r3, #9
 8006d04:	d802      	bhi.n	8006d0c <__hexdig_fun+0xe>
 8006d06:	3820      	subs	r0, #32
 8006d08:	b2c0      	uxtb	r0, r0
 8006d0a:	4770      	bx	lr
 8006d0c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006d10:	2b05      	cmp	r3, #5
 8006d12:	d801      	bhi.n	8006d18 <__hexdig_fun+0x1a>
 8006d14:	3847      	subs	r0, #71	@ 0x47
 8006d16:	e7f7      	b.n	8006d08 <__hexdig_fun+0xa>
 8006d18:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	d801      	bhi.n	8006d24 <__hexdig_fun+0x26>
 8006d20:	3827      	subs	r0, #39	@ 0x27
 8006d22:	e7f1      	b.n	8006d08 <__hexdig_fun+0xa>
 8006d24:	2000      	movs	r0, #0
 8006d26:	4770      	bx	lr

08006d28 <__gethex>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	468a      	mov	sl, r1
 8006d2e:	4690      	mov	r8, r2
 8006d30:	b085      	sub	sp, #20
 8006d32:	9302      	str	r3, [sp, #8]
 8006d34:	680b      	ldr	r3, [r1, #0]
 8006d36:	9001      	str	r0, [sp, #4]
 8006d38:	1c9c      	adds	r4, r3, #2
 8006d3a:	46a1      	mov	r9, r4
 8006d3c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006d40:	2830      	cmp	r0, #48	@ 0x30
 8006d42:	d0fa      	beq.n	8006d3a <__gethex+0x12>
 8006d44:	eba9 0303 	sub.w	r3, r9, r3
 8006d48:	f1a3 0b02 	sub.w	fp, r3, #2
 8006d4c:	f7ff ffd7 	bl	8006cfe <__hexdig_fun>
 8006d50:	4605      	mov	r5, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d168      	bne.n	8006e28 <__gethex+0x100>
 8006d56:	2201      	movs	r2, #1
 8006d58:	4648      	mov	r0, r9
 8006d5a:	499f      	ldr	r1, [pc, #636]	@ (8006fd8 <__gethex+0x2b0>)
 8006d5c:	f7ff ff14 	bl	8006b88 <strncmp>
 8006d60:	4607      	mov	r7, r0
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d167      	bne.n	8006e36 <__gethex+0x10e>
 8006d66:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006d6a:	4626      	mov	r6, r4
 8006d6c:	f7ff ffc7 	bl	8006cfe <__hexdig_fun>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d062      	beq.n	8006e3a <__gethex+0x112>
 8006d74:	4623      	mov	r3, r4
 8006d76:	7818      	ldrb	r0, [r3, #0]
 8006d78:	4699      	mov	r9, r3
 8006d7a:	2830      	cmp	r0, #48	@ 0x30
 8006d7c:	f103 0301 	add.w	r3, r3, #1
 8006d80:	d0f9      	beq.n	8006d76 <__gethex+0x4e>
 8006d82:	f7ff ffbc 	bl	8006cfe <__hexdig_fun>
 8006d86:	fab0 f580 	clz	r5, r0
 8006d8a:	f04f 0b01 	mov.w	fp, #1
 8006d8e:	096d      	lsrs	r5, r5, #5
 8006d90:	464a      	mov	r2, r9
 8006d92:	4616      	mov	r6, r2
 8006d94:	7830      	ldrb	r0, [r6, #0]
 8006d96:	3201      	adds	r2, #1
 8006d98:	f7ff ffb1 	bl	8006cfe <__hexdig_fun>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1f8      	bne.n	8006d92 <__gethex+0x6a>
 8006da0:	2201      	movs	r2, #1
 8006da2:	4630      	mov	r0, r6
 8006da4:	498c      	ldr	r1, [pc, #560]	@ (8006fd8 <__gethex+0x2b0>)
 8006da6:	f7ff feef 	bl	8006b88 <strncmp>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d13f      	bne.n	8006e2e <__gethex+0x106>
 8006dae:	b944      	cbnz	r4, 8006dc2 <__gethex+0x9a>
 8006db0:	1c74      	adds	r4, r6, #1
 8006db2:	4622      	mov	r2, r4
 8006db4:	4616      	mov	r6, r2
 8006db6:	7830      	ldrb	r0, [r6, #0]
 8006db8:	3201      	adds	r2, #1
 8006dba:	f7ff ffa0 	bl	8006cfe <__hexdig_fun>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d1f8      	bne.n	8006db4 <__gethex+0x8c>
 8006dc2:	1ba4      	subs	r4, r4, r6
 8006dc4:	00a7      	lsls	r7, r4, #2
 8006dc6:	7833      	ldrb	r3, [r6, #0]
 8006dc8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006dcc:	2b50      	cmp	r3, #80	@ 0x50
 8006dce:	d13e      	bne.n	8006e4e <__gethex+0x126>
 8006dd0:	7873      	ldrb	r3, [r6, #1]
 8006dd2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006dd4:	d033      	beq.n	8006e3e <__gethex+0x116>
 8006dd6:	2b2d      	cmp	r3, #45	@ 0x2d
 8006dd8:	d034      	beq.n	8006e44 <__gethex+0x11c>
 8006dda:	2400      	movs	r4, #0
 8006ddc:	1c71      	adds	r1, r6, #1
 8006dde:	7808      	ldrb	r0, [r1, #0]
 8006de0:	f7ff ff8d 	bl	8006cfe <__hexdig_fun>
 8006de4:	1e43      	subs	r3, r0, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b18      	cmp	r3, #24
 8006dea:	d830      	bhi.n	8006e4e <__gethex+0x126>
 8006dec:	f1a0 0210 	sub.w	r2, r0, #16
 8006df0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006df4:	f7ff ff83 	bl	8006cfe <__hexdig_fun>
 8006df8:	f100 3cff 	add.w	ip, r0, #4294967295
 8006dfc:	fa5f fc8c 	uxtb.w	ip, ip
 8006e00:	f1bc 0f18 	cmp.w	ip, #24
 8006e04:	f04f 030a 	mov.w	r3, #10
 8006e08:	d91e      	bls.n	8006e48 <__gethex+0x120>
 8006e0a:	b104      	cbz	r4, 8006e0e <__gethex+0xe6>
 8006e0c:	4252      	negs	r2, r2
 8006e0e:	4417      	add	r7, r2
 8006e10:	f8ca 1000 	str.w	r1, [sl]
 8006e14:	b1ed      	cbz	r5, 8006e52 <__gethex+0x12a>
 8006e16:	f1bb 0f00 	cmp.w	fp, #0
 8006e1a:	bf0c      	ite	eq
 8006e1c:	2506      	moveq	r5, #6
 8006e1e:	2500      	movne	r5, #0
 8006e20:	4628      	mov	r0, r5
 8006e22:	b005      	add	sp, #20
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	2500      	movs	r5, #0
 8006e2a:	462c      	mov	r4, r5
 8006e2c:	e7b0      	b.n	8006d90 <__gethex+0x68>
 8006e2e:	2c00      	cmp	r4, #0
 8006e30:	d1c7      	bne.n	8006dc2 <__gethex+0x9a>
 8006e32:	4627      	mov	r7, r4
 8006e34:	e7c7      	b.n	8006dc6 <__gethex+0x9e>
 8006e36:	464e      	mov	r6, r9
 8006e38:	462f      	mov	r7, r5
 8006e3a:	2501      	movs	r5, #1
 8006e3c:	e7c3      	b.n	8006dc6 <__gethex+0x9e>
 8006e3e:	2400      	movs	r4, #0
 8006e40:	1cb1      	adds	r1, r6, #2
 8006e42:	e7cc      	b.n	8006dde <__gethex+0xb6>
 8006e44:	2401      	movs	r4, #1
 8006e46:	e7fb      	b.n	8006e40 <__gethex+0x118>
 8006e48:	fb03 0002 	mla	r0, r3, r2, r0
 8006e4c:	e7ce      	b.n	8006dec <__gethex+0xc4>
 8006e4e:	4631      	mov	r1, r6
 8006e50:	e7de      	b.n	8006e10 <__gethex+0xe8>
 8006e52:	4629      	mov	r1, r5
 8006e54:	eba6 0309 	sub.w	r3, r6, r9
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	2b07      	cmp	r3, #7
 8006e5c:	dc0a      	bgt.n	8006e74 <__gethex+0x14c>
 8006e5e:	9801      	ldr	r0, [sp, #4]
 8006e60:	f7fe f954 	bl	800510c <_Balloc>
 8006e64:	4604      	mov	r4, r0
 8006e66:	b940      	cbnz	r0, 8006e7a <__gethex+0x152>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	21e4      	movs	r1, #228	@ 0xe4
 8006e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8006fdc <__gethex+0x2b4>)
 8006e6e:	485c      	ldr	r0, [pc, #368]	@ (8006fe0 <__gethex+0x2b8>)
 8006e70:	f7ff fec0 	bl	8006bf4 <__assert_func>
 8006e74:	3101      	adds	r1, #1
 8006e76:	105b      	asrs	r3, r3, #1
 8006e78:	e7ef      	b.n	8006e5a <__gethex+0x132>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f100 0a14 	add.w	sl, r0, #20
 8006e80:	4655      	mov	r5, sl
 8006e82:	469b      	mov	fp, r3
 8006e84:	45b1      	cmp	r9, r6
 8006e86:	d337      	bcc.n	8006ef8 <__gethex+0x1d0>
 8006e88:	f845 bb04 	str.w	fp, [r5], #4
 8006e8c:	eba5 050a 	sub.w	r5, r5, sl
 8006e90:	10ad      	asrs	r5, r5, #2
 8006e92:	6125      	str	r5, [r4, #16]
 8006e94:	4658      	mov	r0, fp
 8006e96:	f7fe fa2b 	bl	80052f0 <__hi0bits>
 8006e9a:	016d      	lsls	r5, r5, #5
 8006e9c:	f8d8 6000 	ldr.w	r6, [r8]
 8006ea0:	1a2d      	subs	r5, r5, r0
 8006ea2:	42b5      	cmp	r5, r6
 8006ea4:	dd54      	ble.n	8006f50 <__gethex+0x228>
 8006ea6:	1bad      	subs	r5, r5, r6
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7fe fdb3 	bl	8005a16 <__any_on>
 8006eb0:	4681      	mov	r9, r0
 8006eb2:	b178      	cbz	r0, 8006ed4 <__gethex+0x1ac>
 8006eb4:	f04f 0901 	mov.w	r9, #1
 8006eb8:	1e6b      	subs	r3, r5, #1
 8006eba:	1159      	asrs	r1, r3, #5
 8006ebc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006ec0:	f003 021f 	and.w	r2, r3, #31
 8006ec4:	fa09 f202 	lsl.w	r2, r9, r2
 8006ec8:	420a      	tst	r2, r1
 8006eca:	d003      	beq.n	8006ed4 <__gethex+0x1ac>
 8006ecc:	454b      	cmp	r3, r9
 8006ece:	dc36      	bgt.n	8006f3e <__gethex+0x216>
 8006ed0:	f04f 0902 	mov.w	r9, #2
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7ff febe 	bl	8006c58 <rshift>
 8006edc:	442f      	add	r7, r5
 8006ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ee2:	42bb      	cmp	r3, r7
 8006ee4:	da42      	bge.n	8006f6c <__gethex+0x244>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	9801      	ldr	r0, [sp, #4]
 8006eea:	f7fe f94f 	bl	800518c <_Bfree>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ef2:	25a3      	movs	r5, #163	@ 0xa3
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e793      	b.n	8006e20 <__gethex+0xf8>
 8006ef8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006efc:	2a2e      	cmp	r2, #46	@ 0x2e
 8006efe:	d012      	beq.n	8006f26 <__gethex+0x1fe>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d104      	bne.n	8006f0e <__gethex+0x1e6>
 8006f04:	f845 bb04 	str.w	fp, [r5], #4
 8006f08:	f04f 0b00 	mov.w	fp, #0
 8006f0c:	465b      	mov	r3, fp
 8006f0e:	7830      	ldrb	r0, [r6, #0]
 8006f10:	9303      	str	r3, [sp, #12]
 8006f12:	f7ff fef4 	bl	8006cfe <__hexdig_fun>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	f000 000f 	and.w	r0, r0, #15
 8006f1c:	4098      	lsls	r0, r3
 8006f1e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006f22:	3304      	adds	r3, #4
 8006f24:	e7ae      	b.n	8006e84 <__gethex+0x15c>
 8006f26:	45b1      	cmp	r9, r6
 8006f28:	d8ea      	bhi.n	8006f00 <__gethex+0x1d8>
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	492a      	ldr	r1, [pc, #168]	@ (8006fd8 <__gethex+0x2b0>)
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	f7ff fe29 	bl	8006b88 <strncmp>
 8006f36:	9b03      	ldr	r3, [sp, #12]
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d1e1      	bne.n	8006f00 <__gethex+0x1d8>
 8006f3c:	e7a2      	b.n	8006e84 <__gethex+0x15c>
 8006f3e:	4620      	mov	r0, r4
 8006f40:	1ea9      	subs	r1, r5, #2
 8006f42:	f7fe fd68 	bl	8005a16 <__any_on>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d0c2      	beq.n	8006ed0 <__gethex+0x1a8>
 8006f4a:	f04f 0903 	mov.w	r9, #3
 8006f4e:	e7c1      	b.n	8006ed4 <__gethex+0x1ac>
 8006f50:	da09      	bge.n	8006f66 <__gethex+0x23e>
 8006f52:	1b75      	subs	r5, r6, r5
 8006f54:	4621      	mov	r1, r4
 8006f56:	462a      	mov	r2, r5
 8006f58:	9801      	ldr	r0, [sp, #4]
 8006f5a:	f7fe fb2d 	bl	80055b8 <__lshift>
 8006f5e:	4604      	mov	r4, r0
 8006f60:	1b7f      	subs	r7, r7, r5
 8006f62:	f100 0a14 	add.w	sl, r0, #20
 8006f66:	f04f 0900 	mov.w	r9, #0
 8006f6a:	e7b8      	b.n	8006ede <__gethex+0x1b6>
 8006f6c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f70:	42bd      	cmp	r5, r7
 8006f72:	dd6f      	ble.n	8007054 <__gethex+0x32c>
 8006f74:	1bed      	subs	r5, r5, r7
 8006f76:	42ae      	cmp	r6, r5
 8006f78:	dc34      	bgt.n	8006fe4 <__gethex+0x2bc>
 8006f7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d022      	beq.n	8006fc8 <__gethex+0x2a0>
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d024      	beq.n	8006fd0 <__gethex+0x2a8>
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d115      	bne.n	8006fb6 <__gethex+0x28e>
 8006f8a:	42ae      	cmp	r6, r5
 8006f8c:	d113      	bne.n	8006fb6 <__gethex+0x28e>
 8006f8e:	2e01      	cmp	r6, #1
 8006f90:	d10b      	bne.n	8006faa <__gethex+0x282>
 8006f92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f96:	9a02      	ldr	r2, [sp, #8]
 8006f98:	2562      	movs	r5, #98	@ 0x62
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	6123      	str	r3, [r4, #16]
 8006fa0:	f8ca 3000 	str.w	r3, [sl]
 8006fa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fa6:	601c      	str	r4, [r3, #0]
 8006fa8:	e73a      	b.n	8006e20 <__gethex+0xf8>
 8006faa:	4620      	mov	r0, r4
 8006fac:	1e71      	subs	r1, r6, #1
 8006fae:	f7fe fd32 	bl	8005a16 <__any_on>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d1ed      	bne.n	8006f92 <__gethex+0x26a>
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	9801      	ldr	r0, [sp, #4]
 8006fba:	f7fe f8e7 	bl	800518c <_Bfree>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fc2:	2550      	movs	r5, #80	@ 0x50
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e72b      	b.n	8006e20 <__gethex+0xf8>
 8006fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f3      	bne.n	8006fb6 <__gethex+0x28e>
 8006fce:	e7e0      	b.n	8006f92 <__gethex+0x26a>
 8006fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1dd      	bne.n	8006f92 <__gethex+0x26a>
 8006fd6:	e7ee      	b.n	8006fb6 <__gethex+0x28e>
 8006fd8:	08007b78 	.word	0x08007b78
 8006fdc:	08007a0b 	.word	0x08007a0b
 8006fe0:	08007d26 	.word	0x08007d26
 8006fe4:	1e6f      	subs	r7, r5, #1
 8006fe6:	f1b9 0f00 	cmp.w	r9, #0
 8006fea:	d130      	bne.n	800704e <__gethex+0x326>
 8006fec:	b127      	cbz	r7, 8006ff8 <__gethex+0x2d0>
 8006fee:	4639      	mov	r1, r7
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f7fe fd10 	bl	8005a16 <__any_on>
 8006ff6:	4681      	mov	r9, r0
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	1b76      	subs	r6, r6, r5
 8006ffe:	2502      	movs	r5, #2
 8007000:	117a      	asrs	r2, r7, #5
 8007002:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007006:	f007 071f 	and.w	r7, r7, #31
 800700a:	40bb      	lsls	r3, r7
 800700c:	4213      	tst	r3, r2
 800700e:	4620      	mov	r0, r4
 8007010:	bf18      	it	ne
 8007012:	f049 0902 	orrne.w	r9, r9, #2
 8007016:	f7ff fe1f 	bl	8006c58 <rshift>
 800701a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800701e:	f1b9 0f00 	cmp.w	r9, #0
 8007022:	d047      	beq.n	80070b4 <__gethex+0x38c>
 8007024:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d015      	beq.n	8007058 <__gethex+0x330>
 800702c:	2b03      	cmp	r3, #3
 800702e:	d017      	beq.n	8007060 <__gethex+0x338>
 8007030:	2b01      	cmp	r3, #1
 8007032:	d109      	bne.n	8007048 <__gethex+0x320>
 8007034:	f019 0f02 	tst.w	r9, #2
 8007038:	d006      	beq.n	8007048 <__gethex+0x320>
 800703a:	f8da 3000 	ldr.w	r3, [sl]
 800703e:	ea49 0903 	orr.w	r9, r9, r3
 8007042:	f019 0f01 	tst.w	r9, #1
 8007046:	d10e      	bne.n	8007066 <__gethex+0x33e>
 8007048:	f045 0510 	orr.w	r5, r5, #16
 800704c:	e032      	b.n	80070b4 <__gethex+0x38c>
 800704e:	f04f 0901 	mov.w	r9, #1
 8007052:	e7d1      	b.n	8006ff8 <__gethex+0x2d0>
 8007054:	2501      	movs	r5, #1
 8007056:	e7e2      	b.n	800701e <__gethex+0x2f6>
 8007058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800705a:	f1c3 0301 	rsb	r3, r3, #1
 800705e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0f0      	beq.n	8007048 <__gethex+0x320>
 8007066:	f04f 0c00 	mov.w	ip, #0
 800706a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800706e:	f104 0314 	add.w	r3, r4, #20
 8007072:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007076:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800707a:	4618      	mov	r0, r3
 800707c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007080:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007084:	d01b      	beq.n	80070be <__gethex+0x396>
 8007086:	3201      	adds	r2, #1
 8007088:	6002      	str	r2, [r0, #0]
 800708a:	2d02      	cmp	r5, #2
 800708c:	f104 0314 	add.w	r3, r4, #20
 8007090:	d13c      	bne.n	800710c <__gethex+0x3e4>
 8007092:	f8d8 2000 	ldr.w	r2, [r8]
 8007096:	3a01      	subs	r2, #1
 8007098:	42b2      	cmp	r2, r6
 800709a:	d109      	bne.n	80070b0 <__gethex+0x388>
 800709c:	2201      	movs	r2, #1
 800709e:	1171      	asrs	r1, r6, #5
 80070a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070a4:	f006 061f 	and.w	r6, r6, #31
 80070a8:	fa02 f606 	lsl.w	r6, r2, r6
 80070ac:	421e      	tst	r6, r3
 80070ae:	d13a      	bne.n	8007126 <__gethex+0x3fe>
 80070b0:	f045 0520 	orr.w	r5, r5, #32
 80070b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070b6:	601c      	str	r4, [r3, #0]
 80070b8:	9b02      	ldr	r3, [sp, #8]
 80070ba:	601f      	str	r7, [r3, #0]
 80070bc:	e6b0      	b.n	8006e20 <__gethex+0xf8>
 80070be:	4299      	cmp	r1, r3
 80070c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80070c4:	d8d9      	bhi.n	800707a <__gethex+0x352>
 80070c6:	68a3      	ldr	r3, [r4, #8]
 80070c8:	459b      	cmp	fp, r3
 80070ca:	db17      	blt.n	80070fc <__gethex+0x3d4>
 80070cc:	6861      	ldr	r1, [r4, #4]
 80070ce:	9801      	ldr	r0, [sp, #4]
 80070d0:	3101      	adds	r1, #1
 80070d2:	f7fe f81b 	bl	800510c <_Balloc>
 80070d6:	4681      	mov	r9, r0
 80070d8:	b918      	cbnz	r0, 80070e2 <__gethex+0x3ba>
 80070da:	4602      	mov	r2, r0
 80070dc:	2184      	movs	r1, #132	@ 0x84
 80070de:	4b19      	ldr	r3, [pc, #100]	@ (8007144 <__gethex+0x41c>)
 80070e0:	e6c5      	b.n	8006e6e <__gethex+0x146>
 80070e2:	6922      	ldr	r2, [r4, #16]
 80070e4:	f104 010c 	add.w	r1, r4, #12
 80070e8:	3202      	adds	r2, #2
 80070ea:	0092      	lsls	r2, r2, #2
 80070ec:	300c      	adds	r0, #12
 80070ee:	f7ff fd6d 	bl	8006bcc <memcpy>
 80070f2:	4621      	mov	r1, r4
 80070f4:	9801      	ldr	r0, [sp, #4]
 80070f6:	f7fe f849 	bl	800518c <_Bfree>
 80070fa:	464c      	mov	r4, r9
 80070fc:	6923      	ldr	r3, [r4, #16]
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	6122      	str	r2, [r4, #16]
 8007102:	2201      	movs	r2, #1
 8007104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007108:	615a      	str	r2, [r3, #20]
 800710a:	e7be      	b.n	800708a <__gethex+0x362>
 800710c:	6922      	ldr	r2, [r4, #16]
 800710e:	455a      	cmp	r2, fp
 8007110:	dd0b      	ble.n	800712a <__gethex+0x402>
 8007112:	2101      	movs	r1, #1
 8007114:	4620      	mov	r0, r4
 8007116:	f7ff fd9f 	bl	8006c58 <rshift>
 800711a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800711e:	3701      	adds	r7, #1
 8007120:	42bb      	cmp	r3, r7
 8007122:	f6ff aee0 	blt.w	8006ee6 <__gethex+0x1be>
 8007126:	2501      	movs	r5, #1
 8007128:	e7c2      	b.n	80070b0 <__gethex+0x388>
 800712a:	f016 061f 	ands.w	r6, r6, #31
 800712e:	d0fa      	beq.n	8007126 <__gethex+0x3fe>
 8007130:	4453      	add	r3, sl
 8007132:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007136:	f7fe f8db 	bl	80052f0 <__hi0bits>
 800713a:	f1c6 0620 	rsb	r6, r6, #32
 800713e:	42b0      	cmp	r0, r6
 8007140:	dbe7      	blt.n	8007112 <__gethex+0x3ea>
 8007142:	e7f0      	b.n	8007126 <__gethex+0x3fe>
 8007144:	08007a0b 	.word	0x08007a0b

08007148 <L_shift>:
 8007148:	f1c2 0208 	rsb	r2, r2, #8
 800714c:	0092      	lsls	r2, r2, #2
 800714e:	b570      	push	{r4, r5, r6, lr}
 8007150:	f1c2 0620 	rsb	r6, r2, #32
 8007154:	6843      	ldr	r3, [r0, #4]
 8007156:	6804      	ldr	r4, [r0, #0]
 8007158:	fa03 f506 	lsl.w	r5, r3, r6
 800715c:	432c      	orrs	r4, r5
 800715e:	40d3      	lsrs	r3, r2
 8007160:	6004      	str	r4, [r0, #0]
 8007162:	f840 3f04 	str.w	r3, [r0, #4]!
 8007166:	4288      	cmp	r0, r1
 8007168:	d3f4      	bcc.n	8007154 <L_shift+0xc>
 800716a:	bd70      	pop	{r4, r5, r6, pc}

0800716c <__match>:
 800716c:	b530      	push	{r4, r5, lr}
 800716e:	6803      	ldr	r3, [r0, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007176:	b914      	cbnz	r4, 800717e <__match+0x12>
 8007178:	6003      	str	r3, [r0, #0]
 800717a:	2001      	movs	r0, #1
 800717c:	bd30      	pop	{r4, r5, pc}
 800717e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007182:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007186:	2d19      	cmp	r5, #25
 8007188:	bf98      	it	ls
 800718a:	3220      	addls	r2, #32
 800718c:	42a2      	cmp	r2, r4
 800718e:	d0f0      	beq.n	8007172 <__match+0x6>
 8007190:	2000      	movs	r0, #0
 8007192:	e7f3      	b.n	800717c <__match+0x10>

08007194 <__hexnan>:
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	2500      	movs	r5, #0
 800719a:	680b      	ldr	r3, [r1, #0]
 800719c:	4682      	mov	sl, r0
 800719e:	115e      	asrs	r6, r3, #5
 80071a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071a4:	f013 031f 	ands.w	r3, r3, #31
 80071a8:	bf18      	it	ne
 80071aa:	3604      	addne	r6, #4
 80071ac:	1f37      	subs	r7, r6, #4
 80071ae:	4690      	mov	r8, r2
 80071b0:	46b9      	mov	r9, r7
 80071b2:	463c      	mov	r4, r7
 80071b4:	46ab      	mov	fp, r5
 80071b6:	b087      	sub	sp, #28
 80071b8:	6801      	ldr	r1, [r0, #0]
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	f846 5c04 	str.w	r5, [r6, #-4]
 80071c0:	9502      	str	r5, [sp, #8]
 80071c2:	784a      	ldrb	r2, [r1, #1]
 80071c4:	1c4b      	adds	r3, r1, #1
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	b342      	cbz	r2, 800721c <__hexnan+0x88>
 80071ca:	4610      	mov	r0, r2
 80071cc:	9105      	str	r1, [sp, #20]
 80071ce:	9204      	str	r2, [sp, #16]
 80071d0:	f7ff fd95 	bl	8006cfe <__hexdig_fun>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d151      	bne.n	800727c <__hexnan+0xe8>
 80071d8:	9a04      	ldr	r2, [sp, #16]
 80071da:	9905      	ldr	r1, [sp, #20]
 80071dc:	2a20      	cmp	r2, #32
 80071de:	d818      	bhi.n	8007212 <__hexnan+0x7e>
 80071e0:	9b02      	ldr	r3, [sp, #8]
 80071e2:	459b      	cmp	fp, r3
 80071e4:	dd13      	ble.n	800720e <__hexnan+0x7a>
 80071e6:	454c      	cmp	r4, r9
 80071e8:	d206      	bcs.n	80071f8 <__hexnan+0x64>
 80071ea:	2d07      	cmp	r5, #7
 80071ec:	dc04      	bgt.n	80071f8 <__hexnan+0x64>
 80071ee:	462a      	mov	r2, r5
 80071f0:	4649      	mov	r1, r9
 80071f2:	4620      	mov	r0, r4
 80071f4:	f7ff ffa8 	bl	8007148 <L_shift>
 80071f8:	4544      	cmp	r4, r8
 80071fa:	d952      	bls.n	80072a2 <__hexnan+0x10e>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f1a4 0904 	sub.w	r9, r4, #4
 8007202:	f844 3c04 	str.w	r3, [r4, #-4]
 8007206:	461d      	mov	r5, r3
 8007208:	464c      	mov	r4, r9
 800720a:	f8cd b008 	str.w	fp, [sp, #8]
 800720e:	9903      	ldr	r1, [sp, #12]
 8007210:	e7d7      	b.n	80071c2 <__hexnan+0x2e>
 8007212:	2a29      	cmp	r2, #41	@ 0x29
 8007214:	d157      	bne.n	80072c6 <__hexnan+0x132>
 8007216:	3102      	adds	r1, #2
 8007218:	f8ca 1000 	str.w	r1, [sl]
 800721c:	f1bb 0f00 	cmp.w	fp, #0
 8007220:	d051      	beq.n	80072c6 <__hexnan+0x132>
 8007222:	454c      	cmp	r4, r9
 8007224:	d206      	bcs.n	8007234 <__hexnan+0xa0>
 8007226:	2d07      	cmp	r5, #7
 8007228:	dc04      	bgt.n	8007234 <__hexnan+0xa0>
 800722a:	462a      	mov	r2, r5
 800722c:	4649      	mov	r1, r9
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff ff8a 	bl	8007148 <L_shift>
 8007234:	4544      	cmp	r4, r8
 8007236:	d936      	bls.n	80072a6 <__hexnan+0x112>
 8007238:	4623      	mov	r3, r4
 800723a:	f1a8 0204 	sub.w	r2, r8, #4
 800723e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007242:	429f      	cmp	r7, r3
 8007244:	f842 1f04 	str.w	r1, [r2, #4]!
 8007248:	d2f9      	bcs.n	800723e <__hexnan+0xaa>
 800724a:	1b3b      	subs	r3, r7, r4
 800724c:	f023 0303 	bic.w	r3, r3, #3
 8007250:	3304      	adds	r3, #4
 8007252:	3401      	adds	r4, #1
 8007254:	3e03      	subs	r6, #3
 8007256:	42b4      	cmp	r4, r6
 8007258:	bf88      	it	hi
 800725a:	2304      	movhi	r3, #4
 800725c:	2200      	movs	r2, #0
 800725e:	4443      	add	r3, r8
 8007260:	f843 2b04 	str.w	r2, [r3], #4
 8007264:	429f      	cmp	r7, r3
 8007266:	d2fb      	bcs.n	8007260 <__hexnan+0xcc>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	b91b      	cbnz	r3, 8007274 <__hexnan+0xe0>
 800726c:	4547      	cmp	r7, r8
 800726e:	d128      	bne.n	80072c2 <__hexnan+0x12e>
 8007270:	2301      	movs	r3, #1
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	2005      	movs	r0, #5
 8007276:	b007      	add	sp, #28
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	3501      	adds	r5, #1
 800727e:	2d08      	cmp	r5, #8
 8007280:	f10b 0b01 	add.w	fp, fp, #1
 8007284:	dd06      	ble.n	8007294 <__hexnan+0x100>
 8007286:	4544      	cmp	r4, r8
 8007288:	d9c1      	bls.n	800720e <__hexnan+0x7a>
 800728a:	2300      	movs	r3, #0
 800728c:	2501      	movs	r5, #1
 800728e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007292:	3c04      	subs	r4, #4
 8007294:	6822      	ldr	r2, [r4, #0]
 8007296:	f000 000f 	and.w	r0, r0, #15
 800729a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800729e:	6020      	str	r0, [r4, #0]
 80072a0:	e7b5      	b.n	800720e <__hexnan+0x7a>
 80072a2:	2508      	movs	r5, #8
 80072a4:	e7b3      	b.n	800720e <__hexnan+0x7a>
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0dd      	beq.n	8007268 <__hexnan+0xd4>
 80072ac:	f04f 32ff 	mov.w	r2, #4294967295
 80072b0:	f1c3 0320 	rsb	r3, r3, #32
 80072b4:	40da      	lsrs	r2, r3
 80072b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80072ba:	4013      	ands	r3, r2
 80072bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80072c0:	e7d2      	b.n	8007268 <__hexnan+0xd4>
 80072c2:	3f04      	subs	r7, #4
 80072c4:	e7d0      	b.n	8007268 <__hexnan+0xd4>
 80072c6:	2004      	movs	r0, #4
 80072c8:	e7d5      	b.n	8007276 <__hexnan+0xe2>

080072ca <__ascii_mbtowc>:
 80072ca:	b082      	sub	sp, #8
 80072cc:	b901      	cbnz	r1, 80072d0 <__ascii_mbtowc+0x6>
 80072ce:	a901      	add	r1, sp, #4
 80072d0:	b142      	cbz	r2, 80072e4 <__ascii_mbtowc+0x1a>
 80072d2:	b14b      	cbz	r3, 80072e8 <__ascii_mbtowc+0x1e>
 80072d4:	7813      	ldrb	r3, [r2, #0]
 80072d6:	600b      	str	r3, [r1, #0]
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	1e10      	subs	r0, r2, #0
 80072dc:	bf18      	it	ne
 80072de:	2001      	movne	r0, #1
 80072e0:	b002      	add	sp, #8
 80072e2:	4770      	bx	lr
 80072e4:	4610      	mov	r0, r2
 80072e6:	e7fb      	b.n	80072e0 <__ascii_mbtowc+0x16>
 80072e8:	f06f 0001 	mvn.w	r0, #1
 80072ec:	e7f8      	b.n	80072e0 <__ascii_mbtowc+0x16>

080072ee <_realloc_r>:
 80072ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f2:	4680      	mov	r8, r0
 80072f4:	4615      	mov	r5, r2
 80072f6:	460c      	mov	r4, r1
 80072f8:	b921      	cbnz	r1, 8007304 <_realloc_r+0x16>
 80072fa:	4611      	mov	r1, r2
 80072fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007300:	f7fd be78 	b.w	8004ff4 <_malloc_r>
 8007304:	b92a      	cbnz	r2, 8007312 <_realloc_r+0x24>
 8007306:	f7fd fe03 	bl	8004f10 <_free_r>
 800730a:	2400      	movs	r4, #0
 800730c:	4620      	mov	r0, r4
 800730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007312:	f000 f840 	bl	8007396 <_malloc_usable_size_r>
 8007316:	4285      	cmp	r5, r0
 8007318:	4606      	mov	r6, r0
 800731a:	d802      	bhi.n	8007322 <_realloc_r+0x34>
 800731c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007320:	d8f4      	bhi.n	800730c <_realloc_r+0x1e>
 8007322:	4629      	mov	r1, r5
 8007324:	4640      	mov	r0, r8
 8007326:	f7fd fe65 	bl	8004ff4 <_malloc_r>
 800732a:	4607      	mov	r7, r0
 800732c:	2800      	cmp	r0, #0
 800732e:	d0ec      	beq.n	800730a <_realloc_r+0x1c>
 8007330:	42b5      	cmp	r5, r6
 8007332:	462a      	mov	r2, r5
 8007334:	4621      	mov	r1, r4
 8007336:	bf28      	it	cs
 8007338:	4632      	movcs	r2, r6
 800733a:	f7ff fc47 	bl	8006bcc <memcpy>
 800733e:	4621      	mov	r1, r4
 8007340:	4640      	mov	r0, r8
 8007342:	f7fd fde5 	bl	8004f10 <_free_r>
 8007346:	463c      	mov	r4, r7
 8007348:	e7e0      	b.n	800730c <_realloc_r+0x1e>

0800734a <__ascii_wctomb>:
 800734a:	4603      	mov	r3, r0
 800734c:	4608      	mov	r0, r1
 800734e:	b141      	cbz	r1, 8007362 <__ascii_wctomb+0x18>
 8007350:	2aff      	cmp	r2, #255	@ 0xff
 8007352:	d904      	bls.n	800735e <__ascii_wctomb+0x14>
 8007354:	228a      	movs	r2, #138	@ 0x8a
 8007356:	f04f 30ff 	mov.w	r0, #4294967295
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	4770      	bx	lr
 800735e:	2001      	movs	r0, #1
 8007360:	700a      	strb	r2, [r1, #0]
 8007362:	4770      	bx	lr

08007364 <fiprintf>:
 8007364:	b40e      	push	{r1, r2, r3}
 8007366:	b503      	push	{r0, r1, lr}
 8007368:	4601      	mov	r1, r0
 800736a:	ab03      	add	r3, sp, #12
 800736c:	4805      	ldr	r0, [pc, #20]	@ (8007384 <fiprintf+0x20>)
 800736e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	f000 f83d 	bl	80073f4 <_vfiprintf_r>
 800737a:	b002      	add	sp, #8
 800737c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007380:	b003      	add	sp, #12
 8007382:	4770      	bx	lr
 8007384:	20000018 	.word	0x20000018

08007388 <abort>:
 8007388:	2006      	movs	r0, #6
 800738a:	b508      	push	{r3, lr}
 800738c:	f000 fa06 	bl	800779c <raise>
 8007390:	2001      	movs	r0, #1
 8007392:	f7f9 ff36 	bl	8001202 <_exit>

08007396 <_malloc_usable_size_r>:
 8007396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739a:	1f18      	subs	r0, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfbc      	itt	lt
 80073a0:	580b      	ldrlt	r3, [r1, r0]
 80073a2:	18c0      	addlt	r0, r0, r3
 80073a4:	4770      	bx	lr

080073a6 <__sfputc_r>:
 80073a6:	6893      	ldr	r3, [r2, #8]
 80073a8:	b410      	push	{r4}
 80073aa:	3b01      	subs	r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	6093      	str	r3, [r2, #8]
 80073b0:	da07      	bge.n	80073c2 <__sfputc_r+0x1c>
 80073b2:	6994      	ldr	r4, [r2, #24]
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	db01      	blt.n	80073bc <__sfputc_r+0x16>
 80073b8:	290a      	cmp	r1, #10
 80073ba:	d102      	bne.n	80073c2 <__sfputc_r+0x1c>
 80073bc:	bc10      	pop	{r4}
 80073be:	f000 b931 	b.w	8007624 <__swbuf_r>
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	1c58      	adds	r0, r3, #1
 80073c6:	6010      	str	r0, [r2, #0]
 80073c8:	7019      	strb	r1, [r3, #0]
 80073ca:	4608      	mov	r0, r1
 80073cc:	bc10      	pop	{r4}
 80073ce:	4770      	bx	lr

080073d0 <__sfputs_r>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	4606      	mov	r6, r0
 80073d4:	460f      	mov	r7, r1
 80073d6:	4614      	mov	r4, r2
 80073d8:	18d5      	adds	r5, r2, r3
 80073da:	42ac      	cmp	r4, r5
 80073dc:	d101      	bne.n	80073e2 <__sfputs_r+0x12>
 80073de:	2000      	movs	r0, #0
 80073e0:	e007      	b.n	80073f2 <__sfputs_r+0x22>
 80073e2:	463a      	mov	r2, r7
 80073e4:	4630      	mov	r0, r6
 80073e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ea:	f7ff ffdc 	bl	80073a6 <__sfputc_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	d1f3      	bne.n	80073da <__sfputs_r+0xa>
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073f4 <_vfiprintf_r>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	460d      	mov	r5, r1
 80073fa:	4614      	mov	r4, r2
 80073fc:	4698      	mov	r8, r3
 80073fe:	4606      	mov	r6, r0
 8007400:	b09d      	sub	sp, #116	@ 0x74
 8007402:	b118      	cbz	r0, 800740c <_vfiprintf_r+0x18>
 8007404:	6a03      	ldr	r3, [r0, #32]
 8007406:	b90b      	cbnz	r3, 800740c <_vfiprintf_r+0x18>
 8007408:	f7fc fe06 	bl	8004018 <__sinit>
 800740c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800740e:	07d9      	lsls	r1, r3, #31
 8007410:	d405      	bmi.n	800741e <_vfiprintf_r+0x2a>
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	059a      	lsls	r2, r3, #22
 8007416:	d402      	bmi.n	800741e <_vfiprintf_r+0x2a>
 8007418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800741a:	f7fc ff14 	bl	8004246 <__retarget_lock_acquire_recursive>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	071b      	lsls	r3, r3, #28
 8007422:	d501      	bpl.n	8007428 <_vfiprintf_r+0x34>
 8007424:	692b      	ldr	r3, [r5, #16]
 8007426:	b99b      	cbnz	r3, 8007450 <_vfiprintf_r+0x5c>
 8007428:	4629      	mov	r1, r5
 800742a:	4630      	mov	r0, r6
 800742c:	f000 f938 	bl	80076a0 <__swsetup_r>
 8007430:	b170      	cbz	r0, 8007450 <_vfiprintf_r+0x5c>
 8007432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007434:	07dc      	lsls	r4, r3, #31
 8007436:	d504      	bpl.n	8007442 <_vfiprintf_r+0x4e>
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	b01d      	add	sp, #116	@ 0x74
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	0598      	lsls	r0, r3, #22
 8007446:	d4f7      	bmi.n	8007438 <_vfiprintf_r+0x44>
 8007448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800744a:	f7fc fefd 	bl	8004248 <__retarget_lock_release_recursive>
 800744e:	e7f3      	b.n	8007438 <_vfiprintf_r+0x44>
 8007450:	2300      	movs	r3, #0
 8007452:	9309      	str	r3, [sp, #36]	@ 0x24
 8007454:	2320      	movs	r3, #32
 8007456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800745a:	2330      	movs	r3, #48	@ 0x30
 800745c:	f04f 0901 	mov.w	r9, #1
 8007460:	f8cd 800c 	str.w	r8, [sp, #12]
 8007464:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007610 <_vfiprintf_r+0x21c>
 8007468:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800746c:	4623      	mov	r3, r4
 800746e:	469a      	mov	sl, r3
 8007470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007474:	b10a      	cbz	r2, 800747a <_vfiprintf_r+0x86>
 8007476:	2a25      	cmp	r2, #37	@ 0x25
 8007478:	d1f9      	bne.n	800746e <_vfiprintf_r+0x7a>
 800747a:	ebba 0b04 	subs.w	fp, sl, r4
 800747e:	d00b      	beq.n	8007498 <_vfiprintf_r+0xa4>
 8007480:	465b      	mov	r3, fp
 8007482:	4622      	mov	r2, r4
 8007484:	4629      	mov	r1, r5
 8007486:	4630      	mov	r0, r6
 8007488:	f7ff ffa2 	bl	80073d0 <__sfputs_r>
 800748c:	3001      	adds	r0, #1
 800748e:	f000 80a7 	beq.w	80075e0 <_vfiprintf_r+0x1ec>
 8007492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007494:	445a      	add	r2, fp
 8007496:	9209      	str	r2, [sp, #36]	@ 0x24
 8007498:	f89a 3000 	ldrb.w	r3, [sl]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 809f 	beq.w	80075e0 <_vfiprintf_r+0x1ec>
 80074a2:	2300      	movs	r3, #0
 80074a4:	f04f 32ff 	mov.w	r2, #4294967295
 80074a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ac:	f10a 0a01 	add.w	sl, sl, #1
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	9307      	str	r3, [sp, #28]
 80074b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80074ba:	4654      	mov	r4, sl
 80074bc:	2205      	movs	r2, #5
 80074be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c2:	4853      	ldr	r0, [pc, #332]	@ (8007610 <_vfiprintf_r+0x21c>)
 80074c4:	f7fc fec1 	bl	800424a <memchr>
 80074c8:	9a04      	ldr	r2, [sp, #16]
 80074ca:	b9d8      	cbnz	r0, 8007504 <_vfiprintf_r+0x110>
 80074cc:	06d1      	lsls	r1, r2, #27
 80074ce:	bf44      	itt	mi
 80074d0:	2320      	movmi	r3, #32
 80074d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d6:	0713      	lsls	r3, r2, #28
 80074d8:	bf44      	itt	mi
 80074da:	232b      	movmi	r3, #43	@ 0x2b
 80074dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e0:	f89a 3000 	ldrb.w	r3, [sl]
 80074e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e6:	d015      	beq.n	8007514 <_vfiprintf_r+0x120>
 80074e8:	4654      	mov	r4, sl
 80074ea:	2000      	movs	r0, #0
 80074ec:	f04f 0c0a 	mov.w	ip, #10
 80074f0:	9a07      	ldr	r2, [sp, #28]
 80074f2:	4621      	mov	r1, r4
 80074f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074f8:	3b30      	subs	r3, #48	@ 0x30
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d94b      	bls.n	8007596 <_vfiprintf_r+0x1a2>
 80074fe:	b1b0      	cbz	r0, 800752e <_vfiprintf_r+0x13a>
 8007500:	9207      	str	r2, [sp, #28]
 8007502:	e014      	b.n	800752e <_vfiprintf_r+0x13a>
 8007504:	eba0 0308 	sub.w	r3, r0, r8
 8007508:	fa09 f303 	lsl.w	r3, r9, r3
 800750c:	4313      	orrs	r3, r2
 800750e:	46a2      	mov	sl, r4
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	e7d2      	b.n	80074ba <_vfiprintf_r+0xc6>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	1d19      	adds	r1, r3, #4
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	9103      	str	r1, [sp, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	bfbb      	ittet	lt
 8007520:	425b      	neglt	r3, r3
 8007522:	f042 0202 	orrlt.w	r2, r2, #2
 8007526:	9307      	strge	r3, [sp, #28]
 8007528:	9307      	strlt	r3, [sp, #28]
 800752a:	bfb8      	it	lt
 800752c:	9204      	strlt	r2, [sp, #16]
 800752e:	7823      	ldrb	r3, [r4, #0]
 8007530:	2b2e      	cmp	r3, #46	@ 0x2e
 8007532:	d10a      	bne.n	800754a <_vfiprintf_r+0x156>
 8007534:	7863      	ldrb	r3, [r4, #1]
 8007536:	2b2a      	cmp	r3, #42	@ 0x2a
 8007538:	d132      	bne.n	80075a0 <_vfiprintf_r+0x1ac>
 800753a:	9b03      	ldr	r3, [sp, #12]
 800753c:	3402      	adds	r4, #2
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9203      	str	r2, [sp, #12]
 8007544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007548:	9305      	str	r3, [sp, #20]
 800754a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007614 <_vfiprintf_r+0x220>
 800754e:	2203      	movs	r2, #3
 8007550:	4650      	mov	r0, sl
 8007552:	7821      	ldrb	r1, [r4, #0]
 8007554:	f7fc fe79 	bl	800424a <memchr>
 8007558:	b138      	cbz	r0, 800756a <_vfiprintf_r+0x176>
 800755a:	2240      	movs	r2, #64	@ 0x40
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	eba0 000a 	sub.w	r0, r0, sl
 8007562:	4082      	lsls	r2, r0
 8007564:	4313      	orrs	r3, r2
 8007566:	3401      	adds	r4, #1
 8007568:	9304      	str	r3, [sp, #16]
 800756a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756e:	2206      	movs	r2, #6
 8007570:	4829      	ldr	r0, [pc, #164]	@ (8007618 <_vfiprintf_r+0x224>)
 8007572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007576:	f7fc fe68 	bl	800424a <memchr>
 800757a:	2800      	cmp	r0, #0
 800757c:	d03f      	beq.n	80075fe <_vfiprintf_r+0x20a>
 800757e:	4b27      	ldr	r3, [pc, #156]	@ (800761c <_vfiprintf_r+0x228>)
 8007580:	bb1b      	cbnz	r3, 80075ca <_vfiprintf_r+0x1d6>
 8007582:	9b03      	ldr	r3, [sp, #12]
 8007584:	3307      	adds	r3, #7
 8007586:	f023 0307 	bic.w	r3, r3, #7
 800758a:	3308      	adds	r3, #8
 800758c:	9303      	str	r3, [sp, #12]
 800758e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007590:	443b      	add	r3, r7
 8007592:	9309      	str	r3, [sp, #36]	@ 0x24
 8007594:	e76a      	b.n	800746c <_vfiprintf_r+0x78>
 8007596:	460c      	mov	r4, r1
 8007598:	2001      	movs	r0, #1
 800759a:	fb0c 3202 	mla	r2, ip, r2, r3
 800759e:	e7a8      	b.n	80074f2 <_vfiprintf_r+0xfe>
 80075a0:	2300      	movs	r3, #0
 80075a2:	f04f 0c0a 	mov.w	ip, #10
 80075a6:	4619      	mov	r1, r3
 80075a8:	3401      	adds	r4, #1
 80075aa:	9305      	str	r3, [sp, #20]
 80075ac:	4620      	mov	r0, r4
 80075ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b2:	3a30      	subs	r2, #48	@ 0x30
 80075b4:	2a09      	cmp	r2, #9
 80075b6:	d903      	bls.n	80075c0 <_vfiprintf_r+0x1cc>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0c6      	beq.n	800754a <_vfiprintf_r+0x156>
 80075bc:	9105      	str	r1, [sp, #20]
 80075be:	e7c4      	b.n	800754a <_vfiprintf_r+0x156>
 80075c0:	4604      	mov	r4, r0
 80075c2:	2301      	movs	r3, #1
 80075c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c8:	e7f0      	b.n	80075ac <_vfiprintf_r+0x1b8>
 80075ca:	ab03      	add	r3, sp, #12
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	462a      	mov	r2, r5
 80075d0:	4630      	mov	r0, r6
 80075d2:	4b13      	ldr	r3, [pc, #76]	@ (8007620 <_vfiprintf_r+0x22c>)
 80075d4:	a904      	add	r1, sp, #16
 80075d6:	f7fb fec5 	bl	8003364 <_printf_float>
 80075da:	4607      	mov	r7, r0
 80075dc:	1c78      	adds	r0, r7, #1
 80075de:	d1d6      	bne.n	800758e <_vfiprintf_r+0x19a>
 80075e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075e2:	07d9      	lsls	r1, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <_vfiprintf_r+0x1fe>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	059a      	lsls	r2, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_vfiprintf_r+0x1fe>
 80075ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ee:	f7fc fe2b 	bl	8004248 <__retarget_lock_release_recursive>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	065b      	lsls	r3, r3, #25
 80075f6:	f53f af1f 	bmi.w	8007438 <_vfiprintf_r+0x44>
 80075fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075fc:	e71e      	b.n	800743c <_vfiprintf_r+0x48>
 80075fe:	ab03      	add	r3, sp, #12
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	462a      	mov	r2, r5
 8007604:	4630      	mov	r0, r6
 8007606:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <_vfiprintf_r+0x22c>)
 8007608:	a904      	add	r1, sp, #16
 800760a:	f7fc f949 	bl	80038a0 <_printf_i>
 800760e:	e7e4      	b.n	80075da <_vfiprintf_r+0x1e6>
 8007610:	08007cd1 	.word	0x08007cd1
 8007614:	08007cd7 	.word	0x08007cd7
 8007618:	08007cdb 	.word	0x08007cdb
 800761c:	08003365 	.word	0x08003365
 8007620:	080073d1 	.word	0x080073d1

08007624 <__swbuf_r>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	460e      	mov	r6, r1
 8007628:	4614      	mov	r4, r2
 800762a:	4605      	mov	r5, r0
 800762c:	b118      	cbz	r0, 8007636 <__swbuf_r+0x12>
 800762e:	6a03      	ldr	r3, [r0, #32]
 8007630:	b90b      	cbnz	r3, 8007636 <__swbuf_r+0x12>
 8007632:	f7fc fcf1 	bl	8004018 <__sinit>
 8007636:	69a3      	ldr	r3, [r4, #24]
 8007638:	60a3      	str	r3, [r4, #8]
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	071a      	lsls	r2, r3, #28
 800763e:	d501      	bpl.n	8007644 <__swbuf_r+0x20>
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	b943      	cbnz	r3, 8007656 <__swbuf_r+0x32>
 8007644:	4621      	mov	r1, r4
 8007646:	4628      	mov	r0, r5
 8007648:	f000 f82a 	bl	80076a0 <__swsetup_r>
 800764c:	b118      	cbz	r0, 8007656 <__swbuf_r+0x32>
 800764e:	f04f 37ff 	mov.w	r7, #4294967295
 8007652:	4638      	mov	r0, r7
 8007654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	b2f6      	uxtb	r6, r6
 800765c:	1a98      	subs	r0, r3, r2
 800765e:	6963      	ldr	r3, [r4, #20]
 8007660:	4637      	mov	r7, r6
 8007662:	4283      	cmp	r3, r0
 8007664:	dc05      	bgt.n	8007672 <__swbuf_r+0x4e>
 8007666:	4621      	mov	r1, r4
 8007668:	4628      	mov	r0, r5
 800766a:	f7ff fa4b 	bl	8006b04 <_fflush_r>
 800766e:	2800      	cmp	r0, #0
 8007670:	d1ed      	bne.n	800764e <__swbuf_r+0x2a>
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	3b01      	subs	r3, #1
 8007676:	60a3      	str	r3, [r4, #8]
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	6022      	str	r2, [r4, #0]
 800767e:	701e      	strb	r6, [r3, #0]
 8007680:	6962      	ldr	r2, [r4, #20]
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	429a      	cmp	r2, r3
 8007686:	d004      	beq.n	8007692 <__swbuf_r+0x6e>
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	07db      	lsls	r3, r3, #31
 800768c:	d5e1      	bpl.n	8007652 <__swbuf_r+0x2e>
 800768e:	2e0a      	cmp	r6, #10
 8007690:	d1df      	bne.n	8007652 <__swbuf_r+0x2e>
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f7ff fa35 	bl	8006b04 <_fflush_r>
 800769a:	2800      	cmp	r0, #0
 800769c:	d0d9      	beq.n	8007652 <__swbuf_r+0x2e>
 800769e:	e7d6      	b.n	800764e <__swbuf_r+0x2a>

080076a0 <__swsetup_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4b29      	ldr	r3, [pc, #164]	@ (8007748 <__swsetup_r+0xa8>)
 80076a4:	4605      	mov	r5, r0
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	460c      	mov	r4, r1
 80076aa:	b118      	cbz	r0, 80076b4 <__swsetup_r+0x14>
 80076ac:	6a03      	ldr	r3, [r0, #32]
 80076ae:	b90b      	cbnz	r3, 80076b4 <__swsetup_r+0x14>
 80076b0:	f7fc fcb2 	bl	8004018 <__sinit>
 80076b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b8:	0719      	lsls	r1, r3, #28
 80076ba:	d422      	bmi.n	8007702 <__swsetup_r+0x62>
 80076bc:	06da      	lsls	r2, r3, #27
 80076be:	d407      	bmi.n	80076d0 <__swsetup_r+0x30>
 80076c0:	2209      	movs	r2, #9
 80076c2:	602a      	str	r2, [r5, #0]
 80076c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	e033      	b.n	8007738 <__swsetup_r+0x98>
 80076d0:	0758      	lsls	r0, r3, #29
 80076d2:	d512      	bpl.n	80076fa <__swsetup_r+0x5a>
 80076d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076d6:	b141      	cbz	r1, 80076ea <__swsetup_r+0x4a>
 80076d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076dc:	4299      	cmp	r1, r3
 80076de:	d002      	beq.n	80076e6 <__swsetup_r+0x46>
 80076e0:	4628      	mov	r0, r5
 80076e2:	f7fd fc15 	bl	8004f10 <_free_r>
 80076e6:	2300      	movs	r3, #0
 80076e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	2300      	movs	r3, #0
 80076f4:	6063      	str	r3, [r4, #4]
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	f043 0308 	orr.w	r3, r3, #8
 8007700:	81a3      	strh	r3, [r4, #12]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	b94b      	cbnz	r3, 800771a <__swsetup_r+0x7a>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800770c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007710:	d003      	beq.n	800771a <__swsetup_r+0x7a>
 8007712:	4621      	mov	r1, r4
 8007714:	4628      	mov	r0, r5
 8007716:	f000 f882 	bl	800781e <__smakebuf_r>
 800771a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771e:	f013 0201 	ands.w	r2, r3, #1
 8007722:	d00a      	beq.n	800773a <__swsetup_r+0x9a>
 8007724:	2200      	movs	r2, #0
 8007726:	60a2      	str	r2, [r4, #8]
 8007728:	6962      	ldr	r2, [r4, #20]
 800772a:	4252      	negs	r2, r2
 800772c:	61a2      	str	r2, [r4, #24]
 800772e:	6922      	ldr	r2, [r4, #16]
 8007730:	b942      	cbnz	r2, 8007744 <__swsetup_r+0xa4>
 8007732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007736:	d1c5      	bne.n	80076c4 <__swsetup_r+0x24>
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	0799      	lsls	r1, r3, #30
 800773c:	bf58      	it	pl
 800773e:	6962      	ldrpl	r2, [r4, #20]
 8007740:	60a2      	str	r2, [r4, #8]
 8007742:	e7f4      	b.n	800772e <__swsetup_r+0x8e>
 8007744:	2000      	movs	r0, #0
 8007746:	e7f7      	b.n	8007738 <__swsetup_r+0x98>
 8007748:	20000018 	.word	0x20000018

0800774c <_raise_r>:
 800774c:	291f      	cmp	r1, #31
 800774e:	b538      	push	{r3, r4, r5, lr}
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	d904      	bls.n	8007760 <_raise_r+0x14>
 8007756:	2316      	movs	r3, #22
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	f04f 30ff 	mov.w	r0, #4294967295
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007762:	b112      	cbz	r2, 800776a <_raise_r+0x1e>
 8007764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007768:	b94b      	cbnz	r3, 800777e <_raise_r+0x32>
 800776a:	4628      	mov	r0, r5
 800776c:	f000 f830 	bl	80077d0 <_getpid_r>
 8007770:	4622      	mov	r2, r4
 8007772:	4601      	mov	r1, r0
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777a:	f000 b817 	b.w	80077ac <_kill_r>
 800777e:	2b01      	cmp	r3, #1
 8007780:	d00a      	beq.n	8007798 <_raise_r+0x4c>
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	d103      	bne.n	800778e <_raise_r+0x42>
 8007786:	2316      	movs	r3, #22
 8007788:	6003      	str	r3, [r0, #0]
 800778a:	2001      	movs	r0, #1
 800778c:	e7e7      	b.n	800775e <_raise_r+0x12>
 800778e:	2100      	movs	r1, #0
 8007790:	4620      	mov	r0, r4
 8007792:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007796:	4798      	blx	r3
 8007798:	2000      	movs	r0, #0
 800779a:	e7e0      	b.n	800775e <_raise_r+0x12>

0800779c <raise>:
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <raise+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f7ff bfd3 	b.w	800774c <_raise_r>
 80077a6:	bf00      	nop
 80077a8:	20000018 	.word	0x20000018

080077ac <_kill_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	2300      	movs	r3, #0
 80077b0:	4d06      	ldr	r5, [pc, #24]	@ (80077cc <_kill_r+0x20>)
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f7f9 fd12 	bl	80011e2 <_kill>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d102      	bne.n	80077c8 <_kill_r+0x1c>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b103      	cbz	r3, 80077c8 <_kill_r+0x1c>
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
 80077ca:	bf00      	nop
 80077cc:	200003c8 	.word	0x200003c8

080077d0 <_getpid_r>:
 80077d0:	f7f9 bd00 	b.w	80011d4 <_getpid>

080077d4 <__swhatbuf_r>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077dc:	4615      	mov	r5, r2
 80077de:	2900      	cmp	r1, #0
 80077e0:	461e      	mov	r6, r3
 80077e2:	b096      	sub	sp, #88	@ 0x58
 80077e4:	da0c      	bge.n	8007800 <__swhatbuf_r+0x2c>
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	2100      	movs	r1, #0
 80077ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077ee:	bf14      	ite	ne
 80077f0:	2340      	movne	r3, #64	@ 0x40
 80077f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077f6:	2000      	movs	r0, #0
 80077f8:	6031      	str	r1, [r6, #0]
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	b016      	add	sp, #88	@ 0x58
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	466a      	mov	r2, sp
 8007802:	f000 f849 	bl	8007898 <_fstat_r>
 8007806:	2800      	cmp	r0, #0
 8007808:	dbed      	blt.n	80077e6 <__swhatbuf_r+0x12>
 800780a:	9901      	ldr	r1, [sp, #4]
 800780c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007810:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007814:	4259      	negs	r1, r3
 8007816:	4159      	adcs	r1, r3
 8007818:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800781c:	e7eb      	b.n	80077f6 <__swhatbuf_r+0x22>

0800781e <__smakebuf_r>:
 800781e:	898b      	ldrh	r3, [r1, #12]
 8007820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007822:	079d      	lsls	r5, r3, #30
 8007824:	4606      	mov	r6, r0
 8007826:	460c      	mov	r4, r1
 8007828:	d507      	bpl.n	800783a <__smakebuf_r+0x1c>
 800782a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	6123      	str	r3, [r4, #16]
 8007832:	2301      	movs	r3, #1
 8007834:	6163      	str	r3, [r4, #20]
 8007836:	b003      	add	sp, #12
 8007838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783a:	466a      	mov	r2, sp
 800783c:	ab01      	add	r3, sp, #4
 800783e:	f7ff ffc9 	bl	80077d4 <__swhatbuf_r>
 8007842:	9f00      	ldr	r7, [sp, #0]
 8007844:	4605      	mov	r5, r0
 8007846:	4639      	mov	r1, r7
 8007848:	4630      	mov	r0, r6
 800784a:	f7fd fbd3 	bl	8004ff4 <_malloc_r>
 800784e:	b948      	cbnz	r0, 8007864 <__smakebuf_r+0x46>
 8007850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007854:	059a      	lsls	r2, r3, #22
 8007856:	d4ee      	bmi.n	8007836 <__smakebuf_r+0x18>
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	f043 0302 	orr.w	r3, r3, #2
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	e7e2      	b.n	800782a <__smakebuf_r+0xc>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800786a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	9b01      	ldr	r3, [sp, #4]
 8007872:	6020      	str	r0, [r4, #0]
 8007874:	b15b      	cbz	r3, 800788e <__smakebuf_r+0x70>
 8007876:	4630      	mov	r0, r6
 8007878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787c:	f000 f81e 	bl	80078bc <_isatty_r>
 8007880:	b128      	cbz	r0, 800788e <__smakebuf_r+0x70>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f023 0303 	bic.w	r3, r3, #3
 8007888:	f043 0301 	orr.w	r3, r3, #1
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	431d      	orrs	r5, r3
 8007892:	81a5      	strh	r5, [r4, #12]
 8007894:	e7cf      	b.n	8007836 <__smakebuf_r+0x18>
	...

08007898 <_fstat_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	2300      	movs	r3, #0
 800789c:	4d06      	ldr	r5, [pc, #24]	@ (80078b8 <_fstat_r+0x20>)
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f7f9 fcfb 	bl	80012a0 <_fstat>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d102      	bne.n	80078b4 <_fstat_r+0x1c>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b103      	cbz	r3, 80078b4 <_fstat_r+0x1c>
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	200003c8 	.word	0x200003c8

080078bc <_isatty_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	2300      	movs	r3, #0
 80078c0:	4d05      	ldr	r5, [pc, #20]	@ (80078d8 <_isatty_r+0x1c>)
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7f9 fcf9 	bl	80012be <_isatty>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_isatty_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_isatty_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	200003c8 	.word	0x200003c8

080078dc <_init>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	bf00      	nop
 80078e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	469e      	mov	lr, r3
 80078e6:	4770      	bx	lr

080078e8 <_fini>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	bf00      	nop
 80078ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ee:	bc08      	pop	{r3}
 80078f0:	469e      	mov	lr, r3
 80078f2:	4770      	bx	lr
