
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08008b00  08008b00  00009b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009028  08009028  0000b1f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009028  08009028  0000a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009030  08009030  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009030  08009030  0000a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009034  08009034  0000a034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08009038  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200001f0  08009228  0000b1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000970  08009228  0000b970  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000887c  00000000  00000000  0000b219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc2  00000000  00000000  00013a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  00015758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c6  00000000  00000000  00015ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018147  00000000  00000000  000164be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a384  00000000  00000000  0002e605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084693  00000000  00000000  00038989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd01c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003480  00000000  00000000  000bd060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000c04e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ae8 	.word	0x08008ae8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08008ae8 	.word	0x08008ae8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bd8:	b08c      	sub	sp, #48	@ 0x30
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000be0:	4b5b      	ldr	r3, [pc, #364]	@ (8000d50 <decodeGGA+0x17c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000bea:	e004      	b.n	8000bf6 <decodeGGA+0x22>
 8000bec:	4b58      	ldr	r3, [pc, #352]	@ (8000d50 <decodeGGA+0x17c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a57      	ldr	r2, [pc, #348]	@ (8000d50 <decodeGGA+0x17c>)
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	4b56      	ldr	r3, [pc, #344]	@ (8000d50 <decodeGGA+0x17c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c04:	d1f2      	bne.n	8000bec <decodeGGA+0x18>
	inx++;
 8000c06:	4b52      	ldr	r3, [pc, #328]	@ (8000d50 <decodeGGA+0x17c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a50      	ldr	r2, [pc, #320]	@ (8000d50 <decodeGGA+0x17c>)
 8000c0e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000c10:	e004      	b.n	8000c1c <decodeGGA+0x48>
 8000c12:	4b4f      	ldr	r3, [pc, #316]	@ (8000d50 <decodeGGA+0x17c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a4d      	ldr	r2, [pc, #308]	@ (8000d50 <decodeGGA+0x17c>)
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d50 <decodeGGA+0x17c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c2a:	d1f2      	bne.n	8000c12 <decodeGGA+0x3e>
	inx++;
 8000c2c:	4b48      	ldr	r3, [pc, #288]	@ (8000d50 <decodeGGA+0x17c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a47      	ldr	r2, [pc, #284]	@ (8000d50 <decodeGGA+0x17c>)
 8000c34:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000c36:	e004      	b.n	8000c42 <decodeGGA+0x6e>
 8000c38:	4b45      	ldr	r3, [pc, #276]	@ (8000d50 <decodeGGA+0x17c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a44      	ldr	r2, [pc, #272]	@ (8000d50 <decodeGGA+0x17c>)
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b43      	ldr	r3, [pc, #268]	@ (8000d50 <decodeGGA+0x17c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c50:	d1f2      	bne.n	8000c38 <decodeGGA+0x64>
	inx++;
 8000c52:	4b3f      	ldr	r3, [pc, #252]	@ (8000d50 <decodeGGA+0x17c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a3d      	ldr	r2, [pc, #244]	@ (8000d50 <decodeGGA+0x17c>)
 8000c5a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000c5c:	e004      	b.n	8000c68 <decodeGGA+0x94>
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d50 <decodeGGA+0x17c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	4a3a      	ldr	r2, [pc, #232]	@ (8000d50 <decodeGGA+0x17c>)
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b39      	ldr	r3, [pc, #228]	@ (8000d50 <decodeGGA+0x17c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c76:	d1f2      	bne.n	8000c5e <decodeGGA+0x8a>
	inx++;
 8000c78:	4b35      	ldr	r3, [pc, #212]	@ (8000d50 <decodeGGA+0x17c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a34      	ldr	r2, [pc, #208]	@ (8000d50 <decodeGGA+0x17c>)
 8000c80:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000c82:	e004      	b.n	8000c8e <decodeGGA+0xba>
 8000c84:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <decodeGGA+0x17c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a31      	ldr	r2, [pc, #196]	@ (8000d50 <decodeGGA+0x17c>)
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b30      	ldr	r3, [pc, #192]	@ (8000d50 <decodeGGA+0x17c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c9c:	d1f2      	bne.n	8000c84 <decodeGGA+0xb0>
	inx++;
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d50 <decodeGGA+0x17c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8000d50 <decodeGGA+0x17c>)
 8000ca6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000ca8:	e004      	b.n	8000cb4 <decodeGGA+0xe0>
 8000caa:	4b29      	ldr	r3, [pc, #164]	@ (8000d50 <decodeGGA+0x17c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	4a27      	ldr	r2, [pc, #156]	@ (8000d50 <decodeGGA+0x17c>)
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <decodeGGA+0x17c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cc2:	d1f2      	bne.n	8000caa <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000cc4:	4b22      	ldr	r3, [pc, #136]	@ (8000d50 <decodeGGA+0x17c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <decodeGGA+0x17c>)
 8000ccc:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <decodeGGA+0x17c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b31      	cmp	r3, #49	@ 0x31
 8000cdc:	d00f      	beq.n	8000cfe <decodeGGA+0x12a>
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <decodeGGA+0x17c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b32      	cmp	r3, #50	@ 0x32
 8000cec:	d007      	beq.n	8000cfe <decodeGGA+0x12a>
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <decodeGGA+0x17c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b36      	cmp	r3, #54	@ 0x36
 8000cfc:	d106      	bne.n	8000d0c <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2201      	movs	r2, #1
 8000d02:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <decodeGGA+0x17c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000d0a:	e009      	b.n	8000d20 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000d12:	2301      	movs	r3, #1
 8000d14:	e2f2      	b.n	80012fc <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <decodeGGA+0x17c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d50 <decodeGGA+0x17c>)
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <decodeGGA+0x17c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d2e:	d1f2      	bne.n	8000d16 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <decodeGGA+0x17c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a06      	ldr	r2, [pc, #24]	@ (8000d50 <decodeGGA+0x17c>)
 8000d38:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	220c      	movs	r2, #12
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fc75 	bl	8004632 <memset>
	i=0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000d4c:	e016      	b.n	8000d7c <decodeGGA+0x1a8>
 8000d4e:	bf00      	nop
 8000d50:	2000020c 	.word	0x2000020c
	{
		buffer[i] = GGAbuffer[inx];
 8000d54:	4ba7      	ldr	r3, [pc, #668]	@ (8000ff4 <decodeGGA+0x420>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	7819      	ldrb	r1, [r3, #0]
 8000d60:	f107 020c 	add.w	r2, r7, #12
 8000d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d66:	4413      	add	r3, r2
 8000d68:	460a      	mov	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
		i++;
 8000d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d6e:	3301      	adds	r3, #1
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000d72:	4ba0      	ldr	r3, [pc, #640]	@ (8000ff4 <decodeGGA+0x420>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	4a9e      	ldr	r2, [pc, #632]	@ (8000ff4 <decodeGGA+0x420>)
 8000d7a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000d7c:	4b9d      	ldr	r3, [pc, #628]	@ (8000ff4 <decodeGGA+0x420>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d8a:	d1e3      	bne.n	8000d54 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fc33 	bl	80035fc <atoi>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a97      	ldr	r2, [pc, #604]	@ (8000ff8 <decodeGGA+0x424>)
 8000d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9e:	1312      	asrs	r2, r2, #12
 8000da0:	17db      	asrs	r3, r3, #31
 8000da2:	1ad2      	subs	r2, r2, r3
 8000da4:	4b95      	ldr	r3, [pc, #596]	@ (8000ffc <decodeGGA+0x428>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4995      	ldr	r1, [pc, #596]	@ (8001000 <decodeGGA+0x42c>)
 8000daa:	fb81 0103 	smull	r0, r1, r1, r3
 8000dae:	1149      	asrs	r1, r1, #5
 8000db0:	17db      	asrs	r3, r3, #31
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	4a93      	ldr	r2, [pc, #588]	@ (8001004 <decodeGGA+0x430>)
 8000db8:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fc1c 	bl	80035fc <atoi>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a8e      	ldr	r2, [pc, #568]	@ (8001000 <decodeGGA+0x42c>)
 8000dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dcc:	1152      	asrs	r2, r2, #5
 8000dce:	17db      	asrs	r3, r3, #31
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	4a8b      	ldr	r2, [pc, #556]	@ (8001000 <decodeGGA+0x42c>)
 8000dd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd8:	1151      	asrs	r1, r2, #5
 8000dda:	17da      	asrs	r2, r3, #31
 8000ddc:	1a8a      	subs	r2, r1, r2
 8000dde:	2164      	movs	r1, #100	@ 0x64
 8000de0:	fb01 f202 	mul.w	r2, r1, r2
 8000de4:	1a9a      	subs	r2, r3, r2
 8000de6:	4b85      	ldr	r3, [pc, #532]	@ (8000ffc <decodeGGA+0x428>)
 8000de8:	6819      	ldr	r1, [r3, #0]
 8000dea:	4b85      	ldr	r3, [pc, #532]	@ (8001000 <decodeGGA+0x42c>)
 8000dec:	fb83 0301 	smull	r0, r3, r3, r1
 8000df0:	1158      	asrs	r0, r3, #5
 8000df2:	17cb      	asrs	r3, r1, #31
 8000df4:	1ac3      	subs	r3, r0, r3
 8000df6:	2064      	movs	r0, #100	@ 0x64
 8000df8:	fb00 f303 	mul.w	r3, r0, r3
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a81      	ldr	r2, [pc, #516]	@ (8001008 <decodeGGA+0x434>)
 8000e02:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8000e04:	4b80      	ldr	r3, [pc, #512]	@ (8001008 <decodeGGA+0x434>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e0a:	dd09      	ble.n	8000e20 <decodeGGA+0x24c>
	{
		min = min-60;
 8000e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8001008 <decodeGGA+0x434>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3b3c      	subs	r3, #60	@ 0x3c
 8000e12:	4a7d      	ldr	r2, [pc, #500]	@ (8001008 <decodeGGA+0x434>)
 8000e14:	6013      	str	r3, [r2, #0]
		hr++;
 8000e16:	4b7b      	ldr	r3, [pc, #492]	@ (8001004 <decodeGGA+0x430>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a79      	ldr	r2, [pc, #484]	@ (8001004 <decodeGGA+0x430>)
 8000e1e:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000e20:	4b78      	ldr	r3, [pc, #480]	@ (8001004 <decodeGGA+0x430>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da09      	bge.n	8000e3c <decodeGGA+0x268>
	{
		hr=24+hr;
 8000e28:	4b76      	ldr	r3, [pc, #472]	@ (8001004 <decodeGGA+0x430>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3318      	adds	r3, #24
 8000e2e:	4a75      	ldr	r2, [pc, #468]	@ (8001004 <decodeGGA+0x430>)
 8000e30:	6013      	str	r3, [r2, #0]
		daychange--;
 8000e32:	4b76      	ldr	r3, [pc, #472]	@ (800100c <decodeGGA+0x438>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	4a74      	ldr	r2, [pc, #464]	@ (800100c <decodeGGA+0x438>)
 8000e3a:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000e3c:	4b71      	ldr	r3, [pc, #452]	@ (8001004 <decodeGGA+0x430>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b17      	cmp	r3, #23
 8000e42:	dd09      	ble.n	8000e58 <decodeGGA+0x284>
	{
		hr=hr-24;
 8000e44:	4b6f      	ldr	r3, [pc, #444]	@ (8001004 <decodeGGA+0x430>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3b18      	subs	r3, #24
 8000e4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001004 <decodeGGA+0x430>)
 8000e4c:	6013      	str	r3, [r2, #0]
		daychange++;
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800100c <decodeGGA+0x438>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a6d      	ldr	r2, [pc, #436]	@ (800100c <decodeGGA+0x438>)
 8000e56:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000e58:	4b6a      	ldr	r3, [pc, #424]	@ (8001004 <decodeGGA+0x430>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000e60:	4b69      	ldr	r3, [pc, #420]	@ (8001008 <decodeGGA+0x434>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fbc5 	bl	80035fc <atoi>
 8000e72:	4602      	mov	r2, r0
 8000e74:	4b62      	ldr	r3, [pc, #392]	@ (8001000 <decodeGGA+0x42c>)
 8000e76:	fb83 1302 	smull	r1, r3, r3, r2
 8000e7a:	1159      	asrs	r1, r3, #5
 8000e7c:	17d3      	asrs	r3, r2, #31
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	2164      	movs	r1, #100	@ 0x64
 8000e82:	fb01 f303 	mul.w	r3, r1, r3
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000e8c:	4b59      	ldr	r3, [pc, #356]	@ (8000ff4 <decodeGGA+0x420>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a58      	ldr	r2, [pc, #352]	@ (8000ff4 <decodeGGA+0x420>)
 8000e94:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 fbc7 	bl	8004632 <memset>
	i=0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000ea8:	e013      	b.n	8000ed2 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8000eaa:	4b52      	ldr	r3, [pc, #328]	@ (8000ff4 <decodeGGA+0x420>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	7819      	ldrb	r1, [r3, #0]
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ebc:	4413      	add	r3, r2
 8000ebe:	460a      	mov	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
		i++;
 8000ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff4 <decodeGGA+0x420>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4a49      	ldr	r2, [pc, #292]	@ (8000ff4 <decodeGGA+0x420>)
 8000ed0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000ed2:	4b48      	ldr	r3, [pc, #288]	@ (8000ff4 <decodeGGA+0x420>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ee0:	d1e3      	bne.n	8000eaa <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff f932 	bl	8000150 <strlen>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	d801      	bhi.n	8000ef6 <decodeGGA+0x322>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e202      	b.n	80012fc <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fb7e 	bl	80035fc <atoi>
 8000f00:	4603      	mov	r3, r0
 8000f02:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8000f08:	e002      	b.n	8000f10 <decodeGGA+0x33c>
 8000f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f10:	f107 020c 	add.w	r2, r7, #12
 8000f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f1c:	d1f5      	bne.n	8000f0a <decodeGGA+0x336>
	j++;
 8000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f20:	3301      	adds	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f911 	bl	8000150 <strlen>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fb5c 	bl	80035fc <atoi>
 8000f44:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000f46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fa5a 	bl	8000404 <__aeabi_i2d>
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <decodeGGA+0x43c>)
 8000f56:	f7ff fbe9 	bl	800072c <__aeabi_ddiv>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4690      	mov	r8, r2
 8000f60:	4699      	mov	r9, r3
 8000f62:	69f8      	ldr	r0, [r7, #28]
 8000f64:	f7ff fa4e 	bl	8000404 <__aeabi_i2d>
 8000f68:	4604      	mov	r4, r0
 8000f6a:	460d      	mov	r5, r1
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fa47 	bl	8000404 <__aeabi_i2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4925      	ldr	r1, [pc, #148]	@ (8001014 <decodeGGA+0x440>)
 8000f80:	f006 fea4 	bl	8007ccc <pow>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4620      	mov	r0, r4
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	f7ff fbce 	bl	800072c <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4640      	mov	r0, r8
 8000f96:	4649      	mov	r1, r9
 8000f98:	f7ff f8e8 	bl	800016c <__adddf3>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fd90 	bl	8000ac8 <__aeabi_d2f>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	601a      	str	r2, [r3, #0]
	inx++;  
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <decodeGGA+0x420>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <decodeGGA+0x420>)
 8000fba:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <decodeGGA+0x420>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <decodeGGA+0x420>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <decodeGGA+0x420>)
 8000fd4:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <decodeGGA+0x420>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <decodeGGA+0x420>)
 8000fde:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fb22 	bl	8004632 <memset>
	i=0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000ff2:	e025      	b.n	8001040 <decodeGGA+0x46c>
 8000ff4:	2000020c 	.word	0x2000020c
 8000ff8:	68db8bad 	.word	0x68db8bad
 8000ffc:	20000000 	.word	0x20000000
 8001000:	51eb851f 	.word	0x51eb851f
 8001004:	20000210 	.word	0x20000210
 8001008:	20000214 	.word	0x20000214
 800100c:	20000224 	.word	0x20000224
 8001010:	40590000 	.word	0x40590000
 8001014:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8001018:	4b88      	ldr	r3, [pc, #544]	@ (800123c <decodeGGA+0x668>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	7819      	ldrb	r1, [r3, #0]
 8001024:	f107 020c 	add.w	r2, r7, #12
 8001028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102a:	4413      	add	r3, r2
 800102c:	460a      	mov	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
		i++;
 8001030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001032:	3301      	adds	r3, #1
 8001034:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001036:	4b81      	ldr	r3, [pc, #516]	@ (800123c <decodeGGA+0x668>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a7f      	ldr	r2, [pc, #508]	@ (800123c <decodeGGA+0x668>)
 800103e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001040:	4b7e      	ldr	r3, [pc, #504]	@ (800123c <decodeGGA+0x668>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b2c      	cmp	r3, #44	@ 0x2c
 800104e:	d1e3      	bne.n	8001018 <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4618      	mov	r0, r3
 8001056:	f002 fad1 	bl	80035fc <atoi>
 800105a:	4603      	mov	r3, r0
 800105c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8001062:	e002      	b.n	800106a <decodeGGA+0x496>
 8001064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001066:	3301      	adds	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b2e      	cmp	r3, #46	@ 0x2e
 8001076:	d1f5      	bne.n	8001064 <decodeGGA+0x490>
	j++;
 8001078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107a:	3301      	adds	r3, #1
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f864 	bl	8000150 <strlen>
 8001088:	4602      	mov	r2, r0
 800108a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001092:	f107 020c 	add.w	r2, r7, #12
 8001096:	4413      	add	r3, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f002 faaf 	bl	80035fc <atoi>
 800109e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80010a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f9ad 	bl	8000404 <__aeabi_i2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b64      	ldr	r3, [pc, #400]	@ (8001240 <decodeGGA+0x66c>)
 80010b0:	f7ff fb3c 	bl	800072c <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4690      	mov	r8, r2
 80010ba:	4699      	mov	r9, r3
 80010bc:	69f8      	ldr	r0, [r7, #28]
 80010be:	f7ff f9a1 	bl	8000404 <__aeabi_i2d>
 80010c2:	4604      	mov	r4, r0
 80010c4:	460d      	mov	r5, r1
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	3302      	adds	r3, #2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f99a 	bl	8000404 <__aeabi_i2d>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	f04f 0000 	mov.w	r0, #0
 80010d8:	495a      	ldr	r1, [pc, #360]	@ (8001244 <decodeGGA+0x670>)
 80010da:	f006 fdf7 	bl	8007ccc <pow>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4620      	mov	r0, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff fb21 	bl	800072c <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4640      	mov	r0, r8
 80010f0:	4649      	mov	r1, r9
 80010f2:	f7ff f83b 	bl	800016c <__adddf3>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fce3 	bl	8000ac8 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	609a      	str	r2, [r3, #8]
	inx++;
 800110c:	4b4b      	ldr	r3, [pc, #300]	@ (800123c <decodeGGA+0x668>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a4a      	ldr	r2, [pc, #296]	@ (800123c <decodeGGA+0x668>)
 8001114:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001116:	4b49      	ldr	r3, [pc, #292]	@ (800123c <decodeGGA+0x668>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001126:	4b45      	ldr	r3, [pc, #276]	@ (800123c <decodeGGA+0x668>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a43      	ldr	r2, [pc, #268]	@ (800123c <decodeGGA+0x668>)
 800112e:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001130:	4b42      	ldr	r3, [pc, #264]	@ (800123c <decodeGGA+0x668>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a41      	ldr	r2, [pc, #260]	@ (800123c <decodeGGA+0x668>)
 8001138:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800113a:	4b40      	ldr	r3, [pc, #256]	@ (800123c <decodeGGA+0x668>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a3e      	ldr	r2, [pc, #248]	@ (800123c <decodeGGA+0x668>)
 8001142:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001144:	4b3d      	ldr	r3, [pc, #244]	@ (800123c <decodeGGA+0x668>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a3c      	ldr	r2, [pc, #240]	@ (800123c <decodeGGA+0x668>)
 800114c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	220c      	movs	r2, #12
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fa6b 	bl	8004632 <memset>
	i=0;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001160:	e013      	b.n	800118a <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 8001162:	4b36      	ldr	r3, [pc, #216]	@ (800123c <decodeGGA+0x668>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001174:	4413      	add	r3, r2
 8001176:	460a      	mov	r2, r1
 8001178:	701a      	strb	r2, [r3, #0]
		i++;
 800117a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117c:	3301      	adds	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001180:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <decodeGGA+0x668>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	4a2d      	ldr	r2, [pc, #180]	@ (800123c <decodeGGA+0x668>)
 8001188:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800118a:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <decodeGGA+0x668>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b2c      	cmp	r3, #44	@ 0x2c
 8001198:	d1e3      	bne.n	8001162 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fa2c 	bl	80035fc <atoi>
 80011a4:	4602      	mov	r2, r0
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <decodeGGA+0x668>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a22      	ldr	r2, [pc, #136]	@ (800123c <decodeGGA+0x668>)
 80011b2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80011b4:	e004      	b.n	80011c0 <decodeGGA+0x5ec>
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <decodeGGA+0x668>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a1f      	ldr	r2, [pc, #124]	@ (800123c <decodeGGA+0x668>)
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <decodeGGA+0x668>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b2c      	cmp	r3, #44	@ 0x2c
 80011ce:	d1f2      	bne.n	80011b6 <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <decodeGGA+0x668>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4a19      	ldr	r2, [pc, #100]	@ (800123c <decodeGGA+0x668>)
 80011d8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	220c      	movs	r2, #12
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fa25 	bl	8004632 <memset>
	i=0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 80011ec:	e013      	b.n	8001216 <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <decodeGGA+0x668>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	7819      	ldrb	r1, [r3, #0]
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001200:	4413      	add	r3, r2
 8001202:	460a      	mov	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
		i++;
 8001206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001208:	3301      	adds	r3, #1
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <decodeGGA+0x668>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <decodeGGA+0x668>)
 8001214:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <decodeGGA+0x668>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b2c      	cmp	r3, #44	@ 0x2c
 8001224:	d1e3      	bne.n	80011ee <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f9e6 	bl	80035fc <atoi>
 8001230:	4603      	mov	r3, r0
 8001232:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 8001238:	e009      	b.n	800124e <decodeGGA+0x67a>
 800123a:	bf00      	nop
 800123c:	2000020c 	.word	0x2000020c
 8001240:	40590000 	.word	0x40590000
 8001244:	40240000 	.word	0x40240000
 8001248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800124a:	3301      	adds	r3, #1
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800124e:	f107 020c 	add.w	r2, r7, #12
 8001252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b2e      	cmp	r3, #46	@ 0x2e
 800125a:	d1f5      	bne.n	8001248 <decodeGGA+0x674>
	j++;
 800125c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125e:	3301      	adds	r3, #1
 8001260:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ff72 	bl	8000150 <strlen>
 800126c:	4602      	mov	r2, r0
 800126e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001276:	f107 020c 	add.w	r2, r7, #12
 800127a:	4413      	add	r3, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f002 f9bd 	bl	80035fc <atoi>
 8001282:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001284:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f8bb 	bl	8000404 <__aeabi_i2d>
 800128e:	4604      	mov	r4, r0
 8001290:	460d      	mov	r5, r1
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f7ff f8b6 	bl	8000404 <__aeabi_i2d>
 8001298:	4680      	mov	r8, r0
 800129a:	4689      	mov	r9, r1
 800129c:	6a38      	ldr	r0, [r7, #32]
 800129e:	f7ff f8b1 	bl	8000404 <__aeabi_i2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	f04f 0000 	mov.w	r0, #0
 80012aa:	4917      	ldr	r1, [pc, #92]	@ (8001308 <decodeGGA+0x734>)
 80012ac:	f006 fd0e 	bl	8007ccc <pow>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4640      	mov	r0, r8
 80012b6:	4649      	mov	r1, r9
 80012b8:	f7ff fa38 	bl	800072c <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4620      	mov	r0, r4
 80012c2:	4629      	mov	r1, r5
 80012c4:	f7fe ff52 	bl	800016c <__adddf3>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fbfa 	bl	8000ac8 <__aeabi_d2f>
 80012d4:	4603      	mov	r3, r0
 80012d6:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	621a      	str	r2, [r3, #32]

	inx++;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <decodeGGA+0x738>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4a09      	ldr	r2, [pc, #36]	@ (800130c <decodeGGA+0x738>)
 80012e6:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <decodeGGA+0x738>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 80012fa:	2300      	movs	r3, #0

}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3730      	adds	r7, #48	@ 0x30
 8001300:	46bd      	mov	sp, r7
 8001302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001306:	bf00      	nop
 8001308:	40240000 	.word	0x40240000
 800130c:	2000020c 	.word	0x2000020c

08001310 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001314:	b090      	sub	sp, #64	@ 0x40
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800131c:	4b92      	ldr	r3, [pc, #584]	@ (8001568 <decodeRMC+0x258>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8001326:	e004      	b.n	8001332 <decodeRMC+0x22>
 8001328:	4b8f      	ldr	r3, [pc, #572]	@ (8001568 <decodeRMC+0x258>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3301      	adds	r3, #1
 800132e:	4a8e      	ldr	r2, [pc, #568]	@ (8001568 <decodeRMC+0x258>)
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b8d      	ldr	r3, [pc, #564]	@ (8001568 <decodeRMC+0x258>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001340:	d1f2      	bne.n	8001328 <decodeRMC+0x18>
	inx++;
 8001342:	4b89      	ldr	r3, [pc, #548]	@ (8001568 <decodeRMC+0x258>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a87      	ldr	r2, [pc, #540]	@ (8001568 <decodeRMC+0x258>)
 800134a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 800134c:	e004      	b.n	8001358 <decodeRMC+0x48>
 800134e:	4b86      	ldr	r3, [pc, #536]	@ (8001568 <decodeRMC+0x258>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a84      	ldr	r2, [pc, #528]	@ (8001568 <decodeRMC+0x258>)
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b83      	ldr	r3, [pc, #524]	@ (8001568 <decodeRMC+0x258>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b2c      	cmp	r3, #44	@ 0x2c
 8001366:	d1f2      	bne.n	800134e <decodeRMC+0x3e>
	inx++;
 8001368:	4b7f      	ldr	r3, [pc, #508]	@ (8001568 <decodeRMC+0x258>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a7e      	ldr	r2, [pc, #504]	@ (8001568 <decodeRMC+0x258>)
 8001370:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001372:	4b7d      	ldr	r3, [pc, #500]	@ (8001568 <decodeRMC+0x258>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b41      	cmp	r3, #65	@ 0x41
 8001380:	d10d      	bne.n	800139e <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001388:	4b77      	ldr	r3, [pc, #476]	@ (8001568 <decodeRMC+0x258>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a76      	ldr	r2, [pc, #472]	@ (8001568 <decodeRMC+0x258>)
 8001390:	6013      	str	r3, [r2, #0]
	inx++;
 8001392:	4b75      	ldr	r3, [pc, #468]	@ (8001568 <decodeRMC+0x258>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a73      	ldr	r2, [pc, #460]	@ (8001568 <decodeRMC+0x258>)
 800139a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800139c:	e009      	b.n	80013b2 <decodeRMC+0xa2>
		rmc->isValid =0;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
		return 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e1d5      	b.n	8001754 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80013a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001568 <decodeRMC+0x258>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001568 <decodeRMC+0x258>)
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001568 <decodeRMC+0x258>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b2c      	cmp	r3, #44	@ 0x2c
 80013c0:	d1f2      	bne.n	80013a8 <decodeRMC+0x98>
	inx++;
 80013c2:	4b69      	ldr	r3, [pc, #420]	@ (8001568 <decodeRMC+0x258>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a67      	ldr	r2, [pc, #412]	@ (8001568 <decodeRMC+0x258>)
 80013ca:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80013cc:	e004      	b.n	80013d8 <decodeRMC+0xc8>
 80013ce:	4b66      	ldr	r3, [pc, #408]	@ (8001568 <decodeRMC+0x258>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a64      	ldr	r2, [pc, #400]	@ (8001568 <decodeRMC+0x258>)
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b63      	ldr	r3, [pc, #396]	@ (8001568 <decodeRMC+0x258>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80013e6:	d1f2      	bne.n	80013ce <decodeRMC+0xbe>
	inx++;
 80013e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001568 <decodeRMC+0x258>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001568 <decodeRMC+0x258>)
 80013f0:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 80013f2:	e004      	b.n	80013fe <decodeRMC+0xee>
 80013f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001568 <decodeRMC+0x258>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001568 <decodeRMC+0x258>)
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001568 <decodeRMC+0x258>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b2c      	cmp	r3, #44	@ 0x2c
 800140c:	d1f2      	bne.n	80013f4 <decodeRMC+0xe4>
	inx++;
 800140e:	4b56      	ldr	r3, [pc, #344]	@ (8001568 <decodeRMC+0x258>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a54      	ldr	r2, [pc, #336]	@ (8001568 <decodeRMC+0x258>)
 8001416:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001418:	e004      	b.n	8001424 <decodeRMC+0x114>
 800141a:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <decodeRMC+0x258>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a51      	ldr	r2, [pc, #324]	@ (8001568 <decodeRMC+0x258>)
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <decodeRMC+0x258>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b2c      	cmp	r3, #44	@ 0x2c
 8001432:	d1f2      	bne.n	800141a <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001434:	4b4c      	ldr	r3, [pc, #304]	@ (8001568 <decodeRMC+0x258>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a4b      	ldr	r2, [pc, #300]	@ (8001568 <decodeRMC+0x258>)
 800143c:	6013      	str	r3, [r2, #0]
	i=0;
 800143e:	2300      	movs	r3, #0
 8001440:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	220c      	movs	r2, #12
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f003 f8f1 	bl	8004632 <memset>
	while (RMCbuffer[inx] != ',')
 8001450:	e013      	b.n	800147a <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8001452:	4b45      	ldr	r3, [pc, #276]	@ (8001568 <decodeRMC+0x258>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	7819      	ldrb	r1, [r3, #0]
 800145e:	f107 0208 	add.w	r2, r7, #8
 8001462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001464:	4413      	add	r3, r2
 8001466:	460a      	mov	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
		i++;
 800146a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800146c:	3301      	adds	r3, #1
 800146e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001470:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <decodeRMC+0x258>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	4a3c      	ldr	r2, [pc, #240]	@ (8001568 <decodeRMC+0x258>)
 8001478:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <decodeRMC+0x258>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b2c      	cmp	r3, #44	@ 0x2c
 8001488:	d1e3      	bne.n	8001452 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d055      	beq.n	8001540 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f002 f8af 	bl	80035fc <atoi>
 800149e:	4603      	mov	r3, r0
 80014a0:	867b      	strh	r3, [r7, #50]	@ 0x32
		int j = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.') j++;   // same as above
 80014a6:	e002      	b.n	80014ae <decodeRMC+0x19e>
 80014a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014aa:	3301      	adds	r3, #1
 80014ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014ae:	f107 0208 	add.w	r2, r7, #8
 80014b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80014ba:	d1f5      	bne.n	80014a8 <decodeRMC+0x198>
		j++;
 80014bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014be:	3301      	adds	r3, #1
 80014c0:	63bb      	str	r3, [r7, #56]	@ 0x38
		int declen = (strlen(buffer))-j;
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fe42 	bl	8000150 <strlen>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dec = atoi ((char *) buffer+j);
 80014d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014d6:	f107 0208 	add.w	r2, r7, #8
 80014da:	4413      	add	r3, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 f88d 	bl	80035fc <atoi>
 80014e2:	62b8      	str	r0, [r7, #40]	@ 0x28
		float lat = num + (dec/pow(10, (declen)));
 80014e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe ff8b 	bl	8000404 <__aeabi_i2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014f4:	f7fe ff86 	bl	8000404 <__aeabi_i2d>
 80014f8:	4680      	mov	r8, r0
 80014fa:	4689      	mov	r9, r1
 80014fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80014fe:	f7fe ff81 	bl	8000404 <__aeabi_i2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	4918      	ldr	r1, [pc, #96]	@ (800156c <decodeRMC+0x25c>)
 800150c:	f006 fbde 	bl	8007ccc <pow>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4640      	mov	r0, r8
 8001516:	4649      	mov	r1, r9
 8001518:	f7ff f908 	bl	800072c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7fe fe22 	bl	800016c <__adddf3>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff faca 	bl	8000ac8 <__aeabi_d2f>
 8001534:	4603      	mov	r3, r0
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
		rmc->speed = lat;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	e003      	b.n	8001548 <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <decodeRMC+0x258>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a06      	ldr	r2, [pc, #24]	@ (8001568 <decodeRMC+0x258>)
 8001550:	6013      	str	r3, [r2, #0]
	i=0;
 8001552:	2300      	movs	r3, #0
 8001554:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	220c      	movs	r2, #12
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f867 	bl	8004632 <memset>
	while (RMCbuffer[inx] != ',')
 8001564:	e018      	b.n	8001598 <decodeRMC+0x288>
 8001566:	bf00      	nop
 8001568:	2000020c 	.word	0x2000020c
 800156c:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 8001570:	4b7b      	ldr	r3, [pc, #492]	@ (8001760 <decodeRMC+0x450>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	7819      	ldrb	r1, [r3, #0]
 800157c:	f107 0208 	add.w	r2, r7, #8
 8001580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001582:	4413      	add	r3, r2
 8001584:	460a      	mov	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
		i++;
 8001588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800158a:	3301      	adds	r3, #1
 800158c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 800158e:	4b74      	ldr	r3, [pc, #464]	@ (8001760 <decodeRMC+0x450>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a72      	ldr	r2, [pc, #456]	@ (8001760 <decodeRMC+0x450>)
 8001596:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001598:	4b71      	ldr	r3, [pc, #452]	@ (8001760 <decodeRMC+0x450>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b2c      	cmp	r3, #44	@ 0x2c
 80015a6:	d1e3      	bne.n	8001570 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d055      	beq.n	800165e <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 f820 	bl	80035fc <atoi>
 80015bc:	4603      	mov	r3, r0
 80015be:	847b      	strh	r3, [r7, #34]	@ 0x22
		int j = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.') j++;   // same as above
 80015c4:	e002      	b.n	80015cc <decodeRMC+0x2bc>
 80015c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c8:	3301      	adds	r3, #1
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80015cc:	f107 0208 	add.w	r2, r7, #8
 80015d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d2:	4413      	add	r3, r2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80015d8:	d1f5      	bne.n	80015c6 <decodeRMC+0x2b6>
		j++;
 80015da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015dc:	3301      	adds	r3, #1
 80015de:	637b      	str	r3, [r7, #52]	@ 0x34
		int declen = (strlen(buffer))-j;
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe fdb3 	bl	8000150 <strlen>
 80015ea:	4602      	mov	r2, r0
 80015ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 80015f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	4413      	add	r3, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fffe 	bl	80035fc <atoi>
 8001600:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001602:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fefc 	bl	8000404 <__aeabi_i2d>
 800160c:	4604      	mov	r4, r0
 800160e:	460d      	mov	r5, r1
 8001610:	69b8      	ldr	r0, [r7, #24]
 8001612:	f7fe fef7 	bl	8000404 <__aeabi_i2d>
 8001616:	4680      	mov	r8, r0
 8001618:	4689      	mov	r9, r1
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f7fe fef2 	bl	8000404 <__aeabi_i2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	f04f 0000 	mov.w	r0, #0
 8001628:	494e      	ldr	r1, [pc, #312]	@ (8001764 <decodeRMC+0x454>)
 800162a:	f006 fb4f 	bl	8007ccc <pow>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4640      	mov	r0, r8
 8001634:	4649      	mov	r1, r9
 8001636:	f7ff f879 	bl	800072c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4620      	mov	r0, r4
 8001640:	4629      	mov	r1, r5
 8001642:	f7fe fd93 	bl	800016c <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fa3b 	bl	8000ac8 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	e003      	b.n	8001666 <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001666:	4b3e      	ldr	r3, [pc, #248]	@ (8001760 <decodeRMC+0x450>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a3c      	ldr	r2, [pc, #240]	@ (8001760 <decodeRMC+0x450>)
 800166e:	6013      	str	r3, [r2, #0]
	i=0;
 8001670:	2300      	movs	r3, #0
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	220c      	movs	r2, #12
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f002 ffd8 	bl	8004632 <memset>
	while (RMCbuffer[inx] != ',')
 8001682:	e013      	b.n	80016ac <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8001684:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <decodeRMC+0x450>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	7819      	ldrb	r1, [r3, #0]
 8001690:	f107 0208 	add.w	r2, r7, #8
 8001694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001696:	4413      	add	r3, r2
 8001698:	460a      	mov	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
		i++;
 800169c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800169e:	3301      	adds	r3, #1
 80016a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80016a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001760 <decodeRMC+0x450>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001760 <decodeRMC+0x450>)
 80016aa:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80016ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001760 <decodeRMC+0x450>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b2c      	cmp	r3, #44	@ 0x2c
 80016ba:	d1e3      	bne.n	8001684 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 ff9b 	bl	80035fc <atoi>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a27      	ldr	r2, [pc, #156]	@ (8001768 <decodeRMC+0x458>)
 80016ca:	fb82 1203 	smull	r1, r2, r2, r3
 80016ce:	1312      	asrs	r2, r2, #12
 80016d0:	17db      	asrs	r3, r3, #31
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a25      	ldr	r2, [pc, #148]	@ (800176c <decodeRMC+0x45c>)
 80016d6:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 ff8d 	bl	80035fc <atoi>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a22      	ldr	r2, [pc, #136]	@ (8001770 <decodeRMC+0x460>)
 80016e6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ea:	1152      	asrs	r2, r2, #5
 80016ec:	17db      	asrs	r3, r3, #31
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <decodeRMC+0x460>)
 80016f2:	fb83 1302 	smull	r1, r3, r3, r2
 80016f6:	1159      	asrs	r1, r3, #5
 80016f8:	17d3      	asrs	r3, r2, #31
 80016fa:	1acb      	subs	r3, r1, r3
 80016fc:	2164      	movs	r1, #100	@ 0x64
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <decodeRMC+0x464>)
 8001706:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4618      	mov	r0, r3
 800170e:	f001 ff75 	bl	80035fc <atoi>
 8001712:	4602      	mov	r2, r0
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <decodeRMC+0x460>)
 8001716:	fb83 1302 	smull	r1, r3, r3, r2
 800171a:	1159      	asrs	r1, r3, #5
 800171c:	17d3      	asrs	r3, r2, #31
 800171e:	1acb      	subs	r3, r1, r3
 8001720:	2164      	movs	r1, #100	@ 0x64
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4a13      	ldr	r2, [pc, #76]	@ (8001778 <decodeRMC+0x468>)
 800172a:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <decodeRMC+0x45c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <decodeRMC+0x46c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4413      	add	r3, r2
 8001736:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <decodeRMC+0x45c>)
 8001738:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <decodeRMC+0x45c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <decodeRMC+0x464>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 800174a:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <decodeRMC+0x468>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	609a      	str	r2, [r3, #8]

	return 0;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3740      	adds	r7, #64	@ 0x40
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800175e:	bf00      	nop
 8001760:	2000020c 	.word	0x2000020c
 8001764:	40240000 	.word	0x40240000
 8001768:	68db8bad 	.word	0x68db8bad
 800176c:	20000218 	.word	0x20000218
 8001770:	51eb851f 	.word	0x51eb851f
 8001774:	2000021c 	.word	0x2000021c
 8001778:	20000220 	.word	0x20000220
 800177c:	20000224 	.word	0x20000224

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001786:	f000 fded 	bl	8002364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178a:	f000 f8f3 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178e:	f000 f98b 	bl	8001aa8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001792:	f000 f935 	bl	8001a00 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001796:	f000 f95d 	bl	8001a54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_init();
 800179a:	f000 fbad 	bl	8001ef8 <Ringbuf_init>
  HAL_Delay(500);
 800179e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017a2:	f000 fe41 	bl	8002428 <HAL_Delay>
  uartx_write_text(&huart1, "Hello LM35...\r\n");
 80017a6:	4960      	ldr	r1, [pc, #384]	@ (8001928 <main+0x1a8>)
 80017a8:	4860      	ldr	r0, [pc, #384]	@ (800192c <main+0x1ac>)
 80017aa:	f000 fb8e 	bl	8001eca <uartx_write_text>
  HAL_Delay(500);
 80017ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017b2:	f000 fe39 	bl	8002428 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if (Wait_for("GGA") == 1)
 80017b6:	485e      	ldr	r0, [pc, #376]	@ (8001930 <main+0x1b0>)
 80017b8:	f000 fcc8 	bl	800214c <Wait_for>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d115      	bne.n	80017ee <main+0x6e>
	 	  {

	 		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 80017c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001934 <main+0x1b4>)
 80017c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c8:	601a      	str	r2, [r3, #0]

	 		  Copy_upto("*", GGA);
 80017ca:	495b      	ldr	r1, [pc, #364]	@ (8001938 <main+0x1b8>)
 80017cc:	485b      	ldr	r0, [pc, #364]	@ (800193c <main+0x1bc>)
 80017ce:	f000 fc3d 	bl	800204c <Copy_upto>
	 		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 80017d2:	495b      	ldr	r1, [pc, #364]	@ (8001940 <main+0x1c0>)
 80017d4:	4858      	ldr	r0, [pc, #352]	@ (8001938 <main+0x1b8>)
 80017d6:	f7ff f9fd 	bl	8000bd4 <decodeGGA>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d103      	bne.n	80017e8 <main+0x68>
 80017e0:	4b58      	ldr	r3, [pc, #352]	@ (8001944 <main+0x1c4>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e002      	b.n	80017ee <main+0x6e>
	 		  else flagGGA = 1;  // 1 indicates the data is invalid
 80017e8:	4b56      	ldr	r3, [pc, #344]	@ (8001944 <main+0x1c4>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if (Wait_for("RMC") == 1)
 80017ee:	4856      	ldr	r0, [pc, #344]	@ (8001948 <main+0x1c8>)
 80017f0:	f000 fcac 	bl	800214c <Wait_for>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d115      	bne.n	8001826 <main+0xa6>
	 	  {

	 		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 80017fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <main+0x1b4>)
 80017fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001800:	601a      	str	r2, [r3, #0]

	 		  Copy_upto("*", RMC);
 8001802:	4952      	ldr	r1, [pc, #328]	@ (800194c <main+0x1cc>)
 8001804:	484d      	ldr	r0, [pc, #308]	@ (800193c <main+0x1bc>)
 8001806:	f000 fc21 	bl	800204c <Copy_upto>
	 		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 800180a:	4951      	ldr	r1, [pc, #324]	@ (8001950 <main+0x1d0>)
 800180c:	484f      	ldr	r0, [pc, #316]	@ (800194c <main+0x1cc>)
 800180e:	f7ff fd7f 	bl	8001310 <decodeRMC>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d103      	bne.n	8001820 <main+0xa0>
 8001818:	4b4e      	ldr	r3, [pc, #312]	@ (8001954 <main+0x1d4>)
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e002      	b.n	8001826 <main+0xa6>
	 		  else flagRMC = 1;  // 1 indicates the data is invalid
 8001820:	4b4c      	ldr	r3, [pc, #304]	@ (8001954 <main+0x1d4>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]
	 	  }

	 	  if((flagGGA == 2 ) | (flagRMC == 2 )){
 8001826:	4b47      	ldr	r3, [pc, #284]	@ (8001944 <main+0x1c4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b02      	cmp	r3, #2
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <main+0x1d4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b02      	cmp	r3, #2
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d03b      	beq.n	80018c2 <main+0x142>
			  sprintf (lcdBuffer, "%02d:%02d:%02d, %02d%02d%02d", gpsData.ggastruct.tim.hour, \
 800184a:	4b3d      	ldr	r3, [pc, #244]	@ (8001940 <main+0x1c0>)
 800184c:	691c      	ldr	r4, [r3, #16]
 800184e:	4b3c      	ldr	r3, [pc, #240]	@ (8001940 <main+0x1c0>)
 8001850:	695d      	ldr	r5, [r3, #20]
 8001852:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <main+0x1c0>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a3a      	ldr	r2, [pc, #232]	@ (8001940 <main+0x1c0>)
 8001858:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800185a:	4939      	ldr	r1, [pc, #228]	@ (8001940 <main+0x1c0>)
 800185c:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800185e:	4838      	ldr	r0, [pc, #224]	@ (8001940 <main+0x1c0>)
 8001860:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001862:	9003      	str	r0, [sp, #12]
 8001864:	9102      	str	r1, [sp, #8]
 8001866:	9201      	str	r2, [sp, #4]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	462b      	mov	r3, r5
 800186c:	4622      	mov	r2, r4
 800186e:	493a      	ldr	r1, [pc, #232]	@ (8001958 <main+0x1d8>)
 8001870:	483a      	ldr	r0, [pc, #232]	@ (800195c <main+0x1dc>)
 8001872:	f002 fe7b 	bl	800456c <siprintf>

				gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
	 			  //lcd_send_string(lcdBuffer);
	 			  //memset(lcdBuffer, '\0', 50);
	 			 // lcd_put_cur(1, 0);
			  uartx_write_text(&huart1, lcdBuffer);
 8001876:	4939      	ldr	r1, [pc, #228]	@ (800195c <main+0x1dc>)
 8001878:	482c      	ldr	r0, [pc, #176]	@ (800192c <main+0x1ac>)
 800187a:	f000 fb26 	bl	8001eca <uartx_write_text>
			  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 800187e:	4b30      	ldr	r3, [pc, #192]	@ (8001940 <main+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fdd0 	bl	8000428 <__aeabi_f2d>
 8001888:	4604      	mov	r4, r0
 800188a:	460d      	mov	r5, r1
 800188c:	4b2c      	ldr	r3, [pc, #176]	@ (8001940 <main+0x1c0>)
 800188e:	791b      	ldrb	r3, [r3, #4]
 8001890:	461e      	mov	r6, r3
	 					  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001892:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <main+0x1c0>)
 8001894:	689b      	ldr	r3, [r3, #8]
			  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fdc6 	bl	8000428 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
	 					  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 80018a0:	4927      	ldr	r1, [pc, #156]	@ (8001940 <main+0x1c0>)
 80018a2:	7b09      	ldrb	r1, [r1, #12]
			  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 80018a4:	9104      	str	r1, [sp, #16]
 80018a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	4622      	mov	r2, r4
 80018ae:	462b      	mov	r3, r5
 80018b0:	492b      	ldr	r1, [pc, #172]	@ (8001960 <main+0x1e0>)
 80018b2:	482a      	ldr	r0, [pc, #168]	@ (800195c <main+0x1dc>)
 80018b4:	f002 fe5a 	bl	800456c <siprintf>
	 			  //lcd_send_string(lcdBuffer);
			  uartx_write_text(&huart1, lcdBuffer);
 80018b8:	4928      	ldr	r1, [pc, #160]	@ (800195c <main+0x1dc>)
 80018ba:	481c      	ldr	r0, [pc, #112]	@ (800192c <main+0x1ac>)
 80018bc:	f000 fb05 	bl	8001eca <uartx_write_text>
 80018c0:	e019      	b.n	80018f6 <main+0x176>
	 		  }

	 		  else if ((flagGGA == 1) | (flagRMC == 1))
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <main+0x1c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	bf0c      	ite	eq
 80018ca:	2301      	moveq	r3, #1
 80018cc:	2300      	movne	r3, #0
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <main+0x1d4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <main+0x176>
	 		  {
	 			  // Instead of clearing the display, it's better if we print spaces.
	 			  // This will avoid the "refreshing" part
				  uartx_write_text(&huart1, "   NO FIX YET   ");
 80018e6:	491f      	ldr	r1, [pc, #124]	@ (8001964 <main+0x1e4>)
 80018e8:	4810      	ldr	r0, [pc, #64]	@ (800192c <main+0x1ac>)
 80018ea:	f000 faee 	bl	8001eca <uartx_write_text>

				  uartx_write_text(&huart1, "   Please wait  ");
 80018ee:	491e      	ldr	r1, [pc, #120]	@ (8001968 <main+0x1e8>)
 80018f0:	480e      	ldr	r0, [pc, #56]	@ (800192c <main+0x1ac>)
 80018f2:	f000 faea 	bl	8001eca <uartx_write_text>

	 		  }

	 		  if (VCCTimeout <= 0)
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <main+0x1b4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f73f af5b 	bgt.w	80017b6 <main+0x36>
	 		  {
	 			  VCCTimeout = 5000;  // Reset the timeout
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <main+0x1b4>)
 8001902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001906:	601a      	str	r2, [r3, #0]

	 			  //reset flags
	 			  flagGGA =flagRMC =0;
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <main+0x1d4>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <main+0x1d4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <main+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

	 			  // You are here means the VCC is less, or maybe there is some connection issue
	 			  // Check the VCC, also you can try connecting to the external 5V


				  uartx_write_text(&huart1, "    VCC Issue   ");
 8001916:	4915      	ldr	r1, [pc, #84]	@ (800196c <main+0x1ec>)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <main+0x1ac>)
 800191a:	f000 fad6 	bl	8001eca <uartx_write_text>

				  uartx_write_text(&huart1, "Check Connection");
 800191e:	4914      	ldr	r1, [pc, #80]	@ (8001970 <main+0x1f0>)
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <main+0x1ac>)
 8001922:	f000 fad2 	bl	8001eca <uartx_write_text>
	  if (Wait_for("GGA") == 1)
 8001926:	e746      	b.n	80017b6 <main+0x36>
 8001928:	08008b00 	.word	0x08008b00
 800192c:	20000228 	.word	0x20000228
 8001930:	08008b10 	.word	0x08008b10
 8001934:	20000004 	.word	0x20000004
 8001938:	200002b8 	.word	0x200002b8
 800193c:	08008b14 	.word	0x08008b14
 8001940:	20000380 	.word	0x20000380
 8001944:	200003c4 	.word	0x200003c4
 8001948:	08008b18 	.word	0x08008b18
 800194c:	2000031c 	.word	0x2000031c
 8001950:	200003ac 	.word	0x200003ac
 8001954:	200003c8 	.word	0x200003c8
 8001958:	08008b1c 	.word	0x08008b1c
 800195c:	200003cc 	.word	0x200003cc
 8001960:	08008b3c 	.word	0x08008b3c
 8001964:	08008b50 	.word	0x08008b50
 8001968:	08008b64 	.word	0x08008b64
 800196c:	08008b78 	.word	0x08008b78
 8001970:	08008b8c 	.word	0x08008b8c

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b090      	sub	sp, #64	@ 0x40
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 0318 	add.w	r3, r7, #24
 800197e:	2228      	movs	r2, #40	@ 0x28
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fe55 	bl	8004632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800199a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800199e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a4:	2301      	movs	r3, #1
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a8:	2302      	movs	r3, #2
 80019aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b8:	f107 0318 	add.w	r3, r7, #24
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 ffe9 	bl	8002994 <HAL_RCC_OscConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019c8:	f000 f89c 	bl	8001b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019cc:	230f      	movs	r3, #15
 80019ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d0:	2302      	movs	r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 fa56 	bl	8002e98 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019f2:	f000 f887 	bl	8001b04 <Error_Handler>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3740      	adds	r7, #64	@ 0x40
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <MX_USART1_UART_Init+0x50>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a38:	f001 fbbc 	bl	80031b4 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a42:	f000 f85f 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000228 	.word	0x20000228
 8001a50:	40013800 	.word	0x40013800

08001a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <MX_USART3_UART_Init+0x50>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a60:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <MX_USART3_UART_Init+0x4c>)
 8001a8c:	f001 fb92 	bl	80031b4 <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a96:	f000 f835 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000270 	.word	0x20000270
 8001aa4:	40004800 	.word	0x40004800

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a13      	ldr	r2, [pc, #76]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001ab4:	f043 0320 	orr.w	r3, r3, #32
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	6193      	str	r3, [r2, #24]
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6193      	str	r3, [r2, #24]
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <MX_GPIO_Init+0x58>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <Error_Handler+0x8>

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_MspInit+0x60>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <HAL_MspInit+0x60>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000

08001b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0318 	add.w	r3, r7, #24
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c80 <HAL_UART_MspInit+0x10c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d132      	bne.n	8001bfa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b94:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a3a      	ldr	r2, [pc, #232]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001b9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b35      	ldr	r3, [pc, #212]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a34      	ldr	r2, [pc, #208]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	482b      	ldr	r0, [pc, #172]	@ (8001c88 <HAL_UART_MspInit+0x114>)
 8001bda:	f000 fd57 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 0318 	add.w	r3, r7, #24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4825      	ldr	r0, [pc, #148]	@ (8001c88 <HAL_UART_MspInit+0x114>)
 8001bf4:	f000 fd4a 	bl	800268c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bf8:	e03e      	b.n	8001c78 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a23      	ldr	r2, [pc, #140]	@ (8001c8c <HAL_UART_MspInit+0x118>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d139      	bne.n	8001c78 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c04:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	4a1e      	ldr	r2, [pc, #120]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0e:	61d3      	str	r3, [r2, #28]
 8001c10:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_UART_MspInit+0x110>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	4619      	mov	r1, r3
 8001c48:	4811      	ldr	r0, [pc, #68]	@ (8001c90 <HAL_UART_MspInit+0x11c>)
 8001c4a:	f000 fd1f 	bl	800268c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 0318 	add.w	r3, r7, #24
 8001c60:	4619      	mov	r1, r3
 8001c62:	480b      	ldr	r0, [pc, #44]	@ (8001c90 <HAL_UART_MspInit+0x11c>)
 8001c64:	f000 fd12 	bl	800268c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2027      	movs	r0, #39	@ 0x27
 8001c6e:	f000 fcd6 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c72:	2027      	movs	r0, #39	@ 0x27
 8001c74:	f000 fcef 	bl	8002656 <HAL_NVIC_EnableIRQ>
}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	@ 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40013800 	.word	0x40013800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	40004800 	.word	0x40004800
 8001c90:	40010c00 	.word	0x40010c00

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <NMI_Handler+0x4>

08001c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <MemManage_Handler+0x4>

08001cac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(timeout >0)  timeout--;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SysTick_Handler+0x20>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <SysTick_Handler+0x18>
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <SysTick_Handler+0x20>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b02      	ldr	r3, [pc, #8]	@ (8001d00 <SysTick_Handler+0x20>)
 8001cf6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 fb7a 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000404 	.word	0x20000404

08001d04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <USART3_IRQHandler+0x10>)
 8001d0a:	f000 faa7 	bl	800225c <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
 // HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000270 	.word	0x20000270

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_kill>:

int _kill(int pid, int sig)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d30:	f002 fcd2 	bl	80046d8 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2216      	movs	r2, #22
 8001d38:	601a      	str	r2, [r3, #0]
  return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_exit>:

void _exit (int status)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffe7 	bl	8001d26 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <_exit+0x12>

08001d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	4601      	mov	r1, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf0      	blt.n	8001d6e <_read+0x12>
  }

  return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e009      	b.n	8001dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf1      	blt.n	8001da8 <_write+0x12>
  }
  return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_close>:

int _close(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df4:	605a      	str	r2, [r3, #4]
  return 0;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <_isatty>:

int _isatty(int file)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f002 fc3a 	bl	80046d8 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20005000 	.word	0x20005000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	20000400 	.word	0x20000400
 8001e98:	20000970 	.word	0x20000970

08001e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <uartx_write>:

#include "uart.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 8001eb4:	1cf9      	adds	r1, r7, #3
 8001eb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eba:	2201      	movs	r2, #1
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f001 f9c9 	bl	8003254 <HAL_UART_Transmit>

}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 8001ed4:	e007      	b.n	8001ee6 <uartx_write_text+0x1c>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	603a      	str	r2, [r7, #0]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ffe1 	bl	8001ea8 <uartx_write>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f3      	bne.n	8001ed6 <uartx_write_text+0xc>

}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <Ringbuf_init+0x38>)
 8001efe:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <Ringbuf_init+0x3c>)
 8001f00:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <Ringbuf_init+0x40>)
 8001f04:	4a0d      	ldr	r2, [pc, #52]	@ (8001f3c <Ringbuf_init+0x44>)
 8001f06:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001f08:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <Ringbuf_init+0x48>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <Ringbuf_init+0x48>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <Ringbuf_init+0x48>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <Ringbuf_init+0x48>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	60da      	str	r2, [r3, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000818 	.word	0x20000818
 8001f34:	20000408 	.word	0x20000408
 8001f38:	2000081c 	.word	0x2000081c
 8001f3c:	20000610 	.word	0x20000610
 8001f40:	20000270 	.word	0x20000270

08001f44 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d009      	beq.n	8001f7e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	79f9      	ldrb	r1, [r7, #7]
 8001f74:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <Uart_read+0x54>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <Uart_read+0x54>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d102      	bne.n	8001fa8 <Uart_read+0x20>
  {
    return -1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e013      	b.n	8001fd0 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <Uart_read+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <Uart_read+0x54>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <Uart_read+0x54>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <Uart_read+0x54>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8001fce:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000818 	.word	0x20000818

08001fe0 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <IsDataAvailable+0x30>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <IsDataAvailable+0x30>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002000:	b29b      	uxth	r3, r3
 8002002:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000818 	.word	0x20000818

08002014 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <Uart_peek+0x34>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002020:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <Uart_peek+0x34>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002028:	429a      	cmp	r2, r3
 800202a:	d102      	bne.n	8002032 <Uart_peek+0x1e>
  {
    return -1;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	e006      	b.n	8002040 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <Uart_peek+0x34>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <Uart_peek+0x34>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800203e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000818 	.word	0x20000818

0800204c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe f878 	bl	8000150 <strlen>
 8002060:	4603      	mov	r3, r0
 8002062:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002068:	e01e      	b.n	80020a8 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800206a:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <Copy_upto+0xf8>)
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	4b35      	ldr	r3, [pc, #212]	@ (8002144 <Copy_upto+0xf8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6838      	ldr	r0, [r7, #0]
 800207a:	4403      	add	r3, r0
 800207c:	5c8a      	ldrb	r2, [r1, r2]
 800207e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <Copy_upto+0xf8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <Copy_upto+0xf8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002092:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	3301      	adds	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 800209c:	bf00      	nop
 800209e:	f7ff ff9f 	bl	8001fe0 <IsDataAvailable>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0fa      	beq.n	800209e <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80020a8:	f7ff ffb4 	bl	8002014 <Uart_peek>
 80020ac:	4601      	mov	r1, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4299      	cmp	r1, r3
 80020b8:	d1d7      	bne.n	800206a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80020ba:	e027      	b.n	800210c <Copy_upto+0xc0>
	{
		so_far++;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80020c2:	f7ff ff61 	bl	8001f88 <Uart_read>
 80020c6:	4601      	mov	r1, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	613a      	str	r2, [r7, #16]
 80020ce:	461a      	mov	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	b2ca      	uxtb	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d101      	bne.n	80020e4 <Copy_upto+0x98>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e02a      	b.n	800213a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80020e4:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <Copy_upto+0xfc>)
 80020e6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80020ea:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80020ec:	bf00      	nop
 80020ee:	f7ff ff77 	bl	8001fe0 <IsDataAvailable>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <Copy_upto+0xb4>
 80020f8:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <Copy_upto+0xfc>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f6      	bne.n	80020ee <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <Copy_upto+0xfc>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <Copy_upto+0xc0>
 8002108:	2300      	movs	r3, #0
 800210a:	e016      	b.n	800213a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 800210c:	f7ff ff82 	bl	8002014 <Uart_peek>
 8002110:	4601      	mov	r1, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4299      	cmp	r1, r3
 800211c:	d0ce      	beq.n	80020bc <Copy_upto+0x70>
	}

	if (so_far != len)
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	429a      	cmp	r2, r3
 8002124:	d002      	beq.n	800212c <Copy_upto+0xe0>
	{
		so_far = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
		goto again;
 800212a:	e79d      	b.n	8002068 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d101      	bne.n	8002138 <Copy_upto+0xec>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <Copy_upto+0xee>
	else return 0;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000818 	.word	0x20000818
 8002148:	20000404 	.word	0x20000404

0800214c <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fd fff9 	bl	8000150 <strlen>
 800215e:	4603      	mov	r3, r0
 8002160:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002162:	4b3c      	ldr	r3, [pc, #240]	@ (8002254 <Wait_for+0x108>)
 8002164:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002168:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800216a:	bf00      	nop
 800216c:	f7ff ff38 	bl	8001fe0 <IsDataAvailable>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <Wait_for+0x32>
 8002176:	4b37      	ldr	r3, [pc, #220]	@ (8002254 <Wait_for+0x108>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f6      	bne.n	800216c <Wait_for+0x20>
	if (timeout == 0) return 0;
 800217e:	4b35      	ldr	r3, [pc, #212]	@ (8002254 <Wait_for+0x108>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d119      	bne.n	80021ba <Wait_for+0x6e>
 8002186:	2300      	movs	r3, #0
 8002188:	e060      	b.n	800224c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 800218a:	4b33      	ldr	r3, [pc, #204]	@ (8002258 <Wait_for+0x10c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002192:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <Wait_for+0x10c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800219a:	429a      	cmp	r2, r3
 800219c:	d00b      	beq.n	80021b6 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800219e:	4b2e      	ldr	r3, [pc, #184]	@ (8002258 <Wait_for+0x10c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <Wait_for+0x10c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80021b4:	e001      	b.n	80021ba <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e048      	b.n	800224c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80021ba:	f7ff ff2b 	bl	8002014 <Uart_peek>
 80021be:	4601      	mov	r1, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4299      	cmp	r1, r3
 80021ca:	d1de      	bne.n	800218a <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80021cc:	e027      	b.n	800221e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80021d4:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <Wait_for+0x10c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <Wait_for+0x10c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d101      	bne.n	80021f6 <Wait_for+0xaa>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e02a      	b.n	800224c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80021f6:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <Wait_for+0x108>)
 80021f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021fc:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80021fe:	bf00      	nop
 8002200:	f7ff feee 	bl	8001fe0 <IsDataAvailable>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <Wait_for+0xc6>
 800220a:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <Wait_for+0x108>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f6      	bne.n	8002200 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <Wait_for+0x108>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <Wait_for+0xd2>
 800221a:	2300      	movs	r3, #0
 800221c:	e016      	b.n	800224c <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800221e:	f7ff fef9 	bl	8002014 <Uart_peek>
 8002222:	4601      	mov	r1, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4299      	cmp	r1, r3
 800222e:	d0ce      	beq.n	80021ce <Wait_for+0x82>
	}

	if (so_far != len)
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	429a      	cmp	r2, r3
 8002236:	d002      	beq.n	800223e <Wait_for+0xf2>
	{
		so_far = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
		goto again;
 800223c:	e791      	b.n	8002162 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	d101      	bne.n	800224a <Wait_for+0xfe>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <Wait_for+0x100>
	else return 0;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000404 	.word	0x20000404
 8002258:	20000818 	.word	0x20000818

0800225c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d013      	beq.n	80022a6 <Uart_isr+0x4a>
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <Uart_isr+0xb4>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fe50 	bl	8001f44 <store_char>
        return;
 80022a4:	e031      	b.n	800230a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d02c      	beq.n	800230a <Uart_isr+0xae>
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d027      	beq.n	800230a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <Uart_isr+0xb8>)
 80022bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80022c0:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <Uart_isr+0xb8>)
 80022c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d108      	bne.n	80022dc <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80022da:	e015      	b.n	8002308 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80022dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <Uart_isr+0xb8>)
 80022de:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80022e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <Uart_isr+0xb8>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <Uart_isr+0xb8>)
 80022ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80022ee:	3301      	adds	r3, #1
 80022f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f4:	4a07      	ldr	r2, [pc, #28]	@ (8002314 <Uart_isr+0xb8>)
 80022f6:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	7bba      	ldrb	r2, [r7, #14]
 8002306:	605a      	str	r2, [r3, #4]
    	return;
 8002308:	bf00      	nop
    }
}
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000818 	.word	0x20000818
 8002314:	20000610 	.word	0x20000610

08002318 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002318:	f7ff fdc0 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800231c:	480b      	ldr	r0, [pc, #44]	@ (800234c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800231e:	490c      	ldr	r1, [pc, #48]	@ (8002350 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002320:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a09      	ldr	r2, [pc, #36]	@ (8002358 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002334:	4c09      	ldr	r4, [pc, #36]	@ (800235c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002342:	f002 f9cf 	bl	80046e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002346:	f7ff fa1b 	bl	8001780 <main>
  bx lr
 800234a:	4770      	bx	lr
  ldr r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002350:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002354:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 8002358:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800235c:	20000970 	.word	0x20000970

08002360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC1_2_IRQHandler>
	...

08002364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002368:	4b08      	ldr	r3, [pc, #32]	@ (800238c <HAL_Init+0x28>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a07      	ldr	r2, [pc, #28]	@ (800238c <HAL_Init+0x28>)
 800236e:	f043 0310 	orr.w	r3, r3, #16
 8002372:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002374:	2003      	movs	r0, #3
 8002376:	f000 f947 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237a:	200f      	movs	r0, #15
 800237c:	f000 f808 	bl	8002390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002380:	f7ff fbc6 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40022000 	.word	0x40022000

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_InitTick+0x54>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_InitTick+0x58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f95f 	bl	8002672 <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d80a      	bhi.n	80023da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f000 f927 	bl	800261e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d0:	4a06      	ldr	r2, [pc, #24]	@ (80023ec <HAL_InitTick+0x5c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000008 	.word	0x20000008
 80023e8:	20000010 	.word	0x20000010
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_IncTick+0x1c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_IncTick+0x20>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a03      	ldr	r2, [pc, #12]	@ (8002410 <HAL_IncTick+0x20>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000010 	.word	0x20000010
 8002410:	20000820 	.word	0x20000820

08002414 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return uwTick;
 8002418:	4b02      	ldr	r3, [pc, #8]	@ (8002424 <HAL_GetTick+0x10>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	20000820 	.word	0x20000820

08002428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff fff0 	bl	8002414 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d005      	beq.n	800244e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_Delay+0x44>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800244e:	bf00      	nop
 8002450:	f7ff ffe0 	bl	8002414 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d8f7      	bhi.n	8002450 <HAL_Delay+0x28>
  {
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000010 	.word	0x20000010

08002470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800248c:	4013      	ands	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800249c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a2:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	60d3      	str	r3, [r2, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024bc:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <__NVIC_GetPriorityGrouping+0x18>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 0307 	and.w	r3, r3, #7
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db0b      	blt.n	80024fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4906      	ldr	r1, [pc, #24]	@ (8002508 <__NVIC_EnableIRQ+0x34>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2001      	movs	r0, #1
 80024f6:	fa00 f202 	lsl.w	r2, r0, r2
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	@ (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	@ (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff90 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff2d 	bl	8002470 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff42 	bl	80024b8 <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff90 	bl	8002560 <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5f 	bl	800250c <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff35 	bl	80024d4 <__NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa2 	bl	80025c4 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b08b      	sub	sp, #44	@ 0x2c
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269e:	e169      	b.n	8002974 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a0:	2201      	movs	r2, #1
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8158 	bne.w	800296e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a9a      	ldr	r2, [pc, #616]	@ (800292c <HAL_GPIO_Init+0x2a0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d05e      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026c8:	4a98      	ldr	r2, [pc, #608]	@ (800292c <HAL_GPIO_Init+0x2a0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d875      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026ce:	4a98      	ldr	r2, [pc, #608]	@ (8002930 <HAL_GPIO_Init+0x2a4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d058      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026d4:	4a96      	ldr	r2, [pc, #600]	@ (8002930 <HAL_GPIO_Init+0x2a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d86f      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026da:	4a96      	ldr	r2, [pc, #600]	@ (8002934 <HAL_GPIO_Init+0x2a8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d052      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026e0:	4a94      	ldr	r2, [pc, #592]	@ (8002934 <HAL_GPIO_Init+0x2a8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d869      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026e6:	4a94      	ldr	r2, [pc, #592]	@ (8002938 <HAL_GPIO_Init+0x2ac>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d04c      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026ec:	4a92      	ldr	r2, [pc, #584]	@ (8002938 <HAL_GPIO_Init+0x2ac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d863      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026f2:	4a92      	ldr	r2, [pc, #584]	@ (800293c <HAL_GPIO_Init+0x2b0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d046      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026f8:	4a90      	ldr	r2, [pc, #576]	@ (800293c <HAL_GPIO_Init+0x2b0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d85d      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d82a      	bhi.n	8002758 <HAL_GPIO_Init+0xcc>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d859      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 8002706:	a201      	add	r2, pc, #4	@ (adr r2, 800270c <HAL_GPIO_Init+0x80>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002787 	.word	0x08002787
 8002710:	08002761 	.word	0x08002761
 8002714:	08002773 	.word	0x08002773
 8002718:	080027b5 	.word	0x080027b5
 800271c:	080027bb 	.word	0x080027bb
 8002720:	080027bb 	.word	0x080027bb
 8002724:	080027bb 	.word	0x080027bb
 8002728:	080027bb 	.word	0x080027bb
 800272c:	080027bb 	.word	0x080027bb
 8002730:	080027bb 	.word	0x080027bb
 8002734:	080027bb 	.word	0x080027bb
 8002738:	080027bb 	.word	0x080027bb
 800273c:	080027bb 	.word	0x080027bb
 8002740:	080027bb 	.word	0x080027bb
 8002744:	080027bb 	.word	0x080027bb
 8002748:	080027bb 	.word	0x080027bb
 800274c:	080027bb 	.word	0x080027bb
 8002750:	08002769 	.word	0x08002769
 8002754:	0800277d 	.word	0x0800277d
 8002758:	4a79      	ldr	r2, [pc, #484]	@ (8002940 <HAL_GPIO_Init+0x2b4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800275e:	e02c      	b.n	80027ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e029      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	3304      	adds	r3, #4
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e024      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	3308      	adds	r3, #8
 8002778:	623b      	str	r3, [r7, #32]
          break;
 800277a:	e01f      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	330c      	adds	r3, #12
 8002782:	623b      	str	r3, [r7, #32]
          break;
 8002784:	e01a      	b.n	80027bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800278e:	2304      	movs	r3, #4
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e013      	b.n	80027bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800279c:	2308      	movs	r3, #8
 800279e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	611a      	str	r2, [r3, #16]
          break;
 80027a6:	e009      	b.n	80027bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a8:	2308      	movs	r3, #8
 80027aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	615a      	str	r2, [r3, #20]
          break;
 80027b2:	e003      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
          break;
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_Init+0x130>
          break;
 80027ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2bff      	cmp	r3, #255	@ 0xff
 80027c0:	d801      	bhi.n	80027c6 <HAL_GPIO_Init+0x13a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_Init+0x13e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2bff      	cmp	r3, #255	@ 0xff
 80027d0:	d802      	bhi.n	80027d8 <HAL_GPIO_Init+0x14c>
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	e002      	b.n	80027de <HAL_GPIO_Init+0x152>
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	3b08      	subs	r3, #8
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	210f      	movs	r1, #15
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	6a39      	ldr	r1, [r7, #32]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80b1 	beq.w	800296e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800280c:	4b4d      	ldr	r3, [pc, #308]	@ (8002944 <HAL_GPIO_Init+0x2b8>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a4c      	ldr	r2, [pc, #304]	@ (8002944 <HAL_GPIO_Init+0x2b8>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b4a      	ldr	r3, [pc, #296]	@ (8002944 <HAL_GPIO_Init+0x2b8>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002824:	4a48      	ldr	r2, [pc, #288]	@ (8002948 <HAL_GPIO_Init+0x2bc>)
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a40      	ldr	r2, [pc, #256]	@ (800294c <HAL_GPIO_Init+0x2c0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_GPIO_Init+0x1ec>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3f      	ldr	r2, [pc, #252]	@ (8002950 <HAL_GPIO_Init+0x2c4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00d      	beq.n	8002874 <HAL_GPIO_Init+0x1e8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3e      	ldr	r2, [pc, #248]	@ (8002954 <HAL_GPIO_Init+0x2c8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d007      	beq.n	8002870 <HAL_GPIO_Init+0x1e4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3d      	ldr	r2, [pc, #244]	@ (8002958 <HAL_GPIO_Init+0x2cc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_GPIO_Init+0x1e0>
 8002868:	2303      	movs	r3, #3
 800286a:	e006      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 800286c:	2304      	movs	r3, #4
 800286e:	e004      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002870:	2302      	movs	r3, #2
 8002872:	e002      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002878:	2300      	movs	r3, #0
 800287a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287c:	f002 0203 	and.w	r2, r2, #3
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	4093      	lsls	r3, r2
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288a:	492f      	ldr	r1, [pc, #188]	@ (8002948 <HAL_GPIO_Init+0x2bc>)
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a4:	4b2d      	ldr	r3, [pc, #180]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	492c      	ldr	r1, [pc, #176]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028b2:	4b2a      	ldr	r3, [pc, #168]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4928      	ldr	r1, [pc, #160]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028cc:	4b23      	ldr	r3, [pc, #140]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	4922      	ldr	r1, [pc, #136]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028da:	4b20      	ldr	r3, [pc, #128]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	491e      	ldr	r1, [pc, #120]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4918      	ldr	r1, [pc, #96]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002902:	4b16      	ldr	r3, [pc, #88]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	43db      	mvns	r3, r3
 800290a:	4914      	ldr	r1, [pc, #80]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 800290c:	4013      	ands	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d021      	beq.n	8002960 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800291c:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	490e      	ldr	r1, [pc, #56]	@ (800295c <HAL_GPIO_Init+0x2d0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	600b      	str	r3, [r1, #0]
 8002928:	e021      	b.n	800296e <HAL_GPIO_Init+0x2e2>
 800292a:	bf00      	nop
 800292c:	10320000 	.word	0x10320000
 8002930:	10310000 	.word	0x10310000
 8002934:	10220000 	.word	0x10220000
 8002938:	10210000 	.word	0x10210000
 800293c:	10120000 	.word	0x10120000
 8002940:	10110000 	.word	0x10110000
 8002944:	40021000 	.word	0x40021000
 8002948:	40010000 	.word	0x40010000
 800294c:	40010800 	.word	0x40010800
 8002950:	40010c00 	.word	0x40010c00
 8002954:	40011000 	.word	0x40011000
 8002958:	40011400 	.word	0x40011400
 800295c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002960:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <HAL_GPIO_Init+0x304>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	43db      	mvns	r3, r3
 8002968:	4909      	ldr	r1, [pc, #36]	@ (8002990 <HAL_GPIO_Init+0x304>)
 800296a:	4013      	ands	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	3301      	adds	r3, #1
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	f47f ae8e 	bne.w	80026a0 <HAL_GPIO_Init+0x14>
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	372c      	adds	r7, #44	@ 0x2c
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e272      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	4b92      	ldr	r3, [pc, #584]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d112      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
 80029cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029da:	4b89      	ldr	r3, [pc, #548]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d06c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d168      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e24c      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x76>
 80029fc:	4b80      	ldr	r3, [pc, #512]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7f      	ldr	r2, [pc, #508]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e02e      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x98>
 8002a12:	4b7b      	ldr	r3, [pc, #492]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7a      	ldr	r2, [pc, #488]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b78      	ldr	r3, [pc, #480]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a77      	ldr	r2, [pc, #476]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xbc>
 8002a36:	4b72      	ldr	r3, [pc, #456]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a71      	ldr	r2, [pc, #452]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6f      	ldr	r3, [pc, #444]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a50:	4b6b      	ldr	r3, [pc, #428]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b68      	ldr	r3, [pc, #416]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a67      	ldr	r2, [pc, #412]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff fcd0 	bl	8002414 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff fccc 	bl	8002414 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e200      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe4>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff fcbc 	bl	8002414 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7ff fcb8 	bl	8002414 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	@ 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1ec      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x10c>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ada:	4b49      	ldr	r3, [pc, #292]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
 8002ae6:	4b46      	ldr	r3, [pc, #280]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1c0      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4939      	ldr	r1, [pc, #228]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b36      	ldr	r3, [pc, #216]	@ (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7ff fc71 	bl	8002414 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7ff fc6d 	bl	8002414 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1a1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4927      	ldr	r1, [pc, #156]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b26      	ldr	r3, [pc, #152]	@ (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fc50 	bl	8002414 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b78:	f7ff fc4c 	bl	8002414 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e180      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03a      	beq.n	8002c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d019      	beq.n	8002bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b17      	ldr	r3, [pc, #92]	@ (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7ff fc30 	bl	8002414 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7ff fc2c 	bl	8002414 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e160      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 face 	bl	8003178 <RCC_Delay>
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7ff fc16 	bl	8002414 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bea:	e00f      	b.n	8002c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7ff fc12 	bl	8002414 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d908      	bls.n	8002c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e146      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	42420000 	.word	0x42420000
 8002c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b92      	ldr	r3, [pc, #584]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e9      	bne.n	8002bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a6 	beq.w	8002d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b88      	ldr	r3, [pc, #544]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a87      	ldr	r2, [pc, #540]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b85      	ldr	r3, [pc, #532]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b82      	ldr	r3, [pc, #520]	@ (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7e      	ldr	r2, [pc, #504]	@ (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff fbd3 	bl	8002414 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7ff fbcf 	bl	8002414 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	@ 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e103      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b75      	ldr	r3, [pc, #468]	@ (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x312>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02d      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x334>
 8002cae:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a69      	ldr	r2, [pc, #420]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	4b67      	ldr	r3, [pc, #412]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a66      	ldr	r2, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	e01c      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x356>
 8002cd0:	4b61      	ldr	r3, [pc, #388]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a60      	ldr	r2, [pc, #384]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cea:	4b5b      	ldr	r3, [pc, #364]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a5a      	ldr	r2, [pc, #360]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b58      	ldr	r3, [pc, #352]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a57      	ldr	r2, [pc, #348]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d015      	beq.n	8002d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7ff fb83 	bl	8002414 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7ff fb7f 	bl	8002414 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0b1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b4b      	ldr	r3, [pc, #300]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ee      	beq.n	8002d12 <HAL_RCC_OscConfig+0x37e>
 8002d34:	e014      	b.n	8002d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7ff fb6d 	bl	8002414 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7ff fb69 	bl	8002414 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e09b      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	4b40      	ldr	r3, [pc, #256]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4b3c      	ldr	r3, [pc, #240]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b36      	ldr	r3, [pc, #216]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d061      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d146      	bne.n	8002e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7ff fb3d 	bl	8002414 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7ff fb39 	bl	8002414 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e06d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	4b29      	ldr	r3, [pc, #164]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4921      	ldr	r1, [pc, #132]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a19      	ldr	r1, [r3, #32]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	430b      	orrs	r3, r1
 8002dea:	491b      	ldr	r1, [pc, #108]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7ff fb0d 	bl	8002414 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7ff fb09 	bl	8002414 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e03d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46a>
 8002e1c:	e035      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff faf6 	bl	8002414 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7ff faf2 	bl	8002414 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e026      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x498>
 8002e4a:	e01e      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e019      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_OscConfig+0x500>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0d0      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b6a      	ldr	r3, [pc, #424]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	4965      	ldr	r1, [pc, #404]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b63      	ldr	r3, [pc, #396]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b8      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef4:	4b59      	ldr	r3, [pc, #356]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a58      	ldr	r2, [pc, #352]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f0c:	4b53      	ldr	r3, [pc, #332]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a52      	ldr	r2, [pc, #328]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b50      	ldr	r3, [pc, #320]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	494d      	ldr	r1, [pc, #308]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d040      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b47      	ldr	r3, [pc, #284]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d115      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07f      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b41      	ldr	r3, [pc, #260]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e073      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3d      	ldr	r3, [pc, #244]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b39      	ldr	r3, [pc, #228]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4936      	ldr	r1, [pc, #216]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7ff fa44 	bl	8002414 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7ff fa40 	bl	8002414 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e053      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d210      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0207 	bic.w	r2, r3, #7
 8002fce:	4922      	ldr	r1, [pc, #136]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e032      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b19      	ldr	r3, [pc, #100]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4916      	ldr	r1, [pc, #88]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003012:	4b12      	ldr	r3, [pc, #72]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	490e      	ldr	r1, [pc, #56]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003026:	f000 f821 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800302a:	4602      	mov	r2, r0
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	490a      	ldr	r1, [pc, #40]	@ (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	5ccb      	ldrb	r3, [r1, r3]
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	4a09      	ldr	r2, [pc, #36]	@ (8003064 <HAL_RCC_ClockConfig+0x1cc>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003042:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_ClockConfig+0x1d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f9a2 	bl	8002390 <HAL_InitTick>

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	08008ba0 	.word	0x08008ba0
 8003064:	20000008 	.word	0x20000008
 8003068:	2000000c 	.word	0x2000000c

0800306c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003086:	4b1e      	ldr	r3, [pc, #120]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x30>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x36>
 800309a:	e027      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 800309e:	613b      	str	r3, [r7, #16]
      break;
 80030a0:	e027      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a17      	ldr	r2, [pc, #92]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0c5b      	lsrs	r3, r3, #17
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	4a11      	ldr	r2, [pc, #68]	@ (800310c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ce:	fb03 f202 	mul.w	r2, r3, r2
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e004      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a0c      	ldr	r2, [pc, #48]	@ (8003110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	613b      	str	r3, [r7, #16]
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ee:	613b      	str	r3, [r7, #16]
      break;
 80030f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f2:	693b      	ldr	r3, [r7, #16]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	08008bb8 	.word	0x08008bb8
 800310c:	08008bc8 	.word	0x08008bc8
 8003110:	003d0900 	.word	0x003d0900

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b02      	ldr	r3, [pc, #8]	@ (8003124 <HAL_RCC_GetHCLKFreq+0x10>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	20000008 	.word	0x20000008

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff2 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	08008bb0 	.word	0x08008bb0

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffde 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0adb      	lsrs	r3, r3, #11
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	@ (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	08008bb0 	.word	0x08008bb0

08003178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003180:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <RCC_Delay+0x34>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0a      	ldr	r2, [pc, #40]	@ (80031b0 <RCC_Delay+0x38>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0a5b      	lsrs	r3, r3, #9
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003194:	bf00      	nop
  }
  while (Delay --);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	60fa      	str	r2, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f9      	bne.n	8003194 <RCC_Delay+0x1c>
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000008 	.word	0x20000008
 80031b0:	10624dd3 	.word	0x10624dd3

080031b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e042      	b.n	800324c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe fcca 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	@ 0x24
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f971 	bl	80034e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800320c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800321c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800322c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b20      	cmp	r3, #32
 8003272:	d175      	bne.n	8003360 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_UART_Transmit+0x2c>
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e06e      	b.n	8003362 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2221      	movs	r2, #33	@ 0x21
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003292:	f7ff f8bf 	bl	8002414 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ac:	d108      	bne.n	80032c0 <HAL_UART_Transmit+0x6c>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e003      	b.n	80032c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c8:	e02e      	b.n	8003328 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2180      	movs	r1, #128	@ 0x80
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f848 	bl	800336a <UART_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e03a      	b.n	8003362 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003300:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3302      	adds	r3, #2
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	e007      	b.n	800331a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1cb      	bne.n	80032ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2140      	movs	r1, #64	@ 0x40
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f814 	bl	800336a <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e006      	b.n	8003362 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337a:	e03b      	b.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d037      	beq.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003384:	f7ff f846 	bl	8002414 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <UART_WaitOnFlagUntilTimeout+0x30>
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e03a      	b.n	8003414 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d023      	beq.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b80      	cmp	r3, #128	@ 0x80
 80033b0:	d020      	beq.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b40      	cmp	r3, #64	@ 0x40
 80033b6:	d01d      	beq.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d116      	bne.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f81d 	bl	800341c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2208      	movs	r2, #8
 80033e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e00f      	b.n	8003414 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4013      	ands	r3, r2
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	429a      	cmp	r2, r3
 8003410:	d0b4      	beq.n	800337c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b095      	sub	sp, #84	@ 0x54
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003436:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800343a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003444:	643a      	str	r2, [r7, #64]	@ 0x40
 8003446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800344a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	61fb      	str	r3, [r7, #28]
   return(result);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3314      	adds	r3, #20
 8003476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003478:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800347a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800347e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e5      	bne.n	8003458 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	2b01      	cmp	r3, #1
 8003492:	d119      	bne.n	80034c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f023 0310 	bic.w	r3, r3, #16
 80034aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b4:	61ba      	str	r2, [r7, #24]
 80034b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6979      	ldr	r1, [r7, #20]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	613b      	str	r3, [r7, #16]
   return(result);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e5      	bne.n	8003494 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034d6:	bf00      	nop
 80034d8:	3754      	adds	r7, #84	@ 0x54
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800351a:	f023 030c 	bic.w	r3, r3, #12
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	430b      	orrs	r3, r1
 8003526:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2c      	ldr	r2, [pc, #176]	@ (80035f4 <UART_SetConfig+0x114>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d103      	bne.n	8003550 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003548:	f7ff fe02 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	e002      	b.n	8003556 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003550:	f7ff fdea 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8003554:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009a      	lsls	r2, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	4a22      	ldr	r2, [pc, #136]	@ (80035f8 <UART_SetConfig+0x118>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	0119      	lsls	r1, r3, #4
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009a      	lsls	r2, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	fbb2 f2f3 	udiv	r2, r2, r3
 800358c:	4b1a      	ldr	r3, [pc, #104]	@ (80035f8 <UART_SetConfig+0x118>)
 800358e:	fba3 0302 	umull	r0, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2064      	movs	r0, #100	@ 0x64
 8003596:	fb00 f303 	mul.w	r3, r0, r3
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	3332      	adds	r3, #50	@ 0x32
 80035a0:	4a15      	ldr	r2, [pc, #84]	@ (80035f8 <UART_SetConfig+0x118>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ac:	4419      	add	r1, r3
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009a      	lsls	r2, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c4:	4b0c      	ldr	r3, [pc, #48]	@ (80035f8 <UART_SetConfig+0x118>)
 80035c6:	fba3 0302 	umull	r0, r3, r3, r2
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2064      	movs	r0, #100	@ 0x64
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	3332      	adds	r3, #50	@ 0x32
 80035d8:	4a07      	ldr	r2, [pc, #28]	@ (80035f8 <UART_SetConfig+0x118>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	f003 020f 	and.w	r2, r3, #15
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	440a      	add	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40013800 	.word	0x40013800
 80035f8:	51eb851f 	.word	0x51eb851f

080035fc <atoi>:
 80035fc:	220a      	movs	r2, #10
 80035fe:	2100      	movs	r1, #0
 8003600:	f000 b87c 	b.w	80036fc <strtol>

08003604 <_strtol_l.constprop.0>:
 8003604:	2b24      	cmp	r3, #36	@ 0x24
 8003606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800360a:	4686      	mov	lr, r0
 800360c:	4690      	mov	r8, r2
 800360e:	d801      	bhi.n	8003614 <_strtol_l.constprop.0+0x10>
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <_strtol_l.constprop.0+0x1e>
 8003614:	f001 f860 	bl	80046d8 <__errno>
 8003618:	2316      	movs	r3, #22
 800361a:	6003      	str	r3, [r0, #0]
 800361c:	2000      	movs	r0, #0
 800361e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003622:	460d      	mov	r5, r1
 8003624:	4833      	ldr	r0, [pc, #204]	@ (80036f4 <_strtol_l.constprop.0+0xf0>)
 8003626:	462a      	mov	r2, r5
 8003628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800362c:	5d06      	ldrb	r6, [r0, r4]
 800362e:	f016 0608 	ands.w	r6, r6, #8
 8003632:	d1f8      	bne.n	8003626 <_strtol_l.constprop.0+0x22>
 8003634:	2c2d      	cmp	r4, #45	@ 0x2d
 8003636:	d12d      	bne.n	8003694 <_strtol_l.constprop.0+0x90>
 8003638:	2601      	movs	r6, #1
 800363a:	782c      	ldrb	r4, [r5, #0]
 800363c:	1c95      	adds	r5, r2, #2
 800363e:	f033 0210 	bics.w	r2, r3, #16
 8003642:	d109      	bne.n	8003658 <_strtol_l.constprop.0+0x54>
 8003644:	2c30      	cmp	r4, #48	@ 0x30
 8003646:	d12a      	bne.n	800369e <_strtol_l.constprop.0+0x9a>
 8003648:	782a      	ldrb	r2, [r5, #0]
 800364a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800364e:	2a58      	cmp	r2, #88	@ 0x58
 8003650:	d125      	bne.n	800369e <_strtol_l.constprop.0+0x9a>
 8003652:	2310      	movs	r3, #16
 8003654:	786c      	ldrb	r4, [r5, #1]
 8003656:	3502      	adds	r5, #2
 8003658:	2200      	movs	r2, #0
 800365a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800365e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003662:	fbbc f9f3 	udiv	r9, ip, r3
 8003666:	4610      	mov	r0, r2
 8003668:	fb03 ca19 	mls	sl, r3, r9, ip
 800366c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003670:	2f09      	cmp	r7, #9
 8003672:	d81b      	bhi.n	80036ac <_strtol_l.constprop.0+0xa8>
 8003674:	463c      	mov	r4, r7
 8003676:	42a3      	cmp	r3, r4
 8003678:	dd27      	ble.n	80036ca <_strtol_l.constprop.0+0xc6>
 800367a:	1c57      	adds	r7, r2, #1
 800367c:	d007      	beq.n	800368e <_strtol_l.constprop.0+0x8a>
 800367e:	4581      	cmp	r9, r0
 8003680:	d320      	bcc.n	80036c4 <_strtol_l.constprop.0+0xc0>
 8003682:	d101      	bne.n	8003688 <_strtol_l.constprop.0+0x84>
 8003684:	45a2      	cmp	sl, r4
 8003686:	db1d      	blt.n	80036c4 <_strtol_l.constprop.0+0xc0>
 8003688:	2201      	movs	r2, #1
 800368a:	fb00 4003 	mla	r0, r0, r3, r4
 800368e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003692:	e7eb      	b.n	800366c <_strtol_l.constprop.0+0x68>
 8003694:	2c2b      	cmp	r4, #43	@ 0x2b
 8003696:	bf04      	itt	eq
 8003698:	782c      	ldrbeq	r4, [r5, #0]
 800369a:	1c95      	addeq	r5, r2, #2
 800369c:	e7cf      	b.n	800363e <_strtol_l.constprop.0+0x3a>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1da      	bne.n	8003658 <_strtol_l.constprop.0+0x54>
 80036a2:	2c30      	cmp	r4, #48	@ 0x30
 80036a4:	bf0c      	ite	eq
 80036a6:	2308      	moveq	r3, #8
 80036a8:	230a      	movne	r3, #10
 80036aa:	e7d5      	b.n	8003658 <_strtol_l.constprop.0+0x54>
 80036ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80036b0:	2f19      	cmp	r7, #25
 80036b2:	d801      	bhi.n	80036b8 <_strtol_l.constprop.0+0xb4>
 80036b4:	3c37      	subs	r4, #55	@ 0x37
 80036b6:	e7de      	b.n	8003676 <_strtol_l.constprop.0+0x72>
 80036b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80036bc:	2f19      	cmp	r7, #25
 80036be:	d804      	bhi.n	80036ca <_strtol_l.constprop.0+0xc6>
 80036c0:	3c57      	subs	r4, #87	@ 0x57
 80036c2:	e7d8      	b.n	8003676 <_strtol_l.constprop.0+0x72>
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	e7e1      	b.n	800368e <_strtol_l.constprop.0+0x8a>
 80036ca:	1c53      	adds	r3, r2, #1
 80036cc:	d108      	bne.n	80036e0 <_strtol_l.constprop.0+0xdc>
 80036ce:	2322      	movs	r3, #34	@ 0x22
 80036d0:	4660      	mov	r0, ip
 80036d2:	f8ce 3000 	str.w	r3, [lr]
 80036d6:	f1b8 0f00 	cmp.w	r8, #0
 80036da:	d0a0      	beq.n	800361e <_strtol_l.constprop.0+0x1a>
 80036dc:	1e69      	subs	r1, r5, #1
 80036de:	e006      	b.n	80036ee <_strtol_l.constprop.0+0xea>
 80036e0:	b106      	cbz	r6, 80036e4 <_strtol_l.constprop.0+0xe0>
 80036e2:	4240      	negs	r0, r0
 80036e4:	f1b8 0f00 	cmp.w	r8, #0
 80036e8:	d099      	beq.n	800361e <_strtol_l.constprop.0+0x1a>
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	d1f6      	bne.n	80036dc <_strtol_l.constprop.0+0xd8>
 80036ee:	f8c8 1000 	str.w	r1, [r8]
 80036f2:	e794      	b.n	800361e <_strtol_l.constprop.0+0x1a>
 80036f4:	08008bcb 	.word	0x08008bcb

080036f8 <_strtol_r>:
 80036f8:	f7ff bf84 	b.w	8003604 <_strtol_l.constprop.0>

080036fc <strtol>:
 80036fc:	4613      	mov	r3, r2
 80036fe:	460a      	mov	r2, r1
 8003700:	4601      	mov	r1, r0
 8003702:	4802      	ldr	r0, [pc, #8]	@ (800370c <strtol+0x10>)
 8003704:	6800      	ldr	r0, [r0, #0]
 8003706:	f7ff bf7d 	b.w	8003604 <_strtol_l.constprop.0>
 800370a:	bf00      	nop
 800370c:	20000020 	.word	0x20000020

08003710 <__cvt>:
 8003710:	2b00      	cmp	r3, #0
 8003712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003716:	461d      	mov	r5, r3
 8003718:	bfbb      	ittet	lt
 800371a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800371e:	461d      	movlt	r5, r3
 8003720:	2300      	movge	r3, #0
 8003722:	232d      	movlt	r3, #45	@ 0x2d
 8003724:	b088      	sub	sp, #32
 8003726:	4614      	mov	r4, r2
 8003728:	bfb8      	it	lt
 800372a:	4614      	movlt	r4, r2
 800372c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800372e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003730:	7013      	strb	r3, [r2, #0]
 8003732:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003734:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003738:	f023 0820 	bic.w	r8, r3, #32
 800373c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003740:	d005      	beq.n	800374e <__cvt+0x3e>
 8003742:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003746:	d100      	bne.n	800374a <__cvt+0x3a>
 8003748:	3601      	adds	r6, #1
 800374a:	2302      	movs	r3, #2
 800374c:	e000      	b.n	8003750 <__cvt+0x40>
 800374e:	2303      	movs	r3, #3
 8003750:	aa07      	add	r2, sp, #28
 8003752:	9204      	str	r2, [sp, #16]
 8003754:	aa06      	add	r2, sp, #24
 8003756:	e9cd a202 	strd	sl, r2, [sp, #8]
 800375a:	e9cd 3600 	strd	r3, r6, [sp]
 800375e:	4622      	mov	r2, r4
 8003760:	462b      	mov	r3, r5
 8003762:	f001 f881 	bl	8004868 <_dtoa_r>
 8003766:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800376a:	4607      	mov	r7, r0
 800376c:	d119      	bne.n	80037a2 <__cvt+0x92>
 800376e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003770:	07db      	lsls	r3, r3, #31
 8003772:	d50e      	bpl.n	8003792 <__cvt+0x82>
 8003774:	eb00 0906 	add.w	r9, r0, r6
 8003778:	2200      	movs	r2, #0
 800377a:	2300      	movs	r3, #0
 800377c:	4620      	mov	r0, r4
 800377e:	4629      	mov	r1, r5
 8003780:	f7fd f912 	bl	80009a8 <__aeabi_dcmpeq>
 8003784:	b108      	cbz	r0, 800378a <__cvt+0x7a>
 8003786:	f8cd 901c 	str.w	r9, [sp, #28]
 800378a:	2230      	movs	r2, #48	@ 0x30
 800378c:	9b07      	ldr	r3, [sp, #28]
 800378e:	454b      	cmp	r3, r9
 8003790:	d31e      	bcc.n	80037d0 <__cvt+0xc0>
 8003792:	4638      	mov	r0, r7
 8003794:	9b07      	ldr	r3, [sp, #28]
 8003796:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003798:	1bdb      	subs	r3, r3, r7
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	b008      	add	sp, #32
 800379e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037a6:	eb00 0906 	add.w	r9, r0, r6
 80037aa:	d1e5      	bne.n	8003778 <__cvt+0x68>
 80037ac:	7803      	ldrb	r3, [r0, #0]
 80037ae:	2b30      	cmp	r3, #48	@ 0x30
 80037b0:	d10a      	bne.n	80037c8 <__cvt+0xb8>
 80037b2:	2200      	movs	r2, #0
 80037b4:	2300      	movs	r3, #0
 80037b6:	4620      	mov	r0, r4
 80037b8:	4629      	mov	r1, r5
 80037ba:	f7fd f8f5 	bl	80009a8 <__aeabi_dcmpeq>
 80037be:	b918      	cbnz	r0, 80037c8 <__cvt+0xb8>
 80037c0:	f1c6 0601 	rsb	r6, r6, #1
 80037c4:	f8ca 6000 	str.w	r6, [sl]
 80037c8:	f8da 3000 	ldr.w	r3, [sl]
 80037cc:	4499      	add	r9, r3
 80037ce:	e7d3      	b.n	8003778 <__cvt+0x68>
 80037d0:	1c59      	adds	r1, r3, #1
 80037d2:	9107      	str	r1, [sp, #28]
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e7d9      	b.n	800378c <__cvt+0x7c>

080037d8 <__exponent>:
 80037d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037da:	2900      	cmp	r1, #0
 80037dc:	bfb6      	itet	lt
 80037de:	232d      	movlt	r3, #45	@ 0x2d
 80037e0:	232b      	movge	r3, #43	@ 0x2b
 80037e2:	4249      	neglt	r1, r1
 80037e4:	2909      	cmp	r1, #9
 80037e6:	7002      	strb	r2, [r0, #0]
 80037e8:	7043      	strb	r3, [r0, #1]
 80037ea:	dd29      	ble.n	8003840 <__exponent+0x68>
 80037ec:	f10d 0307 	add.w	r3, sp, #7
 80037f0:	461d      	mov	r5, r3
 80037f2:	270a      	movs	r7, #10
 80037f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80037f8:	461a      	mov	r2, r3
 80037fa:	fb07 1416 	mls	r4, r7, r6, r1
 80037fe:	3430      	adds	r4, #48	@ 0x30
 8003800:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003804:	460c      	mov	r4, r1
 8003806:	2c63      	cmp	r4, #99	@ 0x63
 8003808:	4631      	mov	r1, r6
 800380a:	f103 33ff 	add.w	r3, r3, #4294967295
 800380e:	dcf1      	bgt.n	80037f4 <__exponent+0x1c>
 8003810:	3130      	adds	r1, #48	@ 0x30
 8003812:	1e94      	subs	r4, r2, #2
 8003814:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003818:	4623      	mov	r3, r4
 800381a:	1c41      	adds	r1, r0, #1
 800381c:	42ab      	cmp	r3, r5
 800381e:	d30a      	bcc.n	8003836 <__exponent+0x5e>
 8003820:	f10d 0309 	add.w	r3, sp, #9
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	42ac      	cmp	r4, r5
 8003828:	bf88      	it	hi
 800382a:	2300      	movhi	r3, #0
 800382c:	3302      	adds	r3, #2
 800382e:	4403      	add	r3, r0
 8003830:	1a18      	subs	r0, r3, r0
 8003832:	b003      	add	sp, #12
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003836:	f813 6b01 	ldrb.w	r6, [r3], #1
 800383a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800383e:	e7ed      	b.n	800381c <__exponent+0x44>
 8003840:	2330      	movs	r3, #48	@ 0x30
 8003842:	3130      	adds	r1, #48	@ 0x30
 8003844:	7083      	strb	r3, [r0, #2]
 8003846:	70c1      	strb	r1, [r0, #3]
 8003848:	1d03      	adds	r3, r0, #4
 800384a:	e7f1      	b.n	8003830 <__exponent+0x58>

0800384c <_printf_float>:
 800384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003850:	b091      	sub	sp, #68	@ 0x44
 8003852:	460c      	mov	r4, r1
 8003854:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003858:	4616      	mov	r6, r2
 800385a:	461f      	mov	r7, r3
 800385c:	4605      	mov	r5, r0
 800385e:	f000 fef1 	bl	8004644 <_localeconv_r>
 8003862:	6803      	ldr	r3, [r0, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	9308      	str	r3, [sp, #32]
 8003868:	f7fc fc72 	bl	8000150 <strlen>
 800386c:	2300      	movs	r3, #0
 800386e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003870:	f8d8 3000 	ldr.w	r3, [r8]
 8003874:	9009      	str	r0, [sp, #36]	@ 0x24
 8003876:	3307      	adds	r3, #7
 8003878:	f023 0307 	bic.w	r3, r3, #7
 800387c:	f103 0208 	add.w	r2, r3, #8
 8003880:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003884:	f8d4 b000 	ldr.w	fp, [r4]
 8003888:	f8c8 2000 	str.w	r2, [r8]
 800388c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003890:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003896:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800389a:	f04f 32ff 	mov.w	r2, #4294967295
 800389e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80038a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80038a6:	4b9c      	ldr	r3, [pc, #624]	@ (8003b18 <_printf_float+0x2cc>)
 80038a8:	f7fd f8b0 	bl	8000a0c <__aeabi_dcmpun>
 80038ac:	bb70      	cbnz	r0, 800390c <_printf_float+0xc0>
 80038ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80038b2:	f04f 32ff 	mov.w	r2, #4294967295
 80038b6:	4b98      	ldr	r3, [pc, #608]	@ (8003b18 <_printf_float+0x2cc>)
 80038b8:	f7fd f88a 	bl	80009d0 <__aeabi_dcmple>
 80038bc:	bb30      	cbnz	r0, 800390c <_printf_float+0xc0>
 80038be:	2200      	movs	r2, #0
 80038c0:	2300      	movs	r3, #0
 80038c2:	4640      	mov	r0, r8
 80038c4:	4649      	mov	r1, r9
 80038c6:	f7fd f879 	bl	80009bc <__aeabi_dcmplt>
 80038ca:	b110      	cbz	r0, 80038d2 <_printf_float+0x86>
 80038cc:	232d      	movs	r3, #45	@ 0x2d
 80038ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038d2:	4a92      	ldr	r2, [pc, #584]	@ (8003b1c <_printf_float+0x2d0>)
 80038d4:	4b92      	ldr	r3, [pc, #584]	@ (8003b20 <_printf_float+0x2d4>)
 80038d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80038da:	bf94      	ite	ls
 80038dc:	4690      	movls	r8, r2
 80038de:	4698      	movhi	r8, r3
 80038e0:	2303      	movs	r3, #3
 80038e2:	f04f 0900 	mov.w	r9, #0
 80038e6:	6123      	str	r3, [r4, #16]
 80038e8:	f02b 0304 	bic.w	r3, fp, #4
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	4633      	mov	r3, r6
 80038f0:	4621      	mov	r1, r4
 80038f2:	4628      	mov	r0, r5
 80038f4:	9700      	str	r7, [sp, #0]
 80038f6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80038f8:	f000 f9d4 	bl	8003ca4 <_printf_common>
 80038fc:	3001      	adds	r0, #1
 80038fe:	f040 8090 	bne.w	8003a22 <_printf_float+0x1d6>
 8003902:	f04f 30ff 	mov.w	r0, #4294967295
 8003906:	b011      	add	sp, #68	@ 0x44
 8003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390c:	4642      	mov	r2, r8
 800390e:	464b      	mov	r3, r9
 8003910:	4640      	mov	r0, r8
 8003912:	4649      	mov	r1, r9
 8003914:	f7fd f87a 	bl	8000a0c <__aeabi_dcmpun>
 8003918:	b148      	cbz	r0, 800392e <_printf_float+0xe2>
 800391a:	464b      	mov	r3, r9
 800391c:	2b00      	cmp	r3, #0
 800391e:	bfb8      	it	lt
 8003920:	232d      	movlt	r3, #45	@ 0x2d
 8003922:	4a80      	ldr	r2, [pc, #512]	@ (8003b24 <_printf_float+0x2d8>)
 8003924:	bfb8      	it	lt
 8003926:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800392a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b28 <_printf_float+0x2dc>)
 800392c:	e7d3      	b.n	80038d6 <_printf_float+0x8a>
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	d13f      	bne.n	80039b8 <_printf_float+0x16c>
 8003938:	2306      	movs	r3, #6
 800393a:	6063      	str	r3, [r4, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	9206      	str	r2, [sp, #24]
 8003946:	aa0e      	add	r2, sp, #56	@ 0x38
 8003948:	e9cd a204 	strd	sl, r2, [sp, #16]
 800394c:	aa0d      	add	r2, sp, #52	@ 0x34
 800394e:	9203      	str	r2, [sp, #12]
 8003950:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003954:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	4642      	mov	r2, r8
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4628      	mov	r0, r5
 8003960:	464b      	mov	r3, r9
 8003962:	910a      	str	r1, [sp, #40]	@ 0x28
 8003964:	f7ff fed4 	bl	8003710 <__cvt>
 8003968:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800396a:	4680      	mov	r8, r0
 800396c:	2947      	cmp	r1, #71	@ 0x47
 800396e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003970:	d128      	bne.n	80039c4 <_printf_float+0x178>
 8003972:	1cc8      	adds	r0, r1, #3
 8003974:	db02      	blt.n	800397c <_printf_float+0x130>
 8003976:	6863      	ldr	r3, [r4, #4]
 8003978:	4299      	cmp	r1, r3
 800397a:	dd40      	ble.n	80039fe <_printf_float+0x1b2>
 800397c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003980:	fa5f fa8a 	uxtb.w	sl, sl
 8003984:	4652      	mov	r2, sl
 8003986:	3901      	subs	r1, #1
 8003988:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800398c:	910d      	str	r1, [sp, #52]	@ 0x34
 800398e:	f7ff ff23 	bl	80037d8 <__exponent>
 8003992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003994:	4681      	mov	r9, r0
 8003996:	1813      	adds	r3, r2, r0
 8003998:	2a01      	cmp	r2, #1
 800399a:	6123      	str	r3, [r4, #16]
 800399c:	dc02      	bgt.n	80039a4 <_printf_float+0x158>
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	07d2      	lsls	r2, r2, #31
 80039a2:	d501      	bpl.n	80039a8 <_printf_float+0x15c>
 80039a4:	3301      	adds	r3, #1
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d09e      	beq.n	80038ee <_printf_float+0xa2>
 80039b0:	232d      	movs	r3, #45	@ 0x2d
 80039b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039b6:	e79a      	b.n	80038ee <_printf_float+0xa2>
 80039b8:	2947      	cmp	r1, #71	@ 0x47
 80039ba:	d1bf      	bne.n	800393c <_printf_float+0xf0>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1bd      	bne.n	800393c <_printf_float+0xf0>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e7ba      	b.n	800393a <_printf_float+0xee>
 80039c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80039c8:	d9dc      	bls.n	8003984 <_printf_float+0x138>
 80039ca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80039ce:	d118      	bne.n	8003a02 <_printf_float+0x1b6>
 80039d0:	2900      	cmp	r1, #0
 80039d2:	6863      	ldr	r3, [r4, #4]
 80039d4:	dd0b      	ble.n	80039ee <_printf_float+0x1a2>
 80039d6:	6121      	str	r1, [r4, #16]
 80039d8:	b913      	cbnz	r3, 80039e0 <_printf_float+0x194>
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	07d0      	lsls	r0, r2, #31
 80039de:	d502      	bpl.n	80039e6 <_printf_float+0x19a>
 80039e0:	3301      	adds	r3, #1
 80039e2:	440b      	add	r3, r1
 80039e4:	6123      	str	r3, [r4, #16]
 80039e6:	f04f 0900 	mov.w	r9, #0
 80039ea:	65a1      	str	r1, [r4, #88]	@ 0x58
 80039ec:	e7dc      	b.n	80039a8 <_printf_float+0x15c>
 80039ee:	b913      	cbnz	r3, 80039f6 <_printf_float+0x1aa>
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	07d2      	lsls	r2, r2, #31
 80039f4:	d501      	bpl.n	80039fa <_printf_float+0x1ae>
 80039f6:	3302      	adds	r3, #2
 80039f8:	e7f4      	b.n	80039e4 <_printf_float+0x198>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e7f2      	b.n	80039e4 <_printf_float+0x198>
 80039fe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a04:	4299      	cmp	r1, r3
 8003a06:	db05      	blt.n	8003a14 <_printf_float+0x1c8>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	6121      	str	r1, [r4, #16]
 8003a0c:	07d8      	lsls	r0, r3, #31
 8003a0e:	d5ea      	bpl.n	80039e6 <_printf_float+0x19a>
 8003a10:	1c4b      	adds	r3, r1, #1
 8003a12:	e7e7      	b.n	80039e4 <_printf_float+0x198>
 8003a14:	2900      	cmp	r1, #0
 8003a16:	bfcc      	ite	gt
 8003a18:	2201      	movgt	r2, #1
 8003a1a:	f1c1 0202 	rsble	r2, r1, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	e7e0      	b.n	80039e4 <_printf_float+0x198>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	055a      	lsls	r2, r3, #21
 8003a26:	d407      	bmi.n	8003a38 <_printf_float+0x1ec>
 8003a28:	6923      	ldr	r3, [r4, #16]
 8003a2a:	4642      	mov	r2, r8
 8003a2c:	4631      	mov	r1, r6
 8003a2e:	4628      	mov	r0, r5
 8003a30:	47b8      	blx	r7
 8003a32:	3001      	adds	r0, #1
 8003a34:	d12b      	bne.n	8003a8e <_printf_float+0x242>
 8003a36:	e764      	b.n	8003902 <_printf_float+0xb6>
 8003a38:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a3c:	f240 80dc 	bls.w	8003bf8 <_printf_float+0x3ac>
 8003a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a44:	2200      	movs	r2, #0
 8003a46:	2300      	movs	r3, #0
 8003a48:	f7fc ffae 	bl	80009a8 <__aeabi_dcmpeq>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d033      	beq.n	8003ab8 <_printf_float+0x26c>
 8003a50:	2301      	movs	r3, #1
 8003a52:	4631      	mov	r1, r6
 8003a54:	4628      	mov	r0, r5
 8003a56:	4a35      	ldr	r2, [pc, #212]	@ (8003b2c <_printf_float+0x2e0>)
 8003a58:	47b8      	blx	r7
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	f43f af51 	beq.w	8003902 <_printf_float+0xb6>
 8003a60:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003a64:	4543      	cmp	r3, r8
 8003a66:	db02      	blt.n	8003a6e <_printf_float+0x222>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	07d8      	lsls	r0, r3, #31
 8003a6c:	d50f      	bpl.n	8003a8e <_printf_float+0x242>
 8003a6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a72:	4631      	mov	r1, r6
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b8      	blx	r7
 8003a78:	3001      	adds	r0, #1
 8003a7a:	f43f af42 	beq.w	8003902 <_printf_float+0xb6>
 8003a7e:	f04f 0900 	mov.w	r9, #0
 8003a82:	f108 38ff 	add.w	r8, r8, #4294967295
 8003a86:	f104 0a1a 	add.w	sl, r4, #26
 8003a8a:	45c8      	cmp	r8, r9
 8003a8c:	dc09      	bgt.n	8003aa2 <_printf_float+0x256>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	079b      	lsls	r3, r3, #30
 8003a92:	f100 8102 	bmi.w	8003c9a <_printf_float+0x44e>
 8003a96:	68e0      	ldr	r0, [r4, #12]
 8003a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003a9a:	4298      	cmp	r0, r3
 8003a9c:	bfb8      	it	lt
 8003a9e:	4618      	movlt	r0, r3
 8003aa0:	e731      	b.n	8003906 <_printf_float+0xba>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	4652      	mov	r2, sl
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	47b8      	blx	r7
 8003aac:	3001      	adds	r0, #1
 8003aae:	f43f af28 	beq.w	8003902 <_printf_float+0xb6>
 8003ab2:	f109 0901 	add.w	r9, r9, #1
 8003ab6:	e7e8      	b.n	8003a8a <_printf_float+0x23e>
 8003ab8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	dc38      	bgt.n	8003b30 <_printf_float+0x2e4>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4631      	mov	r1, r6
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	4a19      	ldr	r2, [pc, #100]	@ (8003b2c <_printf_float+0x2e0>)
 8003ac6:	47b8      	blx	r7
 8003ac8:	3001      	adds	r0, #1
 8003aca:	f43f af1a 	beq.w	8003902 <_printf_float+0xb6>
 8003ace:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003ad2:	ea59 0303 	orrs.w	r3, r9, r3
 8003ad6:	d102      	bne.n	8003ade <_printf_float+0x292>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	07d9      	lsls	r1, r3, #31
 8003adc:	d5d7      	bpl.n	8003a8e <_printf_float+0x242>
 8003ade:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ae2:	4631      	mov	r1, r6
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	47b8      	blx	r7
 8003ae8:	3001      	adds	r0, #1
 8003aea:	f43f af0a 	beq.w	8003902 <_printf_float+0xb6>
 8003aee:	f04f 0a00 	mov.w	sl, #0
 8003af2:	f104 0b1a 	add.w	fp, r4, #26
 8003af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003af8:	425b      	negs	r3, r3
 8003afa:	4553      	cmp	r3, sl
 8003afc:	dc01      	bgt.n	8003b02 <_printf_float+0x2b6>
 8003afe:	464b      	mov	r3, r9
 8003b00:	e793      	b.n	8003a2a <_printf_float+0x1de>
 8003b02:	2301      	movs	r3, #1
 8003b04:	465a      	mov	r2, fp
 8003b06:	4631      	mov	r1, r6
 8003b08:	4628      	mov	r0, r5
 8003b0a:	47b8      	blx	r7
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	f43f aef8 	beq.w	8003902 <_printf_float+0xb6>
 8003b12:	f10a 0a01 	add.w	sl, sl, #1
 8003b16:	e7ee      	b.n	8003af6 <_printf_float+0x2aa>
 8003b18:	7fefffff 	.word	0x7fefffff
 8003b1c:	08008ccb 	.word	0x08008ccb
 8003b20:	08008ccf 	.word	0x08008ccf
 8003b24:	08008cd3 	.word	0x08008cd3
 8003b28:	08008cd7 	.word	0x08008cd7
 8003b2c:	08008cdb 	.word	0x08008cdb
 8003b30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b32:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003b36:	4553      	cmp	r3, sl
 8003b38:	bfa8      	it	ge
 8003b3a:	4653      	movge	r3, sl
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	4699      	mov	r9, r3
 8003b40:	dc36      	bgt.n	8003bb0 <_printf_float+0x364>
 8003b42:	f04f 0b00 	mov.w	fp, #0
 8003b46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b4a:	f104 021a 	add.w	r2, r4, #26
 8003b4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b52:	eba3 0309 	sub.w	r3, r3, r9
 8003b56:	455b      	cmp	r3, fp
 8003b58:	dc31      	bgt.n	8003bbe <_printf_float+0x372>
 8003b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b5c:	459a      	cmp	sl, r3
 8003b5e:	dc3a      	bgt.n	8003bd6 <_printf_float+0x38a>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	07da      	lsls	r2, r3, #31
 8003b64:	d437      	bmi.n	8003bd6 <_printf_float+0x38a>
 8003b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b68:	ebaa 0903 	sub.w	r9, sl, r3
 8003b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b6e:	ebaa 0303 	sub.w	r3, sl, r3
 8003b72:	4599      	cmp	r9, r3
 8003b74:	bfa8      	it	ge
 8003b76:	4699      	movge	r9, r3
 8003b78:	f1b9 0f00 	cmp.w	r9, #0
 8003b7c:	dc33      	bgt.n	8003be6 <_printf_float+0x39a>
 8003b7e:	f04f 0800 	mov.w	r8, #0
 8003b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b86:	f104 0b1a 	add.w	fp, r4, #26
 8003b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b8c:	ebaa 0303 	sub.w	r3, sl, r3
 8003b90:	eba3 0309 	sub.w	r3, r3, r9
 8003b94:	4543      	cmp	r3, r8
 8003b96:	f77f af7a 	ble.w	8003a8e <_printf_float+0x242>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	465a      	mov	r2, fp
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	47b8      	blx	r7
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	f43f aeac 	beq.w	8003902 <_printf_float+0xb6>
 8003baa:	f108 0801 	add.w	r8, r8, #1
 8003bae:	e7ec      	b.n	8003b8a <_printf_float+0x33e>
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	4631      	mov	r1, r6
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	47b8      	blx	r7
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d1c2      	bne.n	8003b42 <_printf_float+0x2f6>
 8003bbc:	e6a1      	b.n	8003902 <_printf_float+0xb6>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	920a      	str	r2, [sp, #40]	@ 0x28
 8003bc6:	47b8      	blx	r7
 8003bc8:	3001      	adds	r0, #1
 8003bca:	f43f ae9a 	beq.w	8003902 <_printf_float+0xb6>
 8003bce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003bd0:	f10b 0b01 	add.w	fp, fp, #1
 8003bd4:	e7bb      	b.n	8003b4e <_printf_float+0x302>
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bdc:	4628      	mov	r0, r5
 8003bde:	47b8      	blx	r7
 8003be0:	3001      	adds	r0, #1
 8003be2:	d1c0      	bne.n	8003b66 <_printf_float+0x31a>
 8003be4:	e68d      	b.n	8003902 <_printf_float+0xb6>
 8003be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003be8:	464b      	mov	r3, r9
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	4442      	add	r2, r8
 8003bf0:	47b8      	blx	r7
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d1c3      	bne.n	8003b7e <_printf_float+0x332>
 8003bf6:	e684      	b.n	8003902 <_printf_float+0xb6>
 8003bf8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003bfc:	f1ba 0f01 	cmp.w	sl, #1
 8003c00:	dc01      	bgt.n	8003c06 <_printf_float+0x3ba>
 8003c02:	07db      	lsls	r3, r3, #31
 8003c04:	d536      	bpl.n	8003c74 <_printf_float+0x428>
 8003c06:	2301      	movs	r3, #1
 8003c08:	4642      	mov	r2, r8
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	47b8      	blx	r7
 8003c10:	3001      	adds	r0, #1
 8003c12:	f43f ae76 	beq.w	8003902 <_printf_float+0xb6>
 8003c16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	47b8      	blx	r7
 8003c20:	3001      	adds	r0, #1
 8003c22:	f43f ae6e 	beq.w	8003902 <_printf_float+0xb6>
 8003c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c32:	f7fc feb9 	bl	80009a8 <__aeabi_dcmpeq>
 8003c36:	b9c0      	cbnz	r0, 8003c6a <_printf_float+0x41e>
 8003c38:	4653      	mov	r3, sl
 8003c3a:	f108 0201 	add.w	r2, r8, #1
 8003c3e:	4631      	mov	r1, r6
 8003c40:	4628      	mov	r0, r5
 8003c42:	47b8      	blx	r7
 8003c44:	3001      	adds	r0, #1
 8003c46:	d10c      	bne.n	8003c62 <_printf_float+0x416>
 8003c48:	e65b      	b.n	8003902 <_printf_float+0xb6>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	465a      	mov	r2, fp
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4628      	mov	r0, r5
 8003c52:	47b8      	blx	r7
 8003c54:	3001      	adds	r0, #1
 8003c56:	f43f ae54 	beq.w	8003902 <_printf_float+0xb6>
 8003c5a:	f108 0801 	add.w	r8, r8, #1
 8003c5e:	45d0      	cmp	r8, sl
 8003c60:	dbf3      	blt.n	8003c4a <_printf_float+0x3fe>
 8003c62:	464b      	mov	r3, r9
 8003c64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003c68:	e6e0      	b.n	8003a2c <_printf_float+0x1e0>
 8003c6a:	f04f 0800 	mov.w	r8, #0
 8003c6e:	f104 0b1a 	add.w	fp, r4, #26
 8003c72:	e7f4      	b.n	8003c5e <_printf_float+0x412>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4642      	mov	r2, r8
 8003c78:	e7e1      	b.n	8003c3e <_printf_float+0x3f2>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	464a      	mov	r2, r9
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4628      	mov	r0, r5
 8003c82:	47b8      	blx	r7
 8003c84:	3001      	adds	r0, #1
 8003c86:	f43f ae3c 	beq.w	8003902 <_printf_float+0xb6>
 8003c8a:	f108 0801 	add.w	r8, r8, #1
 8003c8e:	68e3      	ldr	r3, [r4, #12]
 8003c90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003c92:	1a5b      	subs	r3, r3, r1
 8003c94:	4543      	cmp	r3, r8
 8003c96:	dcf0      	bgt.n	8003c7a <_printf_float+0x42e>
 8003c98:	e6fd      	b.n	8003a96 <_printf_float+0x24a>
 8003c9a:	f04f 0800 	mov.w	r8, #0
 8003c9e:	f104 0919 	add.w	r9, r4, #25
 8003ca2:	e7f4      	b.n	8003c8e <_printf_float+0x442>

08003ca4 <_printf_common>:
 8003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	4616      	mov	r6, r2
 8003caa:	4698      	mov	r8, r3
 8003cac:	688a      	ldr	r2, [r1, #8]
 8003cae:	690b      	ldr	r3, [r1, #16]
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	bfb8      	it	lt
 8003cb6:	4613      	movlt	r3, r2
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cc4:	b10a      	cbz	r2, 8003cca <_printf_common+0x26>
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	6033      	str	r3, [r6, #0]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	0699      	lsls	r1, r3, #26
 8003cce:	bf42      	ittt	mi
 8003cd0:	6833      	ldrmi	r3, [r6, #0]
 8003cd2:	3302      	addmi	r3, #2
 8003cd4:	6033      	strmi	r3, [r6, #0]
 8003cd6:	6825      	ldr	r5, [r4, #0]
 8003cd8:	f015 0506 	ands.w	r5, r5, #6
 8003cdc:	d106      	bne.n	8003cec <_printf_common+0x48>
 8003cde:	f104 0a19 	add.w	sl, r4, #25
 8003ce2:	68e3      	ldr	r3, [r4, #12]
 8003ce4:	6832      	ldr	r2, [r6, #0]
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	42ab      	cmp	r3, r5
 8003cea:	dc2b      	bgt.n	8003d44 <_printf_common+0xa0>
 8003cec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	3b00      	subs	r3, #0
 8003cf4:	bf18      	it	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	0692      	lsls	r2, r2, #26
 8003cfa:	d430      	bmi.n	8003d5e <_printf_common+0xba>
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d04:	47c8      	blx	r9
 8003d06:	3001      	adds	r0, #1
 8003d08:	d023      	beq.n	8003d52 <_printf_common+0xae>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	6922      	ldr	r2, [r4, #16]
 8003d0e:	f003 0306 	and.w	r3, r3, #6
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf14      	ite	ne
 8003d16:	2500      	movne	r5, #0
 8003d18:	6833      	ldreq	r3, [r6, #0]
 8003d1a:	f04f 0600 	mov.w	r6, #0
 8003d1e:	bf08      	it	eq
 8003d20:	68e5      	ldreq	r5, [r4, #12]
 8003d22:	f104 041a 	add.w	r4, r4, #26
 8003d26:	bf08      	it	eq
 8003d28:	1aed      	subeq	r5, r5, r3
 8003d2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d2e:	bf08      	it	eq
 8003d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d34:	4293      	cmp	r3, r2
 8003d36:	bfc4      	itt	gt
 8003d38:	1a9b      	subgt	r3, r3, r2
 8003d3a:	18ed      	addgt	r5, r5, r3
 8003d3c:	42b5      	cmp	r5, r6
 8003d3e:	d11a      	bne.n	8003d76 <_printf_common+0xd2>
 8003d40:	2000      	movs	r0, #0
 8003d42:	e008      	b.n	8003d56 <_printf_common+0xb2>
 8003d44:	2301      	movs	r3, #1
 8003d46:	4652      	mov	r2, sl
 8003d48:	4641      	mov	r1, r8
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	47c8      	blx	r9
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d103      	bne.n	8003d5a <_printf_common+0xb6>
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295
 8003d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5a:	3501      	adds	r5, #1
 8003d5c:	e7c1      	b.n	8003ce2 <_printf_common+0x3e>
 8003d5e:	2030      	movs	r0, #48	@ 0x30
 8003d60:	18e1      	adds	r1, r4, r3
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d6c:	4422      	add	r2, r4
 8003d6e:	3302      	adds	r3, #2
 8003d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d74:	e7c2      	b.n	8003cfc <_printf_common+0x58>
 8003d76:	2301      	movs	r3, #1
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	47c8      	blx	r9
 8003d80:	3001      	adds	r0, #1
 8003d82:	d0e6      	beq.n	8003d52 <_printf_common+0xae>
 8003d84:	3601      	adds	r6, #1
 8003d86:	e7d9      	b.n	8003d3c <_printf_common+0x98>

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	4691      	mov	r9, r2
 8003d90:	2f78      	cmp	r7, #120	@ 0x78
 8003d92:	4680      	mov	r8, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	469a      	mov	sl, r3
 8003d98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	@ 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d3 	beq.w	8003f50 <_printf_i+0x1c8>
 8003daa:	2f58      	cmp	r7, #88	@ 0x58
 8003dac:	f000 80ba 	beq.w	8003f24 <_printf_i+0x19c>
 8003db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f37 	.word	0x08003f37
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003ef1 	.word	0x08003ef1
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f59 	.word	0x08003f59
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e5f 	.word	0x08003e5f
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003ef9 	.word	0x08003ef9
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6032      	str	r2, [r6, #0]
 8003e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09e      	b.n	8003f72 <_printf_i+0x1ea>
 8003e34:	6833      	ldr	r3, [r6, #0]
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	6031      	str	r1, [r6, #0]
 8003e3c:	0606      	lsls	r6, r0, #24
 8003e3e:	d501      	bpl.n	8003e44 <_printf_i+0xbc>
 8003e40:	681d      	ldr	r5, [r3, #0]
 8003e42:	e003      	b.n	8003e4c <_printf_i+0xc4>
 8003e44:	0645      	lsls	r5, r0, #25
 8003e46:	d5fb      	bpl.n	8003e40 <_printf_i+0xb8>
 8003e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	da03      	bge.n	8003e58 <_printf_i+0xd0>
 8003e50:	232d      	movs	r3, #45	@ 0x2d
 8003e52:	426d      	negs	r5, r5
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e58:	230a      	movs	r3, #10
 8003e5a:	4859      	ldr	r0, [pc, #356]	@ (8003fc0 <_printf_i+0x238>)
 8003e5c:	e011      	b.n	8003e82 <_printf_i+0xfa>
 8003e5e:	6821      	ldr	r1, [r4, #0]
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	0608      	lsls	r0, r1, #24
 8003e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e68:	d402      	bmi.n	8003e70 <_printf_i+0xe8>
 8003e6a:	0649      	lsls	r1, r1, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2ad      	uxthmi	r5, r5
 8003e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e72:	6033      	str	r3, [r6, #0]
 8003e74:	bf14      	ite	ne
 8003e76:	230a      	movne	r3, #10
 8003e78:	2308      	moveq	r3, #8
 8003e7a:	4851      	ldr	r0, [pc, #324]	@ (8003fc0 <_printf_i+0x238>)
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e82:	6866      	ldr	r6, [r4, #4]
 8003e84:	2e00      	cmp	r6, #0
 8003e86:	bfa8      	it	ge
 8003e88:	6821      	ldrge	r1, [r4, #0]
 8003e8a:	60a6      	str	r6, [r4, #8]
 8003e8c:	bfa4      	itt	ge
 8003e8e:	f021 0104 	bicge.w	r1, r1, #4
 8003e92:	6021      	strge	r1, [r4, #0]
 8003e94:	b90d      	cbnz	r5, 8003e9a <_printf_i+0x112>
 8003e96:	2e00      	cmp	r6, #0
 8003e98:	d04b      	beq.n	8003f32 <_printf_i+0x1aa>
 8003e9a:	4616      	mov	r6, r2
 8003e9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ea0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ea4:	5dc7      	ldrb	r7, [r0, r7]
 8003ea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eaa:	462f      	mov	r7, r5
 8003eac:	42bb      	cmp	r3, r7
 8003eae:	460d      	mov	r5, r1
 8003eb0:	d9f4      	bls.n	8003e9c <_printf_i+0x114>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d10b      	bne.n	8003ece <_printf_i+0x146>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	07df      	lsls	r7, r3, #31
 8003eba:	d508      	bpl.n	8003ece <_printf_i+0x146>
 8003ebc:	6923      	ldr	r3, [r4, #16]
 8003ebe:	6861      	ldr	r1, [r4, #4]
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	bfde      	ittt	le
 8003ec4:	2330      	movle	r3, #48	@ 0x30
 8003ec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ece:	1b92      	subs	r2, r2, r6
 8003ed0:	6122      	str	r2, [r4, #16]
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f8cd a000 	str.w	sl, [sp]
 8003edc:	aa03      	add	r2, sp, #12
 8003ede:	f7ff fee1 	bl	8003ca4 <_printf_common>
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d14a      	bne.n	8003f7c <_printf_i+0x1f4>
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eea:	b004      	add	sp, #16
 8003eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	f043 0320 	orr.w	r3, r3, #32
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	2778      	movs	r7, #120	@ 0x78
 8003efa:	4832      	ldr	r0, [pc, #200]	@ (8003fc4 <_printf_i+0x23c>)
 8003efc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	6831      	ldr	r1, [r6, #0]
 8003f04:	061f      	lsls	r7, r3, #24
 8003f06:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f0a:	d402      	bmi.n	8003f12 <_printf_i+0x18a>
 8003f0c:	065f      	lsls	r7, r3, #25
 8003f0e:	bf48      	it	mi
 8003f10:	b2ad      	uxthmi	r5, r5
 8003f12:	6031      	str	r1, [r6, #0]
 8003f14:	07d9      	lsls	r1, r3, #31
 8003f16:	bf44      	itt	mi
 8003f18:	f043 0320 	orrmi.w	r3, r3, #32
 8003f1c:	6023      	strmi	r3, [r4, #0]
 8003f1e:	b11d      	cbz	r5, 8003f28 <_printf_i+0x1a0>
 8003f20:	2310      	movs	r3, #16
 8003f22:	e7ab      	b.n	8003e7c <_printf_i+0xf4>
 8003f24:	4826      	ldr	r0, [pc, #152]	@ (8003fc0 <_printf_i+0x238>)
 8003f26:	e7e9      	b.n	8003efc <_printf_i+0x174>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	f023 0320 	bic.w	r3, r3, #32
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	e7f6      	b.n	8003f20 <_printf_i+0x198>
 8003f32:	4616      	mov	r6, r2
 8003f34:	e7bd      	b.n	8003eb2 <_printf_i+0x12a>
 8003f36:	6833      	ldr	r3, [r6, #0]
 8003f38:	6825      	ldr	r5, [r4, #0]
 8003f3a:	1d18      	adds	r0, r3, #4
 8003f3c:	6961      	ldr	r1, [r4, #20]
 8003f3e:	6030      	str	r0, [r6, #0]
 8003f40:	062e      	lsls	r6, r5, #24
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	d501      	bpl.n	8003f4a <_printf_i+0x1c2>
 8003f46:	6019      	str	r1, [r3, #0]
 8003f48:	e002      	b.n	8003f50 <_printf_i+0x1c8>
 8003f4a:	0668      	lsls	r0, r5, #25
 8003f4c:	d5fb      	bpl.n	8003f46 <_printf_i+0x1be>
 8003f4e:	8019      	strh	r1, [r3, #0]
 8003f50:	2300      	movs	r3, #0
 8003f52:	4616      	mov	r6, r2
 8003f54:	6123      	str	r3, [r4, #16]
 8003f56:	e7bc      	b.n	8003ed2 <_printf_i+0x14a>
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	1d1a      	adds	r2, r3, #4
 8003f5e:	6032      	str	r2, [r6, #0]
 8003f60:	681e      	ldr	r6, [r3, #0]
 8003f62:	6862      	ldr	r2, [r4, #4]
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 fbe4 	bl	8004732 <memchr>
 8003f6a:	b108      	cbz	r0, 8003f70 <_printf_i+0x1e8>
 8003f6c:	1b80      	subs	r0, r0, r6
 8003f6e:	6060      	str	r0, [r4, #4]
 8003f70:	6863      	ldr	r3, [r4, #4]
 8003f72:	6123      	str	r3, [r4, #16]
 8003f74:	2300      	movs	r3, #0
 8003f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f7a:	e7aa      	b.n	8003ed2 <_printf_i+0x14a>
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4640      	mov	r0, r8
 8003f82:	6923      	ldr	r3, [r4, #16]
 8003f84:	47d0      	blx	sl
 8003f86:	3001      	adds	r0, #1
 8003f88:	d0ad      	beq.n	8003ee6 <_printf_i+0x15e>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	079b      	lsls	r3, r3, #30
 8003f8e:	d413      	bmi.n	8003fb8 <_printf_i+0x230>
 8003f90:	68e0      	ldr	r0, [r4, #12]
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	4298      	cmp	r0, r3
 8003f96:	bfb8      	it	lt
 8003f98:	4618      	movlt	r0, r3
 8003f9a:	e7a6      	b.n	8003eea <_printf_i+0x162>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	47d0      	blx	sl
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d09d      	beq.n	8003ee6 <_printf_i+0x15e>
 8003faa:	3501      	adds	r5, #1
 8003fac:	68e3      	ldr	r3, [r4, #12]
 8003fae:	9903      	ldr	r1, [sp, #12]
 8003fb0:	1a5b      	subs	r3, r3, r1
 8003fb2:	42ab      	cmp	r3, r5
 8003fb4:	dcf2      	bgt.n	8003f9c <_printf_i+0x214>
 8003fb6:	e7eb      	b.n	8003f90 <_printf_i+0x208>
 8003fb8:	2500      	movs	r5, #0
 8003fba:	f104 0619 	add.w	r6, r4, #25
 8003fbe:	e7f5      	b.n	8003fac <_printf_i+0x224>
 8003fc0:	08008cdd 	.word	0x08008cdd
 8003fc4:	08008cee 	.word	0x08008cee

08003fc8 <_scanf_float>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	9303      	str	r3, [sp, #12]
 8003fd0:	688b      	ldr	r3, [r1, #8]
 8003fd2:	4617      	mov	r7, r2
 8003fd4:	1e5a      	subs	r2, r3, #1
 8003fd6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003fda:	bf82      	ittt	hi
 8003fdc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003fe0:	eb03 0b05 	addhi.w	fp, r3, r5
 8003fe4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003fe8:	460a      	mov	r2, r1
 8003fea:	f04f 0500 	mov.w	r5, #0
 8003fee:	bf88      	it	hi
 8003ff0:	608b      	strhi	r3, [r1, #8]
 8003ff2:	680b      	ldr	r3, [r1, #0]
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003ffa:	f842 3b1c 	str.w	r3, [r2], #28
 8003ffe:	460c      	mov	r4, r1
 8004000:	bf98      	it	ls
 8004002:	f04f 0b00 	movls.w	fp, #0
 8004006:	4616      	mov	r6, r2
 8004008:	46aa      	mov	sl, r5
 800400a:	46a9      	mov	r9, r5
 800400c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004010:	9201      	str	r2, [sp, #4]
 8004012:	9502      	str	r5, [sp, #8]
 8004014:	68a2      	ldr	r2, [r4, #8]
 8004016:	b152      	cbz	r2, 800402e <_scanf_float+0x66>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b4e      	cmp	r3, #78	@ 0x4e
 800401e:	d865      	bhi.n	80040ec <_scanf_float+0x124>
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d83d      	bhi.n	80040a0 <_scanf_float+0xd8>
 8004024:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004028:	b2c8      	uxtb	r0, r1
 800402a:	280e      	cmp	r0, #14
 800402c:	d93b      	bls.n	80040a6 <_scanf_float+0xde>
 800402e:	f1b9 0f00 	cmp.w	r9, #0
 8004032:	d003      	beq.n	800403c <_scanf_float+0x74>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800403a:	6023      	str	r3, [r4, #0]
 800403c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004040:	f1ba 0f01 	cmp.w	sl, #1
 8004044:	f200 8118 	bhi.w	8004278 <_scanf_float+0x2b0>
 8004048:	9b01      	ldr	r3, [sp, #4]
 800404a:	429e      	cmp	r6, r3
 800404c:	f200 8109 	bhi.w	8004262 <_scanf_float+0x29a>
 8004050:	2001      	movs	r0, #1
 8004052:	b007      	add	sp, #28
 8004054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004058:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800405c:	2a0d      	cmp	r2, #13
 800405e:	d8e6      	bhi.n	800402e <_scanf_float+0x66>
 8004060:	a101      	add	r1, pc, #4	@ (adr r1, 8004068 <_scanf_float+0xa0>)
 8004062:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004066:	bf00      	nop
 8004068:	080041af 	.word	0x080041af
 800406c:	0800402f 	.word	0x0800402f
 8004070:	0800402f 	.word	0x0800402f
 8004074:	0800402f 	.word	0x0800402f
 8004078:	0800420f 	.word	0x0800420f
 800407c:	080041e7 	.word	0x080041e7
 8004080:	0800402f 	.word	0x0800402f
 8004084:	0800402f 	.word	0x0800402f
 8004088:	080041bd 	.word	0x080041bd
 800408c:	0800402f 	.word	0x0800402f
 8004090:	0800402f 	.word	0x0800402f
 8004094:	0800402f 	.word	0x0800402f
 8004098:	0800402f 	.word	0x0800402f
 800409c:	08004175 	.word	0x08004175
 80040a0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80040a4:	e7da      	b.n	800405c <_scanf_float+0x94>
 80040a6:	290e      	cmp	r1, #14
 80040a8:	d8c1      	bhi.n	800402e <_scanf_float+0x66>
 80040aa:	a001      	add	r0, pc, #4	@ (adr r0, 80040b0 <_scanf_float+0xe8>)
 80040ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80040b0:	08004165 	.word	0x08004165
 80040b4:	0800402f 	.word	0x0800402f
 80040b8:	08004165 	.word	0x08004165
 80040bc:	080041fb 	.word	0x080041fb
 80040c0:	0800402f 	.word	0x0800402f
 80040c4:	0800410d 	.word	0x0800410d
 80040c8:	0800414b 	.word	0x0800414b
 80040cc:	0800414b 	.word	0x0800414b
 80040d0:	0800414b 	.word	0x0800414b
 80040d4:	0800414b 	.word	0x0800414b
 80040d8:	0800414b 	.word	0x0800414b
 80040dc:	0800414b 	.word	0x0800414b
 80040e0:	0800414b 	.word	0x0800414b
 80040e4:	0800414b 	.word	0x0800414b
 80040e8:	0800414b 	.word	0x0800414b
 80040ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80040ee:	d809      	bhi.n	8004104 <_scanf_float+0x13c>
 80040f0:	2b60      	cmp	r3, #96	@ 0x60
 80040f2:	d8b1      	bhi.n	8004058 <_scanf_float+0x90>
 80040f4:	2b54      	cmp	r3, #84	@ 0x54
 80040f6:	d07b      	beq.n	80041f0 <_scanf_float+0x228>
 80040f8:	2b59      	cmp	r3, #89	@ 0x59
 80040fa:	d198      	bne.n	800402e <_scanf_float+0x66>
 80040fc:	2d07      	cmp	r5, #7
 80040fe:	d196      	bne.n	800402e <_scanf_float+0x66>
 8004100:	2508      	movs	r5, #8
 8004102:	e02c      	b.n	800415e <_scanf_float+0x196>
 8004104:	2b74      	cmp	r3, #116	@ 0x74
 8004106:	d073      	beq.n	80041f0 <_scanf_float+0x228>
 8004108:	2b79      	cmp	r3, #121	@ 0x79
 800410a:	e7f6      	b.n	80040fa <_scanf_float+0x132>
 800410c:	6821      	ldr	r1, [r4, #0]
 800410e:	05c8      	lsls	r0, r1, #23
 8004110:	d51b      	bpl.n	800414a <_scanf_float+0x182>
 8004112:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004116:	6021      	str	r1, [r4, #0]
 8004118:	f109 0901 	add.w	r9, r9, #1
 800411c:	f1bb 0f00 	cmp.w	fp, #0
 8004120:	d003      	beq.n	800412a <_scanf_float+0x162>
 8004122:	3201      	adds	r2, #1
 8004124:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004128:	60a2      	str	r2, [r4, #8]
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	3b01      	subs	r3, #1
 800412e:	60a3      	str	r3, [r4, #8]
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	3301      	adds	r3, #1
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3b01      	subs	r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	f340 8087 	ble.w	8004250 <_scanf_float+0x288>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	e764      	b.n	8004014 <_scanf_float+0x4c>
 800414a:	eb1a 0105 	adds.w	r1, sl, r5
 800414e:	f47f af6e 	bne.w	800402e <_scanf_float+0x66>
 8004152:	460d      	mov	r5, r1
 8004154:	468a      	mov	sl, r1
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800415c:	6022      	str	r2, [r4, #0]
 800415e:	f806 3b01 	strb.w	r3, [r6], #1
 8004162:	e7e2      	b.n	800412a <_scanf_float+0x162>
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	0610      	lsls	r0, r2, #24
 8004168:	f57f af61 	bpl.w	800402e <_scanf_float+0x66>
 800416c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004170:	6022      	str	r2, [r4, #0]
 8004172:	e7f4      	b.n	800415e <_scanf_float+0x196>
 8004174:	f1ba 0f00 	cmp.w	sl, #0
 8004178:	d10e      	bne.n	8004198 <_scanf_float+0x1d0>
 800417a:	f1b9 0f00 	cmp.w	r9, #0
 800417e:	d10e      	bne.n	800419e <_scanf_float+0x1d6>
 8004180:	6822      	ldr	r2, [r4, #0]
 8004182:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004186:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800418a:	d108      	bne.n	800419e <_scanf_float+0x1d6>
 800418c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004190:	f04f 0a01 	mov.w	sl, #1
 8004194:	6022      	str	r2, [r4, #0]
 8004196:	e7e2      	b.n	800415e <_scanf_float+0x196>
 8004198:	f1ba 0f02 	cmp.w	sl, #2
 800419c:	d055      	beq.n	800424a <_scanf_float+0x282>
 800419e:	2d01      	cmp	r5, #1
 80041a0:	d002      	beq.n	80041a8 <_scanf_float+0x1e0>
 80041a2:	2d04      	cmp	r5, #4
 80041a4:	f47f af43 	bne.w	800402e <_scanf_float+0x66>
 80041a8:	3501      	adds	r5, #1
 80041aa:	b2ed      	uxtb	r5, r5
 80041ac:	e7d7      	b.n	800415e <_scanf_float+0x196>
 80041ae:	f1ba 0f01 	cmp.w	sl, #1
 80041b2:	f47f af3c 	bne.w	800402e <_scanf_float+0x66>
 80041b6:	f04f 0a02 	mov.w	sl, #2
 80041ba:	e7d0      	b.n	800415e <_scanf_float+0x196>
 80041bc:	b97d      	cbnz	r5, 80041de <_scanf_float+0x216>
 80041be:	f1b9 0f00 	cmp.w	r9, #0
 80041c2:	f47f af37 	bne.w	8004034 <_scanf_float+0x6c>
 80041c6:	6822      	ldr	r2, [r4, #0]
 80041c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80041cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80041d0:	f040 8103 	bne.w	80043da <_scanf_float+0x412>
 80041d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80041d8:	2501      	movs	r5, #1
 80041da:	6022      	str	r2, [r4, #0]
 80041dc:	e7bf      	b.n	800415e <_scanf_float+0x196>
 80041de:	2d03      	cmp	r5, #3
 80041e0:	d0e2      	beq.n	80041a8 <_scanf_float+0x1e0>
 80041e2:	2d05      	cmp	r5, #5
 80041e4:	e7de      	b.n	80041a4 <_scanf_float+0x1dc>
 80041e6:	2d02      	cmp	r5, #2
 80041e8:	f47f af21 	bne.w	800402e <_scanf_float+0x66>
 80041ec:	2503      	movs	r5, #3
 80041ee:	e7b6      	b.n	800415e <_scanf_float+0x196>
 80041f0:	2d06      	cmp	r5, #6
 80041f2:	f47f af1c 	bne.w	800402e <_scanf_float+0x66>
 80041f6:	2507      	movs	r5, #7
 80041f8:	e7b1      	b.n	800415e <_scanf_float+0x196>
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	0591      	lsls	r1, r2, #22
 80041fe:	f57f af16 	bpl.w	800402e <_scanf_float+0x66>
 8004202:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004206:	6022      	str	r2, [r4, #0]
 8004208:	f8cd 9008 	str.w	r9, [sp, #8]
 800420c:	e7a7      	b.n	800415e <_scanf_float+0x196>
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004214:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004218:	d006      	beq.n	8004228 <_scanf_float+0x260>
 800421a:	0550      	lsls	r0, r2, #21
 800421c:	f57f af07 	bpl.w	800402e <_scanf_float+0x66>
 8004220:	f1b9 0f00 	cmp.w	r9, #0
 8004224:	f000 80d9 	beq.w	80043da <_scanf_float+0x412>
 8004228:	0591      	lsls	r1, r2, #22
 800422a:	bf58      	it	pl
 800422c:	9902      	ldrpl	r1, [sp, #8]
 800422e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004232:	bf58      	it	pl
 8004234:	eba9 0101 	subpl.w	r1, r9, r1
 8004238:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800423c:	f04f 0900 	mov.w	r9, #0
 8004240:	bf58      	it	pl
 8004242:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004246:	6022      	str	r2, [r4, #0]
 8004248:	e789      	b.n	800415e <_scanf_float+0x196>
 800424a:	f04f 0a03 	mov.w	sl, #3
 800424e:	e786      	b.n	800415e <_scanf_float+0x196>
 8004250:	4639      	mov	r1, r7
 8004252:	4640      	mov	r0, r8
 8004254:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004258:	4798      	blx	r3
 800425a:	2800      	cmp	r0, #0
 800425c:	f43f aeda 	beq.w	8004014 <_scanf_float+0x4c>
 8004260:	e6e5      	b.n	800402e <_scanf_float+0x66>
 8004262:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004266:	463a      	mov	r2, r7
 8004268:	4640      	mov	r0, r8
 800426a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800426e:	4798      	blx	r3
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	3b01      	subs	r3, #1
 8004274:	6123      	str	r3, [r4, #16]
 8004276:	e6e7      	b.n	8004048 <_scanf_float+0x80>
 8004278:	1e6b      	subs	r3, r5, #1
 800427a:	2b06      	cmp	r3, #6
 800427c:	d824      	bhi.n	80042c8 <_scanf_float+0x300>
 800427e:	2d02      	cmp	r5, #2
 8004280:	d836      	bhi.n	80042f0 <_scanf_float+0x328>
 8004282:	9b01      	ldr	r3, [sp, #4]
 8004284:	429e      	cmp	r6, r3
 8004286:	f67f aee3 	bls.w	8004050 <_scanf_float+0x88>
 800428a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800428e:	463a      	mov	r2, r7
 8004290:	4640      	mov	r0, r8
 8004292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004296:	4798      	blx	r3
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	3b01      	subs	r3, #1
 800429c:	6123      	str	r3, [r4, #16]
 800429e:	e7f0      	b.n	8004282 <_scanf_float+0x2ba>
 80042a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042a4:	463a      	mov	r2, r7
 80042a6:	4640      	mov	r0, r8
 80042a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80042ac:	4798      	blx	r3
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042b8:	fa5f fa8a 	uxtb.w	sl, sl
 80042bc:	f1ba 0f02 	cmp.w	sl, #2
 80042c0:	d1ee      	bne.n	80042a0 <_scanf_float+0x2d8>
 80042c2:	3d03      	subs	r5, #3
 80042c4:	b2ed      	uxtb	r5, r5
 80042c6:	1b76      	subs	r6, r6, r5
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	05da      	lsls	r2, r3, #23
 80042cc:	d530      	bpl.n	8004330 <_scanf_float+0x368>
 80042ce:	055b      	lsls	r3, r3, #21
 80042d0:	d511      	bpl.n	80042f6 <_scanf_float+0x32e>
 80042d2:	9b01      	ldr	r3, [sp, #4]
 80042d4:	429e      	cmp	r6, r3
 80042d6:	f67f aebb 	bls.w	8004050 <_scanf_float+0x88>
 80042da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042de:	463a      	mov	r2, r7
 80042e0:	4640      	mov	r0, r8
 80042e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80042e6:	4798      	blx	r3
 80042e8:	6923      	ldr	r3, [r4, #16]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	6123      	str	r3, [r4, #16]
 80042ee:	e7f0      	b.n	80042d2 <_scanf_float+0x30a>
 80042f0:	46aa      	mov	sl, r5
 80042f2:	46b3      	mov	fp, r6
 80042f4:	e7de      	b.n	80042b4 <_scanf_float+0x2ec>
 80042f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	2965      	cmp	r1, #101	@ 0x65
 80042fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004302:	f106 35ff 	add.w	r5, r6, #4294967295
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	d00c      	beq.n	8004324 <_scanf_float+0x35c>
 800430a:	2945      	cmp	r1, #69	@ 0x45
 800430c:	d00a      	beq.n	8004324 <_scanf_float+0x35c>
 800430e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004312:	463a      	mov	r2, r7
 8004314:	4640      	mov	r0, r8
 8004316:	4798      	blx	r3
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800431e:	3b01      	subs	r3, #1
 8004320:	1eb5      	subs	r5, r6, #2
 8004322:	6123      	str	r3, [r4, #16]
 8004324:	463a      	mov	r2, r7
 8004326:	4640      	mov	r0, r8
 8004328:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800432c:	4798      	blx	r3
 800432e:	462e      	mov	r6, r5
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	f012 0210 	ands.w	r2, r2, #16
 8004336:	d001      	beq.n	800433c <_scanf_float+0x374>
 8004338:	2000      	movs	r0, #0
 800433a:	e68a      	b.n	8004052 <_scanf_float+0x8a>
 800433c:	7032      	strb	r2, [r6, #0]
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004348:	d11c      	bne.n	8004384 <_scanf_float+0x3bc>
 800434a:	9b02      	ldr	r3, [sp, #8]
 800434c:	454b      	cmp	r3, r9
 800434e:	eba3 0209 	sub.w	r2, r3, r9
 8004352:	d123      	bne.n	800439c <_scanf_float+0x3d4>
 8004354:	2200      	movs	r2, #0
 8004356:	4640      	mov	r0, r8
 8004358:	9901      	ldr	r1, [sp, #4]
 800435a:	f002 fbed 	bl	8006b38 <_strtod_r>
 800435e:	9b03      	ldr	r3, [sp, #12]
 8004360:	6825      	ldr	r5, [r4, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f015 0f02 	tst.w	r5, #2
 8004368:	4606      	mov	r6, r0
 800436a:	460f      	mov	r7, r1
 800436c:	f103 0204 	add.w	r2, r3, #4
 8004370:	d01f      	beq.n	80043b2 <_scanf_float+0x3ea>
 8004372:	9903      	ldr	r1, [sp, #12]
 8004374:	600a      	str	r2, [r1, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	e9c3 6700 	strd	r6, r7, [r3]
 800437c:	68e3      	ldr	r3, [r4, #12]
 800437e:	3301      	adds	r3, #1
 8004380:	60e3      	str	r3, [r4, #12]
 8004382:	e7d9      	b.n	8004338 <_scanf_float+0x370>
 8004384:	9b04      	ldr	r3, [sp, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0e4      	beq.n	8004354 <_scanf_float+0x38c>
 800438a:	9905      	ldr	r1, [sp, #20]
 800438c:	230a      	movs	r3, #10
 800438e:	4640      	mov	r0, r8
 8004390:	3101      	adds	r1, #1
 8004392:	f7ff f9b1 	bl	80036f8 <_strtol_r>
 8004396:	9b04      	ldr	r3, [sp, #16]
 8004398:	9e05      	ldr	r6, [sp, #20]
 800439a:	1ac2      	subs	r2, r0, r3
 800439c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80043a0:	429e      	cmp	r6, r3
 80043a2:	bf28      	it	cs
 80043a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80043a8:	4630      	mov	r0, r6
 80043aa:	490d      	ldr	r1, [pc, #52]	@ (80043e0 <_scanf_float+0x418>)
 80043ac:	f000 f8de 	bl	800456c <siprintf>
 80043b0:	e7d0      	b.n	8004354 <_scanf_float+0x38c>
 80043b2:	076d      	lsls	r5, r5, #29
 80043b4:	d4dd      	bmi.n	8004372 <_scanf_float+0x3aa>
 80043b6:	9d03      	ldr	r5, [sp, #12]
 80043b8:	602a      	str	r2, [r5, #0]
 80043ba:	681d      	ldr	r5, [r3, #0]
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	f7fc fb24 	bl	8000a0c <__aeabi_dcmpun>
 80043c4:	b120      	cbz	r0, 80043d0 <_scanf_float+0x408>
 80043c6:	4807      	ldr	r0, [pc, #28]	@ (80043e4 <_scanf_float+0x41c>)
 80043c8:	f000 f9c2 	bl	8004750 <nanf>
 80043cc:	6028      	str	r0, [r5, #0]
 80043ce:	e7d5      	b.n	800437c <_scanf_float+0x3b4>
 80043d0:	4630      	mov	r0, r6
 80043d2:	4639      	mov	r1, r7
 80043d4:	f7fc fb78 	bl	8000ac8 <__aeabi_d2f>
 80043d8:	e7f8      	b.n	80043cc <_scanf_float+0x404>
 80043da:	f04f 0900 	mov.w	r9, #0
 80043de:	e62d      	b.n	800403c <_scanf_float+0x74>
 80043e0:	08008cff 	.word	0x08008cff
 80043e4:	08008f94 	.word	0x08008f94

080043e8 <std>:
 80043e8:	2300      	movs	r3, #0
 80043ea:	b510      	push	{r4, lr}
 80043ec:	4604      	mov	r4, r0
 80043ee:	e9c0 3300 	strd	r3, r3, [r0]
 80043f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043f6:	6083      	str	r3, [r0, #8]
 80043f8:	8181      	strh	r1, [r0, #12]
 80043fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80043fc:	81c2      	strh	r2, [r0, #14]
 80043fe:	6183      	str	r3, [r0, #24]
 8004400:	4619      	mov	r1, r3
 8004402:	2208      	movs	r2, #8
 8004404:	305c      	adds	r0, #92	@ 0x5c
 8004406:	f000 f914 	bl	8004632 <memset>
 800440a:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <std+0x58>)
 800440c:	6224      	str	r4, [r4, #32]
 800440e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004410:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <std+0x5c>)
 8004412:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004414:	4b0c      	ldr	r3, [pc, #48]	@ (8004448 <std+0x60>)
 8004416:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004418:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <std+0x64>)
 800441a:	6323      	str	r3, [r4, #48]	@ 0x30
 800441c:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <std+0x68>)
 800441e:	429c      	cmp	r4, r3
 8004420:	d006      	beq.n	8004430 <std+0x48>
 8004422:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004426:	4294      	cmp	r4, r2
 8004428:	d002      	beq.n	8004430 <std+0x48>
 800442a:	33d0      	adds	r3, #208	@ 0xd0
 800442c:	429c      	cmp	r4, r3
 800442e:	d105      	bne.n	800443c <std+0x54>
 8004430:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004438:	f000 b978 	b.w	800472c <__retarget_lock_init_recursive>
 800443c:	bd10      	pop	{r4, pc}
 800443e:	bf00      	nop
 8004440:	080045ad 	.word	0x080045ad
 8004444:	080045cf 	.word	0x080045cf
 8004448:	08004607 	.word	0x08004607
 800444c:	0800462b 	.word	0x0800462b
 8004450:	20000824 	.word	0x20000824

08004454 <stdio_exit_handler>:
 8004454:	4a02      	ldr	r2, [pc, #8]	@ (8004460 <stdio_exit_handler+0xc>)
 8004456:	4903      	ldr	r1, [pc, #12]	@ (8004464 <stdio_exit_handler+0x10>)
 8004458:	4803      	ldr	r0, [pc, #12]	@ (8004468 <stdio_exit_handler+0x14>)
 800445a:	f000 b869 	b.w	8004530 <_fwalk_sglue>
 800445e:	bf00      	nop
 8004460:	20000014 	.word	0x20000014
 8004464:	08006ef5 	.word	0x08006ef5
 8004468:	20000024 	.word	0x20000024

0800446c <cleanup_stdio>:
 800446c:	6841      	ldr	r1, [r0, #4]
 800446e:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <cleanup_stdio+0x34>)
 8004470:	b510      	push	{r4, lr}
 8004472:	4299      	cmp	r1, r3
 8004474:	4604      	mov	r4, r0
 8004476:	d001      	beq.n	800447c <cleanup_stdio+0x10>
 8004478:	f002 fd3c 	bl	8006ef4 <_fflush_r>
 800447c:	68a1      	ldr	r1, [r4, #8]
 800447e:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <cleanup_stdio+0x38>)
 8004480:	4299      	cmp	r1, r3
 8004482:	d002      	beq.n	800448a <cleanup_stdio+0x1e>
 8004484:	4620      	mov	r0, r4
 8004486:	f002 fd35 	bl	8006ef4 <_fflush_r>
 800448a:	68e1      	ldr	r1, [r4, #12]
 800448c:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <cleanup_stdio+0x3c>)
 800448e:	4299      	cmp	r1, r3
 8004490:	d004      	beq.n	800449c <cleanup_stdio+0x30>
 8004492:	4620      	mov	r0, r4
 8004494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004498:	f002 bd2c 	b.w	8006ef4 <_fflush_r>
 800449c:	bd10      	pop	{r4, pc}
 800449e:	bf00      	nop
 80044a0:	20000824 	.word	0x20000824
 80044a4:	2000088c 	.word	0x2000088c
 80044a8:	200008f4 	.word	0x200008f4

080044ac <global_stdio_init.part.0>:
 80044ac:	b510      	push	{r4, lr}
 80044ae:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <global_stdio_init.part.0+0x30>)
 80044b0:	4c0b      	ldr	r4, [pc, #44]	@ (80044e0 <global_stdio_init.part.0+0x34>)
 80044b2:	4a0c      	ldr	r2, [pc, #48]	@ (80044e4 <global_stdio_init.part.0+0x38>)
 80044b4:	4620      	mov	r0, r4
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	2104      	movs	r1, #4
 80044ba:	2200      	movs	r2, #0
 80044bc:	f7ff ff94 	bl	80043e8 <std>
 80044c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044c4:	2201      	movs	r2, #1
 80044c6:	2109      	movs	r1, #9
 80044c8:	f7ff ff8e 	bl	80043e8 <std>
 80044cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044d0:	2202      	movs	r2, #2
 80044d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d6:	2112      	movs	r1, #18
 80044d8:	f7ff bf86 	b.w	80043e8 <std>
 80044dc:	2000095c 	.word	0x2000095c
 80044e0:	20000824 	.word	0x20000824
 80044e4:	08004455 	.word	0x08004455

080044e8 <__sfp_lock_acquire>:
 80044e8:	4801      	ldr	r0, [pc, #4]	@ (80044f0 <__sfp_lock_acquire+0x8>)
 80044ea:	f000 b920 	b.w	800472e <__retarget_lock_acquire_recursive>
 80044ee:	bf00      	nop
 80044f0:	20000965 	.word	0x20000965

080044f4 <__sfp_lock_release>:
 80044f4:	4801      	ldr	r0, [pc, #4]	@ (80044fc <__sfp_lock_release+0x8>)
 80044f6:	f000 b91b 	b.w	8004730 <__retarget_lock_release_recursive>
 80044fa:	bf00      	nop
 80044fc:	20000965 	.word	0x20000965

08004500 <__sinit>:
 8004500:	b510      	push	{r4, lr}
 8004502:	4604      	mov	r4, r0
 8004504:	f7ff fff0 	bl	80044e8 <__sfp_lock_acquire>
 8004508:	6a23      	ldr	r3, [r4, #32]
 800450a:	b11b      	cbz	r3, 8004514 <__sinit+0x14>
 800450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004510:	f7ff bff0 	b.w	80044f4 <__sfp_lock_release>
 8004514:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <__sinit+0x28>)
 8004516:	6223      	str	r3, [r4, #32]
 8004518:	4b04      	ldr	r3, [pc, #16]	@ (800452c <__sinit+0x2c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f5      	bne.n	800450c <__sinit+0xc>
 8004520:	f7ff ffc4 	bl	80044ac <global_stdio_init.part.0>
 8004524:	e7f2      	b.n	800450c <__sinit+0xc>
 8004526:	bf00      	nop
 8004528:	0800446d 	.word	0x0800446d
 800452c:	2000095c 	.word	0x2000095c

08004530 <_fwalk_sglue>:
 8004530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004534:	4607      	mov	r7, r0
 8004536:	4688      	mov	r8, r1
 8004538:	4614      	mov	r4, r2
 800453a:	2600      	movs	r6, #0
 800453c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004540:	f1b9 0901 	subs.w	r9, r9, #1
 8004544:	d505      	bpl.n	8004552 <_fwalk_sglue+0x22>
 8004546:	6824      	ldr	r4, [r4, #0]
 8004548:	2c00      	cmp	r4, #0
 800454a:	d1f7      	bne.n	800453c <_fwalk_sglue+0xc>
 800454c:	4630      	mov	r0, r6
 800454e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004552:	89ab      	ldrh	r3, [r5, #12]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d907      	bls.n	8004568 <_fwalk_sglue+0x38>
 8004558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800455c:	3301      	adds	r3, #1
 800455e:	d003      	beq.n	8004568 <_fwalk_sglue+0x38>
 8004560:	4629      	mov	r1, r5
 8004562:	4638      	mov	r0, r7
 8004564:	47c0      	blx	r8
 8004566:	4306      	orrs	r6, r0
 8004568:	3568      	adds	r5, #104	@ 0x68
 800456a:	e7e9      	b.n	8004540 <_fwalk_sglue+0x10>

0800456c <siprintf>:
 800456c:	b40e      	push	{r1, r2, r3}
 800456e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004572:	b500      	push	{lr}
 8004574:	b09c      	sub	sp, #112	@ 0x70
 8004576:	ab1d      	add	r3, sp, #116	@ 0x74
 8004578:	9002      	str	r0, [sp, #8]
 800457a:	9006      	str	r0, [sp, #24]
 800457c:	9107      	str	r1, [sp, #28]
 800457e:	9104      	str	r1, [sp, #16]
 8004580:	4808      	ldr	r0, [pc, #32]	@ (80045a4 <siprintf+0x38>)
 8004582:	4909      	ldr	r1, [pc, #36]	@ (80045a8 <siprintf+0x3c>)
 8004584:	f853 2b04 	ldr.w	r2, [r3], #4
 8004588:	9105      	str	r1, [sp, #20]
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	a902      	add	r1, sp, #8
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	f002 fb34 	bl	8006bfc <_svfiprintf_r>
 8004594:	2200      	movs	r2, #0
 8004596:	9b02      	ldr	r3, [sp, #8]
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	b01c      	add	sp, #112	@ 0x70
 800459c:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a0:	b003      	add	sp, #12
 80045a2:	4770      	bx	lr
 80045a4:	20000020 	.word	0x20000020
 80045a8:	ffff0208 	.word	0xffff0208

080045ac <__sread>:
 80045ac:	b510      	push	{r4, lr}
 80045ae:	460c      	mov	r4, r1
 80045b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b4:	f000 f86c 	bl	8004690 <_read_r>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	bfab      	itete	ge
 80045bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045be:	89a3      	ldrhlt	r3, [r4, #12]
 80045c0:	181b      	addge	r3, r3, r0
 80045c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045c6:	bfac      	ite	ge
 80045c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045ca:	81a3      	strhlt	r3, [r4, #12]
 80045cc:	bd10      	pop	{r4, pc}

080045ce <__swrite>:
 80045ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d2:	461f      	mov	r7, r3
 80045d4:	898b      	ldrh	r3, [r1, #12]
 80045d6:	4605      	mov	r5, r0
 80045d8:	05db      	lsls	r3, r3, #23
 80045da:	460c      	mov	r4, r1
 80045dc:	4616      	mov	r6, r2
 80045de:	d505      	bpl.n	80045ec <__swrite+0x1e>
 80045e0:	2302      	movs	r3, #2
 80045e2:	2200      	movs	r2, #0
 80045e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e8:	f000 f840 	bl	800466c <_lseek_r>
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	4632      	mov	r2, r6
 80045f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045f4:	81a3      	strh	r3, [r4, #12]
 80045f6:	4628      	mov	r0, r5
 80045f8:	463b      	mov	r3, r7
 80045fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004602:	f000 b857 	b.w	80046b4 <_write_r>

08004606 <__sseek>:
 8004606:	b510      	push	{r4, lr}
 8004608:	460c      	mov	r4, r1
 800460a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460e:	f000 f82d 	bl	800466c <_lseek_r>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	bf15      	itete	ne
 8004618:	6560      	strne	r0, [r4, #84]	@ 0x54
 800461a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800461e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004622:	81a3      	strheq	r3, [r4, #12]
 8004624:	bf18      	it	ne
 8004626:	81a3      	strhne	r3, [r4, #12]
 8004628:	bd10      	pop	{r4, pc}

0800462a <__sclose>:
 800462a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462e:	f000 b80d 	b.w	800464c <_close_r>

08004632 <memset>:
 8004632:	4603      	mov	r3, r0
 8004634:	4402      	add	r2, r0
 8004636:	4293      	cmp	r3, r2
 8004638:	d100      	bne.n	800463c <memset+0xa>
 800463a:	4770      	bx	lr
 800463c:	f803 1b01 	strb.w	r1, [r3], #1
 8004640:	e7f9      	b.n	8004636 <memset+0x4>
	...

08004644 <_localeconv_r>:
 8004644:	4800      	ldr	r0, [pc, #0]	@ (8004648 <_localeconv_r+0x4>)
 8004646:	4770      	bx	lr
 8004648:	20000160 	.word	0x20000160

0800464c <_close_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	2300      	movs	r3, #0
 8004650:	4d05      	ldr	r5, [pc, #20]	@ (8004668 <_close_r+0x1c>)
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	f7fd fbb9 	bl	8001dce <_close>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_close_r+0x1a>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_close_r+0x1a>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	20000960 	.word	0x20000960

0800466c <_lseek_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	2200      	movs	r2, #0
 8004676:	4d05      	ldr	r5, [pc, #20]	@ (800468c <_lseek_r+0x20>)
 8004678:	602a      	str	r2, [r5, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f7fd fbcb 	bl	8001e16 <_lseek>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_lseek_r+0x1e>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_lseek_r+0x1e>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	20000960 	.word	0x20000960

08004690 <_read_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4604      	mov	r4, r0
 8004694:	4608      	mov	r0, r1
 8004696:	4611      	mov	r1, r2
 8004698:	2200      	movs	r2, #0
 800469a:	4d05      	ldr	r5, [pc, #20]	@ (80046b0 <_read_r+0x20>)
 800469c:	602a      	str	r2, [r5, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	f7fd fb5c 	bl	8001d5c <_read>
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	d102      	bne.n	80046ae <_read_r+0x1e>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	b103      	cbz	r3, 80046ae <_read_r+0x1e>
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	bd38      	pop	{r3, r4, r5, pc}
 80046b0:	20000960 	.word	0x20000960

080046b4 <_write_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	4611      	mov	r1, r2
 80046bc:	2200      	movs	r2, #0
 80046be:	4d05      	ldr	r5, [pc, #20]	@ (80046d4 <_write_r+0x20>)
 80046c0:	602a      	str	r2, [r5, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f7fd fb67 	bl	8001d96 <_write>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d102      	bne.n	80046d2 <_write_r+0x1e>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b103      	cbz	r3, 80046d2 <_write_r+0x1e>
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	20000960 	.word	0x20000960

080046d8 <__errno>:
 80046d8:	4b01      	ldr	r3, [pc, #4]	@ (80046e0 <__errno+0x8>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000020 	.word	0x20000020

080046e4 <__libc_init_array>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	2600      	movs	r6, #0
 80046e8:	4d0c      	ldr	r5, [pc, #48]	@ (800471c <__libc_init_array+0x38>)
 80046ea:	4c0d      	ldr	r4, [pc, #52]	@ (8004720 <__libc_init_array+0x3c>)
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	42a6      	cmp	r6, r4
 80046f2:	d109      	bne.n	8004708 <__libc_init_array+0x24>
 80046f4:	f004 f9f8 	bl	8008ae8 <_init>
 80046f8:	2600      	movs	r6, #0
 80046fa:	4d0a      	ldr	r5, [pc, #40]	@ (8004724 <__libc_init_array+0x40>)
 80046fc:	4c0a      	ldr	r4, [pc, #40]	@ (8004728 <__libc_init_array+0x44>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	42a6      	cmp	r6, r4
 8004704:	d105      	bne.n	8004712 <__libc_init_array+0x2e>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	f855 3b04 	ldr.w	r3, [r5], #4
 800470c:	4798      	blx	r3
 800470e:	3601      	adds	r6, #1
 8004710:	e7ee      	b.n	80046f0 <__libc_init_array+0xc>
 8004712:	f855 3b04 	ldr.w	r3, [r5], #4
 8004716:	4798      	blx	r3
 8004718:	3601      	adds	r6, #1
 800471a:	e7f2      	b.n	8004702 <__libc_init_array+0x1e>
 800471c:	08009030 	.word	0x08009030
 8004720:	08009030 	.word	0x08009030
 8004724:	08009030 	.word	0x08009030
 8004728:	08009034 	.word	0x08009034

0800472c <__retarget_lock_init_recursive>:
 800472c:	4770      	bx	lr

0800472e <__retarget_lock_acquire_recursive>:
 800472e:	4770      	bx	lr

08004730 <__retarget_lock_release_recursive>:
 8004730:	4770      	bx	lr

08004732 <memchr>:
 8004732:	4603      	mov	r3, r0
 8004734:	b510      	push	{r4, lr}
 8004736:	b2c9      	uxtb	r1, r1
 8004738:	4402      	add	r2, r0
 800473a:	4293      	cmp	r3, r2
 800473c:	4618      	mov	r0, r3
 800473e:	d101      	bne.n	8004744 <memchr+0x12>
 8004740:	2000      	movs	r0, #0
 8004742:	e003      	b.n	800474c <memchr+0x1a>
 8004744:	7804      	ldrb	r4, [r0, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	428c      	cmp	r4, r1
 800474a:	d1f6      	bne.n	800473a <memchr+0x8>
 800474c:	bd10      	pop	{r4, pc}
	...

08004750 <nanf>:
 8004750:	4800      	ldr	r0, [pc, #0]	@ (8004754 <nanf+0x4>)
 8004752:	4770      	bx	lr
 8004754:	7fc00000 	.word	0x7fc00000

08004758 <quorem>:
 8004758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	6903      	ldr	r3, [r0, #16]
 800475e:	690c      	ldr	r4, [r1, #16]
 8004760:	4607      	mov	r7, r0
 8004762:	42a3      	cmp	r3, r4
 8004764:	db7e      	blt.n	8004864 <quorem+0x10c>
 8004766:	3c01      	subs	r4, #1
 8004768:	00a3      	lsls	r3, r4, #2
 800476a:	f100 0514 	add.w	r5, r0, #20
 800476e:	f101 0814 	add.w	r8, r1, #20
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800477e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004782:	3301      	adds	r3, #1
 8004784:	429a      	cmp	r2, r3
 8004786:	fbb2 f6f3 	udiv	r6, r2, r3
 800478a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800478e:	d32e      	bcc.n	80047ee <quorem+0x96>
 8004790:	f04f 0a00 	mov.w	sl, #0
 8004794:	46c4      	mov	ip, r8
 8004796:	46ae      	mov	lr, r5
 8004798:	46d3      	mov	fp, sl
 800479a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800479e:	b298      	uxth	r0, r3
 80047a0:	fb06 a000 	mla	r0, r6, r0, sl
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	0c02      	lsrs	r2, r0, #16
 80047a8:	fb06 2303 	mla	r3, r6, r3, r2
 80047ac:	f8de 2000 	ldr.w	r2, [lr]
 80047b0:	b280      	uxth	r0, r0
 80047b2:	b292      	uxth	r2, r2
 80047b4:	1a12      	subs	r2, r2, r0
 80047b6:	445a      	add	r2, fp
 80047b8:	f8de 0000 	ldr.w	r0, [lr]
 80047bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80047c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80047ca:	b292      	uxth	r2, r2
 80047cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80047d0:	45e1      	cmp	r9, ip
 80047d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80047d6:	f84e 2b04 	str.w	r2, [lr], #4
 80047da:	d2de      	bcs.n	800479a <quorem+0x42>
 80047dc:	9b00      	ldr	r3, [sp, #0]
 80047de:	58eb      	ldr	r3, [r5, r3]
 80047e0:	b92b      	cbnz	r3, 80047ee <quorem+0x96>
 80047e2:	9b01      	ldr	r3, [sp, #4]
 80047e4:	3b04      	subs	r3, #4
 80047e6:	429d      	cmp	r5, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	d32f      	bcc.n	800484c <quorem+0xf4>
 80047ec:	613c      	str	r4, [r7, #16]
 80047ee:	4638      	mov	r0, r7
 80047f0:	f001 f9c2 	bl	8005b78 <__mcmp>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	db25      	blt.n	8004844 <quorem+0xec>
 80047f8:	4629      	mov	r1, r5
 80047fa:	2000      	movs	r0, #0
 80047fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004800:	f8d1 c000 	ldr.w	ip, [r1]
 8004804:	fa1f fe82 	uxth.w	lr, r2
 8004808:	fa1f f38c 	uxth.w	r3, ip
 800480c:	eba3 030e 	sub.w	r3, r3, lr
 8004810:	4403      	add	r3, r0
 8004812:	0c12      	lsrs	r2, r2, #16
 8004814:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004818:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800481c:	b29b      	uxth	r3, r3
 800481e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004822:	45c1      	cmp	r9, r8
 8004824:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004828:	f841 3b04 	str.w	r3, [r1], #4
 800482c:	d2e6      	bcs.n	80047fc <quorem+0xa4>
 800482e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004836:	b922      	cbnz	r2, 8004842 <quorem+0xea>
 8004838:	3b04      	subs	r3, #4
 800483a:	429d      	cmp	r5, r3
 800483c:	461a      	mov	r2, r3
 800483e:	d30b      	bcc.n	8004858 <quorem+0x100>
 8004840:	613c      	str	r4, [r7, #16]
 8004842:	3601      	adds	r6, #1
 8004844:	4630      	mov	r0, r6
 8004846:	b003      	add	sp, #12
 8004848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	3b04      	subs	r3, #4
 8004850:	2a00      	cmp	r2, #0
 8004852:	d1cb      	bne.n	80047ec <quorem+0x94>
 8004854:	3c01      	subs	r4, #1
 8004856:	e7c6      	b.n	80047e6 <quorem+0x8e>
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	3b04      	subs	r3, #4
 800485c:	2a00      	cmp	r2, #0
 800485e:	d1ef      	bne.n	8004840 <quorem+0xe8>
 8004860:	3c01      	subs	r4, #1
 8004862:	e7ea      	b.n	800483a <quorem+0xe2>
 8004864:	2000      	movs	r0, #0
 8004866:	e7ee      	b.n	8004846 <quorem+0xee>

08004868 <_dtoa_r>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	4614      	mov	r4, r2
 800486e:	461d      	mov	r5, r3
 8004870:	69c7      	ldr	r7, [r0, #28]
 8004872:	b097      	sub	sp, #92	@ 0x5c
 8004874:	4683      	mov	fp, r0
 8004876:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800487a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800487c:	b97f      	cbnz	r7, 800489e <_dtoa_r+0x36>
 800487e:	2010      	movs	r0, #16
 8004880:	f000 fe02 	bl	8005488 <malloc>
 8004884:	4602      	mov	r2, r0
 8004886:	f8cb 001c 	str.w	r0, [fp, #28]
 800488a:	b920      	cbnz	r0, 8004896 <_dtoa_r+0x2e>
 800488c:	21ef      	movs	r1, #239	@ 0xef
 800488e:	4ba8      	ldr	r3, [pc, #672]	@ (8004b30 <_dtoa_r+0x2c8>)
 8004890:	48a8      	ldr	r0, [pc, #672]	@ (8004b34 <_dtoa_r+0x2cc>)
 8004892:	f002 fba7 	bl	8006fe4 <__assert_func>
 8004896:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800489a:	6007      	str	r7, [r0, #0]
 800489c:	60c7      	str	r7, [r0, #12]
 800489e:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048a2:	6819      	ldr	r1, [r3, #0]
 80048a4:	b159      	cbz	r1, 80048be <_dtoa_r+0x56>
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	2301      	movs	r3, #1
 80048aa:	4093      	lsls	r3, r2
 80048ac:	604a      	str	r2, [r1, #4]
 80048ae:	608b      	str	r3, [r1, #8]
 80048b0:	4658      	mov	r0, fp
 80048b2:	f000 fedf 	bl	8005674 <_Bfree>
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	1e2b      	subs	r3, r5, #0
 80048c0:	bfaf      	iteee	ge
 80048c2:	2300      	movge	r3, #0
 80048c4:	2201      	movlt	r2, #1
 80048c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80048ca:	9303      	strlt	r3, [sp, #12]
 80048cc:	bfa8      	it	ge
 80048ce:	6033      	strge	r3, [r6, #0]
 80048d0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80048d4:	4b98      	ldr	r3, [pc, #608]	@ (8004b38 <_dtoa_r+0x2d0>)
 80048d6:	bfb8      	it	lt
 80048d8:	6032      	strlt	r2, [r6, #0]
 80048da:	ea33 0308 	bics.w	r3, r3, r8
 80048de:	d112      	bne.n	8004906 <_dtoa_r+0x9e>
 80048e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80048e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80048ec:	4323      	orrs	r3, r4
 80048ee:	f000 8550 	beq.w	8005392 <_dtoa_r+0xb2a>
 80048f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80048f4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004b3c <_dtoa_r+0x2d4>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8552 	beq.w	80053a2 <_dtoa_r+0xb3a>
 80048fe:	f10a 0303 	add.w	r3, sl, #3
 8004902:	f000 bd4c 	b.w	800539e <_dtoa_r+0xb36>
 8004906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800490a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800490e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004912:	2200      	movs	r2, #0
 8004914:	2300      	movs	r3, #0
 8004916:	f7fc f847 	bl	80009a8 <__aeabi_dcmpeq>
 800491a:	4607      	mov	r7, r0
 800491c:	b158      	cbz	r0, 8004936 <_dtoa_r+0xce>
 800491e:	2301      	movs	r3, #1
 8004920:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004926:	b113      	cbz	r3, 800492e <_dtoa_r+0xc6>
 8004928:	4b85      	ldr	r3, [pc, #532]	@ (8004b40 <_dtoa_r+0x2d8>)
 800492a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004b44 <_dtoa_r+0x2dc>
 8004932:	f000 bd36 	b.w	80053a2 <_dtoa_r+0xb3a>
 8004936:	ab14      	add	r3, sp, #80	@ 0x50
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	ab15      	add	r3, sp, #84	@ 0x54
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	4658      	mov	r0, fp
 8004940:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004944:	f001 fa30 	bl	8005da8 <__d2b>
 8004948:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800494c:	4681      	mov	r9, r0
 800494e:	2e00      	cmp	r6, #0
 8004950:	d077      	beq.n	8004a42 <_dtoa_r+0x1da>
 8004952:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004958:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800495c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004960:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004964:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004968:	9712      	str	r7, [sp, #72]	@ 0x48
 800496a:	4619      	mov	r1, r3
 800496c:	2200      	movs	r2, #0
 800496e:	4b76      	ldr	r3, [pc, #472]	@ (8004b48 <_dtoa_r+0x2e0>)
 8004970:	f7fb fbfa 	bl	8000168 <__aeabi_dsub>
 8004974:	a368      	add	r3, pc, #416	@ (adr r3, 8004b18 <_dtoa_r+0x2b0>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fb fdad 	bl	80004d8 <__aeabi_dmul>
 800497e:	a368      	add	r3, pc, #416	@ (adr r3, 8004b20 <_dtoa_r+0x2b8>)
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f7fb fbf2 	bl	800016c <__adddf3>
 8004988:	4604      	mov	r4, r0
 800498a:	4630      	mov	r0, r6
 800498c:	460d      	mov	r5, r1
 800498e:	f7fb fd39 	bl	8000404 <__aeabi_i2d>
 8004992:	a365      	add	r3, pc, #404	@ (adr r3, 8004b28 <_dtoa_r+0x2c0>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fd9e 	bl	80004d8 <__aeabi_dmul>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4620      	mov	r0, r4
 80049a2:	4629      	mov	r1, r5
 80049a4:	f7fb fbe2 	bl	800016c <__adddf3>
 80049a8:	4604      	mov	r4, r0
 80049aa:	460d      	mov	r5, r1
 80049ac:	f7fc f844 	bl	8000a38 <__aeabi_d2iz>
 80049b0:	2200      	movs	r2, #0
 80049b2:	4607      	mov	r7, r0
 80049b4:	2300      	movs	r3, #0
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fb ffff 	bl	80009bc <__aeabi_dcmplt>
 80049be:	b140      	cbz	r0, 80049d2 <_dtoa_r+0x16a>
 80049c0:	4638      	mov	r0, r7
 80049c2:	f7fb fd1f 	bl	8000404 <__aeabi_i2d>
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	f7fb ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80049ce:	b900      	cbnz	r0, 80049d2 <_dtoa_r+0x16a>
 80049d0:	3f01      	subs	r7, #1
 80049d2:	2f16      	cmp	r7, #22
 80049d4:	d853      	bhi.n	8004a7e <_dtoa_r+0x216>
 80049d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049da:	4b5c      	ldr	r3, [pc, #368]	@ (8004b4c <_dtoa_r+0x2e4>)
 80049dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb ffea 	bl	80009bc <__aeabi_dcmplt>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d04a      	beq.n	8004a82 <_dtoa_r+0x21a>
 80049ec:	2300      	movs	r3, #0
 80049ee:	3f01      	subs	r7, #1
 80049f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80049f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80049f4:	1b9b      	subs	r3, r3, r6
 80049f6:	1e5a      	subs	r2, r3, #1
 80049f8:	bf46      	itte	mi
 80049fa:	f1c3 0801 	rsbmi	r8, r3, #1
 80049fe:	2300      	movmi	r3, #0
 8004a00:	f04f 0800 	movpl.w	r8, #0
 8004a04:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a06:	bf48      	it	mi
 8004a08:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004a0a:	2f00      	cmp	r7, #0
 8004a0c:	db3b      	blt.n	8004a86 <_dtoa_r+0x21e>
 8004a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a10:	970e      	str	r7, [sp, #56]	@ 0x38
 8004a12:	443b      	add	r3, r7
 8004a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a16:	2300      	movs	r3, #0
 8004a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d866      	bhi.n	8004aee <_dtoa_r+0x286>
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	bfc4      	itt	gt
 8004a24:	3b04      	subgt	r3, #4
 8004a26:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004a28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a2a:	bfc8      	it	gt
 8004a2c:	2400      	movgt	r4, #0
 8004a2e:	f1a3 0302 	sub.w	r3, r3, #2
 8004a32:	bfd8      	it	le
 8004a34:	2401      	movle	r4, #1
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d864      	bhi.n	8004b04 <_dtoa_r+0x29c>
 8004a3a:	e8df f003 	tbb	[pc, r3]
 8004a3e:	382b      	.short	0x382b
 8004a40:	5636      	.short	0x5636
 8004a42:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004a46:	441e      	add	r6, r3
 8004a48:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	bfc1      	itttt	gt
 8004a50:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a54:	fa08 f803 	lslgt.w	r8, r8, r3
 8004a58:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a5c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004a60:	bfd6      	itet	le
 8004a62:	f1c3 0320 	rsble	r3, r3, #32
 8004a66:	ea48 0003 	orrgt.w	r0, r8, r3
 8004a6a:	fa04 f003 	lslle.w	r0, r4, r3
 8004a6e:	f7fb fcb9 	bl	80003e4 <__aeabi_ui2d>
 8004a72:	2201      	movs	r2, #1
 8004a74:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a78:	3e01      	subs	r6, #1
 8004a7a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004a7c:	e775      	b.n	800496a <_dtoa_r+0x102>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e7b6      	b.n	80049f0 <_dtoa_r+0x188>
 8004a82:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004a84:	e7b5      	b.n	80049f2 <_dtoa_r+0x18a>
 8004a86:	427b      	negs	r3, r7
 8004a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	eba8 0807 	sub.w	r8, r8, r7
 8004a90:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a92:	e7c2      	b.n	8004a1a <_dtoa_r+0x1b2>
 8004a94:	2300      	movs	r3, #0
 8004a96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	dc35      	bgt.n	8004b0a <_dtoa_r+0x2a2>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004aa6:	9221      	str	r2, [sp, #132]	@ 0x84
 8004aa8:	e00b      	b.n	8004ac2 <_dtoa_r+0x25a>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e7f3      	b.n	8004a96 <_dtoa_r+0x22e>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ab2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	9308      	str	r3, [sp, #32]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	9307      	str	r3, [sp, #28]
 8004abe:	bfb8      	it	lt
 8004ac0:	2301      	movlt	r3, #1
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004aca:	f102 0514 	add.w	r5, r2, #20
 8004ace:	429d      	cmp	r5, r3
 8004ad0:	d91f      	bls.n	8004b12 <_dtoa_r+0x2aa>
 8004ad2:	6041      	str	r1, [r0, #4]
 8004ad4:	4658      	mov	r0, fp
 8004ad6:	f000 fd8d 	bl	80055f4 <_Balloc>
 8004ada:	4682      	mov	sl, r0
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d139      	bne.n	8004b54 <_dtoa_r+0x2ec>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b50 <_dtoa_r+0x2e8>)
 8004ae8:	e6d2      	b.n	8004890 <_dtoa_r+0x28>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e7e0      	b.n	8004ab0 <_dtoa_r+0x248>
 8004aee:	2401      	movs	r4, #1
 8004af0:	2300      	movs	r3, #0
 8004af2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004af4:	9320      	str	r3, [sp, #128]	@ 0x80
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	2200      	movs	r2, #0
 8004afc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b00:	2312      	movs	r3, #18
 8004b02:	e7d0      	b.n	8004aa6 <_dtoa_r+0x23e>
 8004b04:	2301      	movs	r3, #1
 8004b06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b08:	e7f5      	b.n	8004af6 <_dtoa_r+0x28e>
 8004b0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b10:	e7d7      	b.n	8004ac2 <_dtoa_r+0x25a>
 8004b12:	3101      	adds	r1, #1
 8004b14:	0052      	lsls	r2, r2, #1
 8004b16:	e7d8      	b.n	8004aca <_dtoa_r+0x262>
 8004b18:	636f4361 	.word	0x636f4361
 8004b1c:	3fd287a7 	.word	0x3fd287a7
 8004b20:	8b60c8b3 	.word	0x8b60c8b3
 8004b24:	3fc68a28 	.word	0x3fc68a28
 8004b28:	509f79fb 	.word	0x509f79fb
 8004b2c:	3fd34413 	.word	0x3fd34413
 8004b30:	08008d11 	.word	0x08008d11
 8004b34:	08008d28 	.word	0x08008d28
 8004b38:	7ff00000 	.word	0x7ff00000
 8004b3c:	08008d0d 	.word	0x08008d0d
 8004b40:	08008cdc 	.word	0x08008cdc
 8004b44:	08008cdb 	.word	0x08008cdb
 8004b48:	3ff80000 	.word	0x3ff80000
 8004b4c:	08008e20 	.word	0x08008e20
 8004b50:	08008d80 	.word	0x08008d80
 8004b54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b58:	6018      	str	r0, [r3, #0]
 8004b5a:	9b07      	ldr	r3, [sp, #28]
 8004b5c:	2b0e      	cmp	r3, #14
 8004b5e:	f200 80a4 	bhi.w	8004caa <_dtoa_r+0x442>
 8004b62:	2c00      	cmp	r4, #0
 8004b64:	f000 80a1 	beq.w	8004caa <_dtoa_r+0x442>
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	dd33      	ble.n	8004bd4 <_dtoa_r+0x36c>
 8004b6c:	4b86      	ldr	r3, [pc, #536]	@ (8004d88 <_dtoa_r+0x520>)
 8004b6e:	f007 020f 	and.w	r2, r7, #15
 8004b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b76:	05f8      	lsls	r0, r7, #23
 8004b78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b7c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b84:	d516      	bpl.n	8004bb4 <_dtoa_r+0x34c>
 8004b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b8a:	4b80      	ldr	r3, [pc, #512]	@ (8004d8c <_dtoa_r+0x524>)
 8004b8c:	2603      	movs	r6, #3
 8004b8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b92:	f7fb fdcb 	bl	800072c <__aeabi_ddiv>
 8004b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b9a:	f004 040f 	and.w	r4, r4, #15
 8004b9e:	4d7b      	ldr	r5, [pc, #492]	@ (8004d8c <_dtoa_r+0x524>)
 8004ba0:	b954      	cbnz	r4, 8004bb8 <_dtoa_r+0x350>
 8004ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004baa:	f7fb fdbf 	bl	800072c <__aeabi_ddiv>
 8004bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bb2:	e028      	b.n	8004c06 <_dtoa_r+0x39e>
 8004bb4:	2602      	movs	r6, #2
 8004bb6:	e7f2      	b.n	8004b9e <_dtoa_r+0x336>
 8004bb8:	07e1      	lsls	r1, r4, #31
 8004bba:	d508      	bpl.n	8004bce <_dtoa_r+0x366>
 8004bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bc4:	f7fb fc88 	bl	80004d8 <__aeabi_dmul>
 8004bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bcc:	3601      	adds	r6, #1
 8004bce:	1064      	asrs	r4, r4, #1
 8004bd0:	3508      	adds	r5, #8
 8004bd2:	e7e5      	b.n	8004ba0 <_dtoa_r+0x338>
 8004bd4:	f000 80d2 	beq.w	8004d7c <_dtoa_r+0x514>
 8004bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bdc:	427c      	negs	r4, r7
 8004bde:	4b6a      	ldr	r3, [pc, #424]	@ (8004d88 <_dtoa_r+0x520>)
 8004be0:	f004 020f 	and.w	r2, r4, #15
 8004be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7fb fc74 	bl	80004d8 <__aeabi_dmul>
 8004bf0:	2602      	movs	r6, #2
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bf8:	4d64      	ldr	r5, [pc, #400]	@ (8004d8c <_dtoa_r+0x524>)
 8004bfa:	1124      	asrs	r4, r4, #4
 8004bfc:	2c00      	cmp	r4, #0
 8004bfe:	f040 80b2 	bne.w	8004d66 <_dtoa_r+0x4fe>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1d3      	bne.n	8004bae <_dtoa_r+0x346>
 8004c06:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80b7 	beq.w	8004d80 <_dtoa_r+0x518>
 8004c12:	2200      	movs	r2, #0
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	4b5d      	ldr	r3, [pc, #372]	@ (8004d90 <_dtoa_r+0x528>)
 8004c1a:	f7fb fecf 	bl	80009bc <__aeabi_dcmplt>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	f000 80ae 	beq.w	8004d80 <_dtoa_r+0x518>
 8004c24:	9b07      	ldr	r3, [sp, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80aa 	beq.w	8004d80 <_dtoa_r+0x518>
 8004c2c:	9b08      	ldr	r3, [sp, #32]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	dd37      	ble.n	8004ca2 <_dtoa_r+0x43a>
 8004c32:	1e7b      	subs	r3, r7, #1
 8004c34:	4620      	mov	r0, r4
 8004c36:	9304      	str	r3, [sp, #16]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4b55      	ldr	r3, [pc, #340]	@ (8004d94 <_dtoa_r+0x52c>)
 8004c3e:	f7fb fc4b 	bl	80004d8 <__aeabi_dmul>
 8004c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c46:	9c08      	ldr	r4, [sp, #32]
 8004c48:	3601      	adds	r6, #1
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f7fb fbda 	bl	8000404 <__aeabi_i2d>
 8004c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c54:	f7fb fc40 	bl	80004d8 <__aeabi_dmul>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <_dtoa_r+0x530>)
 8004c5c:	f7fb fa86 	bl	800016c <__adddf3>
 8004c60:	4605      	mov	r5, r0
 8004c62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004c66:	2c00      	cmp	r4, #0
 8004c68:	f040 809a 	bne.w	8004da0 <_dtoa_r+0x538>
 8004c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c70:	2200      	movs	r2, #0
 8004c72:	4b4a      	ldr	r3, [pc, #296]	@ (8004d9c <_dtoa_r+0x534>)
 8004c74:	f7fb fa78 	bl	8000168 <__aeabi_dsub>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c80:	462a      	mov	r2, r5
 8004c82:	4633      	mov	r3, r6
 8004c84:	f7fb feb8 	bl	80009f8 <__aeabi_dcmpgt>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	f040 828e 	bne.w	80051aa <_dtoa_r+0x942>
 8004c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c92:	462a      	mov	r2, r5
 8004c94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c98:	f7fb fe90 	bl	80009bc <__aeabi_dcmplt>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f040 8127 	bne.w	8004ef0 <_dtoa_r+0x688>
 8004ca2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004ca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004caa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f2c0 8163 	blt.w	8004f78 <_dtoa_r+0x710>
 8004cb2:	2f0e      	cmp	r7, #14
 8004cb4:	f300 8160 	bgt.w	8004f78 <_dtoa_r+0x710>
 8004cb8:	4b33      	ldr	r3, [pc, #204]	@ (8004d88 <_dtoa_r+0x520>)
 8004cba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004cc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da03      	bge.n	8004cd4 <_dtoa_r+0x46c>
 8004ccc:	9b07      	ldr	r3, [sp, #28]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f340 8100 	ble.w	8004ed4 <_dtoa_r+0x66c>
 8004cd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004cd8:	4656      	mov	r6, sl
 8004cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fd23 	bl	800072c <__aeabi_ddiv>
 8004ce6:	f7fb fea7 	bl	8000a38 <__aeabi_d2iz>
 8004cea:	4680      	mov	r8, r0
 8004cec:	f7fb fb8a 	bl	8000404 <__aeabi_i2d>
 8004cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cf4:	f7fb fbf0 	bl	80004d8 <__aeabi_dmul>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f7fb fa32 	bl	8000168 <__aeabi_dsub>
 8004d04:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004d08:	9d07      	ldr	r5, [sp, #28]
 8004d0a:	f806 4b01 	strb.w	r4, [r6], #1
 8004d0e:	eba6 040a 	sub.w	r4, r6, sl
 8004d12:	42a5      	cmp	r5, r4
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	f040 8116 	bne.w	8004f48 <_dtoa_r+0x6e0>
 8004d1c:	f7fb fa26 	bl	800016c <__adddf3>
 8004d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d24:	4604      	mov	r4, r0
 8004d26:	460d      	mov	r5, r1
 8004d28:	f7fb fe66 	bl	80009f8 <__aeabi_dcmpgt>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f040 80f8 	bne.w	8004f22 <_dtoa_r+0x6ba>
 8004d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d36:	4620      	mov	r0, r4
 8004d38:	4629      	mov	r1, r5
 8004d3a:	f7fb fe35 	bl	80009a8 <__aeabi_dcmpeq>
 8004d3e:	b118      	cbz	r0, 8004d48 <_dtoa_r+0x4e0>
 8004d40:	f018 0f01 	tst.w	r8, #1
 8004d44:	f040 80ed 	bne.w	8004f22 <_dtoa_r+0x6ba>
 8004d48:	4649      	mov	r1, r9
 8004d4a:	4658      	mov	r0, fp
 8004d4c:	f000 fc92 	bl	8005674 <_Bfree>
 8004d50:	2300      	movs	r3, #0
 8004d52:	7033      	strb	r3, [r6, #0]
 8004d54:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004d56:	3701      	adds	r7, #1
 8004d58:	601f      	str	r7, [r3, #0]
 8004d5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8320 	beq.w	80053a2 <_dtoa_r+0xb3a>
 8004d62:	601e      	str	r6, [r3, #0]
 8004d64:	e31d      	b.n	80053a2 <_dtoa_r+0xb3a>
 8004d66:	07e2      	lsls	r2, r4, #31
 8004d68:	d505      	bpl.n	8004d76 <_dtoa_r+0x50e>
 8004d6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d6e:	f7fb fbb3 	bl	80004d8 <__aeabi_dmul>
 8004d72:	2301      	movs	r3, #1
 8004d74:	3601      	adds	r6, #1
 8004d76:	1064      	asrs	r4, r4, #1
 8004d78:	3508      	adds	r5, #8
 8004d7a:	e73f      	b.n	8004bfc <_dtoa_r+0x394>
 8004d7c:	2602      	movs	r6, #2
 8004d7e:	e742      	b.n	8004c06 <_dtoa_r+0x39e>
 8004d80:	9c07      	ldr	r4, [sp, #28]
 8004d82:	9704      	str	r7, [sp, #16]
 8004d84:	e761      	b.n	8004c4a <_dtoa_r+0x3e2>
 8004d86:	bf00      	nop
 8004d88:	08008e20 	.word	0x08008e20
 8004d8c:	08008df8 	.word	0x08008df8
 8004d90:	3ff00000 	.word	0x3ff00000
 8004d94:	40240000 	.word	0x40240000
 8004d98:	401c0000 	.word	0x401c0000
 8004d9c:	40140000 	.word	0x40140000
 8004da0:	4b70      	ldr	r3, [pc, #448]	@ (8004f64 <_dtoa_r+0x6fc>)
 8004da2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004da4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004da8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004dac:	4454      	add	r4, sl
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d045      	beq.n	8004e3e <_dtoa_r+0x5d6>
 8004db2:	2000      	movs	r0, #0
 8004db4:	496c      	ldr	r1, [pc, #432]	@ (8004f68 <_dtoa_r+0x700>)
 8004db6:	f7fb fcb9 	bl	800072c <__aeabi_ddiv>
 8004dba:	4633      	mov	r3, r6
 8004dbc:	462a      	mov	r2, r5
 8004dbe:	f7fb f9d3 	bl	8000168 <__aeabi_dsub>
 8004dc2:	4656      	mov	r6, sl
 8004dc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dcc:	f7fb fe34 	bl	8000a38 <__aeabi_d2iz>
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	f7fb fb17 	bl	8000404 <__aeabi_i2d>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dde:	f7fb f9c3 	bl	8000168 <__aeabi_dsub>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	3530      	adds	r5, #48	@ 0x30
 8004de8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004df0:	f806 5b01 	strb.w	r5, [r6], #1
 8004df4:	f7fb fde2 	bl	80009bc <__aeabi_dcmplt>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d163      	bne.n	8004ec4 <_dtoa_r+0x65c>
 8004dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e00:	2000      	movs	r0, #0
 8004e02:	495a      	ldr	r1, [pc, #360]	@ (8004f6c <_dtoa_r+0x704>)
 8004e04:	f7fb f9b0 	bl	8000168 <__aeabi_dsub>
 8004e08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e0c:	f7fb fdd6 	bl	80009bc <__aeabi_dcmplt>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	f040 8087 	bne.w	8004f24 <_dtoa_r+0x6bc>
 8004e16:	42a6      	cmp	r6, r4
 8004e18:	f43f af43 	beq.w	8004ca2 <_dtoa_r+0x43a>
 8004e1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e20:	2200      	movs	r2, #0
 8004e22:	4b53      	ldr	r3, [pc, #332]	@ (8004f70 <_dtoa_r+0x708>)
 8004e24:	f7fb fb58 	bl	80004d8 <__aeabi_dmul>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e32:	4b4f      	ldr	r3, [pc, #316]	@ (8004f70 <_dtoa_r+0x708>)
 8004e34:	f7fb fb50 	bl	80004d8 <__aeabi_dmul>
 8004e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e3c:	e7c4      	b.n	8004dc8 <_dtoa_r+0x560>
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7fb fb49 	bl	80004d8 <__aeabi_dmul>
 8004e46:	4656      	mov	r6, sl
 8004e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e4c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e52:	f7fb fdf1 	bl	8000a38 <__aeabi_d2iz>
 8004e56:	4605      	mov	r5, r0
 8004e58:	f7fb fad4 	bl	8000404 <__aeabi_i2d>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e64:	f7fb f980 	bl	8000168 <__aeabi_dsub>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	3530      	adds	r5, #48	@ 0x30
 8004e6e:	f806 5b01 	strb.w	r5, [r6], #1
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	d124      	bne.n	8004ec8 <_dtoa_r+0x660>
 8004e7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e82:	4b39      	ldr	r3, [pc, #228]	@ (8004f68 <_dtoa_r+0x700>)
 8004e84:	f7fb f972 	bl	800016c <__adddf3>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e90:	f7fb fdb2 	bl	80009f8 <__aeabi_dcmpgt>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	d145      	bne.n	8004f24 <_dtoa_r+0x6bc>
 8004e98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	4932      	ldr	r1, [pc, #200]	@ (8004f68 <_dtoa_r+0x700>)
 8004ea0:	f7fb f962 	bl	8000168 <__aeabi_dsub>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eac:	f7fb fd86 	bl	80009bc <__aeabi_dcmplt>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	f43f aef6 	beq.w	8004ca2 <_dtoa_r+0x43a>
 8004eb6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004eb8:	1e73      	subs	r3, r6, #1
 8004eba:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004ebc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ec0:	2b30      	cmp	r3, #48	@ 0x30
 8004ec2:	d0f8      	beq.n	8004eb6 <_dtoa_r+0x64e>
 8004ec4:	9f04      	ldr	r7, [sp, #16]
 8004ec6:	e73f      	b.n	8004d48 <_dtoa_r+0x4e0>
 8004ec8:	4b29      	ldr	r3, [pc, #164]	@ (8004f70 <_dtoa_r+0x708>)
 8004eca:	f7fb fb05 	bl	80004d8 <__aeabi_dmul>
 8004ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed2:	e7bc      	b.n	8004e4e <_dtoa_r+0x5e6>
 8004ed4:	d10c      	bne.n	8004ef0 <_dtoa_r+0x688>
 8004ed6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eda:	2200      	movs	r2, #0
 8004edc:	4b25      	ldr	r3, [pc, #148]	@ (8004f74 <_dtoa_r+0x70c>)
 8004ede:	f7fb fafb 	bl	80004d8 <__aeabi_dmul>
 8004ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ee6:	f7fb fd7d 	bl	80009e4 <__aeabi_dcmpge>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	f000 815b 	beq.w	80051a6 <_dtoa_r+0x93e>
 8004ef0:	2400      	movs	r4, #0
 8004ef2:	4625      	mov	r5, r4
 8004ef4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ef6:	4656      	mov	r6, sl
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	9304      	str	r3, [sp, #16]
 8004efc:	2700      	movs	r7, #0
 8004efe:	4621      	mov	r1, r4
 8004f00:	4658      	mov	r0, fp
 8004f02:	f000 fbb7 	bl	8005674 <_Bfree>
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	d0dc      	beq.n	8004ec4 <_dtoa_r+0x65c>
 8004f0a:	b12f      	cbz	r7, 8004f18 <_dtoa_r+0x6b0>
 8004f0c:	42af      	cmp	r7, r5
 8004f0e:	d003      	beq.n	8004f18 <_dtoa_r+0x6b0>
 8004f10:	4639      	mov	r1, r7
 8004f12:	4658      	mov	r0, fp
 8004f14:	f000 fbae 	bl	8005674 <_Bfree>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4658      	mov	r0, fp
 8004f1c:	f000 fbaa 	bl	8005674 <_Bfree>
 8004f20:	e7d0      	b.n	8004ec4 <_dtoa_r+0x65c>
 8004f22:	9704      	str	r7, [sp, #16]
 8004f24:	4633      	mov	r3, r6
 8004f26:	461e      	mov	r6, r3
 8004f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f2c:	2a39      	cmp	r2, #57	@ 0x39
 8004f2e:	d107      	bne.n	8004f40 <_dtoa_r+0x6d8>
 8004f30:	459a      	cmp	sl, r3
 8004f32:	d1f8      	bne.n	8004f26 <_dtoa_r+0x6be>
 8004f34:	9a04      	ldr	r2, [sp, #16]
 8004f36:	3201      	adds	r2, #1
 8004f38:	9204      	str	r2, [sp, #16]
 8004f3a:	2230      	movs	r2, #48	@ 0x30
 8004f3c:	f88a 2000 	strb.w	r2, [sl]
 8004f40:	781a      	ldrb	r2, [r3, #0]
 8004f42:	3201      	adds	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e7bd      	b.n	8004ec4 <_dtoa_r+0x65c>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <_dtoa_r+0x708>)
 8004f4c:	f7fb fac4 	bl	80004d8 <__aeabi_dmul>
 8004f50:	2200      	movs	r2, #0
 8004f52:	2300      	movs	r3, #0
 8004f54:	4604      	mov	r4, r0
 8004f56:	460d      	mov	r5, r1
 8004f58:	f7fb fd26 	bl	80009a8 <__aeabi_dcmpeq>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f43f aebc 	beq.w	8004cda <_dtoa_r+0x472>
 8004f62:	e6f1      	b.n	8004d48 <_dtoa_r+0x4e0>
 8004f64:	08008e20 	.word	0x08008e20
 8004f68:	3fe00000 	.word	0x3fe00000
 8004f6c:	3ff00000 	.word	0x3ff00000
 8004f70:	40240000 	.word	0x40240000
 8004f74:	40140000 	.word	0x40140000
 8004f78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	f000 80db 	beq.w	8005136 <_dtoa_r+0x8ce>
 8004f80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f82:	2a01      	cmp	r2, #1
 8004f84:	f300 80bf 	bgt.w	8005106 <_dtoa_r+0x89e>
 8004f88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	f000 80b7 	beq.w	80050fe <_dtoa_r+0x896>
 8004f90:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f94:	4646      	mov	r6, r8
 8004f96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	441a      	add	r2, r3
 8004f9e:	4658      	mov	r0, fp
 8004fa0:	4498      	add	r8, r3
 8004fa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fa4:	f000 fc64 	bl	8005870 <__i2b>
 8004fa8:	4605      	mov	r5, r0
 8004faa:	b15e      	cbz	r6, 8004fc4 <_dtoa_r+0x75c>
 8004fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dd08      	ble.n	8004fc4 <_dtoa_r+0x75c>
 8004fb2:	42b3      	cmp	r3, r6
 8004fb4:	bfa8      	it	ge
 8004fb6:	4633      	movge	r3, r6
 8004fb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fba:	eba8 0803 	sub.w	r8, r8, r3
 8004fbe:	1af6      	subs	r6, r6, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fc6:	b1f3      	cbz	r3, 8005006 <_dtoa_r+0x79e>
 8004fc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80b7 	beq.w	800513e <_dtoa_r+0x8d6>
 8004fd0:	b18c      	cbz	r4, 8004ff6 <_dtoa_r+0x78e>
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	4658      	mov	r0, fp
 8004fd8:	f000 fd08 	bl	80059ec <__pow5mult>
 8004fdc:	464a      	mov	r2, r9
 8004fde:	4601      	mov	r1, r0
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	4658      	mov	r0, fp
 8004fe4:	f000 fc5a 	bl	800589c <__multiply>
 8004fe8:	4649      	mov	r1, r9
 8004fea:	9004      	str	r0, [sp, #16]
 8004fec:	4658      	mov	r0, fp
 8004fee:	f000 fb41 	bl	8005674 <_Bfree>
 8004ff2:	9b04      	ldr	r3, [sp, #16]
 8004ff4:	4699      	mov	r9, r3
 8004ff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ff8:	1b1a      	subs	r2, r3, r4
 8004ffa:	d004      	beq.n	8005006 <_dtoa_r+0x79e>
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	4658      	mov	r0, fp
 8005000:	f000 fcf4 	bl	80059ec <__pow5mult>
 8005004:	4681      	mov	r9, r0
 8005006:	2101      	movs	r1, #1
 8005008:	4658      	mov	r0, fp
 800500a:	f000 fc31 	bl	8005870 <__i2b>
 800500e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005010:	4604      	mov	r4, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 81c9 	beq.w	80053aa <_dtoa_r+0xb42>
 8005018:	461a      	mov	r2, r3
 800501a:	4601      	mov	r1, r0
 800501c:	4658      	mov	r0, fp
 800501e:	f000 fce5 	bl	80059ec <__pow5mult>
 8005022:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005024:	4604      	mov	r4, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	f300 808f 	bgt.w	800514a <_dtoa_r+0x8e2>
 800502c:	9b02      	ldr	r3, [sp, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 8087 	bne.w	8005142 <_dtoa_r+0x8da>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800503a:	2b00      	cmp	r3, #0
 800503c:	f040 8083 	bne.w	8005146 <_dtoa_r+0x8de>
 8005040:	9b03      	ldr	r3, [sp, #12]
 8005042:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005046:	0d1b      	lsrs	r3, r3, #20
 8005048:	051b      	lsls	r3, r3, #20
 800504a:	b12b      	cbz	r3, 8005058 <_dtoa_r+0x7f0>
 800504c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800504e:	f108 0801 	add.w	r8, r8, #1
 8005052:	3301      	adds	r3, #1
 8005054:	9309      	str	r3, [sp, #36]	@ 0x24
 8005056:	2301      	movs	r3, #1
 8005058:	930a      	str	r3, [sp, #40]	@ 0x28
 800505a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 81aa 	beq.w	80053b6 <_dtoa_r+0xb4e>
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005068:	6918      	ldr	r0, [r3, #16]
 800506a:	f000 fbb5 	bl	80057d8 <__hi0bits>
 800506e:	f1c0 0020 	rsb	r0, r0, #32
 8005072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005074:	4418      	add	r0, r3
 8005076:	f010 001f 	ands.w	r0, r0, #31
 800507a:	d071      	beq.n	8005160 <_dtoa_r+0x8f8>
 800507c:	f1c0 0320 	rsb	r3, r0, #32
 8005080:	2b04      	cmp	r3, #4
 8005082:	dd65      	ble.n	8005150 <_dtoa_r+0x8e8>
 8005084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005086:	f1c0 001c 	rsb	r0, r0, #28
 800508a:	4403      	add	r3, r0
 800508c:	4480      	add	r8, r0
 800508e:	4406      	add	r6, r0
 8005090:	9309      	str	r3, [sp, #36]	@ 0x24
 8005092:	f1b8 0f00 	cmp.w	r8, #0
 8005096:	dd05      	ble.n	80050a4 <_dtoa_r+0x83c>
 8005098:	4649      	mov	r1, r9
 800509a:	4642      	mov	r2, r8
 800509c:	4658      	mov	r0, fp
 800509e:	f000 fcff 	bl	8005aa0 <__lshift>
 80050a2:	4681      	mov	r9, r0
 80050a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dd05      	ble.n	80050b6 <_dtoa_r+0x84e>
 80050aa:	4621      	mov	r1, r4
 80050ac:	461a      	mov	r2, r3
 80050ae:	4658      	mov	r0, fp
 80050b0:	f000 fcf6 	bl	8005aa0 <__lshift>
 80050b4:	4604      	mov	r4, r0
 80050b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d053      	beq.n	8005164 <_dtoa_r+0x8fc>
 80050bc:	4621      	mov	r1, r4
 80050be:	4648      	mov	r0, r9
 80050c0:	f000 fd5a 	bl	8005b78 <__mcmp>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	da4d      	bge.n	8005164 <_dtoa_r+0x8fc>
 80050c8:	1e7b      	subs	r3, r7, #1
 80050ca:	4649      	mov	r1, r9
 80050cc:	9304      	str	r3, [sp, #16]
 80050ce:	220a      	movs	r2, #10
 80050d0:	2300      	movs	r3, #0
 80050d2:	4658      	mov	r0, fp
 80050d4:	f000 faf0 	bl	80056b8 <__multadd>
 80050d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050da:	4681      	mov	r9, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 816c 	beq.w	80053ba <_dtoa_r+0xb52>
 80050e2:	2300      	movs	r3, #0
 80050e4:	4629      	mov	r1, r5
 80050e6:	220a      	movs	r2, #10
 80050e8:	4658      	mov	r0, fp
 80050ea:	f000 fae5 	bl	80056b8 <__multadd>
 80050ee:	9b08      	ldr	r3, [sp, #32]
 80050f0:	4605      	mov	r5, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	dc61      	bgt.n	80051ba <_dtoa_r+0x952>
 80050f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	dc3b      	bgt.n	8005174 <_dtoa_r+0x90c>
 80050fc:	e05d      	b.n	80051ba <_dtoa_r+0x952>
 80050fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005100:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005104:	e746      	b.n	8004f94 <_dtoa_r+0x72c>
 8005106:	9b07      	ldr	r3, [sp, #28]
 8005108:	1e5c      	subs	r4, r3, #1
 800510a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800510c:	42a3      	cmp	r3, r4
 800510e:	bfbf      	itttt	lt
 8005110:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005112:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005114:	1ae3      	sublt	r3, r4, r3
 8005116:	18d2      	addlt	r2, r2, r3
 8005118:	bfa8      	it	ge
 800511a:	1b1c      	subge	r4, r3, r4
 800511c:	9b07      	ldr	r3, [sp, #28]
 800511e:	bfbe      	ittt	lt
 8005120:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005122:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005124:	2400      	movlt	r4, #0
 8005126:	2b00      	cmp	r3, #0
 8005128:	bfb5      	itete	lt
 800512a:	eba8 0603 	sublt.w	r6, r8, r3
 800512e:	4646      	movge	r6, r8
 8005130:	2300      	movlt	r3, #0
 8005132:	9b07      	ldrge	r3, [sp, #28]
 8005134:	e730      	b.n	8004f98 <_dtoa_r+0x730>
 8005136:	4646      	mov	r6, r8
 8005138:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800513a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800513c:	e735      	b.n	8004faa <_dtoa_r+0x742>
 800513e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005140:	e75c      	b.n	8004ffc <_dtoa_r+0x794>
 8005142:	2300      	movs	r3, #0
 8005144:	e788      	b.n	8005058 <_dtoa_r+0x7f0>
 8005146:	9b02      	ldr	r3, [sp, #8]
 8005148:	e786      	b.n	8005058 <_dtoa_r+0x7f0>
 800514a:	2300      	movs	r3, #0
 800514c:	930a      	str	r3, [sp, #40]	@ 0x28
 800514e:	e788      	b.n	8005062 <_dtoa_r+0x7fa>
 8005150:	d09f      	beq.n	8005092 <_dtoa_r+0x82a>
 8005152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005154:	331c      	adds	r3, #28
 8005156:	441a      	add	r2, r3
 8005158:	4498      	add	r8, r3
 800515a:	441e      	add	r6, r3
 800515c:	9209      	str	r2, [sp, #36]	@ 0x24
 800515e:	e798      	b.n	8005092 <_dtoa_r+0x82a>
 8005160:	4603      	mov	r3, r0
 8005162:	e7f6      	b.n	8005152 <_dtoa_r+0x8ea>
 8005164:	9b07      	ldr	r3, [sp, #28]
 8005166:	9704      	str	r7, [sp, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	dc20      	bgt.n	80051ae <_dtoa_r+0x946>
 800516c:	9308      	str	r3, [sp, #32]
 800516e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005170:	2b02      	cmp	r3, #2
 8005172:	dd1e      	ble.n	80051b2 <_dtoa_r+0x94a>
 8005174:	9b08      	ldr	r3, [sp, #32]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f47f aebc 	bne.w	8004ef4 <_dtoa_r+0x68c>
 800517c:	4621      	mov	r1, r4
 800517e:	2205      	movs	r2, #5
 8005180:	4658      	mov	r0, fp
 8005182:	f000 fa99 	bl	80056b8 <__multadd>
 8005186:	4601      	mov	r1, r0
 8005188:	4604      	mov	r4, r0
 800518a:	4648      	mov	r0, r9
 800518c:	f000 fcf4 	bl	8005b78 <__mcmp>
 8005190:	2800      	cmp	r0, #0
 8005192:	f77f aeaf 	ble.w	8004ef4 <_dtoa_r+0x68c>
 8005196:	2331      	movs	r3, #49	@ 0x31
 8005198:	4656      	mov	r6, sl
 800519a:	f806 3b01 	strb.w	r3, [r6], #1
 800519e:	9b04      	ldr	r3, [sp, #16]
 80051a0:	3301      	adds	r3, #1
 80051a2:	9304      	str	r3, [sp, #16]
 80051a4:	e6aa      	b.n	8004efc <_dtoa_r+0x694>
 80051a6:	9c07      	ldr	r4, [sp, #28]
 80051a8:	9704      	str	r7, [sp, #16]
 80051aa:	4625      	mov	r5, r4
 80051ac:	e7f3      	b.n	8005196 <_dtoa_r+0x92e>
 80051ae:	9b07      	ldr	r3, [sp, #28]
 80051b0:	9308      	str	r3, [sp, #32]
 80051b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8104 	beq.w	80053c2 <_dtoa_r+0xb5a>
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	dd05      	ble.n	80051ca <_dtoa_r+0x962>
 80051be:	4629      	mov	r1, r5
 80051c0:	4632      	mov	r2, r6
 80051c2:	4658      	mov	r0, fp
 80051c4:	f000 fc6c 	bl	8005aa0 <__lshift>
 80051c8:	4605      	mov	r5, r0
 80051ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d05a      	beq.n	8005286 <_dtoa_r+0xa1e>
 80051d0:	4658      	mov	r0, fp
 80051d2:	6869      	ldr	r1, [r5, #4]
 80051d4:	f000 fa0e 	bl	80055f4 <_Balloc>
 80051d8:	4606      	mov	r6, r0
 80051da:	b928      	cbnz	r0, 80051e8 <_dtoa_r+0x980>
 80051dc:	4602      	mov	r2, r0
 80051de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80051e2:	4b83      	ldr	r3, [pc, #524]	@ (80053f0 <_dtoa_r+0xb88>)
 80051e4:	f7ff bb54 	b.w	8004890 <_dtoa_r+0x28>
 80051e8:	692a      	ldr	r2, [r5, #16]
 80051ea:	f105 010c 	add.w	r1, r5, #12
 80051ee:	3202      	adds	r2, #2
 80051f0:	0092      	lsls	r2, r2, #2
 80051f2:	300c      	adds	r0, #12
 80051f4:	f001 fee2 	bl	8006fbc <memcpy>
 80051f8:	2201      	movs	r2, #1
 80051fa:	4631      	mov	r1, r6
 80051fc:	4658      	mov	r0, fp
 80051fe:	f000 fc4f 	bl	8005aa0 <__lshift>
 8005202:	462f      	mov	r7, r5
 8005204:	4605      	mov	r5, r0
 8005206:	f10a 0301 	add.w	r3, sl, #1
 800520a:	9307      	str	r3, [sp, #28]
 800520c:	9b08      	ldr	r3, [sp, #32]
 800520e:	4453      	add	r3, sl
 8005210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005212:	9b02      	ldr	r3, [sp, #8]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	930a      	str	r3, [sp, #40]	@ 0x28
 800521a:	9b07      	ldr	r3, [sp, #28]
 800521c:	4621      	mov	r1, r4
 800521e:	3b01      	subs	r3, #1
 8005220:	4648      	mov	r0, r9
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	f7ff fa98 	bl	8004758 <quorem>
 8005228:	4639      	mov	r1, r7
 800522a:	9008      	str	r0, [sp, #32]
 800522c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005230:	4648      	mov	r0, r9
 8005232:	f000 fca1 	bl	8005b78 <__mcmp>
 8005236:	462a      	mov	r2, r5
 8005238:	9009      	str	r0, [sp, #36]	@ 0x24
 800523a:	4621      	mov	r1, r4
 800523c:	4658      	mov	r0, fp
 800523e:	f000 fcb7 	bl	8005bb0 <__mdiff>
 8005242:	68c2      	ldr	r2, [r0, #12]
 8005244:	4606      	mov	r6, r0
 8005246:	bb02      	cbnz	r2, 800528a <_dtoa_r+0xa22>
 8005248:	4601      	mov	r1, r0
 800524a:	4648      	mov	r0, r9
 800524c:	f000 fc94 	bl	8005b78 <__mcmp>
 8005250:	4602      	mov	r2, r0
 8005252:	4631      	mov	r1, r6
 8005254:	4658      	mov	r0, fp
 8005256:	920c      	str	r2, [sp, #48]	@ 0x30
 8005258:	f000 fa0c 	bl	8005674 <_Bfree>
 800525c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800525e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005260:	9e07      	ldr	r6, [sp, #28]
 8005262:	ea43 0102 	orr.w	r1, r3, r2
 8005266:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005268:	4319      	orrs	r1, r3
 800526a:	d110      	bne.n	800528e <_dtoa_r+0xa26>
 800526c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005270:	d029      	beq.n	80052c6 <_dtoa_r+0xa5e>
 8005272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	dd02      	ble.n	800527e <_dtoa_r+0xa16>
 8005278:	9b08      	ldr	r3, [sp, #32]
 800527a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800527e:	9b02      	ldr	r3, [sp, #8]
 8005280:	f883 8000 	strb.w	r8, [r3]
 8005284:	e63b      	b.n	8004efe <_dtoa_r+0x696>
 8005286:	4628      	mov	r0, r5
 8005288:	e7bb      	b.n	8005202 <_dtoa_r+0x99a>
 800528a:	2201      	movs	r2, #1
 800528c:	e7e1      	b.n	8005252 <_dtoa_r+0x9ea>
 800528e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005290:	2b00      	cmp	r3, #0
 8005292:	db04      	blt.n	800529e <_dtoa_r+0xa36>
 8005294:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005296:	430b      	orrs	r3, r1
 8005298:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800529a:	430b      	orrs	r3, r1
 800529c:	d120      	bne.n	80052e0 <_dtoa_r+0xa78>
 800529e:	2a00      	cmp	r2, #0
 80052a0:	dded      	ble.n	800527e <_dtoa_r+0xa16>
 80052a2:	4649      	mov	r1, r9
 80052a4:	2201      	movs	r2, #1
 80052a6:	4658      	mov	r0, fp
 80052a8:	f000 fbfa 	bl	8005aa0 <__lshift>
 80052ac:	4621      	mov	r1, r4
 80052ae:	4681      	mov	r9, r0
 80052b0:	f000 fc62 	bl	8005b78 <__mcmp>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	dc03      	bgt.n	80052c0 <_dtoa_r+0xa58>
 80052b8:	d1e1      	bne.n	800527e <_dtoa_r+0xa16>
 80052ba:	f018 0f01 	tst.w	r8, #1
 80052be:	d0de      	beq.n	800527e <_dtoa_r+0xa16>
 80052c0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052c4:	d1d8      	bne.n	8005278 <_dtoa_r+0xa10>
 80052c6:	2339      	movs	r3, #57	@ 0x39
 80052c8:	9a02      	ldr	r2, [sp, #8]
 80052ca:	7013      	strb	r3, [r2, #0]
 80052cc:	4633      	mov	r3, r6
 80052ce:	461e      	mov	r6, r3
 80052d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	2a39      	cmp	r2, #57	@ 0x39
 80052d8:	d052      	beq.n	8005380 <_dtoa_r+0xb18>
 80052da:	3201      	adds	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e60e      	b.n	8004efe <_dtoa_r+0x696>
 80052e0:	2a00      	cmp	r2, #0
 80052e2:	dd07      	ble.n	80052f4 <_dtoa_r+0xa8c>
 80052e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052e8:	d0ed      	beq.n	80052c6 <_dtoa_r+0xa5e>
 80052ea:	9a02      	ldr	r2, [sp, #8]
 80052ec:	f108 0301 	add.w	r3, r8, #1
 80052f0:	7013      	strb	r3, [r2, #0]
 80052f2:	e604      	b.n	8004efe <_dtoa_r+0x696>
 80052f4:	9b07      	ldr	r3, [sp, #28]
 80052f6:	9a07      	ldr	r2, [sp, #28]
 80052f8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80052fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052fe:	4293      	cmp	r3, r2
 8005300:	d028      	beq.n	8005354 <_dtoa_r+0xaec>
 8005302:	4649      	mov	r1, r9
 8005304:	2300      	movs	r3, #0
 8005306:	220a      	movs	r2, #10
 8005308:	4658      	mov	r0, fp
 800530a:	f000 f9d5 	bl	80056b8 <__multadd>
 800530e:	42af      	cmp	r7, r5
 8005310:	4681      	mov	r9, r0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	f04f 020a 	mov.w	r2, #10
 800531a:	4639      	mov	r1, r7
 800531c:	4658      	mov	r0, fp
 800531e:	d107      	bne.n	8005330 <_dtoa_r+0xac8>
 8005320:	f000 f9ca 	bl	80056b8 <__multadd>
 8005324:	4607      	mov	r7, r0
 8005326:	4605      	mov	r5, r0
 8005328:	9b07      	ldr	r3, [sp, #28]
 800532a:	3301      	adds	r3, #1
 800532c:	9307      	str	r3, [sp, #28]
 800532e:	e774      	b.n	800521a <_dtoa_r+0x9b2>
 8005330:	f000 f9c2 	bl	80056b8 <__multadd>
 8005334:	4629      	mov	r1, r5
 8005336:	4607      	mov	r7, r0
 8005338:	2300      	movs	r3, #0
 800533a:	220a      	movs	r2, #10
 800533c:	4658      	mov	r0, fp
 800533e:	f000 f9bb 	bl	80056b8 <__multadd>
 8005342:	4605      	mov	r5, r0
 8005344:	e7f0      	b.n	8005328 <_dtoa_r+0xac0>
 8005346:	9b08      	ldr	r3, [sp, #32]
 8005348:	2700      	movs	r7, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfcc      	ite	gt
 800534e:	461e      	movgt	r6, r3
 8005350:	2601      	movle	r6, #1
 8005352:	4456      	add	r6, sl
 8005354:	4649      	mov	r1, r9
 8005356:	2201      	movs	r2, #1
 8005358:	4658      	mov	r0, fp
 800535a:	f000 fba1 	bl	8005aa0 <__lshift>
 800535e:	4621      	mov	r1, r4
 8005360:	4681      	mov	r9, r0
 8005362:	f000 fc09 	bl	8005b78 <__mcmp>
 8005366:	2800      	cmp	r0, #0
 8005368:	dcb0      	bgt.n	80052cc <_dtoa_r+0xa64>
 800536a:	d102      	bne.n	8005372 <_dtoa_r+0xb0a>
 800536c:	f018 0f01 	tst.w	r8, #1
 8005370:	d1ac      	bne.n	80052cc <_dtoa_r+0xa64>
 8005372:	4633      	mov	r3, r6
 8005374:	461e      	mov	r6, r3
 8005376:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800537a:	2a30      	cmp	r2, #48	@ 0x30
 800537c:	d0fa      	beq.n	8005374 <_dtoa_r+0xb0c>
 800537e:	e5be      	b.n	8004efe <_dtoa_r+0x696>
 8005380:	459a      	cmp	sl, r3
 8005382:	d1a4      	bne.n	80052ce <_dtoa_r+0xa66>
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	3301      	adds	r3, #1
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	2331      	movs	r3, #49	@ 0x31
 800538c:	f88a 3000 	strb.w	r3, [sl]
 8005390:	e5b5      	b.n	8004efe <_dtoa_r+0x696>
 8005392:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005394:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80053f4 <_dtoa_r+0xb8c>
 8005398:	b11b      	cbz	r3, 80053a2 <_dtoa_r+0xb3a>
 800539a:	f10a 0308 	add.w	r3, sl, #8
 800539e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	4650      	mov	r0, sl
 80053a4:	b017      	add	sp, #92	@ 0x5c
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f77f ae3d 	ble.w	800502c <_dtoa_r+0x7c4>
 80053b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80053b6:	2001      	movs	r0, #1
 80053b8:	e65b      	b.n	8005072 <_dtoa_r+0x80a>
 80053ba:	9b08      	ldr	r3, [sp, #32]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f77f aed6 	ble.w	800516e <_dtoa_r+0x906>
 80053c2:	4656      	mov	r6, sl
 80053c4:	4621      	mov	r1, r4
 80053c6:	4648      	mov	r0, r9
 80053c8:	f7ff f9c6 	bl	8004758 <quorem>
 80053cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80053d0:	9b08      	ldr	r3, [sp, #32]
 80053d2:	f806 8b01 	strb.w	r8, [r6], #1
 80053d6:	eba6 020a 	sub.w	r2, r6, sl
 80053da:	4293      	cmp	r3, r2
 80053dc:	ddb3      	ble.n	8005346 <_dtoa_r+0xade>
 80053de:	4649      	mov	r1, r9
 80053e0:	2300      	movs	r3, #0
 80053e2:	220a      	movs	r2, #10
 80053e4:	4658      	mov	r0, fp
 80053e6:	f000 f967 	bl	80056b8 <__multadd>
 80053ea:	4681      	mov	r9, r0
 80053ec:	e7ea      	b.n	80053c4 <_dtoa_r+0xb5c>
 80053ee:	bf00      	nop
 80053f0:	08008d80 	.word	0x08008d80
 80053f4:	08008d04 	.word	0x08008d04

080053f8 <_free_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4605      	mov	r5, r0
 80053fc:	2900      	cmp	r1, #0
 80053fe:	d040      	beq.n	8005482 <_free_r+0x8a>
 8005400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005404:	1f0c      	subs	r4, r1, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfb8      	it	lt
 800540a:	18e4      	addlt	r4, r4, r3
 800540c:	f000 f8e6 	bl	80055dc <__malloc_lock>
 8005410:	4a1c      	ldr	r2, [pc, #112]	@ (8005484 <_free_r+0x8c>)
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	b933      	cbnz	r3, 8005424 <_free_r+0x2c>
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	6014      	str	r4, [r2, #0]
 800541a:	4628      	mov	r0, r5
 800541c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005420:	f000 b8e2 	b.w	80055e8 <__malloc_unlock>
 8005424:	42a3      	cmp	r3, r4
 8005426:	d908      	bls.n	800543a <_free_r+0x42>
 8005428:	6820      	ldr	r0, [r4, #0]
 800542a:	1821      	adds	r1, r4, r0
 800542c:	428b      	cmp	r3, r1
 800542e:	bf01      	itttt	eq
 8005430:	6819      	ldreq	r1, [r3, #0]
 8005432:	685b      	ldreq	r3, [r3, #4]
 8005434:	1809      	addeq	r1, r1, r0
 8005436:	6021      	streq	r1, [r4, #0]
 8005438:	e7ed      	b.n	8005416 <_free_r+0x1e>
 800543a:	461a      	mov	r2, r3
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	b10b      	cbz	r3, 8005444 <_free_r+0x4c>
 8005440:	42a3      	cmp	r3, r4
 8005442:	d9fa      	bls.n	800543a <_free_r+0x42>
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	1850      	adds	r0, r2, r1
 8005448:	42a0      	cmp	r0, r4
 800544a:	d10b      	bne.n	8005464 <_free_r+0x6c>
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	4401      	add	r1, r0
 8005450:	1850      	adds	r0, r2, r1
 8005452:	4283      	cmp	r3, r0
 8005454:	6011      	str	r1, [r2, #0]
 8005456:	d1e0      	bne.n	800541a <_free_r+0x22>
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4408      	add	r0, r1
 800545e:	6010      	str	r0, [r2, #0]
 8005460:	6053      	str	r3, [r2, #4]
 8005462:	e7da      	b.n	800541a <_free_r+0x22>
 8005464:	d902      	bls.n	800546c <_free_r+0x74>
 8005466:	230c      	movs	r3, #12
 8005468:	602b      	str	r3, [r5, #0]
 800546a:	e7d6      	b.n	800541a <_free_r+0x22>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	1821      	adds	r1, r4, r0
 8005470:	428b      	cmp	r3, r1
 8005472:	bf01      	itttt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	1809      	addeq	r1, r1, r0
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	6063      	str	r3, [r4, #4]
 800547e:	6054      	str	r4, [r2, #4]
 8005480:	e7cb      	b.n	800541a <_free_r+0x22>
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	2000096c 	.word	0x2000096c

08005488 <malloc>:
 8005488:	4b02      	ldr	r3, [pc, #8]	@ (8005494 <malloc+0xc>)
 800548a:	4601      	mov	r1, r0
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	f000 b825 	b.w	80054dc <_malloc_r>
 8005492:	bf00      	nop
 8005494:	20000020 	.word	0x20000020

08005498 <sbrk_aligned>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4e0f      	ldr	r6, [pc, #60]	@ (80054d8 <sbrk_aligned+0x40>)
 800549c:	460c      	mov	r4, r1
 800549e:	6831      	ldr	r1, [r6, #0]
 80054a0:	4605      	mov	r5, r0
 80054a2:	b911      	cbnz	r1, 80054aa <sbrk_aligned+0x12>
 80054a4:	f001 fd7a 	bl	8006f9c <_sbrk_r>
 80054a8:	6030      	str	r0, [r6, #0]
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f001 fd75 	bl	8006f9c <_sbrk_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	d103      	bne.n	80054be <sbrk_aligned+0x26>
 80054b6:	f04f 34ff 	mov.w	r4, #4294967295
 80054ba:	4620      	mov	r0, r4
 80054bc:	bd70      	pop	{r4, r5, r6, pc}
 80054be:	1cc4      	adds	r4, r0, #3
 80054c0:	f024 0403 	bic.w	r4, r4, #3
 80054c4:	42a0      	cmp	r0, r4
 80054c6:	d0f8      	beq.n	80054ba <sbrk_aligned+0x22>
 80054c8:	1a21      	subs	r1, r4, r0
 80054ca:	4628      	mov	r0, r5
 80054cc:	f001 fd66 	bl	8006f9c <_sbrk_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d1f2      	bne.n	80054ba <sbrk_aligned+0x22>
 80054d4:	e7ef      	b.n	80054b6 <sbrk_aligned+0x1e>
 80054d6:	bf00      	nop
 80054d8:	20000968 	.word	0x20000968

080054dc <_malloc_r>:
 80054dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e0:	1ccd      	adds	r5, r1, #3
 80054e2:	f025 0503 	bic.w	r5, r5, #3
 80054e6:	3508      	adds	r5, #8
 80054e8:	2d0c      	cmp	r5, #12
 80054ea:	bf38      	it	cc
 80054ec:	250c      	movcc	r5, #12
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	4606      	mov	r6, r0
 80054f2:	db01      	blt.n	80054f8 <_malloc_r+0x1c>
 80054f4:	42a9      	cmp	r1, r5
 80054f6:	d904      	bls.n	8005502 <_malloc_r+0x26>
 80054f8:	230c      	movs	r3, #12
 80054fa:	6033      	str	r3, [r6, #0]
 80054fc:	2000      	movs	r0, #0
 80054fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055d8 <_malloc_r+0xfc>
 8005506:	f000 f869 	bl	80055dc <__malloc_lock>
 800550a:	f8d8 3000 	ldr.w	r3, [r8]
 800550e:	461c      	mov	r4, r3
 8005510:	bb44      	cbnz	r4, 8005564 <_malloc_r+0x88>
 8005512:	4629      	mov	r1, r5
 8005514:	4630      	mov	r0, r6
 8005516:	f7ff ffbf 	bl	8005498 <sbrk_aligned>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	4604      	mov	r4, r0
 800551e:	d158      	bne.n	80055d2 <_malloc_r+0xf6>
 8005520:	f8d8 4000 	ldr.w	r4, [r8]
 8005524:	4627      	mov	r7, r4
 8005526:	2f00      	cmp	r7, #0
 8005528:	d143      	bne.n	80055b2 <_malloc_r+0xd6>
 800552a:	2c00      	cmp	r4, #0
 800552c:	d04b      	beq.n	80055c6 <_malloc_r+0xea>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	4639      	mov	r1, r7
 8005532:	4630      	mov	r0, r6
 8005534:	eb04 0903 	add.w	r9, r4, r3
 8005538:	f001 fd30 	bl	8006f9c <_sbrk_r>
 800553c:	4581      	cmp	r9, r0
 800553e:	d142      	bne.n	80055c6 <_malloc_r+0xea>
 8005540:	6821      	ldr	r1, [r4, #0]
 8005542:	4630      	mov	r0, r6
 8005544:	1a6d      	subs	r5, r5, r1
 8005546:	4629      	mov	r1, r5
 8005548:	f7ff ffa6 	bl	8005498 <sbrk_aligned>
 800554c:	3001      	adds	r0, #1
 800554e:	d03a      	beq.n	80055c6 <_malloc_r+0xea>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	442b      	add	r3, r5
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	f8d8 3000 	ldr.w	r3, [r8]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	bb62      	cbnz	r2, 80055b8 <_malloc_r+0xdc>
 800555e:	f8c8 7000 	str.w	r7, [r8]
 8005562:	e00f      	b.n	8005584 <_malloc_r+0xa8>
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	1b52      	subs	r2, r2, r5
 8005568:	d420      	bmi.n	80055ac <_malloc_r+0xd0>
 800556a:	2a0b      	cmp	r2, #11
 800556c:	d917      	bls.n	800559e <_malloc_r+0xc2>
 800556e:	1961      	adds	r1, r4, r5
 8005570:	42a3      	cmp	r3, r4
 8005572:	6025      	str	r5, [r4, #0]
 8005574:	bf18      	it	ne
 8005576:	6059      	strne	r1, [r3, #4]
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	bf08      	it	eq
 800557c:	f8c8 1000 	streq.w	r1, [r8]
 8005580:	5162      	str	r2, [r4, r5]
 8005582:	604b      	str	r3, [r1, #4]
 8005584:	4630      	mov	r0, r6
 8005586:	f000 f82f 	bl	80055e8 <__malloc_unlock>
 800558a:	f104 000b 	add.w	r0, r4, #11
 800558e:	1d23      	adds	r3, r4, #4
 8005590:	f020 0007 	bic.w	r0, r0, #7
 8005594:	1ac2      	subs	r2, r0, r3
 8005596:	bf1c      	itt	ne
 8005598:	1a1b      	subne	r3, r3, r0
 800559a:	50a3      	strne	r3, [r4, r2]
 800559c:	e7af      	b.n	80054fe <_malloc_r+0x22>
 800559e:	6862      	ldr	r2, [r4, #4]
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	bf0c      	ite	eq
 80055a4:	f8c8 2000 	streq.w	r2, [r8]
 80055a8:	605a      	strne	r2, [r3, #4]
 80055aa:	e7eb      	b.n	8005584 <_malloc_r+0xa8>
 80055ac:	4623      	mov	r3, r4
 80055ae:	6864      	ldr	r4, [r4, #4]
 80055b0:	e7ae      	b.n	8005510 <_malloc_r+0x34>
 80055b2:	463c      	mov	r4, r7
 80055b4:	687f      	ldr	r7, [r7, #4]
 80055b6:	e7b6      	b.n	8005526 <_malloc_r+0x4a>
 80055b8:	461a      	mov	r2, r3
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	42a3      	cmp	r3, r4
 80055be:	d1fb      	bne.n	80055b8 <_malloc_r+0xdc>
 80055c0:	2300      	movs	r3, #0
 80055c2:	6053      	str	r3, [r2, #4]
 80055c4:	e7de      	b.n	8005584 <_malloc_r+0xa8>
 80055c6:	230c      	movs	r3, #12
 80055c8:	4630      	mov	r0, r6
 80055ca:	6033      	str	r3, [r6, #0]
 80055cc:	f000 f80c 	bl	80055e8 <__malloc_unlock>
 80055d0:	e794      	b.n	80054fc <_malloc_r+0x20>
 80055d2:	6005      	str	r5, [r0, #0]
 80055d4:	e7d6      	b.n	8005584 <_malloc_r+0xa8>
 80055d6:	bf00      	nop
 80055d8:	2000096c 	.word	0x2000096c

080055dc <__malloc_lock>:
 80055dc:	4801      	ldr	r0, [pc, #4]	@ (80055e4 <__malloc_lock+0x8>)
 80055de:	f7ff b8a6 	b.w	800472e <__retarget_lock_acquire_recursive>
 80055e2:	bf00      	nop
 80055e4:	20000964 	.word	0x20000964

080055e8 <__malloc_unlock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	@ (80055f0 <__malloc_unlock+0x8>)
 80055ea:	f7ff b8a1 	b.w	8004730 <__retarget_lock_release_recursive>
 80055ee:	bf00      	nop
 80055f0:	20000964 	.word	0x20000964

080055f4 <_Balloc>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	69c6      	ldr	r6, [r0, #28]
 80055f8:	4604      	mov	r4, r0
 80055fa:	460d      	mov	r5, r1
 80055fc:	b976      	cbnz	r6, 800561c <_Balloc+0x28>
 80055fe:	2010      	movs	r0, #16
 8005600:	f7ff ff42 	bl	8005488 <malloc>
 8005604:	4602      	mov	r2, r0
 8005606:	61e0      	str	r0, [r4, #28]
 8005608:	b920      	cbnz	r0, 8005614 <_Balloc+0x20>
 800560a:	216b      	movs	r1, #107	@ 0x6b
 800560c:	4b17      	ldr	r3, [pc, #92]	@ (800566c <_Balloc+0x78>)
 800560e:	4818      	ldr	r0, [pc, #96]	@ (8005670 <_Balloc+0x7c>)
 8005610:	f001 fce8 	bl	8006fe4 <__assert_func>
 8005614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005618:	6006      	str	r6, [r0, #0]
 800561a:	60c6      	str	r6, [r0, #12]
 800561c:	69e6      	ldr	r6, [r4, #28]
 800561e:	68f3      	ldr	r3, [r6, #12]
 8005620:	b183      	cbz	r3, 8005644 <_Balloc+0x50>
 8005622:	69e3      	ldr	r3, [r4, #28]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800562a:	b9b8      	cbnz	r0, 800565c <_Balloc+0x68>
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f605 	lsl.w	r6, r1, r5
 8005632:	1d72      	adds	r2, r6, #5
 8005634:	4620      	mov	r0, r4
 8005636:	0092      	lsls	r2, r2, #2
 8005638:	f001 fcf2 	bl	8007020 <_calloc_r>
 800563c:	b160      	cbz	r0, 8005658 <_Balloc+0x64>
 800563e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005642:	e00e      	b.n	8005662 <_Balloc+0x6e>
 8005644:	2221      	movs	r2, #33	@ 0x21
 8005646:	2104      	movs	r1, #4
 8005648:	4620      	mov	r0, r4
 800564a:	f001 fce9 	bl	8007020 <_calloc_r>
 800564e:	69e3      	ldr	r3, [r4, #28]
 8005650:	60f0      	str	r0, [r6, #12]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e4      	bne.n	8005622 <_Balloc+0x2e>
 8005658:	2000      	movs	r0, #0
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	6802      	ldr	r2, [r0, #0]
 800565e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005662:	2300      	movs	r3, #0
 8005664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005668:	e7f7      	b.n	800565a <_Balloc+0x66>
 800566a:	bf00      	nop
 800566c:	08008d11 	.word	0x08008d11
 8005670:	08008d91 	.word	0x08008d91

08005674 <_Bfree>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	69c6      	ldr	r6, [r0, #28]
 8005678:	4605      	mov	r5, r0
 800567a:	460c      	mov	r4, r1
 800567c:	b976      	cbnz	r6, 800569c <_Bfree+0x28>
 800567e:	2010      	movs	r0, #16
 8005680:	f7ff ff02 	bl	8005488 <malloc>
 8005684:	4602      	mov	r2, r0
 8005686:	61e8      	str	r0, [r5, #28]
 8005688:	b920      	cbnz	r0, 8005694 <_Bfree+0x20>
 800568a:	218f      	movs	r1, #143	@ 0x8f
 800568c:	4b08      	ldr	r3, [pc, #32]	@ (80056b0 <_Bfree+0x3c>)
 800568e:	4809      	ldr	r0, [pc, #36]	@ (80056b4 <_Bfree+0x40>)
 8005690:	f001 fca8 	bl	8006fe4 <__assert_func>
 8005694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005698:	6006      	str	r6, [r0, #0]
 800569a:	60c6      	str	r6, [r0, #12]
 800569c:	b13c      	cbz	r4, 80056ae <_Bfree+0x3a>
 800569e:	69eb      	ldr	r3, [r5, #28]
 80056a0:	6862      	ldr	r2, [r4, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056a8:	6021      	str	r1, [r4, #0]
 80056aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	08008d11 	.word	0x08008d11
 80056b4:	08008d91 	.word	0x08008d91

080056b8 <__multadd>:
 80056b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	4607      	mov	r7, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	461e      	mov	r6, r3
 80056c2:	2000      	movs	r0, #0
 80056c4:	690d      	ldr	r5, [r1, #16]
 80056c6:	f101 0c14 	add.w	ip, r1, #20
 80056ca:	f8dc 3000 	ldr.w	r3, [ip]
 80056ce:	3001      	adds	r0, #1
 80056d0:	b299      	uxth	r1, r3
 80056d2:	fb02 6101 	mla	r1, r2, r1, r6
 80056d6:	0c1e      	lsrs	r6, r3, #16
 80056d8:	0c0b      	lsrs	r3, r1, #16
 80056da:	fb02 3306 	mla	r3, r2, r6, r3
 80056de:	b289      	uxth	r1, r1
 80056e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056e4:	4285      	cmp	r5, r0
 80056e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056ea:	f84c 1b04 	str.w	r1, [ip], #4
 80056ee:	dcec      	bgt.n	80056ca <__multadd+0x12>
 80056f0:	b30e      	cbz	r6, 8005736 <__multadd+0x7e>
 80056f2:	68a3      	ldr	r3, [r4, #8]
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc19      	bgt.n	800572c <__multadd+0x74>
 80056f8:	6861      	ldr	r1, [r4, #4]
 80056fa:	4638      	mov	r0, r7
 80056fc:	3101      	adds	r1, #1
 80056fe:	f7ff ff79 	bl	80055f4 <_Balloc>
 8005702:	4680      	mov	r8, r0
 8005704:	b928      	cbnz	r0, 8005712 <__multadd+0x5a>
 8005706:	4602      	mov	r2, r0
 8005708:	21ba      	movs	r1, #186	@ 0xba
 800570a:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <__multadd+0x84>)
 800570c:	480c      	ldr	r0, [pc, #48]	@ (8005740 <__multadd+0x88>)
 800570e:	f001 fc69 	bl	8006fe4 <__assert_func>
 8005712:	6922      	ldr	r2, [r4, #16]
 8005714:	f104 010c 	add.w	r1, r4, #12
 8005718:	3202      	adds	r2, #2
 800571a:	0092      	lsls	r2, r2, #2
 800571c:	300c      	adds	r0, #12
 800571e:	f001 fc4d 	bl	8006fbc <memcpy>
 8005722:	4621      	mov	r1, r4
 8005724:	4638      	mov	r0, r7
 8005726:	f7ff ffa5 	bl	8005674 <_Bfree>
 800572a:	4644      	mov	r4, r8
 800572c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005730:	3501      	adds	r5, #1
 8005732:	615e      	str	r6, [r3, #20]
 8005734:	6125      	str	r5, [r4, #16]
 8005736:	4620      	mov	r0, r4
 8005738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573c:	08008d80 	.word	0x08008d80
 8005740:	08008d91 	.word	0x08008d91

08005744 <__s2b>:
 8005744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005748:	4615      	mov	r5, r2
 800574a:	2209      	movs	r2, #9
 800574c:	461f      	mov	r7, r3
 800574e:	3308      	adds	r3, #8
 8005750:	460c      	mov	r4, r1
 8005752:	fb93 f3f2 	sdiv	r3, r3, r2
 8005756:	4606      	mov	r6, r0
 8005758:	2201      	movs	r2, #1
 800575a:	2100      	movs	r1, #0
 800575c:	429a      	cmp	r2, r3
 800575e:	db09      	blt.n	8005774 <__s2b+0x30>
 8005760:	4630      	mov	r0, r6
 8005762:	f7ff ff47 	bl	80055f4 <_Balloc>
 8005766:	b940      	cbnz	r0, 800577a <__s2b+0x36>
 8005768:	4602      	mov	r2, r0
 800576a:	21d3      	movs	r1, #211	@ 0xd3
 800576c:	4b18      	ldr	r3, [pc, #96]	@ (80057d0 <__s2b+0x8c>)
 800576e:	4819      	ldr	r0, [pc, #100]	@ (80057d4 <__s2b+0x90>)
 8005770:	f001 fc38 	bl	8006fe4 <__assert_func>
 8005774:	0052      	lsls	r2, r2, #1
 8005776:	3101      	adds	r1, #1
 8005778:	e7f0      	b.n	800575c <__s2b+0x18>
 800577a:	9b08      	ldr	r3, [sp, #32]
 800577c:	2d09      	cmp	r5, #9
 800577e:	6143      	str	r3, [r0, #20]
 8005780:	f04f 0301 	mov.w	r3, #1
 8005784:	6103      	str	r3, [r0, #16]
 8005786:	dd16      	ble.n	80057b6 <__s2b+0x72>
 8005788:	f104 0909 	add.w	r9, r4, #9
 800578c:	46c8      	mov	r8, r9
 800578e:	442c      	add	r4, r5
 8005790:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005794:	4601      	mov	r1, r0
 8005796:	220a      	movs	r2, #10
 8005798:	4630      	mov	r0, r6
 800579a:	3b30      	subs	r3, #48	@ 0x30
 800579c:	f7ff ff8c 	bl	80056b8 <__multadd>
 80057a0:	45a0      	cmp	r8, r4
 80057a2:	d1f5      	bne.n	8005790 <__s2b+0x4c>
 80057a4:	f1a5 0408 	sub.w	r4, r5, #8
 80057a8:	444c      	add	r4, r9
 80057aa:	1b2d      	subs	r5, r5, r4
 80057ac:	1963      	adds	r3, r4, r5
 80057ae:	42bb      	cmp	r3, r7
 80057b0:	db04      	blt.n	80057bc <__s2b+0x78>
 80057b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b6:	2509      	movs	r5, #9
 80057b8:	340a      	adds	r4, #10
 80057ba:	e7f6      	b.n	80057aa <__s2b+0x66>
 80057bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80057c0:	4601      	mov	r1, r0
 80057c2:	220a      	movs	r2, #10
 80057c4:	4630      	mov	r0, r6
 80057c6:	3b30      	subs	r3, #48	@ 0x30
 80057c8:	f7ff ff76 	bl	80056b8 <__multadd>
 80057cc:	e7ee      	b.n	80057ac <__s2b+0x68>
 80057ce:	bf00      	nop
 80057d0:	08008d80 	.word	0x08008d80
 80057d4:	08008d91 	.word	0x08008d91

080057d8 <__hi0bits>:
 80057d8:	4603      	mov	r3, r0
 80057da:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80057de:	bf3a      	itte	cc
 80057e0:	0403      	lslcc	r3, r0, #16
 80057e2:	2010      	movcc	r0, #16
 80057e4:	2000      	movcs	r0, #0
 80057e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ea:	bf3c      	itt	cc
 80057ec:	021b      	lslcc	r3, r3, #8
 80057ee:	3008      	addcc	r0, #8
 80057f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057f4:	bf3c      	itt	cc
 80057f6:	011b      	lslcc	r3, r3, #4
 80057f8:	3004      	addcc	r0, #4
 80057fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fe:	bf3c      	itt	cc
 8005800:	009b      	lslcc	r3, r3, #2
 8005802:	3002      	addcc	r0, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	db05      	blt.n	8005814 <__hi0bits+0x3c>
 8005808:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800580c:	f100 0001 	add.w	r0, r0, #1
 8005810:	bf08      	it	eq
 8005812:	2020      	moveq	r0, #32
 8005814:	4770      	bx	lr

08005816 <__lo0bits>:
 8005816:	6803      	ldr	r3, [r0, #0]
 8005818:	4602      	mov	r2, r0
 800581a:	f013 0007 	ands.w	r0, r3, #7
 800581e:	d00b      	beq.n	8005838 <__lo0bits+0x22>
 8005820:	07d9      	lsls	r1, r3, #31
 8005822:	d421      	bmi.n	8005868 <__lo0bits+0x52>
 8005824:	0798      	lsls	r0, r3, #30
 8005826:	bf49      	itett	mi
 8005828:	085b      	lsrmi	r3, r3, #1
 800582a:	089b      	lsrpl	r3, r3, #2
 800582c:	2001      	movmi	r0, #1
 800582e:	6013      	strmi	r3, [r2, #0]
 8005830:	bf5c      	itt	pl
 8005832:	2002      	movpl	r0, #2
 8005834:	6013      	strpl	r3, [r2, #0]
 8005836:	4770      	bx	lr
 8005838:	b299      	uxth	r1, r3
 800583a:	b909      	cbnz	r1, 8005840 <__lo0bits+0x2a>
 800583c:	2010      	movs	r0, #16
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	b2d9      	uxtb	r1, r3
 8005842:	b909      	cbnz	r1, 8005848 <__lo0bits+0x32>
 8005844:	3008      	adds	r0, #8
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	0719      	lsls	r1, r3, #28
 800584a:	bf04      	itt	eq
 800584c:	091b      	lsreq	r3, r3, #4
 800584e:	3004      	addeq	r0, #4
 8005850:	0799      	lsls	r1, r3, #30
 8005852:	bf04      	itt	eq
 8005854:	089b      	lsreq	r3, r3, #2
 8005856:	3002      	addeq	r0, #2
 8005858:	07d9      	lsls	r1, r3, #31
 800585a:	d403      	bmi.n	8005864 <__lo0bits+0x4e>
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	f100 0001 	add.w	r0, r0, #1
 8005862:	d003      	beq.n	800586c <__lo0bits+0x56>
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	4770      	bx	lr
 8005868:	2000      	movs	r0, #0
 800586a:	4770      	bx	lr
 800586c:	2020      	movs	r0, #32
 800586e:	4770      	bx	lr

08005870 <__i2b>:
 8005870:	b510      	push	{r4, lr}
 8005872:	460c      	mov	r4, r1
 8005874:	2101      	movs	r1, #1
 8005876:	f7ff febd 	bl	80055f4 <_Balloc>
 800587a:	4602      	mov	r2, r0
 800587c:	b928      	cbnz	r0, 800588a <__i2b+0x1a>
 800587e:	f240 1145 	movw	r1, #325	@ 0x145
 8005882:	4b04      	ldr	r3, [pc, #16]	@ (8005894 <__i2b+0x24>)
 8005884:	4804      	ldr	r0, [pc, #16]	@ (8005898 <__i2b+0x28>)
 8005886:	f001 fbad 	bl	8006fe4 <__assert_func>
 800588a:	2301      	movs	r3, #1
 800588c:	6144      	str	r4, [r0, #20]
 800588e:	6103      	str	r3, [r0, #16]
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop
 8005894:	08008d80 	.word	0x08008d80
 8005898:	08008d91 	.word	0x08008d91

0800589c <__multiply>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	4614      	mov	r4, r2
 80058a2:	690a      	ldr	r2, [r1, #16]
 80058a4:	6923      	ldr	r3, [r4, #16]
 80058a6:	460f      	mov	r7, r1
 80058a8:	429a      	cmp	r2, r3
 80058aa:	bfa2      	ittt	ge
 80058ac:	4623      	movge	r3, r4
 80058ae:	460c      	movge	r4, r1
 80058b0:	461f      	movge	r7, r3
 80058b2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80058b6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80058ba:	68a3      	ldr	r3, [r4, #8]
 80058bc:	6861      	ldr	r1, [r4, #4]
 80058be:	eb0a 0609 	add.w	r6, sl, r9
 80058c2:	42b3      	cmp	r3, r6
 80058c4:	b085      	sub	sp, #20
 80058c6:	bfb8      	it	lt
 80058c8:	3101      	addlt	r1, #1
 80058ca:	f7ff fe93 	bl	80055f4 <_Balloc>
 80058ce:	b930      	cbnz	r0, 80058de <__multiply+0x42>
 80058d0:	4602      	mov	r2, r0
 80058d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80058d6:	4b43      	ldr	r3, [pc, #268]	@ (80059e4 <__multiply+0x148>)
 80058d8:	4843      	ldr	r0, [pc, #268]	@ (80059e8 <__multiply+0x14c>)
 80058da:	f001 fb83 	bl	8006fe4 <__assert_func>
 80058de:	f100 0514 	add.w	r5, r0, #20
 80058e2:	462b      	mov	r3, r5
 80058e4:	2200      	movs	r2, #0
 80058e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80058ea:	4543      	cmp	r3, r8
 80058ec:	d321      	bcc.n	8005932 <__multiply+0x96>
 80058ee:	f107 0114 	add.w	r1, r7, #20
 80058f2:	f104 0214 	add.w	r2, r4, #20
 80058f6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80058fa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	1b13      	subs	r3, r2, r4
 8005902:	3b15      	subs	r3, #21
 8005904:	f023 0303 	bic.w	r3, r3, #3
 8005908:	3304      	adds	r3, #4
 800590a:	f104 0715 	add.w	r7, r4, #21
 800590e:	42ba      	cmp	r2, r7
 8005910:	bf38      	it	cc
 8005912:	2304      	movcc	r3, #4
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	9b02      	ldr	r3, [sp, #8]
 8005918:	9103      	str	r1, [sp, #12]
 800591a:	428b      	cmp	r3, r1
 800591c:	d80c      	bhi.n	8005938 <__multiply+0x9c>
 800591e:	2e00      	cmp	r6, #0
 8005920:	dd03      	ble.n	800592a <__multiply+0x8e>
 8005922:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005926:	2b00      	cmp	r3, #0
 8005928:	d05a      	beq.n	80059e0 <__multiply+0x144>
 800592a:	6106      	str	r6, [r0, #16]
 800592c:	b005      	add	sp, #20
 800592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005932:	f843 2b04 	str.w	r2, [r3], #4
 8005936:	e7d8      	b.n	80058ea <__multiply+0x4e>
 8005938:	f8b1 a000 	ldrh.w	sl, [r1]
 800593c:	f1ba 0f00 	cmp.w	sl, #0
 8005940:	d023      	beq.n	800598a <__multiply+0xee>
 8005942:	46a9      	mov	r9, r5
 8005944:	f04f 0c00 	mov.w	ip, #0
 8005948:	f104 0e14 	add.w	lr, r4, #20
 800594c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005950:	f8d9 3000 	ldr.w	r3, [r9]
 8005954:	fa1f fb87 	uxth.w	fp, r7
 8005958:	b29b      	uxth	r3, r3
 800595a:	fb0a 330b 	mla	r3, sl, fp, r3
 800595e:	4463      	add	r3, ip
 8005960:	f8d9 c000 	ldr.w	ip, [r9]
 8005964:	0c3f      	lsrs	r7, r7, #16
 8005966:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800596a:	fb0a c707 	mla	r7, sl, r7, ip
 800596e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005978:	4572      	cmp	r2, lr
 800597a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800597e:	f849 3b04 	str.w	r3, [r9], #4
 8005982:	d8e3      	bhi.n	800594c <__multiply+0xb0>
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	f845 c003 	str.w	ip, [r5, r3]
 800598a:	9b03      	ldr	r3, [sp, #12]
 800598c:	3104      	adds	r1, #4
 800598e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005992:	f1b9 0f00 	cmp.w	r9, #0
 8005996:	d021      	beq.n	80059dc <__multiply+0x140>
 8005998:	46ae      	mov	lr, r5
 800599a:	f04f 0a00 	mov.w	sl, #0
 800599e:	682b      	ldr	r3, [r5, #0]
 80059a0:	f104 0c14 	add.w	ip, r4, #20
 80059a4:	f8bc b000 	ldrh.w	fp, [ip]
 80059a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	fb09 770b 	mla	r7, r9, fp, r7
 80059b2:	4457      	add	r7, sl
 80059b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059b8:	f84e 3b04 	str.w	r3, [lr], #4
 80059bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059c4:	f8be 3000 	ldrh.w	r3, [lr]
 80059c8:	4562      	cmp	r2, ip
 80059ca:	fb09 330a 	mla	r3, r9, sl, r3
 80059ce:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80059d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059d6:	d8e5      	bhi.n	80059a4 <__multiply+0x108>
 80059d8:	9f01      	ldr	r7, [sp, #4]
 80059da:	51eb      	str	r3, [r5, r7]
 80059dc:	3504      	adds	r5, #4
 80059de:	e79a      	b.n	8005916 <__multiply+0x7a>
 80059e0:	3e01      	subs	r6, #1
 80059e2:	e79c      	b.n	800591e <__multiply+0x82>
 80059e4:	08008d80 	.word	0x08008d80
 80059e8:	08008d91 	.word	0x08008d91

080059ec <__pow5mult>:
 80059ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f0:	4615      	mov	r5, r2
 80059f2:	f012 0203 	ands.w	r2, r2, #3
 80059f6:	4607      	mov	r7, r0
 80059f8:	460e      	mov	r6, r1
 80059fa:	d007      	beq.n	8005a0c <__pow5mult+0x20>
 80059fc:	4c25      	ldr	r4, [pc, #148]	@ (8005a94 <__pow5mult+0xa8>)
 80059fe:	3a01      	subs	r2, #1
 8005a00:	2300      	movs	r3, #0
 8005a02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a06:	f7ff fe57 	bl	80056b8 <__multadd>
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	10ad      	asrs	r5, r5, #2
 8005a0e:	d03d      	beq.n	8005a8c <__pow5mult+0xa0>
 8005a10:	69fc      	ldr	r4, [r7, #28]
 8005a12:	b97c      	cbnz	r4, 8005a34 <__pow5mult+0x48>
 8005a14:	2010      	movs	r0, #16
 8005a16:	f7ff fd37 	bl	8005488 <malloc>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	61f8      	str	r0, [r7, #28]
 8005a1e:	b928      	cbnz	r0, 8005a2c <__pow5mult+0x40>
 8005a20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a24:	4b1c      	ldr	r3, [pc, #112]	@ (8005a98 <__pow5mult+0xac>)
 8005a26:	481d      	ldr	r0, [pc, #116]	@ (8005a9c <__pow5mult+0xb0>)
 8005a28:	f001 fadc 	bl	8006fe4 <__assert_func>
 8005a2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a30:	6004      	str	r4, [r0, #0]
 8005a32:	60c4      	str	r4, [r0, #12]
 8005a34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005a38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a3c:	b94c      	cbnz	r4, 8005a52 <__pow5mult+0x66>
 8005a3e:	f240 2171 	movw	r1, #625	@ 0x271
 8005a42:	4638      	mov	r0, r7
 8005a44:	f7ff ff14 	bl	8005870 <__i2b>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	07eb      	lsls	r3, r5, #31
 8005a58:	d50a      	bpl.n	8005a70 <__pow5mult+0x84>
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f7ff ff1c 	bl	800589c <__multiply>
 8005a64:	4680      	mov	r8, r0
 8005a66:	4631      	mov	r1, r6
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7ff fe03 	bl	8005674 <_Bfree>
 8005a6e:	4646      	mov	r6, r8
 8005a70:	106d      	asrs	r5, r5, #1
 8005a72:	d00b      	beq.n	8005a8c <__pow5mult+0xa0>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	b938      	cbnz	r0, 8005a88 <__pow5mult+0x9c>
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f7ff ff0d 	bl	800589c <__multiply>
 8005a82:	6020      	str	r0, [r4, #0]
 8005a84:	f8c0 9000 	str.w	r9, [r0]
 8005a88:	4604      	mov	r4, r0
 8005a8a:	e7e4      	b.n	8005a56 <__pow5mult+0x6a>
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a92:	bf00      	nop
 8005a94:	08008dec 	.word	0x08008dec
 8005a98:	08008d11 	.word	0x08008d11
 8005a9c:	08008d91 	.word	0x08008d91

08005aa0 <__lshift>:
 8005aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	4691      	mov	r9, r2
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	6849      	ldr	r1, [r1, #4]
 8005aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ab2:	68a3      	ldr	r3, [r4, #8]
 8005ab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ab8:	f108 0601 	add.w	r6, r8, #1
 8005abc:	42b3      	cmp	r3, r6
 8005abe:	db0b      	blt.n	8005ad8 <__lshift+0x38>
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7ff fd97 	bl	80055f4 <_Balloc>
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	b948      	cbnz	r0, 8005ade <__lshift+0x3e>
 8005aca:	4602      	mov	r2, r0
 8005acc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ad0:	4b27      	ldr	r3, [pc, #156]	@ (8005b70 <__lshift+0xd0>)
 8005ad2:	4828      	ldr	r0, [pc, #160]	@ (8005b74 <__lshift+0xd4>)
 8005ad4:	f001 fa86 	bl	8006fe4 <__assert_func>
 8005ad8:	3101      	adds	r1, #1
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	e7ee      	b.n	8005abc <__lshift+0x1c>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f100 0114 	add.w	r1, r0, #20
 8005ae4:	f100 0210 	add.w	r2, r0, #16
 8005ae8:	4618      	mov	r0, r3
 8005aea:	4553      	cmp	r3, sl
 8005aec:	db33      	blt.n	8005b56 <__lshift+0xb6>
 8005aee:	6920      	ldr	r0, [r4, #16]
 8005af0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005af4:	f104 0314 	add.w	r3, r4, #20
 8005af8:	f019 091f 	ands.w	r9, r9, #31
 8005afc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b04:	d02b      	beq.n	8005b5e <__lshift+0xbe>
 8005b06:	468a      	mov	sl, r1
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	fa00 f009 	lsl.w	r0, r0, r9
 8005b14:	4310      	orrs	r0, r2
 8005b16:	f84a 0b04 	str.w	r0, [sl], #4
 8005b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b1e:	459c      	cmp	ip, r3
 8005b20:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b24:	d8f3      	bhi.n	8005b0e <__lshift+0x6e>
 8005b26:	ebac 0304 	sub.w	r3, ip, r4
 8005b2a:	3b15      	subs	r3, #21
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	3304      	adds	r3, #4
 8005b32:	f104 0015 	add.w	r0, r4, #21
 8005b36:	4584      	cmp	ip, r0
 8005b38:	bf38      	it	cc
 8005b3a:	2304      	movcc	r3, #4
 8005b3c:	50ca      	str	r2, [r1, r3]
 8005b3e:	b10a      	cbz	r2, 8005b44 <__lshift+0xa4>
 8005b40:	f108 0602 	add.w	r6, r8, #2
 8005b44:	3e01      	subs	r6, #1
 8005b46:	4638      	mov	r0, r7
 8005b48:	4621      	mov	r1, r4
 8005b4a:	612e      	str	r6, [r5, #16]
 8005b4c:	f7ff fd92 	bl	8005674 <_Bfree>
 8005b50:	4628      	mov	r0, r5
 8005b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b56:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	e7c5      	b.n	8005aea <__lshift+0x4a>
 8005b5e:	3904      	subs	r1, #4
 8005b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b64:	459c      	cmp	ip, r3
 8005b66:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b6a:	d8f9      	bhi.n	8005b60 <__lshift+0xc0>
 8005b6c:	e7ea      	b.n	8005b44 <__lshift+0xa4>
 8005b6e:	bf00      	nop
 8005b70:	08008d80 	.word	0x08008d80
 8005b74:	08008d91 	.word	0x08008d91

08005b78 <__mcmp>:
 8005b78:	4603      	mov	r3, r0
 8005b7a:	690a      	ldr	r2, [r1, #16]
 8005b7c:	6900      	ldr	r0, [r0, #16]
 8005b7e:	b530      	push	{r4, r5, lr}
 8005b80:	1a80      	subs	r0, r0, r2
 8005b82:	d10e      	bne.n	8005ba2 <__mcmp+0x2a>
 8005b84:	3314      	adds	r3, #20
 8005b86:	3114      	adds	r1, #20
 8005b88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b98:	4295      	cmp	r5, r2
 8005b9a:	d003      	beq.n	8005ba4 <__mcmp+0x2c>
 8005b9c:	d205      	bcs.n	8005baa <__mcmp+0x32>
 8005b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba2:	bd30      	pop	{r4, r5, pc}
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d3f3      	bcc.n	8005b90 <__mcmp+0x18>
 8005ba8:	e7fb      	b.n	8005ba2 <__mcmp+0x2a>
 8005baa:	2001      	movs	r0, #1
 8005bac:	e7f9      	b.n	8005ba2 <__mcmp+0x2a>
	...

08005bb0 <__mdiff>:
 8005bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	4689      	mov	r9, r1
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	4611      	mov	r1, r2
 8005bba:	4648      	mov	r0, r9
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	f7ff ffdb 	bl	8005b78 <__mcmp>
 8005bc2:	1e05      	subs	r5, r0, #0
 8005bc4:	d112      	bne.n	8005bec <__mdiff+0x3c>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f7ff fd13 	bl	80055f4 <_Balloc>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	b928      	cbnz	r0, 8005bde <__mdiff+0x2e>
 8005bd2:	f240 2137 	movw	r1, #567	@ 0x237
 8005bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd0 <__mdiff+0x120>)
 8005bd8:	483e      	ldr	r0, [pc, #248]	@ (8005cd4 <__mdiff+0x124>)
 8005bda:	f001 fa03 	bl	8006fe4 <__assert_func>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005be4:	4610      	mov	r0, r2
 8005be6:	b003      	add	sp, #12
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	bfbc      	itt	lt
 8005bee:	464b      	movlt	r3, r9
 8005bf0:	46a1      	movlt	r9, r4
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005bf8:	bfba      	itte	lt
 8005bfa:	461c      	movlt	r4, r3
 8005bfc:	2501      	movlt	r5, #1
 8005bfe:	2500      	movge	r5, #0
 8005c00:	f7ff fcf8 	bl	80055f4 <_Balloc>
 8005c04:	4602      	mov	r2, r0
 8005c06:	b918      	cbnz	r0, 8005c10 <__mdiff+0x60>
 8005c08:	f240 2145 	movw	r1, #581	@ 0x245
 8005c0c:	4b30      	ldr	r3, [pc, #192]	@ (8005cd0 <__mdiff+0x120>)
 8005c0e:	e7e3      	b.n	8005bd8 <__mdiff+0x28>
 8005c10:	f100 0b14 	add.w	fp, r0, #20
 8005c14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c18:	f109 0310 	add.w	r3, r9, #16
 8005c1c:	60c5      	str	r5, [r0, #12]
 8005c1e:	f04f 0c00 	mov.w	ip, #0
 8005c22:	f109 0514 	add.w	r5, r9, #20
 8005c26:	46d9      	mov	r9, fp
 8005c28:	6926      	ldr	r6, [r4, #16]
 8005c2a:	f104 0e14 	add.w	lr, r4, #20
 8005c2e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c32:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005c3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005c42:	b281      	uxth	r1, r0
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	fa1f f38a 	uxth.w	r3, sl
 8005c4a:	1a5b      	subs	r3, r3, r1
 8005c4c:	0c00      	lsrs	r0, r0, #16
 8005c4e:	4463      	add	r3, ip
 8005c50:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005c54:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c5e:	4576      	cmp	r6, lr
 8005c60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c64:	f849 3b04 	str.w	r3, [r9], #4
 8005c68:	d8e6      	bhi.n	8005c38 <__mdiff+0x88>
 8005c6a:	1b33      	subs	r3, r6, r4
 8005c6c:	3b15      	subs	r3, #21
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	3415      	adds	r4, #21
 8005c74:	3304      	adds	r3, #4
 8005c76:	42a6      	cmp	r6, r4
 8005c78:	bf38      	it	cc
 8005c7a:	2304      	movcc	r3, #4
 8005c7c:	441d      	add	r5, r3
 8005c7e:	445b      	add	r3, fp
 8005c80:	461e      	mov	r6, r3
 8005c82:	462c      	mov	r4, r5
 8005c84:	4544      	cmp	r4, r8
 8005c86:	d30e      	bcc.n	8005ca6 <__mdiff+0xf6>
 8005c88:	f108 0103 	add.w	r1, r8, #3
 8005c8c:	1b49      	subs	r1, r1, r5
 8005c8e:	f021 0103 	bic.w	r1, r1, #3
 8005c92:	3d03      	subs	r5, #3
 8005c94:	45a8      	cmp	r8, r5
 8005c96:	bf38      	it	cc
 8005c98:	2100      	movcc	r1, #0
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ca0:	b199      	cbz	r1, 8005cca <__mdiff+0x11a>
 8005ca2:	6117      	str	r7, [r2, #16]
 8005ca4:	e79e      	b.n	8005be4 <__mdiff+0x34>
 8005ca6:	46e6      	mov	lr, ip
 8005ca8:	f854 1b04 	ldr.w	r1, [r4], #4
 8005cac:	fa1f fc81 	uxth.w	ip, r1
 8005cb0:	44f4      	add	ip, lr
 8005cb2:	0c08      	lsrs	r0, r1, #16
 8005cb4:	4471      	add	r1, lr
 8005cb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005cba:	b289      	uxth	r1, r1
 8005cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cc4:	f846 1b04 	str.w	r1, [r6], #4
 8005cc8:	e7dc      	b.n	8005c84 <__mdiff+0xd4>
 8005cca:	3f01      	subs	r7, #1
 8005ccc:	e7e6      	b.n	8005c9c <__mdiff+0xec>
 8005cce:	bf00      	nop
 8005cd0:	08008d80 	.word	0x08008d80
 8005cd4:	08008d91 	.word	0x08008d91

08005cd8 <__ulp>:
 8005cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d14 <__ulp+0x3c>)
 8005cda:	400b      	ands	r3, r1
 8005cdc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dc08      	bgt.n	8005cf6 <__ulp+0x1e>
 8005ce4:	425b      	negs	r3, r3
 8005ce6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005cea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005cee:	da04      	bge.n	8005cfa <__ulp+0x22>
 8005cf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005cf4:	4113      	asrs	r3, r2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	e008      	b.n	8005d0c <__ulp+0x34>
 8005cfa:	f1a2 0314 	sub.w	r3, r2, #20
 8005cfe:	2b1e      	cmp	r3, #30
 8005d00:	bfd6      	itet	le
 8005d02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005d06:	2201      	movgt	r2, #1
 8005d08:	40da      	lsrle	r2, r3
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	7ff00000 	.word	0x7ff00000

08005d18 <__b2d>:
 8005d18:	6902      	ldr	r2, [r0, #16]
 8005d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1c:	f100 0614 	add.w	r6, r0, #20
 8005d20:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005d24:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005d28:	4f1e      	ldr	r7, [pc, #120]	@ (8005da4 <__b2d+0x8c>)
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7ff fd54 	bl	80057d8 <__hi0bits>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f1c0 0020 	rsb	r0, r0, #32
 8005d36:	2b0a      	cmp	r3, #10
 8005d38:	f1a2 0504 	sub.w	r5, r2, #4
 8005d3c:	6008      	str	r0, [r1, #0]
 8005d3e:	dc12      	bgt.n	8005d66 <__b2d+0x4e>
 8005d40:	42ae      	cmp	r6, r5
 8005d42:	bf2c      	ite	cs
 8005d44:	2200      	movcs	r2, #0
 8005d46:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005d4a:	f1c3 0c0b 	rsb	ip, r3, #11
 8005d4e:	3315      	adds	r3, #21
 8005d50:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005d54:	fa04 f303 	lsl.w	r3, r4, r3
 8005d58:	fa22 f20c 	lsr.w	r2, r2, ip
 8005d5c:	ea4e 0107 	orr.w	r1, lr, r7
 8005d60:	431a      	orrs	r2, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d66:	42ae      	cmp	r6, r5
 8005d68:	bf36      	itet	cc
 8005d6a:	f1a2 0508 	subcc.w	r5, r2, #8
 8005d6e:	2200      	movcs	r2, #0
 8005d70:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005d74:	3b0b      	subs	r3, #11
 8005d76:	d012      	beq.n	8005d9e <__b2d+0x86>
 8005d78:	f1c3 0720 	rsb	r7, r3, #32
 8005d7c:	fa22 f107 	lsr.w	r1, r2, r7
 8005d80:	409c      	lsls	r4, r3
 8005d82:	430c      	orrs	r4, r1
 8005d84:	42b5      	cmp	r5, r6
 8005d86:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005d8a:	bf94      	ite	ls
 8005d8c:	2400      	movls	r4, #0
 8005d8e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005d92:	409a      	lsls	r2, r3
 8005d94:	40fc      	lsrs	r4, r7
 8005d96:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005d9a:	4322      	orrs	r2, r4
 8005d9c:	e7e1      	b.n	8005d62 <__b2d+0x4a>
 8005d9e:	ea44 0107 	orr.w	r1, r4, r7
 8005da2:	e7de      	b.n	8005d62 <__b2d+0x4a>
 8005da4:	3ff00000 	.word	0x3ff00000

08005da8 <__d2b>:
 8005da8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005dac:	2101      	movs	r1, #1
 8005dae:	4690      	mov	r8, r2
 8005db0:	4699      	mov	r9, r3
 8005db2:	9e08      	ldr	r6, [sp, #32]
 8005db4:	f7ff fc1e 	bl	80055f4 <_Balloc>
 8005db8:	4604      	mov	r4, r0
 8005dba:	b930      	cbnz	r0, 8005dca <__d2b+0x22>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	f240 310f 	movw	r1, #783	@ 0x30f
 8005dc2:	4b23      	ldr	r3, [pc, #140]	@ (8005e50 <__d2b+0xa8>)
 8005dc4:	4823      	ldr	r0, [pc, #140]	@ (8005e54 <__d2b+0xac>)
 8005dc6:	f001 f90d 	bl	8006fe4 <__assert_func>
 8005dca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005dce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dd2:	b10d      	cbz	r5, 8005dd8 <__d2b+0x30>
 8005dd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	f1b8 0300 	subs.w	r3, r8, #0
 8005dde:	d024      	beq.n	8005e2a <__d2b+0x82>
 8005de0:	4668      	mov	r0, sp
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	f7ff fd17 	bl	8005816 <__lo0bits>
 8005de8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005dec:	b1d8      	cbz	r0, 8005e26 <__d2b+0x7e>
 8005dee:	f1c0 0320 	rsb	r3, r0, #32
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	430b      	orrs	r3, r1
 8005df8:	40c2      	lsrs	r2, r0
 8005dfa:	6163      	str	r3, [r4, #20]
 8005dfc:	9201      	str	r2, [sp, #4]
 8005dfe:	9b01      	ldr	r3, [sp, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf0c      	ite	eq
 8005e04:	2201      	moveq	r2, #1
 8005e06:	2202      	movne	r2, #2
 8005e08:	61a3      	str	r3, [r4, #24]
 8005e0a:	6122      	str	r2, [r4, #16]
 8005e0c:	b1ad      	cbz	r5, 8005e3a <__d2b+0x92>
 8005e0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005e12:	4405      	add	r5, r0
 8005e14:	6035      	str	r5, [r6, #0]
 8005e16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1c:	6018      	str	r0, [r3, #0]
 8005e1e:	4620      	mov	r0, r4
 8005e20:	b002      	add	sp, #8
 8005e22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005e26:	6161      	str	r1, [r4, #20]
 8005e28:	e7e9      	b.n	8005dfe <__d2b+0x56>
 8005e2a:	a801      	add	r0, sp, #4
 8005e2c:	f7ff fcf3 	bl	8005816 <__lo0bits>
 8005e30:	9b01      	ldr	r3, [sp, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	6163      	str	r3, [r4, #20]
 8005e36:	3020      	adds	r0, #32
 8005e38:	e7e7      	b.n	8005e0a <__d2b+0x62>
 8005e3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005e3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e42:	6030      	str	r0, [r6, #0]
 8005e44:	6918      	ldr	r0, [r3, #16]
 8005e46:	f7ff fcc7 	bl	80057d8 <__hi0bits>
 8005e4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e4e:	e7e4      	b.n	8005e1a <__d2b+0x72>
 8005e50:	08008d80 	.word	0x08008d80
 8005e54:	08008d91 	.word	0x08008d91

08005e58 <__ratio>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	e9cd 1000 	strd	r1, r0, [sp]
 8005e62:	a902      	add	r1, sp, #8
 8005e64:	f7ff ff58 	bl	8005d18 <__b2d>
 8005e68:	468b      	mov	fp, r1
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	460f      	mov	r7, r1
 8005e6e:	9800      	ldr	r0, [sp, #0]
 8005e70:	a903      	add	r1, sp, #12
 8005e72:	f7ff ff51 	bl	8005d18 <__b2d>
 8005e76:	460d      	mov	r5, r1
 8005e78:	9b01      	ldr	r3, [sp, #4]
 8005e7a:	4689      	mov	r9, r1
 8005e7c:	6919      	ldr	r1, [r3, #16]
 8005e7e:	9b00      	ldr	r3, [sp, #0]
 8005e80:	4604      	mov	r4, r0
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	4630      	mov	r0, r6
 8005e86:	1ac9      	subs	r1, r1, r3
 8005e88:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfcd      	iteet	gt
 8005e96:	463a      	movgt	r2, r7
 8005e98:	462a      	movle	r2, r5
 8005e9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005e9e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005ea2:	bfd8      	it	le
 8005ea4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4659      	mov	r1, fp
 8005eae:	f7fa fc3d 	bl	800072c <__aeabi_ddiv>
 8005eb2:	b005      	add	sp, #20
 8005eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005eb8 <__copybits>:
 8005eb8:	3901      	subs	r1, #1
 8005eba:	b570      	push	{r4, r5, r6, lr}
 8005ebc:	1149      	asrs	r1, r1, #5
 8005ebe:	6914      	ldr	r4, [r2, #16]
 8005ec0:	3101      	adds	r1, #1
 8005ec2:	f102 0314 	add.w	r3, r2, #20
 8005ec6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005eca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005ece:	1f05      	subs	r5, r0, #4
 8005ed0:	42a3      	cmp	r3, r4
 8005ed2:	d30c      	bcc.n	8005eee <__copybits+0x36>
 8005ed4:	1aa3      	subs	r3, r4, r2
 8005ed6:	3b11      	subs	r3, #17
 8005ed8:	f023 0303 	bic.w	r3, r3, #3
 8005edc:	3211      	adds	r2, #17
 8005ede:	42a2      	cmp	r2, r4
 8005ee0:	bf88      	it	hi
 8005ee2:	2300      	movhi	r3, #0
 8005ee4:	4418      	add	r0, r3
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	4288      	cmp	r0, r1
 8005eea:	d305      	bcc.n	8005ef8 <__copybits+0x40>
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
 8005eee:	f853 6b04 	ldr.w	r6, [r3], #4
 8005ef2:	f845 6f04 	str.w	r6, [r5, #4]!
 8005ef6:	e7eb      	b.n	8005ed0 <__copybits+0x18>
 8005ef8:	f840 3b04 	str.w	r3, [r0], #4
 8005efc:	e7f4      	b.n	8005ee8 <__copybits+0x30>

08005efe <__any_on>:
 8005efe:	f100 0214 	add.w	r2, r0, #20
 8005f02:	6900      	ldr	r0, [r0, #16]
 8005f04:	114b      	asrs	r3, r1, #5
 8005f06:	4298      	cmp	r0, r3
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	db11      	blt.n	8005f30 <__any_on+0x32>
 8005f0c:	dd0a      	ble.n	8005f24 <__any_on+0x26>
 8005f0e:	f011 011f 	ands.w	r1, r1, #31
 8005f12:	d007      	beq.n	8005f24 <__any_on+0x26>
 8005f14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005f18:	fa24 f001 	lsr.w	r0, r4, r1
 8005f1c:	fa00 f101 	lsl.w	r1, r0, r1
 8005f20:	428c      	cmp	r4, r1
 8005f22:	d10b      	bne.n	8005f3c <__any_on+0x3e>
 8005f24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d803      	bhi.n	8005f34 <__any_on+0x36>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	bd10      	pop	{r4, pc}
 8005f30:	4603      	mov	r3, r0
 8005f32:	e7f7      	b.n	8005f24 <__any_on+0x26>
 8005f34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	d0f5      	beq.n	8005f28 <__any_on+0x2a>
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	e7f6      	b.n	8005f2e <__any_on+0x30>

08005f40 <sulp>:
 8005f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f44:	460f      	mov	r7, r1
 8005f46:	4690      	mov	r8, r2
 8005f48:	f7ff fec6 	bl	8005cd8 <__ulp>
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	f1b8 0f00 	cmp.w	r8, #0
 8005f54:	d011      	beq.n	8005f7a <sulp+0x3a>
 8005f56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005f5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dd0b      	ble.n	8005f7a <sulp+0x3a>
 8005f62:	2400      	movs	r4, #0
 8005f64:	051b      	lsls	r3, r3, #20
 8005f66:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005f6a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005f6e:	4622      	mov	r2, r4
 8005f70:	462b      	mov	r3, r5
 8005f72:	f7fa fab1 	bl	80004d8 <__aeabi_dmul>
 8005f76:	4604      	mov	r4, r0
 8005f78:	460d      	mov	r5, r1
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f82:	0000      	movs	r0, r0
 8005f84:	0000      	movs	r0, r0
	...

08005f88 <_strtod_l>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	b09f      	sub	sp, #124	@ 0x7c
 8005f8e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005f90:	2200      	movs	r2, #0
 8005f92:	460c      	mov	r4, r1
 8005f94:	921a      	str	r2, [sp, #104]	@ 0x68
 8005f96:	f04f 0a00 	mov.w	sl, #0
 8005f9a:	f04f 0b00 	mov.w	fp, #0
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	9005      	str	r0, [sp, #20]
 8005fa2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fa4:	7811      	ldrb	r1, [r2, #0]
 8005fa6:	292b      	cmp	r1, #43	@ 0x2b
 8005fa8:	d048      	beq.n	800603c <_strtod_l+0xb4>
 8005faa:	d836      	bhi.n	800601a <_strtod_l+0x92>
 8005fac:	290d      	cmp	r1, #13
 8005fae:	d830      	bhi.n	8006012 <_strtod_l+0x8a>
 8005fb0:	2908      	cmp	r1, #8
 8005fb2:	d830      	bhi.n	8006016 <_strtod_l+0x8e>
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	d039      	beq.n	800602c <_strtod_l+0xa4>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005fbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005fbe:	782a      	ldrb	r2, [r5, #0]
 8005fc0:	2a30      	cmp	r2, #48	@ 0x30
 8005fc2:	f040 80b1 	bne.w	8006128 <_strtod_l+0x1a0>
 8005fc6:	786a      	ldrb	r2, [r5, #1]
 8005fc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005fcc:	2a58      	cmp	r2, #88	@ 0x58
 8005fce:	d16c      	bne.n	80060aa <_strtod_l+0x122>
 8005fd0:	9302      	str	r3, [sp, #8]
 8005fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fd4:	4a8e      	ldr	r2, [pc, #568]	@ (8006210 <_strtod_l+0x288>)
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	ab1a      	add	r3, sp, #104	@ 0x68
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	9805      	ldr	r0, [sp, #20]
 8005fde:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005fe0:	a919      	add	r1, sp, #100	@ 0x64
 8005fe2:	f001 f899 	bl	8007118 <__gethex>
 8005fe6:	f010 060f 	ands.w	r6, r0, #15
 8005fea:	4604      	mov	r4, r0
 8005fec:	d005      	beq.n	8005ffa <_strtod_l+0x72>
 8005fee:	2e06      	cmp	r6, #6
 8005ff0:	d126      	bne.n	8006040 <_strtod_l+0xb8>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	3501      	adds	r5, #1
 8005ff6:	9519      	str	r5, [sp, #100]	@ 0x64
 8005ff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ffa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 8584 	bne.w	8006b0a <_strtod_l+0xb82>
 8006002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006004:	b1bb      	cbz	r3, 8006036 <_strtod_l+0xae>
 8006006:	4650      	mov	r0, sl
 8006008:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800600c:	b01f      	add	sp, #124	@ 0x7c
 800600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006012:	2920      	cmp	r1, #32
 8006014:	d1d0      	bne.n	8005fb8 <_strtod_l+0x30>
 8006016:	3201      	adds	r2, #1
 8006018:	e7c3      	b.n	8005fa2 <_strtod_l+0x1a>
 800601a:	292d      	cmp	r1, #45	@ 0x2d
 800601c:	d1cc      	bne.n	8005fb8 <_strtod_l+0x30>
 800601e:	2101      	movs	r1, #1
 8006020:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006022:	1c51      	adds	r1, r2, #1
 8006024:	9119      	str	r1, [sp, #100]	@ 0x64
 8006026:	7852      	ldrb	r2, [r2, #1]
 8006028:	2a00      	cmp	r2, #0
 800602a:	d1c7      	bne.n	8005fbc <_strtod_l+0x34>
 800602c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800602e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006030:	2b00      	cmp	r3, #0
 8006032:	f040 8568 	bne.w	8006b06 <_strtod_l+0xb7e>
 8006036:	4650      	mov	r0, sl
 8006038:	4659      	mov	r1, fp
 800603a:	e7e7      	b.n	800600c <_strtod_l+0x84>
 800603c:	2100      	movs	r1, #0
 800603e:	e7ef      	b.n	8006020 <_strtod_l+0x98>
 8006040:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006042:	b13a      	cbz	r2, 8006054 <_strtod_l+0xcc>
 8006044:	2135      	movs	r1, #53	@ 0x35
 8006046:	a81c      	add	r0, sp, #112	@ 0x70
 8006048:	f7ff ff36 	bl	8005eb8 <__copybits>
 800604c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800604e:	9805      	ldr	r0, [sp, #20]
 8006050:	f7ff fb10 	bl	8005674 <_Bfree>
 8006054:	3e01      	subs	r6, #1
 8006056:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006058:	2e04      	cmp	r6, #4
 800605a:	d806      	bhi.n	800606a <_strtod_l+0xe2>
 800605c:	e8df f006 	tbb	[pc, r6]
 8006060:	201d0314 	.word	0x201d0314
 8006064:	14          	.byte	0x14
 8006065:	00          	.byte	0x00
 8006066:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800606a:	05e1      	lsls	r1, r4, #23
 800606c:	bf48      	it	mi
 800606e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006072:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006076:	0d1b      	lsrs	r3, r3, #20
 8006078:	051b      	lsls	r3, r3, #20
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1bd      	bne.n	8005ffa <_strtod_l+0x72>
 800607e:	f7fe fb2b 	bl	80046d8 <__errno>
 8006082:	2322      	movs	r3, #34	@ 0x22
 8006084:	6003      	str	r3, [r0, #0]
 8006086:	e7b8      	b.n	8005ffa <_strtod_l+0x72>
 8006088:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800608c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006090:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006094:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006098:	e7e7      	b.n	800606a <_strtod_l+0xe2>
 800609a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006214 <_strtod_l+0x28c>
 800609e:	e7e4      	b.n	800606a <_strtod_l+0xe2>
 80060a0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80060a4:	f04f 3aff 	mov.w	sl, #4294967295
 80060a8:	e7df      	b.n	800606a <_strtod_l+0xe2>
 80060aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b30      	cmp	r3, #48	@ 0x30
 80060b4:	d0f9      	beq.n	80060aa <_strtod_l+0x122>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d09f      	beq.n	8005ffa <_strtod_l+0x72>
 80060ba:	2301      	movs	r3, #1
 80060bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060c0:	220a      	movs	r2, #10
 80060c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80060c4:	2300      	movs	r3, #0
 80060c6:	461f      	mov	r7, r3
 80060c8:	9308      	str	r3, [sp, #32]
 80060ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80060cc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80060ce:	7805      	ldrb	r5, [r0, #0]
 80060d0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80060d4:	b2d9      	uxtb	r1, r3
 80060d6:	2909      	cmp	r1, #9
 80060d8:	d928      	bls.n	800612c <_strtod_l+0x1a4>
 80060da:	2201      	movs	r2, #1
 80060dc:	494e      	ldr	r1, [pc, #312]	@ (8006218 <_strtod_l+0x290>)
 80060de:	f000 ff4b 	bl	8006f78 <strncmp>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d032      	beq.n	800614c <_strtod_l+0x1c4>
 80060e6:	2000      	movs	r0, #0
 80060e8:	462a      	mov	r2, r5
 80060ea:	4681      	mov	r9, r0
 80060ec:	463d      	mov	r5, r7
 80060ee:	4603      	mov	r3, r0
 80060f0:	2a65      	cmp	r2, #101	@ 0x65
 80060f2:	d001      	beq.n	80060f8 <_strtod_l+0x170>
 80060f4:	2a45      	cmp	r2, #69	@ 0x45
 80060f6:	d114      	bne.n	8006122 <_strtod_l+0x19a>
 80060f8:	b91d      	cbnz	r5, 8006102 <_strtod_l+0x17a>
 80060fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060fc:	4302      	orrs	r2, r0
 80060fe:	d095      	beq.n	800602c <_strtod_l+0xa4>
 8006100:	2500      	movs	r5, #0
 8006102:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006104:	1c62      	adds	r2, r4, #1
 8006106:	9219      	str	r2, [sp, #100]	@ 0x64
 8006108:	7862      	ldrb	r2, [r4, #1]
 800610a:	2a2b      	cmp	r2, #43	@ 0x2b
 800610c:	d077      	beq.n	80061fe <_strtod_l+0x276>
 800610e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006110:	d07b      	beq.n	800620a <_strtod_l+0x282>
 8006112:	f04f 0c00 	mov.w	ip, #0
 8006116:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800611a:	2909      	cmp	r1, #9
 800611c:	f240 8082 	bls.w	8006224 <_strtod_l+0x29c>
 8006120:	9419      	str	r4, [sp, #100]	@ 0x64
 8006122:	f04f 0800 	mov.w	r8, #0
 8006126:	e0a2      	b.n	800626e <_strtod_l+0x2e6>
 8006128:	2300      	movs	r3, #0
 800612a:	e7c7      	b.n	80060bc <_strtod_l+0x134>
 800612c:	2f08      	cmp	r7, #8
 800612e:	bfd5      	itete	le
 8006130:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006132:	9908      	ldrgt	r1, [sp, #32]
 8006134:	fb02 3301 	mlale	r3, r2, r1, r3
 8006138:	fb02 3301 	mlagt	r3, r2, r1, r3
 800613c:	f100 0001 	add.w	r0, r0, #1
 8006140:	bfd4      	ite	le
 8006142:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006144:	9308      	strgt	r3, [sp, #32]
 8006146:	3701      	adds	r7, #1
 8006148:	9019      	str	r0, [sp, #100]	@ 0x64
 800614a:	e7bf      	b.n	80060cc <_strtod_l+0x144>
 800614c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	9219      	str	r2, [sp, #100]	@ 0x64
 8006152:	785a      	ldrb	r2, [r3, #1]
 8006154:	b37f      	cbz	r7, 80061b6 <_strtod_l+0x22e>
 8006156:	4681      	mov	r9, r0
 8006158:	463d      	mov	r5, r7
 800615a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800615e:	2b09      	cmp	r3, #9
 8006160:	d912      	bls.n	8006188 <_strtod_l+0x200>
 8006162:	2301      	movs	r3, #1
 8006164:	e7c4      	b.n	80060f0 <_strtod_l+0x168>
 8006166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006168:	3001      	adds	r0, #1
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	9219      	str	r2, [sp, #100]	@ 0x64
 800616e:	785a      	ldrb	r2, [r3, #1]
 8006170:	2a30      	cmp	r2, #48	@ 0x30
 8006172:	d0f8      	beq.n	8006166 <_strtod_l+0x1de>
 8006174:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006178:	2b08      	cmp	r3, #8
 800617a:	f200 84cb 	bhi.w	8006b14 <_strtod_l+0xb8c>
 800617e:	4681      	mov	r9, r0
 8006180:	2000      	movs	r0, #0
 8006182:	4605      	mov	r5, r0
 8006184:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006186:	930c      	str	r3, [sp, #48]	@ 0x30
 8006188:	3a30      	subs	r2, #48	@ 0x30
 800618a:	f100 0301 	add.w	r3, r0, #1
 800618e:	d02a      	beq.n	80061e6 <_strtod_l+0x25e>
 8006190:	4499      	add	r9, r3
 8006192:	210a      	movs	r1, #10
 8006194:	462b      	mov	r3, r5
 8006196:	eb00 0c05 	add.w	ip, r0, r5
 800619a:	4563      	cmp	r3, ip
 800619c:	d10d      	bne.n	80061ba <_strtod_l+0x232>
 800619e:	1c69      	adds	r1, r5, #1
 80061a0:	4401      	add	r1, r0
 80061a2:	4428      	add	r0, r5
 80061a4:	2808      	cmp	r0, #8
 80061a6:	dc16      	bgt.n	80061d6 <_strtod_l+0x24e>
 80061a8:	230a      	movs	r3, #10
 80061aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061ac:	fb03 2300 	mla	r3, r3, r0, r2
 80061b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b2:	2300      	movs	r3, #0
 80061b4:	e018      	b.n	80061e8 <_strtod_l+0x260>
 80061b6:	4638      	mov	r0, r7
 80061b8:	e7da      	b.n	8006170 <_strtod_l+0x1e8>
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	f103 0301 	add.w	r3, r3, #1
 80061c0:	dc03      	bgt.n	80061ca <_strtod_l+0x242>
 80061c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80061c4:	434e      	muls	r6, r1
 80061c6:	960a      	str	r6, [sp, #40]	@ 0x28
 80061c8:	e7e7      	b.n	800619a <_strtod_l+0x212>
 80061ca:	2b10      	cmp	r3, #16
 80061cc:	bfde      	ittt	le
 80061ce:	9e08      	ldrle	r6, [sp, #32]
 80061d0:	434e      	mulle	r6, r1
 80061d2:	9608      	strle	r6, [sp, #32]
 80061d4:	e7e1      	b.n	800619a <_strtod_l+0x212>
 80061d6:	280f      	cmp	r0, #15
 80061d8:	dceb      	bgt.n	80061b2 <_strtod_l+0x22a>
 80061da:	230a      	movs	r3, #10
 80061dc:	9808      	ldr	r0, [sp, #32]
 80061de:	fb03 2300 	mla	r3, r3, r0, r2
 80061e2:	9308      	str	r3, [sp, #32]
 80061e4:	e7e5      	b.n	80061b2 <_strtod_l+0x22a>
 80061e6:	4629      	mov	r1, r5
 80061e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061ea:	460d      	mov	r5, r1
 80061ec:	1c50      	adds	r0, r2, #1
 80061ee:	9019      	str	r0, [sp, #100]	@ 0x64
 80061f0:	7852      	ldrb	r2, [r2, #1]
 80061f2:	4618      	mov	r0, r3
 80061f4:	e7b1      	b.n	800615a <_strtod_l+0x1d2>
 80061f6:	f04f 0900 	mov.w	r9, #0
 80061fa:	2301      	movs	r3, #1
 80061fc:	e77d      	b.n	80060fa <_strtod_l+0x172>
 80061fe:	f04f 0c00 	mov.w	ip, #0
 8006202:	1ca2      	adds	r2, r4, #2
 8006204:	9219      	str	r2, [sp, #100]	@ 0x64
 8006206:	78a2      	ldrb	r2, [r4, #2]
 8006208:	e785      	b.n	8006116 <_strtod_l+0x18e>
 800620a:	f04f 0c01 	mov.w	ip, #1
 800620e:	e7f8      	b.n	8006202 <_strtod_l+0x27a>
 8006210:	08008f00 	.word	0x08008f00
 8006214:	7ff00000 	.word	0x7ff00000
 8006218:	08008ee8 	.word	0x08008ee8
 800621c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800621e:	1c51      	adds	r1, r2, #1
 8006220:	9119      	str	r1, [sp, #100]	@ 0x64
 8006222:	7852      	ldrb	r2, [r2, #1]
 8006224:	2a30      	cmp	r2, #48	@ 0x30
 8006226:	d0f9      	beq.n	800621c <_strtod_l+0x294>
 8006228:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800622c:	2908      	cmp	r1, #8
 800622e:	f63f af78 	bhi.w	8006122 <_strtod_l+0x19a>
 8006232:	f04f 080a 	mov.w	r8, #10
 8006236:	3a30      	subs	r2, #48	@ 0x30
 8006238:	920e      	str	r2, [sp, #56]	@ 0x38
 800623a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800623c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800623e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006240:	1c56      	adds	r6, r2, #1
 8006242:	9619      	str	r6, [sp, #100]	@ 0x64
 8006244:	7852      	ldrb	r2, [r2, #1]
 8006246:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800624a:	f1be 0f09 	cmp.w	lr, #9
 800624e:	d939      	bls.n	80062c4 <_strtod_l+0x33c>
 8006250:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006252:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006256:	1a76      	subs	r6, r6, r1
 8006258:	2e08      	cmp	r6, #8
 800625a:	dc03      	bgt.n	8006264 <_strtod_l+0x2dc>
 800625c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800625e:	4588      	cmp	r8, r1
 8006260:	bfa8      	it	ge
 8006262:	4688      	movge	r8, r1
 8006264:	f1bc 0f00 	cmp.w	ip, #0
 8006268:	d001      	beq.n	800626e <_strtod_l+0x2e6>
 800626a:	f1c8 0800 	rsb	r8, r8, #0
 800626e:	2d00      	cmp	r5, #0
 8006270:	d14e      	bne.n	8006310 <_strtod_l+0x388>
 8006272:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006274:	4308      	orrs	r0, r1
 8006276:	f47f aec0 	bne.w	8005ffa <_strtod_l+0x72>
 800627a:	2b00      	cmp	r3, #0
 800627c:	f47f aed6 	bne.w	800602c <_strtod_l+0xa4>
 8006280:	2a69      	cmp	r2, #105	@ 0x69
 8006282:	d028      	beq.n	80062d6 <_strtod_l+0x34e>
 8006284:	dc25      	bgt.n	80062d2 <_strtod_l+0x34a>
 8006286:	2a49      	cmp	r2, #73	@ 0x49
 8006288:	d025      	beq.n	80062d6 <_strtod_l+0x34e>
 800628a:	2a4e      	cmp	r2, #78	@ 0x4e
 800628c:	f47f aece 	bne.w	800602c <_strtod_l+0xa4>
 8006290:	499a      	ldr	r1, [pc, #616]	@ (80064fc <_strtod_l+0x574>)
 8006292:	a819      	add	r0, sp, #100	@ 0x64
 8006294:	f001 f962 	bl	800755c <__match>
 8006298:	2800      	cmp	r0, #0
 800629a:	f43f aec7 	beq.w	800602c <_strtod_l+0xa4>
 800629e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b28      	cmp	r3, #40	@ 0x28
 80062a4:	d12e      	bne.n	8006304 <_strtod_l+0x37c>
 80062a6:	4996      	ldr	r1, [pc, #600]	@ (8006500 <_strtod_l+0x578>)
 80062a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80062aa:	a819      	add	r0, sp, #100	@ 0x64
 80062ac:	f001 f96a 	bl	8007584 <__hexnan>
 80062b0:	2805      	cmp	r0, #5
 80062b2:	d127      	bne.n	8006304 <_strtod_l+0x37c>
 80062b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80062b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80062ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80062be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80062c2:	e69a      	b.n	8005ffa <_strtod_l+0x72>
 80062c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80062c6:	fb08 2101 	mla	r1, r8, r1, r2
 80062ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80062ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80062d0:	e7b5      	b.n	800623e <_strtod_l+0x2b6>
 80062d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80062d4:	e7da      	b.n	800628c <_strtod_l+0x304>
 80062d6:	498b      	ldr	r1, [pc, #556]	@ (8006504 <_strtod_l+0x57c>)
 80062d8:	a819      	add	r0, sp, #100	@ 0x64
 80062da:	f001 f93f 	bl	800755c <__match>
 80062de:	2800      	cmp	r0, #0
 80062e0:	f43f aea4 	beq.w	800602c <_strtod_l+0xa4>
 80062e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062e6:	4988      	ldr	r1, [pc, #544]	@ (8006508 <_strtod_l+0x580>)
 80062e8:	3b01      	subs	r3, #1
 80062ea:	a819      	add	r0, sp, #100	@ 0x64
 80062ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80062ee:	f001 f935 	bl	800755c <__match>
 80062f2:	b910      	cbnz	r0, 80062fa <_strtod_l+0x372>
 80062f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062f6:	3301      	adds	r3, #1
 80062f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80062fa:	f04f 0a00 	mov.w	sl, #0
 80062fe:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800650c <_strtod_l+0x584>
 8006302:	e67a      	b.n	8005ffa <_strtod_l+0x72>
 8006304:	4882      	ldr	r0, [pc, #520]	@ (8006510 <_strtod_l+0x588>)
 8006306:	f000 fe67 	bl	8006fd8 <nan>
 800630a:	4682      	mov	sl, r0
 800630c:	468b      	mov	fp, r1
 800630e:	e674      	b.n	8005ffa <_strtod_l+0x72>
 8006310:	eba8 0309 	sub.w	r3, r8, r9
 8006314:	2f00      	cmp	r7, #0
 8006316:	bf08      	it	eq
 8006318:	462f      	moveq	r7, r5
 800631a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800631c:	2d10      	cmp	r5, #16
 800631e:	462c      	mov	r4, r5
 8006320:	9309      	str	r3, [sp, #36]	@ 0x24
 8006322:	bfa8      	it	ge
 8006324:	2410      	movge	r4, #16
 8006326:	f7fa f85d 	bl	80003e4 <__aeabi_ui2d>
 800632a:	2d09      	cmp	r5, #9
 800632c:	4682      	mov	sl, r0
 800632e:	468b      	mov	fp, r1
 8006330:	dc11      	bgt.n	8006356 <_strtod_l+0x3ce>
 8006332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	f43f ae60 	beq.w	8005ffa <_strtod_l+0x72>
 800633a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800633c:	dd76      	ble.n	800642c <_strtod_l+0x4a4>
 800633e:	2b16      	cmp	r3, #22
 8006340:	dc5d      	bgt.n	80063fe <_strtod_l+0x476>
 8006342:	4974      	ldr	r1, [pc, #464]	@ (8006514 <_strtod_l+0x58c>)
 8006344:	4652      	mov	r2, sl
 8006346:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800634a:	465b      	mov	r3, fp
 800634c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006350:	f7fa f8c2 	bl	80004d8 <__aeabi_dmul>
 8006354:	e7d9      	b.n	800630a <_strtod_l+0x382>
 8006356:	4b6f      	ldr	r3, [pc, #444]	@ (8006514 <_strtod_l+0x58c>)
 8006358:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800635c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006360:	f7fa f8ba 	bl	80004d8 <__aeabi_dmul>
 8006364:	4682      	mov	sl, r0
 8006366:	9808      	ldr	r0, [sp, #32]
 8006368:	468b      	mov	fp, r1
 800636a:	f7fa f83b 	bl	80003e4 <__aeabi_ui2d>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4650      	mov	r0, sl
 8006374:	4659      	mov	r1, fp
 8006376:	f7f9 fef9 	bl	800016c <__adddf3>
 800637a:	2d0f      	cmp	r5, #15
 800637c:	4682      	mov	sl, r0
 800637e:	468b      	mov	fp, r1
 8006380:	ddd7      	ble.n	8006332 <_strtod_l+0x3aa>
 8006382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006384:	1b2c      	subs	r4, r5, r4
 8006386:	441c      	add	r4, r3
 8006388:	2c00      	cmp	r4, #0
 800638a:	f340 8096 	ble.w	80064ba <_strtod_l+0x532>
 800638e:	f014 030f 	ands.w	r3, r4, #15
 8006392:	d00a      	beq.n	80063aa <_strtod_l+0x422>
 8006394:	495f      	ldr	r1, [pc, #380]	@ (8006514 <_strtod_l+0x58c>)
 8006396:	4652      	mov	r2, sl
 8006398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800639c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a0:	465b      	mov	r3, fp
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	4682      	mov	sl, r0
 80063a8:	468b      	mov	fp, r1
 80063aa:	f034 040f 	bics.w	r4, r4, #15
 80063ae:	d073      	beq.n	8006498 <_strtod_l+0x510>
 80063b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80063b4:	dd48      	ble.n	8006448 <_strtod_l+0x4c0>
 80063b6:	2400      	movs	r4, #0
 80063b8:	46a0      	mov	r8, r4
 80063ba:	46a1      	mov	r9, r4
 80063bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80063be:	2322      	movs	r3, #34	@ 0x22
 80063c0:	f04f 0a00 	mov.w	sl, #0
 80063c4:	9a05      	ldr	r2, [sp, #20]
 80063c6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800650c <_strtod_l+0x584>
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f43f ae13 	beq.w	8005ffa <_strtod_l+0x72>
 80063d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063d6:	9805      	ldr	r0, [sp, #20]
 80063d8:	f7ff f94c 	bl	8005674 <_Bfree>
 80063dc:	4649      	mov	r1, r9
 80063de:	9805      	ldr	r0, [sp, #20]
 80063e0:	f7ff f948 	bl	8005674 <_Bfree>
 80063e4:	4641      	mov	r1, r8
 80063e6:	9805      	ldr	r0, [sp, #20]
 80063e8:	f7ff f944 	bl	8005674 <_Bfree>
 80063ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063ee:	9805      	ldr	r0, [sp, #20]
 80063f0:	f7ff f940 	bl	8005674 <_Bfree>
 80063f4:	4621      	mov	r1, r4
 80063f6:	9805      	ldr	r0, [sp, #20]
 80063f8:	f7ff f93c 	bl	8005674 <_Bfree>
 80063fc:	e5fd      	b.n	8005ffa <_strtod_l+0x72>
 80063fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006400:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006404:	4293      	cmp	r3, r2
 8006406:	dbbc      	blt.n	8006382 <_strtod_l+0x3fa>
 8006408:	4c42      	ldr	r4, [pc, #264]	@ (8006514 <_strtod_l+0x58c>)
 800640a:	f1c5 050f 	rsb	r5, r5, #15
 800640e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006412:	4652      	mov	r2, sl
 8006414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006418:	465b      	mov	r3, fp
 800641a:	f7fa f85d 	bl	80004d8 <__aeabi_dmul>
 800641e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006420:	1b5d      	subs	r5, r3, r5
 8006422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006426:	e9d4 2300 	ldrd	r2, r3, [r4]
 800642a:	e791      	b.n	8006350 <_strtod_l+0x3c8>
 800642c:	3316      	adds	r3, #22
 800642e:	dba8      	blt.n	8006382 <_strtod_l+0x3fa>
 8006430:	4b38      	ldr	r3, [pc, #224]	@ (8006514 <_strtod_l+0x58c>)
 8006432:	eba9 0808 	sub.w	r8, r9, r8
 8006436:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800643a:	4650      	mov	r0, sl
 800643c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006440:	4659      	mov	r1, fp
 8006442:	f7fa f973 	bl	800072c <__aeabi_ddiv>
 8006446:	e760      	b.n	800630a <_strtod_l+0x382>
 8006448:	4b33      	ldr	r3, [pc, #204]	@ (8006518 <_strtod_l+0x590>)
 800644a:	4650      	mov	r0, sl
 800644c:	9308      	str	r3, [sp, #32]
 800644e:	2300      	movs	r3, #0
 8006450:	4659      	mov	r1, fp
 8006452:	461e      	mov	r6, r3
 8006454:	1124      	asrs	r4, r4, #4
 8006456:	2c01      	cmp	r4, #1
 8006458:	dc21      	bgt.n	800649e <_strtod_l+0x516>
 800645a:	b10b      	cbz	r3, 8006460 <_strtod_l+0x4d8>
 800645c:	4682      	mov	sl, r0
 800645e:	468b      	mov	fp, r1
 8006460:	492d      	ldr	r1, [pc, #180]	@ (8006518 <_strtod_l+0x590>)
 8006462:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006466:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800646a:	4652      	mov	r2, sl
 800646c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006470:	465b      	mov	r3, fp
 8006472:	f7fa f831 	bl	80004d8 <__aeabi_dmul>
 8006476:	4b25      	ldr	r3, [pc, #148]	@ (800650c <_strtod_l+0x584>)
 8006478:	460a      	mov	r2, r1
 800647a:	400b      	ands	r3, r1
 800647c:	4927      	ldr	r1, [pc, #156]	@ (800651c <_strtod_l+0x594>)
 800647e:	4682      	mov	sl, r0
 8006480:	428b      	cmp	r3, r1
 8006482:	d898      	bhi.n	80063b6 <_strtod_l+0x42e>
 8006484:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006488:	428b      	cmp	r3, r1
 800648a:	bf86      	itte	hi
 800648c:	f04f 3aff 	movhi.w	sl, #4294967295
 8006490:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006520 <_strtod_l+0x598>
 8006494:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006498:	2300      	movs	r3, #0
 800649a:	9308      	str	r3, [sp, #32]
 800649c:	e07a      	b.n	8006594 <_strtod_l+0x60c>
 800649e:	07e2      	lsls	r2, r4, #31
 80064a0:	d505      	bpl.n	80064ae <_strtod_l+0x526>
 80064a2:	9b08      	ldr	r3, [sp, #32]
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f7fa f816 	bl	80004d8 <__aeabi_dmul>
 80064ac:	2301      	movs	r3, #1
 80064ae:	9a08      	ldr	r2, [sp, #32]
 80064b0:	3601      	adds	r6, #1
 80064b2:	3208      	adds	r2, #8
 80064b4:	1064      	asrs	r4, r4, #1
 80064b6:	9208      	str	r2, [sp, #32]
 80064b8:	e7cd      	b.n	8006456 <_strtod_l+0x4ce>
 80064ba:	d0ed      	beq.n	8006498 <_strtod_l+0x510>
 80064bc:	4264      	negs	r4, r4
 80064be:	f014 020f 	ands.w	r2, r4, #15
 80064c2:	d00a      	beq.n	80064da <_strtod_l+0x552>
 80064c4:	4b13      	ldr	r3, [pc, #76]	@ (8006514 <_strtod_l+0x58c>)
 80064c6:	4650      	mov	r0, sl
 80064c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064cc:	4659      	mov	r1, fp
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	f7fa f92b 	bl	800072c <__aeabi_ddiv>
 80064d6:	4682      	mov	sl, r0
 80064d8:	468b      	mov	fp, r1
 80064da:	1124      	asrs	r4, r4, #4
 80064dc:	d0dc      	beq.n	8006498 <_strtod_l+0x510>
 80064de:	2c1f      	cmp	r4, #31
 80064e0:	dd20      	ble.n	8006524 <_strtod_l+0x59c>
 80064e2:	2400      	movs	r4, #0
 80064e4:	46a0      	mov	r8, r4
 80064e6:	46a1      	mov	r9, r4
 80064e8:	940a      	str	r4, [sp, #40]	@ 0x28
 80064ea:	2322      	movs	r3, #34	@ 0x22
 80064ec:	9a05      	ldr	r2, [sp, #20]
 80064ee:	f04f 0a00 	mov.w	sl, #0
 80064f2:	f04f 0b00 	mov.w	fp, #0
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e768      	b.n	80063cc <_strtod_l+0x444>
 80064fa:	bf00      	nop
 80064fc:	08008cd8 	.word	0x08008cd8
 8006500:	08008eec 	.word	0x08008eec
 8006504:	08008cd0 	.word	0x08008cd0
 8006508:	08008d07 	.word	0x08008d07
 800650c:	7ff00000 	.word	0x7ff00000
 8006510:	08008f94 	.word	0x08008f94
 8006514:	08008e20 	.word	0x08008e20
 8006518:	08008df8 	.word	0x08008df8
 800651c:	7ca00000 	.word	0x7ca00000
 8006520:	7fefffff 	.word	0x7fefffff
 8006524:	f014 0310 	ands.w	r3, r4, #16
 8006528:	bf18      	it	ne
 800652a:	236a      	movne	r3, #106	@ 0x6a
 800652c:	4650      	mov	r0, sl
 800652e:	9308      	str	r3, [sp, #32]
 8006530:	4659      	mov	r1, fp
 8006532:	2300      	movs	r3, #0
 8006534:	4ea9      	ldr	r6, [pc, #676]	@ (80067dc <_strtod_l+0x854>)
 8006536:	07e2      	lsls	r2, r4, #31
 8006538:	d504      	bpl.n	8006544 <_strtod_l+0x5bc>
 800653a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800653e:	f7f9 ffcb 	bl	80004d8 <__aeabi_dmul>
 8006542:	2301      	movs	r3, #1
 8006544:	1064      	asrs	r4, r4, #1
 8006546:	f106 0608 	add.w	r6, r6, #8
 800654a:	d1f4      	bne.n	8006536 <_strtod_l+0x5ae>
 800654c:	b10b      	cbz	r3, 8006552 <_strtod_l+0x5ca>
 800654e:	4682      	mov	sl, r0
 8006550:	468b      	mov	fp, r1
 8006552:	9b08      	ldr	r3, [sp, #32]
 8006554:	b1b3      	cbz	r3, 8006584 <_strtod_l+0x5fc>
 8006556:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800655a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800655e:	2b00      	cmp	r3, #0
 8006560:	4659      	mov	r1, fp
 8006562:	dd0f      	ble.n	8006584 <_strtod_l+0x5fc>
 8006564:	2b1f      	cmp	r3, #31
 8006566:	dd57      	ble.n	8006618 <_strtod_l+0x690>
 8006568:	2b34      	cmp	r3, #52	@ 0x34
 800656a:	bfd8      	it	le
 800656c:	f04f 33ff 	movle.w	r3, #4294967295
 8006570:	f04f 0a00 	mov.w	sl, #0
 8006574:	bfcf      	iteee	gt
 8006576:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800657a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800657e:	4093      	lslle	r3, r2
 8006580:	ea03 0b01 	andle.w	fp, r3, r1
 8006584:	2200      	movs	r2, #0
 8006586:	2300      	movs	r3, #0
 8006588:	4650      	mov	r0, sl
 800658a:	4659      	mov	r1, fp
 800658c:	f7fa fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006590:	2800      	cmp	r0, #0
 8006592:	d1a6      	bne.n	80064e2 <_strtod_l+0x55a>
 8006594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006596:	463a      	mov	r2, r7
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800659c:	462b      	mov	r3, r5
 800659e:	9805      	ldr	r0, [sp, #20]
 80065a0:	f7ff f8d0 	bl	8005744 <__s2b>
 80065a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f43f af05 	beq.w	80063b6 <_strtod_l+0x42e>
 80065ac:	2400      	movs	r4, #0
 80065ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065b0:	eba9 0308 	sub.w	r3, r9, r8
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	bfa8      	it	ge
 80065b8:	2300      	movge	r3, #0
 80065ba:	46a0      	mov	r8, r4
 80065bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80065be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80065c2:	9316      	str	r3, [sp, #88]	@ 0x58
 80065c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065c6:	9805      	ldr	r0, [sp, #20]
 80065c8:	6859      	ldr	r1, [r3, #4]
 80065ca:	f7ff f813 	bl	80055f4 <_Balloc>
 80065ce:	4681      	mov	r9, r0
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f43f aef4 	beq.w	80063be <_strtod_l+0x436>
 80065d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d8:	300c      	adds	r0, #12
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	f103 010c 	add.w	r1, r3, #12
 80065e0:	3202      	adds	r2, #2
 80065e2:	0092      	lsls	r2, r2, #2
 80065e4:	f000 fcea 	bl	8006fbc <memcpy>
 80065e8:	ab1c      	add	r3, sp, #112	@ 0x70
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	ab1b      	add	r3, sp, #108	@ 0x6c
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4652      	mov	r2, sl
 80065f2:	465b      	mov	r3, fp
 80065f4:	9805      	ldr	r0, [sp, #20]
 80065f6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80065fa:	f7ff fbd5 	bl	8005da8 <__d2b>
 80065fe:	901a      	str	r0, [sp, #104]	@ 0x68
 8006600:	2800      	cmp	r0, #0
 8006602:	f43f aedc 	beq.w	80063be <_strtod_l+0x436>
 8006606:	2101      	movs	r1, #1
 8006608:	9805      	ldr	r0, [sp, #20]
 800660a:	f7ff f931 	bl	8005870 <__i2b>
 800660e:	4680      	mov	r8, r0
 8006610:	b948      	cbnz	r0, 8006626 <_strtod_l+0x69e>
 8006612:	f04f 0800 	mov.w	r8, #0
 8006616:	e6d2      	b.n	80063be <_strtod_l+0x436>
 8006618:	f04f 32ff 	mov.w	r2, #4294967295
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	ea03 0a0a 	and.w	sl, r3, sl
 8006624:	e7ae      	b.n	8006584 <_strtod_l+0x5fc>
 8006626:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006628:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800662a:	2d00      	cmp	r5, #0
 800662c:	bfab      	itete	ge
 800662e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006630:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006632:	18ef      	addge	r7, r5, r3
 8006634:	1b5e      	sublt	r6, r3, r5
 8006636:	9b08      	ldr	r3, [sp, #32]
 8006638:	bfa8      	it	ge
 800663a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800663c:	eba5 0503 	sub.w	r5, r5, r3
 8006640:	4415      	add	r5, r2
 8006642:	4b67      	ldr	r3, [pc, #412]	@ (80067e0 <_strtod_l+0x858>)
 8006644:	f105 35ff 	add.w	r5, r5, #4294967295
 8006648:	bfb8      	it	lt
 800664a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800664c:	429d      	cmp	r5, r3
 800664e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006652:	da50      	bge.n	80066f6 <_strtod_l+0x76e>
 8006654:	1b5b      	subs	r3, r3, r5
 8006656:	2b1f      	cmp	r3, #31
 8006658:	f04f 0101 	mov.w	r1, #1
 800665c:	eba2 0203 	sub.w	r2, r2, r3
 8006660:	dc3d      	bgt.n	80066de <_strtod_l+0x756>
 8006662:	fa01 f303 	lsl.w	r3, r1, r3
 8006666:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006668:	2300      	movs	r3, #0
 800666a:	9310      	str	r3, [sp, #64]	@ 0x40
 800666c:	18bd      	adds	r5, r7, r2
 800666e:	9b08      	ldr	r3, [sp, #32]
 8006670:	42af      	cmp	r7, r5
 8006672:	4416      	add	r6, r2
 8006674:	441e      	add	r6, r3
 8006676:	463b      	mov	r3, r7
 8006678:	bfa8      	it	ge
 800667a:	462b      	movge	r3, r5
 800667c:	42b3      	cmp	r3, r6
 800667e:	bfa8      	it	ge
 8006680:	4633      	movge	r3, r6
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfc2      	ittt	gt
 8006686:	1aed      	subgt	r5, r5, r3
 8006688:	1af6      	subgt	r6, r6, r3
 800668a:	1aff      	subgt	r7, r7, r3
 800668c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800668e:	2b00      	cmp	r3, #0
 8006690:	dd16      	ble.n	80066c0 <_strtod_l+0x738>
 8006692:	4641      	mov	r1, r8
 8006694:	461a      	mov	r2, r3
 8006696:	9805      	ldr	r0, [sp, #20]
 8006698:	f7ff f9a8 	bl	80059ec <__pow5mult>
 800669c:	4680      	mov	r8, r0
 800669e:	2800      	cmp	r0, #0
 80066a0:	d0b7      	beq.n	8006612 <_strtod_l+0x68a>
 80066a2:	4601      	mov	r1, r0
 80066a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80066a6:	9805      	ldr	r0, [sp, #20]
 80066a8:	f7ff f8f8 	bl	800589c <__multiply>
 80066ac:	900e      	str	r0, [sp, #56]	@ 0x38
 80066ae:	2800      	cmp	r0, #0
 80066b0:	f43f ae85 	beq.w	80063be <_strtod_l+0x436>
 80066b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066b6:	9805      	ldr	r0, [sp, #20]
 80066b8:	f7fe ffdc 	bl	8005674 <_Bfree>
 80066bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066be:	931a      	str	r3, [sp, #104]	@ 0x68
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	dc1d      	bgt.n	8006700 <_strtod_l+0x778>
 80066c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd23      	ble.n	8006712 <_strtod_l+0x78a>
 80066ca:	4649      	mov	r1, r9
 80066cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80066ce:	9805      	ldr	r0, [sp, #20]
 80066d0:	f7ff f98c 	bl	80059ec <__pow5mult>
 80066d4:	4681      	mov	r9, r0
 80066d6:	b9e0      	cbnz	r0, 8006712 <_strtod_l+0x78a>
 80066d8:	f04f 0900 	mov.w	r9, #0
 80066dc:	e66f      	b.n	80063be <_strtod_l+0x436>
 80066de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80066e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80066e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80066ea:	35e2      	adds	r5, #226	@ 0xe2
 80066ec:	fa01 f305 	lsl.w	r3, r1, r5
 80066f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80066f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80066f4:	e7ba      	b.n	800666c <_strtod_l+0x6e4>
 80066f6:	2300      	movs	r3, #0
 80066f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80066fa:	2301      	movs	r3, #1
 80066fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066fe:	e7b5      	b.n	800666c <_strtod_l+0x6e4>
 8006700:	462a      	mov	r2, r5
 8006702:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006704:	9805      	ldr	r0, [sp, #20]
 8006706:	f7ff f9cb 	bl	8005aa0 <__lshift>
 800670a:	901a      	str	r0, [sp, #104]	@ 0x68
 800670c:	2800      	cmp	r0, #0
 800670e:	d1d9      	bne.n	80066c4 <_strtod_l+0x73c>
 8006710:	e655      	b.n	80063be <_strtod_l+0x436>
 8006712:	2e00      	cmp	r6, #0
 8006714:	dd07      	ble.n	8006726 <_strtod_l+0x79e>
 8006716:	4649      	mov	r1, r9
 8006718:	4632      	mov	r2, r6
 800671a:	9805      	ldr	r0, [sp, #20]
 800671c:	f7ff f9c0 	bl	8005aa0 <__lshift>
 8006720:	4681      	mov	r9, r0
 8006722:	2800      	cmp	r0, #0
 8006724:	d0d8      	beq.n	80066d8 <_strtod_l+0x750>
 8006726:	2f00      	cmp	r7, #0
 8006728:	dd08      	ble.n	800673c <_strtod_l+0x7b4>
 800672a:	4641      	mov	r1, r8
 800672c:	463a      	mov	r2, r7
 800672e:	9805      	ldr	r0, [sp, #20]
 8006730:	f7ff f9b6 	bl	8005aa0 <__lshift>
 8006734:	4680      	mov	r8, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	f43f ae41 	beq.w	80063be <_strtod_l+0x436>
 800673c:	464a      	mov	r2, r9
 800673e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006740:	9805      	ldr	r0, [sp, #20]
 8006742:	f7ff fa35 	bl	8005bb0 <__mdiff>
 8006746:	4604      	mov	r4, r0
 8006748:	2800      	cmp	r0, #0
 800674a:	f43f ae38 	beq.w	80063be <_strtod_l+0x436>
 800674e:	68c3      	ldr	r3, [r0, #12]
 8006750:	4641      	mov	r1, r8
 8006752:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006754:	2300      	movs	r3, #0
 8006756:	60c3      	str	r3, [r0, #12]
 8006758:	f7ff fa0e 	bl	8005b78 <__mcmp>
 800675c:	2800      	cmp	r0, #0
 800675e:	da45      	bge.n	80067ec <_strtod_l+0x864>
 8006760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006762:	ea53 030a 	orrs.w	r3, r3, sl
 8006766:	d16b      	bne.n	8006840 <_strtod_l+0x8b8>
 8006768:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800676c:	2b00      	cmp	r3, #0
 800676e:	d167      	bne.n	8006840 <_strtod_l+0x8b8>
 8006770:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006774:	0d1b      	lsrs	r3, r3, #20
 8006776:	051b      	lsls	r3, r3, #20
 8006778:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800677c:	d960      	bls.n	8006840 <_strtod_l+0x8b8>
 800677e:	6963      	ldr	r3, [r4, #20]
 8006780:	b913      	cbnz	r3, 8006788 <_strtod_l+0x800>
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	2b01      	cmp	r3, #1
 8006786:	dd5b      	ble.n	8006840 <_strtod_l+0x8b8>
 8006788:	4621      	mov	r1, r4
 800678a:	2201      	movs	r2, #1
 800678c:	9805      	ldr	r0, [sp, #20]
 800678e:	f7ff f987 	bl	8005aa0 <__lshift>
 8006792:	4641      	mov	r1, r8
 8006794:	4604      	mov	r4, r0
 8006796:	f7ff f9ef 	bl	8005b78 <__mcmp>
 800679a:	2800      	cmp	r0, #0
 800679c:	dd50      	ble.n	8006840 <_strtod_l+0x8b8>
 800679e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067a2:	9a08      	ldr	r2, [sp, #32]
 80067a4:	0d1b      	lsrs	r3, r3, #20
 80067a6:	051b      	lsls	r3, r3, #20
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	d06a      	beq.n	8006882 <_strtod_l+0x8fa>
 80067ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80067b0:	d867      	bhi.n	8006882 <_strtod_l+0x8fa>
 80067b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80067b6:	f67f ae98 	bls.w	80064ea <_strtod_l+0x562>
 80067ba:	4650      	mov	r0, sl
 80067bc:	4659      	mov	r1, fp
 80067be:	4b09      	ldr	r3, [pc, #36]	@ (80067e4 <_strtod_l+0x85c>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	f7f9 fe89 	bl	80004d8 <__aeabi_dmul>
 80067c6:	4b08      	ldr	r3, [pc, #32]	@ (80067e8 <_strtod_l+0x860>)
 80067c8:	4682      	mov	sl, r0
 80067ca:	400b      	ands	r3, r1
 80067cc:	468b      	mov	fp, r1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f47f ae00 	bne.w	80063d4 <_strtod_l+0x44c>
 80067d4:	2322      	movs	r3, #34	@ 0x22
 80067d6:	9a05      	ldr	r2, [sp, #20]
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e5fb      	b.n	80063d4 <_strtod_l+0x44c>
 80067dc:	08008f18 	.word	0x08008f18
 80067e0:	fffffc02 	.word	0xfffffc02
 80067e4:	39500000 	.word	0x39500000
 80067e8:	7ff00000 	.word	0x7ff00000
 80067ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80067f0:	d165      	bne.n	80068be <_strtod_l+0x936>
 80067f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80067f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067f8:	b35a      	cbz	r2, 8006852 <_strtod_l+0x8ca>
 80067fa:	4a99      	ldr	r2, [pc, #612]	@ (8006a60 <_strtod_l+0xad8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d12b      	bne.n	8006858 <_strtod_l+0x8d0>
 8006800:	9b08      	ldr	r3, [sp, #32]
 8006802:	4651      	mov	r1, sl
 8006804:	b303      	cbz	r3, 8006848 <_strtod_l+0x8c0>
 8006806:	465a      	mov	r2, fp
 8006808:	4b96      	ldr	r3, [pc, #600]	@ (8006a64 <_strtod_l+0xadc>)
 800680a:	4013      	ands	r3, r2
 800680c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	d81b      	bhi.n	800684e <_strtod_l+0x8c6>
 8006816:	0d1b      	lsrs	r3, r3, #20
 8006818:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	4299      	cmp	r1, r3
 8006822:	d119      	bne.n	8006858 <_strtod_l+0x8d0>
 8006824:	4b90      	ldr	r3, [pc, #576]	@ (8006a68 <_strtod_l+0xae0>)
 8006826:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006828:	429a      	cmp	r2, r3
 800682a:	d102      	bne.n	8006832 <_strtod_l+0x8aa>
 800682c:	3101      	adds	r1, #1
 800682e:	f43f adc6 	beq.w	80063be <_strtod_l+0x436>
 8006832:	f04f 0a00 	mov.w	sl, #0
 8006836:	4b8b      	ldr	r3, [pc, #556]	@ (8006a64 <_strtod_l+0xadc>)
 8006838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800683a:	401a      	ands	r2, r3
 800683c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006840:	9b08      	ldr	r3, [sp, #32]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1b9      	bne.n	80067ba <_strtod_l+0x832>
 8006846:	e5c5      	b.n	80063d4 <_strtod_l+0x44c>
 8006848:	f04f 33ff 	mov.w	r3, #4294967295
 800684c:	e7e8      	b.n	8006820 <_strtod_l+0x898>
 800684e:	4613      	mov	r3, r2
 8006850:	e7e6      	b.n	8006820 <_strtod_l+0x898>
 8006852:	ea53 030a 	orrs.w	r3, r3, sl
 8006856:	d0a2      	beq.n	800679e <_strtod_l+0x816>
 8006858:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800685a:	b1db      	cbz	r3, 8006894 <_strtod_l+0x90c>
 800685c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800685e:	4213      	tst	r3, r2
 8006860:	d0ee      	beq.n	8006840 <_strtod_l+0x8b8>
 8006862:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006864:	4650      	mov	r0, sl
 8006866:	4659      	mov	r1, fp
 8006868:	9a08      	ldr	r2, [sp, #32]
 800686a:	b1bb      	cbz	r3, 800689c <_strtod_l+0x914>
 800686c:	f7ff fb68 	bl	8005f40 <sulp>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006878:	f7f9 fc78 	bl	800016c <__adddf3>
 800687c:	4682      	mov	sl, r0
 800687e:	468b      	mov	fp, r1
 8006880:	e7de      	b.n	8006840 <_strtod_l+0x8b8>
 8006882:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006886:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800688a:	f04f 3aff 	mov.w	sl, #4294967295
 800688e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006892:	e7d5      	b.n	8006840 <_strtod_l+0x8b8>
 8006894:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006896:	ea13 0f0a 	tst.w	r3, sl
 800689a:	e7e1      	b.n	8006860 <_strtod_l+0x8d8>
 800689c:	f7ff fb50 	bl	8005f40 <sulp>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068a8:	f7f9 fc5e 	bl	8000168 <__aeabi_dsub>
 80068ac:	2200      	movs	r2, #0
 80068ae:	2300      	movs	r3, #0
 80068b0:	4682      	mov	sl, r0
 80068b2:	468b      	mov	fp, r1
 80068b4:	f7fa f878 	bl	80009a8 <__aeabi_dcmpeq>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d0c1      	beq.n	8006840 <_strtod_l+0x8b8>
 80068bc:	e615      	b.n	80064ea <_strtod_l+0x562>
 80068be:	4641      	mov	r1, r8
 80068c0:	4620      	mov	r0, r4
 80068c2:	f7ff fac9 	bl	8005e58 <__ratio>
 80068c6:	2200      	movs	r2, #0
 80068c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80068cc:	4606      	mov	r6, r0
 80068ce:	460f      	mov	r7, r1
 80068d0:	f7fa f87e 	bl	80009d0 <__aeabi_dcmple>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d06d      	beq.n	80069b4 <_strtod_l+0xa2c>
 80068d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d178      	bne.n	80069d0 <_strtod_l+0xa48>
 80068de:	f1ba 0f00 	cmp.w	sl, #0
 80068e2:	d156      	bne.n	8006992 <_strtod_l+0xa0a>
 80068e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d158      	bne.n	80069a0 <_strtod_l+0xa18>
 80068ee:	2200      	movs	r2, #0
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	4b5d      	ldr	r3, [pc, #372]	@ (8006a6c <_strtod_l+0xae4>)
 80068f6:	f7fa f861 	bl	80009bc <__aeabi_dcmplt>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d157      	bne.n	80069ae <_strtod_l+0xa26>
 80068fe:	4630      	mov	r0, r6
 8006900:	4639      	mov	r1, r7
 8006902:	2200      	movs	r2, #0
 8006904:	4b5a      	ldr	r3, [pc, #360]	@ (8006a70 <_strtod_l+0xae8>)
 8006906:	f7f9 fde7 	bl	80004d8 <__aeabi_dmul>
 800690a:	4606      	mov	r6, r0
 800690c:	460f      	mov	r7, r1
 800690e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006912:	9606      	str	r6, [sp, #24]
 8006914:	9307      	str	r3, [sp, #28]
 8006916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800691a:	4d52      	ldr	r5, [pc, #328]	@ (8006a64 <_strtod_l+0xadc>)
 800691c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006922:	401d      	ands	r5, r3
 8006924:	4b53      	ldr	r3, [pc, #332]	@ (8006a74 <_strtod_l+0xaec>)
 8006926:	429d      	cmp	r5, r3
 8006928:	f040 80aa 	bne.w	8006a80 <_strtod_l+0xaf8>
 800692c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800692e:	4650      	mov	r0, sl
 8006930:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006934:	4659      	mov	r1, fp
 8006936:	f7ff f9cf 	bl	8005cd8 <__ulp>
 800693a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800693e:	f7f9 fdcb 	bl	80004d8 <__aeabi_dmul>
 8006942:	4652      	mov	r2, sl
 8006944:	465b      	mov	r3, fp
 8006946:	f7f9 fc11 	bl	800016c <__adddf3>
 800694a:	460b      	mov	r3, r1
 800694c:	4945      	ldr	r1, [pc, #276]	@ (8006a64 <_strtod_l+0xadc>)
 800694e:	4a4a      	ldr	r2, [pc, #296]	@ (8006a78 <_strtod_l+0xaf0>)
 8006950:	4019      	ands	r1, r3
 8006952:	4291      	cmp	r1, r2
 8006954:	4682      	mov	sl, r0
 8006956:	d942      	bls.n	80069de <_strtod_l+0xa56>
 8006958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800695a:	4b43      	ldr	r3, [pc, #268]	@ (8006a68 <_strtod_l+0xae0>)
 800695c:	429a      	cmp	r2, r3
 800695e:	d103      	bne.n	8006968 <_strtod_l+0x9e0>
 8006960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006962:	3301      	adds	r3, #1
 8006964:	f43f ad2b 	beq.w	80063be <_strtod_l+0x436>
 8006968:	f04f 3aff 	mov.w	sl, #4294967295
 800696c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006a68 <_strtod_l+0xae0>
 8006970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006972:	9805      	ldr	r0, [sp, #20]
 8006974:	f7fe fe7e 	bl	8005674 <_Bfree>
 8006978:	4649      	mov	r1, r9
 800697a:	9805      	ldr	r0, [sp, #20]
 800697c:	f7fe fe7a 	bl	8005674 <_Bfree>
 8006980:	4641      	mov	r1, r8
 8006982:	9805      	ldr	r0, [sp, #20]
 8006984:	f7fe fe76 	bl	8005674 <_Bfree>
 8006988:	4621      	mov	r1, r4
 800698a:	9805      	ldr	r0, [sp, #20]
 800698c:	f7fe fe72 	bl	8005674 <_Bfree>
 8006990:	e618      	b.n	80065c4 <_strtod_l+0x63c>
 8006992:	f1ba 0f01 	cmp.w	sl, #1
 8006996:	d103      	bne.n	80069a0 <_strtod_l+0xa18>
 8006998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800699a:	2b00      	cmp	r3, #0
 800699c:	f43f ada5 	beq.w	80064ea <_strtod_l+0x562>
 80069a0:	2200      	movs	r2, #0
 80069a2:	4b36      	ldr	r3, [pc, #216]	@ (8006a7c <_strtod_l+0xaf4>)
 80069a4:	2600      	movs	r6, #0
 80069a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069aa:	4f30      	ldr	r7, [pc, #192]	@ (8006a6c <_strtod_l+0xae4>)
 80069ac:	e7b3      	b.n	8006916 <_strtod_l+0x98e>
 80069ae:	2600      	movs	r6, #0
 80069b0:	4f2f      	ldr	r7, [pc, #188]	@ (8006a70 <_strtod_l+0xae8>)
 80069b2:	e7ac      	b.n	800690e <_strtod_l+0x986>
 80069b4:	4630      	mov	r0, r6
 80069b6:	4639      	mov	r1, r7
 80069b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006a70 <_strtod_l+0xae8>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	f7f9 fd8c 	bl	80004d8 <__aeabi_dmul>
 80069c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069c2:	4606      	mov	r6, r0
 80069c4:	460f      	mov	r7, r1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0a1      	beq.n	800690e <_strtod_l+0x986>
 80069ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80069ce:	e7a2      	b.n	8006916 <_strtod_l+0x98e>
 80069d0:	2200      	movs	r2, #0
 80069d2:	4b26      	ldr	r3, [pc, #152]	@ (8006a6c <_strtod_l+0xae4>)
 80069d4:	4616      	mov	r6, r2
 80069d6:	461f      	mov	r7, r3
 80069d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069dc:	e79b      	b.n	8006916 <_strtod_l+0x98e>
 80069de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1c1      	bne.n	8006970 <_strtod_l+0x9e8>
 80069ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069f0:	0d1b      	lsrs	r3, r3, #20
 80069f2:	051b      	lsls	r3, r3, #20
 80069f4:	429d      	cmp	r5, r3
 80069f6:	d1bb      	bne.n	8006970 <_strtod_l+0x9e8>
 80069f8:	4630      	mov	r0, r6
 80069fa:	4639      	mov	r1, r7
 80069fc:	f7fa f8b4 	bl	8000b68 <__aeabi_d2lz>
 8006a00:	f7f9 fd3c 	bl	800047c <__aeabi_l2d>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4630      	mov	r0, r6
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	f7f9 fbac 	bl	8000168 <__aeabi_dsub>
 8006a10:	460b      	mov	r3, r1
 8006a12:	4602      	mov	r2, r0
 8006a14:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006a18:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a1e:	ea46 060a 	orr.w	r6, r6, sl
 8006a22:	431e      	orrs	r6, r3
 8006a24:	d069      	beq.n	8006afa <_strtod_l+0xb72>
 8006a26:	a30a      	add	r3, pc, #40	@ (adr r3, 8006a50 <_strtod_l+0xac8>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 ffc6 	bl	80009bc <__aeabi_dcmplt>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f47f accf 	bne.w	80063d4 <_strtod_l+0x44c>
 8006a36:	a308      	add	r3, pc, #32	@ (adr r3, 8006a58 <_strtod_l+0xad0>)
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a40:	f7f9 ffda 	bl	80009f8 <__aeabi_dcmpgt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d093      	beq.n	8006970 <_strtod_l+0x9e8>
 8006a48:	e4c4      	b.n	80063d4 <_strtod_l+0x44c>
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w
 8006a50:	94a03595 	.word	0x94a03595
 8006a54:	3fdfffff 	.word	0x3fdfffff
 8006a58:	35afe535 	.word	0x35afe535
 8006a5c:	3fe00000 	.word	0x3fe00000
 8006a60:	000fffff 	.word	0x000fffff
 8006a64:	7ff00000 	.word	0x7ff00000
 8006a68:	7fefffff 	.word	0x7fefffff
 8006a6c:	3ff00000 	.word	0x3ff00000
 8006a70:	3fe00000 	.word	0x3fe00000
 8006a74:	7fe00000 	.word	0x7fe00000
 8006a78:	7c9fffff 	.word	0x7c9fffff
 8006a7c:	bff00000 	.word	0xbff00000
 8006a80:	9b08      	ldr	r3, [sp, #32]
 8006a82:	b323      	cbz	r3, 8006ace <_strtod_l+0xb46>
 8006a84:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006a88:	d821      	bhi.n	8006ace <_strtod_l+0xb46>
 8006a8a:	a327      	add	r3, pc, #156	@ (adr r3, 8006b28 <_strtod_l+0xba0>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	4630      	mov	r0, r6
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7f9 ff9c 	bl	80009d0 <__aeabi_dcmple>
 8006a98:	b1a0      	cbz	r0, 8006ac4 <_strtod_l+0xb3c>
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7f9 fff3 	bl	8000a88 <__aeabi_d2uiz>
 8006aa2:	2801      	cmp	r0, #1
 8006aa4:	bf38      	it	cc
 8006aa6:	2001      	movcc	r0, #1
 8006aa8:	f7f9 fc9c 	bl	80003e4 <__aeabi_ui2d>
 8006aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006aae:	4606      	mov	r6, r0
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	b9fb      	cbnz	r3, 8006af4 <_strtod_l+0xb6c>
 8006ab4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ab8:	9014      	str	r0, [sp, #80]	@ 0x50
 8006aba:	9315      	str	r3, [sp, #84]	@ 0x54
 8006abc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006ac0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006ac4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ac6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006aca:	1b5b      	subs	r3, r3, r5
 8006acc:	9311      	str	r3, [sp, #68]	@ 0x44
 8006ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ad2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006ad6:	f7ff f8ff 	bl	8005cd8 <__ulp>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4650      	mov	r0, sl
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	f7f9 fcf9 	bl	80004d8 <__aeabi_dmul>
 8006ae6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006aea:	f7f9 fb3f 	bl	800016c <__adddf3>
 8006aee:	4682      	mov	sl, r0
 8006af0:	468b      	mov	fp, r1
 8006af2:	e776      	b.n	80069e2 <_strtod_l+0xa5a>
 8006af4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006af8:	e7e0      	b.n	8006abc <_strtod_l+0xb34>
 8006afa:	a30d      	add	r3, pc, #52	@ (adr r3, 8006b30 <_strtod_l+0xba8>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f7f9 ff5c 	bl	80009bc <__aeabi_dcmplt>
 8006b04:	e79e      	b.n	8006a44 <_strtod_l+0xabc>
 8006b06:	2300      	movs	r3, #0
 8006b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b0c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	f7ff ba77 	b.w	8006002 <_strtod_l+0x7a>
 8006b14:	2a65      	cmp	r2, #101	@ 0x65
 8006b16:	f43f ab6e 	beq.w	80061f6 <_strtod_l+0x26e>
 8006b1a:	2a45      	cmp	r2, #69	@ 0x45
 8006b1c:	f43f ab6b 	beq.w	80061f6 <_strtod_l+0x26e>
 8006b20:	2301      	movs	r3, #1
 8006b22:	f7ff bba6 	b.w	8006272 <_strtod_l+0x2ea>
 8006b26:	bf00      	nop
 8006b28:	ffc00000 	.word	0xffc00000
 8006b2c:	41dfffff 	.word	0x41dfffff
 8006b30:	94a03595 	.word	0x94a03595
 8006b34:	3fcfffff 	.word	0x3fcfffff

08006b38 <_strtod_r>:
 8006b38:	4b01      	ldr	r3, [pc, #4]	@ (8006b40 <_strtod_r+0x8>)
 8006b3a:	f7ff ba25 	b.w	8005f88 <_strtod_l>
 8006b3e:	bf00      	nop
 8006b40:	20000070 	.word	0x20000070

08006b44 <__ssputs_r>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	461f      	mov	r7, r3
 8006b4a:	688e      	ldr	r6, [r1, #8]
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	42be      	cmp	r6, r7
 8006b50:	460c      	mov	r4, r1
 8006b52:	4690      	mov	r8, r2
 8006b54:	680b      	ldr	r3, [r1, #0]
 8006b56:	d82d      	bhi.n	8006bb4 <__ssputs_r+0x70>
 8006b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b60:	d026      	beq.n	8006bb0 <__ssputs_r+0x6c>
 8006b62:	6965      	ldr	r5, [r4, #20]
 8006b64:	6909      	ldr	r1, [r1, #16]
 8006b66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b6a:	eba3 0901 	sub.w	r9, r3, r1
 8006b6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b72:	1c7b      	adds	r3, r7, #1
 8006b74:	444b      	add	r3, r9
 8006b76:	106d      	asrs	r5, r5, #1
 8006b78:	429d      	cmp	r5, r3
 8006b7a:	bf38      	it	cc
 8006b7c:	461d      	movcc	r5, r3
 8006b7e:	0553      	lsls	r3, r2, #21
 8006b80:	d527      	bpl.n	8006bd2 <__ssputs_r+0x8e>
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7fe fcaa 	bl	80054dc <_malloc_r>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	b360      	cbz	r0, 8006be6 <__ssputs_r+0xa2>
 8006b8c:	464a      	mov	r2, r9
 8006b8e:	6921      	ldr	r1, [r4, #16]
 8006b90:	f000 fa14 	bl	8006fbc <memcpy>
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	6126      	str	r6, [r4, #16]
 8006ba2:	444e      	add	r6, r9
 8006ba4:	6026      	str	r6, [r4, #0]
 8006ba6:	463e      	mov	r6, r7
 8006ba8:	6165      	str	r5, [r4, #20]
 8006baa:	eba5 0509 	sub.w	r5, r5, r9
 8006bae:	60a5      	str	r5, [r4, #8]
 8006bb0:	42be      	cmp	r6, r7
 8006bb2:	d900      	bls.n	8006bb6 <__ssputs_r+0x72>
 8006bb4:	463e      	mov	r6, r7
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	4641      	mov	r1, r8
 8006bba:	6820      	ldr	r0, [r4, #0]
 8006bbc:	f000 f9c2 	bl	8006f44 <memmove>
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	1b9b      	subs	r3, r3, r6
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	4433      	add	r3, r6
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	f000 fd83 	bl	80076de <_realloc_r>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d1e0      	bne.n	8006ba0 <__ssputs_r+0x5c>
 8006bde:	4650      	mov	r0, sl
 8006be0:	6921      	ldr	r1, [r4, #16]
 8006be2:	f7fe fc09 	bl	80053f8 <_free_r>
 8006be6:	230c      	movs	r3, #12
 8006be8:	f8ca 3000 	str.w	r3, [sl]
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf6:	81a3      	strh	r3, [r4, #12]
 8006bf8:	e7e9      	b.n	8006bce <__ssputs_r+0x8a>
	...

08006bfc <_svfiprintf_r>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	4698      	mov	r8, r3
 8006c02:	898b      	ldrh	r3, [r1, #12]
 8006c04:	4607      	mov	r7, r0
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	460d      	mov	r5, r1
 8006c0a:	4614      	mov	r4, r2
 8006c0c:	b09d      	sub	sp, #116	@ 0x74
 8006c0e:	d510      	bpl.n	8006c32 <_svfiprintf_r+0x36>
 8006c10:	690b      	ldr	r3, [r1, #16]
 8006c12:	b973      	cbnz	r3, 8006c32 <_svfiprintf_r+0x36>
 8006c14:	2140      	movs	r1, #64	@ 0x40
 8006c16:	f7fe fc61 	bl	80054dc <_malloc_r>
 8006c1a:	6028      	str	r0, [r5, #0]
 8006c1c:	6128      	str	r0, [r5, #16]
 8006c1e:	b930      	cbnz	r0, 8006c2e <_svfiprintf_r+0x32>
 8006c20:	230c      	movs	r3, #12
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b01d      	add	sp, #116	@ 0x74
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	2340      	movs	r3, #64	@ 0x40
 8006c30:	616b      	str	r3, [r5, #20]
 8006c32:	2300      	movs	r3, #0
 8006c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c36:	2320      	movs	r3, #32
 8006c38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c3c:	2330      	movs	r3, #48	@ 0x30
 8006c3e:	f04f 0901 	mov.w	r9, #1
 8006c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c46:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006de0 <_svfiprintf_r+0x1e4>
 8006c4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c4e:	4623      	mov	r3, r4
 8006c50:	469a      	mov	sl, r3
 8006c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c56:	b10a      	cbz	r2, 8006c5c <_svfiprintf_r+0x60>
 8006c58:	2a25      	cmp	r2, #37	@ 0x25
 8006c5a:	d1f9      	bne.n	8006c50 <_svfiprintf_r+0x54>
 8006c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c60:	d00b      	beq.n	8006c7a <_svfiprintf_r+0x7e>
 8006c62:	465b      	mov	r3, fp
 8006c64:	4622      	mov	r2, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff ff6b 	bl	8006b44 <__ssputs_r>
 8006c6e:	3001      	adds	r0, #1
 8006c70:	f000 80a7 	beq.w	8006dc2 <_svfiprintf_r+0x1c6>
 8006c74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c76:	445a      	add	r2, fp
 8006c78:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 809f 	beq.w	8006dc2 <_svfiprintf_r+0x1c6>
 8006c84:	2300      	movs	r3, #0
 8006c86:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c8e:	f10a 0a01 	add.w	sl, sl, #1
 8006c92:	9304      	str	r3, [sp, #16]
 8006c94:	9307      	str	r3, [sp, #28]
 8006c96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c9c:	4654      	mov	r4, sl
 8006c9e:	2205      	movs	r2, #5
 8006ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca4:	484e      	ldr	r0, [pc, #312]	@ (8006de0 <_svfiprintf_r+0x1e4>)
 8006ca6:	f7fd fd44 	bl	8004732 <memchr>
 8006caa:	9a04      	ldr	r2, [sp, #16]
 8006cac:	b9d8      	cbnz	r0, 8006ce6 <_svfiprintf_r+0xea>
 8006cae:	06d0      	lsls	r0, r2, #27
 8006cb0:	bf44      	itt	mi
 8006cb2:	2320      	movmi	r3, #32
 8006cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cb8:	0711      	lsls	r1, r2, #28
 8006cba:	bf44      	itt	mi
 8006cbc:	232b      	movmi	r3, #43	@ 0x2b
 8006cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cc8:	d015      	beq.n	8006cf6 <_svfiprintf_r+0xfa>
 8006cca:	4654      	mov	r4, sl
 8006ccc:	2000      	movs	r0, #0
 8006cce:	f04f 0c0a 	mov.w	ip, #10
 8006cd2:	9a07      	ldr	r2, [sp, #28]
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cda:	3b30      	subs	r3, #48	@ 0x30
 8006cdc:	2b09      	cmp	r3, #9
 8006cde:	d94b      	bls.n	8006d78 <_svfiprintf_r+0x17c>
 8006ce0:	b1b0      	cbz	r0, 8006d10 <_svfiprintf_r+0x114>
 8006ce2:	9207      	str	r2, [sp, #28]
 8006ce4:	e014      	b.n	8006d10 <_svfiprintf_r+0x114>
 8006ce6:	eba0 0308 	sub.w	r3, r0, r8
 8006cea:	fa09 f303 	lsl.w	r3, r9, r3
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	46a2      	mov	sl, r4
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	e7d2      	b.n	8006c9c <_svfiprintf_r+0xa0>
 8006cf6:	9b03      	ldr	r3, [sp, #12]
 8006cf8:	1d19      	adds	r1, r3, #4
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	9103      	str	r1, [sp, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bfbb      	ittet	lt
 8006d02:	425b      	neglt	r3, r3
 8006d04:	f042 0202 	orrlt.w	r2, r2, #2
 8006d08:	9307      	strge	r3, [sp, #28]
 8006d0a:	9307      	strlt	r3, [sp, #28]
 8006d0c:	bfb8      	it	lt
 8006d0e:	9204      	strlt	r2, [sp, #16]
 8006d10:	7823      	ldrb	r3, [r4, #0]
 8006d12:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d14:	d10a      	bne.n	8006d2c <_svfiprintf_r+0x130>
 8006d16:	7863      	ldrb	r3, [r4, #1]
 8006d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d1a:	d132      	bne.n	8006d82 <_svfiprintf_r+0x186>
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	3402      	adds	r4, #2
 8006d20:	1d1a      	adds	r2, r3, #4
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	9203      	str	r2, [sp, #12]
 8006d26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d2a:	9305      	str	r3, [sp, #20]
 8006d2c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006de4 <_svfiprintf_r+0x1e8>
 8006d30:	2203      	movs	r2, #3
 8006d32:	4650      	mov	r0, sl
 8006d34:	7821      	ldrb	r1, [r4, #0]
 8006d36:	f7fd fcfc 	bl	8004732 <memchr>
 8006d3a:	b138      	cbz	r0, 8006d4c <_svfiprintf_r+0x150>
 8006d3c:	2240      	movs	r2, #64	@ 0x40
 8006d3e:	9b04      	ldr	r3, [sp, #16]
 8006d40:	eba0 000a 	sub.w	r0, r0, sl
 8006d44:	4082      	lsls	r2, r0
 8006d46:	4313      	orrs	r3, r2
 8006d48:	3401      	adds	r4, #1
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d50:	2206      	movs	r2, #6
 8006d52:	4825      	ldr	r0, [pc, #148]	@ (8006de8 <_svfiprintf_r+0x1ec>)
 8006d54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d58:	f7fd fceb 	bl	8004732 <memchr>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d036      	beq.n	8006dce <_svfiprintf_r+0x1d2>
 8006d60:	4b22      	ldr	r3, [pc, #136]	@ (8006dec <_svfiprintf_r+0x1f0>)
 8006d62:	bb1b      	cbnz	r3, 8006dac <_svfiprintf_r+0x1b0>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	3307      	adds	r3, #7
 8006d68:	f023 0307 	bic.w	r3, r3, #7
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	9303      	str	r3, [sp, #12]
 8006d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d72:	4433      	add	r3, r6
 8006d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d76:	e76a      	b.n	8006c4e <_svfiprintf_r+0x52>
 8006d78:	460c      	mov	r4, r1
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d80:	e7a8      	b.n	8006cd4 <_svfiprintf_r+0xd8>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f04f 0c0a 	mov.w	ip, #10
 8006d88:	4619      	mov	r1, r3
 8006d8a:	3401      	adds	r4, #1
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d94:	3a30      	subs	r2, #48	@ 0x30
 8006d96:	2a09      	cmp	r2, #9
 8006d98:	d903      	bls.n	8006da2 <_svfiprintf_r+0x1a6>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0c6      	beq.n	8006d2c <_svfiprintf_r+0x130>
 8006d9e:	9105      	str	r1, [sp, #20]
 8006da0:	e7c4      	b.n	8006d2c <_svfiprintf_r+0x130>
 8006da2:	4604      	mov	r4, r0
 8006da4:	2301      	movs	r3, #1
 8006da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006daa:	e7f0      	b.n	8006d8e <_svfiprintf_r+0x192>
 8006dac:	ab03      	add	r3, sp, #12
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	462a      	mov	r2, r5
 8006db2:	4638      	mov	r0, r7
 8006db4:	4b0e      	ldr	r3, [pc, #56]	@ (8006df0 <_svfiprintf_r+0x1f4>)
 8006db6:	a904      	add	r1, sp, #16
 8006db8:	f7fc fd48 	bl	800384c <_printf_float>
 8006dbc:	1c42      	adds	r2, r0, #1
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	d1d6      	bne.n	8006d70 <_svfiprintf_r+0x174>
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	065b      	lsls	r3, r3, #25
 8006dc6:	f53f af2d 	bmi.w	8006c24 <_svfiprintf_r+0x28>
 8006dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dcc:	e72c      	b.n	8006c28 <_svfiprintf_r+0x2c>
 8006dce:	ab03      	add	r3, sp, #12
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	462a      	mov	r2, r5
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	4b06      	ldr	r3, [pc, #24]	@ (8006df0 <_svfiprintf_r+0x1f4>)
 8006dd8:	a904      	add	r1, sp, #16
 8006dda:	f7fc ffd5 	bl	8003d88 <_printf_i>
 8006dde:	e7ed      	b.n	8006dbc <_svfiprintf_r+0x1c0>
 8006de0:	08008f40 	.word	0x08008f40
 8006de4:	08008f46 	.word	0x08008f46
 8006de8:	08008f4a 	.word	0x08008f4a
 8006dec:	0800384d 	.word	0x0800384d
 8006df0:	08006b45 	.word	0x08006b45

08006df4 <__sflush_r>:
 8006df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	0716      	lsls	r6, r2, #28
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	d454      	bmi.n	8006eac <__sflush_r+0xb8>
 8006e02:	684b      	ldr	r3, [r1, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dc02      	bgt.n	8006e0e <__sflush_r+0x1a>
 8006e08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dd48      	ble.n	8006ea0 <__sflush_r+0xac>
 8006e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e10:	2e00      	cmp	r6, #0
 8006e12:	d045      	beq.n	8006ea0 <__sflush_r+0xac>
 8006e14:	2300      	movs	r3, #0
 8006e16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e1a:	682f      	ldr	r7, [r5, #0]
 8006e1c:	6a21      	ldr	r1, [r4, #32]
 8006e1e:	602b      	str	r3, [r5, #0]
 8006e20:	d030      	beq.n	8006e84 <__sflush_r+0x90>
 8006e22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	0759      	lsls	r1, r3, #29
 8006e28:	d505      	bpl.n	8006e36 <__sflush_r+0x42>
 8006e2a:	6863      	ldr	r3, [r4, #4]
 8006e2c:	1ad2      	subs	r2, r2, r3
 8006e2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e30:	b10b      	cbz	r3, 8006e36 <__sflush_r+0x42>
 8006e32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e34:	1ad2      	subs	r2, r2, r3
 8006e36:	2300      	movs	r3, #0
 8006e38:	4628      	mov	r0, r5
 8006e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e3c:	6a21      	ldr	r1, [r4, #32]
 8006e3e:	47b0      	blx	r6
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	d106      	bne.n	8006e54 <__sflush_r+0x60>
 8006e46:	6829      	ldr	r1, [r5, #0]
 8006e48:	291d      	cmp	r1, #29
 8006e4a:	d82b      	bhi.n	8006ea4 <__sflush_r+0xb0>
 8006e4c:	4a28      	ldr	r2, [pc, #160]	@ (8006ef0 <__sflush_r+0xfc>)
 8006e4e:	410a      	asrs	r2, r1
 8006e50:	07d6      	lsls	r6, r2, #31
 8006e52:	d427      	bmi.n	8006ea4 <__sflush_r+0xb0>
 8006e54:	2200      	movs	r2, #0
 8006e56:	6062      	str	r2, [r4, #4]
 8006e58:	6922      	ldr	r2, [r4, #16]
 8006e5a:	04d9      	lsls	r1, r3, #19
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	d504      	bpl.n	8006e6a <__sflush_r+0x76>
 8006e60:	1c42      	adds	r2, r0, #1
 8006e62:	d101      	bne.n	8006e68 <__sflush_r+0x74>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b903      	cbnz	r3, 8006e6a <__sflush_r+0x76>
 8006e68:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e6c:	602f      	str	r7, [r5, #0]
 8006e6e:	b1b9      	cbz	r1, 8006ea0 <__sflush_r+0xac>
 8006e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e74:	4299      	cmp	r1, r3
 8006e76:	d002      	beq.n	8006e7e <__sflush_r+0x8a>
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f7fe fabd 	bl	80053f8 <_free_r>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e82:	e00d      	b.n	8006ea0 <__sflush_r+0xac>
 8006e84:	2301      	movs	r3, #1
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b0      	blx	r6
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	1c50      	adds	r0, r2, #1
 8006e8e:	d1c9      	bne.n	8006e24 <__sflush_r+0x30>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0c6      	beq.n	8006e24 <__sflush_r+0x30>
 8006e96:	2b1d      	cmp	r3, #29
 8006e98:	d001      	beq.n	8006e9e <__sflush_r+0xaa>
 8006e9a:	2b16      	cmp	r3, #22
 8006e9c:	d11d      	bne.n	8006eda <__sflush_r+0xe6>
 8006e9e:	602f      	str	r7, [r5, #0]
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e021      	b.n	8006ee8 <__sflush_r+0xf4>
 8006ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea8:	b21b      	sxth	r3, r3
 8006eaa:	e01a      	b.n	8006ee2 <__sflush_r+0xee>
 8006eac:	690f      	ldr	r7, [r1, #16]
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	d0f6      	beq.n	8006ea0 <__sflush_r+0xac>
 8006eb2:	0793      	lsls	r3, r2, #30
 8006eb4:	bf18      	it	ne
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	680e      	ldr	r6, [r1, #0]
 8006eba:	bf08      	it	eq
 8006ebc:	694b      	ldreq	r3, [r1, #20]
 8006ebe:	1bf6      	subs	r6, r6, r7
 8006ec0:	600f      	str	r7, [r1, #0]
 8006ec2:	608b      	str	r3, [r1, #8]
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	ddeb      	ble.n	8006ea0 <__sflush_r+0xac>
 8006ec8:	4633      	mov	r3, r6
 8006eca:	463a      	mov	r2, r7
 8006ecc:	4628      	mov	r0, r5
 8006ece:	6a21      	ldr	r1, [r4, #32]
 8006ed0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ed4:	47e0      	blx	ip
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	dc07      	bgt.n	8006eea <__sflush_r+0xf6>
 8006eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eea:	4407      	add	r7, r0
 8006eec:	1a36      	subs	r6, r6, r0
 8006eee:	e7e9      	b.n	8006ec4 <__sflush_r+0xd0>
 8006ef0:	dfbffffe 	.word	0xdfbffffe

08006ef4 <_fflush_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	690b      	ldr	r3, [r1, #16]
 8006ef8:	4605      	mov	r5, r0
 8006efa:	460c      	mov	r4, r1
 8006efc:	b913      	cbnz	r3, 8006f04 <_fflush_r+0x10>
 8006efe:	2500      	movs	r5, #0
 8006f00:	4628      	mov	r0, r5
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	b118      	cbz	r0, 8006f0e <_fflush_r+0x1a>
 8006f06:	6a03      	ldr	r3, [r0, #32]
 8006f08:	b90b      	cbnz	r3, 8006f0e <_fflush_r+0x1a>
 8006f0a:	f7fd faf9 	bl	8004500 <__sinit>
 8006f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0f3      	beq.n	8006efe <_fflush_r+0xa>
 8006f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f18:	07d0      	lsls	r0, r2, #31
 8006f1a:	d404      	bmi.n	8006f26 <_fflush_r+0x32>
 8006f1c:	0599      	lsls	r1, r3, #22
 8006f1e:	d402      	bmi.n	8006f26 <_fflush_r+0x32>
 8006f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f22:	f7fd fc04 	bl	800472e <__retarget_lock_acquire_recursive>
 8006f26:	4628      	mov	r0, r5
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f7ff ff63 	bl	8006df4 <__sflush_r>
 8006f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f30:	4605      	mov	r5, r0
 8006f32:	07da      	lsls	r2, r3, #31
 8006f34:	d4e4      	bmi.n	8006f00 <_fflush_r+0xc>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	059b      	lsls	r3, r3, #22
 8006f3a:	d4e1      	bmi.n	8006f00 <_fflush_r+0xc>
 8006f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f3e:	f7fd fbf7 	bl	8004730 <__retarget_lock_release_recursive>
 8006f42:	e7dd      	b.n	8006f00 <_fflush_r+0xc>

08006f44 <memmove>:
 8006f44:	4288      	cmp	r0, r1
 8006f46:	b510      	push	{r4, lr}
 8006f48:	eb01 0402 	add.w	r4, r1, r2
 8006f4c:	d902      	bls.n	8006f54 <memmove+0x10>
 8006f4e:	4284      	cmp	r4, r0
 8006f50:	4623      	mov	r3, r4
 8006f52:	d807      	bhi.n	8006f64 <memmove+0x20>
 8006f54:	1e43      	subs	r3, r0, #1
 8006f56:	42a1      	cmp	r1, r4
 8006f58:	d008      	beq.n	8006f6c <memmove+0x28>
 8006f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f62:	e7f8      	b.n	8006f56 <memmove+0x12>
 8006f64:	4601      	mov	r1, r0
 8006f66:	4402      	add	r2, r0
 8006f68:	428a      	cmp	r2, r1
 8006f6a:	d100      	bne.n	8006f6e <memmove+0x2a>
 8006f6c:	bd10      	pop	{r4, pc}
 8006f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f76:	e7f7      	b.n	8006f68 <memmove+0x24>

08006f78 <strncmp>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	b16a      	cbz	r2, 8006f98 <strncmp+0x20>
 8006f7c:	3901      	subs	r1, #1
 8006f7e:	1884      	adds	r4, r0, r2
 8006f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d103      	bne.n	8006f94 <strncmp+0x1c>
 8006f8c:	42a0      	cmp	r0, r4
 8006f8e:	d001      	beq.n	8006f94 <strncmp+0x1c>
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	d1f5      	bne.n	8006f80 <strncmp+0x8>
 8006f94:	1ad0      	subs	r0, r2, r3
 8006f96:	bd10      	pop	{r4, pc}
 8006f98:	4610      	mov	r0, r2
 8006f9a:	e7fc      	b.n	8006f96 <strncmp+0x1e>

08006f9c <_sbrk_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4d05      	ldr	r5, [pc, #20]	@ (8006fb8 <_sbrk_r+0x1c>)
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	f7fa ff42 	bl	8001e30 <_sbrk>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_sbrk_r+0x1a>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_sbrk_r+0x1a>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20000960 	.word	0x20000960

08006fbc <memcpy>:
 8006fbc:	440a      	add	r2, r1
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fc4:	d100      	bne.n	8006fc8 <memcpy+0xc>
 8006fc6:	4770      	bx	lr
 8006fc8:	b510      	push	{r4, lr}
 8006fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fce:	4291      	cmp	r1, r2
 8006fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fd4:	d1f9      	bne.n	8006fca <memcpy+0xe>
 8006fd6:	bd10      	pop	{r4, pc}

08006fd8 <nan>:
 8006fd8:	2000      	movs	r0, #0
 8006fda:	4901      	ldr	r1, [pc, #4]	@ (8006fe0 <nan+0x8>)
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	7ff80000 	.word	0x7ff80000

08006fe4 <__assert_func>:
 8006fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <__assert_func+0x2c>)
 8006fec:	4605      	mov	r5, r0
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68d8      	ldr	r0, [r3, #12]
 8006ff2:	b954      	cbnz	r4, 800700a <__assert_func+0x26>
 8006ff4:	4b07      	ldr	r3, [pc, #28]	@ (8007014 <__assert_func+0x30>)
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ffc:	9100      	str	r1, [sp, #0]
 8006ffe:	462b      	mov	r3, r5
 8007000:	4905      	ldr	r1, [pc, #20]	@ (8007018 <__assert_func+0x34>)
 8007002:	f000 fba7 	bl	8007754 <fiprintf>
 8007006:	f000 fbb7 	bl	8007778 <abort>
 800700a:	4b04      	ldr	r3, [pc, #16]	@ (800701c <__assert_func+0x38>)
 800700c:	e7f4      	b.n	8006ff8 <__assert_func+0x14>
 800700e:	bf00      	nop
 8007010:	20000020 	.word	0x20000020
 8007014:	08008f94 	.word	0x08008f94
 8007018:	08008f66 	.word	0x08008f66
 800701c:	08008f59 	.word	0x08008f59

08007020 <_calloc_r>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	fba1 5402 	umull	r5, r4, r1, r2
 8007026:	b93c      	cbnz	r4, 8007038 <_calloc_r+0x18>
 8007028:	4629      	mov	r1, r5
 800702a:	f7fe fa57 	bl	80054dc <_malloc_r>
 800702e:	4606      	mov	r6, r0
 8007030:	b928      	cbnz	r0, 800703e <_calloc_r+0x1e>
 8007032:	2600      	movs	r6, #0
 8007034:	4630      	mov	r0, r6
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	220c      	movs	r2, #12
 800703a:	6002      	str	r2, [r0, #0]
 800703c:	e7f9      	b.n	8007032 <_calloc_r+0x12>
 800703e:	462a      	mov	r2, r5
 8007040:	4621      	mov	r1, r4
 8007042:	f7fd faf6 	bl	8004632 <memset>
 8007046:	e7f5      	b.n	8007034 <_calloc_r+0x14>

08007048 <rshift>:
 8007048:	6903      	ldr	r3, [r0, #16]
 800704a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800704e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007052:	f100 0414 	add.w	r4, r0, #20
 8007056:	ea4f 1261 	mov.w	r2, r1, asr #5
 800705a:	dd46      	ble.n	80070ea <rshift+0xa2>
 800705c:	f011 011f 	ands.w	r1, r1, #31
 8007060:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007064:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007068:	d10c      	bne.n	8007084 <rshift+0x3c>
 800706a:	4629      	mov	r1, r5
 800706c:	f100 0710 	add.w	r7, r0, #16
 8007070:	42b1      	cmp	r1, r6
 8007072:	d335      	bcc.n	80070e0 <rshift+0x98>
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	1eea      	subs	r2, r5, #3
 800707a:	4296      	cmp	r6, r2
 800707c:	bf38      	it	cc
 800707e:	2300      	movcc	r3, #0
 8007080:	4423      	add	r3, r4
 8007082:	e015      	b.n	80070b0 <rshift+0x68>
 8007084:	46a1      	mov	r9, r4
 8007086:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800708a:	f1c1 0820 	rsb	r8, r1, #32
 800708e:	40cf      	lsrs	r7, r1
 8007090:	f105 0e04 	add.w	lr, r5, #4
 8007094:	4576      	cmp	r6, lr
 8007096:	46f4      	mov	ip, lr
 8007098:	d816      	bhi.n	80070c8 <rshift+0x80>
 800709a:	1a9a      	subs	r2, r3, r2
 800709c:	0092      	lsls	r2, r2, #2
 800709e:	3a04      	subs	r2, #4
 80070a0:	3501      	adds	r5, #1
 80070a2:	42ae      	cmp	r6, r5
 80070a4:	bf38      	it	cc
 80070a6:	2200      	movcc	r2, #0
 80070a8:	18a3      	adds	r3, r4, r2
 80070aa:	50a7      	str	r7, [r4, r2]
 80070ac:	b107      	cbz	r7, 80070b0 <rshift+0x68>
 80070ae:	3304      	adds	r3, #4
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	eba3 0204 	sub.w	r2, r3, r4
 80070b6:	bf08      	it	eq
 80070b8:	2300      	moveq	r3, #0
 80070ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80070be:	6102      	str	r2, [r0, #16]
 80070c0:	bf08      	it	eq
 80070c2:	6143      	streq	r3, [r0, #20]
 80070c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070c8:	f8dc c000 	ldr.w	ip, [ip]
 80070cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80070d0:	ea4c 0707 	orr.w	r7, ip, r7
 80070d4:	f849 7b04 	str.w	r7, [r9], #4
 80070d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80070dc:	40cf      	lsrs	r7, r1
 80070de:	e7d9      	b.n	8007094 <rshift+0x4c>
 80070e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80070e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80070e8:	e7c2      	b.n	8007070 <rshift+0x28>
 80070ea:	4623      	mov	r3, r4
 80070ec:	e7e0      	b.n	80070b0 <rshift+0x68>

080070ee <__hexdig_fun>:
 80070ee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80070f2:	2b09      	cmp	r3, #9
 80070f4:	d802      	bhi.n	80070fc <__hexdig_fun+0xe>
 80070f6:	3820      	subs	r0, #32
 80070f8:	b2c0      	uxtb	r0, r0
 80070fa:	4770      	bx	lr
 80070fc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007100:	2b05      	cmp	r3, #5
 8007102:	d801      	bhi.n	8007108 <__hexdig_fun+0x1a>
 8007104:	3847      	subs	r0, #71	@ 0x47
 8007106:	e7f7      	b.n	80070f8 <__hexdig_fun+0xa>
 8007108:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800710c:	2b05      	cmp	r3, #5
 800710e:	d801      	bhi.n	8007114 <__hexdig_fun+0x26>
 8007110:	3827      	subs	r0, #39	@ 0x27
 8007112:	e7f1      	b.n	80070f8 <__hexdig_fun+0xa>
 8007114:	2000      	movs	r0, #0
 8007116:	4770      	bx	lr

08007118 <__gethex>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	468a      	mov	sl, r1
 800711e:	4690      	mov	r8, r2
 8007120:	b085      	sub	sp, #20
 8007122:	9302      	str	r3, [sp, #8]
 8007124:	680b      	ldr	r3, [r1, #0]
 8007126:	9001      	str	r0, [sp, #4]
 8007128:	1c9c      	adds	r4, r3, #2
 800712a:	46a1      	mov	r9, r4
 800712c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007130:	2830      	cmp	r0, #48	@ 0x30
 8007132:	d0fa      	beq.n	800712a <__gethex+0x12>
 8007134:	eba9 0303 	sub.w	r3, r9, r3
 8007138:	f1a3 0b02 	sub.w	fp, r3, #2
 800713c:	f7ff ffd7 	bl	80070ee <__hexdig_fun>
 8007140:	4605      	mov	r5, r0
 8007142:	2800      	cmp	r0, #0
 8007144:	d168      	bne.n	8007218 <__gethex+0x100>
 8007146:	2201      	movs	r2, #1
 8007148:	4648      	mov	r0, r9
 800714a:	499f      	ldr	r1, [pc, #636]	@ (80073c8 <__gethex+0x2b0>)
 800714c:	f7ff ff14 	bl	8006f78 <strncmp>
 8007150:	4607      	mov	r7, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	d167      	bne.n	8007226 <__gethex+0x10e>
 8007156:	f899 0001 	ldrb.w	r0, [r9, #1]
 800715a:	4626      	mov	r6, r4
 800715c:	f7ff ffc7 	bl	80070ee <__hexdig_fun>
 8007160:	2800      	cmp	r0, #0
 8007162:	d062      	beq.n	800722a <__gethex+0x112>
 8007164:	4623      	mov	r3, r4
 8007166:	7818      	ldrb	r0, [r3, #0]
 8007168:	4699      	mov	r9, r3
 800716a:	2830      	cmp	r0, #48	@ 0x30
 800716c:	f103 0301 	add.w	r3, r3, #1
 8007170:	d0f9      	beq.n	8007166 <__gethex+0x4e>
 8007172:	f7ff ffbc 	bl	80070ee <__hexdig_fun>
 8007176:	fab0 f580 	clz	r5, r0
 800717a:	f04f 0b01 	mov.w	fp, #1
 800717e:	096d      	lsrs	r5, r5, #5
 8007180:	464a      	mov	r2, r9
 8007182:	4616      	mov	r6, r2
 8007184:	7830      	ldrb	r0, [r6, #0]
 8007186:	3201      	adds	r2, #1
 8007188:	f7ff ffb1 	bl	80070ee <__hexdig_fun>
 800718c:	2800      	cmp	r0, #0
 800718e:	d1f8      	bne.n	8007182 <__gethex+0x6a>
 8007190:	2201      	movs	r2, #1
 8007192:	4630      	mov	r0, r6
 8007194:	498c      	ldr	r1, [pc, #560]	@ (80073c8 <__gethex+0x2b0>)
 8007196:	f7ff feef 	bl	8006f78 <strncmp>
 800719a:	2800      	cmp	r0, #0
 800719c:	d13f      	bne.n	800721e <__gethex+0x106>
 800719e:	b944      	cbnz	r4, 80071b2 <__gethex+0x9a>
 80071a0:	1c74      	adds	r4, r6, #1
 80071a2:	4622      	mov	r2, r4
 80071a4:	4616      	mov	r6, r2
 80071a6:	7830      	ldrb	r0, [r6, #0]
 80071a8:	3201      	adds	r2, #1
 80071aa:	f7ff ffa0 	bl	80070ee <__hexdig_fun>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d1f8      	bne.n	80071a4 <__gethex+0x8c>
 80071b2:	1ba4      	subs	r4, r4, r6
 80071b4:	00a7      	lsls	r7, r4, #2
 80071b6:	7833      	ldrb	r3, [r6, #0]
 80071b8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80071bc:	2b50      	cmp	r3, #80	@ 0x50
 80071be:	d13e      	bne.n	800723e <__gethex+0x126>
 80071c0:	7873      	ldrb	r3, [r6, #1]
 80071c2:	2b2b      	cmp	r3, #43	@ 0x2b
 80071c4:	d033      	beq.n	800722e <__gethex+0x116>
 80071c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80071c8:	d034      	beq.n	8007234 <__gethex+0x11c>
 80071ca:	2400      	movs	r4, #0
 80071cc:	1c71      	adds	r1, r6, #1
 80071ce:	7808      	ldrb	r0, [r1, #0]
 80071d0:	f7ff ff8d 	bl	80070ee <__hexdig_fun>
 80071d4:	1e43      	subs	r3, r0, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b18      	cmp	r3, #24
 80071da:	d830      	bhi.n	800723e <__gethex+0x126>
 80071dc:	f1a0 0210 	sub.w	r2, r0, #16
 80071e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80071e4:	f7ff ff83 	bl	80070ee <__hexdig_fun>
 80071e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80071ec:	fa5f fc8c 	uxtb.w	ip, ip
 80071f0:	f1bc 0f18 	cmp.w	ip, #24
 80071f4:	f04f 030a 	mov.w	r3, #10
 80071f8:	d91e      	bls.n	8007238 <__gethex+0x120>
 80071fa:	b104      	cbz	r4, 80071fe <__gethex+0xe6>
 80071fc:	4252      	negs	r2, r2
 80071fe:	4417      	add	r7, r2
 8007200:	f8ca 1000 	str.w	r1, [sl]
 8007204:	b1ed      	cbz	r5, 8007242 <__gethex+0x12a>
 8007206:	f1bb 0f00 	cmp.w	fp, #0
 800720a:	bf0c      	ite	eq
 800720c:	2506      	moveq	r5, #6
 800720e:	2500      	movne	r5, #0
 8007210:	4628      	mov	r0, r5
 8007212:	b005      	add	sp, #20
 8007214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007218:	2500      	movs	r5, #0
 800721a:	462c      	mov	r4, r5
 800721c:	e7b0      	b.n	8007180 <__gethex+0x68>
 800721e:	2c00      	cmp	r4, #0
 8007220:	d1c7      	bne.n	80071b2 <__gethex+0x9a>
 8007222:	4627      	mov	r7, r4
 8007224:	e7c7      	b.n	80071b6 <__gethex+0x9e>
 8007226:	464e      	mov	r6, r9
 8007228:	462f      	mov	r7, r5
 800722a:	2501      	movs	r5, #1
 800722c:	e7c3      	b.n	80071b6 <__gethex+0x9e>
 800722e:	2400      	movs	r4, #0
 8007230:	1cb1      	adds	r1, r6, #2
 8007232:	e7cc      	b.n	80071ce <__gethex+0xb6>
 8007234:	2401      	movs	r4, #1
 8007236:	e7fb      	b.n	8007230 <__gethex+0x118>
 8007238:	fb03 0002 	mla	r0, r3, r2, r0
 800723c:	e7ce      	b.n	80071dc <__gethex+0xc4>
 800723e:	4631      	mov	r1, r6
 8007240:	e7de      	b.n	8007200 <__gethex+0xe8>
 8007242:	4629      	mov	r1, r5
 8007244:	eba6 0309 	sub.w	r3, r6, r9
 8007248:	3b01      	subs	r3, #1
 800724a:	2b07      	cmp	r3, #7
 800724c:	dc0a      	bgt.n	8007264 <__gethex+0x14c>
 800724e:	9801      	ldr	r0, [sp, #4]
 8007250:	f7fe f9d0 	bl	80055f4 <_Balloc>
 8007254:	4604      	mov	r4, r0
 8007256:	b940      	cbnz	r0, 800726a <__gethex+0x152>
 8007258:	4602      	mov	r2, r0
 800725a:	21e4      	movs	r1, #228	@ 0xe4
 800725c:	4b5b      	ldr	r3, [pc, #364]	@ (80073cc <__gethex+0x2b4>)
 800725e:	485c      	ldr	r0, [pc, #368]	@ (80073d0 <__gethex+0x2b8>)
 8007260:	f7ff fec0 	bl	8006fe4 <__assert_func>
 8007264:	3101      	adds	r1, #1
 8007266:	105b      	asrs	r3, r3, #1
 8007268:	e7ef      	b.n	800724a <__gethex+0x132>
 800726a:	2300      	movs	r3, #0
 800726c:	f100 0a14 	add.w	sl, r0, #20
 8007270:	4655      	mov	r5, sl
 8007272:	469b      	mov	fp, r3
 8007274:	45b1      	cmp	r9, r6
 8007276:	d337      	bcc.n	80072e8 <__gethex+0x1d0>
 8007278:	f845 bb04 	str.w	fp, [r5], #4
 800727c:	eba5 050a 	sub.w	r5, r5, sl
 8007280:	10ad      	asrs	r5, r5, #2
 8007282:	6125      	str	r5, [r4, #16]
 8007284:	4658      	mov	r0, fp
 8007286:	f7fe faa7 	bl	80057d8 <__hi0bits>
 800728a:	016d      	lsls	r5, r5, #5
 800728c:	f8d8 6000 	ldr.w	r6, [r8]
 8007290:	1a2d      	subs	r5, r5, r0
 8007292:	42b5      	cmp	r5, r6
 8007294:	dd54      	ble.n	8007340 <__gethex+0x228>
 8007296:	1bad      	subs	r5, r5, r6
 8007298:	4629      	mov	r1, r5
 800729a:	4620      	mov	r0, r4
 800729c:	f7fe fe2f 	bl	8005efe <__any_on>
 80072a0:	4681      	mov	r9, r0
 80072a2:	b178      	cbz	r0, 80072c4 <__gethex+0x1ac>
 80072a4:	f04f 0901 	mov.w	r9, #1
 80072a8:	1e6b      	subs	r3, r5, #1
 80072aa:	1159      	asrs	r1, r3, #5
 80072ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80072b0:	f003 021f 	and.w	r2, r3, #31
 80072b4:	fa09 f202 	lsl.w	r2, r9, r2
 80072b8:	420a      	tst	r2, r1
 80072ba:	d003      	beq.n	80072c4 <__gethex+0x1ac>
 80072bc:	454b      	cmp	r3, r9
 80072be:	dc36      	bgt.n	800732e <__gethex+0x216>
 80072c0:	f04f 0902 	mov.w	r9, #2
 80072c4:	4629      	mov	r1, r5
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7ff febe 	bl	8007048 <rshift>
 80072cc:	442f      	add	r7, r5
 80072ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072d2:	42bb      	cmp	r3, r7
 80072d4:	da42      	bge.n	800735c <__gethex+0x244>
 80072d6:	4621      	mov	r1, r4
 80072d8:	9801      	ldr	r0, [sp, #4]
 80072da:	f7fe f9cb 	bl	8005674 <_Bfree>
 80072de:	2300      	movs	r3, #0
 80072e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072e2:	25a3      	movs	r5, #163	@ 0xa3
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	e793      	b.n	8007210 <__gethex+0xf8>
 80072e8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80072ec:	2a2e      	cmp	r2, #46	@ 0x2e
 80072ee:	d012      	beq.n	8007316 <__gethex+0x1fe>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d104      	bne.n	80072fe <__gethex+0x1e6>
 80072f4:	f845 bb04 	str.w	fp, [r5], #4
 80072f8:	f04f 0b00 	mov.w	fp, #0
 80072fc:	465b      	mov	r3, fp
 80072fe:	7830      	ldrb	r0, [r6, #0]
 8007300:	9303      	str	r3, [sp, #12]
 8007302:	f7ff fef4 	bl	80070ee <__hexdig_fun>
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	f000 000f 	and.w	r0, r0, #15
 800730c:	4098      	lsls	r0, r3
 800730e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007312:	3304      	adds	r3, #4
 8007314:	e7ae      	b.n	8007274 <__gethex+0x15c>
 8007316:	45b1      	cmp	r9, r6
 8007318:	d8ea      	bhi.n	80072f0 <__gethex+0x1d8>
 800731a:	2201      	movs	r2, #1
 800731c:	4630      	mov	r0, r6
 800731e:	492a      	ldr	r1, [pc, #168]	@ (80073c8 <__gethex+0x2b0>)
 8007320:	9303      	str	r3, [sp, #12]
 8007322:	f7ff fe29 	bl	8006f78 <strncmp>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	2800      	cmp	r0, #0
 800732a:	d1e1      	bne.n	80072f0 <__gethex+0x1d8>
 800732c:	e7a2      	b.n	8007274 <__gethex+0x15c>
 800732e:	4620      	mov	r0, r4
 8007330:	1ea9      	subs	r1, r5, #2
 8007332:	f7fe fde4 	bl	8005efe <__any_on>
 8007336:	2800      	cmp	r0, #0
 8007338:	d0c2      	beq.n	80072c0 <__gethex+0x1a8>
 800733a:	f04f 0903 	mov.w	r9, #3
 800733e:	e7c1      	b.n	80072c4 <__gethex+0x1ac>
 8007340:	da09      	bge.n	8007356 <__gethex+0x23e>
 8007342:	1b75      	subs	r5, r6, r5
 8007344:	4621      	mov	r1, r4
 8007346:	462a      	mov	r2, r5
 8007348:	9801      	ldr	r0, [sp, #4]
 800734a:	f7fe fba9 	bl	8005aa0 <__lshift>
 800734e:	4604      	mov	r4, r0
 8007350:	1b7f      	subs	r7, r7, r5
 8007352:	f100 0a14 	add.w	sl, r0, #20
 8007356:	f04f 0900 	mov.w	r9, #0
 800735a:	e7b8      	b.n	80072ce <__gethex+0x1b6>
 800735c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007360:	42bd      	cmp	r5, r7
 8007362:	dd6f      	ble.n	8007444 <__gethex+0x32c>
 8007364:	1bed      	subs	r5, r5, r7
 8007366:	42ae      	cmp	r6, r5
 8007368:	dc34      	bgt.n	80073d4 <__gethex+0x2bc>
 800736a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d022      	beq.n	80073b8 <__gethex+0x2a0>
 8007372:	2b03      	cmp	r3, #3
 8007374:	d024      	beq.n	80073c0 <__gethex+0x2a8>
 8007376:	2b01      	cmp	r3, #1
 8007378:	d115      	bne.n	80073a6 <__gethex+0x28e>
 800737a:	42ae      	cmp	r6, r5
 800737c:	d113      	bne.n	80073a6 <__gethex+0x28e>
 800737e:	2e01      	cmp	r6, #1
 8007380:	d10b      	bne.n	800739a <__gethex+0x282>
 8007382:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007386:	9a02      	ldr	r2, [sp, #8]
 8007388:	2562      	movs	r5, #98	@ 0x62
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	2301      	movs	r3, #1
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	f8ca 3000 	str.w	r3, [sl]
 8007394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007396:	601c      	str	r4, [r3, #0]
 8007398:	e73a      	b.n	8007210 <__gethex+0xf8>
 800739a:	4620      	mov	r0, r4
 800739c:	1e71      	subs	r1, r6, #1
 800739e:	f7fe fdae 	bl	8005efe <__any_on>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d1ed      	bne.n	8007382 <__gethex+0x26a>
 80073a6:	4621      	mov	r1, r4
 80073a8:	9801      	ldr	r0, [sp, #4]
 80073aa:	f7fe f963 	bl	8005674 <_Bfree>
 80073ae:	2300      	movs	r3, #0
 80073b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073b2:	2550      	movs	r5, #80	@ 0x50
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	e72b      	b.n	8007210 <__gethex+0xf8>
 80073b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f3      	bne.n	80073a6 <__gethex+0x28e>
 80073be:	e7e0      	b.n	8007382 <__gethex+0x26a>
 80073c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1dd      	bne.n	8007382 <__gethex+0x26a>
 80073c6:	e7ee      	b.n	80073a6 <__gethex+0x28e>
 80073c8:	08008ee8 	.word	0x08008ee8
 80073cc:	08008d80 	.word	0x08008d80
 80073d0:	08008f95 	.word	0x08008f95
 80073d4:	1e6f      	subs	r7, r5, #1
 80073d6:	f1b9 0f00 	cmp.w	r9, #0
 80073da:	d130      	bne.n	800743e <__gethex+0x326>
 80073dc:	b127      	cbz	r7, 80073e8 <__gethex+0x2d0>
 80073de:	4639      	mov	r1, r7
 80073e0:	4620      	mov	r0, r4
 80073e2:	f7fe fd8c 	bl	8005efe <__any_on>
 80073e6:	4681      	mov	r9, r0
 80073e8:	2301      	movs	r3, #1
 80073ea:	4629      	mov	r1, r5
 80073ec:	1b76      	subs	r6, r6, r5
 80073ee:	2502      	movs	r5, #2
 80073f0:	117a      	asrs	r2, r7, #5
 80073f2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80073f6:	f007 071f 	and.w	r7, r7, #31
 80073fa:	40bb      	lsls	r3, r7
 80073fc:	4213      	tst	r3, r2
 80073fe:	4620      	mov	r0, r4
 8007400:	bf18      	it	ne
 8007402:	f049 0902 	orrne.w	r9, r9, #2
 8007406:	f7ff fe1f 	bl	8007048 <rshift>
 800740a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800740e:	f1b9 0f00 	cmp.w	r9, #0
 8007412:	d047      	beq.n	80074a4 <__gethex+0x38c>
 8007414:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d015      	beq.n	8007448 <__gethex+0x330>
 800741c:	2b03      	cmp	r3, #3
 800741e:	d017      	beq.n	8007450 <__gethex+0x338>
 8007420:	2b01      	cmp	r3, #1
 8007422:	d109      	bne.n	8007438 <__gethex+0x320>
 8007424:	f019 0f02 	tst.w	r9, #2
 8007428:	d006      	beq.n	8007438 <__gethex+0x320>
 800742a:	f8da 3000 	ldr.w	r3, [sl]
 800742e:	ea49 0903 	orr.w	r9, r9, r3
 8007432:	f019 0f01 	tst.w	r9, #1
 8007436:	d10e      	bne.n	8007456 <__gethex+0x33e>
 8007438:	f045 0510 	orr.w	r5, r5, #16
 800743c:	e032      	b.n	80074a4 <__gethex+0x38c>
 800743e:	f04f 0901 	mov.w	r9, #1
 8007442:	e7d1      	b.n	80073e8 <__gethex+0x2d0>
 8007444:	2501      	movs	r5, #1
 8007446:	e7e2      	b.n	800740e <__gethex+0x2f6>
 8007448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800744a:	f1c3 0301 	rsb	r3, r3, #1
 800744e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0f0      	beq.n	8007438 <__gethex+0x320>
 8007456:	f04f 0c00 	mov.w	ip, #0
 800745a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800745e:	f104 0314 	add.w	r3, r4, #20
 8007462:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007466:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800746a:	4618      	mov	r0, r3
 800746c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007470:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007474:	d01b      	beq.n	80074ae <__gethex+0x396>
 8007476:	3201      	adds	r2, #1
 8007478:	6002      	str	r2, [r0, #0]
 800747a:	2d02      	cmp	r5, #2
 800747c:	f104 0314 	add.w	r3, r4, #20
 8007480:	d13c      	bne.n	80074fc <__gethex+0x3e4>
 8007482:	f8d8 2000 	ldr.w	r2, [r8]
 8007486:	3a01      	subs	r2, #1
 8007488:	42b2      	cmp	r2, r6
 800748a:	d109      	bne.n	80074a0 <__gethex+0x388>
 800748c:	2201      	movs	r2, #1
 800748e:	1171      	asrs	r1, r6, #5
 8007490:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007494:	f006 061f 	and.w	r6, r6, #31
 8007498:	fa02 f606 	lsl.w	r6, r2, r6
 800749c:	421e      	tst	r6, r3
 800749e:	d13a      	bne.n	8007516 <__gethex+0x3fe>
 80074a0:	f045 0520 	orr.w	r5, r5, #32
 80074a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074a6:	601c      	str	r4, [r3, #0]
 80074a8:	9b02      	ldr	r3, [sp, #8]
 80074aa:	601f      	str	r7, [r3, #0]
 80074ac:	e6b0      	b.n	8007210 <__gethex+0xf8>
 80074ae:	4299      	cmp	r1, r3
 80074b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80074b4:	d8d9      	bhi.n	800746a <__gethex+0x352>
 80074b6:	68a3      	ldr	r3, [r4, #8]
 80074b8:	459b      	cmp	fp, r3
 80074ba:	db17      	blt.n	80074ec <__gethex+0x3d4>
 80074bc:	6861      	ldr	r1, [r4, #4]
 80074be:	9801      	ldr	r0, [sp, #4]
 80074c0:	3101      	adds	r1, #1
 80074c2:	f7fe f897 	bl	80055f4 <_Balloc>
 80074c6:	4681      	mov	r9, r0
 80074c8:	b918      	cbnz	r0, 80074d2 <__gethex+0x3ba>
 80074ca:	4602      	mov	r2, r0
 80074cc:	2184      	movs	r1, #132	@ 0x84
 80074ce:	4b19      	ldr	r3, [pc, #100]	@ (8007534 <__gethex+0x41c>)
 80074d0:	e6c5      	b.n	800725e <__gethex+0x146>
 80074d2:	6922      	ldr	r2, [r4, #16]
 80074d4:	f104 010c 	add.w	r1, r4, #12
 80074d8:	3202      	adds	r2, #2
 80074da:	0092      	lsls	r2, r2, #2
 80074dc:	300c      	adds	r0, #12
 80074de:	f7ff fd6d 	bl	8006fbc <memcpy>
 80074e2:	4621      	mov	r1, r4
 80074e4:	9801      	ldr	r0, [sp, #4]
 80074e6:	f7fe f8c5 	bl	8005674 <_Bfree>
 80074ea:	464c      	mov	r4, r9
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	6122      	str	r2, [r4, #16]
 80074f2:	2201      	movs	r2, #1
 80074f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074f8:	615a      	str	r2, [r3, #20]
 80074fa:	e7be      	b.n	800747a <__gethex+0x362>
 80074fc:	6922      	ldr	r2, [r4, #16]
 80074fe:	455a      	cmp	r2, fp
 8007500:	dd0b      	ble.n	800751a <__gethex+0x402>
 8007502:	2101      	movs	r1, #1
 8007504:	4620      	mov	r0, r4
 8007506:	f7ff fd9f 	bl	8007048 <rshift>
 800750a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800750e:	3701      	adds	r7, #1
 8007510:	42bb      	cmp	r3, r7
 8007512:	f6ff aee0 	blt.w	80072d6 <__gethex+0x1be>
 8007516:	2501      	movs	r5, #1
 8007518:	e7c2      	b.n	80074a0 <__gethex+0x388>
 800751a:	f016 061f 	ands.w	r6, r6, #31
 800751e:	d0fa      	beq.n	8007516 <__gethex+0x3fe>
 8007520:	4453      	add	r3, sl
 8007522:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007526:	f7fe f957 	bl	80057d8 <__hi0bits>
 800752a:	f1c6 0620 	rsb	r6, r6, #32
 800752e:	42b0      	cmp	r0, r6
 8007530:	dbe7      	blt.n	8007502 <__gethex+0x3ea>
 8007532:	e7f0      	b.n	8007516 <__gethex+0x3fe>
 8007534:	08008d80 	.word	0x08008d80

08007538 <L_shift>:
 8007538:	f1c2 0208 	rsb	r2, r2, #8
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	b570      	push	{r4, r5, r6, lr}
 8007540:	f1c2 0620 	rsb	r6, r2, #32
 8007544:	6843      	ldr	r3, [r0, #4]
 8007546:	6804      	ldr	r4, [r0, #0]
 8007548:	fa03 f506 	lsl.w	r5, r3, r6
 800754c:	432c      	orrs	r4, r5
 800754e:	40d3      	lsrs	r3, r2
 8007550:	6004      	str	r4, [r0, #0]
 8007552:	f840 3f04 	str.w	r3, [r0, #4]!
 8007556:	4288      	cmp	r0, r1
 8007558:	d3f4      	bcc.n	8007544 <L_shift+0xc>
 800755a:	bd70      	pop	{r4, r5, r6, pc}

0800755c <__match>:
 800755c:	b530      	push	{r4, r5, lr}
 800755e:	6803      	ldr	r3, [r0, #0]
 8007560:	3301      	adds	r3, #1
 8007562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007566:	b914      	cbnz	r4, 800756e <__match+0x12>
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	2001      	movs	r0, #1
 800756c:	bd30      	pop	{r4, r5, pc}
 800756e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007572:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007576:	2d19      	cmp	r5, #25
 8007578:	bf98      	it	ls
 800757a:	3220      	addls	r2, #32
 800757c:	42a2      	cmp	r2, r4
 800757e:	d0f0      	beq.n	8007562 <__match+0x6>
 8007580:	2000      	movs	r0, #0
 8007582:	e7f3      	b.n	800756c <__match+0x10>

08007584 <__hexnan>:
 8007584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	2500      	movs	r5, #0
 800758a:	680b      	ldr	r3, [r1, #0]
 800758c:	4682      	mov	sl, r0
 800758e:	115e      	asrs	r6, r3, #5
 8007590:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007594:	f013 031f 	ands.w	r3, r3, #31
 8007598:	bf18      	it	ne
 800759a:	3604      	addne	r6, #4
 800759c:	1f37      	subs	r7, r6, #4
 800759e:	4690      	mov	r8, r2
 80075a0:	46b9      	mov	r9, r7
 80075a2:	463c      	mov	r4, r7
 80075a4:	46ab      	mov	fp, r5
 80075a6:	b087      	sub	sp, #28
 80075a8:	6801      	ldr	r1, [r0, #0]
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	f846 5c04 	str.w	r5, [r6, #-4]
 80075b0:	9502      	str	r5, [sp, #8]
 80075b2:	784a      	ldrb	r2, [r1, #1]
 80075b4:	1c4b      	adds	r3, r1, #1
 80075b6:	9303      	str	r3, [sp, #12]
 80075b8:	b342      	cbz	r2, 800760c <__hexnan+0x88>
 80075ba:	4610      	mov	r0, r2
 80075bc:	9105      	str	r1, [sp, #20]
 80075be:	9204      	str	r2, [sp, #16]
 80075c0:	f7ff fd95 	bl	80070ee <__hexdig_fun>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d151      	bne.n	800766c <__hexnan+0xe8>
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	9905      	ldr	r1, [sp, #20]
 80075cc:	2a20      	cmp	r2, #32
 80075ce:	d818      	bhi.n	8007602 <__hexnan+0x7e>
 80075d0:	9b02      	ldr	r3, [sp, #8]
 80075d2:	459b      	cmp	fp, r3
 80075d4:	dd13      	ble.n	80075fe <__hexnan+0x7a>
 80075d6:	454c      	cmp	r4, r9
 80075d8:	d206      	bcs.n	80075e8 <__hexnan+0x64>
 80075da:	2d07      	cmp	r5, #7
 80075dc:	dc04      	bgt.n	80075e8 <__hexnan+0x64>
 80075de:	462a      	mov	r2, r5
 80075e0:	4649      	mov	r1, r9
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7ff ffa8 	bl	8007538 <L_shift>
 80075e8:	4544      	cmp	r4, r8
 80075ea:	d952      	bls.n	8007692 <__hexnan+0x10e>
 80075ec:	2300      	movs	r3, #0
 80075ee:	f1a4 0904 	sub.w	r9, r4, #4
 80075f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80075f6:	461d      	mov	r5, r3
 80075f8:	464c      	mov	r4, r9
 80075fa:	f8cd b008 	str.w	fp, [sp, #8]
 80075fe:	9903      	ldr	r1, [sp, #12]
 8007600:	e7d7      	b.n	80075b2 <__hexnan+0x2e>
 8007602:	2a29      	cmp	r2, #41	@ 0x29
 8007604:	d157      	bne.n	80076b6 <__hexnan+0x132>
 8007606:	3102      	adds	r1, #2
 8007608:	f8ca 1000 	str.w	r1, [sl]
 800760c:	f1bb 0f00 	cmp.w	fp, #0
 8007610:	d051      	beq.n	80076b6 <__hexnan+0x132>
 8007612:	454c      	cmp	r4, r9
 8007614:	d206      	bcs.n	8007624 <__hexnan+0xa0>
 8007616:	2d07      	cmp	r5, #7
 8007618:	dc04      	bgt.n	8007624 <__hexnan+0xa0>
 800761a:	462a      	mov	r2, r5
 800761c:	4649      	mov	r1, r9
 800761e:	4620      	mov	r0, r4
 8007620:	f7ff ff8a 	bl	8007538 <L_shift>
 8007624:	4544      	cmp	r4, r8
 8007626:	d936      	bls.n	8007696 <__hexnan+0x112>
 8007628:	4623      	mov	r3, r4
 800762a:	f1a8 0204 	sub.w	r2, r8, #4
 800762e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007632:	429f      	cmp	r7, r3
 8007634:	f842 1f04 	str.w	r1, [r2, #4]!
 8007638:	d2f9      	bcs.n	800762e <__hexnan+0xaa>
 800763a:	1b3b      	subs	r3, r7, r4
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	3304      	adds	r3, #4
 8007642:	3401      	adds	r4, #1
 8007644:	3e03      	subs	r6, #3
 8007646:	42b4      	cmp	r4, r6
 8007648:	bf88      	it	hi
 800764a:	2304      	movhi	r3, #4
 800764c:	2200      	movs	r2, #0
 800764e:	4443      	add	r3, r8
 8007650:	f843 2b04 	str.w	r2, [r3], #4
 8007654:	429f      	cmp	r7, r3
 8007656:	d2fb      	bcs.n	8007650 <__hexnan+0xcc>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	b91b      	cbnz	r3, 8007664 <__hexnan+0xe0>
 800765c:	4547      	cmp	r7, r8
 800765e:	d128      	bne.n	80076b2 <__hexnan+0x12e>
 8007660:	2301      	movs	r3, #1
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	2005      	movs	r0, #5
 8007666:	b007      	add	sp, #28
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766c:	3501      	adds	r5, #1
 800766e:	2d08      	cmp	r5, #8
 8007670:	f10b 0b01 	add.w	fp, fp, #1
 8007674:	dd06      	ble.n	8007684 <__hexnan+0x100>
 8007676:	4544      	cmp	r4, r8
 8007678:	d9c1      	bls.n	80075fe <__hexnan+0x7a>
 800767a:	2300      	movs	r3, #0
 800767c:	2501      	movs	r5, #1
 800767e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007682:	3c04      	subs	r4, #4
 8007684:	6822      	ldr	r2, [r4, #0]
 8007686:	f000 000f 	and.w	r0, r0, #15
 800768a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800768e:	6020      	str	r0, [r4, #0]
 8007690:	e7b5      	b.n	80075fe <__hexnan+0x7a>
 8007692:	2508      	movs	r5, #8
 8007694:	e7b3      	b.n	80075fe <__hexnan+0x7a>
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0dd      	beq.n	8007658 <__hexnan+0xd4>
 800769c:	f04f 32ff 	mov.w	r2, #4294967295
 80076a0:	f1c3 0320 	rsb	r3, r3, #32
 80076a4:	40da      	lsrs	r2, r3
 80076a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80076aa:	4013      	ands	r3, r2
 80076ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80076b0:	e7d2      	b.n	8007658 <__hexnan+0xd4>
 80076b2:	3f04      	subs	r7, #4
 80076b4:	e7d0      	b.n	8007658 <__hexnan+0xd4>
 80076b6:	2004      	movs	r0, #4
 80076b8:	e7d5      	b.n	8007666 <__hexnan+0xe2>

080076ba <__ascii_mbtowc>:
 80076ba:	b082      	sub	sp, #8
 80076bc:	b901      	cbnz	r1, 80076c0 <__ascii_mbtowc+0x6>
 80076be:	a901      	add	r1, sp, #4
 80076c0:	b142      	cbz	r2, 80076d4 <__ascii_mbtowc+0x1a>
 80076c2:	b14b      	cbz	r3, 80076d8 <__ascii_mbtowc+0x1e>
 80076c4:	7813      	ldrb	r3, [r2, #0]
 80076c6:	600b      	str	r3, [r1, #0]
 80076c8:	7812      	ldrb	r2, [r2, #0]
 80076ca:	1e10      	subs	r0, r2, #0
 80076cc:	bf18      	it	ne
 80076ce:	2001      	movne	r0, #1
 80076d0:	b002      	add	sp, #8
 80076d2:	4770      	bx	lr
 80076d4:	4610      	mov	r0, r2
 80076d6:	e7fb      	b.n	80076d0 <__ascii_mbtowc+0x16>
 80076d8:	f06f 0001 	mvn.w	r0, #1
 80076dc:	e7f8      	b.n	80076d0 <__ascii_mbtowc+0x16>

080076de <_realloc_r>:
 80076de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e2:	4680      	mov	r8, r0
 80076e4:	4615      	mov	r5, r2
 80076e6:	460c      	mov	r4, r1
 80076e8:	b921      	cbnz	r1, 80076f4 <_realloc_r+0x16>
 80076ea:	4611      	mov	r1, r2
 80076ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076f0:	f7fd bef4 	b.w	80054dc <_malloc_r>
 80076f4:	b92a      	cbnz	r2, 8007702 <_realloc_r+0x24>
 80076f6:	f7fd fe7f 	bl	80053f8 <_free_r>
 80076fa:	2400      	movs	r4, #0
 80076fc:	4620      	mov	r0, r4
 80076fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007702:	f000 f840 	bl	8007786 <_malloc_usable_size_r>
 8007706:	4285      	cmp	r5, r0
 8007708:	4606      	mov	r6, r0
 800770a:	d802      	bhi.n	8007712 <_realloc_r+0x34>
 800770c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007710:	d8f4      	bhi.n	80076fc <_realloc_r+0x1e>
 8007712:	4629      	mov	r1, r5
 8007714:	4640      	mov	r0, r8
 8007716:	f7fd fee1 	bl	80054dc <_malloc_r>
 800771a:	4607      	mov	r7, r0
 800771c:	2800      	cmp	r0, #0
 800771e:	d0ec      	beq.n	80076fa <_realloc_r+0x1c>
 8007720:	42b5      	cmp	r5, r6
 8007722:	462a      	mov	r2, r5
 8007724:	4621      	mov	r1, r4
 8007726:	bf28      	it	cs
 8007728:	4632      	movcs	r2, r6
 800772a:	f7ff fc47 	bl	8006fbc <memcpy>
 800772e:	4621      	mov	r1, r4
 8007730:	4640      	mov	r0, r8
 8007732:	f7fd fe61 	bl	80053f8 <_free_r>
 8007736:	463c      	mov	r4, r7
 8007738:	e7e0      	b.n	80076fc <_realloc_r+0x1e>

0800773a <__ascii_wctomb>:
 800773a:	4603      	mov	r3, r0
 800773c:	4608      	mov	r0, r1
 800773e:	b141      	cbz	r1, 8007752 <__ascii_wctomb+0x18>
 8007740:	2aff      	cmp	r2, #255	@ 0xff
 8007742:	d904      	bls.n	800774e <__ascii_wctomb+0x14>
 8007744:	228a      	movs	r2, #138	@ 0x8a
 8007746:	f04f 30ff 	mov.w	r0, #4294967295
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	4770      	bx	lr
 800774e:	2001      	movs	r0, #1
 8007750:	700a      	strb	r2, [r1, #0]
 8007752:	4770      	bx	lr

08007754 <fiprintf>:
 8007754:	b40e      	push	{r1, r2, r3}
 8007756:	b503      	push	{r0, r1, lr}
 8007758:	4601      	mov	r1, r0
 800775a:	ab03      	add	r3, sp, #12
 800775c:	4805      	ldr	r0, [pc, #20]	@ (8007774 <fiprintf+0x20>)
 800775e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007762:	6800      	ldr	r0, [r0, #0]
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	f000 f83d 	bl	80077e4 <_vfiprintf_r>
 800776a:	b002      	add	sp, #8
 800776c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007770:	b003      	add	sp, #12
 8007772:	4770      	bx	lr
 8007774:	20000020 	.word	0x20000020

08007778 <abort>:
 8007778:	2006      	movs	r0, #6
 800777a:	b508      	push	{r3, lr}
 800777c:	f000 fa06 	bl	8007b8c <raise>
 8007780:	2001      	movs	r0, #1
 8007782:	f7fa fae0 	bl	8001d46 <_exit>

08007786 <_malloc_usable_size_r>:
 8007786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800778a:	1f18      	subs	r0, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfbc      	itt	lt
 8007790:	580b      	ldrlt	r3, [r1, r0]
 8007792:	18c0      	addlt	r0, r0, r3
 8007794:	4770      	bx	lr

08007796 <__sfputc_r>:
 8007796:	6893      	ldr	r3, [r2, #8]
 8007798:	b410      	push	{r4}
 800779a:	3b01      	subs	r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	6093      	str	r3, [r2, #8]
 80077a0:	da07      	bge.n	80077b2 <__sfputc_r+0x1c>
 80077a2:	6994      	ldr	r4, [r2, #24]
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	db01      	blt.n	80077ac <__sfputc_r+0x16>
 80077a8:	290a      	cmp	r1, #10
 80077aa:	d102      	bne.n	80077b2 <__sfputc_r+0x1c>
 80077ac:	bc10      	pop	{r4}
 80077ae:	f000 b931 	b.w	8007a14 <__swbuf_r>
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	1c58      	adds	r0, r3, #1
 80077b6:	6010      	str	r0, [r2, #0]
 80077b8:	7019      	strb	r1, [r3, #0]
 80077ba:	4608      	mov	r0, r1
 80077bc:	bc10      	pop	{r4}
 80077be:	4770      	bx	lr

080077c0 <__sfputs_r>:
 80077c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c2:	4606      	mov	r6, r0
 80077c4:	460f      	mov	r7, r1
 80077c6:	4614      	mov	r4, r2
 80077c8:	18d5      	adds	r5, r2, r3
 80077ca:	42ac      	cmp	r4, r5
 80077cc:	d101      	bne.n	80077d2 <__sfputs_r+0x12>
 80077ce:	2000      	movs	r0, #0
 80077d0:	e007      	b.n	80077e2 <__sfputs_r+0x22>
 80077d2:	463a      	mov	r2, r7
 80077d4:	4630      	mov	r0, r6
 80077d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077da:	f7ff ffdc 	bl	8007796 <__sfputc_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	d1f3      	bne.n	80077ca <__sfputs_r+0xa>
 80077e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077e4 <_vfiprintf_r>:
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	460d      	mov	r5, r1
 80077ea:	4614      	mov	r4, r2
 80077ec:	4698      	mov	r8, r3
 80077ee:	4606      	mov	r6, r0
 80077f0:	b09d      	sub	sp, #116	@ 0x74
 80077f2:	b118      	cbz	r0, 80077fc <_vfiprintf_r+0x18>
 80077f4:	6a03      	ldr	r3, [r0, #32]
 80077f6:	b90b      	cbnz	r3, 80077fc <_vfiprintf_r+0x18>
 80077f8:	f7fc fe82 	bl	8004500 <__sinit>
 80077fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077fe:	07d9      	lsls	r1, r3, #31
 8007800:	d405      	bmi.n	800780e <_vfiprintf_r+0x2a>
 8007802:	89ab      	ldrh	r3, [r5, #12]
 8007804:	059a      	lsls	r2, r3, #22
 8007806:	d402      	bmi.n	800780e <_vfiprintf_r+0x2a>
 8007808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800780a:	f7fc ff90 	bl	800472e <__retarget_lock_acquire_recursive>
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	071b      	lsls	r3, r3, #28
 8007812:	d501      	bpl.n	8007818 <_vfiprintf_r+0x34>
 8007814:	692b      	ldr	r3, [r5, #16]
 8007816:	b99b      	cbnz	r3, 8007840 <_vfiprintf_r+0x5c>
 8007818:	4629      	mov	r1, r5
 800781a:	4630      	mov	r0, r6
 800781c:	f000 f938 	bl	8007a90 <__swsetup_r>
 8007820:	b170      	cbz	r0, 8007840 <_vfiprintf_r+0x5c>
 8007822:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007824:	07dc      	lsls	r4, r3, #31
 8007826:	d504      	bpl.n	8007832 <_vfiprintf_r+0x4e>
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	b01d      	add	sp, #116	@ 0x74
 800782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007832:	89ab      	ldrh	r3, [r5, #12]
 8007834:	0598      	lsls	r0, r3, #22
 8007836:	d4f7      	bmi.n	8007828 <_vfiprintf_r+0x44>
 8007838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800783a:	f7fc ff79 	bl	8004730 <__retarget_lock_release_recursive>
 800783e:	e7f3      	b.n	8007828 <_vfiprintf_r+0x44>
 8007840:	2300      	movs	r3, #0
 8007842:	9309      	str	r3, [sp, #36]	@ 0x24
 8007844:	2320      	movs	r3, #32
 8007846:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800784a:	2330      	movs	r3, #48	@ 0x30
 800784c:	f04f 0901 	mov.w	r9, #1
 8007850:	f8cd 800c 	str.w	r8, [sp, #12]
 8007854:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007a00 <_vfiprintf_r+0x21c>
 8007858:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800785c:	4623      	mov	r3, r4
 800785e:	469a      	mov	sl, r3
 8007860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007864:	b10a      	cbz	r2, 800786a <_vfiprintf_r+0x86>
 8007866:	2a25      	cmp	r2, #37	@ 0x25
 8007868:	d1f9      	bne.n	800785e <_vfiprintf_r+0x7a>
 800786a:	ebba 0b04 	subs.w	fp, sl, r4
 800786e:	d00b      	beq.n	8007888 <_vfiprintf_r+0xa4>
 8007870:	465b      	mov	r3, fp
 8007872:	4622      	mov	r2, r4
 8007874:	4629      	mov	r1, r5
 8007876:	4630      	mov	r0, r6
 8007878:	f7ff ffa2 	bl	80077c0 <__sfputs_r>
 800787c:	3001      	adds	r0, #1
 800787e:	f000 80a7 	beq.w	80079d0 <_vfiprintf_r+0x1ec>
 8007882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007884:	445a      	add	r2, fp
 8007886:	9209      	str	r2, [sp, #36]	@ 0x24
 8007888:	f89a 3000 	ldrb.w	r3, [sl]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 809f 	beq.w	80079d0 <_vfiprintf_r+0x1ec>
 8007892:	2300      	movs	r3, #0
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800789c:	f10a 0a01 	add.w	sl, sl, #1
 80078a0:	9304      	str	r3, [sp, #16]
 80078a2:	9307      	str	r3, [sp, #28]
 80078a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80078aa:	4654      	mov	r4, sl
 80078ac:	2205      	movs	r2, #5
 80078ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b2:	4853      	ldr	r0, [pc, #332]	@ (8007a00 <_vfiprintf_r+0x21c>)
 80078b4:	f7fc ff3d 	bl	8004732 <memchr>
 80078b8:	9a04      	ldr	r2, [sp, #16]
 80078ba:	b9d8      	cbnz	r0, 80078f4 <_vfiprintf_r+0x110>
 80078bc:	06d1      	lsls	r1, r2, #27
 80078be:	bf44      	itt	mi
 80078c0:	2320      	movmi	r3, #32
 80078c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078c6:	0713      	lsls	r3, r2, #28
 80078c8:	bf44      	itt	mi
 80078ca:	232b      	movmi	r3, #43	@ 0x2b
 80078cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078d0:	f89a 3000 	ldrb.w	r3, [sl]
 80078d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80078d6:	d015      	beq.n	8007904 <_vfiprintf_r+0x120>
 80078d8:	4654      	mov	r4, sl
 80078da:	2000      	movs	r0, #0
 80078dc:	f04f 0c0a 	mov.w	ip, #10
 80078e0:	9a07      	ldr	r2, [sp, #28]
 80078e2:	4621      	mov	r1, r4
 80078e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078e8:	3b30      	subs	r3, #48	@ 0x30
 80078ea:	2b09      	cmp	r3, #9
 80078ec:	d94b      	bls.n	8007986 <_vfiprintf_r+0x1a2>
 80078ee:	b1b0      	cbz	r0, 800791e <_vfiprintf_r+0x13a>
 80078f0:	9207      	str	r2, [sp, #28]
 80078f2:	e014      	b.n	800791e <_vfiprintf_r+0x13a>
 80078f4:	eba0 0308 	sub.w	r3, r0, r8
 80078f8:	fa09 f303 	lsl.w	r3, r9, r3
 80078fc:	4313      	orrs	r3, r2
 80078fe:	46a2      	mov	sl, r4
 8007900:	9304      	str	r3, [sp, #16]
 8007902:	e7d2      	b.n	80078aa <_vfiprintf_r+0xc6>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	1d19      	adds	r1, r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	9103      	str	r1, [sp, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	bfbb      	ittet	lt
 8007910:	425b      	neglt	r3, r3
 8007912:	f042 0202 	orrlt.w	r2, r2, #2
 8007916:	9307      	strge	r3, [sp, #28]
 8007918:	9307      	strlt	r3, [sp, #28]
 800791a:	bfb8      	it	lt
 800791c:	9204      	strlt	r2, [sp, #16]
 800791e:	7823      	ldrb	r3, [r4, #0]
 8007920:	2b2e      	cmp	r3, #46	@ 0x2e
 8007922:	d10a      	bne.n	800793a <_vfiprintf_r+0x156>
 8007924:	7863      	ldrb	r3, [r4, #1]
 8007926:	2b2a      	cmp	r3, #42	@ 0x2a
 8007928:	d132      	bne.n	8007990 <_vfiprintf_r+0x1ac>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	3402      	adds	r4, #2
 800792e:	1d1a      	adds	r2, r3, #4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	9203      	str	r2, [sp, #12]
 8007934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007938:	9305      	str	r3, [sp, #20]
 800793a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007a04 <_vfiprintf_r+0x220>
 800793e:	2203      	movs	r2, #3
 8007940:	4650      	mov	r0, sl
 8007942:	7821      	ldrb	r1, [r4, #0]
 8007944:	f7fc fef5 	bl	8004732 <memchr>
 8007948:	b138      	cbz	r0, 800795a <_vfiprintf_r+0x176>
 800794a:	2240      	movs	r2, #64	@ 0x40
 800794c:	9b04      	ldr	r3, [sp, #16]
 800794e:	eba0 000a 	sub.w	r0, r0, sl
 8007952:	4082      	lsls	r2, r0
 8007954:	4313      	orrs	r3, r2
 8007956:	3401      	adds	r4, #1
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795e:	2206      	movs	r2, #6
 8007960:	4829      	ldr	r0, [pc, #164]	@ (8007a08 <_vfiprintf_r+0x224>)
 8007962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007966:	f7fc fee4 	bl	8004732 <memchr>
 800796a:	2800      	cmp	r0, #0
 800796c:	d03f      	beq.n	80079ee <_vfiprintf_r+0x20a>
 800796e:	4b27      	ldr	r3, [pc, #156]	@ (8007a0c <_vfiprintf_r+0x228>)
 8007970:	bb1b      	cbnz	r3, 80079ba <_vfiprintf_r+0x1d6>
 8007972:	9b03      	ldr	r3, [sp, #12]
 8007974:	3307      	adds	r3, #7
 8007976:	f023 0307 	bic.w	r3, r3, #7
 800797a:	3308      	adds	r3, #8
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007980:	443b      	add	r3, r7
 8007982:	9309      	str	r3, [sp, #36]	@ 0x24
 8007984:	e76a      	b.n	800785c <_vfiprintf_r+0x78>
 8007986:	460c      	mov	r4, r1
 8007988:	2001      	movs	r0, #1
 800798a:	fb0c 3202 	mla	r2, ip, r2, r3
 800798e:	e7a8      	b.n	80078e2 <_vfiprintf_r+0xfe>
 8007990:	2300      	movs	r3, #0
 8007992:	f04f 0c0a 	mov.w	ip, #10
 8007996:	4619      	mov	r1, r3
 8007998:	3401      	adds	r4, #1
 800799a:	9305      	str	r3, [sp, #20]
 800799c:	4620      	mov	r0, r4
 800799e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079a2:	3a30      	subs	r2, #48	@ 0x30
 80079a4:	2a09      	cmp	r2, #9
 80079a6:	d903      	bls.n	80079b0 <_vfiprintf_r+0x1cc>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0c6      	beq.n	800793a <_vfiprintf_r+0x156>
 80079ac:	9105      	str	r1, [sp, #20]
 80079ae:	e7c4      	b.n	800793a <_vfiprintf_r+0x156>
 80079b0:	4604      	mov	r4, r0
 80079b2:	2301      	movs	r3, #1
 80079b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b8:	e7f0      	b.n	800799c <_vfiprintf_r+0x1b8>
 80079ba:	ab03      	add	r3, sp, #12
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	462a      	mov	r2, r5
 80079c0:	4630      	mov	r0, r6
 80079c2:	4b13      	ldr	r3, [pc, #76]	@ (8007a10 <_vfiprintf_r+0x22c>)
 80079c4:	a904      	add	r1, sp, #16
 80079c6:	f7fb ff41 	bl	800384c <_printf_float>
 80079ca:	4607      	mov	r7, r0
 80079cc:	1c78      	adds	r0, r7, #1
 80079ce:	d1d6      	bne.n	800797e <_vfiprintf_r+0x19a>
 80079d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079d2:	07d9      	lsls	r1, r3, #31
 80079d4:	d405      	bmi.n	80079e2 <_vfiprintf_r+0x1fe>
 80079d6:	89ab      	ldrh	r3, [r5, #12]
 80079d8:	059a      	lsls	r2, r3, #22
 80079da:	d402      	bmi.n	80079e2 <_vfiprintf_r+0x1fe>
 80079dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079de:	f7fc fea7 	bl	8004730 <__retarget_lock_release_recursive>
 80079e2:	89ab      	ldrh	r3, [r5, #12]
 80079e4:	065b      	lsls	r3, r3, #25
 80079e6:	f53f af1f 	bmi.w	8007828 <_vfiprintf_r+0x44>
 80079ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079ec:	e71e      	b.n	800782c <_vfiprintf_r+0x48>
 80079ee:	ab03      	add	r3, sp, #12
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	462a      	mov	r2, r5
 80079f4:	4630      	mov	r0, r6
 80079f6:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <_vfiprintf_r+0x22c>)
 80079f8:	a904      	add	r1, sp, #16
 80079fa:	f7fc f9c5 	bl	8003d88 <_printf_i>
 80079fe:	e7e4      	b.n	80079ca <_vfiprintf_r+0x1e6>
 8007a00:	08008f40 	.word	0x08008f40
 8007a04:	08008f46 	.word	0x08008f46
 8007a08:	08008f4a 	.word	0x08008f4a
 8007a0c:	0800384d 	.word	0x0800384d
 8007a10:	080077c1 	.word	0x080077c1

08007a14 <__swbuf_r>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	460e      	mov	r6, r1
 8007a18:	4614      	mov	r4, r2
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	b118      	cbz	r0, 8007a26 <__swbuf_r+0x12>
 8007a1e:	6a03      	ldr	r3, [r0, #32]
 8007a20:	b90b      	cbnz	r3, 8007a26 <__swbuf_r+0x12>
 8007a22:	f7fc fd6d 	bl	8004500 <__sinit>
 8007a26:	69a3      	ldr	r3, [r4, #24]
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	071a      	lsls	r2, r3, #28
 8007a2e:	d501      	bpl.n	8007a34 <__swbuf_r+0x20>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	b943      	cbnz	r3, 8007a46 <__swbuf_r+0x32>
 8007a34:	4621      	mov	r1, r4
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 f82a 	bl	8007a90 <__swsetup_r>
 8007a3c:	b118      	cbz	r0, 8007a46 <__swbuf_r+0x32>
 8007a3e:	f04f 37ff 	mov.w	r7, #4294967295
 8007a42:	4638      	mov	r0, r7
 8007a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	6922      	ldr	r2, [r4, #16]
 8007a4a:	b2f6      	uxtb	r6, r6
 8007a4c:	1a98      	subs	r0, r3, r2
 8007a4e:	6963      	ldr	r3, [r4, #20]
 8007a50:	4637      	mov	r7, r6
 8007a52:	4283      	cmp	r3, r0
 8007a54:	dc05      	bgt.n	8007a62 <__swbuf_r+0x4e>
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f7ff fa4b 	bl	8006ef4 <_fflush_r>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d1ed      	bne.n	8007a3e <__swbuf_r+0x2a>
 8007a62:	68a3      	ldr	r3, [r4, #8]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	60a3      	str	r3, [r4, #8]
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	6022      	str	r2, [r4, #0]
 8007a6e:	701e      	strb	r6, [r3, #0]
 8007a70:	6962      	ldr	r2, [r4, #20]
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d004      	beq.n	8007a82 <__swbuf_r+0x6e>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	07db      	lsls	r3, r3, #31
 8007a7c:	d5e1      	bpl.n	8007a42 <__swbuf_r+0x2e>
 8007a7e:	2e0a      	cmp	r6, #10
 8007a80:	d1df      	bne.n	8007a42 <__swbuf_r+0x2e>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f7ff fa35 	bl	8006ef4 <_fflush_r>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d0d9      	beq.n	8007a42 <__swbuf_r+0x2e>
 8007a8e:	e7d6      	b.n	8007a3e <__swbuf_r+0x2a>

08007a90 <__swsetup_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4b29      	ldr	r3, [pc, #164]	@ (8007b38 <__swsetup_r+0xa8>)
 8007a94:	4605      	mov	r5, r0
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	460c      	mov	r4, r1
 8007a9a:	b118      	cbz	r0, 8007aa4 <__swsetup_r+0x14>
 8007a9c:	6a03      	ldr	r3, [r0, #32]
 8007a9e:	b90b      	cbnz	r3, 8007aa4 <__swsetup_r+0x14>
 8007aa0:	f7fc fd2e 	bl	8004500 <__sinit>
 8007aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa8:	0719      	lsls	r1, r3, #28
 8007aaa:	d422      	bmi.n	8007af2 <__swsetup_r+0x62>
 8007aac:	06da      	lsls	r2, r3, #27
 8007aae:	d407      	bmi.n	8007ac0 <__swsetup_r+0x30>
 8007ab0:	2209      	movs	r2, #9
 8007ab2:	602a      	str	r2, [r5, #0]
 8007ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	81a3      	strh	r3, [r4, #12]
 8007abe:	e033      	b.n	8007b28 <__swsetup_r+0x98>
 8007ac0:	0758      	lsls	r0, r3, #29
 8007ac2:	d512      	bpl.n	8007aea <__swsetup_r+0x5a>
 8007ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ac6:	b141      	cbz	r1, 8007ada <__swsetup_r+0x4a>
 8007ac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007acc:	4299      	cmp	r1, r3
 8007ace:	d002      	beq.n	8007ad6 <__swsetup_r+0x46>
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f7fd fc91 	bl	80053f8 <_free_r>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6063      	str	r3, [r4, #4]
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f043 0308 	orr.w	r3, r3, #8
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	b94b      	cbnz	r3, 8007b0a <__swsetup_r+0x7a>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b00:	d003      	beq.n	8007b0a <__swsetup_r+0x7a>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4628      	mov	r0, r5
 8007b06:	f000 f882 	bl	8007c0e <__smakebuf_r>
 8007b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0e:	f013 0201 	ands.w	r2, r3, #1
 8007b12:	d00a      	beq.n	8007b2a <__swsetup_r+0x9a>
 8007b14:	2200      	movs	r2, #0
 8007b16:	60a2      	str	r2, [r4, #8]
 8007b18:	6962      	ldr	r2, [r4, #20]
 8007b1a:	4252      	negs	r2, r2
 8007b1c:	61a2      	str	r2, [r4, #24]
 8007b1e:	6922      	ldr	r2, [r4, #16]
 8007b20:	b942      	cbnz	r2, 8007b34 <__swsetup_r+0xa4>
 8007b22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b26:	d1c5      	bne.n	8007ab4 <__swsetup_r+0x24>
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
 8007b2a:	0799      	lsls	r1, r3, #30
 8007b2c:	bf58      	it	pl
 8007b2e:	6962      	ldrpl	r2, [r4, #20]
 8007b30:	60a2      	str	r2, [r4, #8]
 8007b32:	e7f4      	b.n	8007b1e <__swsetup_r+0x8e>
 8007b34:	2000      	movs	r0, #0
 8007b36:	e7f7      	b.n	8007b28 <__swsetup_r+0x98>
 8007b38:	20000020 	.word	0x20000020

08007b3c <_raise_r>:
 8007b3c:	291f      	cmp	r1, #31
 8007b3e:	b538      	push	{r3, r4, r5, lr}
 8007b40:	4605      	mov	r5, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	d904      	bls.n	8007b50 <_raise_r+0x14>
 8007b46:	2316      	movs	r3, #22
 8007b48:	6003      	str	r3, [r0, #0]
 8007b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b52:	b112      	cbz	r2, 8007b5a <_raise_r+0x1e>
 8007b54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b58:	b94b      	cbnz	r3, 8007b6e <_raise_r+0x32>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 f830 	bl	8007bc0 <_getpid_r>
 8007b60:	4622      	mov	r2, r4
 8007b62:	4601      	mov	r1, r0
 8007b64:	4628      	mov	r0, r5
 8007b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b6a:	f000 b817 	b.w	8007b9c <_kill_r>
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d00a      	beq.n	8007b88 <_raise_r+0x4c>
 8007b72:	1c59      	adds	r1, r3, #1
 8007b74:	d103      	bne.n	8007b7e <_raise_r+0x42>
 8007b76:	2316      	movs	r3, #22
 8007b78:	6003      	str	r3, [r0, #0]
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	e7e7      	b.n	8007b4e <_raise_r+0x12>
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4620      	mov	r0, r4
 8007b82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b86:	4798      	blx	r3
 8007b88:	2000      	movs	r0, #0
 8007b8a:	e7e0      	b.n	8007b4e <_raise_r+0x12>

08007b8c <raise>:
 8007b8c:	4b02      	ldr	r3, [pc, #8]	@ (8007b98 <raise+0xc>)
 8007b8e:	4601      	mov	r1, r0
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	f7ff bfd3 	b.w	8007b3c <_raise_r>
 8007b96:	bf00      	nop
 8007b98:	20000020 	.word	0x20000020

08007b9c <_kill_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	4d06      	ldr	r5, [pc, #24]	@ (8007bbc <_kill_r+0x20>)
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	f7fa f8bc 	bl	8001d26 <_kill>
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	d102      	bne.n	8007bb8 <_kill_r+0x1c>
 8007bb2:	682b      	ldr	r3, [r5, #0]
 8007bb4:	b103      	cbz	r3, 8007bb8 <_kill_r+0x1c>
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	bd38      	pop	{r3, r4, r5, pc}
 8007bba:	bf00      	nop
 8007bbc:	20000960 	.word	0x20000960

08007bc0 <_getpid_r>:
 8007bc0:	f7fa b8aa 	b.w	8001d18 <_getpid>

08007bc4 <__swhatbuf_r>:
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bcc:	4615      	mov	r5, r2
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	461e      	mov	r6, r3
 8007bd2:	b096      	sub	sp, #88	@ 0x58
 8007bd4:	da0c      	bge.n	8007bf0 <__swhatbuf_r+0x2c>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bde:	bf14      	ite	ne
 8007be0:	2340      	movne	r3, #64	@ 0x40
 8007be2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007be6:	2000      	movs	r0, #0
 8007be8:	6031      	str	r1, [r6, #0]
 8007bea:	602b      	str	r3, [r5, #0]
 8007bec:	b016      	add	sp, #88	@ 0x58
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	466a      	mov	r2, sp
 8007bf2:	f000 f849 	bl	8007c88 <_fstat_r>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	dbed      	blt.n	8007bd6 <__swhatbuf_r+0x12>
 8007bfa:	9901      	ldr	r1, [sp, #4]
 8007bfc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c04:	4259      	negs	r1, r3
 8007c06:	4159      	adcs	r1, r3
 8007c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c0c:	e7eb      	b.n	8007be6 <__swhatbuf_r+0x22>

08007c0e <__smakebuf_r>:
 8007c0e:	898b      	ldrh	r3, [r1, #12]
 8007c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c12:	079d      	lsls	r5, r3, #30
 8007c14:	4606      	mov	r6, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	d507      	bpl.n	8007c2a <__smakebuf_r+0x1c>
 8007c1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c1e:	6023      	str	r3, [r4, #0]
 8007c20:	6123      	str	r3, [r4, #16]
 8007c22:	2301      	movs	r3, #1
 8007c24:	6163      	str	r3, [r4, #20]
 8007c26:	b003      	add	sp, #12
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2a:	466a      	mov	r2, sp
 8007c2c:	ab01      	add	r3, sp, #4
 8007c2e:	f7ff ffc9 	bl	8007bc4 <__swhatbuf_r>
 8007c32:	9f00      	ldr	r7, [sp, #0]
 8007c34:	4605      	mov	r5, r0
 8007c36:	4639      	mov	r1, r7
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f7fd fc4f 	bl	80054dc <_malloc_r>
 8007c3e:	b948      	cbnz	r0, 8007c54 <__smakebuf_r+0x46>
 8007c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c44:	059a      	lsls	r2, r3, #22
 8007c46:	d4ee      	bmi.n	8007c26 <__smakebuf_r+0x18>
 8007c48:	f023 0303 	bic.w	r3, r3, #3
 8007c4c:	f043 0302 	orr.w	r3, r3, #2
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	e7e2      	b.n	8007c1a <__smakebuf_r+0xc>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c5e:	81a3      	strh	r3, [r4, #12]
 8007c60:	9b01      	ldr	r3, [sp, #4]
 8007c62:	6020      	str	r0, [r4, #0]
 8007c64:	b15b      	cbz	r3, 8007c7e <__smakebuf_r+0x70>
 8007c66:	4630      	mov	r0, r6
 8007c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c6c:	f000 f81e 	bl	8007cac <_isatty_r>
 8007c70:	b128      	cbz	r0, 8007c7e <__smakebuf_r+0x70>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f023 0303 	bic.w	r3, r3, #3
 8007c78:	f043 0301 	orr.w	r3, r3, #1
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	431d      	orrs	r5, r3
 8007c82:	81a5      	strh	r5, [r4, #12]
 8007c84:	e7cf      	b.n	8007c26 <__smakebuf_r+0x18>
	...

08007c88 <_fstat_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4d06      	ldr	r5, [pc, #24]	@ (8007ca8 <_fstat_r+0x20>)
 8007c8e:	4604      	mov	r4, r0
 8007c90:	4608      	mov	r0, r1
 8007c92:	4611      	mov	r1, r2
 8007c94:	602b      	str	r3, [r5, #0]
 8007c96:	f7fa f8a5 	bl	8001de4 <_fstat>
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	d102      	bne.n	8007ca4 <_fstat_r+0x1c>
 8007c9e:	682b      	ldr	r3, [r5, #0]
 8007ca0:	b103      	cbz	r3, 8007ca4 <_fstat_r+0x1c>
 8007ca2:	6023      	str	r3, [r4, #0]
 8007ca4:	bd38      	pop	{r3, r4, r5, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000960 	.word	0x20000960

08007cac <_isatty_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4d05      	ldr	r5, [pc, #20]	@ (8007cc8 <_isatty_r+0x1c>)
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	f7fa f8a3 	bl	8001e02 <_isatty>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_isatty_r+0x1a>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_isatty_r+0x1a>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	20000960 	.word	0x20000960

08007ccc <pow>:
 8007ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	461d      	mov	r5, r3
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4689      	mov	r9, r1
 8007cd8:	f000 f866 	bl	8007da8 <__ieee754_pow>
 8007cdc:	4622      	mov	r2, r4
 8007cde:	4606      	mov	r6, r0
 8007ce0:	460f      	mov	r7, r1
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 fe90 	bl	8000a0c <__aeabi_dcmpun>
 8007cec:	bbc8      	cbnz	r0, 8007d62 <pow+0x96>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 fe57 	bl	80009a8 <__aeabi_dcmpeq>
 8007cfa:	b1b8      	cbz	r0, 8007d2c <pow+0x60>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4620      	mov	r0, r4
 8007d02:	4629      	mov	r1, r5
 8007d04:	f7f8 fe50 	bl	80009a8 <__aeabi_dcmpeq>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d141      	bne.n	8007d90 <pow+0xc4>
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f000 f844 	bl	8007d9c <finite>
 8007d14:	b328      	cbz	r0, 8007d62 <pow+0x96>
 8007d16:	2200      	movs	r2, #0
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	f7f8 fe4d 	bl	80009bc <__aeabi_dcmplt>
 8007d22:	b1f0      	cbz	r0, 8007d62 <pow+0x96>
 8007d24:	f7fc fcd8 	bl	80046d8 <__errno>
 8007d28:	2322      	movs	r3, #34	@ 0x22
 8007d2a:	e019      	b.n	8007d60 <pow+0x94>
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f000 f834 	bl	8007d9c <finite>
 8007d34:	b9c8      	cbnz	r0, 8007d6a <pow+0x9e>
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f000 f82f 	bl	8007d9c <finite>
 8007d3e:	b1a0      	cbz	r0, 8007d6a <pow+0x9e>
 8007d40:	4620      	mov	r0, r4
 8007d42:	4629      	mov	r1, r5
 8007d44:	f000 f82a 	bl	8007d9c <finite>
 8007d48:	b178      	cbz	r0, 8007d6a <pow+0x9e>
 8007d4a:	4632      	mov	r2, r6
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	4630      	mov	r0, r6
 8007d50:	4639      	mov	r1, r7
 8007d52:	f7f8 fe5b 	bl	8000a0c <__aeabi_dcmpun>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0e4      	beq.n	8007d24 <pow+0x58>
 8007d5a:	f7fc fcbd 	bl	80046d8 <__errno>
 8007d5e:	2321      	movs	r3, #33	@ 0x21
 8007d60:	6003      	str	r3, [r0, #0]
 8007d62:	4630      	mov	r0, r6
 8007d64:	4639      	mov	r1, r7
 8007d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4630      	mov	r0, r6
 8007d70:	4639      	mov	r1, r7
 8007d72:	f7f8 fe19 	bl	80009a8 <__aeabi_dcmpeq>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d0f3      	beq.n	8007d62 <pow+0x96>
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	f000 f80d 	bl	8007d9c <finite>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d0ed      	beq.n	8007d62 <pow+0x96>
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f000 f807 	bl	8007d9c <finite>
 8007d8e:	e7c8      	b.n	8007d22 <pow+0x56>
 8007d90:	2600      	movs	r6, #0
 8007d92:	4f01      	ldr	r7, [pc, #4]	@ (8007d98 <pow+0xcc>)
 8007d94:	e7e5      	b.n	8007d62 <pow+0x96>
 8007d96:	bf00      	nop
 8007d98:	3ff00000 	.word	0x3ff00000

08007d9c <finite>:
 8007d9c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8007da0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007da4:	0fc0      	lsrs	r0, r0, #31
 8007da6:	4770      	bx	lr

08007da8 <__ieee754_pow>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	b091      	sub	sp, #68	@ 0x44
 8007dae:	e9cd 2300 	strd	r2, r3, [sp]
 8007db2:	468b      	mov	fp, r1
 8007db4:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007db8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	ea57 0001 	orrs.w	r0, r7, r1
 8007dc2:	d112      	bne.n	8007dea <__ieee754_pow+0x42>
 8007dc4:	4653      	mov	r3, sl
 8007dc6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8007dca:	18db      	adds	r3, r3, r3
 8007dcc:	4152      	adcs	r2, r2
 8007dce:	4298      	cmp	r0, r3
 8007dd0:	4b91      	ldr	r3, [pc, #580]	@ (8008018 <__ieee754_pow+0x270>)
 8007dd2:	4193      	sbcs	r3, r2
 8007dd4:	f080 84ce 	bcs.w	8008774 <__ieee754_pow+0x9cc>
 8007dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ddc:	4650      	mov	r0, sl
 8007dde:	4659      	mov	r1, fp
 8007de0:	f7f8 f9c4 	bl	800016c <__adddf3>
 8007de4:	b011      	add	sp, #68	@ 0x44
 8007de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dea:	4b8c      	ldr	r3, [pc, #560]	@ (800801c <__ieee754_pow+0x274>)
 8007dec:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8007df0:	429e      	cmp	r6, r3
 8007df2:	465d      	mov	r5, fp
 8007df4:	46d1      	mov	r9, sl
 8007df6:	d807      	bhi.n	8007e08 <__ieee754_pow+0x60>
 8007df8:	d102      	bne.n	8007e00 <__ieee754_pow+0x58>
 8007dfa:	f1ba 0f00 	cmp.w	sl, #0
 8007dfe:	d1eb      	bne.n	8007dd8 <__ieee754_pow+0x30>
 8007e00:	429f      	cmp	r7, r3
 8007e02:	d801      	bhi.n	8007e08 <__ieee754_pow+0x60>
 8007e04:	d10f      	bne.n	8007e26 <__ieee754_pow+0x7e>
 8007e06:	b171      	cbz	r1, 8007e26 <__ieee754_pow+0x7e>
 8007e08:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007e0c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007e10:	ea55 0509 	orrs.w	r5, r5, r9
 8007e14:	d1e0      	bne.n	8007dd8 <__ieee754_pow+0x30>
 8007e16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e1a:	18db      	adds	r3, r3, r3
 8007e1c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007e20:	4152      	adcs	r2, r2
 8007e22:	429d      	cmp	r5, r3
 8007e24:	e7d4      	b.n	8007dd0 <__ieee754_pow+0x28>
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	4633      	mov	r3, r6
 8007e2a:	da39      	bge.n	8007ea0 <__ieee754_pow+0xf8>
 8007e2c:	4a7c      	ldr	r2, [pc, #496]	@ (8008020 <__ieee754_pow+0x278>)
 8007e2e:	4297      	cmp	r7, r2
 8007e30:	d84e      	bhi.n	8007ed0 <__ieee754_pow+0x128>
 8007e32:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007e36:	4297      	cmp	r7, r2
 8007e38:	f240 84ab 	bls.w	8008792 <__ieee754_pow+0x9ea>
 8007e3c:	153a      	asrs	r2, r7, #20
 8007e3e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007e42:	2a14      	cmp	r2, #20
 8007e44:	dd0f      	ble.n	8007e66 <__ieee754_pow+0xbe>
 8007e46:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007e4a:	fa21 f402 	lsr.w	r4, r1, r2
 8007e4e:	fa04 f202 	lsl.w	r2, r4, r2
 8007e52:	428a      	cmp	r2, r1
 8007e54:	f040 849d 	bne.w	8008792 <__ieee754_pow+0x9ea>
 8007e58:	f004 0401 	and.w	r4, r4, #1
 8007e5c:	f1c4 0402 	rsb	r4, r4, #2
 8007e60:	2900      	cmp	r1, #0
 8007e62:	d15a      	bne.n	8007f1a <__ieee754_pow+0x172>
 8007e64:	e00e      	b.n	8007e84 <__ieee754_pow+0xdc>
 8007e66:	2900      	cmp	r1, #0
 8007e68:	d156      	bne.n	8007f18 <__ieee754_pow+0x170>
 8007e6a:	f1c2 0214 	rsb	r2, r2, #20
 8007e6e:	fa47 f402 	asr.w	r4, r7, r2
 8007e72:	fa04 f202 	lsl.w	r2, r4, r2
 8007e76:	42ba      	cmp	r2, r7
 8007e78:	f040 8488 	bne.w	800878c <__ieee754_pow+0x9e4>
 8007e7c:	f004 0401 	and.w	r4, r4, #1
 8007e80:	f1c4 0402 	rsb	r4, r4, #2
 8007e84:	4a67      	ldr	r2, [pc, #412]	@ (8008024 <__ieee754_pow+0x27c>)
 8007e86:	4297      	cmp	r7, r2
 8007e88:	d130      	bne.n	8007eec <__ieee754_pow+0x144>
 8007e8a:	f1b8 0f00 	cmp.w	r8, #0
 8007e8e:	f280 8479 	bge.w	8008784 <__ieee754_pow+0x9dc>
 8007e92:	4652      	mov	r2, sl
 8007e94:	465b      	mov	r3, fp
 8007e96:	2000      	movs	r0, #0
 8007e98:	4962      	ldr	r1, [pc, #392]	@ (8008024 <__ieee754_pow+0x27c>)
 8007e9a:	f7f8 fc47 	bl	800072c <__aeabi_ddiv>
 8007e9e:	e7a1      	b.n	8007de4 <__ieee754_pow+0x3c>
 8007ea0:	2400      	movs	r4, #0
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	d139      	bne.n	8007f1a <__ieee754_pow+0x172>
 8007ea6:	4a5d      	ldr	r2, [pc, #372]	@ (800801c <__ieee754_pow+0x274>)
 8007ea8:	4297      	cmp	r7, r2
 8007eaa:	d1eb      	bne.n	8007e84 <__ieee754_pow+0xdc>
 8007eac:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8007eb0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007eb4:	ea53 0309 	orrs.w	r3, r3, r9
 8007eb8:	f000 845c 	beq.w	8008774 <__ieee754_pow+0x9cc>
 8007ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8008028 <__ieee754_pow+0x280>)
 8007ebe:	429e      	cmp	r6, r3
 8007ec0:	d908      	bls.n	8007ed4 <__ieee754_pow+0x12c>
 8007ec2:	f1b8 0f00 	cmp.w	r8, #0
 8007ec6:	f2c0 8459 	blt.w	800877c <__ieee754_pow+0x9d4>
 8007eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ece:	e789      	b.n	8007de4 <__ieee754_pow+0x3c>
 8007ed0:	2402      	movs	r4, #2
 8007ed2:	e7e6      	b.n	8007ea2 <__ieee754_pow+0xfa>
 8007ed4:	f1b8 0f00 	cmp.w	r8, #0
 8007ed8:	f04f 0000 	mov.w	r0, #0
 8007edc:	f04f 0100 	mov.w	r1, #0
 8007ee0:	da80      	bge.n	8007de4 <__ieee754_pow+0x3c>
 8007ee2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007ee6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007eea:	e77b      	b.n	8007de4 <__ieee754_pow+0x3c>
 8007eec:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007ef0:	d106      	bne.n	8007f00 <__ieee754_pow+0x158>
 8007ef2:	4652      	mov	r2, sl
 8007ef4:	465b      	mov	r3, fp
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	4659      	mov	r1, fp
 8007efa:	f7f8 faed 	bl	80004d8 <__aeabi_dmul>
 8007efe:	e771      	b.n	8007de4 <__ieee754_pow+0x3c>
 8007f00:	4a4a      	ldr	r2, [pc, #296]	@ (800802c <__ieee754_pow+0x284>)
 8007f02:	4590      	cmp	r8, r2
 8007f04:	d109      	bne.n	8007f1a <__ieee754_pow+0x172>
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	db07      	blt.n	8007f1a <__ieee754_pow+0x172>
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	b011      	add	sp, #68	@ 0x44
 8007f10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	f000 bd12 	b.w	800893c <__ieee754_sqrt>
 8007f18:	2400      	movs	r4, #0
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	9302      	str	r3, [sp, #8]
 8007f20:	f000 fc6a 	bl	80087f8 <fabs>
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	f1b9 0f00 	cmp.w	r9, #0
 8007f2a:	d127      	bne.n	8007f7c <__ieee754_pow+0x1d4>
 8007f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8008024 <__ieee754_pow+0x27c>)
 8007f2e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8007f32:	4594      	cmp	ip, r2
 8007f34:	d000      	beq.n	8007f38 <__ieee754_pow+0x190>
 8007f36:	bb0e      	cbnz	r6, 8007f7c <__ieee754_pow+0x1d4>
 8007f38:	f1b8 0f00 	cmp.w	r8, #0
 8007f3c:	da05      	bge.n	8007f4a <__ieee754_pow+0x1a2>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	2000      	movs	r0, #0
 8007f44:	4937      	ldr	r1, [pc, #220]	@ (8008024 <__ieee754_pow+0x27c>)
 8007f46:	f7f8 fbf1 	bl	800072c <__aeabi_ddiv>
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	f6bf af4a 	bge.w	8007de4 <__ieee754_pow+0x3c>
 8007f50:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8007f54:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007f58:	4326      	orrs	r6, r4
 8007f5a:	d108      	bne.n	8007f6e <__ieee754_pow+0x1c6>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4610      	mov	r0, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	f7f8 f900 	bl	8000168 <__aeabi_dsub>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	e795      	b.n	8007e9a <__ieee754_pow+0xf2>
 8007f6e:	2c01      	cmp	r4, #1
 8007f70:	f47f af38 	bne.w	8007de4 <__ieee754_pow+0x3c>
 8007f74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f78:	4619      	mov	r1, r3
 8007f7a:	e733      	b.n	8007de4 <__ieee754_pow+0x3c>
 8007f7c:	0fea      	lsrs	r2, r5, #31
 8007f7e:	3a01      	subs	r2, #1
 8007f80:	ea52 0c04 	orrs.w	ip, r2, r4
 8007f84:	d102      	bne.n	8007f8c <__ieee754_pow+0x1e4>
 8007f86:	4652      	mov	r2, sl
 8007f88:	465b      	mov	r3, fp
 8007f8a:	e7e9      	b.n	8007f60 <__ieee754_pow+0x1b8>
 8007f8c:	f04f 0900 	mov.w	r9, #0
 8007f90:	3c01      	subs	r4, #1
 8007f92:	4314      	orrs	r4, r2
 8007f94:	bf14      	ite	ne
 8007f96:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8008024 <__ieee754_pow+0x27c>
 8007f9a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008030 <__ieee754_pow+0x288>
 8007f9e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8007fa2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8007fa6:	f240 8107 	bls.w	80081b8 <__ieee754_pow+0x410>
 8007faa:	4b22      	ldr	r3, [pc, #136]	@ (8008034 <__ieee754_pow+0x28c>)
 8007fac:	429f      	cmp	r7, r3
 8007fae:	4b1e      	ldr	r3, [pc, #120]	@ (8008028 <__ieee754_pow+0x280>)
 8007fb0:	d913      	bls.n	8007fda <__ieee754_pow+0x232>
 8007fb2:	429e      	cmp	r6, r3
 8007fb4:	d808      	bhi.n	8007fc8 <__ieee754_pow+0x220>
 8007fb6:	f1b8 0f00 	cmp.w	r8, #0
 8007fba:	da08      	bge.n	8007fce <__ieee754_pow+0x226>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	b011      	add	sp, #68	@ 0x44
 8007fc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	f000 bcb4 	b.w	8008930 <__math_oflow>
 8007fc8:	f1b8 0f00 	cmp.w	r8, #0
 8007fcc:	dcf6      	bgt.n	8007fbc <__ieee754_pow+0x214>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	b011      	add	sp, #68	@ 0x44
 8007fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd6:	f000 bca6 	b.w	8008926 <__math_uflow>
 8007fda:	429e      	cmp	r6, r3
 8007fdc:	d20c      	bcs.n	8007ff8 <__ieee754_pow+0x250>
 8007fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f7f8 fce9 	bl	80009bc <__aeabi_dcmplt>
 8007fea:	3800      	subs	r0, #0
 8007fec:	bf18      	it	ne
 8007fee:	2001      	movne	r0, #1
 8007ff0:	f1b8 0f00 	cmp.w	r8, #0
 8007ff4:	daec      	bge.n	8007fd0 <__ieee754_pow+0x228>
 8007ff6:	e7e2      	b.n	8007fbe <__ieee754_pow+0x216>
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <__ieee754_pow+0x27c>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	429e      	cmp	r6, r3
 8007ffe:	d91b      	bls.n	8008038 <__ieee754_pow+0x290>
 8008000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008004:	2300      	movs	r3, #0
 8008006:	f7f8 fcd9 	bl	80009bc <__aeabi_dcmplt>
 800800a:	3800      	subs	r0, #0
 800800c:	bf18      	it	ne
 800800e:	2001      	movne	r0, #1
 8008010:	f1b8 0f00 	cmp.w	r8, #0
 8008014:	dcd3      	bgt.n	8007fbe <__ieee754_pow+0x216>
 8008016:	e7db      	b.n	8007fd0 <__ieee754_pow+0x228>
 8008018:	fff00000 	.word	0xfff00000
 800801c:	7ff00000 	.word	0x7ff00000
 8008020:	433fffff 	.word	0x433fffff
 8008024:	3ff00000 	.word	0x3ff00000
 8008028:	3fefffff 	.word	0x3fefffff
 800802c:	3fe00000 	.word	0x3fe00000
 8008030:	bff00000 	.word	0xbff00000
 8008034:	43f00000 	.word	0x43f00000
 8008038:	4b5b      	ldr	r3, [pc, #364]	@ (80081a8 <__ieee754_pow+0x400>)
 800803a:	f7f8 f895 	bl	8000168 <__aeabi_dsub>
 800803e:	a352      	add	r3, pc, #328	@ (adr r3, 8008188 <__ieee754_pow+0x3e0>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	4604      	mov	r4, r0
 8008046:	460d      	mov	r5, r1
 8008048:	f7f8 fa46 	bl	80004d8 <__aeabi_dmul>
 800804c:	a350      	add	r3, pc, #320	@ (adr r3, 8008190 <__ieee754_pow+0x3e8>)
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	4606      	mov	r6, r0
 8008054:	460f      	mov	r7, r1
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fa3d 	bl	80004d8 <__aeabi_dmul>
 800805e:	2200      	movs	r2, #0
 8008060:	4682      	mov	sl, r0
 8008062:	468b      	mov	fp, r1
 8008064:	4620      	mov	r0, r4
 8008066:	4629      	mov	r1, r5
 8008068:	4b50      	ldr	r3, [pc, #320]	@ (80081ac <__ieee754_pow+0x404>)
 800806a:	f7f8 fa35 	bl	80004d8 <__aeabi_dmul>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	a149      	add	r1, pc, #292	@ (adr r1, 8008198 <__ieee754_pow+0x3f0>)
 8008074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008078:	f7f8 f876 	bl	8000168 <__aeabi_dsub>
 800807c:	4622      	mov	r2, r4
 800807e:	462b      	mov	r3, r5
 8008080:	f7f8 fa2a 	bl	80004d8 <__aeabi_dmul>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	2000      	movs	r0, #0
 800808a:	4949      	ldr	r1, [pc, #292]	@ (80081b0 <__ieee754_pow+0x408>)
 800808c:	f7f8 f86c 	bl	8000168 <__aeabi_dsub>
 8008090:	4622      	mov	r2, r4
 8008092:	4680      	mov	r8, r0
 8008094:	4689      	mov	r9, r1
 8008096:	462b      	mov	r3, r5
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 fa1c 	bl	80004d8 <__aeabi_dmul>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4640      	mov	r0, r8
 80080a6:	4649      	mov	r1, r9
 80080a8:	f7f8 fa16 	bl	80004d8 <__aeabi_dmul>
 80080ac:	a33c      	add	r3, pc, #240	@ (adr r3, 80081a0 <__ieee754_pow+0x3f8>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 fa11 	bl	80004d8 <__aeabi_dmul>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4650      	mov	r0, sl
 80080bc:	4659      	mov	r1, fp
 80080be:	f7f8 f853 	bl	8000168 <__aeabi_dsub>
 80080c2:	2400      	movs	r4, #0
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4680      	mov	r8, r0
 80080ca:	4689      	mov	r9, r1
 80080cc:	4630      	mov	r0, r6
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 f84c 	bl	800016c <__adddf3>
 80080d4:	4632      	mov	r2, r6
 80080d6:	463b      	mov	r3, r7
 80080d8:	4620      	mov	r0, r4
 80080da:	460d      	mov	r5, r1
 80080dc:	f7f8 f844 	bl	8000168 <__aeabi_dsub>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4640      	mov	r0, r8
 80080e6:	4649      	mov	r1, r9
 80080e8:	f7f8 f83e 	bl	8000168 <__aeabi_dsub>
 80080ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080f4:	2300      	movs	r3, #0
 80080f6:	9304      	str	r3, [sp, #16]
 80080f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008104:	4652      	mov	r2, sl
 8008106:	465b      	mov	r3, fp
 8008108:	f7f8 f82e 	bl	8000168 <__aeabi_dsub>
 800810c:	4622      	mov	r2, r4
 800810e:	462b      	mov	r3, r5
 8008110:	f7f8 f9e2 	bl	80004d8 <__aeabi_dmul>
 8008114:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008118:	4680      	mov	r8, r0
 800811a:	4689      	mov	r9, r1
 800811c:	4630      	mov	r0, r6
 800811e:	4639      	mov	r1, r7
 8008120:	f7f8 f9da 	bl	80004d8 <__aeabi_dmul>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4640      	mov	r0, r8
 800812a:	4649      	mov	r1, r9
 800812c:	f7f8 f81e 	bl	800016c <__adddf3>
 8008130:	4652      	mov	r2, sl
 8008132:	465b      	mov	r3, fp
 8008134:	4606      	mov	r6, r0
 8008136:	460f      	mov	r7, r1
 8008138:	4620      	mov	r0, r4
 800813a:	4629      	mov	r1, r5
 800813c:	f7f8 f9cc 	bl	80004d8 <__aeabi_dmul>
 8008140:	460b      	mov	r3, r1
 8008142:	4602      	mov	r2, r0
 8008144:	4680      	mov	r8, r0
 8008146:	4689      	mov	r9, r1
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 f80e 	bl	800016c <__adddf3>
 8008150:	4b18      	ldr	r3, [pc, #96]	@ (80081b4 <__ieee754_pow+0x40c>)
 8008152:	4604      	mov	r4, r0
 8008154:	4299      	cmp	r1, r3
 8008156:	460d      	mov	r5, r1
 8008158:	468a      	mov	sl, r1
 800815a:	468b      	mov	fp, r1
 800815c:	f340 82e0 	ble.w	8008720 <__ieee754_pow+0x978>
 8008160:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008164:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008168:	4303      	orrs	r3, r0
 800816a:	f000 81df 	beq.w	800852c <__ieee754_pow+0x784>
 800816e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008172:	2200      	movs	r2, #0
 8008174:	2300      	movs	r3, #0
 8008176:	f7f8 fc21 	bl	80009bc <__aeabi_dcmplt>
 800817a:	3800      	subs	r0, #0
 800817c:	bf18      	it	ne
 800817e:	2001      	movne	r0, #1
 8008180:	e71d      	b.n	8007fbe <__ieee754_pow+0x216>
 8008182:	bf00      	nop
 8008184:	f3af 8000 	nop.w
 8008188:	60000000 	.word	0x60000000
 800818c:	3ff71547 	.word	0x3ff71547
 8008190:	f85ddf44 	.word	0xf85ddf44
 8008194:	3e54ae0b 	.word	0x3e54ae0b
 8008198:	55555555 	.word	0x55555555
 800819c:	3fd55555 	.word	0x3fd55555
 80081a0:	652b82fe 	.word	0x652b82fe
 80081a4:	3ff71547 	.word	0x3ff71547
 80081a8:	3ff00000 	.word	0x3ff00000
 80081ac:	3fd00000 	.word	0x3fd00000
 80081b0:	3fe00000 	.word	0x3fe00000
 80081b4:	408fffff 	.word	0x408fffff
 80081b8:	4ad3      	ldr	r2, [pc, #844]	@ (8008508 <__ieee754_pow+0x760>)
 80081ba:	402a      	ands	r2, r5
 80081bc:	2a00      	cmp	r2, #0
 80081be:	f040 817a 	bne.w	80084b6 <__ieee754_pow+0x70e>
 80081c2:	4bd2      	ldr	r3, [pc, #840]	@ (800850c <__ieee754_pow+0x764>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	f7f8 f987 	bl	80004d8 <__aeabi_dmul>
 80081ca:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80081ce:	460b      	mov	r3, r1
 80081d0:	151a      	asrs	r2, r3, #20
 80081d2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80081d6:	4422      	add	r2, r4
 80081d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80081da:	4acd      	ldr	r2, [pc, #820]	@ (8008510 <__ieee754_pow+0x768>)
 80081dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081e0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80081e4:	4293      	cmp	r3, r2
 80081e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80081ea:	dd08      	ble.n	80081fe <__ieee754_pow+0x456>
 80081ec:	4ac9      	ldr	r2, [pc, #804]	@ (8008514 <__ieee754_pow+0x76c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	f340 8163 	ble.w	80084ba <__ieee754_pow+0x712>
 80081f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081f6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80081fa:	3301      	adds	r3, #1
 80081fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80081fe:	2600      	movs	r6, #0
 8008200:	00f3      	lsls	r3, r6, #3
 8008202:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008204:	4bc4      	ldr	r3, [pc, #784]	@ (8008518 <__ieee754_pow+0x770>)
 8008206:	4629      	mov	r1, r5
 8008208:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800820c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008210:	461a      	mov	r2, r3
 8008212:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008216:	4623      	mov	r3, r4
 8008218:	4682      	mov	sl, r0
 800821a:	f7f7 ffa5 	bl	8000168 <__aeabi_dsub>
 800821e:	4652      	mov	r2, sl
 8008220:	462b      	mov	r3, r5
 8008222:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008226:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800822a:	f7f7 ff9f 	bl	800016c <__adddf3>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	2000      	movs	r0, #0
 8008234:	49b9      	ldr	r1, [pc, #740]	@ (800851c <__ieee754_pow+0x774>)
 8008236:	f7f8 fa79 	bl	800072c <__aeabi_ddiv>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008246:	f7f8 f947 	bl	80004d8 <__aeabi_dmul>
 800824a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800824e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008252:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008256:	2300      	movs	r3, #0
 8008258:	2200      	movs	r2, #0
 800825a:	46ab      	mov	fp, r5
 800825c:	106d      	asrs	r5, r5, #1
 800825e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008268:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800826c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008270:	4640      	mov	r0, r8
 8008272:	4649      	mov	r1, r9
 8008274:	4614      	mov	r4, r2
 8008276:	461d      	mov	r5, r3
 8008278:	f7f8 f92e 	bl	80004d8 <__aeabi_dmul>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008284:	f7f7 ff70 	bl	8000168 <__aeabi_dsub>
 8008288:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800828c:	4606      	mov	r6, r0
 800828e:	460f      	mov	r7, r1
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f7 ff68 	bl	8000168 <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4650      	mov	r0, sl
 800829e:	4659      	mov	r1, fp
 80082a0:	f7f7 ff62 	bl	8000168 <__aeabi_dsub>
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	f7f8 f916 	bl	80004d8 <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4630      	mov	r0, r6
 80082b2:	4639      	mov	r1, r7
 80082b4:	f7f7 ff58 	bl	8000168 <__aeabi_dsub>
 80082b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80082bc:	f7f8 f90c 	bl	80004d8 <__aeabi_dmul>
 80082c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082c8:	4610      	mov	r0, r2
 80082ca:	4619      	mov	r1, r3
 80082cc:	f7f8 f904 	bl	80004d8 <__aeabi_dmul>
 80082d0:	a37b      	add	r3, pc, #492	@ (adr r3, 80084c0 <__ieee754_pow+0x718>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	4604      	mov	r4, r0
 80082d8:	460d      	mov	r5, r1
 80082da:	f7f8 f8fd 	bl	80004d8 <__aeabi_dmul>
 80082de:	a37a      	add	r3, pc, #488	@ (adr r3, 80084c8 <__ieee754_pow+0x720>)
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f7f7 ff42 	bl	800016c <__adddf3>
 80082e8:	4622      	mov	r2, r4
 80082ea:	462b      	mov	r3, r5
 80082ec:	f7f8 f8f4 	bl	80004d8 <__aeabi_dmul>
 80082f0:	a377      	add	r3, pc, #476	@ (adr r3, 80084d0 <__ieee754_pow+0x728>)
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f7 ff39 	bl	800016c <__adddf3>
 80082fa:	4622      	mov	r2, r4
 80082fc:	462b      	mov	r3, r5
 80082fe:	f7f8 f8eb 	bl	80004d8 <__aeabi_dmul>
 8008302:	a375      	add	r3, pc, #468	@ (adr r3, 80084d8 <__ieee754_pow+0x730>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f7 ff30 	bl	800016c <__adddf3>
 800830c:	4622      	mov	r2, r4
 800830e:	462b      	mov	r3, r5
 8008310:	f7f8 f8e2 	bl	80004d8 <__aeabi_dmul>
 8008314:	a372      	add	r3, pc, #456	@ (adr r3, 80084e0 <__ieee754_pow+0x738>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f7 ff27 	bl	800016c <__adddf3>
 800831e:	4622      	mov	r2, r4
 8008320:	462b      	mov	r3, r5
 8008322:	f7f8 f8d9 	bl	80004d8 <__aeabi_dmul>
 8008326:	a370      	add	r3, pc, #448	@ (adr r3, 80084e8 <__ieee754_pow+0x740>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f7 ff1e 	bl	800016c <__adddf3>
 8008330:	4622      	mov	r2, r4
 8008332:	4606      	mov	r6, r0
 8008334:	460f      	mov	r7, r1
 8008336:	462b      	mov	r3, r5
 8008338:	4620      	mov	r0, r4
 800833a:	4629      	mov	r1, r5
 800833c:	f7f8 f8cc 	bl	80004d8 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f8 f8c6 	bl	80004d8 <__aeabi_dmul>
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008354:	4642      	mov	r2, r8
 8008356:	464b      	mov	r3, r9
 8008358:	f7f7 ff08 	bl	800016c <__adddf3>
 800835c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008360:	f7f8 f8ba 	bl	80004d8 <__aeabi_dmul>
 8008364:	4622      	mov	r2, r4
 8008366:	462b      	mov	r3, r5
 8008368:	f7f7 ff00 	bl	800016c <__adddf3>
 800836c:	4642      	mov	r2, r8
 800836e:	4682      	mov	sl, r0
 8008370:	468b      	mov	fp, r1
 8008372:	464b      	mov	r3, r9
 8008374:	4640      	mov	r0, r8
 8008376:	4649      	mov	r1, r9
 8008378:	f7f8 f8ae 	bl	80004d8 <__aeabi_dmul>
 800837c:	2200      	movs	r2, #0
 800837e:	4b68      	ldr	r3, [pc, #416]	@ (8008520 <__ieee754_pow+0x778>)
 8008380:	4606      	mov	r6, r0
 8008382:	460f      	mov	r7, r1
 8008384:	f7f7 fef2 	bl	800016c <__adddf3>
 8008388:	4652      	mov	r2, sl
 800838a:	465b      	mov	r3, fp
 800838c:	f7f7 feee 	bl	800016c <__adddf3>
 8008390:	2400      	movs	r4, #0
 8008392:	460d      	mov	r5, r1
 8008394:	4622      	mov	r2, r4
 8008396:	460b      	mov	r3, r1
 8008398:	4640      	mov	r0, r8
 800839a:	4649      	mov	r1, r9
 800839c:	f7f8 f89c 	bl	80004d8 <__aeabi_dmul>
 80083a0:	2200      	movs	r2, #0
 80083a2:	4680      	mov	r8, r0
 80083a4:	4689      	mov	r9, r1
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	4b5d      	ldr	r3, [pc, #372]	@ (8008520 <__ieee754_pow+0x778>)
 80083ac:	f7f7 fedc 	bl	8000168 <__aeabi_dsub>
 80083b0:	4632      	mov	r2, r6
 80083b2:	463b      	mov	r3, r7
 80083b4:	f7f7 fed8 	bl	8000168 <__aeabi_dsub>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4650      	mov	r0, sl
 80083be:	4659      	mov	r1, fp
 80083c0:	f7f7 fed2 	bl	8000168 <__aeabi_dsub>
 80083c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083c8:	f7f8 f886 	bl	80004d8 <__aeabi_dmul>
 80083cc:	4622      	mov	r2, r4
 80083ce:	4606      	mov	r6, r0
 80083d0:	460f      	mov	r7, r1
 80083d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083d6:	462b      	mov	r3, r5
 80083d8:	f7f8 f87e 	bl	80004d8 <__aeabi_dmul>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f7f7 fec2 	bl	800016c <__adddf3>
 80083e8:	2400      	movs	r4, #0
 80083ea:	4606      	mov	r6, r0
 80083ec:	460f      	mov	r7, r1
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4640      	mov	r0, r8
 80083f4:	4649      	mov	r1, r9
 80083f6:	f7f7 feb9 	bl	800016c <__adddf3>
 80083fa:	a33d      	add	r3, pc, #244	@ (adr r3, 80084f0 <__ieee754_pow+0x748>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	4620      	mov	r0, r4
 8008402:	460d      	mov	r5, r1
 8008404:	f7f8 f868 	bl	80004d8 <__aeabi_dmul>
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008410:	4620      	mov	r0, r4
 8008412:	4629      	mov	r1, r5
 8008414:	f7f7 fea8 	bl	8000168 <__aeabi_dsub>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f7 fea2 	bl	8000168 <__aeabi_dsub>
 8008424:	a334      	add	r3, pc, #208	@ (adr r3, 80084f8 <__ieee754_pow+0x750>)
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	f7f8 f855 	bl	80004d8 <__aeabi_dmul>
 800842e:	a334      	add	r3, pc, #208	@ (adr r3, 8008500 <__ieee754_pow+0x758>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	4606      	mov	r6, r0
 8008436:	460f      	mov	r7, r1
 8008438:	4620      	mov	r0, r4
 800843a:	4629      	mov	r1, r5
 800843c:	f7f8 f84c 	bl	80004d8 <__aeabi_dmul>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	4630      	mov	r0, r6
 8008446:	4639      	mov	r1, r7
 8008448:	f7f7 fe90 	bl	800016c <__adddf3>
 800844c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800844e:	4b35      	ldr	r3, [pc, #212]	@ (8008524 <__ieee754_pow+0x77c>)
 8008450:	2400      	movs	r4, #0
 8008452:	4413      	add	r3, r2
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f7f7 fe88 	bl	800016c <__adddf3>
 800845c:	4682      	mov	sl, r0
 800845e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008460:	468b      	mov	fp, r1
 8008462:	f7f7 ffcf 	bl	8000404 <__aeabi_i2d>
 8008466:	4606      	mov	r6, r0
 8008468:	460f      	mov	r7, r1
 800846a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800846c:	4b2e      	ldr	r3, [pc, #184]	@ (8008528 <__ieee754_pow+0x780>)
 800846e:	4413      	add	r3, r2
 8008470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008474:	4652      	mov	r2, sl
 8008476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800847a:	465b      	mov	r3, fp
 800847c:	f7f7 fe76 	bl	800016c <__adddf3>
 8008480:	4642      	mov	r2, r8
 8008482:	464b      	mov	r3, r9
 8008484:	f7f7 fe72 	bl	800016c <__adddf3>
 8008488:	4632      	mov	r2, r6
 800848a:	463b      	mov	r3, r7
 800848c:	f7f7 fe6e 	bl	800016c <__adddf3>
 8008490:	4632      	mov	r2, r6
 8008492:	463b      	mov	r3, r7
 8008494:	4620      	mov	r0, r4
 8008496:	460d      	mov	r5, r1
 8008498:	f7f7 fe66 	bl	8000168 <__aeabi_dsub>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	f7f7 fe62 	bl	8000168 <__aeabi_dsub>
 80084a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084a8:	f7f7 fe5e 	bl	8000168 <__aeabi_dsub>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4650      	mov	r0, sl
 80084b2:	4659      	mov	r1, fp
 80084b4:	e618      	b.n	80080e8 <__ieee754_pow+0x340>
 80084b6:	2400      	movs	r4, #0
 80084b8:	e68a      	b.n	80081d0 <__ieee754_pow+0x428>
 80084ba:	2601      	movs	r6, #1
 80084bc:	e6a0      	b.n	8008200 <__ieee754_pow+0x458>
 80084be:	bf00      	nop
 80084c0:	4a454eef 	.word	0x4a454eef
 80084c4:	3fca7e28 	.word	0x3fca7e28
 80084c8:	93c9db65 	.word	0x93c9db65
 80084cc:	3fcd864a 	.word	0x3fcd864a
 80084d0:	a91d4101 	.word	0xa91d4101
 80084d4:	3fd17460 	.word	0x3fd17460
 80084d8:	518f264d 	.word	0x518f264d
 80084dc:	3fd55555 	.word	0x3fd55555
 80084e0:	db6fabff 	.word	0xdb6fabff
 80084e4:	3fdb6db6 	.word	0x3fdb6db6
 80084e8:	33333303 	.word	0x33333303
 80084ec:	3fe33333 	.word	0x3fe33333
 80084f0:	e0000000 	.word	0xe0000000
 80084f4:	3feec709 	.word	0x3feec709
 80084f8:	dc3a03fd 	.word	0xdc3a03fd
 80084fc:	3feec709 	.word	0x3feec709
 8008500:	145b01f5 	.word	0x145b01f5
 8008504:	be3e2fe0 	.word	0xbe3e2fe0
 8008508:	7ff00000 	.word	0x7ff00000
 800850c:	43400000 	.word	0x43400000
 8008510:	0003988e 	.word	0x0003988e
 8008514:	000bb679 	.word	0x000bb679
 8008518:	08009018 	.word	0x08009018
 800851c:	3ff00000 	.word	0x3ff00000
 8008520:	40080000 	.word	0x40080000
 8008524:	08008ff8 	.word	0x08008ff8
 8008528:	08009008 	.word	0x08009008
 800852c:	a39a      	add	r3, pc, #616	@ (adr r3, 8008798 <__ieee754_pow+0x9f0>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	4630      	mov	r0, r6
 8008534:	4639      	mov	r1, r7
 8008536:	f7f7 fe19 	bl	800016c <__adddf3>
 800853a:	4642      	mov	r2, r8
 800853c:	e9cd 0100 	strd	r0, r1, [sp]
 8008540:	464b      	mov	r3, r9
 8008542:	4620      	mov	r0, r4
 8008544:	4629      	mov	r1, r5
 8008546:	f7f7 fe0f 	bl	8000168 <__aeabi_dsub>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008552:	f7f8 fa51 	bl	80009f8 <__aeabi_dcmpgt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f47f ae09 	bne.w	800816e <__ieee754_pow+0x3c6>
 800855c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008560:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008564:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008568:	fa43 fa0a 	asr.w	sl, r3, sl
 800856c:	44da      	add	sl, fp
 800856e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008572:	489b      	ldr	r0, [pc, #620]	@ (80087e0 <__ieee754_pow+0xa38>)
 8008574:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008578:	4108      	asrs	r0, r1
 800857a:	ea00 030a 	and.w	r3, r0, sl
 800857e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008582:	f1c1 0114 	rsb	r1, r1, #20
 8008586:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800858a:	4640      	mov	r0, r8
 800858c:	fa4a fa01 	asr.w	sl, sl, r1
 8008590:	f1bb 0f00 	cmp.w	fp, #0
 8008594:	4649      	mov	r1, r9
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	bfb8      	it	lt
 800859c:	f1ca 0a00 	rsblt	sl, sl, #0
 80085a0:	f7f7 fde2 	bl	8000168 <__aeabi_dsub>
 80085a4:	4680      	mov	r8, r0
 80085a6:	4689      	mov	r9, r1
 80085a8:	2400      	movs	r4, #0
 80085aa:	4632      	mov	r2, r6
 80085ac:	463b      	mov	r3, r7
 80085ae:	4640      	mov	r0, r8
 80085b0:	4649      	mov	r1, r9
 80085b2:	f7f7 fddb 	bl	800016c <__adddf3>
 80085b6:	a37a      	add	r3, pc, #488	@ (adr r3, 80087a0 <__ieee754_pow+0x9f8>)
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	4620      	mov	r0, r4
 80085be:	460d      	mov	r5, r1
 80085c0:	f7f7 ff8a 	bl	80004d8 <__aeabi_dmul>
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	e9cd 0100 	strd	r0, r1, [sp]
 80085cc:	4620      	mov	r0, r4
 80085ce:	4629      	mov	r1, r5
 80085d0:	f7f7 fdca 	bl	8000168 <__aeabi_dsub>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4630      	mov	r0, r6
 80085da:	4639      	mov	r1, r7
 80085dc:	f7f7 fdc4 	bl	8000168 <__aeabi_dsub>
 80085e0:	a371      	add	r3, pc, #452	@ (adr r3, 80087a8 <__ieee754_pow+0xa00>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f7 ff77 	bl	80004d8 <__aeabi_dmul>
 80085ea:	a371      	add	r3, pc, #452	@ (adr r3, 80087b0 <__ieee754_pow+0xa08>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	4680      	mov	r8, r0
 80085f2:	4689      	mov	r9, r1
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f7f7 ff6e 	bl	80004d8 <__aeabi_dmul>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f7 fdb2 	bl	800016c <__adddf3>
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008614:	f7f7 fdaa 	bl	800016c <__adddf3>
 8008618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861c:	4680      	mov	r8, r0
 800861e:	4689      	mov	r9, r1
 8008620:	f7f7 fda2 	bl	8000168 <__aeabi_dsub>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4620      	mov	r0, r4
 800862a:	4629      	mov	r1, r5
 800862c:	f7f7 fd9c 	bl	8000168 <__aeabi_dsub>
 8008630:	4642      	mov	r2, r8
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	464b      	mov	r3, r9
 8008638:	4640      	mov	r0, r8
 800863a:	4649      	mov	r1, r9
 800863c:	f7f7 ff4c 	bl	80004d8 <__aeabi_dmul>
 8008640:	a35d      	add	r3, pc, #372	@ (adr r3, 80087b8 <__ieee754_pow+0xa10>)
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	4604      	mov	r4, r0
 8008648:	460d      	mov	r5, r1
 800864a:	f7f7 ff45 	bl	80004d8 <__aeabi_dmul>
 800864e:	a35c      	add	r3, pc, #368	@ (adr r3, 80087c0 <__ieee754_pow+0xa18>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f7 fd88 	bl	8000168 <__aeabi_dsub>
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 ff3c 	bl	80004d8 <__aeabi_dmul>
 8008660:	a359      	add	r3, pc, #356	@ (adr r3, 80087c8 <__ieee754_pow+0xa20>)
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f7f7 fd81 	bl	800016c <__adddf3>
 800866a:	4622      	mov	r2, r4
 800866c:	462b      	mov	r3, r5
 800866e:	f7f7 ff33 	bl	80004d8 <__aeabi_dmul>
 8008672:	a357      	add	r3, pc, #348	@ (adr r3, 80087d0 <__ieee754_pow+0xa28>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f7f7 fd76 	bl	8000168 <__aeabi_dsub>
 800867c:	4622      	mov	r2, r4
 800867e:	462b      	mov	r3, r5
 8008680:	f7f7 ff2a 	bl	80004d8 <__aeabi_dmul>
 8008684:	a354      	add	r3, pc, #336	@ (adr r3, 80087d8 <__ieee754_pow+0xa30>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fd6f 	bl	800016c <__adddf3>
 800868e:	4622      	mov	r2, r4
 8008690:	462b      	mov	r3, r5
 8008692:	f7f7 ff21 	bl	80004d8 <__aeabi_dmul>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f7f7 fd63 	bl	8000168 <__aeabi_dsub>
 80086a2:	4604      	mov	r4, r0
 80086a4:	460d      	mov	r5, r1
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4640      	mov	r0, r8
 80086ac:	4649      	mov	r1, r9
 80086ae:	f7f7 ff13 	bl	80004d8 <__aeabi_dmul>
 80086b2:	2200      	movs	r2, #0
 80086b4:	e9cd 0100 	strd	r0, r1, [sp]
 80086b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f7 fd52 	bl	8000168 <__aeabi_dsub>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086cc:	f7f8 f82e 	bl	800072c <__aeabi_ddiv>
 80086d0:	4632      	mov	r2, r6
 80086d2:	4604      	mov	r4, r0
 80086d4:	460d      	mov	r5, r1
 80086d6:	463b      	mov	r3, r7
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f7 fefc 	bl	80004d8 <__aeabi_dmul>
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	f7f7 fd42 	bl	800016c <__adddf3>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f7 fd3a 	bl	8000168 <__aeabi_dsub>
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	f7f7 fd36 	bl	8000168 <__aeabi_dsub>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	2000      	movs	r0, #0
 8008702:	4938      	ldr	r1, [pc, #224]	@ (80087e4 <__ieee754_pow+0xa3c>)
 8008704:	f7f7 fd30 	bl	8000168 <__aeabi_dsub>
 8008708:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800870c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8008710:	da2e      	bge.n	8008770 <__ieee754_pow+0x9c8>
 8008712:	4652      	mov	r2, sl
 8008714:	f000 f874 	bl	8008800 <scalbn>
 8008718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800871c:	f7ff bbed 	b.w	8007efa <__ieee754_pow+0x152>
 8008720:	4c31      	ldr	r4, [pc, #196]	@ (80087e8 <__ieee754_pow+0xa40>)
 8008722:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008726:	42a3      	cmp	r3, r4
 8008728:	d91a      	bls.n	8008760 <__ieee754_pow+0x9b8>
 800872a:	4b30      	ldr	r3, [pc, #192]	@ (80087ec <__ieee754_pow+0xa44>)
 800872c:	440b      	add	r3, r1
 800872e:	4303      	orrs	r3, r0
 8008730:	d009      	beq.n	8008746 <__ieee754_pow+0x99e>
 8008732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	2300      	movs	r3, #0
 800873a:	f7f8 f93f 	bl	80009bc <__aeabi_dcmplt>
 800873e:	3800      	subs	r0, #0
 8008740:	bf18      	it	ne
 8008742:	2001      	movne	r0, #1
 8008744:	e444      	b.n	8007fd0 <__ieee754_pow+0x228>
 8008746:	4642      	mov	r2, r8
 8008748:	464b      	mov	r3, r9
 800874a:	f7f7 fd0d 	bl	8000168 <__aeabi_dsub>
 800874e:	4632      	mov	r2, r6
 8008750:	463b      	mov	r3, r7
 8008752:	f7f8 f947 	bl	80009e4 <__aeabi_dcmpge>
 8008756:	2800      	cmp	r0, #0
 8008758:	d1eb      	bne.n	8008732 <__ieee754_pow+0x98a>
 800875a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80087f0 <__ieee754_pow+0xa48>
 800875e:	e6fd      	b.n	800855c <__ieee754_pow+0x7b4>
 8008760:	469a      	mov	sl, r3
 8008762:	4b24      	ldr	r3, [pc, #144]	@ (80087f4 <__ieee754_pow+0xa4c>)
 8008764:	459a      	cmp	sl, r3
 8008766:	f63f aef9 	bhi.w	800855c <__ieee754_pow+0x7b4>
 800876a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800876e:	e71b      	b.n	80085a8 <__ieee754_pow+0x800>
 8008770:	4621      	mov	r1, r4
 8008772:	e7d1      	b.n	8008718 <__ieee754_pow+0x970>
 8008774:	2000      	movs	r0, #0
 8008776:	491b      	ldr	r1, [pc, #108]	@ (80087e4 <__ieee754_pow+0xa3c>)
 8008778:	f7ff bb34 	b.w	8007de4 <__ieee754_pow+0x3c>
 800877c:	2000      	movs	r0, #0
 800877e:	2100      	movs	r1, #0
 8008780:	f7ff bb30 	b.w	8007de4 <__ieee754_pow+0x3c>
 8008784:	4650      	mov	r0, sl
 8008786:	4659      	mov	r1, fp
 8008788:	f7ff bb2c 	b.w	8007de4 <__ieee754_pow+0x3c>
 800878c:	460c      	mov	r4, r1
 800878e:	f7ff bb79 	b.w	8007e84 <__ieee754_pow+0xdc>
 8008792:	2400      	movs	r4, #0
 8008794:	f7ff bb64 	b.w	8007e60 <__ieee754_pow+0xb8>
 8008798:	652b82fe 	.word	0x652b82fe
 800879c:	3c971547 	.word	0x3c971547
 80087a0:	00000000 	.word	0x00000000
 80087a4:	3fe62e43 	.word	0x3fe62e43
 80087a8:	fefa39ef 	.word	0xfefa39ef
 80087ac:	3fe62e42 	.word	0x3fe62e42
 80087b0:	0ca86c39 	.word	0x0ca86c39
 80087b4:	be205c61 	.word	0xbe205c61
 80087b8:	72bea4d0 	.word	0x72bea4d0
 80087bc:	3e663769 	.word	0x3e663769
 80087c0:	c5d26bf1 	.word	0xc5d26bf1
 80087c4:	3ebbbd41 	.word	0x3ebbbd41
 80087c8:	af25de2c 	.word	0xaf25de2c
 80087cc:	3f11566a 	.word	0x3f11566a
 80087d0:	16bebd93 	.word	0x16bebd93
 80087d4:	3f66c16c 	.word	0x3f66c16c
 80087d8:	5555553e 	.word	0x5555553e
 80087dc:	3fc55555 	.word	0x3fc55555
 80087e0:	fff00000 	.word	0xfff00000
 80087e4:	3ff00000 	.word	0x3ff00000
 80087e8:	4090cbff 	.word	0x4090cbff
 80087ec:	3f6f3400 	.word	0x3f6f3400
 80087f0:	4090cc00 	.word	0x4090cc00
 80087f4:	3fe00000 	.word	0x3fe00000

080087f8 <fabs>:
 80087f8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80087fc:	4619      	mov	r1, r3
 80087fe:	4770      	bx	lr

08008800 <scalbn>:
 8008800:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008804:	4616      	mov	r6, r2
 8008806:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800880a:	4683      	mov	fp, r0
 800880c:	468c      	mov	ip, r1
 800880e:	460b      	mov	r3, r1
 8008810:	b982      	cbnz	r2, 8008834 <scalbn+0x34>
 8008812:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008816:	4303      	orrs	r3, r0
 8008818:	d039      	beq.n	800888e <scalbn+0x8e>
 800881a:	4b2f      	ldr	r3, [pc, #188]	@ (80088d8 <scalbn+0xd8>)
 800881c:	2200      	movs	r2, #0
 800881e:	f7f7 fe5b 	bl	80004d8 <__aeabi_dmul>
 8008822:	4b2e      	ldr	r3, [pc, #184]	@ (80088dc <scalbn+0xdc>)
 8008824:	4683      	mov	fp, r0
 8008826:	429e      	cmp	r6, r3
 8008828:	468c      	mov	ip, r1
 800882a:	da0d      	bge.n	8008848 <scalbn+0x48>
 800882c:	a326      	add	r3, pc, #152	@ (adr r3, 80088c8 <scalbn+0xc8>)
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	e01b      	b.n	800886c <scalbn+0x6c>
 8008834:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008838:	42ba      	cmp	r2, r7
 800883a:	d109      	bne.n	8008850 <scalbn+0x50>
 800883c:	4602      	mov	r2, r0
 800883e:	f7f7 fc95 	bl	800016c <__adddf3>
 8008842:	4683      	mov	fp, r0
 8008844:	468c      	mov	ip, r1
 8008846:	e022      	b.n	800888e <scalbn+0x8e>
 8008848:	460b      	mov	r3, r1
 800884a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800884e:	3a36      	subs	r2, #54	@ 0x36
 8008850:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008854:	428e      	cmp	r6, r1
 8008856:	dd0c      	ble.n	8008872 <scalbn+0x72>
 8008858:	a31d      	add	r3, pc, #116	@ (adr r3, 80088d0 <scalbn+0xd0>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	461c      	mov	r4, r3
 8008860:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008864:	f361 74df 	bfi	r4, r1, #31, #1
 8008868:	4621      	mov	r1, r4
 800886a:	481d      	ldr	r0, [pc, #116]	@ (80088e0 <scalbn+0xe0>)
 800886c:	f7f7 fe34 	bl	80004d8 <__aeabi_dmul>
 8008870:	e7e7      	b.n	8008842 <scalbn+0x42>
 8008872:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008876:	4432      	add	r2, r6
 8008878:	428a      	cmp	r2, r1
 800887a:	dced      	bgt.n	8008858 <scalbn+0x58>
 800887c:	2a00      	cmp	r2, #0
 800887e:	dd0a      	ble.n	8008896 <scalbn+0x96>
 8008880:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008884:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008888:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800888c:	46ac      	mov	ip, r5
 800888e:	4658      	mov	r0, fp
 8008890:	4661      	mov	r1, ip
 8008892:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008896:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800889a:	da09      	bge.n	80088b0 <scalbn+0xb0>
 800889c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80088a0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80088a4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80088a8:	480e      	ldr	r0, [pc, #56]	@ (80088e4 <scalbn+0xe4>)
 80088aa:	f041 011f 	orr.w	r1, r1, #31
 80088ae:	e7bd      	b.n	800882c <scalbn+0x2c>
 80088b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80088b4:	3236      	adds	r2, #54	@ 0x36
 80088b6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80088ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80088be:	4658      	mov	r0, fp
 80088c0:	4629      	mov	r1, r5
 80088c2:	2200      	movs	r2, #0
 80088c4:	4b08      	ldr	r3, [pc, #32]	@ (80088e8 <scalbn+0xe8>)
 80088c6:	e7d1      	b.n	800886c <scalbn+0x6c>
 80088c8:	c2f8f359 	.word	0xc2f8f359
 80088cc:	01a56e1f 	.word	0x01a56e1f
 80088d0:	8800759c 	.word	0x8800759c
 80088d4:	7e37e43c 	.word	0x7e37e43c
 80088d8:	43500000 	.word	0x43500000
 80088dc:	ffff3cb0 	.word	0xffff3cb0
 80088e0:	8800759c 	.word	0x8800759c
 80088e4:	c2f8f359 	.word	0xc2f8f359
 80088e8:	3c900000 	.word	0x3c900000

080088ec <with_errno>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	4616      	mov	r6, r2
 80088f4:	f7fb fef0 	bl	80046d8 <__errno>
 80088f8:	4629      	mov	r1, r5
 80088fa:	6006      	str	r6, [r0, #0]
 80088fc:	4620      	mov	r0, r4
 80088fe:	bd70      	pop	{r4, r5, r6, pc}

08008900 <xflow>:
 8008900:	b513      	push	{r0, r1, r4, lr}
 8008902:	4604      	mov	r4, r0
 8008904:	4619      	mov	r1, r3
 8008906:	4610      	mov	r0, r2
 8008908:	b10c      	cbz	r4, 800890e <xflow+0xe>
 800890a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800890e:	e9cd 2300 	strd	r2, r3, [sp]
 8008912:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008916:	f7f7 fddf 	bl	80004d8 <__aeabi_dmul>
 800891a:	2222      	movs	r2, #34	@ 0x22
 800891c:	b002      	add	sp, #8
 800891e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008922:	f7ff bfe3 	b.w	80088ec <with_errno>

08008926 <__math_uflow>:
 8008926:	2200      	movs	r2, #0
 8008928:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800892c:	f7ff bfe8 	b.w	8008900 <xflow>

08008930 <__math_oflow>:
 8008930:	2200      	movs	r2, #0
 8008932:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8008936:	f7ff bfe3 	b.w	8008900 <xflow>
	...

0800893c <__ieee754_sqrt>:
 800893c:	4a67      	ldr	r2, [pc, #412]	@ (8008adc <__ieee754_sqrt+0x1a0>)
 800893e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008942:	438a      	bics	r2, r1
 8008944:	4606      	mov	r6, r0
 8008946:	460f      	mov	r7, r1
 8008948:	460b      	mov	r3, r1
 800894a:	4604      	mov	r4, r0
 800894c:	d10e      	bne.n	800896c <__ieee754_sqrt+0x30>
 800894e:	4602      	mov	r2, r0
 8008950:	f7f7 fdc2 	bl	80004d8 <__aeabi_dmul>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	f7f7 fc06 	bl	800016c <__adddf3>
 8008960:	4606      	mov	r6, r0
 8008962:	460f      	mov	r7, r1
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	2900      	cmp	r1, #0
 800896e:	dc0c      	bgt.n	800898a <__ieee754_sqrt+0x4e>
 8008970:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008974:	4302      	orrs	r2, r0
 8008976:	d0f5      	beq.n	8008964 <__ieee754_sqrt+0x28>
 8008978:	b189      	cbz	r1, 800899e <__ieee754_sqrt+0x62>
 800897a:	4602      	mov	r2, r0
 800897c:	f7f7 fbf4 	bl	8000168 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	f7f7 fed2 	bl	800072c <__aeabi_ddiv>
 8008988:	e7ea      	b.n	8008960 <__ieee754_sqrt+0x24>
 800898a:	150a      	asrs	r2, r1, #20
 800898c:	d115      	bne.n	80089ba <__ieee754_sqrt+0x7e>
 800898e:	2100      	movs	r1, #0
 8008990:	e009      	b.n	80089a6 <__ieee754_sqrt+0x6a>
 8008992:	0ae3      	lsrs	r3, r4, #11
 8008994:	3a15      	subs	r2, #21
 8008996:	0564      	lsls	r4, r4, #21
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0fa      	beq.n	8008992 <__ieee754_sqrt+0x56>
 800899c:	e7f7      	b.n	800898e <__ieee754_sqrt+0x52>
 800899e:	460a      	mov	r2, r1
 80089a0:	e7fa      	b.n	8008998 <__ieee754_sqrt+0x5c>
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	3101      	adds	r1, #1
 80089a6:	02d8      	lsls	r0, r3, #11
 80089a8:	d5fb      	bpl.n	80089a2 <__ieee754_sqrt+0x66>
 80089aa:	1e48      	subs	r0, r1, #1
 80089ac:	1a12      	subs	r2, r2, r0
 80089ae:	f1c1 0020 	rsb	r0, r1, #32
 80089b2:	fa24 f000 	lsr.w	r0, r4, r0
 80089b6:	4303      	orrs	r3, r0
 80089b8:	408c      	lsls	r4, r1
 80089ba:	2600      	movs	r6, #0
 80089bc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80089c0:	2116      	movs	r1, #22
 80089c2:	07d2      	lsls	r2, r2, #31
 80089c4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80089c8:	4632      	mov	r2, r6
 80089ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089d2:	bf5c      	itt	pl
 80089d4:	005b      	lslpl	r3, r3, #1
 80089d6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80089da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089de:	bf58      	it	pl
 80089e0:	0064      	lslpl	r4, r4, #1
 80089e2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80089e6:	107f      	asrs	r7, r7, #1
 80089e8:	0064      	lsls	r4, r4, #1
 80089ea:	1815      	adds	r5, r2, r0
 80089ec:	429d      	cmp	r5, r3
 80089ee:	bfde      	ittt	le
 80089f0:	182a      	addle	r2, r5, r0
 80089f2:	1b5b      	suble	r3, r3, r5
 80089f4:	1836      	addle	r6, r6, r0
 80089f6:	0fe5      	lsrs	r5, r4, #31
 80089f8:	3901      	subs	r1, #1
 80089fa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80089fe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008a02:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008a06:	d1f0      	bne.n	80089ea <__ieee754_sqrt+0xae>
 8008a08:	460d      	mov	r5, r1
 8008a0a:	f04f 0a20 	mov.w	sl, #32
 8008a0e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008a12:	429a      	cmp	r2, r3
 8008a14:	eb01 0c00 	add.w	ip, r1, r0
 8008a18:	db02      	blt.n	8008a20 <__ieee754_sqrt+0xe4>
 8008a1a:	d113      	bne.n	8008a44 <__ieee754_sqrt+0x108>
 8008a1c:	45a4      	cmp	ip, r4
 8008a1e:	d811      	bhi.n	8008a44 <__ieee754_sqrt+0x108>
 8008a20:	f1bc 0f00 	cmp.w	ip, #0
 8008a24:	eb0c 0100 	add.w	r1, ip, r0
 8008a28:	da42      	bge.n	8008ab0 <__ieee754_sqrt+0x174>
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	db40      	blt.n	8008ab0 <__ieee754_sqrt+0x174>
 8008a2e:	f102 0e01 	add.w	lr, r2, #1
 8008a32:	1a9b      	subs	r3, r3, r2
 8008a34:	4672      	mov	r2, lr
 8008a36:	45a4      	cmp	ip, r4
 8008a38:	bf88      	it	hi
 8008a3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008a3e:	eba4 040c 	sub.w	r4, r4, ip
 8008a42:	4405      	add	r5, r0
 8008a44:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008a48:	f1ba 0a01 	subs.w	sl, sl, #1
 8008a4c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008a50:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008a54:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008a58:	d1db      	bne.n	8008a12 <__ieee754_sqrt+0xd6>
 8008a5a:	431c      	orrs	r4, r3
 8008a5c:	d01a      	beq.n	8008a94 <__ieee754_sqrt+0x158>
 8008a5e:	4c20      	ldr	r4, [pc, #128]	@ (8008ae0 <__ieee754_sqrt+0x1a4>)
 8008a60:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008ae4 <__ieee754_sqrt+0x1a8>
 8008a64:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008a68:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a6c:	f7f7 fb7c 	bl	8000168 <__aeabi_dsub>
 8008a70:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	f7f7 ffa8 	bl	80009d0 <__aeabi_dcmple>
 8008a80:	b140      	cbz	r0, 8008a94 <__ieee754_sqrt+0x158>
 8008a82:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008a86:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a8a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008a8e:	d111      	bne.n	8008ab4 <__ieee754_sqrt+0x178>
 8008a90:	4655      	mov	r5, sl
 8008a92:	3601      	adds	r6, #1
 8008a94:	1072      	asrs	r2, r6, #1
 8008a96:	086b      	lsrs	r3, r5, #1
 8008a98:	07f1      	lsls	r1, r6, #31
 8008a9a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008a9e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008aa2:	bf48      	it	mi
 8008aa4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008aae:	e757      	b.n	8008960 <__ieee754_sqrt+0x24>
 8008ab0:	4696      	mov	lr, r2
 8008ab2:	e7be      	b.n	8008a32 <__ieee754_sqrt+0xf6>
 8008ab4:	f7f7 fb5a 	bl	800016c <__adddf3>
 8008ab8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	f7f7 ff7a 	bl	80009bc <__aeabi_dcmplt>
 8008ac8:	b120      	cbz	r0, 8008ad4 <__ieee754_sqrt+0x198>
 8008aca:	1ca8      	adds	r0, r5, #2
 8008acc:	bf08      	it	eq
 8008ace:	3601      	addeq	r6, #1
 8008ad0:	3502      	adds	r5, #2
 8008ad2:	e7df      	b.n	8008a94 <__ieee754_sqrt+0x158>
 8008ad4:	1c6b      	adds	r3, r5, #1
 8008ad6:	f023 0501 	bic.w	r5, r3, #1
 8008ada:	e7db      	b.n	8008a94 <__ieee754_sqrt+0x158>
 8008adc:	7ff00000 	.word	0x7ff00000
 8008ae0:	200001e8 	.word	0x200001e8
 8008ae4:	200001e0 	.word	0x200001e0

08008ae8 <_init>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr

08008af4 <_fini>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	bf00      	nop
 8008af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afa:	bc08      	pop	{r3}
 8008afc:	469e      	mov	lr, r3
 8008afe:	4770      	bx	lr
