
DHT11_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b8c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08007ca0  08007ca0  00008ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008138  08008138  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008138  08008138  00009138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008140  08008140  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008144  08008144  00009144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008148  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001d4  0800831c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800831c  0000a458  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e471  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb1  00000000  00000000  0001866e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001a520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be2  00000000  00000000  0001b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029f9  00000000  00000000  0001c00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a58  00000000  00000000  0001ea03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5c5  00000000  00000000  0003045b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bea20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005598  00000000  00000000  000bea64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c3ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c84 	.word	0x08007c84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007c84 	.word	0x08007c84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	2200      	movs	r2, #0
 8001068:	2300      	movs	r3, #0
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
 800106e:	f7ff fca5 	bl	80009bc <__aeabi_dcmplt>
 8001072:	b928      	cbnz	r0, 8001080 <__aeabi_d2lz+0x1c>
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800107c:	f000 b80a 	b.w	8001094 <__aeabi_d2ulz>
 8001080:	4620      	mov	r0, r4
 8001082:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001086:	f000 f805 	bl	8001094 <__aeabi_d2ulz>
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	bd38      	pop	{r3, r4, r5, pc}
 8001092:	bf00      	nop

08001094 <__aeabi_d2ulz>:
 8001094:	b5d0      	push	{r4, r6, r7, lr}
 8001096:	2200      	movs	r2, #0
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <__aeabi_d2ulz+0x34>)
 800109a:	4606      	mov	r6, r0
 800109c:	460f      	mov	r7, r1
 800109e:	f7ff fa1b 	bl	80004d8 <__aeabi_dmul>
 80010a2:	f7ff fcf1 	bl	8000a88 <__aeabi_d2uiz>
 80010a6:	4604      	mov	r4, r0
 80010a8:	f7ff f99c 	bl	80003e4 <__aeabi_ui2d>
 80010ac:	2200      	movs	r2, #0
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <__aeabi_d2ulz+0x38>)
 80010b0:	f7ff fa12 	bl	80004d8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4630      	mov	r0, r6
 80010ba:	4639      	mov	r1, r7
 80010bc:	f7ff f854 	bl	8000168 <__aeabi_dsub>
 80010c0:	f7ff fce2 	bl	8000a88 <__aeabi_d2uiz>
 80010c4:	4621      	mov	r1, r4
 80010c6:	bdd0      	pop	{r4, r6, r7, pc}
 80010c8:	3df00000 	.word	0x3df00000
 80010cc:	41f00000 	.word	0x41f00000

080010d0 <microDelay>:
		uint8_t TFI = 0;
		uint8_t TFD = 0;
		char strCopy[15];

		void microDelay (uint16_t delay)
		{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <microDelay+0x2c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
		  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80010e2:	bf00      	nop
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <microDelay+0x2c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3f9      	bcc.n	80010e4 <microDelay+0x14>
		}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000244 	.word	0x20000244

08001100 <DHT11_Start>:

		uint8_t DHT11_Start (void)
		{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
		  uint8_t Response = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
		  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
		  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800111a:	607b      	str	r3, [r7, #4]
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
		  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	482c      	ldr	r0, [pc, #176]	@ (80011e0 <DHT11_Start+0xe0>)
 800112e:	f000 febd 	bl	8001eac <HAL_GPIO_Init>
		  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001138:	4829      	ldr	r0, [pc, #164]	@ (80011e0 <DHT11_Start+0xe0>)
 800113a:	f001 f852 	bl	80021e2 <HAL_GPIO_WritePin>
		  HAL_Delay(20);   // wait for 20ms
 800113e:	2014      	movs	r0, #20
 8001140:	f000 fdac 	bl	8001c9c <HAL_Delay>
		  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114a:	4825      	ldr	r0, [pc, #148]	@ (80011e0 <DHT11_Start+0xe0>)
 800114c:	f001 f849 	bl	80021e2 <HAL_GPIO_WritePin>
		  microDelay (30);   // wait for 30us
 8001150:	201e      	movs	r0, #30
 8001152:	f7ff ffbd 	bl	80010d0 <microDelay>
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <DHT11_Start+0xe0>)
 8001164:	f000 fea2 	bl	8001eac <HAL_GPIO_Init>
		  microDelay (40);
 8001168:	2028      	movs	r0, #40	@ 0x28
 800116a:	f7ff ffb1 	bl	80010d0 <microDelay>
		  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800116e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001172:	481b      	ldr	r0, [pc, #108]	@ (80011e0 <DHT11_Start+0xe0>)
 8001174:	f001 f81e 	bl	80021b4 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <DHT11_Start+0x98>
		  {
			microDelay (80);
 800117e:	2050      	movs	r0, #80	@ 0x50
 8001180:	f7ff ffa6 	bl	80010d0 <microDelay>
			if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001184:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001188:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <DHT11_Start+0xe0>)
 800118a:	f001 f813 	bl	80021b4 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <DHT11_Start+0x98>
 8001194:	2301      	movs	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
		  }
		  pMillis = HAL_GetTick();
 8001198:	f000 fd76 	bl	8001c88 <HAL_GetTick>
 800119c:	4603      	mov	r3, r0
 800119e:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <DHT11_Start+0xe4>)
 80011a0:	6013      	str	r3, [r2, #0]
		  cMillis = HAL_GetTick();
 80011a2:	f000 fd71 	bl	8001c88 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <DHT11_Start+0xe8>)
 80011aa:	6013      	str	r3, [r2, #0]
		  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011ac:	e004      	b.n	80011b8 <DHT11_Start+0xb8>
		  {
			cMillis = HAL_GetTick();
 80011ae:	f000 fd6b 	bl	8001c88 <HAL_GetTick>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <DHT11_Start+0xe8>)
 80011b6:	6013      	str	r3, [r2, #0]
		  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80011b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011bc:	4808      	ldr	r0, [pc, #32]	@ (80011e0 <DHT11_Start+0xe0>)
 80011be:	f000 fff9 	bl	80021b4 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <DHT11_Start+0xd6>
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <DHT11_Start+0xe4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1c9a      	adds	r2, r3, #2
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <DHT11_Start+0xe8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8eb      	bhi.n	80011ae <DHT11_Start+0xae>
		  }
		  return Response;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
		}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	200002dc 	.word	0x200002dc
 80011e8:	200002e0 	.word	0x200002e0

080011ec <DHT11_Read>:

		uint8_t DHT11_Read (void)
		{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
		  uint8_t a,b;
		  for (a=0;a<8;a++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e066      	b.n	80012c6 <DHT11_Read+0xda>
		  {
			pMillis = HAL_GetTick();
 80011f8:	f000 fd46 	bl	8001c88 <HAL_GetTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a36      	ldr	r2, [pc, #216]	@ (80012d8 <DHT11_Read+0xec>)
 8001200:	6013      	str	r3, [r2, #0]
			cMillis = HAL_GetTick();
 8001202:	f000 fd41 	bl	8001c88 <HAL_GetTick>
 8001206:	4603      	mov	r3, r0
 8001208:	4a34      	ldr	r2, [pc, #208]	@ (80012dc <DHT11_Read+0xf0>)
 800120a:	6013      	str	r3, [r2, #0]
			while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800120c:	e004      	b.n	8001218 <DHT11_Read+0x2c>
			{  // wait for the pin to go high
			  cMillis = HAL_GetTick();
 800120e:	f000 fd3b 	bl	8001c88 <HAL_GetTick>
 8001212:	4603      	mov	r3, r0
 8001214:	4a31      	ldr	r2, [pc, #196]	@ (80012dc <DHT11_Read+0xf0>)
 8001216:	6013      	str	r3, [r2, #0]
			while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001218:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121c:	4830      	ldr	r0, [pc, #192]	@ (80012e0 <DHT11_Read+0xf4>)
 800121e:	f000 ffc9 	bl	80021b4 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <DHT11_Read+0x4a>
 8001228:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <DHT11_Read+0xec>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	1c9a      	adds	r2, r3, #2
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <DHT11_Read+0xf0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d8eb      	bhi.n	800120e <DHT11_Read+0x22>
			}
			microDelay (40);   // wait for 40 us
 8001236:	2028      	movs	r0, #40	@ 0x28
 8001238:	f7ff ff4a 	bl	80010d0 <microDelay>
			if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800123c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001240:	4827      	ldr	r0, [pc, #156]	@ (80012e0 <DHT11_Read+0xf4>)
 8001242:	f000 ffb7 	bl	80021b4 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10e      	bne.n	800126a <DHT11_Read+0x7e>
			  b&= ~(1<<(7-a));
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2201      	movs	r2, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	b25b      	sxtb	r3, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	b25a      	sxtb	r2, r3
 800125e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001262:	4013      	ands	r3, r2
 8001264:	b25b      	sxtb	r3, r3
 8001266:	71bb      	strb	r3, [r7, #6]
 8001268:	e00b      	b.n	8001282 <DHT11_Read+0x96>
			else
			  b|= (1<<(7-a));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f1c3 0307 	rsb	r3, r3, #7
 8001270:	2201      	movs	r2, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	b25a      	sxtb	r2, r3
 8001278:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800127c:	4313      	orrs	r3, r2
 800127e:	b25b      	sxtb	r3, r3
 8001280:	71bb      	strb	r3, [r7, #6]
			pMillis = HAL_GetTick();
 8001282:	f000 fd01 	bl	8001c88 <HAL_GetTick>
 8001286:	4603      	mov	r3, r0
 8001288:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <DHT11_Read+0xec>)
 800128a:	6013      	str	r3, [r2, #0]
			cMillis = HAL_GetTick();
 800128c:	f000 fcfc 	bl	8001c88 <HAL_GetTick>
 8001290:	4603      	mov	r3, r0
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <DHT11_Read+0xf0>)
 8001294:	6013      	str	r3, [r2, #0]
			while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001296:	e004      	b.n	80012a2 <DHT11_Read+0xb6>
			{  // wait for the pin to go low
			  cMillis = HAL_GetTick();
 8001298:	f000 fcf6 	bl	8001c88 <HAL_GetTick>
 800129c:	4603      	mov	r3, r0
 800129e:	4a0f      	ldr	r2, [pc, #60]	@ (80012dc <DHT11_Read+0xf0>)
 80012a0:	6013      	str	r3, [r2, #0]
			while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a6:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <DHT11_Read+0xf4>)
 80012a8:	f000 ff84 	bl	80021b4 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <DHT11_Read+0xd4>
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <DHT11_Read+0xec>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1c9a      	adds	r2, r3, #2
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <DHT11_Read+0xf0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8eb      	bhi.n	8001298 <DHT11_Read+0xac>
		  for (a=0;a<8;a++)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	3301      	adds	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d995      	bls.n	80011f8 <DHT11_Read+0xc>
			}
		  }
		  return b;
 80012cc:	79bb      	ldrb	r3, [r7, #6]
		}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200002dc 	.word	0x200002dc
 80012dc:	200002e0 	.word	0x200002e0
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b598      	push	{r3, r4, r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e8:	f000 fc76 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ec:	f000 f918 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f0:	f000 fa04 	bl	80016fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80012f4:	f000 f95a 	bl	80015ac <MX_I2C1_Init>
  MX_TIM1_Init();
 80012f8:	f000 f986 	bl	8001608 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80012fc:	f000 f9d4 	bl	80016a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001300:	4870      	ldr	r0, [pc, #448]	@ (80014c4 <main+0x1e0>)
 8001302:	f001 fd2b 	bl	8002d5c <HAL_TIM_Base_Start>
  uartx_write_text(&huart1, "Hello\r\n");
 8001306:	4970      	ldr	r1, [pc, #448]	@ (80014c8 <main+0x1e4>)
 8001308:	4870      	ldr	r0, [pc, #448]	@ (80014cc <main+0x1e8>)
 800130a:	f000 fc28 	bl	8001b5e <uartx_write_text>
  //SSD1306_Init();
  uartx_write_text(&huart1, "Hello DHT11\r\n");
 800130e:	4970      	ldr	r1, [pc, #448]	@ (80014d0 <main+0x1ec>)
 8001310:	486e      	ldr	r0, [pc, #440]	@ (80014cc <main+0x1e8>)
 8001312:	f000 fc24 	bl	8001b5e <uartx_write_text>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(20);
 8001316:	2014      	movs	r0, #20
 8001318:	f000 fcc0 	bl	8001c9c <HAL_Delay>
	  uartx_write_text(&huart1, "0");
 800131c:	496d      	ldr	r1, [pc, #436]	@ (80014d4 <main+0x1f0>)
 800131e:	486b      	ldr	r0, [pc, #428]	@ (80014cc <main+0x1e8>)
 8001320:	f000 fc1d 	bl	8001b5e <uartx_write_text>
	  if(DHT11_Start())
 8001324:	f7ff feec 	bl	8001100 <DHT11_Start>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80c0 	beq.w	80014b0 <main+0x1cc>
	     {
	       RHI = DHT11_Read(); // Relative humidity integral
 8001330:	f7ff ff5c 	bl	80011ec <DHT11_Read>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b67      	ldr	r3, [pc, #412]	@ (80014d8 <main+0x1f4>)
 800133a:	701a      	strb	r2, [r3, #0]
	       RHD = DHT11_Read(); // Relative humidity decimal
 800133c:	f7ff ff56 	bl	80011ec <DHT11_Read>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b65      	ldr	r3, [pc, #404]	@ (80014dc <main+0x1f8>)
 8001346:	701a      	strb	r2, [r3, #0]
	       TCI = DHT11_Read(); // Celsius integral
 8001348:	f7ff ff50 	bl	80011ec <DHT11_Read>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b63      	ldr	r3, [pc, #396]	@ (80014e0 <main+0x1fc>)
 8001352:	701a      	strb	r2, [r3, #0]
	       TCD = DHT11_Read(); // Celsius decimal
 8001354:	f7ff ff4a 	bl	80011ec <DHT11_Read>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b61      	ldr	r3, [pc, #388]	@ (80014e4 <main+0x200>)
 800135e:	701a      	strb	r2, [r3, #0]
	       SUM = DHT11_Read(); // Check sum
 8001360:	f7ff ff44 	bl	80011ec <DHT11_Read>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b5f      	ldr	r3, [pc, #380]	@ (80014e8 <main+0x204>)
 800136a:	701a      	strb	r2, [r3, #0]
	       if (RHI + RHD + TCI + TCD == SUM)
 800136c:	4b5a      	ldr	r3, [pc, #360]	@ (80014d8 <main+0x1f4>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b5a      	ldr	r3, [pc, #360]	@ (80014dc <main+0x1f8>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a59      	ldr	r2, [pc, #356]	@ (80014e0 <main+0x1fc>)
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	4413      	add	r3, r2
 800137e:	4a59      	ldr	r2, [pc, #356]	@ (80014e4 <main+0x200>)
 8001380:	7812      	ldrb	r2, [r2, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a58      	ldr	r2, [pc, #352]	@ (80014e8 <main+0x204>)
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	4293      	cmp	r3, r2
 800138a:	f040 8091 	bne.w	80014b0 <main+0x1cc>
	       {
	         // Can use RHI and TCI for any purposes if whole number only needed
	         tCelsius = (float)TCI + (float)(TCD/10.0);
 800138e:	4b54      	ldr	r3, [pc, #336]	@ (80014e0 <main+0x1fc>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc9e 	bl	8000cd4 <__aeabi_ui2f>
 8001398:	4604      	mov	r4, r0
 800139a:	4b52      	ldr	r3, [pc, #328]	@ (80014e4 <main+0x200>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f830 	bl	8000404 <__aeabi_i2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b50      	ldr	r3, [pc, #320]	@ (80014ec <main+0x208>)
 80013aa:	f7ff f9bf 	bl	800072c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fb87 	bl	8000ac8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4619      	mov	r1, r3
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fbd8 	bl	8000b74 <__addsf3>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b49      	ldr	r3, [pc, #292]	@ (80014f0 <main+0x20c>)
 80013ca:	601a      	str	r2, [r3, #0]
	         tFahrenheit = tCelsius * 9/5 + 32;
 80013cc:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <main+0x20c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4948      	ldr	r1, [pc, #288]	@ (80014f4 <main+0x210>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fcd6 	bl	8000d84 <__aeabi_fmul>
 80013d8:	4603      	mov	r3, r0
 80013da:	4947      	ldr	r1, [pc, #284]	@ (80014f8 <main+0x214>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fd85 	bl	8000eec <__aeabi_fdiv>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fbc3 	bl	8000b74 <__addsf3>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b42      	ldr	r3, [pc, #264]	@ (80014fc <main+0x218>)
 80013f4:	601a      	str	r2, [r3, #0]
	         RH = (float)RHI + (float)(RHD/10.0);
 80013f6:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <main+0x1f4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fc6a 	bl	8000cd4 <__aeabi_ui2f>
 8001400:	4604      	mov	r4, r0
 8001402:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <main+0x1f8>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe fffc 	bl	8000404 <__aeabi_i2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b36      	ldr	r3, [pc, #216]	@ (80014ec <main+0x208>)
 8001412:	f7ff f98b 	bl	800072c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff fb53 	bl	8000ac8 <__aeabi_d2f>
 8001422:	4603      	mov	r3, r0
 8001424:	4619      	mov	r1, r3
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff fba4 	bl	8000b74 <__addsf3>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <main+0x21c>)
 8001432:	601a      	str	r2, [r3, #0]
	         // Can use tCelsius, tFahrenheit and RH for any purposes
	         TFI = tFahrenheit;  // Fahrenheit integral
 8001434:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <main+0x218>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fdf3 	bl	8001024 <__aeabi_f2uiz>
 800143e:	4603      	mov	r3, r0
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <main+0x220>)
 8001444:	701a      	strb	r2, [r3, #0]
	         TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8001446:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <main+0x218>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	492f      	ldr	r1, [pc, #188]	@ (8001508 <main+0x224>)
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fc99 	bl	8000d84 <__aeabi_fmul>
 8001452:	4603      	mov	r3, r0
 8001454:	461c      	mov	r4, r3
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <main+0x220>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fc39 	bl	8000cdc <__aeabi_i2f>
 800146a:	4603      	mov	r3, r0
 800146c:	4619      	mov	r1, r3
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff fb7e 	bl	8000b70 <__aeabi_fsub>
 8001474:	4603      	mov	r3, r0
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fdd4 	bl	8001024 <__aeabi_f2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <main+0x228>)
 8001482:	701a      	strb	r2, [r3, #0]
	         sprintf(strCopy,"%d.%d C  \r\n", TCI, TCD);
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <main+0x1fc>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <main+0x200>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	4920      	ldr	r1, [pc, #128]	@ (8001510 <main+0x22c>)
 8001490:	4820      	ldr	r0, [pc, #128]	@ (8001514 <main+0x230>)
 8001492:	f002 ffc9 	bl	8004428 <siprintf>
	        // SSD1306_GotoXY (0, 0);
	         //uartx_write_text(&huart1, "1\r\n");
	        // SSD1306_Puts (strCopy, &Font_11x18, 1);
	         //uartx_write_text(&huart1, "1");
	        // uartx_write_text(&huart1, strCopy);
	         sprintf(strCopy,"%d.%d F   \r\n", TFI, TFD);
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <main+0x220>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <main+0x228>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	491d      	ldr	r1, [pc, #116]	@ (8001518 <main+0x234>)
 80014a2:	481c      	ldr	r0, [pc, #112]	@ (8001514 <main+0x230>)
 80014a4:	f002 ffc0 	bl	8004428 <siprintf>
	          uartx_write_text(&huart1, strCopy);
 80014a8:	491a      	ldr	r1, [pc, #104]	@ (8001514 <main+0x230>)
 80014aa:	4808      	ldr	r0, [pc, #32]	@ (80014cc <main+0x1e8>)
 80014ac:	f000 fb57 	bl	8001b5e <uartx_write_text>
	         //uartx_write_text(&huart1, "3\r\n");
	        // uartx_write_text(&huart1, strCopy);
	      //   SSD1306_UpdateScreen();
	       }
	     }
	  uartx_write_text(&huart1, "10");
 80014b0:	491a      	ldr	r1, [pc, #104]	@ (800151c <main+0x238>)
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <main+0x1e8>)
 80014b4:	f000 fb53 	bl	8001b5e <uartx_write_text>
	     HAL_Delay(2000);
 80014b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014bc:	f000 fbee 	bl	8001c9c <HAL_Delay>
	  HAL_Delay(20);
 80014c0:	e729      	b.n	8001316 <main+0x32>
 80014c2:	bf00      	nop
 80014c4:	20000244 	.word	0x20000244
 80014c8:	08007ca0 	.word	0x08007ca0
 80014cc:	2000028c 	.word	0x2000028c
 80014d0:	08007ca8 	.word	0x08007ca8
 80014d4:	08007cb8 	.word	0x08007cb8
 80014d8:	200002d4 	.word	0x200002d4
 80014dc:	200002d5 	.word	0x200002d5
 80014e0:	200002d6 	.word	0x200002d6
 80014e4:	200002d7 	.word	0x200002d7
 80014e8:	200002d8 	.word	0x200002d8
 80014ec:	40240000 	.word	0x40240000
 80014f0:	200002e4 	.word	0x200002e4
 80014f4:	41100000 	.word	0x41100000
 80014f8:	40a00000 	.word	0x40a00000
 80014fc:	200002e8 	.word	0x200002e8
 8001500:	200002ec 	.word	0x200002ec
 8001504:	200002f0 	.word	0x200002f0
 8001508:	41200000 	.word	0x41200000
 800150c:	200002f1 	.word	0x200002f1
 8001510:	08007cbc 	.word	0x08007cbc
 8001514:	200002f4 	.word	0x200002f4
 8001518:	08007cc8 	.word	0x08007cc8
 800151c:	08007cd8 	.word	0x08007cd8

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b090      	sub	sp, #64	@ 0x40
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	2228      	movs	r2, #40	@ 0x28
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f002 ffdd 	bl	80044ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001546:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800154a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001554:	2302      	movs	r3, #2
 8001556:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800155c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800155e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	4618      	mov	r0, r3
 800156a:	f000 ff97 	bl	800249c <HAL_RCC_OscConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001574:	f000 f90e 	bl	8001794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	230f      	movs	r3, #15
 800157a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157c:	2302      	movs	r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2102      	movs	r1, #2
 8001592:	4618      	mov	r0, r3
 8001594:	f001 fa04 	bl	80029a0 <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800159e:	f000 f8f9 	bl	8001794 <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3740      	adds	r7, #64	@ 0x40
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015b2:	4a13      	ldr	r2, [pc, #76]	@ (8001600 <MX_I2C1_Init+0x54>)
 80015b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015b8:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <MX_I2C1_Init+0x58>)
 80015ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	@ (80015fc <MX_I2C1_Init+0x50>)
 80015ea:	f000 fe13 	bl	8002214 <HAL_I2C_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015f4:	f000 f8ce 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200001f0 	.word	0x200001f0
 8001600:	40005400 	.word	0x40005400
 8001604:	00061a80 	.word	0x00061a80

08001608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <MX_TIM1_Init+0x98>)
 8001626:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <MX_TIM1_Init+0x9c>)
 8001628:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <MX_TIM1_Init+0x98>)
 800162c:	2247      	movs	r2, #71	@ 0x47
 800162e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <MX_TIM1_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <MX_TIM1_Init+0x98>)
 8001638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800163c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MX_TIM1_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_TIM1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MX_TIM1_Init+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001650:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <MX_TIM1_Init+0x98>)
 8001652:	f001 fb33 	bl	8002cbc <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800165c:	f000 f89a 	bl	8001794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <MX_TIM1_Init+0x98>)
 800166e:	f001 fbbf 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001678:	f000 f88c 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_TIM1_Init+0x98>)
 800168a:	f001 fd71 	bl	8003170 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001694:	f000 f87e 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000244 	.word	0x20000244
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <MX_USART1_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016e0:	f001 fda4 	bl	800322c <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f000 f853 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000028c 	.word	0x2000028c
 80016f8:	40013800 	.word	0x40013800

080016fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <MX_GPIO_Init+0x90>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <MX_GPIO_Init+0x90>)
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <MX_GPIO_Init+0x90>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_GPIO_Init+0x90>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a17      	ldr	r2, [pc, #92]	@ (800178c <MX_GPIO_Init+0x90>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_GPIO_Init+0x90>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_GPIO_Init+0x90>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a11      	ldr	r2, [pc, #68]	@ (800178c <MX_GPIO_Init+0x90>)
 8001746:	f043 0308 	orr.w	r3, r3, #8
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_GPIO_Init+0x90>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800175e:	480c      	ldr	r0, [pc, #48]	@ (8001790 <MX_GPIO_Init+0x94>)
 8001760:	f000 fd3f 	bl	80021e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2302      	movs	r3, #2
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4619      	mov	r1, r3
 800177c:	4804      	ldr	r0, [pc, #16]	@ (8001790 <MX_GPIO_Init+0x94>)
 800177e:	f000 fb95 	bl	8001eac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001782:	bf00      	nop
 8001784:	3720      	adds	r7, #32
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	40010c00 	.word	0x40010c00

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <Error_Handler+0x8>

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_MspInit+0x5c>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <HAL_MspInit+0x5c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6193      	str	r3, [r2, #24]
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_MspInit+0x5c>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <HAL_MspInit+0x5c>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <HAL_MspInit+0x5c>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <HAL_MspInit+0x5c>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_MspInit+0x60>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <HAL_MspInit+0x60>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000

08001804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a15      	ldr	r2, [pc, #84]	@ (8001874 <HAL_I2C_MspInit+0x70>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d123      	bne.n	800186c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_I2C_MspInit+0x74>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a13      	ldr	r2, [pc, #76]	@ (8001878 <HAL_I2C_MspInit+0x74>)
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <HAL_I2C_MspInit+0x74>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800183c:	23c0      	movs	r3, #192	@ 0xc0
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001840:	2312      	movs	r3, #18
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	480b      	ldr	r0, [pc, #44]	@ (800187c <HAL_I2C_MspInit+0x78>)
 8001850:	f000 fb2c 	bl	8001eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_I2C_MspInit+0x74>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_I2C_MspInit+0x74>)
 800185a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800185e:	61d3      	str	r3, [r2, #28]
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_I2C_MspInit+0x74>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40005400 	.word	0x40005400
 8001878:	40021000 	.word	0x40021000
 800187c:	40010c00 	.word	0x40010c00

08001880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <HAL_TIM_Base_MspInit+0x34>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10b      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_TIM_Base_MspInit+0x38>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <HAL_TIM_Base_MspInit+0x38>)
 8001898:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_TIM_Base_MspInit+0x38>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001948 <HAL_UART_MspInit+0x8c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d131      	bne.n	8001940 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_UART_MspInit+0x90>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <HAL_UART_MspInit+0x90>)
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <HAL_UART_MspInit+0x90>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <HAL_UART_MspInit+0x90>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <HAL_UART_MspInit+0x90>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_UART_MspInit+0x90>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800190c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	480b      	ldr	r0, [pc, #44]	@ (8001950 <HAL_UART_MspInit+0x94>)
 8001922:	f000 fac3 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800192a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <HAL_UART_MspInit+0x94>)
 800193c:	f000 fab6 	bl	8001eac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40013800 	.word	0x40013800
 800194c:	40021000 	.word	0x40021000
 8001950:	40010800 	.word	0x40010800

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <NMI_Handler+0x4>

0800195c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <MemManage_Handler+0x4>

0800196c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <UsageFault_Handler+0x4>

0800197c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f000 f95e 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <_kill>:

int _kill(int pid, int sig)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c4:	f002 fde6 	bl	8004594 <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2216      	movs	r2, #22
 80019cc:	601a      	str	r2, [r3, #0]
  return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_exit>:

void _exit (int status)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e2:	f04f 31ff 	mov.w	r1, #4294967295
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffe7 	bl	80019ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <_exit+0x12>

080019f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00a      	b.n	8001a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a02:	f3af 8000 	nop.w
 8001a06:	4601      	mov	r1, r0
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf0      	blt.n	8001a02 <_read+0x12>
  }

  return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e009      	b.n	8001a50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf1      	blt.n	8001a3c <_write+0x12>
  }
  return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_close>:

int _close(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a88:	605a      	str	r2, [r3, #4]
  return 0;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <_isatty>:

int _isatty(int file)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f002 fd4e 	bl	8004594 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20005000 	.word	0x20005000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20000304 	.word	0x20000304
 8001b2c:	20000458 	.word	0x20000458

08001b30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <uartx_write>:

#include "uart.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 8001b48:	1cf9      	adds	r1, r7, #3
 8001b4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b4e:	2201      	movs	r2, #1
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f001 fbbb 	bl	80032cc <HAL_UART_Transmit>

}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 8001b68:	e007      	b.n	8001b7a <uartx_write_text+0x1c>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	603a      	str	r2, [r7, #0]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffe1 	bl	8001b3c <uartx_write>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f3      	bne.n	8001b6a <uartx_write_text+0xc>

}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b8c:	f7ff ffd0 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480b      	ldr	r0, [pc, #44]	@ (8001bc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b92:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b94:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a09      	ldr	r2, [pc, #36]	@ (8001bcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ba8:	4c09      	ldr	r4, [pc, #36]	@ (8001bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f002 fcf3 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bba:	f7ff fb93 	bl	80012e4 <main>
  bx lr
 8001bbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bc8:	08008148 	.word	0x08008148
  ldr r2, =_sbss
 8001bcc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bd0:	20000458 	.word	0x20000458

08001bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_2_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_Init+0x28>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_Init+0x28>)
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 f92b 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fdd4 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f935 	bl	8001e92 <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 f90b 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	@ (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_IncTick+0x1c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a03      	ldr	r2, [pc, #12]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000308 	.word	0x20000308

08001c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	@ (8001c98 <HAL_GetTick+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000308 	.word	0x20000308

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffe0 	bl	8001c88 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff90 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff49 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff5e 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffb0 	bl	8001e00 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b08b      	sub	sp, #44	@ 0x2c
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebe:	e169      	b.n	8002194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 8158 	bne.w	800218e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a9a      	ldr	r2, [pc, #616]	@ (800214c <HAL_GPIO_Init+0x2a0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d05e      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a98      	ldr	r2, [pc, #608]	@ (800214c <HAL_GPIO_Init+0x2a0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d875      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001eee:	4a98      	ldr	r2, [pc, #608]	@ (8002150 <HAL_GPIO_Init+0x2a4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d058      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a96      	ldr	r2, [pc, #600]	@ (8002150 <HAL_GPIO_Init+0x2a4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d86f      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001efa:	4a96      	ldr	r2, [pc, #600]	@ (8002154 <HAL_GPIO_Init+0x2a8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d052      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001f00:	4a94      	ldr	r2, [pc, #592]	@ (8002154 <HAL_GPIO_Init+0x2a8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d869      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001f06:	4a94      	ldr	r2, [pc, #592]	@ (8002158 <HAL_GPIO_Init+0x2ac>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d04c      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001f0c:	4a92      	ldr	r2, [pc, #584]	@ (8002158 <HAL_GPIO_Init+0x2ac>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d863      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001f12:	4a92      	ldr	r2, [pc, #584]	@ (800215c <HAL_GPIO_Init+0x2b0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d046      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
 8001f18:	4a90      	ldr	r2, [pc, #576]	@ (800215c <HAL_GPIO_Init+0x2b0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d85d      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001f1e:	2b12      	cmp	r3, #18
 8001f20:	d82a      	bhi.n	8001f78 <HAL_GPIO_Init+0xcc>
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d859      	bhi.n	8001fda <HAL_GPIO_Init+0x12e>
 8001f26:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <HAL_GPIO_Init+0x80>)
 8001f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2c:	08001fa7 	.word	0x08001fa7
 8001f30:	08001f81 	.word	0x08001f81
 8001f34:	08001f93 	.word	0x08001f93
 8001f38:	08001fd5 	.word	0x08001fd5
 8001f3c:	08001fdb 	.word	0x08001fdb
 8001f40:	08001fdb 	.word	0x08001fdb
 8001f44:	08001fdb 	.word	0x08001fdb
 8001f48:	08001fdb 	.word	0x08001fdb
 8001f4c:	08001fdb 	.word	0x08001fdb
 8001f50:	08001fdb 	.word	0x08001fdb
 8001f54:	08001fdb 	.word	0x08001fdb
 8001f58:	08001fdb 	.word	0x08001fdb
 8001f5c:	08001fdb 	.word	0x08001fdb
 8001f60:	08001fdb 	.word	0x08001fdb
 8001f64:	08001fdb 	.word	0x08001fdb
 8001f68:	08001fdb 	.word	0x08001fdb
 8001f6c:	08001fdb 	.word	0x08001fdb
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001f9d 	.word	0x08001f9d
 8001f78:	4a79      	ldr	r2, [pc, #484]	@ (8002160 <HAL_GPIO_Init+0x2b4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f7e:	e02c      	b.n	8001fda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e029      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e024      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	3308      	adds	r3, #8
 8001f98:	623b      	str	r3, [r7, #32]
          break;
 8001f9a:	e01f      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	623b      	str	r3, [r7, #32]
          break;
 8001fa4:	e01a      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e013      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	611a      	str	r2, [r3, #16]
          break;
 8001fc6:	e009      	b.n	8001fdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	615a      	str	r2, [r3, #20]
          break;
 8001fd2:	e003      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x130>
          break;
 8001fda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2bff      	cmp	r3, #255	@ 0xff
 8001fe0:	d801      	bhi.n	8001fe6 <HAL_GPIO_Init+0x13a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_Init+0x13e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2bff      	cmp	r3, #255	@ 0xff
 8001ff0:	d802      	bhi.n	8001ff8 <HAL_GPIO_Init+0x14c>
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	e002      	b.n	8001ffe <HAL_GPIO_Init+0x152>
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	3b08      	subs	r3, #8
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	210f      	movs	r1, #15
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	6a39      	ldr	r1, [r7, #32]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80b1 	beq.w	800218e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800202c:	4b4d      	ldr	r3, [pc, #308]	@ (8002164 <HAL_GPIO_Init+0x2b8>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a4c      	ldr	r2, [pc, #304]	@ (8002164 <HAL_GPIO_Init+0x2b8>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b4a      	ldr	r3, [pc, #296]	@ (8002164 <HAL_GPIO_Init+0x2b8>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002044:	4a48      	ldr	r2, [pc, #288]	@ (8002168 <HAL_GPIO_Init+0x2bc>)
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a40      	ldr	r2, [pc, #256]	@ (800216c <HAL_GPIO_Init+0x2c0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <HAL_GPIO_Init+0x1ec>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3f      	ldr	r2, [pc, #252]	@ (8002170 <HAL_GPIO_Init+0x2c4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00d      	beq.n	8002094 <HAL_GPIO_Init+0x1e8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3e      	ldr	r2, [pc, #248]	@ (8002174 <HAL_GPIO_Init+0x2c8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x1e4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3d      	ldr	r2, [pc, #244]	@ (8002178 <HAL_GPIO_Init+0x2cc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_GPIO_Init+0x1e0>
 8002088:	2303      	movs	r3, #3
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x1ee>
 800208c:	2304      	movs	r3, #4
 800208e:	e004      	b.n	800209a <HAL_GPIO_Init+0x1ee>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x1ee>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_Init+0x1ee>
 8002098:	2300      	movs	r3, #0
 800209a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020aa:	492f      	ldr	r1, [pc, #188]	@ (8002168 <HAL_GPIO_Init+0x2bc>)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020c4:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	492c      	ldr	r1, [pc, #176]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020d2:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	4928      	ldr	r1, [pc, #160]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ec:	4b23      	ldr	r3, [pc, #140]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	4922      	ldr	r1, [pc, #136]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	491e      	ldr	r1, [pc, #120]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 8002104:	4013      	ands	r3, r2
 8002106:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002114:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4918      	ldr	r1, [pc, #96]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	43db      	mvns	r3, r3
 800212a:	4914      	ldr	r1, [pc, #80]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 800212c:	4013      	ands	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d021      	beq.n	8002180 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	490e      	ldr	r1, [pc, #56]	@ (800217c <HAL_GPIO_Init+0x2d0>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e021      	b.n	800218e <HAL_GPIO_Init+0x2e2>
 800214a:	bf00      	nop
 800214c:	10320000 	.word	0x10320000
 8002150:	10310000 	.word	0x10310000
 8002154:	10220000 	.word	0x10220000
 8002158:	10210000 	.word	0x10210000
 800215c:	10120000 	.word	0x10120000
 8002160:	10110000 	.word	0x10110000
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	40010800 	.word	0x40010800
 8002170:	40010c00 	.word	0x40010c00
 8002174:	40011000 	.word	0x40011000
 8002178:	40011400 	.word	0x40011400
 800217c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	43db      	mvns	r3, r3
 8002188:	4909      	ldr	r1, [pc, #36]	@ (80021b0 <HAL_GPIO_Init+0x304>)
 800218a:	4013      	ands	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	3301      	adds	r3, #1
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f47f ae8e 	bne.w	8001ec0 <HAL_GPIO_Init+0x14>
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	372c      	adds	r7, #44	@ 0x2c
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40010400 	.word	0x40010400

080021b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	807b      	strh	r3, [r7, #2]
 80021ee:	4613      	mov	r3, r2
 80021f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f2:	787b      	ldrb	r3, [r7, #1]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f8:	887a      	ldrh	r2, [r7, #2]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021fe:	e003      	b.n	8002208 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	041a      	lsls	r2, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	611a      	str	r2, [r3, #16]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
	...

08002214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e12b      	b.n	800247e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fae2 	bl	8001804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	@ 0x24
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002266:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002276:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002278:	f000 fcda 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 800227c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a81      	ldr	r2, [pc, #516]	@ (8002488 <HAL_I2C_Init+0x274>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d807      	bhi.n	8002298 <HAL_I2C_Init+0x84>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a80      	ldr	r2, [pc, #512]	@ (800248c <HAL_I2C_Init+0x278>)
 800228c:	4293      	cmp	r3, r2
 800228e:	bf94      	ite	ls
 8002290:	2301      	movls	r3, #1
 8002292:	2300      	movhi	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e006      	b.n	80022a6 <HAL_I2C_Init+0x92>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a7d      	ldr	r2, [pc, #500]	@ (8002490 <HAL_I2C_Init+0x27c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	bf94      	ite	ls
 80022a0:	2301      	movls	r3, #1
 80022a2:	2300      	movhi	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0e7      	b.n	800247e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a78      	ldr	r2, [pc, #480]	@ (8002494 <HAL_I2C_Init+0x280>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002488 <HAL_I2C_Init+0x274>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d802      	bhi.n	80022e8 <HAL_I2C_Init+0xd4>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	e009      	b.n	80022fc <HAL_I2C_Init+0xe8>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	4a69      	ldr	r2, [pc, #420]	@ (8002498 <HAL_I2C_Init+0x284>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	099b      	lsrs	r3, r3, #6
 80022fa:	3301      	adds	r3, #1
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	430b      	orrs	r3, r1
 8002302:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800230e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	495c      	ldr	r1, [pc, #368]	@ (8002488 <HAL_I2C_Init+0x274>)
 8002318:	428b      	cmp	r3, r1
 800231a:	d819      	bhi.n	8002350 <HAL_I2C_Init+0x13c>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e59      	subs	r1, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fbb1 f3f3 	udiv	r3, r1, r3
 800232a:	1c59      	adds	r1, r3, #1
 800232c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002330:	400b      	ands	r3, r1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_I2C_Init+0x138>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e59      	subs	r1, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fbb1 f3f3 	udiv	r3, r1, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234a:	e051      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 800234c:	2304      	movs	r3, #4
 800234e:	e04f      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d111      	bne.n	800237c <HAL_I2C_Init+0x168>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e58      	subs	r0, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	440b      	add	r3, r1
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e012      	b.n	80023a2 <HAL_I2C_Init+0x18e>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e58      	subs	r0, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	0099      	lsls	r1, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002392:	3301      	adds	r3, #1
 8002394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Init+0x196>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e022      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10e      	bne.n	80023d0 <HAL_I2C_Init+0x1bc>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e58      	subs	r0, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	440b      	add	r3, r1
 80023c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ce:	e00f      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	0099      	lsls	r1, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	6809      	ldr	r1, [r1, #0]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800241e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6911      	ldr	r1, [r2, #16]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68d2      	ldr	r2, [r2, #12]
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	430b      	orrs	r3, r1
 8002432:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	000186a0 	.word	0x000186a0
 800248c:	001e847f 	.word	0x001e847f
 8002490:	003d08ff 	.word	0x003d08ff
 8002494:	431bde83 	.word	0x431bde83
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e272      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8087 	beq.w	80025ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024bc:	4b92      	ldr	r3, [pc, #584]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d00c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
 80024d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b89      	ldr	r3, [pc, #548]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x12c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d168      	bne.n	80025c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e24c      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x76>
 8002504:	4b80      	ldr	r3, [pc, #512]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a7f      	ldr	r2, [pc, #508]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e02e      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x98>
 800251a:	4b7b      	ldr	r3, [pc, #492]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7a      	ldr	r2, [pc, #488]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b78      	ldr	r3, [pc, #480]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a77      	ldr	r2, [pc, #476]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e01d      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0xbc>
 800253e:	4b72      	ldr	r3, [pc, #456]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a71      	ldr	r2, [pc, #452]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6e      	ldr	r2, [pc, #440]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e00b      	b.n	8002570 <HAL_RCC_OscConfig+0xd4>
 8002558:	4b6b      	ldr	r3, [pc, #428]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6a      	ldr	r2, [pc, #424]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b68      	ldr	r3, [pc, #416]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a67      	ldr	r2, [pc, #412]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800256e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fb86 	bl	8001c88 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fb82 	bl	8001c88 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e200      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0xe4>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fb72 	bl	8001c88 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff fb6e 	bl	8001c88 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	@ 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1ec      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x10c>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025e2:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11c      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
 80025ee:	4b46      	ldr	r3, [pc, #280]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d116      	bne.n	8002628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	4b43      	ldr	r3, [pc, #268]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1c0      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4939      	ldr	r1, [pc, #228]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	e03a      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	@ (800270c <HAL_RCC_OscConfig+0x270>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fb27 	bl	8001c88 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7ff fb23 	bl	8001c88 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1a1      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4927      	ldr	r1, [pc, #156]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
 8002670:	e015      	b.n	800269e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b26      	ldr	r3, [pc, #152]	@ (800270c <HAL_RCC_OscConfig+0x270>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7ff fb06 	bl	8001c88 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002680:	f7ff fb02 	bl	8001c88 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e180      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002692:	4b1d      	ldr	r3, [pc, #116]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03a      	beq.n	8002720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d019      	beq.n	80026e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b2:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <HAL_RCC_OscConfig+0x274>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7ff fae6 	bl	8001c88 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7ff fae2 	bl	8001c88 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e160      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 face 	bl	8002c80 <RCC_Delay>
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002710 <HAL_RCC_OscConfig+0x274>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7ff facc 	bl	8001c88 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f2:	e00f      	b.n	8002714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f4:	f7ff fac8 	bl	8001c88 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d908      	bls.n	8002714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e146      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	42420000 	.word	0x42420000
 8002710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b92      	ldr	r3, [pc, #584]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e9      	bne.n	80026f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a6 	beq.w	800287a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b8b      	ldr	r3, [pc, #556]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4a87      	ldr	r2, [pc, #540]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002748:	61d3      	str	r3, [r2, #28]
 800274a:	4b85      	ldr	r3, [pc, #532]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b82      	ldr	r3, [pc, #520]	@ (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b7f      	ldr	r3, [pc, #508]	@ (8002964 <HAL_RCC_OscConfig+0x4c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7e      	ldr	r2, [pc, #504]	@ (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7ff fa89 	bl	8001c88 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277a:	f7ff fa85 	bl	8001c88 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	@ 0x64
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e103      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b75      	ldr	r3, [pc, #468]	@ (8002964 <HAL_RCC_OscConfig+0x4c8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x312>
 80027a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6213      	str	r3, [r2, #32]
 80027ac:	e02d      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x334>
 80027b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a69      	ldr	r2, [pc, #420]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	4b67      	ldr	r3, [pc, #412]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a66      	ldr	r2, [pc, #408]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	e01c      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x356>
 80027d8:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a60      	ldr	r2, [pc, #384]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e00b      	b.n	800280a <HAL_RCC_OscConfig+0x36e>
 80027f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6213      	str	r3, [r2, #32]
 80027fe:	4b58      	ldr	r3, [pc, #352]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a57      	ldr	r2, [pc, #348]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7ff fa39 	bl	8001c88 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7ff fa35 	bl	8001c88 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0b1      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002830:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ee      	beq.n	800281a <HAL_RCC_OscConfig+0x37e>
 800283c:	e014      	b.n	8002868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7ff fa23 	bl	8001c88 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7ff fa1f 	bl	8001c88 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e09b      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	4b40      	ldr	r3, [pc, #256]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d105      	bne.n	800287a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286e:	4b3c      	ldr	r3, [pc, #240]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a3b      	ldr	r2, [pc, #236]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8087 	beq.w	8002992 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d061      	beq.n	8002954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d146      	bne.n	8002926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b33      	ldr	r3, [pc, #204]	@ (8002968 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff f9f3 	bl	8001c88 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff f9ef 	bl	8001c88 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e06d      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d108      	bne.n	80028e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ce:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4921      	ldr	r1, [pc, #132]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a19      	ldr	r1, [r3, #32]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	430b      	orrs	r3, r1
 80028f2:	491b      	ldr	r1, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7ff f9c3 	bl	8001c88 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7ff f9bf 	bl	8001c88 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e03d      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002918:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x46a>
 8002924:	e035      	b.n	8002992 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <HAL_RCC_OscConfig+0x4cc>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff f9ac 	bl	8001c88 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff f9a8 	bl	8001c88 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e026      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x498>
 8002952:	e01e      	b.n	8002992 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e019      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCC_OscConfig+0x500>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0d0      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d910      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b67      	ldr	r3, [pc, #412]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	4965      	ldr	r1, [pc, #404]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b63      	ldr	r3, [pc, #396]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b8      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fc:	4b59      	ldr	r3, [pc, #356]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a58      	ldr	r2, [pc, #352]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a14:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a52      	ldr	r2, [pc, #328]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b50      	ldr	r3, [pc, #320]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	494d      	ldr	r1, [pc, #308]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d040      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b47      	ldr	r3, [pc, #284]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d115      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	4b41      	ldr	r3, [pc, #260]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e073      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f023 0203 	bic.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4936      	ldr	r1, [pc, #216]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a90:	f7ff f8fa 	bl	8001c88 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7ff f8f6 	bl	8001c88 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e053      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 020c 	and.w	r2, r3, #12
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1eb      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b27      	ldr	r3, [pc, #156]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d210      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4922      	ldr	r1, [pc, #136]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e032      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b1a:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	490e      	ldr	r1, [pc, #56]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 f821 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	490a      	ldr	r1, [pc, #40]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a09      	ldr	r2, [pc, #36]	@ (8002b6c <HAL_RCC_ClockConfig+0x1cc>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_RCC_ClockConfig+0x1d0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f858 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08007cdc 	.word	0x08007cdc
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x36>
 8002ba2:	e027      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba6:	613b      	str	r3, [r7, #16]
      break;
 8002ba8:	e027      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	0c9b      	lsrs	r3, r3, #18
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	4a17      	ldr	r2, [pc, #92]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0c5b      	lsrs	r3, r3, #17
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	4a11      	ldr	r2, [pc, #68]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd6:	fb03 f202 	mul.w	r2, r3, r2
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e004      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	613b      	str	r3, [r7, #16]
      break;
 8002bf2:	e002      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf6:	613b      	str	r3, [r7, #16]
      break;
 8002bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfa:	693b      	ldr	r3, [r7, #16]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	007a1200 	.word	0x007a1200
 8002c10:	08007cf4 	.word	0x08007cf4
 8002c14:	08007d04 	.word	0x08007d04
 8002c18:	003d0900 	.word	0x003d0900

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b02      	ldr	r3, [pc, #8]	@ (8002c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	20000000 	.word	0x20000000

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c34:	f7ff fff2 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	@ (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	08007cec 	.word	0x08007cec

08002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	f7ff ffde 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	0adb      	lsrs	r3, r3, #11
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	@ (8002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08007cec 	.word	0x08007cec

08002c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <RCC_Delay+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <RCC_Delay+0x38>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a5b      	lsrs	r3, r3, #9
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c9c:	bf00      	nop
  }
  while (Delay --);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <RCC_Delay+0x1c>
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e041      	b.n	8002d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe fdcc 	bl	8001880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 f940 	bl	8002f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d001      	beq.n	8002d74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e032      	b.n	8002dda <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a18      	ldr	r2, [pc, #96]	@ (8002de4 <HAL_TIM_Base_Start+0x88>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_Base_Start+0x48>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_Base_Start+0x48>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a14      	ldr	r2, [pc, #80]	@ (8002de8 <HAL_TIM_Base_Start+0x8c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_Base_Start+0x48>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a13      	ldr	r2, [pc, #76]	@ (8002dec <HAL_TIM_Base_Start+0x90>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d010      	beq.n	8002dd8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc6:	e007      	b.n	8002dd8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800

08002df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIM_ConfigClockSource+0x1c>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e0b4      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x186>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e44:	d03e      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4a:	f200 8087 	bhi.w	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e52:	f000 8086 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x172>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5a:	d87f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b70      	cmp	r3, #112	@ 0x70
 8002e5e:	d01a      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xa6>
 8002e60:	2b70      	cmp	r3, #112	@ 0x70
 8002e62:	d87b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b60      	cmp	r3, #96	@ 0x60
 8002e66:	d050      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x11a>
 8002e68:	2b60      	cmp	r3, #96	@ 0x60
 8002e6a:	d877      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e6c:	2b50      	cmp	r3, #80	@ 0x50
 8002e6e:	d03c      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0xfa>
 8002e70:	2b50      	cmp	r3, #80	@ 0x50
 8002e72:	d873      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d058      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x13a>
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d86f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e7c:	2b30      	cmp	r3, #48	@ 0x30
 8002e7e:	d064      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e80:	2b30      	cmp	r3, #48	@ 0x30
 8002e82:	d86b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d060      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d867      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d05c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d05a      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	e062      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea6:	f000 f944 	bl	8003132 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	609a      	str	r2, [r3, #8]
      break;
 8002ec2:	e04f      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ed4:	f000 f92d 	bl	8003132 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ee6:	609a      	str	r2, [r3, #8]
      break;
 8002ee8:	e03c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 f8a4 	bl	8003044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2150      	movs	r1, #80	@ 0x50
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f8fb 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002f08:	e02c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 f8c2 	bl	80030a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2160      	movs	r1, #96	@ 0x60
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f8eb 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002f28:	e01c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 f884 	bl	8003044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2140      	movs	r1, #64	@ 0x40
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f8db 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002f48:	e00c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f000 f8d2 	bl	80030fe <TIM_ITRx_SetConfig>
      break;
 8002f5a:	e003      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e000      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a29      	ldr	r2, [pc, #164]	@ (8003038 <TIM_Base_SetConfig+0xb8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <TIM_Base_SetConfig+0x30>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9e:	d007      	beq.n	8002fb0 <TIM_Base_SetConfig+0x30>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a26      	ldr	r2, [pc, #152]	@ (800303c <TIM_Base_SetConfig+0xbc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0x30>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a25      	ldr	r2, [pc, #148]	@ (8003040 <TIM_Base_SetConfig+0xc0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003038 <TIM_Base_SetConfig+0xb8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00b      	beq.n	8002fe2 <TIM_Base_SetConfig+0x62>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd0:	d007      	beq.n	8002fe2 <TIM_Base_SetConfig+0x62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	@ (800303c <TIM_Base_SetConfig+0xbc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_Base_SetConfig+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a18      	ldr	r2, [pc, #96]	@ (8003040 <TIM_Base_SetConfig+0xc0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d108      	bne.n	8002ff4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a07      	ldr	r2, [pc, #28]	@ (8003038 <TIM_Base_SetConfig+0xb8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d103      	bne.n	8003028 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	615a      	str	r2, [r3, #20]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800

08003044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800306e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 030a 	bic.w	r3, r3, #10
 8003080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0210 	bic.w	r2, r3, #16
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	031b      	lsls	r3, r3, #12
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	f043 0307 	orr.w	r3, r3, #7
 8003120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800314c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	021a      	lsls	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	431a      	orrs	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4313      	orrs	r3, r2
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	609a      	str	r2, [r3, #8]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003184:	2302      	movs	r3, #2
 8003186:	e046      	b.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a16      	ldr	r2, [pc, #88]	@ (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d4:	d009      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a10      	ldr	r2, [pc, #64]	@ (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800

0800322c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e042      	b.n	80032c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe fb32 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	@ 0x24
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800326e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f91d 	bl	80034b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d16d      	bne.n	80033c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Transmit+0x2c>
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e066      	b.n	80033ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2221      	movs	r2, #33	@ 0x21
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330a:	f7fe fcbd 	bl	8001c88 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003324:	d108      	bne.n	8003338 <HAL_UART_Transmit+0x6c>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003340:	e02a      	b.n	8003398 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	2180      	movs	r1, #128	@ 0x80
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f840 	bl	80033d2 <UART_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e036      	b.n	80033ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	3302      	adds	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e007      	b.n	800338a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1cf      	bne.n	8003342 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	2140      	movs	r1, #64	@ 0x40
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f810 	bl	80033d2 <UART_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e006      	b.n	80033ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b090      	sub	sp, #64	@ 0x40
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e2:	e050      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d04c      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <UART_WaitOnFlagUntilTimeout+0x30>
 80033f2:	f7fe fc49 	bl	8001c88 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033fe:	429a      	cmp	r2, r3
 8003400:	d241      	bcs.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003418:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003422:	637a      	str	r2, [r7, #52]	@ 0x34
 8003424:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e5      	bne.n	8003402 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3314      	adds	r3, #20
 800343c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	613b      	str	r3, [r7, #16]
   return(result);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3314      	adds	r3, #20
 8003454:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003456:	623a      	str	r2, [r7, #32]
 8003458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	69f9      	ldr	r1, [r7, #28]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	61bb      	str	r3, [r7, #24]
   return(result);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e5      	bne.n	8003436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e00f      	b.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4013      	ands	r3, r2
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d09f      	beq.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3740      	adds	r7, #64	@ 0x40
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034ea:	f023 030c 	bic.w	r3, r3, #12
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2c      	ldr	r2, [pc, #176]	@ (80035c4 <UART_SetConfig+0x114>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d103      	bne.n	8003520 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7ff fb9e 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	e002      	b.n	8003526 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff fb86 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8003524:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009a      	lsls	r2, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	4a22      	ldr	r2, [pc, #136]	@ (80035c8 <UART_SetConfig+0x118>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	0119      	lsls	r1, r3, #4
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009a      	lsls	r2, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	fbb2 f2f3 	udiv	r2, r2, r3
 800355c:	4b1a      	ldr	r3, [pc, #104]	@ (80035c8 <UART_SetConfig+0x118>)
 800355e:	fba3 0302 	umull	r0, r3, r3, r2
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2064      	movs	r0, #100	@ 0x64
 8003566:	fb00 f303 	mul.w	r3, r0, r3
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	3332      	adds	r3, #50	@ 0x32
 8003570:	4a15      	ldr	r2, [pc, #84]	@ (80035c8 <UART_SetConfig+0x118>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800357c:	4419      	add	r1, r3
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009a      	lsls	r2, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <UART_SetConfig+0x118>)
 8003596:	fba3 0302 	umull	r0, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2064      	movs	r0, #100	@ 0x64
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	@ 0x32
 80035a8:	4a07      	ldr	r2, [pc, #28]	@ (80035c8 <UART_SetConfig+0x118>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	440a      	add	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40013800 	.word	0x40013800
 80035c8:	51eb851f 	.word	0x51eb851f

080035cc <__cvt>:
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d2:	461d      	mov	r5, r3
 80035d4:	bfbb      	ittet	lt
 80035d6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80035da:	461d      	movlt	r5, r3
 80035dc:	2300      	movge	r3, #0
 80035de:	232d      	movlt	r3, #45	@ 0x2d
 80035e0:	b088      	sub	sp, #32
 80035e2:	4614      	mov	r4, r2
 80035e4:	bfb8      	it	lt
 80035e6:	4614      	movlt	r4, r2
 80035e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80035ea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80035ec:	7013      	strb	r3, [r2, #0]
 80035ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80035f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80035f4:	f023 0820 	bic.w	r8, r3, #32
 80035f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80035fc:	d005      	beq.n	800360a <__cvt+0x3e>
 80035fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003602:	d100      	bne.n	8003606 <__cvt+0x3a>
 8003604:	3601      	adds	r6, #1
 8003606:	2302      	movs	r3, #2
 8003608:	e000      	b.n	800360c <__cvt+0x40>
 800360a:	2303      	movs	r3, #3
 800360c:	aa07      	add	r2, sp, #28
 800360e:	9204      	str	r2, [sp, #16]
 8003610:	aa06      	add	r2, sp, #24
 8003612:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003616:	e9cd 3600 	strd	r3, r6, [sp]
 800361a:	4622      	mov	r2, r4
 800361c:	462b      	mov	r3, r5
 800361e:	f001 f883 	bl	8004728 <_dtoa_r>
 8003622:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003626:	4607      	mov	r7, r0
 8003628:	d119      	bne.n	800365e <__cvt+0x92>
 800362a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800362c:	07db      	lsls	r3, r3, #31
 800362e:	d50e      	bpl.n	800364e <__cvt+0x82>
 8003630:	eb00 0906 	add.w	r9, r0, r6
 8003634:	2200      	movs	r2, #0
 8003636:	2300      	movs	r3, #0
 8003638:	4620      	mov	r0, r4
 800363a:	4629      	mov	r1, r5
 800363c:	f7fd f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 8003640:	b108      	cbz	r0, 8003646 <__cvt+0x7a>
 8003642:	f8cd 901c 	str.w	r9, [sp, #28]
 8003646:	2230      	movs	r2, #48	@ 0x30
 8003648:	9b07      	ldr	r3, [sp, #28]
 800364a:	454b      	cmp	r3, r9
 800364c:	d31e      	bcc.n	800368c <__cvt+0xc0>
 800364e:	4638      	mov	r0, r7
 8003650:	9b07      	ldr	r3, [sp, #28]
 8003652:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003654:	1bdb      	subs	r3, r3, r7
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	b008      	add	sp, #32
 800365a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003662:	eb00 0906 	add.w	r9, r0, r6
 8003666:	d1e5      	bne.n	8003634 <__cvt+0x68>
 8003668:	7803      	ldrb	r3, [r0, #0]
 800366a:	2b30      	cmp	r3, #48	@ 0x30
 800366c:	d10a      	bne.n	8003684 <__cvt+0xb8>
 800366e:	2200      	movs	r2, #0
 8003670:	2300      	movs	r3, #0
 8003672:	4620      	mov	r0, r4
 8003674:	4629      	mov	r1, r5
 8003676:	f7fd f997 	bl	80009a8 <__aeabi_dcmpeq>
 800367a:	b918      	cbnz	r0, 8003684 <__cvt+0xb8>
 800367c:	f1c6 0601 	rsb	r6, r6, #1
 8003680:	f8ca 6000 	str.w	r6, [sl]
 8003684:	f8da 3000 	ldr.w	r3, [sl]
 8003688:	4499      	add	r9, r3
 800368a:	e7d3      	b.n	8003634 <__cvt+0x68>
 800368c:	1c59      	adds	r1, r3, #1
 800368e:	9107      	str	r1, [sp, #28]
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e7d9      	b.n	8003648 <__cvt+0x7c>

08003694 <__exponent>:
 8003694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003696:	2900      	cmp	r1, #0
 8003698:	bfb6      	itet	lt
 800369a:	232d      	movlt	r3, #45	@ 0x2d
 800369c:	232b      	movge	r3, #43	@ 0x2b
 800369e:	4249      	neglt	r1, r1
 80036a0:	2909      	cmp	r1, #9
 80036a2:	7002      	strb	r2, [r0, #0]
 80036a4:	7043      	strb	r3, [r0, #1]
 80036a6:	dd29      	ble.n	80036fc <__exponent+0x68>
 80036a8:	f10d 0307 	add.w	r3, sp, #7
 80036ac:	461d      	mov	r5, r3
 80036ae:	270a      	movs	r7, #10
 80036b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80036b4:	461a      	mov	r2, r3
 80036b6:	fb07 1416 	mls	r4, r7, r6, r1
 80036ba:	3430      	adds	r4, #48	@ 0x30
 80036bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80036c0:	460c      	mov	r4, r1
 80036c2:	2c63      	cmp	r4, #99	@ 0x63
 80036c4:	4631      	mov	r1, r6
 80036c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80036ca:	dcf1      	bgt.n	80036b0 <__exponent+0x1c>
 80036cc:	3130      	adds	r1, #48	@ 0x30
 80036ce:	1e94      	subs	r4, r2, #2
 80036d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80036d4:	4623      	mov	r3, r4
 80036d6:	1c41      	adds	r1, r0, #1
 80036d8:	42ab      	cmp	r3, r5
 80036da:	d30a      	bcc.n	80036f2 <__exponent+0x5e>
 80036dc:	f10d 0309 	add.w	r3, sp, #9
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	42ac      	cmp	r4, r5
 80036e4:	bf88      	it	hi
 80036e6:	2300      	movhi	r3, #0
 80036e8:	3302      	adds	r3, #2
 80036ea:	4403      	add	r3, r0
 80036ec:	1a18      	subs	r0, r3, r0
 80036ee:	b003      	add	sp, #12
 80036f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80036f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80036fa:	e7ed      	b.n	80036d8 <__exponent+0x44>
 80036fc:	2330      	movs	r3, #48	@ 0x30
 80036fe:	3130      	adds	r1, #48	@ 0x30
 8003700:	7083      	strb	r3, [r0, #2]
 8003702:	70c1      	strb	r1, [r0, #3]
 8003704:	1d03      	adds	r3, r0, #4
 8003706:	e7f1      	b.n	80036ec <__exponent+0x58>

08003708 <_printf_float>:
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	b091      	sub	sp, #68	@ 0x44
 800370e:	460c      	mov	r4, r1
 8003710:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003714:	4616      	mov	r6, r2
 8003716:	461f      	mov	r7, r3
 8003718:	4605      	mov	r5, r0
 800371a:	f000 fef1 	bl	8004500 <_localeconv_r>
 800371e:	6803      	ldr	r3, [r0, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	9308      	str	r3, [sp, #32]
 8003724:	f7fc fd14 	bl	8000150 <strlen>
 8003728:	2300      	movs	r3, #0
 800372a:	930e      	str	r3, [sp, #56]	@ 0x38
 800372c:	f8d8 3000 	ldr.w	r3, [r8]
 8003730:	9009      	str	r0, [sp, #36]	@ 0x24
 8003732:	3307      	adds	r3, #7
 8003734:	f023 0307 	bic.w	r3, r3, #7
 8003738:	f103 0208 	add.w	r2, r3, #8
 800373c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003740:	f8d4 b000 	ldr.w	fp, [r4]
 8003744:	f8c8 2000 	str.w	r2, [r8]
 8003748:	e9d3 8900 	ldrd	r8, r9, [r3]
 800374c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003750:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003752:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003756:	f04f 32ff 	mov.w	r2, #4294967295
 800375a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800375e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003762:	4b9c      	ldr	r3, [pc, #624]	@ (80039d4 <_printf_float+0x2cc>)
 8003764:	f7fd f952 	bl	8000a0c <__aeabi_dcmpun>
 8003768:	bb70      	cbnz	r0, 80037c8 <_printf_float+0xc0>
 800376a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800376e:	f04f 32ff 	mov.w	r2, #4294967295
 8003772:	4b98      	ldr	r3, [pc, #608]	@ (80039d4 <_printf_float+0x2cc>)
 8003774:	f7fd f92c 	bl	80009d0 <__aeabi_dcmple>
 8003778:	bb30      	cbnz	r0, 80037c8 <_printf_float+0xc0>
 800377a:	2200      	movs	r2, #0
 800377c:	2300      	movs	r3, #0
 800377e:	4640      	mov	r0, r8
 8003780:	4649      	mov	r1, r9
 8003782:	f7fd f91b 	bl	80009bc <__aeabi_dcmplt>
 8003786:	b110      	cbz	r0, 800378e <_printf_float+0x86>
 8003788:	232d      	movs	r3, #45	@ 0x2d
 800378a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800378e:	4a92      	ldr	r2, [pc, #584]	@ (80039d8 <_printf_float+0x2d0>)
 8003790:	4b92      	ldr	r3, [pc, #584]	@ (80039dc <_printf_float+0x2d4>)
 8003792:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003796:	bf94      	ite	ls
 8003798:	4690      	movls	r8, r2
 800379a:	4698      	movhi	r8, r3
 800379c:	2303      	movs	r3, #3
 800379e:	f04f 0900 	mov.w	r9, #0
 80037a2:	6123      	str	r3, [r4, #16]
 80037a4:	f02b 0304 	bic.w	r3, fp, #4
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	4633      	mov	r3, r6
 80037ac:	4621      	mov	r1, r4
 80037ae:	4628      	mov	r0, r5
 80037b0:	9700      	str	r7, [sp, #0]
 80037b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80037b4:	f000 f9d4 	bl	8003b60 <_printf_common>
 80037b8:	3001      	adds	r0, #1
 80037ba:	f040 8090 	bne.w	80038de <_printf_float+0x1d6>
 80037be:	f04f 30ff 	mov.w	r0, #4294967295
 80037c2:	b011      	add	sp, #68	@ 0x44
 80037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	4640      	mov	r0, r8
 80037ce:	4649      	mov	r1, r9
 80037d0:	f7fd f91c 	bl	8000a0c <__aeabi_dcmpun>
 80037d4:	b148      	cbz	r0, 80037ea <_printf_float+0xe2>
 80037d6:	464b      	mov	r3, r9
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bfb8      	it	lt
 80037dc:	232d      	movlt	r3, #45	@ 0x2d
 80037de:	4a80      	ldr	r2, [pc, #512]	@ (80039e0 <_printf_float+0x2d8>)
 80037e0:	bfb8      	it	lt
 80037e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80037e6:	4b7f      	ldr	r3, [pc, #508]	@ (80039e4 <_printf_float+0x2dc>)
 80037e8:	e7d3      	b.n	8003792 <_printf_float+0x8a>
 80037ea:	6863      	ldr	r3, [r4, #4]
 80037ec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	d13f      	bne.n	8003874 <_printf_float+0x16c>
 80037f4:	2306      	movs	r3, #6
 80037f6:	6063      	str	r3, [r4, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80037fe:	6023      	str	r3, [r4, #0]
 8003800:	9206      	str	r2, [sp, #24]
 8003802:	aa0e      	add	r2, sp, #56	@ 0x38
 8003804:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003808:	aa0d      	add	r2, sp, #52	@ 0x34
 800380a:	9203      	str	r2, [sp, #12]
 800380c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003810:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003814:	6863      	ldr	r3, [r4, #4]
 8003816:	4642      	mov	r2, r8
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	4628      	mov	r0, r5
 800381c:	464b      	mov	r3, r9
 800381e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003820:	f7ff fed4 	bl	80035cc <__cvt>
 8003824:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003826:	4680      	mov	r8, r0
 8003828:	2947      	cmp	r1, #71	@ 0x47
 800382a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800382c:	d128      	bne.n	8003880 <_printf_float+0x178>
 800382e:	1cc8      	adds	r0, r1, #3
 8003830:	db02      	blt.n	8003838 <_printf_float+0x130>
 8003832:	6863      	ldr	r3, [r4, #4]
 8003834:	4299      	cmp	r1, r3
 8003836:	dd40      	ble.n	80038ba <_printf_float+0x1b2>
 8003838:	f1aa 0a02 	sub.w	sl, sl, #2
 800383c:	fa5f fa8a 	uxtb.w	sl, sl
 8003840:	4652      	mov	r2, sl
 8003842:	3901      	subs	r1, #1
 8003844:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003848:	910d      	str	r1, [sp, #52]	@ 0x34
 800384a:	f7ff ff23 	bl	8003694 <__exponent>
 800384e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003850:	4681      	mov	r9, r0
 8003852:	1813      	adds	r3, r2, r0
 8003854:	2a01      	cmp	r2, #1
 8003856:	6123      	str	r3, [r4, #16]
 8003858:	dc02      	bgt.n	8003860 <_printf_float+0x158>
 800385a:	6822      	ldr	r2, [r4, #0]
 800385c:	07d2      	lsls	r2, r2, #31
 800385e:	d501      	bpl.n	8003864 <_printf_float+0x15c>
 8003860:	3301      	adds	r3, #1
 8003862:	6123      	str	r3, [r4, #16]
 8003864:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003868:	2b00      	cmp	r3, #0
 800386a:	d09e      	beq.n	80037aa <_printf_float+0xa2>
 800386c:	232d      	movs	r3, #45	@ 0x2d
 800386e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003872:	e79a      	b.n	80037aa <_printf_float+0xa2>
 8003874:	2947      	cmp	r1, #71	@ 0x47
 8003876:	d1bf      	bne.n	80037f8 <_printf_float+0xf0>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1bd      	bne.n	80037f8 <_printf_float+0xf0>
 800387c:	2301      	movs	r3, #1
 800387e:	e7ba      	b.n	80037f6 <_printf_float+0xee>
 8003880:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003884:	d9dc      	bls.n	8003840 <_printf_float+0x138>
 8003886:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800388a:	d118      	bne.n	80038be <_printf_float+0x1b6>
 800388c:	2900      	cmp	r1, #0
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	dd0b      	ble.n	80038aa <_printf_float+0x1a2>
 8003892:	6121      	str	r1, [r4, #16]
 8003894:	b913      	cbnz	r3, 800389c <_printf_float+0x194>
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	07d0      	lsls	r0, r2, #31
 800389a:	d502      	bpl.n	80038a2 <_printf_float+0x19a>
 800389c:	3301      	adds	r3, #1
 800389e:	440b      	add	r3, r1
 80038a0:	6123      	str	r3, [r4, #16]
 80038a2:	f04f 0900 	mov.w	r9, #0
 80038a6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80038a8:	e7dc      	b.n	8003864 <_printf_float+0x15c>
 80038aa:	b913      	cbnz	r3, 80038b2 <_printf_float+0x1aa>
 80038ac:	6822      	ldr	r2, [r4, #0]
 80038ae:	07d2      	lsls	r2, r2, #31
 80038b0:	d501      	bpl.n	80038b6 <_printf_float+0x1ae>
 80038b2:	3302      	adds	r3, #2
 80038b4:	e7f4      	b.n	80038a0 <_printf_float+0x198>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e7f2      	b.n	80038a0 <_printf_float+0x198>
 80038ba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80038be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80038c0:	4299      	cmp	r1, r3
 80038c2:	db05      	blt.n	80038d0 <_printf_float+0x1c8>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	6121      	str	r1, [r4, #16]
 80038c8:	07d8      	lsls	r0, r3, #31
 80038ca:	d5ea      	bpl.n	80038a2 <_printf_float+0x19a>
 80038cc:	1c4b      	adds	r3, r1, #1
 80038ce:	e7e7      	b.n	80038a0 <_printf_float+0x198>
 80038d0:	2900      	cmp	r1, #0
 80038d2:	bfcc      	ite	gt
 80038d4:	2201      	movgt	r2, #1
 80038d6:	f1c1 0202 	rsble	r2, r1, #2
 80038da:	4413      	add	r3, r2
 80038dc:	e7e0      	b.n	80038a0 <_printf_float+0x198>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	055a      	lsls	r2, r3, #21
 80038e2:	d407      	bmi.n	80038f4 <_printf_float+0x1ec>
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	4642      	mov	r2, r8
 80038e8:	4631      	mov	r1, r6
 80038ea:	4628      	mov	r0, r5
 80038ec:	47b8      	blx	r7
 80038ee:	3001      	adds	r0, #1
 80038f0:	d12b      	bne.n	800394a <_printf_float+0x242>
 80038f2:	e764      	b.n	80037be <_printf_float+0xb6>
 80038f4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80038f8:	f240 80dc 	bls.w	8003ab4 <_printf_float+0x3ac>
 80038fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003900:	2200      	movs	r2, #0
 8003902:	2300      	movs	r3, #0
 8003904:	f7fd f850 	bl	80009a8 <__aeabi_dcmpeq>
 8003908:	2800      	cmp	r0, #0
 800390a:	d033      	beq.n	8003974 <_printf_float+0x26c>
 800390c:	2301      	movs	r3, #1
 800390e:	4631      	mov	r1, r6
 8003910:	4628      	mov	r0, r5
 8003912:	4a35      	ldr	r2, [pc, #212]	@ (80039e8 <_printf_float+0x2e0>)
 8003914:	47b8      	blx	r7
 8003916:	3001      	adds	r0, #1
 8003918:	f43f af51 	beq.w	80037be <_printf_float+0xb6>
 800391c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003920:	4543      	cmp	r3, r8
 8003922:	db02      	blt.n	800392a <_printf_float+0x222>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	07d8      	lsls	r0, r3, #31
 8003928:	d50f      	bpl.n	800394a <_printf_float+0x242>
 800392a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800392e:	4631      	mov	r1, r6
 8003930:	4628      	mov	r0, r5
 8003932:	47b8      	blx	r7
 8003934:	3001      	adds	r0, #1
 8003936:	f43f af42 	beq.w	80037be <_printf_float+0xb6>
 800393a:	f04f 0900 	mov.w	r9, #0
 800393e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003942:	f104 0a1a 	add.w	sl, r4, #26
 8003946:	45c8      	cmp	r8, r9
 8003948:	dc09      	bgt.n	800395e <_printf_float+0x256>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	079b      	lsls	r3, r3, #30
 800394e:	f100 8102 	bmi.w	8003b56 <_printf_float+0x44e>
 8003952:	68e0      	ldr	r0, [r4, #12]
 8003954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003956:	4298      	cmp	r0, r3
 8003958:	bfb8      	it	lt
 800395a:	4618      	movlt	r0, r3
 800395c:	e731      	b.n	80037c2 <_printf_float+0xba>
 800395e:	2301      	movs	r3, #1
 8003960:	4652      	mov	r2, sl
 8003962:	4631      	mov	r1, r6
 8003964:	4628      	mov	r0, r5
 8003966:	47b8      	blx	r7
 8003968:	3001      	adds	r0, #1
 800396a:	f43f af28 	beq.w	80037be <_printf_float+0xb6>
 800396e:	f109 0901 	add.w	r9, r9, #1
 8003972:	e7e8      	b.n	8003946 <_printf_float+0x23e>
 8003974:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003976:	2b00      	cmp	r3, #0
 8003978:	dc38      	bgt.n	80039ec <_printf_float+0x2e4>
 800397a:	2301      	movs	r3, #1
 800397c:	4631      	mov	r1, r6
 800397e:	4628      	mov	r0, r5
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <_printf_float+0x2e0>)
 8003982:	47b8      	blx	r7
 8003984:	3001      	adds	r0, #1
 8003986:	f43f af1a 	beq.w	80037be <_printf_float+0xb6>
 800398a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800398e:	ea59 0303 	orrs.w	r3, r9, r3
 8003992:	d102      	bne.n	800399a <_printf_float+0x292>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	07d9      	lsls	r1, r3, #31
 8003998:	d5d7      	bpl.n	800394a <_printf_float+0x242>
 800399a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800399e:	4631      	mov	r1, r6
 80039a0:	4628      	mov	r0, r5
 80039a2:	47b8      	blx	r7
 80039a4:	3001      	adds	r0, #1
 80039a6:	f43f af0a 	beq.w	80037be <_printf_float+0xb6>
 80039aa:	f04f 0a00 	mov.w	sl, #0
 80039ae:	f104 0b1a 	add.w	fp, r4, #26
 80039b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039b4:	425b      	negs	r3, r3
 80039b6:	4553      	cmp	r3, sl
 80039b8:	dc01      	bgt.n	80039be <_printf_float+0x2b6>
 80039ba:	464b      	mov	r3, r9
 80039bc:	e793      	b.n	80038e6 <_printf_float+0x1de>
 80039be:	2301      	movs	r3, #1
 80039c0:	465a      	mov	r2, fp
 80039c2:	4631      	mov	r1, r6
 80039c4:	4628      	mov	r0, r5
 80039c6:	47b8      	blx	r7
 80039c8:	3001      	adds	r0, #1
 80039ca:	f43f aef8 	beq.w	80037be <_printf_float+0xb6>
 80039ce:	f10a 0a01 	add.w	sl, sl, #1
 80039d2:	e7ee      	b.n	80039b2 <_printf_float+0x2aa>
 80039d4:	7fefffff 	.word	0x7fefffff
 80039d8:	08007d06 	.word	0x08007d06
 80039dc:	08007d0a 	.word	0x08007d0a
 80039e0:	08007d0e 	.word	0x08007d0e
 80039e4:	08007d12 	.word	0x08007d12
 80039e8:	08007d16 	.word	0x08007d16
 80039ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039ee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80039f2:	4553      	cmp	r3, sl
 80039f4:	bfa8      	it	ge
 80039f6:	4653      	movge	r3, sl
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	4699      	mov	r9, r3
 80039fc:	dc36      	bgt.n	8003a6c <_printf_float+0x364>
 80039fe:	f04f 0b00 	mov.w	fp, #0
 8003a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a06:	f104 021a 	add.w	r2, r4, #26
 8003a0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a0e:	eba3 0309 	sub.w	r3, r3, r9
 8003a12:	455b      	cmp	r3, fp
 8003a14:	dc31      	bgt.n	8003a7a <_printf_float+0x372>
 8003a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a18:	459a      	cmp	sl, r3
 8003a1a:	dc3a      	bgt.n	8003a92 <_printf_float+0x38a>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	07da      	lsls	r2, r3, #31
 8003a20:	d437      	bmi.n	8003a92 <_printf_float+0x38a>
 8003a22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a24:	ebaa 0903 	sub.w	r9, sl, r3
 8003a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a2a:	ebaa 0303 	sub.w	r3, sl, r3
 8003a2e:	4599      	cmp	r9, r3
 8003a30:	bfa8      	it	ge
 8003a32:	4699      	movge	r9, r3
 8003a34:	f1b9 0f00 	cmp.w	r9, #0
 8003a38:	dc33      	bgt.n	8003aa2 <_printf_float+0x39a>
 8003a3a:	f04f 0800 	mov.w	r8, #0
 8003a3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a42:	f104 0b1a 	add.w	fp, r4, #26
 8003a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a48:	ebaa 0303 	sub.w	r3, sl, r3
 8003a4c:	eba3 0309 	sub.w	r3, r3, r9
 8003a50:	4543      	cmp	r3, r8
 8003a52:	f77f af7a 	ble.w	800394a <_printf_float+0x242>
 8003a56:	2301      	movs	r3, #1
 8003a58:	465a      	mov	r2, fp
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	47b8      	blx	r7
 8003a60:	3001      	adds	r0, #1
 8003a62:	f43f aeac 	beq.w	80037be <_printf_float+0xb6>
 8003a66:	f108 0801 	add.w	r8, r8, #1
 8003a6a:	e7ec      	b.n	8003a46 <_printf_float+0x33e>
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	4631      	mov	r1, r6
 8003a70:	4628      	mov	r0, r5
 8003a72:	47b8      	blx	r7
 8003a74:	3001      	adds	r0, #1
 8003a76:	d1c2      	bne.n	80039fe <_printf_float+0x2f6>
 8003a78:	e6a1      	b.n	80037be <_printf_float+0xb6>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	4628      	mov	r0, r5
 8003a80:	920a      	str	r2, [sp, #40]	@ 0x28
 8003a82:	47b8      	blx	r7
 8003a84:	3001      	adds	r0, #1
 8003a86:	f43f ae9a 	beq.w	80037be <_printf_float+0xb6>
 8003a8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003a8c:	f10b 0b01 	add.w	fp, fp, #1
 8003a90:	e7bb      	b.n	8003a0a <_printf_float+0x302>
 8003a92:	4631      	mov	r1, r6
 8003a94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a98:	4628      	mov	r0, r5
 8003a9a:	47b8      	blx	r7
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d1c0      	bne.n	8003a22 <_printf_float+0x31a>
 8003aa0:	e68d      	b.n	80037be <_printf_float+0xb6>
 8003aa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	4442      	add	r2, r8
 8003aac:	47b8      	blx	r7
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d1c3      	bne.n	8003a3a <_printf_float+0x332>
 8003ab2:	e684      	b.n	80037be <_printf_float+0xb6>
 8003ab4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003ab8:	f1ba 0f01 	cmp.w	sl, #1
 8003abc:	dc01      	bgt.n	8003ac2 <_printf_float+0x3ba>
 8003abe:	07db      	lsls	r3, r3, #31
 8003ac0:	d536      	bpl.n	8003b30 <_printf_float+0x428>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	4628      	mov	r0, r5
 8003aca:	47b8      	blx	r7
 8003acc:	3001      	adds	r0, #1
 8003ace:	f43f ae76 	beq.w	80037be <_printf_float+0xb6>
 8003ad2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ad6:	4631      	mov	r1, r6
 8003ad8:	4628      	mov	r0, r5
 8003ada:	47b8      	blx	r7
 8003adc:	3001      	adds	r0, #1
 8003ade:	f43f ae6e 	beq.w	80037be <_printf_float+0xb6>
 8003ae2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003aee:	f7fc ff5b 	bl	80009a8 <__aeabi_dcmpeq>
 8003af2:	b9c0      	cbnz	r0, 8003b26 <_printf_float+0x41e>
 8003af4:	4653      	mov	r3, sl
 8003af6:	f108 0201 	add.w	r2, r8, #1
 8003afa:	4631      	mov	r1, r6
 8003afc:	4628      	mov	r0, r5
 8003afe:	47b8      	blx	r7
 8003b00:	3001      	adds	r0, #1
 8003b02:	d10c      	bne.n	8003b1e <_printf_float+0x416>
 8003b04:	e65b      	b.n	80037be <_printf_float+0xb6>
 8003b06:	2301      	movs	r3, #1
 8003b08:	465a      	mov	r2, fp
 8003b0a:	4631      	mov	r1, r6
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	47b8      	blx	r7
 8003b10:	3001      	adds	r0, #1
 8003b12:	f43f ae54 	beq.w	80037be <_printf_float+0xb6>
 8003b16:	f108 0801 	add.w	r8, r8, #1
 8003b1a:	45d0      	cmp	r8, sl
 8003b1c:	dbf3      	blt.n	8003b06 <_printf_float+0x3fe>
 8003b1e:	464b      	mov	r3, r9
 8003b20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003b24:	e6e0      	b.n	80038e8 <_printf_float+0x1e0>
 8003b26:	f04f 0800 	mov.w	r8, #0
 8003b2a:	f104 0b1a 	add.w	fp, r4, #26
 8003b2e:	e7f4      	b.n	8003b1a <_printf_float+0x412>
 8003b30:	2301      	movs	r3, #1
 8003b32:	4642      	mov	r2, r8
 8003b34:	e7e1      	b.n	8003afa <_printf_float+0x3f2>
 8003b36:	2301      	movs	r3, #1
 8003b38:	464a      	mov	r2, r9
 8003b3a:	4631      	mov	r1, r6
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	47b8      	blx	r7
 8003b40:	3001      	adds	r0, #1
 8003b42:	f43f ae3c 	beq.w	80037be <_printf_float+0xb6>
 8003b46:	f108 0801 	add.w	r8, r8, #1
 8003b4a:	68e3      	ldr	r3, [r4, #12]
 8003b4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003b4e:	1a5b      	subs	r3, r3, r1
 8003b50:	4543      	cmp	r3, r8
 8003b52:	dcf0      	bgt.n	8003b36 <_printf_float+0x42e>
 8003b54:	e6fd      	b.n	8003952 <_printf_float+0x24a>
 8003b56:	f04f 0800 	mov.w	r8, #0
 8003b5a:	f104 0919 	add.w	r9, r4, #25
 8003b5e:	e7f4      	b.n	8003b4a <_printf_float+0x442>

08003b60 <_printf_common>:
 8003b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b64:	4616      	mov	r6, r2
 8003b66:	4698      	mov	r8, r3
 8003b68:	688a      	ldr	r2, [r1, #8]
 8003b6a:	690b      	ldr	r3, [r1, #16]
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	bfb8      	it	lt
 8003b72:	4613      	movlt	r3, r2
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b80:	b10a      	cbz	r2, 8003b86 <_printf_common+0x26>
 8003b82:	3301      	adds	r3, #1
 8003b84:	6033      	str	r3, [r6, #0]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	0699      	lsls	r1, r3, #26
 8003b8a:	bf42      	ittt	mi
 8003b8c:	6833      	ldrmi	r3, [r6, #0]
 8003b8e:	3302      	addmi	r3, #2
 8003b90:	6033      	strmi	r3, [r6, #0]
 8003b92:	6825      	ldr	r5, [r4, #0]
 8003b94:	f015 0506 	ands.w	r5, r5, #6
 8003b98:	d106      	bne.n	8003ba8 <_printf_common+0x48>
 8003b9a:	f104 0a19 	add.w	sl, r4, #25
 8003b9e:	68e3      	ldr	r3, [r4, #12]
 8003ba0:	6832      	ldr	r2, [r6, #0]
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	42ab      	cmp	r3, r5
 8003ba6:	dc2b      	bgt.n	8003c00 <_printf_common+0xa0>
 8003ba8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bac:	6822      	ldr	r2, [r4, #0]
 8003bae:	3b00      	subs	r3, #0
 8003bb0:	bf18      	it	ne
 8003bb2:	2301      	movne	r3, #1
 8003bb4:	0692      	lsls	r2, r2, #26
 8003bb6:	d430      	bmi.n	8003c1a <_printf_common+0xba>
 8003bb8:	4641      	mov	r1, r8
 8003bba:	4638      	mov	r0, r7
 8003bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bc0:	47c8      	blx	r9
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	d023      	beq.n	8003c0e <_printf_common+0xae>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	6922      	ldr	r2, [r4, #16]
 8003bca:	f003 0306 	and.w	r3, r3, #6
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	bf14      	ite	ne
 8003bd2:	2500      	movne	r5, #0
 8003bd4:	6833      	ldreq	r3, [r6, #0]
 8003bd6:	f04f 0600 	mov.w	r6, #0
 8003bda:	bf08      	it	eq
 8003bdc:	68e5      	ldreq	r5, [r4, #12]
 8003bde:	f104 041a 	add.w	r4, r4, #26
 8003be2:	bf08      	it	eq
 8003be4:	1aed      	subeq	r5, r5, r3
 8003be6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bea:	bf08      	it	eq
 8003bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bfc4      	itt	gt
 8003bf4:	1a9b      	subgt	r3, r3, r2
 8003bf6:	18ed      	addgt	r5, r5, r3
 8003bf8:	42b5      	cmp	r5, r6
 8003bfa:	d11a      	bne.n	8003c32 <_printf_common+0xd2>
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e008      	b.n	8003c12 <_printf_common+0xb2>
 8003c00:	2301      	movs	r3, #1
 8003c02:	4652      	mov	r2, sl
 8003c04:	4641      	mov	r1, r8
 8003c06:	4638      	mov	r0, r7
 8003c08:	47c8      	blx	r9
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d103      	bne.n	8003c16 <_printf_common+0xb6>
 8003c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c16:	3501      	adds	r5, #1
 8003c18:	e7c1      	b.n	8003b9e <_printf_common+0x3e>
 8003c1a:	2030      	movs	r0, #48	@ 0x30
 8003c1c:	18e1      	adds	r1, r4, r3
 8003c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c28:	4422      	add	r2, r4
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c30:	e7c2      	b.n	8003bb8 <_printf_common+0x58>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4622      	mov	r2, r4
 8003c36:	4641      	mov	r1, r8
 8003c38:	4638      	mov	r0, r7
 8003c3a:	47c8      	blx	r9
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d0e6      	beq.n	8003c0e <_printf_common+0xae>
 8003c40:	3601      	adds	r6, #1
 8003c42:	e7d9      	b.n	8003bf8 <_printf_common+0x98>

08003c44 <_printf_i>:
 8003c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	7e0f      	ldrb	r7, [r1, #24]
 8003c4a:	4691      	mov	r9, r2
 8003c4c:	2f78      	cmp	r7, #120	@ 0x78
 8003c4e:	4680      	mov	r8, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	469a      	mov	sl, r3
 8003c54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c5a:	d807      	bhi.n	8003c6c <_printf_i+0x28>
 8003c5c:	2f62      	cmp	r7, #98	@ 0x62
 8003c5e:	d80a      	bhi.n	8003c76 <_printf_i+0x32>
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	f000 80d3 	beq.w	8003e0c <_printf_i+0x1c8>
 8003c66:	2f58      	cmp	r7, #88	@ 0x58
 8003c68:	f000 80ba 	beq.w	8003de0 <_printf_i+0x19c>
 8003c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c74:	e03a      	b.n	8003cec <_printf_i+0xa8>
 8003c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c7a:	2b15      	cmp	r3, #21
 8003c7c:	d8f6      	bhi.n	8003c6c <_printf_i+0x28>
 8003c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c84 <_printf_i+0x40>)
 8003c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cf1 	.word	0x08003cf1
 8003c8c:	08003c6d 	.word	0x08003c6d
 8003c90:	08003c6d 	.word	0x08003c6d
 8003c94:	08003c6d 	.word	0x08003c6d
 8003c98:	08003c6d 	.word	0x08003c6d
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003c6d 	.word	0x08003c6d
 8003ca4:	08003c6d 	.word	0x08003c6d
 8003ca8:	08003c6d 	.word	0x08003c6d
 8003cac:	08003c6d 	.word	0x08003c6d
 8003cb0:	08003df3 	.word	0x08003df3
 8003cb4:	08003d1b 	.word	0x08003d1b
 8003cb8:	08003dad 	.word	0x08003dad
 8003cbc:	08003c6d 	.word	0x08003c6d
 8003cc0:	08003c6d 	.word	0x08003c6d
 8003cc4:	08003e15 	.word	0x08003e15
 8003cc8:	08003c6d 	.word	0x08003c6d
 8003ccc:	08003d1b 	.word	0x08003d1b
 8003cd0:	08003c6d 	.word	0x08003c6d
 8003cd4:	08003c6d 	.word	0x08003c6d
 8003cd8:	08003db5 	.word	0x08003db5
 8003cdc:	6833      	ldr	r3, [r6, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6032      	str	r2, [r6, #0]
 8003ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cec:	2301      	movs	r3, #1
 8003cee:	e09e      	b.n	8003e2e <_printf_i+0x1ea>
 8003cf0:	6833      	ldr	r3, [r6, #0]
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	1d19      	adds	r1, r3, #4
 8003cf6:	6031      	str	r1, [r6, #0]
 8003cf8:	0606      	lsls	r6, r0, #24
 8003cfa:	d501      	bpl.n	8003d00 <_printf_i+0xbc>
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	e003      	b.n	8003d08 <_printf_i+0xc4>
 8003d00:	0645      	lsls	r5, r0, #25
 8003d02:	d5fb      	bpl.n	8003cfc <_printf_i+0xb8>
 8003d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	da03      	bge.n	8003d14 <_printf_i+0xd0>
 8003d0c:	232d      	movs	r3, #45	@ 0x2d
 8003d0e:	426d      	negs	r5, r5
 8003d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d14:	230a      	movs	r3, #10
 8003d16:	4859      	ldr	r0, [pc, #356]	@ (8003e7c <_printf_i+0x238>)
 8003d18:	e011      	b.n	8003d3e <_printf_i+0xfa>
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	6833      	ldr	r3, [r6, #0]
 8003d1e:	0608      	lsls	r0, r1, #24
 8003d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d24:	d402      	bmi.n	8003d2c <_printf_i+0xe8>
 8003d26:	0649      	lsls	r1, r1, #25
 8003d28:	bf48      	it	mi
 8003d2a:	b2ad      	uxthmi	r5, r5
 8003d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	bf14      	ite	ne
 8003d32:	230a      	movne	r3, #10
 8003d34:	2308      	moveq	r3, #8
 8003d36:	4851      	ldr	r0, [pc, #324]	@ (8003e7c <_printf_i+0x238>)
 8003d38:	2100      	movs	r1, #0
 8003d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d3e:	6866      	ldr	r6, [r4, #4]
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	bfa8      	it	ge
 8003d44:	6821      	ldrge	r1, [r4, #0]
 8003d46:	60a6      	str	r6, [r4, #8]
 8003d48:	bfa4      	itt	ge
 8003d4a:	f021 0104 	bicge.w	r1, r1, #4
 8003d4e:	6021      	strge	r1, [r4, #0]
 8003d50:	b90d      	cbnz	r5, 8003d56 <_printf_i+0x112>
 8003d52:	2e00      	cmp	r6, #0
 8003d54:	d04b      	beq.n	8003dee <_printf_i+0x1aa>
 8003d56:	4616      	mov	r6, r2
 8003d58:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d5c:	fb03 5711 	mls	r7, r3, r1, r5
 8003d60:	5dc7      	ldrb	r7, [r0, r7]
 8003d62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d66:	462f      	mov	r7, r5
 8003d68:	42bb      	cmp	r3, r7
 8003d6a:	460d      	mov	r5, r1
 8003d6c:	d9f4      	bls.n	8003d58 <_printf_i+0x114>
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d10b      	bne.n	8003d8a <_printf_i+0x146>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	07df      	lsls	r7, r3, #31
 8003d76:	d508      	bpl.n	8003d8a <_printf_i+0x146>
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	6861      	ldr	r1, [r4, #4]
 8003d7c:	4299      	cmp	r1, r3
 8003d7e:	bfde      	ittt	le
 8003d80:	2330      	movle	r3, #48	@ 0x30
 8003d82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d8a:	1b92      	subs	r2, r2, r6
 8003d8c:	6122      	str	r2, [r4, #16]
 8003d8e:	464b      	mov	r3, r9
 8003d90:	4621      	mov	r1, r4
 8003d92:	4640      	mov	r0, r8
 8003d94:	f8cd a000 	str.w	sl, [sp]
 8003d98:	aa03      	add	r2, sp, #12
 8003d9a:	f7ff fee1 	bl	8003b60 <_printf_common>
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d14a      	bne.n	8003e38 <_printf_i+0x1f4>
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	b004      	add	sp, #16
 8003da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	f043 0320 	orr.w	r3, r3, #32
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	2778      	movs	r7, #120	@ 0x78
 8003db6:	4832      	ldr	r0, [pc, #200]	@ (8003e80 <_printf_i+0x23c>)
 8003db8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	6831      	ldr	r1, [r6, #0]
 8003dc0:	061f      	lsls	r7, r3, #24
 8003dc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dc6:	d402      	bmi.n	8003dce <_printf_i+0x18a>
 8003dc8:	065f      	lsls	r7, r3, #25
 8003dca:	bf48      	it	mi
 8003dcc:	b2ad      	uxthmi	r5, r5
 8003dce:	6031      	str	r1, [r6, #0]
 8003dd0:	07d9      	lsls	r1, r3, #31
 8003dd2:	bf44      	itt	mi
 8003dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd8:	6023      	strmi	r3, [r4, #0]
 8003dda:	b11d      	cbz	r5, 8003de4 <_printf_i+0x1a0>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	e7ab      	b.n	8003d38 <_printf_i+0xf4>
 8003de0:	4826      	ldr	r0, [pc, #152]	@ (8003e7c <_printf_i+0x238>)
 8003de2:	e7e9      	b.n	8003db8 <_printf_i+0x174>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f023 0320 	bic.w	r3, r3, #32
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	e7f6      	b.n	8003ddc <_printf_i+0x198>
 8003dee:	4616      	mov	r6, r2
 8003df0:	e7bd      	b.n	8003d6e <_printf_i+0x12a>
 8003df2:	6833      	ldr	r3, [r6, #0]
 8003df4:	6825      	ldr	r5, [r4, #0]
 8003df6:	1d18      	adds	r0, r3, #4
 8003df8:	6961      	ldr	r1, [r4, #20]
 8003dfa:	6030      	str	r0, [r6, #0]
 8003dfc:	062e      	lsls	r6, r5, #24
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	d501      	bpl.n	8003e06 <_printf_i+0x1c2>
 8003e02:	6019      	str	r1, [r3, #0]
 8003e04:	e002      	b.n	8003e0c <_printf_i+0x1c8>
 8003e06:	0668      	lsls	r0, r5, #25
 8003e08:	d5fb      	bpl.n	8003e02 <_printf_i+0x1be>
 8003e0a:	8019      	strh	r1, [r3, #0]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4616      	mov	r6, r2
 8003e10:	6123      	str	r3, [r4, #16]
 8003e12:	e7bc      	b.n	8003d8e <_printf_i+0x14a>
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	2100      	movs	r1, #0
 8003e18:	1d1a      	adds	r2, r3, #4
 8003e1a:	6032      	str	r2, [r6, #0]
 8003e1c:	681e      	ldr	r6, [r3, #0]
 8003e1e:	6862      	ldr	r2, [r4, #4]
 8003e20:	4630      	mov	r0, r6
 8003e22:	f000 fbe4 	bl	80045ee <memchr>
 8003e26:	b108      	cbz	r0, 8003e2c <_printf_i+0x1e8>
 8003e28:	1b80      	subs	r0, r0, r6
 8003e2a:	6060      	str	r0, [r4, #4]
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	6123      	str	r3, [r4, #16]
 8003e30:	2300      	movs	r3, #0
 8003e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e36:	e7aa      	b.n	8003d8e <_printf_i+0x14a>
 8003e38:	4632      	mov	r2, r6
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	47d0      	blx	sl
 8003e42:	3001      	adds	r0, #1
 8003e44:	d0ad      	beq.n	8003da2 <_printf_i+0x15e>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	079b      	lsls	r3, r3, #30
 8003e4a:	d413      	bmi.n	8003e74 <_printf_i+0x230>
 8003e4c:	68e0      	ldr	r0, [r4, #12]
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	4298      	cmp	r0, r3
 8003e52:	bfb8      	it	lt
 8003e54:	4618      	movlt	r0, r3
 8003e56:	e7a6      	b.n	8003da6 <_printf_i+0x162>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4632      	mov	r2, r6
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	4640      	mov	r0, r8
 8003e60:	47d0      	blx	sl
 8003e62:	3001      	adds	r0, #1
 8003e64:	d09d      	beq.n	8003da2 <_printf_i+0x15e>
 8003e66:	3501      	adds	r5, #1
 8003e68:	68e3      	ldr	r3, [r4, #12]
 8003e6a:	9903      	ldr	r1, [sp, #12]
 8003e6c:	1a5b      	subs	r3, r3, r1
 8003e6e:	42ab      	cmp	r3, r5
 8003e70:	dcf2      	bgt.n	8003e58 <_printf_i+0x214>
 8003e72:	e7eb      	b.n	8003e4c <_printf_i+0x208>
 8003e74:	2500      	movs	r5, #0
 8003e76:	f104 0619 	add.w	r6, r4, #25
 8003e7a:	e7f5      	b.n	8003e68 <_printf_i+0x224>
 8003e7c:	08007d18 	.word	0x08007d18
 8003e80:	08007d29 	.word	0x08007d29

08003e84 <_scanf_float>:
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	9303      	str	r3, [sp, #12]
 8003e8c:	688b      	ldr	r3, [r1, #8]
 8003e8e:	4617      	mov	r7, r2
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003e96:	bf82      	ittt	hi
 8003e98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003e9c:	eb03 0b05 	addhi.w	fp, r3, r5
 8003ea0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003ea4:	460a      	mov	r2, r1
 8003ea6:	f04f 0500 	mov.w	r5, #0
 8003eaa:	bf88      	it	hi
 8003eac:	608b      	strhi	r3, [r1, #8]
 8003eae:	680b      	ldr	r3, [r1, #0]
 8003eb0:	4680      	mov	r8, r0
 8003eb2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003eb6:	f842 3b1c 	str.w	r3, [r2], #28
 8003eba:	460c      	mov	r4, r1
 8003ebc:	bf98      	it	ls
 8003ebe:	f04f 0b00 	movls.w	fp, #0
 8003ec2:	4616      	mov	r6, r2
 8003ec4:	46aa      	mov	sl, r5
 8003ec6:	46a9      	mov	r9, r5
 8003ec8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003ecc:	9201      	str	r2, [sp, #4]
 8003ece:	9502      	str	r5, [sp, #8]
 8003ed0:	68a2      	ldr	r2, [r4, #8]
 8003ed2:	b152      	cbz	r2, 8003eea <_scanf_float+0x66>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b4e      	cmp	r3, #78	@ 0x4e
 8003eda:	d865      	bhi.n	8003fa8 <_scanf_float+0x124>
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d83d      	bhi.n	8003f5c <_scanf_float+0xd8>
 8003ee0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003ee4:	b2c8      	uxtb	r0, r1
 8003ee6:	280e      	cmp	r0, #14
 8003ee8:	d93b      	bls.n	8003f62 <_scanf_float+0xde>
 8003eea:	f1b9 0f00 	cmp.w	r9, #0
 8003eee:	d003      	beq.n	8003ef8 <_scanf_float+0x74>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003efc:	f1ba 0f01 	cmp.w	sl, #1
 8003f00:	f200 8118 	bhi.w	8004134 <_scanf_float+0x2b0>
 8003f04:	9b01      	ldr	r3, [sp, #4]
 8003f06:	429e      	cmp	r6, r3
 8003f08:	f200 8109 	bhi.w	800411e <_scanf_float+0x29a>
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	b007      	add	sp, #28
 8003f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f14:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003f18:	2a0d      	cmp	r2, #13
 8003f1a:	d8e6      	bhi.n	8003eea <_scanf_float+0x66>
 8003f1c:	a101      	add	r1, pc, #4	@ (adr r1, 8003f24 <_scanf_float+0xa0>)
 8003f1e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	0800406b 	.word	0x0800406b
 8003f28:	08003eeb 	.word	0x08003eeb
 8003f2c:	08003eeb 	.word	0x08003eeb
 8003f30:	08003eeb 	.word	0x08003eeb
 8003f34:	080040cb 	.word	0x080040cb
 8003f38:	080040a3 	.word	0x080040a3
 8003f3c:	08003eeb 	.word	0x08003eeb
 8003f40:	08003eeb 	.word	0x08003eeb
 8003f44:	08004079 	.word	0x08004079
 8003f48:	08003eeb 	.word	0x08003eeb
 8003f4c:	08003eeb 	.word	0x08003eeb
 8003f50:	08003eeb 	.word	0x08003eeb
 8003f54:	08003eeb 	.word	0x08003eeb
 8003f58:	08004031 	.word	0x08004031
 8003f5c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003f60:	e7da      	b.n	8003f18 <_scanf_float+0x94>
 8003f62:	290e      	cmp	r1, #14
 8003f64:	d8c1      	bhi.n	8003eea <_scanf_float+0x66>
 8003f66:	a001      	add	r0, pc, #4	@ (adr r0, 8003f6c <_scanf_float+0xe8>)
 8003f68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003f6c:	08004021 	.word	0x08004021
 8003f70:	08003eeb 	.word	0x08003eeb
 8003f74:	08004021 	.word	0x08004021
 8003f78:	080040b7 	.word	0x080040b7
 8003f7c:	08003eeb 	.word	0x08003eeb
 8003f80:	08003fc9 	.word	0x08003fc9
 8003f84:	08004007 	.word	0x08004007
 8003f88:	08004007 	.word	0x08004007
 8003f8c:	08004007 	.word	0x08004007
 8003f90:	08004007 	.word	0x08004007
 8003f94:	08004007 	.word	0x08004007
 8003f98:	08004007 	.word	0x08004007
 8003f9c:	08004007 	.word	0x08004007
 8003fa0:	08004007 	.word	0x08004007
 8003fa4:	08004007 	.word	0x08004007
 8003fa8:	2b6e      	cmp	r3, #110	@ 0x6e
 8003faa:	d809      	bhi.n	8003fc0 <_scanf_float+0x13c>
 8003fac:	2b60      	cmp	r3, #96	@ 0x60
 8003fae:	d8b1      	bhi.n	8003f14 <_scanf_float+0x90>
 8003fb0:	2b54      	cmp	r3, #84	@ 0x54
 8003fb2:	d07b      	beq.n	80040ac <_scanf_float+0x228>
 8003fb4:	2b59      	cmp	r3, #89	@ 0x59
 8003fb6:	d198      	bne.n	8003eea <_scanf_float+0x66>
 8003fb8:	2d07      	cmp	r5, #7
 8003fba:	d196      	bne.n	8003eea <_scanf_float+0x66>
 8003fbc:	2508      	movs	r5, #8
 8003fbe:	e02c      	b.n	800401a <_scanf_float+0x196>
 8003fc0:	2b74      	cmp	r3, #116	@ 0x74
 8003fc2:	d073      	beq.n	80040ac <_scanf_float+0x228>
 8003fc4:	2b79      	cmp	r3, #121	@ 0x79
 8003fc6:	e7f6      	b.n	8003fb6 <_scanf_float+0x132>
 8003fc8:	6821      	ldr	r1, [r4, #0]
 8003fca:	05c8      	lsls	r0, r1, #23
 8003fcc:	d51b      	bpl.n	8004006 <_scanf_float+0x182>
 8003fce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003fd2:	6021      	str	r1, [r4, #0]
 8003fd4:	f109 0901 	add.w	r9, r9, #1
 8003fd8:	f1bb 0f00 	cmp.w	fp, #0
 8003fdc:	d003      	beq.n	8003fe6 <_scanf_float+0x162>
 8003fde:	3201      	adds	r2, #1
 8003fe0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fe4:	60a2      	str	r2, [r4, #8]
 8003fe6:	68a3      	ldr	r3, [r4, #8]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	60a3      	str	r3, [r4, #8]
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	6123      	str	r3, [r4, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	f340 8087 	ble.w	800410c <_scanf_float+0x288>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	e764      	b.n	8003ed0 <_scanf_float+0x4c>
 8004006:	eb1a 0105 	adds.w	r1, sl, r5
 800400a:	f47f af6e 	bne.w	8003eea <_scanf_float+0x66>
 800400e:	460d      	mov	r5, r1
 8004010:	468a      	mov	sl, r1
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004018:	6022      	str	r2, [r4, #0]
 800401a:	f806 3b01 	strb.w	r3, [r6], #1
 800401e:	e7e2      	b.n	8003fe6 <_scanf_float+0x162>
 8004020:	6822      	ldr	r2, [r4, #0]
 8004022:	0610      	lsls	r0, r2, #24
 8004024:	f57f af61 	bpl.w	8003eea <_scanf_float+0x66>
 8004028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800402c:	6022      	str	r2, [r4, #0]
 800402e:	e7f4      	b.n	800401a <_scanf_float+0x196>
 8004030:	f1ba 0f00 	cmp.w	sl, #0
 8004034:	d10e      	bne.n	8004054 <_scanf_float+0x1d0>
 8004036:	f1b9 0f00 	cmp.w	r9, #0
 800403a:	d10e      	bne.n	800405a <_scanf_float+0x1d6>
 800403c:	6822      	ldr	r2, [r4, #0]
 800403e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004042:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004046:	d108      	bne.n	800405a <_scanf_float+0x1d6>
 8004048:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800404c:	f04f 0a01 	mov.w	sl, #1
 8004050:	6022      	str	r2, [r4, #0]
 8004052:	e7e2      	b.n	800401a <_scanf_float+0x196>
 8004054:	f1ba 0f02 	cmp.w	sl, #2
 8004058:	d055      	beq.n	8004106 <_scanf_float+0x282>
 800405a:	2d01      	cmp	r5, #1
 800405c:	d002      	beq.n	8004064 <_scanf_float+0x1e0>
 800405e:	2d04      	cmp	r5, #4
 8004060:	f47f af43 	bne.w	8003eea <_scanf_float+0x66>
 8004064:	3501      	adds	r5, #1
 8004066:	b2ed      	uxtb	r5, r5
 8004068:	e7d7      	b.n	800401a <_scanf_float+0x196>
 800406a:	f1ba 0f01 	cmp.w	sl, #1
 800406e:	f47f af3c 	bne.w	8003eea <_scanf_float+0x66>
 8004072:	f04f 0a02 	mov.w	sl, #2
 8004076:	e7d0      	b.n	800401a <_scanf_float+0x196>
 8004078:	b97d      	cbnz	r5, 800409a <_scanf_float+0x216>
 800407a:	f1b9 0f00 	cmp.w	r9, #0
 800407e:	f47f af37 	bne.w	8003ef0 <_scanf_float+0x6c>
 8004082:	6822      	ldr	r2, [r4, #0]
 8004084:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004088:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800408c:	f040 8103 	bne.w	8004296 <_scanf_float+0x412>
 8004090:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004094:	2501      	movs	r5, #1
 8004096:	6022      	str	r2, [r4, #0]
 8004098:	e7bf      	b.n	800401a <_scanf_float+0x196>
 800409a:	2d03      	cmp	r5, #3
 800409c:	d0e2      	beq.n	8004064 <_scanf_float+0x1e0>
 800409e:	2d05      	cmp	r5, #5
 80040a0:	e7de      	b.n	8004060 <_scanf_float+0x1dc>
 80040a2:	2d02      	cmp	r5, #2
 80040a4:	f47f af21 	bne.w	8003eea <_scanf_float+0x66>
 80040a8:	2503      	movs	r5, #3
 80040aa:	e7b6      	b.n	800401a <_scanf_float+0x196>
 80040ac:	2d06      	cmp	r5, #6
 80040ae:	f47f af1c 	bne.w	8003eea <_scanf_float+0x66>
 80040b2:	2507      	movs	r5, #7
 80040b4:	e7b1      	b.n	800401a <_scanf_float+0x196>
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	0591      	lsls	r1, r2, #22
 80040ba:	f57f af16 	bpl.w	8003eea <_scanf_float+0x66>
 80040be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80040c8:	e7a7      	b.n	800401a <_scanf_float+0x196>
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80040d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80040d4:	d006      	beq.n	80040e4 <_scanf_float+0x260>
 80040d6:	0550      	lsls	r0, r2, #21
 80040d8:	f57f af07 	bpl.w	8003eea <_scanf_float+0x66>
 80040dc:	f1b9 0f00 	cmp.w	r9, #0
 80040e0:	f000 80d9 	beq.w	8004296 <_scanf_float+0x412>
 80040e4:	0591      	lsls	r1, r2, #22
 80040e6:	bf58      	it	pl
 80040e8:	9902      	ldrpl	r1, [sp, #8]
 80040ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80040ee:	bf58      	it	pl
 80040f0:	eba9 0101 	subpl.w	r1, r9, r1
 80040f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80040f8:	f04f 0900 	mov.w	r9, #0
 80040fc:	bf58      	it	pl
 80040fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004102:	6022      	str	r2, [r4, #0]
 8004104:	e789      	b.n	800401a <_scanf_float+0x196>
 8004106:	f04f 0a03 	mov.w	sl, #3
 800410a:	e786      	b.n	800401a <_scanf_float+0x196>
 800410c:	4639      	mov	r1, r7
 800410e:	4640      	mov	r0, r8
 8004110:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004114:	4798      	blx	r3
 8004116:	2800      	cmp	r0, #0
 8004118:	f43f aeda 	beq.w	8003ed0 <_scanf_float+0x4c>
 800411c:	e6e5      	b.n	8003eea <_scanf_float+0x66>
 800411e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004122:	463a      	mov	r2, r7
 8004124:	4640      	mov	r0, r8
 8004126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800412a:	4798      	blx	r3
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	3b01      	subs	r3, #1
 8004130:	6123      	str	r3, [r4, #16]
 8004132:	e6e7      	b.n	8003f04 <_scanf_float+0x80>
 8004134:	1e6b      	subs	r3, r5, #1
 8004136:	2b06      	cmp	r3, #6
 8004138:	d824      	bhi.n	8004184 <_scanf_float+0x300>
 800413a:	2d02      	cmp	r5, #2
 800413c:	d836      	bhi.n	80041ac <_scanf_float+0x328>
 800413e:	9b01      	ldr	r3, [sp, #4]
 8004140:	429e      	cmp	r6, r3
 8004142:	f67f aee3 	bls.w	8003f0c <_scanf_float+0x88>
 8004146:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800414a:	463a      	mov	r2, r7
 800414c:	4640      	mov	r0, r8
 800414e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004152:	4798      	blx	r3
 8004154:	6923      	ldr	r3, [r4, #16]
 8004156:	3b01      	subs	r3, #1
 8004158:	6123      	str	r3, [r4, #16]
 800415a:	e7f0      	b.n	800413e <_scanf_float+0x2ba>
 800415c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004160:	463a      	mov	r2, r7
 8004162:	4640      	mov	r0, r8
 8004164:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004168:	4798      	blx	r3
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	3b01      	subs	r3, #1
 800416e:	6123      	str	r3, [r4, #16]
 8004170:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004174:	fa5f fa8a 	uxtb.w	sl, sl
 8004178:	f1ba 0f02 	cmp.w	sl, #2
 800417c:	d1ee      	bne.n	800415c <_scanf_float+0x2d8>
 800417e:	3d03      	subs	r5, #3
 8004180:	b2ed      	uxtb	r5, r5
 8004182:	1b76      	subs	r6, r6, r5
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	05da      	lsls	r2, r3, #23
 8004188:	d530      	bpl.n	80041ec <_scanf_float+0x368>
 800418a:	055b      	lsls	r3, r3, #21
 800418c:	d511      	bpl.n	80041b2 <_scanf_float+0x32e>
 800418e:	9b01      	ldr	r3, [sp, #4]
 8004190:	429e      	cmp	r6, r3
 8004192:	f67f aebb 	bls.w	8003f0c <_scanf_float+0x88>
 8004196:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800419a:	463a      	mov	r2, r7
 800419c:	4640      	mov	r0, r8
 800419e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041a2:	4798      	blx	r3
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	6123      	str	r3, [r4, #16]
 80041aa:	e7f0      	b.n	800418e <_scanf_float+0x30a>
 80041ac:	46aa      	mov	sl, r5
 80041ae:	46b3      	mov	fp, r6
 80041b0:	e7de      	b.n	8004170 <_scanf_float+0x2ec>
 80041b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80041b6:	6923      	ldr	r3, [r4, #16]
 80041b8:	2965      	cmp	r1, #101	@ 0x65
 80041ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80041be:	f106 35ff 	add.w	r5, r6, #4294967295
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	d00c      	beq.n	80041e0 <_scanf_float+0x35c>
 80041c6:	2945      	cmp	r1, #69	@ 0x45
 80041c8:	d00a      	beq.n	80041e0 <_scanf_float+0x35c>
 80041ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041ce:	463a      	mov	r2, r7
 80041d0:	4640      	mov	r0, r8
 80041d2:	4798      	blx	r3
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80041da:	3b01      	subs	r3, #1
 80041dc:	1eb5      	subs	r5, r6, #2
 80041de:	6123      	str	r3, [r4, #16]
 80041e0:	463a      	mov	r2, r7
 80041e2:	4640      	mov	r0, r8
 80041e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041e8:	4798      	blx	r3
 80041ea:	462e      	mov	r6, r5
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	f012 0210 	ands.w	r2, r2, #16
 80041f2:	d001      	beq.n	80041f8 <_scanf_float+0x374>
 80041f4:	2000      	movs	r0, #0
 80041f6:	e68a      	b.n	8003f0e <_scanf_float+0x8a>
 80041f8:	7032      	strb	r2, [r6, #0]
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004204:	d11c      	bne.n	8004240 <_scanf_float+0x3bc>
 8004206:	9b02      	ldr	r3, [sp, #8]
 8004208:	454b      	cmp	r3, r9
 800420a:	eba3 0209 	sub.w	r2, r3, r9
 800420e:	d123      	bne.n	8004258 <_scanf_float+0x3d4>
 8004210:	2200      	movs	r2, #0
 8004212:	4640      	mov	r0, r8
 8004214:	9901      	ldr	r1, [sp, #4]
 8004216:	f002 fbef 	bl	80069f8 <_strtod_r>
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	6825      	ldr	r5, [r4, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f015 0f02 	tst.w	r5, #2
 8004224:	4606      	mov	r6, r0
 8004226:	460f      	mov	r7, r1
 8004228:	f103 0204 	add.w	r2, r3, #4
 800422c:	d01f      	beq.n	800426e <_scanf_float+0x3ea>
 800422e:	9903      	ldr	r1, [sp, #12]
 8004230:	600a      	str	r2, [r1, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	e9c3 6700 	strd	r6, r7, [r3]
 8004238:	68e3      	ldr	r3, [r4, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60e3      	str	r3, [r4, #12]
 800423e:	e7d9      	b.n	80041f4 <_scanf_float+0x370>
 8004240:	9b04      	ldr	r3, [sp, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0e4      	beq.n	8004210 <_scanf_float+0x38c>
 8004246:	9905      	ldr	r1, [sp, #20]
 8004248:	230a      	movs	r3, #10
 800424a:	4640      	mov	r0, r8
 800424c:	3101      	adds	r1, #1
 800424e:	f002 fc53 	bl	8006af8 <_strtol_r>
 8004252:	9b04      	ldr	r3, [sp, #16]
 8004254:	9e05      	ldr	r6, [sp, #20]
 8004256:	1ac2      	subs	r2, r0, r3
 8004258:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800425c:	429e      	cmp	r6, r3
 800425e:	bf28      	it	cs
 8004260:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004264:	4630      	mov	r0, r6
 8004266:	490d      	ldr	r1, [pc, #52]	@ (800429c <_scanf_float+0x418>)
 8004268:	f000 f8de 	bl	8004428 <siprintf>
 800426c:	e7d0      	b.n	8004210 <_scanf_float+0x38c>
 800426e:	076d      	lsls	r5, r5, #29
 8004270:	d4dd      	bmi.n	800422e <_scanf_float+0x3aa>
 8004272:	9d03      	ldr	r5, [sp, #12]
 8004274:	602a      	str	r2, [r5, #0]
 8004276:	681d      	ldr	r5, [r3, #0]
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	f7fc fbc6 	bl	8000a0c <__aeabi_dcmpun>
 8004280:	b120      	cbz	r0, 800428c <_scanf_float+0x408>
 8004282:	4807      	ldr	r0, [pc, #28]	@ (80042a0 <_scanf_float+0x41c>)
 8004284:	f000 f9c2 	bl	800460c <nanf>
 8004288:	6028      	str	r0, [r5, #0]
 800428a:	e7d5      	b.n	8004238 <_scanf_float+0x3b4>
 800428c:	4630      	mov	r0, r6
 800428e:	4639      	mov	r1, r7
 8004290:	f7fc fc1a 	bl	8000ac8 <__aeabi_d2f>
 8004294:	e7f8      	b.n	8004288 <_scanf_float+0x404>
 8004296:	f04f 0900 	mov.w	r9, #0
 800429a:	e62d      	b.n	8003ef8 <_scanf_float+0x74>
 800429c:	08007d3a 	.word	0x08007d3a
 80042a0:	080080d5 	.word	0x080080d5

080042a4 <std>:
 80042a4:	2300      	movs	r3, #0
 80042a6:	b510      	push	{r4, lr}
 80042a8:	4604      	mov	r4, r0
 80042aa:	e9c0 3300 	strd	r3, r3, [r0]
 80042ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042b2:	6083      	str	r3, [r0, #8]
 80042b4:	8181      	strh	r1, [r0, #12]
 80042b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042b8:	81c2      	strh	r2, [r0, #14]
 80042ba:	6183      	str	r3, [r0, #24]
 80042bc:	4619      	mov	r1, r3
 80042be:	2208      	movs	r2, #8
 80042c0:	305c      	adds	r0, #92	@ 0x5c
 80042c2:	f000 f914 	bl	80044ee <memset>
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <std+0x58>)
 80042c8:	6224      	str	r4, [r4, #32]
 80042ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <std+0x5c>)
 80042ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <std+0x60>)
 80042d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <std+0x64>)
 80042d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80042d8:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <std+0x68>)
 80042da:	429c      	cmp	r4, r3
 80042dc:	d006      	beq.n	80042ec <std+0x48>
 80042de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042e2:	4294      	cmp	r4, r2
 80042e4:	d002      	beq.n	80042ec <std+0x48>
 80042e6:	33d0      	adds	r3, #208	@ 0xd0
 80042e8:	429c      	cmp	r4, r3
 80042ea:	d105      	bne.n	80042f8 <std+0x54>
 80042ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f4:	f000 b978 	b.w	80045e8 <__retarget_lock_init_recursive>
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	bf00      	nop
 80042fc:	08004469 	.word	0x08004469
 8004300:	0800448b 	.word	0x0800448b
 8004304:	080044c3 	.word	0x080044c3
 8004308:	080044e7 	.word	0x080044e7
 800430c:	2000030c 	.word	0x2000030c

08004310 <stdio_exit_handler>:
 8004310:	4a02      	ldr	r2, [pc, #8]	@ (800431c <stdio_exit_handler+0xc>)
 8004312:	4903      	ldr	r1, [pc, #12]	@ (8004320 <stdio_exit_handler+0x10>)
 8004314:	4803      	ldr	r0, [pc, #12]	@ (8004324 <stdio_exit_handler+0x14>)
 8004316:	f000 b869 	b.w	80043ec <_fwalk_sglue>
 800431a:	bf00      	nop
 800431c:	2000000c 	.word	0x2000000c
 8004320:	08006ead 	.word	0x08006ead
 8004324:	2000001c 	.word	0x2000001c

08004328 <cleanup_stdio>:
 8004328:	6841      	ldr	r1, [r0, #4]
 800432a:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <cleanup_stdio+0x34>)
 800432c:	b510      	push	{r4, lr}
 800432e:	4299      	cmp	r1, r3
 8004330:	4604      	mov	r4, r0
 8004332:	d001      	beq.n	8004338 <cleanup_stdio+0x10>
 8004334:	f002 fdba 	bl	8006eac <_fflush_r>
 8004338:	68a1      	ldr	r1, [r4, #8]
 800433a:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <cleanup_stdio+0x38>)
 800433c:	4299      	cmp	r1, r3
 800433e:	d002      	beq.n	8004346 <cleanup_stdio+0x1e>
 8004340:	4620      	mov	r0, r4
 8004342:	f002 fdb3 	bl	8006eac <_fflush_r>
 8004346:	68e1      	ldr	r1, [r4, #12]
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <cleanup_stdio+0x3c>)
 800434a:	4299      	cmp	r1, r3
 800434c:	d004      	beq.n	8004358 <cleanup_stdio+0x30>
 800434e:	4620      	mov	r0, r4
 8004350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004354:	f002 bdaa 	b.w	8006eac <_fflush_r>
 8004358:	bd10      	pop	{r4, pc}
 800435a:	bf00      	nop
 800435c:	2000030c 	.word	0x2000030c
 8004360:	20000374 	.word	0x20000374
 8004364:	200003dc 	.word	0x200003dc

08004368 <global_stdio_init.part.0>:
 8004368:	b510      	push	{r4, lr}
 800436a:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <global_stdio_init.part.0+0x30>)
 800436c:	4c0b      	ldr	r4, [pc, #44]	@ (800439c <global_stdio_init.part.0+0x34>)
 800436e:	4a0c      	ldr	r2, [pc, #48]	@ (80043a0 <global_stdio_init.part.0+0x38>)
 8004370:	4620      	mov	r0, r4
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	2104      	movs	r1, #4
 8004376:	2200      	movs	r2, #0
 8004378:	f7ff ff94 	bl	80042a4 <std>
 800437c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004380:	2201      	movs	r2, #1
 8004382:	2109      	movs	r1, #9
 8004384:	f7ff ff8e 	bl	80042a4 <std>
 8004388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800438c:	2202      	movs	r2, #2
 800438e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004392:	2112      	movs	r1, #18
 8004394:	f7ff bf86 	b.w	80042a4 <std>
 8004398:	20000444 	.word	0x20000444
 800439c:	2000030c 	.word	0x2000030c
 80043a0:	08004311 	.word	0x08004311

080043a4 <__sfp_lock_acquire>:
 80043a4:	4801      	ldr	r0, [pc, #4]	@ (80043ac <__sfp_lock_acquire+0x8>)
 80043a6:	f000 b920 	b.w	80045ea <__retarget_lock_acquire_recursive>
 80043aa:	bf00      	nop
 80043ac:	2000044d 	.word	0x2000044d

080043b0 <__sfp_lock_release>:
 80043b0:	4801      	ldr	r0, [pc, #4]	@ (80043b8 <__sfp_lock_release+0x8>)
 80043b2:	f000 b91b 	b.w	80045ec <__retarget_lock_release_recursive>
 80043b6:	bf00      	nop
 80043b8:	2000044d 	.word	0x2000044d

080043bc <__sinit>:
 80043bc:	b510      	push	{r4, lr}
 80043be:	4604      	mov	r4, r0
 80043c0:	f7ff fff0 	bl	80043a4 <__sfp_lock_acquire>
 80043c4:	6a23      	ldr	r3, [r4, #32]
 80043c6:	b11b      	cbz	r3, 80043d0 <__sinit+0x14>
 80043c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043cc:	f7ff bff0 	b.w	80043b0 <__sfp_lock_release>
 80043d0:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <__sinit+0x28>)
 80043d2:	6223      	str	r3, [r4, #32]
 80043d4:	4b04      	ldr	r3, [pc, #16]	@ (80043e8 <__sinit+0x2c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f5      	bne.n	80043c8 <__sinit+0xc>
 80043dc:	f7ff ffc4 	bl	8004368 <global_stdio_init.part.0>
 80043e0:	e7f2      	b.n	80043c8 <__sinit+0xc>
 80043e2:	bf00      	nop
 80043e4:	08004329 	.word	0x08004329
 80043e8:	20000444 	.word	0x20000444

080043ec <_fwalk_sglue>:
 80043ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043f0:	4607      	mov	r7, r0
 80043f2:	4688      	mov	r8, r1
 80043f4:	4614      	mov	r4, r2
 80043f6:	2600      	movs	r6, #0
 80043f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043fc:	f1b9 0901 	subs.w	r9, r9, #1
 8004400:	d505      	bpl.n	800440e <_fwalk_sglue+0x22>
 8004402:	6824      	ldr	r4, [r4, #0]
 8004404:	2c00      	cmp	r4, #0
 8004406:	d1f7      	bne.n	80043f8 <_fwalk_sglue+0xc>
 8004408:	4630      	mov	r0, r6
 800440a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800440e:	89ab      	ldrh	r3, [r5, #12]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d907      	bls.n	8004424 <_fwalk_sglue+0x38>
 8004414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004418:	3301      	adds	r3, #1
 800441a:	d003      	beq.n	8004424 <_fwalk_sglue+0x38>
 800441c:	4629      	mov	r1, r5
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	4306      	orrs	r6, r0
 8004424:	3568      	adds	r5, #104	@ 0x68
 8004426:	e7e9      	b.n	80043fc <_fwalk_sglue+0x10>

08004428 <siprintf>:
 8004428:	b40e      	push	{r1, r2, r3}
 800442a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800442e:	b500      	push	{lr}
 8004430:	b09c      	sub	sp, #112	@ 0x70
 8004432:	ab1d      	add	r3, sp, #116	@ 0x74
 8004434:	9002      	str	r0, [sp, #8]
 8004436:	9006      	str	r0, [sp, #24]
 8004438:	9107      	str	r1, [sp, #28]
 800443a:	9104      	str	r1, [sp, #16]
 800443c:	4808      	ldr	r0, [pc, #32]	@ (8004460 <siprintf+0x38>)
 800443e:	4909      	ldr	r1, [pc, #36]	@ (8004464 <siprintf+0x3c>)
 8004440:	f853 2b04 	ldr.w	r2, [r3], #4
 8004444:	9105      	str	r1, [sp, #20]
 8004446:	6800      	ldr	r0, [r0, #0]
 8004448:	a902      	add	r1, sp, #8
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	f002 fbb2 	bl	8006bb4 <_svfiprintf_r>
 8004450:	2200      	movs	r2, #0
 8004452:	9b02      	ldr	r3, [sp, #8]
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	b01c      	add	sp, #112	@ 0x70
 8004458:	f85d eb04 	ldr.w	lr, [sp], #4
 800445c:	b003      	add	sp, #12
 800445e:	4770      	bx	lr
 8004460:	20000018 	.word	0x20000018
 8004464:	ffff0208 	.word	0xffff0208

08004468 <__sread>:
 8004468:	b510      	push	{r4, lr}
 800446a:	460c      	mov	r4, r1
 800446c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004470:	f000 f86c 	bl	800454c <_read_r>
 8004474:	2800      	cmp	r0, #0
 8004476:	bfab      	itete	ge
 8004478:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800447a:	89a3      	ldrhlt	r3, [r4, #12]
 800447c:	181b      	addge	r3, r3, r0
 800447e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004482:	bfac      	ite	ge
 8004484:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004486:	81a3      	strhlt	r3, [r4, #12]
 8004488:	bd10      	pop	{r4, pc}

0800448a <__swrite>:
 800448a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448e:	461f      	mov	r7, r3
 8004490:	898b      	ldrh	r3, [r1, #12]
 8004492:	4605      	mov	r5, r0
 8004494:	05db      	lsls	r3, r3, #23
 8004496:	460c      	mov	r4, r1
 8004498:	4616      	mov	r6, r2
 800449a:	d505      	bpl.n	80044a8 <__swrite+0x1e>
 800449c:	2302      	movs	r3, #2
 800449e:	2200      	movs	r2, #0
 80044a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a4:	f000 f840 	bl	8004528 <_lseek_r>
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	4632      	mov	r2, r6
 80044ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044b0:	81a3      	strh	r3, [r4, #12]
 80044b2:	4628      	mov	r0, r5
 80044b4:	463b      	mov	r3, r7
 80044b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044be:	f000 b857 	b.w	8004570 <_write_r>

080044c2 <__sseek>:
 80044c2:	b510      	push	{r4, lr}
 80044c4:	460c      	mov	r4, r1
 80044c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ca:	f000 f82d 	bl	8004528 <_lseek_r>
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	bf15      	itete	ne
 80044d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044de:	81a3      	strheq	r3, [r4, #12]
 80044e0:	bf18      	it	ne
 80044e2:	81a3      	strhne	r3, [r4, #12]
 80044e4:	bd10      	pop	{r4, pc}

080044e6 <__sclose>:
 80044e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ea:	f000 b80d 	b.w	8004508 <_close_r>

080044ee <memset>:
 80044ee:	4603      	mov	r3, r0
 80044f0:	4402      	add	r2, r0
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d100      	bne.n	80044f8 <memset+0xa>
 80044f6:	4770      	bx	lr
 80044f8:	f803 1b01 	strb.w	r1, [r3], #1
 80044fc:	e7f9      	b.n	80044f2 <memset+0x4>
	...

08004500 <_localeconv_r>:
 8004500:	4800      	ldr	r0, [pc, #0]	@ (8004504 <_localeconv_r+0x4>)
 8004502:	4770      	bx	lr
 8004504:	20000158 	.word	0x20000158

08004508 <_close_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	2300      	movs	r3, #0
 800450c:	4d05      	ldr	r5, [pc, #20]	@ (8004524 <_close_r+0x1c>)
 800450e:	4604      	mov	r4, r0
 8004510:	4608      	mov	r0, r1
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f7fd faa5 	bl	8001a62 <_close>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_close_r+0x1a>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_close_r+0x1a>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	20000448 	.word	0x20000448

08004528 <_lseek_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4604      	mov	r4, r0
 800452c:	4608      	mov	r0, r1
 800452e:	4611      	mov	r1, r2
 8004530:	2200      	movs	r2, #0
 8004532:	4d05      	ldr	r5, [pc, #20]	@ (8004548 <_lseek_r+0x20>)
 8004534:	602a      	str	r2, [r5, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	f7fd fab7 	bl	8001aaa <_lseek>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_lseek_r+0x1e>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_lseek_r+0x1e>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	20000448 	.word	0x20000448

0800454c <_read_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	2200      	movs	r2, #0
 8004556:	4d05      	ldr	r5, [pc, #20]	@ (800456c <_read_r+0x20>)
 8004558:	602a      	str	r2, [r5, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f7fd fa48 	bl	80019f0 <_read>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_read_r+0x1e>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_read_r+0x1e>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	20000448 	.word	0x20000448

08004570 <_write_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	4611      	mov	r1, r2
 8004578:	2200      	movs	r2, #0
 800457a:	4d05      	ldr	r5, [pc, #20]	@ (8004590 <_write_r+0x20>)
 800457c:	602a      	str	r2, [r5, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	f7fd fa53 	bl	8001a2a <_write>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_write_r+0x1e>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	b103      	cbz	r3, 800458e <_write_r+0x1e>
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	20000448 	.word	0x20000448

08004594 <__errno>:
 8004594:	4b01      	ldr	r3, [pc, #4]	@ (800459c <__errno+0x8>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000018 	.word	0x20000018

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2600      	movs	r6, #0
 80045a4:	4d0c      	ldr	r5, [pc, #48]	@ (80045d8 <__libc_init_array+0x38>)
 80045a6:	4c0d      	ldr	r4, [pc, #52]	@ (80045dc <__libc_init_array+0x3c>)
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	f003 fb68 	bl	8007c84 <_init>
 80045b4:	2600      	movs	r6, #0
 80045b6:	4d0a      	ldr	r5, [pc, #40]	@ (80045e0 <__libc_init_array+0x40>)
 80045b8:	4c0a      	ldr	r4, [pc, #40]	@ (80045e4 <__libc_init_array+0x44>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	08008140 	.word	0x08008140
 80045dc:	08008140 	.word	0x08008140
 80045e0:	08008140 	.word	0x08008140
 80045e4:	08008144 	.word	0x08008144

080045e8 <__retarget_lock_init_recursive>:
 80045e8:	4770      	bx	lr

080045ea <__retarget_lock_acquire_recursive>:
 80045ea:	4770      	bx	lr

080045ec <__retarget_lock_release_recursive>:
 80045ec:	4770      	bx	lr

080045ee <memchr>:
 80045ee:	4603      	mov	r3, r0
 80045f0:	b510      	push	{r4, lr}
 80045f2:	b2c9      	uxtb	r1, r1
 80045f4:	4402      	add	r2, r0
 80045f6:	4293      	cmp	r3, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	d101      	bne.n	8004600 <memchr+0x12>
 80045fc:	2000      	movs	r0, #0
 80045fe:	e003      	b.n	8004608 <memchr+0x1a>
 8004600:	7804      	ldrb	r4, [r0, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	428c      	cmp	r4, r1
 8004606:	d1f6      	bne.n	80045f6 <memchr+0x8>
 8004608:	bd10      	pop	{r4, pc}
	...

0800460c <nanf>:
 800460c:	4800      	ldr	r0, [pc, #0]	@ (8004610 <nanf+0x4>)
 800460e:	4770      	bx	lr
 8004610:	7fc00000 	.word	0x7fc00000

08004614 <quorem>:
 8004614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004618:	6903      	ldr	r3, [r0, #16]
 800461a:	690c      	ldr	r4, [r1, #16]
 800461c:	4607      	mov	r7, r0
 800461e:	42a3      	cmp	r3, r4
 8004620:	db7e      	blt.n	8004720 <quorem+0x10c>
 8004622:	3c01      	subs	r4, #1
 8004624:	00a3      	lsls	r3, r4, #2
 8004626:	f100 0514 	add.w	r5, r0, #20
 800462a:	f101 0814 	add.w	r8, r1, #20
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800463a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800463e:	3301      	adds	r3, #1
 8004640:	429a      	cmp	r2, r3
 8004642:	fbb2 f6f3 	udiv	r6, r2, r3
 8004646:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800464a:	d32e      	bcc.n	80046aa <quorem+0x96>
 800464c:	f04f 0a00 	mov.w	sl, #0
 8004650:	46c4      	mov	ip, r8
 8004652:	46ae      	mov	lr, r5
 8004654:	46d3      	mov	fp, sl
 8004656:	f85c 3b04 	ldr.w	r3, [ip], #4
 800465a:	b298      	uxth	r0, r3
 800465c:	fb06 a000 	mla	r0, r6, r0, sl
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	0c02      	lsrs	r2, r0, #16
 8004664:	fb06 2303 	mla	r3, r6, r3, r2
 8004668:	f8de 2000 	ldr.w	r2, [lr]
 800466c:	b280      	uxth	r0, r0
 800466e:	b292      	uxth	r2, r2
 8004670:	1a12      	subs	r2, r2, r0
 8004672:	445a      	add	r2, fp
 8004674:	f8de 0000 	ldr.w	r0, [lr]
 8004678:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800467c:	b29b      	uxth	r3, r3
 800467e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004682:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004686:	b292      	uxth	r2, r2
 8004688:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800468c:	45e1      	cmp	r9, ip
 800468e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004692:	f84e 2b04 	str.w	r2, [lr], #4
 8004696:	d2de      	bcs.n	8004656 <quorem+0x42>
 8004698:	9b00      	ldr	r3, [sp, #0]
 800469a:	58eb      	ldr	r3, [r5, r3]
 800469c:	b92b      	cbnz	r3, 80046aa <quorem+0x96>
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	3b04      	subs	r3, #4
 80046a2:	429d      	cmp	r5, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	d32f      	bcc.n	8004708 <quorem+0xf4>
 80046a8:	613c      	str	r4, [r7, #16]
 80046aa:	4638      	mov	r0, r7
 80046ac:	f001 f9c4 	bl	8005a38 <__mcmp>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	db25      	blt.n	8004700 <quorem+0xec>
 80046b4:	4629      	mov	r1, r5
 80046b6:	2000      	movs	r0, #0
 80046b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80046bc:	f8d1 c000 	ldr.w	ip, [r1]
 80046c0:	fa1f fe82 	uxth.w	lr, r2
 80046c4:	fa1f f38c 	uxth.w	r3, ip
 80046c8:	eba3 030e 	sub.w	r3, r3, lr
 80046cc:	4403      	add	r3, r0
 80046ce:	0c12      	lsrs	r2, r2, #16
 80046d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80046d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80046d8:	b29b      	uxth	r3, r3
 80046da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046de:	45c1      	cmp	r9, r8
 80046e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80046e4:	f841 3b04 	str.w	r3, [r1], #4
 80046e8:	d2e6      	bcs.n	80046b8 <quorem+0xa4>
 80046ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046f2:	b922      	cbnz	r2, 80046fe <quorem+0xea>
 80046f4:	3b04      	subs	r3, #4
 80046f6:	429d      	cmp	r5, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	d30b      	bcc.n	8004714 <quorem+0x100>
 80046fc:	613c      	str	r4, [r7, #16]
 80046fe:	3601      	adds	r6, #1
 8004700:	4630      	mov	r0, r6
 8004702:	b003      	add	sp, #12
 8004704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	3b04      	subs	r3, #4
 800470c:	2a00      	cmp	r2, #0
 800470e:	d1cb      	bne.n	80046a8 <quorem+0x94>
 8004710:	3c01      	subs	r4, #1
 8004712:	e7c6      	b.n	80046a2 <quorem+0x8e>
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	3b04      	subs	r3, #4
 8004718:	2a00      	cmp	r2, #0
 800471a:	d1ef      	bne.n	80046fc <quorem+0xe8>
 800471c:	3c01      	subs	r4, #1
 800471e:	e7ea      	b.n	80046f6 <quorem+0xe2>
 8004720:	2000      	movs	r0, #0
 8004722:	e7ee      	b.n	8004702 <quorem+0xee>
 8004724:	0000      	movs	r0, r0
	...

08004728 <_dtoa_r>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	4614      	mov	r4, r2
 800472e:	461d      	mov	r5, r3
 8004730:	69c7      	ldr	r7, [r0, #28]
 8004732:	b097      	sub	sp, #92	@ 0x5c
 8004734:	4683      	mov	fp, r0
 8004736:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800473a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800473c:	b97f      	cbnz	r7, 800475e <_dtoa_r+0x36>
 800473e:	2010      	movs	r0, #16
 8004740:	f000 fe02 	bl	8005348 <malloc>
 8004744:	4602      	mov	r2, r0
 8004746:	f8cb 001c 	str.w	r0, [fp, #28]
 800474a:	b920      	cbnz	r0, 8004756 <_dtoa_r+0x2e>
 800474c:	21ef      	movs	r1, #239	@ 0xef
 800474e:	4ba8      	ldr	r3, [pc, #672]	@ (80049f0 <_dtoa_r+0x2c8>)
 8004750:	48a8      	ldr	r0, [pc, #672]	@ (80049f4 <_dtoa_r+0x2cc>)
 8004752:	f002 fc23 	bl	8006f9c <__assert_func>
 8004756:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800475a:	6007      	str	r7, [r0, #0]
 800475c:	60c7      	str	r7, [r0, #12]
 800475e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	b159      	cbz	r1, 800477e <_dtoa_r+0x56>
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	2301      	movs	r3, #1
 800476a:	4093      	lsls	r3, r2
 800476c:	604a      	str	r2, [r1, #4]
 800476e:	608b      	str	r3, [r1, #8]
 8004770:	4658      	mov	r0, fp
 8004772:	f000 fedf 	bl	8005534 <_Bfree>
 8004776:	2200      	movs	r2, #0
 8004778:	f8db 301c 	ldr.w	r3, [fp, #28]
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	1e2b      	subs	r3, r5, #0
 8004780:	bfaf      	iteee	ge
 8004782:	2300      	movge	r3, #0
 8004784:	2201      	movlt	r2, #1
 8004786:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800478a:	9303      	strlt	r3, [sp, #12]
 800478c:	bfa8      	it	ge
 800478e:	6033      	strge	r3, [r6, #0]
 8004790:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004794:	4b98      	ldr	r3, [pc, #608]	@ (80049f8 <_dtoa_r+0x2d0>)
 8004796:	bfb8      	it	lt
 8004798:	6032      	strlt	r2, [r6, #0]
 800479a:	ea33 0308 	bics.w	r3, r3, r8
 800479e:	d112      	bne.n	80047c6 <_dtoa_r+0x9e>
 80047a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80047a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80047ac:	4323      	orrs	r3, r4
 80047ae:	f000 8550 	beq.w	8005252 <_dtoa_r+0xb2a>
 80047b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80047b4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80049fc <_dtoa_r+0x2d4>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8552 	beq.w	8005262 <_dtoa_r+0xb3a>
 80047be:	f10a 0303 	add.w	r3, sl, #3
 80047c2:	f000 bd4c 	b.w	800525e <_dtoa_r+0xb36>
 80047c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80047ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047d2:	2200      	movs	r2, #0
 80047d4:	2300      	movs	r3, #0
 80047d6:	f7fc f8e7 	bl	80009a8 <__aeabi_dcmpeq>
 80047da:	4607      	mov	r7, r0
 80047dc:	b158      	cbz	r0, 80047f6 <_dtoa_r+0xce>
 80047de:	2301      	movs	r3, #1
 80047e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80047e6:	b113      	cbz	r3, 80047ee <_dtoa_r+0xc6>
 80047e8:	4b85      	ldr	r3, [pc, #532]	@ (8004a00 <_dtoa_r+0x2d8>)
 80047ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004a04 <_dtoa_r+0x2dc>
 80047f2:	f000 bd36 	b.w	8005262 <_dtoa_r+0xb3a>
 80047f6:	ab14      	add	r3, sp, #80	@ 0x50
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	ab15      	add	r3, sp, #84	@ 0x54
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4658      	mov	r0, fp
 8004800:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004804:	f001 fa30 	bl	8005c68 <__d2b>
 8004808:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800480c:	4681      	mov	r9, r0
 800480e:	2e00      	cmp	r6, #0
 8004810:	d077      	beq.n	8004902 <_dtoa_r+0x1da>
 8004812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004818:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800481c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004820:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004824:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004828:	9712      	str	r7, [sp, #72]	@ 0x48
 800482a:	4619      	mov	r1, r3
 800482c:	2200      	movs	r2, #0
 800482e:	4b76      	ldr	r3, [pc, #472]	@ (8004a08 <_dtoa_r+0x2e0>)
 8004830:	f7fb fc9a 	bl	8000168 <__aeabi_dsub>
 8004834:	a368      	add	r3, pc, #416	@ (adr r3, 80049d8 <_dtoa_r+0x2b0>)
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f7fb fe4d 	bl	80004d8 <__aeabi_dmul>
 800483e:	a368      	add	r3, pc, #416	@ (adr r3, 80049e0 <_dtoa_r+0x2b8>)
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f7fb fc92 	bl	800016c <__adddf3>
 8004848:	4604      	mov	r4, r0
 800484a:	4630      	mov	r0, r6
 800484c:	460d      	mov	r5, r1
 800484e:	f7fb fdd9 	bl	8000404 <__aeabi_i2d>
 8004852:	a365      	add	r3, pc, #404	@ (adr r3, 80049e8 <_dtoa_r+0x2c0>)
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f7fb fe3e 	bl	80004d8 <__aeabi_dmul>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4620      	mov	r0, r4
 8004862:	4629      	mov	r1, r5
 8004864:	f7fb fc82 	bl	800016c <__adddf3>
 8004868:	4604      	mov	r4, r0
 800486a:	460d      	mov	r5, r1
 800486c:	f7fc f8e4 	bl	8000a38 <__aeabi_d2iz>
 8004870:	2200      	movs	r2, #0
 8004872:	4607      	mov	r7, r0
 8004874:	2300      	movs	r3, #0
 8004876:	4620      	mov	r0, r4
 8004878:	4629      	mov	r1, r5
 800487a:	f7fc f89f 	bl	80009bc <__aeabi_dcmplt>
 800487e:	b140      	cbz	r0, 8004892 <_dtoa_r+0x16a>
 8004880:	4638      	mov	r0, r7
 8004882:	f7fb fdbf 	bl	8000404 <__aeabi_i2d>
 8004886:	4622      	mov	r2, r4
 8004888:	462b      	mov	r3, r5
 800488a:	f7fc f88d 	bl	80009a8 <__aeabi_dcmpeq>
 800488e:	b900      	cbnz	r0, 8004892 <_dtoa_r+0x16a>
 8004890:	3f01      	subs	r7, #1
 8004892:	2f16      	cmp	r7, #22
 8004894:	d853      	bhi.n	800493e <_dtoa_r+0x216>
 8004896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800489a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a0c <_dtoa_r+0x2e4>)
 800489c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f7fc f88a 	bl	80009bc <__aeabi_dcmplt>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d04a      	beq.n	8004942 <_dtoa_r+0x21a>
 80048ac:	2300      	movs	r3, #0
 80048ae:	3f01      	subs	r7, #1
 80048b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80048b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048b4:	1b9b      	subs	r3, r3, r6
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	bf46      	itte	mi
 80048ba:	f1c3 0801 	rsbmi	r8, r3, #1
 80048be:	2300      	movmi	r3, #0
 80048c0:	f04f 0800 	movpl.w	r8, #0
 80048c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80048c6:	bf48      	it	mi
 80048c8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80048ca:	2f00      	cmp	r7, #0
 80048cc:	db3b      	blt.n	8004946 <_dtoa_r+0x21e>
 80048ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048d0:	970e      	str	r7, [sp, #56]	@ 0x38
 80048d2:	443b      	add	r3, r7
 80048d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048d6:	2300      	movs	r3, #0
 80048d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80048da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d866      	bhi.n	80049ae <_dtoa_r+0x286>
 80048e0:	2b05      	cmp	r3, #5
 80048e2:	bfc4      	itt	gt
 80048e4:	3b04      	subgt	r3, #4
 80048e6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80048e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048ea:	bfc8      	it	gt
 80048ec:	2400      	movgt	r4, #0
 80048ee:	f1a3 0302 	sub.w	r3, r3, #2
 80048f2:	bfd8      	it	le
 80048f4:	2401      	movle	r4, #1
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d864      	bhi.n	80049c4 <_dtoa_r+0x29c>
 80048fa:	e8df f003 	tbb	[pc, r3]
 80048fe:	382b      	.short	0x382b
 8004900:	5636      	.short	0x5636
 8004902:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004906:	441e      	add	r6, r3
 8004908:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800490c:	2b20      	cmp	r3, #32
 800490e:	bfc1      	itttt	gt
 8004910:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004914:	fa08 f803 	lslgt.w	r8, r8, r3
 8004918:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800491c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004920:	bfd6      	itet	le
 8004922:	f1c3 0320 	rsble	r3, r3, #32
 8004926:	ea48 0003 	orrgt.w	r0, r8, r3
 800492a:	fa04 f003 	lslle.w	r0, r4, r3
 800492e:	f7fb fd59 	bl	80003e4 <__aeabi_ui2d>
 8004932:	2201      	movs	r2, #1
 8004934:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004938:	3e01      	subs	r6, #1
 800493a:	9212      	str	r2, [sp, #72]	@ 0x48
 800493c:	e775      	b.n	800482a <_dtoa_r+0x102>
 800493e:	2301      	movs	r3, #1
 8004940:	e7b6      	b.n	80048b0 <_dtoa_r+0x188>
 8004942:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004944:	e7b5      	b.n	80048b2 <_dtoa_r+0x18a>
 8004946:	427b      	negs	r3, r7
 8004948:	930a      	str	r3, [sp, #40]	@ 0x28
 800494a:	2300      	movs	r3, #0
 800494c:	eba8 0807 	sub.w	r8, r8, r7
 8004950:	930e      	str	r3, [sp, #56]	@ 0x38
 8004952:	e7c2      	b.n	80048da <_dtoa_r+0x1b2>
 8004954:	2300      	movs	r3, #0
 8004956:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004958:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800495a:	2b00      	cmp	r3, #0
 800495c:	dc35      	bgt.n	80049ca <_dtoa_r+0x2a2>
 800495e:	2301      	movs	r3, #1
 8004960:	461a      	mov	r2, r3
 8004962:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004966:	9221      	str	r2, [sp, #132]	@ 0x84
 8004968:	e00b      	b.n	8004982 <_dtoa_r+0x25a>
 800496a:	2301      	movs	r3, #1
 800496c:	e7f3      	b.n	8004956 <_dtoa_r+0x22e>
 800496e:	2300      	movs	r3, #0
 8004970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004972:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	9308      	str	r3, [sp, #32]
 8004978:	3301      	adds	r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	9307      	str	r3, [sp, #28]
 800497e:	bfb8      	it	lt
 8004980:	2301      	movlt	r3, #1
 8004982:	2100      	movs	r1, #0
 8004984:	2204      	movs	r2, #4
 8004986:	f8db 001c 	ldr.w	r0, [fp, #28]
 800498a:	f102 0514 	add.w	r5, r2, #20
 800498e:	429d      	cmp	r5, r3
 8004990:	d91f      	bls.n	80049d2 <_dtoa_r+0x2aa>
 8004992:	6041      	str	r1, [r0, #4]
 8004994:	4658      	mov	r0, fp
 8004996:	f000 fd8d 	bl	80054b4 <_Balloc>
 800499a:	4682      	mov	sl, r0
 800499c:	2800      	cmp	r0, #0
 800499e:	d139      	bne.n	8004a14 <_dtoa_r+0x2ec>
 80049a0:	4602      	mov	r2, r0
 80049a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80049a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a10 <_dtoa_r+0x2e8>)
 80049a8:	e6d2      	b.n	8004750 <_dtoa_r+0x28>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e7e0      	b.n	8004970 <_dtoa_r+0x248>
 80049ae:	2401      	movs	r4, #1
 80049b0:	2300      	movs	r3, #0
 80049b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80049b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	2200      	movs	r2, #0
 80049bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80049c0:	2312      	movs	r3, #18
 80049c2:	e7d0      	b.n	8004966 <_dtoa_r+0x23e>
 80049c4:	2301      	movs	r3, #1
 80049c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049c8:	e7f5      	b.n	80049b6 <_dtoa_r+0x28e>
 80049ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80049d0:	e7d7      	b.n	8004982 <_dtoa_r+0x25a>
 80049d2:	3101      	adds	r1, #1
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	e7d8      	b.n	800498a <_dtoa_r+0x262>
 80049d8:	636f4361 	.word	0x636f4361
 80049dc:	3fd287a7 	.word	0x3fd287a7
 80049e0:	8b60c8b3 	.word	0x8b60c8b3
 80049e4:	3fc68a28 	.word	0x3fc68a28
 80049e8:	509f79fb 	.word	0x509f79fb
 80049ec:	3fd34413 	.word	0x3fd34413
 80049f0:	08007d4c 	.word	0x08007d4c
 80049f4:	08007d63 	.word	0x08007d63
 80049f8:	7ff00000 	.word	0x7ff00000
 80049fc:	08007d48 	.word	0x08007d48
 8004a00:	08007d17 	.word	0x08007d17
 8004a04:	08007d16 	.word	0x08007d16
 8004a08:	3ff80000 	.word	0x3ff80000
 8004a0c:	08007e60 	.word	0x08007e60
 8004a10:	08007dbb 	.word	0x08007dbb
 8004a14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004a18:	6018      	str	r0, [r3, #0]
 8004a1a:	9b07      	ldr	r3, [sp, #28]
 8004a1c:	2b0e      	cmp	r3, #14
 8004a1e:	f200 80a4 	bhi.w	8004b6a <_dtoa_r+0x442>
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	f000 80a1 	beq.w	8004b6a <_dtoa_r+0x442>
 8004a28:	2f00      	cmp	r7, #0
 8004a2a:	dd33      	ble.n	8004a94 <_dtoa_r+0x36c>
 8004a2c:	4b86      	ldr	r3, [pc, #536]	@ (8004c48 <_dtoa_r+0x520>)
 8004a2e:	f007 020f 	and.w	r2, r7, #15
 8004a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a36:	05f8      	lsls	r0, r7, #23
 8004a38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004a44:	d516      	bpl.n	8004a74 <_dtoa_r+0x34c>
 8004a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a4a:	4b80      	ldr	r3, [pc, #512]	@ (8004c4c <_dtoa_r+0x524>)
 8004a4c:	2603      	movs	r6, #3
 8004a4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a52:	f7fb fe6b 	bl	800072c <__aeabi_ddiv>
 8004a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a5a:	f004 040f 	and.w	r4, r4, #15
 8004a5e:	4d7b      	ldr	r5, [pc, #492]	@ (8004c4c <_dtoa_r+0x524>)
 8004a60:	b954      	cbnz	r4, 8004a78 <_dtoa_r+0x350>
 8004a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a6a:	f7fb fe5f 	bl	800072c <__aeabi_ddiv>
 8004a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a72:	e028      	b.n	8004ac6 <_dtoa_r+0x39e>
 8004a74:	2602      	movs	r6, #2
 8004a76:	e7f2      	b.n	8004a5e <_dtoa_r+0x336>
 8004a78:	07e1      	lsls	r1, r4, #31
 8004a7a:	d508      	bpl.n	8004a8e <_dtoa_r+0x366>
 8004a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a84:	f7fb fd28 	bl	80004d8 <__aeabi_dmul>
 8004a88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	1064      	asrs	r4, r4, #1
 8004a90:	3508      	adds	r5, #8
 8004a92:	e7e5      	b.n	8004a60 <_dtoa_r+0x338>
 8004a94:	f000 80d2 	beq.w	8004c3c <_dtoa_r+0x514>
 8004a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a9c:	427c      	negs	r4, r7
 8004a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c48 <_dtoa_r+0x520>)
 8004aa0:	f004 020f 	and.w	r2, r4, #15
 8004aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f7fb fd14 	bl	80004d8 <__aeabi_dmul>
 8004ab0:	2602      	movs	r6, #2
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ab8:	4d64      	ldr	r5, [pc, #400]	@ (8004c4c <_dtoa_r+0x524>)
 8004aba:	1124      	asrs	r4, r4, #4
 8004abc:	2c00      	cmp	r4, #0
 8004abe:	f040 80b2 	bne.w	8004c26 <_dtoa_r+0x4fe>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1d3      	bne.n	8004a6e <_dtoa_r+0x346>
 8004ac6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80b7 	beq.w	8004c40 <_dtoa_r+0x518>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4b5d      	ldr	r3, [pc, #372]	@ (8004c50 <_dtoa_r+0x528>)
 8004ada:	f7fb ff6f 	bl	80009bc <__aeabi_dcmplt>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f000 80ae 	beq.w	8004c40 <_dtoa_r+0x518>
 8004ae4:	9b07      	ldr	r3, [sp, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 80aa 	beq.w	8004c40 <_dtoa_r+0x518>
 8004aec:	9b08      	ldr	r3, [sp, #32]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	dd37      	ble.n	8004b62 <_dtoa_r+0x43a>
 8004af2:	1e7b      	subs	r3, r7, #1
 8004af4:	4620      	mov	r0, r4
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	2200      	movs	r2, #0
 8004afa:	4629      	mov	r1, r5
 8004afc:	4b55      	ldr	r3, [pc, #340]	@ (8004c54 <_dtoa_r+0x52c>)
 8004afe:	f7fb fceb 	bl	80004d8 <__aeabi_dmul>
 8004b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b06:	9c08      	ldr	r4, [sp, #32]
 8004b08:	3601      	adds	r6, #1
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f7fb fc7a 	bl	8000404 <__aeabi_i2d>
 8004b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b14:	f7fb fce0 	bl	80004d8 <__aeabi_dmul>
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c58 <_dtoa_r+0x530>)
 8004b1c:	f7fb fb26 	bl	800016c <__adddf3>
 8004b20:	4605      	mov	r5, r0
 8004b22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b26:	2c00      	cmp	r4, #0
 8004b28:	f040 809a 	bne.w	8004c60 <_dtoa_r+0x538>
 8004b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b30:	2200      	movs	r2, #0
 8004b32:	4b4a      	ldr	r3, [pc, #296]	@ (8004c5c <_dtoa_r+0x534>)
 8004b34:	f7fb fb18 	bl	8000168 <__aeabi_dsub>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b40:	462a      	mov	r2, r5
 8004b42:	4633      	mov	r3, r6
 8004b44:	f7fb ff58 	bl	80009f8 <__aeabi_dcmpgt>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f040 828e 	bne.w	800506a <_dtoa_r+0x942>
 8004b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b52:	462a      	mov	r2, r5
 8004b54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b58:	f7fb ff30 	bl	80009bc <__aeabi_dcmplt>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	f040 8127 	bne.w	8004db0 <_dtoa_r+0x688>
 8004b62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004b66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004b6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f2c0 8163 	blt.w	8004e38 <_dtoa_r+0x710>
 8004b72:	2f0e      	cmp	r7, #14
 8004b74:	f300 8160 	bgt.w	8004e38 <_dtoa_r+0x710>
 8004b78:	4b33      	ldr	r3, [pc, #204]	@ (8004c48 <_dtoa_r+0x520>)
 8004b7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b82:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	da03      	bge.n	8004b94 <_dtoa_r+0x46c>
 8004b8c:	9b07      	ldr	r3, [sp, #28]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f340 8100 	ble.w	8004d94 <_dtoa_r+0x66c>
 8004b94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b98:	4656      	mov	r6, sl
 8004b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	f7fb fdc3 	bl	800072c <__aeabi_ddiv>
 8004ba6:	f7fb ff47 	bl	8000a38 <__aeabi_d2iz>
 8004baa:	4680      	mov	r8, r0
 8004bac:	f7fb fc2a 	bl	8000404 <__aeabi_i2d>
 8004bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bb4:	f7fb fc90 	bl	80004d8 <__aeabi_dmul>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fb fad2 	bl	8000168 <__aeabi_dsub>
 8004bc4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004bc8:	9d07      	ldr	r5, [sp, #28]
 8004bca:	f806 4b01 	strb.w	r4, [r6], #1
 8004bce:	eba6 040a 	sub.w	r4, r6, sl
 8004bd2:	42a5      	cmp	r5, r4
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	f040 8116 	bne.w	8004e08 <_dtoa_r+0x6e0>
 8004bdc:	f7fb fac6 	bl	800016c <__adddf3>
 8004be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004be4:	4604      	mov	r4, r0
 8004be6:	460d      	mov	r5, r1
 8004be8:	f7fb ff06 	bl	80009f8 <__aeabi_dcmpgt>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	f040 80f8 	bne.w	8004de2 <_dtoa_r+0x6ba>
 8004bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7fb fed5 	bl	80009a8 <__aeabi_dcmpeq>
 8004bfe:	b118      	cbz	r0, 8004c08 <_dtoa_r+0x4e0>
 8004c00:	f018 0f01 	tst.w	r8, #1
 8004c04:	f040 80ed 	bne.w	8004de2 <_dtoa_r+0x6ba>
 8004c08:	4649      	mov	r1, r9
 8004c0a:	4658      	mov	r0, fp
 8004c0c:	f000 fc92 	bl	8005534 <_Bfree>
 8004c10:	2300      	movs	r3, #0
 8004c12:	7033      	strb	r3, [r6, #0]
 8004c14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004c16:	3701      	adds	r7, #1
 8004c18:	601f      	str	r7, [r3, #0]
 8004c1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8320 	beq.w	8005262 <_dtoa_r+0xb3a>
 8004c22:	601e      	str	r6, [r3, #0]
 8004c24:	e31d      	b.n	8005262 <_dtoa_r+0xb3a>
 8004c26:	07e2      	lsls	r2, r4, #31
 8004c28:	d505      	bpl.n	8004c36 <_dtoa_r+0x50e>
 8004c2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c2e:	f7fb fc53 	bl	80004d8 <__aeabi_dmul>
 8004c32:	2301      	movs	r3, #1
 8004c34:	3601      	adds	r6, #1
 8004c36:	1064      	asrs	r4, r4, #1
 8004c38:	3508      	adds	r5, #8
 8004c3a:	e73f      	b.n	8004abc <_dtoa_r+0x394>
 8004c3c:	2602      	movs	r6, #2
 8004c3e:	e742      	b.n	8004ac6 <_dtoa_r+0x39e>
 8004c40:	9c07      	ldr	r4, [sp, #28]
 8004c42:	9704      	str	r7, [sp, #16]
 8004c44:	e761      	b.n	8004b0a <_dtoa_r+0x3e2>
 8004c46:	bf00      	nop
 8004c48:	08007e60 	.word	0x08007e60
 8004c4c:	08007e38 	.word	0x08007e38
 8004c50:	3ff00000 	.word	0x3ff00000
 8004c54:	40240000 	.word	0x40240000
 8004c58:	401c0000 	.word	0x401c0000
 8004c5c:	40140000 	.word	0x40140000
 8004c60:	4b70      	ldr	r3, [pc, #448]	@ (8004e24 <_dtoa_r+0x6fc>)
 8004c62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c6c:	4454      	add	r4, sl
 8004c6e:	2900      	cmp	r1, #0
 8004c70:	d045      	beq.n	8004cfe <_dtoa_r+0x5d6>
 8004c72:	2000      	movs	r0, #0
 8004c74:	496c      	ldr	r1, [pc, #432]	@ (8004e28 <_dtoa_r+0x700>)
 8004c76:	f7fb fd59 	bl	800072c <__aeabi_ddiv>
 8004c7a:	4633      	mov	r3, r6
 8004c7c:	462a      	mov	r2, r5
 8004c7e:	f7fb fa73 	bl	8000168 <__aeabi_dsub>
 8004c82:	4656      	mov	r6, sl
 8004c84:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c8c:	f7fb fed4 	bl	8000a38 <__aeabi_d2iz>
 8004c90:	4605      	mov	r5, r0
 8004c92:	f7fb fbb7 	bl	8000404 <__aeabi_i2d>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c9e:	f7fb fa63 	bl	8000168 <__aeabi_dsub>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	3530      	adds	r5, #48	@ 0x30
 8004ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cb0:	f806 5b01 	strb.w	r5, [r6], #1
 8004cb4:	f7fb fe82 	bl	80009bc <__aeabi_dcmplt>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d163      	bne.n	8004d84 <_dtoa_r+0x65c>
 8004cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	495a      	ldr	r1, [pc, #360]	@ (8004e2c <_dtoa_r+0x704>)
 8004cc4:	f7fb fa50 	bl	8000168 <__aeabi_dsub>
 8004cc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ccc:	f7fb fe76 	bl	80009bc <__aeabi_dcmplt>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	f040 8087 	bne.w	8004de4 <_dtoa_r+0x6bc>
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	f43f af43 	beq.w	8004b62 <_dtoa_r+0x43a>
 8004cdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4b53      	ldr	r3, [pc, #332]	@ (8004e30 <_dtoa_r+0x708>)
 8004ce4:	f7fb fbf8 	bl	80004d8 <__aeabi_dmul>
 8004ce8:	2200      	movs	r2, #0
 8004cea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e30 <_dtoa_r+0x708>)
 8004cf4:	f7fb fbf0 	bl	80004d8 <__aeabi_dmul>
 8004cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cfc:	e7c4      	b.n	8004c88 <_dtoa_r+0x560>
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	f7fb fbe9 	bl	80004d8 <__aeabi_dmul>
 8004d06:	4656      	mov	r6, sl
 8004d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d0c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d12:	f7fb fe91 	bl	8000a38 <__aeabi_d2iz>
 8004d16:	4605      	mov	r5, r0
 8004d18:	f7fb fb74 	bl	8000404 <__aeabi_i2d>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d24:	f7fb fa20 	bl	8000168 <__aeabi_dsub>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	3530      	adds	r5, #48	@ 0x30
 8004d2e:	f806 5b01 	strb.w	r5, [r6], #1
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	d124      	bne.n	8004d88 <_dtoa_r+0x660>
 8004d3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d42:	4b39      	ldr	r3, [pc, #228]	@ (8004e28 <_dtoa_r+0x700>)
 8004d44:	f7fb fa12 	bl	800016c <__adddf3>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d50:	f7fb fe52 	bl	80009f8 <__aeabi_dcmpgt>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d145      	bne.n	8004de4 <_dtoa_r+0x6bc>
 8004d58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	4932      	ldr	r1, [pc, #200]	@ (8004e28 <_dtoa_r+0x700>)
 8004d60:	f7fb fa02 	bl	8000168 <__aeabi_dsub>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d6c:	f7fb fe26 	bl	80009bc <__aeabi_dcmplt>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	f43f aef6 	beq.w	8004b62 <_dtoa_r+0x43a>
 8004d76:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004d78:	1e73      	subs	r3, r6, #1
 8004d7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004d80:	2b30      	cmp	r3, #48	@ 0x30
 8004d82:	d0f8      	beq.n	8004d76 <_dtoa_r+0x64e>
 8004d84:	9f04      	ldr	r7, [sp, #16]
 8004d86:	e73f      	b.n	8004c08 <_dtoa_r+0x4e0>
 8004d88:	4b29      	ldr	r3, [pc, #164]	@ (8004e30 <_dtoa_r+0x708>)
 8004d8a:	f7fb fba5 	bl	80004d8 <__aeabi_dmul>
 8004d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d92:	e7bc      	b.n	8004d0e <_dtoa_r+0x5e6>
 8004d94:	d10c      	bne.n	8004db0 <_dtoa_r+0x688>
 8004d96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4b25      	ldr	r3, [pc, #148]	@ (8004e34 <_dtoa_r+0x70c>)
 8004d9e:	f7fb fb9b 	bl	80004d8 <__aeabi_dmul>
 8004da2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004da6:	f7fb fe1d 	bl	80009e4 <__aeabi_dcmpge>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f000 815b 	beq.w	8005066 <_dtoa_r+0x93e>
 8004db0:	2400      	movs	r4, #0
 8004db2:	4625      	mov	r5, r4
 8004db4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004db6:	4656      	mov	r6, sl
 8004db8:	43db      	mvns	r3, r3
 8004dba:	9304      	str	r3, [sp, #16]
 8004dbc:	2700      	movs	r7, #0
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4658      	mov	r0, fp
 8004dc2:	f000 fbb7 	bl	8005534 <_Bfree>
 8004dc6:	2d00      	cmp	r5, #0
 8004dc8:	d0dc      	beq.n	8004d84 <_dtoa_r+0x65c>
 8004dca:	b12f      	cbz	r7, 8004dd8 <_dtoa_r+0x6b0>
 8004dcc:	42af      	cmp	r7, r5
 8004dce:	d003      	beq.n	8004dd8 <_dtoa_r+0x6b0>
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	4658      	mov	r0, fp
 8004dd4:	f000 fbae 	bl	8005534 <_Bfree>
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4658      	mov	r0, fp
 8004ddc:	f000 fbaa 	bl	8005534 <_Bfree>
 8004de0:	e7d0      	b.n	8004d84 <_dtoa_r+0x65c>
 8004de2:	9704      	str	r7, [sp, #16]
 8004de4:	4633      	mov	r3, r6
 8004de6:	461e      	mov	r6, r3
 8004de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dec:	2a39      	cmp	r2, #57	@ 0x39
 8004dee:	d107      	bne.n	8004e00 <_dtoa_r+0x6d8>
 8004df0:	459a      	cmp	sl, r3
 8004df2:	d1f8      	bne.n	8004de6 <_dtoa_r+0x6be>
 8004df4:	9a04      	ldr	r2, [sp, #16]
 8004df6:	3201      	adds	r2, #1
 8004df8:	9204      	str	r2, [sp, #16]
 8004dfa:	2230      	movs	r2, #48	@ 0x30
 8004dfc:	f88a 2000 	strb.w	r2, [sl]
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	3201      	adds	r2, #1
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e7bd      	b.n	8004d84 <_dtoa_r+0x65c>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <_dtoa_r+0x708>)
 8004e0c:	f7fb fb64 	bl	80004d8 <__aeabi_dmul>
 8004e10:	2200      	movs	r2, #0
 8004e12:	2300      	movs	r3, #0
 8004e14:	4604      	mov	r4, r0
 8004e16:	460d      	mov	r5, r1
 8004e18:	f7fb fdc6 	bl	80009a8 <__aeabi_dcmpeq>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f43f aebc 	beq.w	8004b9a <_dtoa_r+0x472>
 8004e22:	e6f1      	b.n	8004c08 <_dtoa_r+0x4e0>
 8004e24:	08007e60 	.word	0x08007e60
 8004e28:	3fe00000 	.word	0x3fe00000
 8004e2c:	3ff00000 	.word	0x3ff00000
 8004e30:	40240000 	.word	0x40240000
 8004e34:	40140000 	.word	0x40140000
 8004e38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004e3a:	2a00      	cmp	r2, #0
 8004e3c:	f000 80db 	beq.w	8004ff6 <_dtoa_r+0x8ce>
 8004e40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e42:	2a01      	cmp	r2, #1
 8004e44:	f300 80bf 	bgt.w	8004fc6 <_dtoa_r+0x89e>
 8004e48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e4a:	2a00      	cmp	r2, #0
 8004e4c:	f000 80b7 	beq.w	8004fbe <_dtoa_r+0x896>
 8004e50:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004e54:	4646      	mov	r6, r8
 8004e56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	441a      	add	r2, r3
 8004e5e:	4658      	mov	r0, fp
 8004e60:	4498      	add	r8, r3
 8004e62:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e64:	f000 fc64 	bl	8005730 <__i2b>
 8004e68:	4605      	mov	r5, r0
 8004e6a:	b15e      	cbz	r6, 8004e84 <_dtoa_r+0x75c>
 8004e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dd08      	ble.n	8004e84 <_dtoa_r+0x75c>
 8004e72:	42b3      	cmp	r3, r6
 8004e74:	bfa8      	it	ge
 8004e76:	4633      	movge	r3, r6
 8004e78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e7a:	eba8 0803 	sub.w	r8, r8, r3
 8004e7e:	1af6      	subs	r6, r6, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e86:	b1f3      	cbz	r3, 8004ec6 <_dtoa_r+0x79e>
 8004e88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80b7 	beq.w	8004ffe <_dtoa_r+0x8d6>
 8004e90:	b18c      	cbz	r4, 8004eb6 <_dtoa_r+0x78e>
 8004e92:	4629      	mov	r1, r5
 8004e94:	4622      	mov	r2, r4
 8004e96:	4658      	mov	r0, fp
 8004e98:	f000 fd08 	bl	80058ac <__pow5mult>
 8004e9c:	464a      	mov	r2, r9
 8004e9e:	4601      	mov	r1, r0
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	4658      	mov	r0, fp
 8004ea4:	f000 fc5a 	bl	800575c <__multiply>
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	9004      	str	r0, [sp, #16]
 8004eac:	4658      	mov	r0, fp
 8004eae:	f000 fb41 	bl	8005534 <_Bfree>
 8004eb2:	9b04      	ldr	r3, [sp, #16]
 8004eb4:	4699      	mov	r9, r3
 8004eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eb8:	1b1a      	subs	r2, r3, r4
 8004eba:	d004      	beq.n	8004ec6 <_dtoa_r+0x79e>
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	4658      	mov	r0, fp
 8004ec0:	f000 fcf4 	bl	80058ac <__pow5mult>
 8004ec4:	4681      	mov	r9, r0
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4658      	mov	r0, fp
 8004eca:	f000 fc31 	bl	8005730 <__i2b>
 8004ece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 81c9 	beq.w	800526a <_dtoa_r+0xb42>
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4601      	mov	r1, r0
 8004edc:	4658      	mov	r0, fp
 8004ede:	f000 fce5 	bl	80058ac <__pow5mult>
 8004ee2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	f300 808f 	bgt.w	800500a <_dtoa_r+0x8e2>
 8004eec:	9b02      	ldr	r3, [sp, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 8087 	bne.w	8005002 <_dtoa_r+0x8da>
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f040 8083 	bne.w	8005006 <_dtoa_r+0x8de>
 8004f00:	9b03      	ldr	r3, [sp, #12]
 8004f02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f06:	0d1b      	lsrs	r3, r3, #20
 8004f08:	051b      	lsls	r3, r3, #20
 8004f0a:	b12b      	cbz	r3, 8004f18 <_dtoa_r+0x7f0>
 8004f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f0e:	f108 0801 	add.w	r8, r8, #1
 8004f12:	3301      	adds	r3, #1
 8004f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f16:	2301      	movs	r3, #1
 8004f18:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 81aa 	beq.w	8005276 <_dtoa_r+0xb4e>
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f28:	6918      	ldr	r0, [r3, #16]
 8004f2a:	f000 fbb5 	bl	8005698 <__hi0bits>
 8004f2e:	f1c0 0020 	rsb	r0, r0, #32
 8004f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f34:	4418      	add	r0, r3
 8004f36:	f010 001f 	ands.w	r0, r0, #31
 8004f3a:	d071      	beq.n	8005020 <_dtoa_r+0x8f8>
 8004f3c:	f1c0 0320 	rsb	r3, r0, #32
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	dd65      	ble.n	8005010 <_dtoa_r+0x8e8>
 8004f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f46:	f1c0 001c 	rsb	r0, r0, #28
 8004f4a:	4403      	add	r3, r0
 8004f4c:	4480      	add	r8, r0
 8004f4e:	4406      	add	r6, r0
 8004f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f52:	f1b8 0f00 	cmp.w	r8, #0
 8004f56:	dd05      	ble.n	8004f64 <_dtoa_r+0x83c>
 8004f58:	4649      	mov	r1, r9
 8004f5a:	4642      	mov	r2, r8
 8004f5c:	4658      	mov	r0, fp
 8004f5e:	f000 fcff 	bl	8005960 <__lshift>
 8004f62:	4681      	mov	r9, r0
 8004f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	dd05      	ble.n	8004f76 <_dtoa_r+0x84e>
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4658      	mov	r0, fp
 8004f70:	f000 fcf6 	bl	8005960 <__lshift>
 8004f74:	4604      	mov	r4, r0
 8004f76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d053      	beq.n	8005024 <_dtoa_r+0x8fc>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4648      	mov	r0, r9
 8004f80:	f000 fd5a 	bl	8005a38 <__mcmp>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	da4d      	bge.n	8005024 <_dtoa_r+0x8fc>
 8004f88:	1e7b      	subs	r3, r7, #1
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	9304      	str	r3, [sp, #16]
 8004f8e:	220a      	movs	r2, #10
 8004f90:	2300      	movs	r3, #0
 8004f92:	4658      	mov	r0, fp
 8004f94:	f000 faf0 	bl	8005578 <__multadd>
 8004f98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f9a:	4681      	mov	r9, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 816c 	beq.w	800527a <_dtoa_r+0xb52>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	220a      	movs	r2, #10
 8004fa8:	4658      	mov	r0, fp
 8004faa:	f000 fae5 	bl	8005578 <__multadd>
 8004fae:	9b08      	ldr	r3, [sp, #32]
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	dc61      	bgt.n	800507a <_dtoa_r+0x952>
 8004fb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	dc3b      	bgt.n	8005034 <_dtoa_r+0x90c>
 8004fbc:	e05d      	b.n	800507a <_dtoa_r+0x952>
 8004fbe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fc0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004fc4:	e746      	b.n	8004e54 <_dtoa_r+0x72c>
 8004fc6:	9b07      	ldr	r3, [sp, #28]
 8004fc8:	1e5c      	subs	r4, r3, #1
 8004fca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	bfbf      	itttt	lt
 8004fd0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004fd2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004fd4:	1ae3      	sublt	r3, r4, r3
 8004fd6:	18d2      	addlt	r2, r2, r3
 8004fd8:	bfa8      	it	ge
 8004fda:	1b1c      	subge	r4, r3, r4
 8004fdc:	9b07      	ldr	r3, [sp, #28]
 8004fde:	bfbe      	ittt	lt
 8004fe0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004fe2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004fe4:	2400      	movlt	r4, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfb5      	itete	lt
 8004fea:	eba8 0603 	sublt.w	r6, r8, r3
 8004fee:	4646      	movge	r6, r8
 8004ff0:	2300      	movlt	r3, #0
 8004ff2:	9b07      	ldrge	r3, [sp, #28]
 8004ff4:	e730      	b.n	8004e58 <_dtoa_r+0x730>
 8004ff6:	4646      	mov	r6, r8
 8004ff8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ffa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ffc:	e735      	b.n	8004e6a <_dtoa_r+0x742>
 8004ffe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005000:	e75c      	b.n	8004ebc <_dtoa_r+0x794>
 8005002:	2300      	movs	r3, #0
 8005004:	e788      	b.n	8004f18 <_dtoa_r+0x7f0>
 8005006:	9b02      	ldr	r3, [sp, #8]
 8005008:	e786      	b.n	8004f18 <_dtoa_r+0x7f0>
 800500a:	2300      	movs	r3, #0
 800500c:	930a      	str	r3, [sp, #40]	@ 0x28
 800500e:	e788      	b.n	8004f22 <_dtoa_r+0x7fa>
 8005010:	d09f      	beq.n	8004f52 <_dtoa_r+0x82a>
 8005012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005014:	331c      	adds	r3, #28
 8005016:	441a      	add	r2, r3
 8005018:	4498      	add	r8, r3
 800501a:	441e      	add	r6, r3
 800501c:	9209      	str	r2, [sp, #36]	@ 0x24
 800501e:	e798      	b.n	8004f52 <_dtoa_r+0x82a>
 8005020:	4603      	mov	r3, r0
 8005022:	e7f6      	b.n	8005012 <_dtoa_r+0x8ea>
 8005024:	9b07      	ldr	r3, [sp, #28]
 8005026:	9704      	str	r7, [sp, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	dc20      	bgt.n	800506e <_dtoa_r+0x946>
 800502c:	9308      	str	r3, [sp, #32]
 800502e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005030:	2b02      	cmp	r3, #2
 8005032:	dd1e      	ble.n	8005072 <_dtoa_r+0x94a>
 8005034:	9b08      	ldr	r3, [sp, #32]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f47f aebc 	bne.w	8004db4 <_dtoa_r+0x68c>
 800503c:	4621      	mov	r1, r4
 800503e:	2205      	movs	r2, #5
 8005040:	4658      	mov	r0, fp
 8005042:	f000 fa99 	bl	8005578 <__multadd>
 8005046:	4601      	mov	r1, r0
 8005048:	4604      	mov	r4, r0
 800504a:	4648      	mov	r0, r9
 800504c:	f000 fcf4 	bl	8005a38 <__mcmp>
 8005050:	2800      	cmp	r0, #0
 8005052:	f77f aeaf 	ble.w	8004db4 <_dtoa_r+0x68c>
 8005056:	2331      	movs	r3, #49	@ 0x31
 8005058:	4656      	mov	r6, sl
 800505a:	f806 3b01 	strb.w	r3, [r6], #1
 800505e:	9b04      	ldr	r3, [sp, #16]
 8005060:	3301      	adds	r3, #1
 8005062:	9304      	str	r3, [sp, #16]
 8005064:	e6aa      	b.n	8004dbc <_dtoa_r+0x694>
 8005066:	9c07      	ldr	r4, [sp, #28]
 8005068:	9704      	str	r7, [sp, #16]
 800506a:	4625      	mov	r5, r4
 800506c:	e7f3      	b.n	8005056 <_dtoa_r+0x92e>
 800506e:	9b07      	ldr	r3, [sp, #28]
 8005070:	9308      	str	r3, [sp, #32]
 8005072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8104 	beq.w	8005282 <_dtoa_r+0xb5a>
 800507a:	2e00      	cmp	r6, #0
 800507c:	dd05      	ble.n	800508a <_dtoa_r+0x962>
 800507e:	4629      	mov	r1, r5
 8005080:	4632      	mov	r2, r6
 8005082:	4658      	mov	r0, fp
 8005084:	f000 fc6c 	bl	8005960 <__lshift>
 8005088:	4605      	mov	r5, r0
 800508a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	d05a      	beq.n	8005146 <_dtoa_r+0xa1e>
 8005090:	4658      	mov	r0, fp
 8005092:	6869      	ldr	r1, [r5, #4]
 8005094:	f000 fa0e 	bl	80054b4 <_Balloc>
 8005098:	4606      	mov	r6, r0
 800509a:	b928      	cbnz	r0, 80050a8 <_dtoa_r+0x980>
 800509c:	4602      	mov	r2, r0
 800509e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80050a2:	4b83      	ldr	r3, [pc, #524]	@ (80052b0 <_dtoa_r+0xb88>)
 80050a4:	f7ff bb54 	b.w	8004750 <_dtoa_r+0x28>
 80050a8:	692a      	ldr	r2, [r5, #16]
 80050aa:	f105 010c 	add.w	r1, r5, #12
 80050ae:	3202      	adds	r2, #2
 80050b0:	0092      	lsls	r2, r2, #2
 80050b2:	300c      	adds	r0, #12
 80050b4:	f001 ff5e 	bl	8006f74 <memcpy>
 80050b8:	2201      	movs	r2, #1
 80050ba:	4631      	mov	r1, r6
 80050bc:	4658      	mov	r0, fp
 80050be:	f000 fc4f 	bl	8005960 <__lshift>
 80050c2:	462f      	mov	r7, r5
 80050c4:	4605      	mov	r5, r0
 80050c6:	f10a 0301 	add.w	r3, sl, #1
 80050ca:	9307      	str	r3, [sp, #28]
 80050cc:	9b08      	ldr	r3, [sp, #32]
 80050ce:	4453      	add	r3, sl
 80050d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050d2:	9b02      	ldr	r3, [sp, #8]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80050da:	9b07      	ldr	r3, [sp, #28]
 80050dc:	4621      	mov	r1, r4
 80050de:	3b01      	subs	r3, #1
 80050e0:	4648      	mov	r0, r9
 80050e2:	9302      	str	r3, [sp, #8]
 80050e4:	f7ff fa96 	bl	8004614 <quorem>
 80050e8:	4639      	mov	r1, r7
 80050ea:	9008      	str	r0, [sp, #32]
 80050ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80050f0:	4648      	mov	r0, r9
 80050f2:	f000 fca1 	bl	8005a38 <__mcmp>
 80050f6:	462a      	mov	r2, r5
 80050f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80050fa:	4621      	mov	r1, r4
 80050fc:	4658      	mov	r0, fp
 80050fe:	f000 fcb7 	bl	8005a70 <__mdiff>
 8005102:	68c2      	ldr	r2, [r0, #12]
 8005104:	4606      	mov	r6, r0
 8005106:	bb02      	cbnz	r2, 800514a <_dtoa_r+0xa22>
 8005108:	4601      	mov	r1, r0
 800510a:	4648      	mov	r0, r9
 800510c:	f000 fc94 	bl	8005a38 <__mcmp>
 8005110:	4602      	mov	r2, r0
 8005112:	4631      	mov	r1, r6
 8005114:	4658      	mov	r0, fp
 8005116:	920c      	str	r2, [sp, #48]	@ 0x30
 8005118:	f000 fa0c 	bl	8005534 <_Bfree>
 800511c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800511e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005120:	9e07      	ldr	r6, [sp, #28]
 8005122:	ea43 0102 	orr.w	r1, r3, r2
 8005126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005128:	4319      	orrs	r1, r3
 800512a:	d110      	bne.n	800514e <_dtoa_r+0xa26>
 800512c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005130:	d029      	beq.n	8005186 <_dtoa_r+0xa5e>
 8005132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	dd02      	ble.n	800513e <_dtoa_r+0xa16>
 8005138:	9b08      	ldr	r3, [sp, #32]
 800513a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800513e:	9b02      	ldr	r3, [sp, #8]
 8005140:	f883 8000 	strb.w	r8, [r3]
 8005144:	e63b      	b.n	8004dbe <_dtoa_r+0x696>
 8005146:	4628      	mov	r0, r5
 8005148:	e7bb      	b.n	80050c2 <_dtoa_r+0x99a>
 800514a:	2201      	movs	r2, #1
 800514c:	e7e1      	b.n	8005112 <_dtoa_r+0x9ea>
 800514e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	db04      	blt.n	800515e <_dtoa_r+0xa36>
 8005154:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005156:	430b      	orrs	r3, r1
 8005158:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800515a:	430b      	orrs	r3, r1
 800515c:	d120      	bne.n	80051a0 <_dtoa_r+0xa78>
 800515e:	2a00      	cmp	r2, #0
 8005160:	dded      	ble.n	800513e <_dtoa_r+0xa16>
 8005162:	4649      	mov	r1, r9
 8005164:	2201      	movs	r2, #1
 8005166:	4658      	mov	r0, fp
 8005168:	f000 fbfa 	bl	8005960 <__lshift>
 800516c:	4621      	mov	r1, r4
 800516e:	4681      	mov	r9, r0
 8005170:	f000 fc62 	bl	8005a38 <__mcmp>
 8005174:	2800      	cmp	r0, #0
 8005176:	dc03      	bgt.n	8005180 <_dtoa_r+0xa58>
 8005178:	d1e1      	bne.n	800513e <_dtoa_r+0xa16>
 800517a:	f018 0f01 	tst.w	r8, #1
 800517e:	d0de      	beq.n	800513e <_dtoa_r+0xa16>
 8005180:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005184:	d1d8      	bne.n	8005138 <_dtoa_r+0xa10>
 8005186:	2339      	movs	r3, #57	@ 0x39
 8005188:	9a02      	ldr	r2, [sp, #8]
 800518a:	7013      	strb	r3, [r2, #0]
 800518c:	4633      	mov	r3, r6
 800518e:	461e      	mov	r6, r3
 8005190:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005194:	3b01      	subs	r3, #1
 8005196:	2a39      	cmp	r2, #57	@ 0x39
 8005198:	d052      	beq.n	8005240 <_dtoa_r+0xb18>
 800519a:	3201      	adds	r2, #1
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e60e      	b.n	8004dbe <_dtoa_r+0x696>
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	dd07      	ble.n	80051b4 <_dtoa_r+0xa8c>
 80051a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80051a8:	d0ed      	beq.n	8005186 <_dtoa_r+0xa5e>
 80051aa:	9a02      	ldr	r2, [sp, #8]
 80051ac:	f108 0301 	add.w	r3, r8, #1
 80051b0:	7013      	strb	r3, [r2, #0]
 80051b2:	e604      	b.n	8004dbe <_dtoa_r+0x696>
 80051b4:	9b07      	ldr	r3, [sp, #28]
 80051b6:	9a07      	ldr	r2, [sp, #28]
 80051b8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80051bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051be:	4293      	cmp	r3, r2
 80051c0:	d028      	beq.n	8005214 <_dtoa_r+0xaec>
 80051c2:	4649      	mov	r1, r9
 80051c4:	2300      	movs	r3, #0
 80051c6:	220a      	movs	r2, #10
 80051c8:	4658      	mov	r0, fp
 80051ca:	f000 f9d5 	bl	8005578 <__multadd>
 80051ce:	42af      	cmp	r7, r5
 80051d0:	4681      	mov	r9, r0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	f04f 020a 	mov.w	r2, #10
 80051da:	4639      	mov	r1, r7
 80051dc:	4658      	mov	r0, fp
 80051de:	d107      	bne.n	80051f0 <_dtoa_r+0xac8>
 80051e0:	f000 f9ca 	bl	8005578 <__multadd>
 80051e4:	4607      	mov	r7, r0
 80051e6:	4605      	mov	r5, r0
 80051e8:	9b07      	ldr	r3, [sp, #28]
 80051ea:	3301      	adds	r3, #1
 80051ec:	9307      	str	r3, [sp, #28]
 80051ee:	e774      	b.n	80050da <_dtoa_r+0x9b2>
 80051f0:	f000 f9c2 	bl	8005578 <__multadd>
 80051f4:	4629      	mov	r1, r5
 80051f6:	4607      	mov	r7, r0
 80051f8:	2300      	movs	r3, #0
 80051fa:	220a      	movs	r2, #10
 80051fc:	4658      	mov	r0, fp
 80051fe:	f000 f9bb 	bl	8005578 <__multadd>
 8005202:	4605      	mov	r5, r0
 8005204:	e7f0      	b.n	80051e8 <_dtoa_r+0xac0>
 8005206:	9b08      	ldr	r3, [sp, #32]
 8005208:	2700      	movs	r7, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	bfcc      	ite	gt
 800520e:	461e      	movgt	r6, r3
 8005210:	2601      	movle	r6, #1
 8005212:	4456      	add	r6, sl
 8005214:	4649      	mov	r1, r9
 8005216:	2201      	movs	r2, #1
 8005218:	4658      	mov	r0, fp
 800521a:	f000 fba1 	bl	8005960 <__lshift>
 800521e:	4621      	mov	r1, r4
 8005220:	4681      	mov	r9, r0
 8005222:	f000 fc09 	bl	8005a38 <__mcmp>
 8005226:	2800      	cmp	r0, #0
 8005228:	dcb0      	bgt.n	800518c <_dtoa_r+0xa64>
 800522a:	d102      	bne.n	8005232 <_dtoa_r+0xb0a>
 800522c:	f018 0f01 	tst.w	r8, #1
 8005230:	d1ac      	bne.n	800518c <_dtoa_r+0xa64>
 8005232:	4633      	mov	r3, r6
 8005234:	461e      	mov	r6, r3
 8005236:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800523a:	2a30      	cmp	r2, #48	@ 0x30
 800523c:	d0fa      	beq.n	8005234 <_dtoa_r+0xb0c>
 800523e:	e5be      	b.n	8004dbe <_dtoa_r+0x696>
 8005240:	459a      	cmp	sl, r3
 8005242:	d1a4      	bne.n	800518e <_dtoa_r+0xa66>
 8005244:	9b04      	ldr	r3, [sp, #16]
 8005246:	3301      	adds	r3, #1
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	2331      	movs	r3, #49	@ 0x31
 800524c:	f88a 3000 	strb.w	r3, [sl]
 8005250:	e5b5      	b.n	8004dbe <_dtoa_r+0x696>
 8005252:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005254:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80052b4 <_dtoa_r+0xb8c>
 8005258:	b11b      	cbz	r3, 8005262 <_dtoa_r+0xb3a>
 800525a:	f10a 0308 	add.w	r3, sl, #8
 800525e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4650      	mov	r0, sl
 8005264:	b017      	add	sp, #92	@ 0x5c
 8005266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800526c:	2b01      	cmp	r3, #1
 800526e:	f77f ae3d 	ble.w	8004eec <_dtoa_r+0x7c4>
 8005272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005274:	930a      	str	r3, [sp, #40]	@ 0x28
 8005276:	2001      	movs	r0, #1
 8005278:	e65b      	b.n	8004f32 <_dtoa_r+0x80a>
 800527a:	9b08      	ldr	r3, [sp, #32]
 800527c:	2b00      	cmp	r3, #0
 800527e:	f77f aed6 	ble.w	800502e <_dtoa_r+0x906>
 8005282:	4656      	mov	r6, sl
 8005284:	4621      	mov	r1, r4
 8005286:	4648      	mov	r0, r9
 8005288:	f7ff f9c4 	bl	8004614 <quorem>
 800528c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005290:	9b08      	ldr	r3, [sp, #32]
 8005292:	f806 8b01 	strb.w	r8, [r6], #1
 8005296:	eba6 020a 	sub.w	r2, r6, sl
 800529a:	4293      	cmp	r3, r2
 800529c:	ddb3      	ble.n	8005206 <_dtoa_r+0xade>
 800529e:	4649      	mov	r1, r9
 80052a0:	2300      	movs	r3, #0
 80052a2:	220a      	movs	r2, #10
 80052a4:	4658      	mov	r0, fp
 80052a6:	f000 f967 	bl	8005578 <__multadd>
 80052aa:	4681      	mov	r9, r0
 80052ac:	e7ea      	b.n	8005284 <_dtoa_r+0xb5c>
 80052ae:	bf00      	nop
 80052b0:	08007dbb 	.word	0x08007dbb
 80052b4:	08007d3f 	.word	0x08007d3f

080052b8 <_free_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4605      	mov	r5, r0
 80052bc:	2900      	cmp	r1, #0
 80052be:	d040      	beq.n	8005342 <_free_r+0x8a>
 80052c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c4:	1f0c      	subs	r4, r1, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bfb8      	it	lt
 80052ca:	18e4      	addlt	r4, r4, r3
 80052cc:	f000 f8e6 	bl	800549c <__malloc_lock>
 80052d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005344 <_free_r+0x8c>)
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	b933      	cbnz	r3, 80052e4 <_free_r+0x2c>
 80052d6:	6063      	str	r3, [r4, #4]
 80052d8:	6014      	str	r4, [r2, #0]
 80052da:	4628      	mov	r0, r5
 80052dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052e0:	f000 b8e2 	b.w	80054a8 <__malloc_unlock>
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d908      	bls.n	80052fa <_free_r+0x42>
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	1821      	adds	r1, r4, r0
 80052ec:	428b      	cmp	r3, r1
 80052ee:	bf01      	itttt	eq
 80052f0:	6819      	ldreq	r1, [r3, #0]
 80052f2:	685b      	ldreq	r3, [r3, #4]
 80052f4:	1809      	addeq	r1, r1, r0
 80052f6:	6021      	streq	r1, [r4, #0]
 80052f8:	e7ed      	b.n	80052d6 <_free_r+0x1e>
 80052fa:	461a      	mov	r2, r3
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b10b      	cbz	r3, 8005304 <_free_r+0x4c>
 8005300:	42a3      	cmp	r3, r4
 8005302:	d9fa      	bls.n	80052fa <_free_r+0x42>
 8005304:	6811      	ldr	r1, [r2, #0]
 8005306:	1850      	adds	r0, r2, r1
 8005308:	42a0      	cmp	r0, r4
 800530a:	d10b      	bne.n	8005324 <_free_r+0x6c>
 800530c:	6820      	ldr	r0, [r4, #0]
 800530e:	4401      	add	r1, r0
 8005310:	1850      	adds	r0, r2, r1
 8005312:	4283      	cmp	r3, r0
 8005314:	6011      	str	r1, [r2, #0]
 8005316:	d1e0      	bne.n	80052da <_free_r+0x22>
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4408      	add	r0, r1
 800531e:	6010      	str	r0, [r2, #0]
 8005320:	6053      	str	r3, [r2, #4]
 8005322:	e7da      	b.n	80052da <_free_r+0x22>
 8005324:	d902      	bls.n	800532c <_free_r+0x74>
 8005326:	230c      	movs	r3, #12
 8005328:	602b      	str	r3, [r5, #0]
 800532a:	e7d6      	b.n	80052da <_free_r+0x22>
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	1821      	adds	r1, r4, r0
 8005330:	428b      	cmp	r3, r1
 8005332:	bf01      	itttt	eq
 8005334:	6819      	ldreq	r1, [r3, #0]
 8005336:	685b      	ldreq	r3, [r3, #4]
 8005338:	1809      	addeq	r1, r1, r0
 800533a:	6021      	streq	r1, [r4, #0]
 800533c:	6063      	str	r3, [r4, #4]
 800533e:	6054      	str	r4, [r2, #4]
 8005340:	e7cb      	b.n	80052da <_free_r+0x22>
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	20000454 	.word	0x20000454

08005348 <malloc>:
 8005348:	4b02      	ldr	r3, [pc, #8]	@ (8005354 <malloc+0xc>)
 800534a:	4601      	mov	r1, r0
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	f000 b825 	b.w	800539c <_malloc_r>
 8005352:	bf00      	nop
 8005354:	20000018 	.word	0x20000018

08005358 <sbrk_aligned>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	4e0f      	ldr	r6, [pc, #60]	@ (8005398 <sbrk_aligned+0x40>)
 800535c:	460c      	mov	r4, r1
 800535e:	6831      	ldr	r1, [r6, #0]
 8005360:	4605      	mov	r5, r0
 8005362:	b911      	cbnz	r1, 800536a <sbrk_aligned+0x12>
 8005364:	f001 fdf6 	bl	8006f54 <_sbrk_r>
 8005368:	6030      	str	r0, [r6, #0]
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f001 fdf1 	bl	8006f54 <_sbrk_r>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	d103      	bne.n	800537e <sbrk_aligned+0x26>
 8005376:	f04f 34ff 	mov.w	r4, #4294967295
 800537a:	4620      	mov	r0, r4
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	1cc4      	adds	r4, r0, #3
 8005380:	f024 0403 	bic.w	r4, r4, #3
 8005384:	42a0      	cmp	r0, r4
 8005386:	d0f8      	beq.n	800537a <sbrk_aligned+0x22>
 8005388:	1a21      	subs	r1, r4, r0
 800538a:	4628      	mov	r0, r5
 800538c:	f001 fde2 	bl	8006f54 <_sbrk_r>
 8005390:	3001      	adds	r0, #1
 8005392:	d1f2      	bne.n	800537a <sbrk_aligned+0x22>
 8005394:	e7ef      	b.n	8005376 <sbrk_aligned+0x1e>
 8005396:	bf00      	nop
 8005398:	20000450 	.word	0x20000450

0800539c <_malloc_r>:
 800539c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a0:	1ccd      	adds	r5, r1, #3
 80053a2:	f025 0503 	bic.w	r5, r5, #3
 80053a6:	3508      	adds	r5, #8
 80053a8:	2d0c      	cmp	r5, #12
 80053aa:	bf38      	it	cc
 80053ac:	250c      	movcc	r5, #12
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	4606      	mov	r6, r0
 80053b2:	db01      	blt.n	80053b8 <_malloc_r+0x1c>
 80053b4:	42a9      	cmp	r1, r5
 80053b6:	d904      	bls.n	80053c2 <_malloc_r+0x26>
 80053b8:	230c      	movs	r3, #12
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	2000      	movs	r0, #0
 80053be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005498 <_malloc_r+0xfc>
 80053c6:	f000 f869 	bl	800549c <__malloc_lock>
 80053ca:	f8d8 3000 	ldr.w	r3, [r8]
 80053ce:	461c      	mov	r4, r3
 80053d0:	bb44      	cbnz	r4, 8005424 <_malloc_r+0x88>
 80053d2:	4629      	mov	r1, r5
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff ffbf 	bl	8005358 <sbrk_aligned>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	4604      	mov	r4, r0
 80053de:	d158      	bne.n	8005492 <_malloc_r+0xf6>
 80053e0:	f8d8 4000 	ldr.w	r4, [r8]
 80053e4:	4627      	mov	r7, r4
 80053e6:	2f00      	cmp	r7, #0
 80053e8:	d143      	bne.n	8005472 <_malloc_r+0xd6>
 80053ea:	2c00      	cmp	r4, #0
 80053ec:	d04b      	beq.n	8005486 <_malloc_r+0xea>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	4639      	mov	r1, r7
 80053f2:	4630      	mov	r0, r6
 80053f4:	eb04 0903 	add.w	r9, r4, r3
 80053f8:	f001 fdac 	bl	8006f54 <_sbrk_r>
 80053fc:	4581      	cmp	r9, r0
 80053fe:	d142      	bne.n	8005486 <_malloc_r+0xea>
 8005400:	6821      	ldr	r1, [r4, #0]
 8005402:	4630      	mov	r0, r6
 8005404:	1a6d      	subs	r5, r5, r1
 8005406:	4629      	mov	r1, r5
 8005408:	f7ff ffa6 	bl	8005358 <sbrk_aligned>
 800540c:	3001      	adds	r0, #1
 800540e:	d03a      	beq.n	8005486 <_malloc_r+0xea>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	442b      	add	r3, r5
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	f8d8 3000 	ldr.w	r3, [r8]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	bb62      	cbnz	r2, 8005478 <_malloc_r+0xdc>
 800541e:	f8c8 7000 	str.w	r7, [r8]
 8005422:	e00f      	b.n	8005444 <_malloc_r+0xa8>
 8005424:	6822      	ldr	r2, [r4, #0]
 8005426:	1b52      	subs	r2, r2, r5
 8005428:	d420      	bmi.n	800546c <_malloc_r+0xd0>
 800542a:	2a0b      	cmp	r2, #11
 800542c:	d917      	bls.n	800545e <_malloc_r+0xc2>
 800542e:	1961      	adds	r1, r4, r5
 8005430:	42a3      	cmp	r3, r4
 8005432:	6025      	str	r5, [r4, #0]
 8005434:	bf18      	it	ne
 8005436:	6059      	strne	r1, [r3, #4]
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	bf08      	it	eq
 800543c:	f8c8 1000 	streq.w	r1, [r8]
 8005440:	5162      	str	r2, [r4, r5]
 8005442:	604b      	str	r3, [r1, #4]
 8005444:	4630      	mov	r0, r6
 8005446:	f000 f82f 	bl	80054a8 <__malloc_unlock>
 800544a:	f104 000b 	add.w	r0, r4, #11
 800544e:	1d23      	adds	r3, r4, #4
 8005450:	f020 0007 	bic.w	r0, r0, #7
 8005454:	1ac2      	subs	r2, r0, r3
 8005456:	bf1c      	itt	ne
 8005458:	1a1b      	subne	r3, r3, r0
 800545a:	50a3      	strne	r3, [r4, r2]
 800545c:	e7af      	b.n	80053be <_malloc_r+0x22>
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	42a3      	cmp	r3, r4
 8005462:	bf0c      	ite	eq
 8005464:	f8c8 2000 	streq.w	r2, [r8]
 8005468:	605a      	strne	r2, [r3, #4]
 800546a:	e7eb      	b.n	8005444 <_malloc_r+0xa8>
 800546c:	4623      	mov	r3, r4
 800546e:	6864      	ldr	r4, [r4, #4]
 8005470:	e7ae      	b.n	80053d0 <_malloc_r+0x34>
 8005472:	463c      	mov	r4, r7
 8005474:	687f      	ldr	r7, [r7, #4]
 8005476:	e7b6      	b.n	80053e6 <_malloc_r+0x4a>
 8005478:	461a      	mov	r2, r3
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	42a3      	cmp	r3, r4
 800547e:	d1fb      	bne.n	8005478 <_malloc_r+0xdc>
 8005480:	2300      	movs	r3, #0
 8005482:	6053      	str	r3, [r2, #4]
 8005484:	e7de      	b.n	8005444 <_malloc_r+0xa8>
 8005486:	230c      	movs	r3, #12
 8005488:	4630      	mov	r0, r6
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	f000 f80c 	bl	80054a8 <__malloc_unlock>
 8005490:	e794      	b.n	80053bc <_malloc_r+0x20>
 8005492:	6005      	str	r5, [r0, #0]
 8005494:	e7d6      	b.n	8005444 <_malloc_r+0xa8>
 8005496:	bf00      	nop
 8005498:	20000454 	.word	0x20000454

0800549c <__malloc_lock>:
 800549c:	4801      	ldr	r0, [pc, #4]	@ (80054a4 <__malloc_lock+0x8>)
 800549e:	f7ff b8a4 	b.w	80045ea <__retarget_lock_acquire_recursive>
 80054a2:	bf00      	nop
 80054a4:	2000044c 	.word	0x2000044c

080054a8 <__malloc_unlock>:
 80054a8:	4801      	ldr	r0, [pc, #4]	@ (80054b0 <__malloc_unlock+0x8>)
 80054aa:	f7ff b89f 	b.w	80045ec <__retarget_lock_release_recursive>
 80054ae:	bf00      	nop
 80054b0:	2000044c 	.word	0x2000044c

080054b4 <_Balloc>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	69c6      	ldr	r6, [r0, #28]
 80054b8:	4604      	mov	r4, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	b976      	cbnz	r6, 80054dc <_Balloc+0x28>
 80054be:	2010      	movs	r0, #16
 80054c0:	f7ff ff42 	bl	8005348 <malloc>
 80054c4:	4602      	mov	r2, r0
 80054c6:	61e0      	str	r0, [r4, #28]
 80054c8:	b920      	cbnz	r0, 80054d4 <_Balloc+0x20>
 80054ca:	216b      	movs	r1, #107	@ 0x6b
 80054cc:	4b17      	ldr	r3, [pc, #92]	@ (800552c <_Balloc+0x78>)
 80054ce:	4818      	ldr	r0, [pc, #96]	@ (8005530 <_Balloc+0x7c>)
 80054d0:	f001 fd64 	bl	8006f9c <__assert_func>
 80054d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054d8:	6006      	str	r6, [r0, #0]
 80054da:	60c6      	str	r6, [r0, #12]
 80054dc:	69e6      	ldr	r6, [r4, #28]
 80054de:	68f3      	ldr	r3, [r6, #12]
 80054e0:	b183      	cbz	r3, 8005504 <_Balloc+0x50>
 80054e2:	69e3      	ldr	r3, [r4, #28]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054ea:	b9b8      	cbnz	r0, 800551c <_Balloc+0x68>
 80054ec:	2101      	movs	r1, #1
 80054ee:	fa01 f605 	lsl.w	r6, r1, r5
 80054f2:	1d72      	adds	r2, r6, #5
 80054f4:	4620      	mov	r0, r4
 80054f6:	0092      	lsls	r2, r2, #2
 80054f8:	f001 fd6e 	bl	8006fd8 <_calloc_r>
 80054fc:	b160      	cbz	r0, 8005518 <_Balloc+0x64>
 80054fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005502:	e00e      	b.n	8005522 <_Balloc+0x6e>
 8005504:	2221      	movs	r2, #33	@ 0x21
 8005506:	2104      	movs	r1, #4
 8005508:	4620      	mov	r0, r4
 800550a:	f001 fd65 	bl	8006fd8 <_calloc_r>
 800550e:	69e3      	ldr	r3, [r4, #28]
 8005510:	60f0      	str	r0, [r6, #12]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e4      	bne.n	80054e2 <_Balloc+0x2e>
 8005518:	2000      	movs	r0, #0
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	6802      	ldr	r2, [r0, #0]
 800551e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005522:	2300      	movs	r3, #0
 8005524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005528:	e7f7      	b.n	800551a <_Balloc+0x66>
 800552a:	bf00      	nop
 800552c:	08007d4c 	.word	0x08007d4c
 8005530:	08007dcc 	.word	0x08007dcc

08005534 <_Bfree>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	69c6      	ldr	r6, [r0, #28]
 8005538:	4605      	mov	r5, r0
 800553a:	460c      	mov	r4, r1
 800553c:	b976      	cbnz	r6, 800555c <_Bfree+0x28>
 800553e:	2010      	movs	r0, #16
 8005540:	f7ff ff02 	bl	8005348 <malloc>
 8005544:	4602      	mov	r2, r0
 8005546:	61e8      	str	r0, [r5, #28]
 8005548:	b920      	cbnz	r0, 8005554 <_Bfree+0x20>
 800554a:	218f      	movs	r1, #143	@ 0x8f
 800554c:	4b08      	ldr	r3, [pc, #32]	@ (8005570 <_Bfree+0x3c>)
 800554e:	4809      	ldr	r0, [pc, #36]	@ (8005574 <_Bfree+0x40>)
 8005550:	f001 fd24 	bl	8006f9c <__assert_func>
 8005554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005558:	6006      	str	r6, [r0, #0]
 800555a:	60c6      	str	r6, [r0, #12]
 800555c:	b13c      	cbz	r4, 800556e <_Bfree+0x3a>
 800555e:	69eb      	ldr	r3, [r5, #28]
 8005560:	6862      	ldr	r2, [r4, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005568:	6021      	str	r1, [r4, #0]
 800556a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	08007d4c 	.word	0x08007d4c
 8005574:	08007dcc 	.word	0x08007dcc

08005578 <__multadd>:
 8005578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800557c:	4607      	mov	r7, r0
 800557e:	460c      	mov	r4, r1
 8005580:	461e      	mov	r6, r3
 8005582:	2000      	movs	r0, #0
 8005584:	690d      	ldr	r5, [r1, #16]
 8005586:	f101 0c14 	add.w	ip, r1, #20
 800558a:	f8dc 3000 	ldr.w	r3, [ip]
 800558e:	3001      	adds	r0, #1
 8005590:	b299      	uxth	r1, r3
 8005592:	fb02 6101 	mla	r1, r2, r1, r6
 8005596:	0c1e      	lsrs	r6, r3, #16
 8005598:	0c0b      	lsrs	r3, r1, #16
 800559a:	fb02 3306 	mla	r3, r2, r6, r3
 800559e:	b289      	uxth	r1, r1
 80055a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055a4:	4285      	cmp	r5, r0
 80055a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055aa:	f84c 1b04 	str.w	r1, [ip], #4
 80055ae:	dcec      	bgt.n	800558a <__multadd+0x12>
 80055b0:	b30e      	cbz	r6, 80055f6 <__multadd+0x7e>
 80055b2:	68a3      	ldr	r3, [r4, #8]
 80055b4:	42ab      	cmp	r3, r5
 80055b6:	dc19      	bgt.n	80055ec <__multadd+0x74>
 80055b8:	6861      	ldr	r1, [r4, #4]
 80055ba:	4638      	mov	r0, r7
 80055bc:	3101      	adds	r1, #1
 80055be:	f7ff ff79 	bl	80054b4 <_Balloc>
 80055c2:	4680      	mov	r8, r0
 80055c4:	b928      	cbnz	r0, 80055d2 <__multadd+0x5a>
 80055c6:	4602      	mov	r2, r0
 80055c8:	21ba      	movs	r1, #186	@ 0xba
 80055ca:	4b0c      	ldr	r3, [pc, #48]	@ (80055fc <__multadd+0x84>)
 80055cc:	480c      	ldr	r0, [pc, #48]	@ (8005600 <__multadd+0x88>)
 80055ce:	f001 fce5 	bl	8006f9c <__assert_func>
 80055d2:	6922      	ldr	r2, [r4, #16]
 80055d4:	f104 010c 	add.w	r1, r4, #12
 80055d8:	3202      	adds	r2, #2
 80055da:	0092      	lsls	r2, r2, #2
 80055dc:	300c      	adds	r0, #12
 80055de:	f001 fcc9 	bl	8006f74 <memcpy>
 80055e2:	4621      	mov	r1, r4
 80055e4:	4638      	mov	r0, r7
 80055e6:	f7ff ffa5 	bl	8005534 <_Bfree>
 80055ea:	4644      	mov	r4, r8
 80055ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055f0:	3501      	adds	r5, #1
 80055f2:	615e      	str	r6, [r3, #20]
 80055f4:	6125      	str	r5, [r4, #16]
 80055f6:	4620      	mov	r0, r4
 80055f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055fc:	08007dbb 	.word	0x08007dbb
 8005600:	08007dcc 	.word	0x08007dcc

08005604 <__s2b>:
 8005604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005608:	4615      	mov	r5, r2
 800560a:	2209      	movs	r2, #9
 800560c:	461f      	mov	r7, r3
 800560e:	3308      	adds	r3, #8
 8005610:	460c      	mov	r4, r1
 8005612:	fb93 f3f2 	sdiv	r3, r3, r2
 8005616:	4606      	mov	r6, r0
 8005618:	2201      	movs	r2, #1
 800561a:	2100      	movs	r1, #0
 800561c:	429a      	cmp	r2, r3
 800561e:	db09      	blt.n	8005634 <__s2b+0x30>
 8005620:	4630      	mov	r0, r6
 8005622:	f7ff ff47 	bl	80054b4 <_Balloc>
 8005626:	b940      	cbnz	r0, 800563a <__s2b+0x36>
 8005628:	4602      	mov	r2, r0
 800562a:	21d3      	movs	r1, #211	@ 0xd3
 800562c:	4b18      	ldr	r3, [pc, #96]	@ (8005690 <__s2b+0x8c>)
 800562e:	4819      	ldr	r0, [pc, #100]	@ (8005694 <__s2b+0x90>)
 8005630:	f001 fcb4 	bl	8006f9c <__assert_func>
 8005634:	0052      	lsls	r2, r2, #1
 8005636:	3101      	adds	r1, #1
 8005638:	e7f0      	b.n	800561c <__s2b+0x18>
 800563a:	9b08      	ldr	r3, [sp, #32]
 800563c:	2d09      	cmp	r5, #9
 800563e:	6143      	str	r3, [r0, #20]
 8005640:	f04f 0301 	mov.w	r3, #1
 8005644:	6103      	str	r3, [r0, #16]
 8005646:	dd16      	ble.n	8005676 <__s2b+0x72>
 8005648:	f104 0909 	add.w	r9, r4, #9
 800564c:	46c8      	mov	r8, r9
 800564e:	442c      	add	r4, r5
 8005650:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005654:	4601      	mov	r1, r0
 8005656:	220a      	movs	r2, #10
 8005658:	4630      	mov	r0, r6
 800565a:	3b30      	subs	r3, #48	@ 0x30
 800565c:	f7ff ff8c 	bl	8005578 <__multadd>
 8005660:	45a0      	cmp	r8, r4
 8005662:	d1f5      	bne.n	8005650 <__s2b+0x4c>
 8005664:	f1a5 0408 	sub.w	r4, r5, #8
 8005668:	444c      	add	r4, r9
 800566a:	1b2d      	subs	r5, r5, r4
 800566c:	1963      	adds	r3, r4, r5
 800566e:	42bb      	cmp	r3, r7
 8005670:	db04      	blt.n	800567c <__s2b+0x78>
 8005672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005676:	2509      	movs	r5, #9
 8005678:	340a      	adds	r4, #10
 800567a:	e7f6      	b.n	800566a <__s2b+0x66>
 800567c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005680:	4601      	mov	r1, r0
 8005682:	220a      	movs	r2, #10
 8005684:	4630      	mov	r0, r6
 8005686:	3b30      	subs	r3, #48	@ 0x30
 8005688:	f7ff ff76 	bl	8005578 <__multadd>
 800568c:	e7ee      	b.n	800566c <__s2b+0x68>
 800568e:	bf00      	nop
 8005690:	08007dbb 	.word	0x08007dbb
 8005694:	08007dcc 	.word	0x08007dcc

08005698 <__hi0bits>:
 8005698:	4603      	mov	r3, r0
 800569a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800569e:	bf3a      	itte	cc
 80056a0:	0403      	lslcc	r3, r0, #16
 80056a2:	2010      	movcc	r0, #16
 80056a4:	2000      	movcs	r0, #0
 80056a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056aa:	bf3c      	itt	cc
 80056ac:	021b      	lslcc	r3, r3, #8
 80056ae:	3008      	addcc	r0, #8
 80056b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056b4:	bf3c      	itt	cc
 80056b6:	011b      	lslcc	r3, r3, #4
 80056b8:	3004      	addcc	r0, #4
 80056ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056be:	bf3c      	itt	cc
 80056c0:	009b      	lslcc	r3, r3, #2
 80056c2:	3002      	addcc	r0, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	db05      	blt.n	80056d4 <__hi0bits+0x3c>
 80056c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80056cc:	f100 0001 	add.w	r0, r0, #1
 80056d0:	bf08      	it	eq
 80056d2:	2020      	moveq	r0, #32
 80056d4:	4770      	bx	lr

080056d6 <__lo0bits>:
 80056d6:	6803      	ldr	r3, [r0, #0]
 80056d8:	4602      	mov	r2, r0
 80056da:	f013 0007 	ands.w	r0, r3, #7
 80056de:	d00b      	beq.n	80056f8 <__lo0bits+0x22>
 80056e0:	07d9      	lsls	r1, r3, #31
 80056e2:	d421      	bmi.n	8005728 <__lo0bits+0x52>
 80056e4:	0798      	lsls	r0, r3, #30
 80056e6:	bf49      	itett	mi
 80056e8:	085b      	lsrmi	r3, r3, #1
 80056ea:	089b      	lsrpl	r3, r3, #2
 80056ec:	2001      	movmi	r0, #1
 80056ee:	6013      	strmi	r3, [r2, #0]
 80056f0:	bf5c      	itt	pl
 80056f2:	2002      	movpl	r0, #2
 80056f4:	6013      	strpl	r3, [r2, #0]
 80056f6:	4770      	bx	lr
 80056f8:	b299      	uxth	r1, r3
 80056fa:	b909      	cbnz	r1, 8005700 <__lo0bits+0x2a>
 80056fc:	2010      	movs	r0, #16
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	b2d9      	uxtb	r1, r3
 8005702:	b909      	cbnz	r1, 8005708 <__lo0bits+0x32>
 8005704:	3008      	adds	r0, #8
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	0719      	lsls	r1, r3, #28
 800570a:	bf04      	itt	eq
 800570c:	091b      	lsreq	r3, r3, #4
 800570e:	3004      	addeq	r0, #4
 8005710:	0799      	lsls	r1, r3, #30
 8005712:	bf04      	itt	eq
 8005714:	089b      	lsreq	r3, r3, #2
 8005716:	3002      	addeq	r0, #2
 8005718:	07d9      	lsls	r1, r3, #31
 800571a:	d403      	bmi.n	8005724 <__lo0bits+0x4e>
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	f100 0001 	add.w	r0, r0, #1
 8005722:	d003      	beq.n	800572c <__lo0bits+0x56>
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4770      	bx	lr
 8005728:	2000      	movs	r0, #0
 800572a:	4770      	bx	lr
 800572c:	2020      	movs	r0, #32
 800572e:	4770      	bx	lr

08005730 <__i2b>:
 8005730:	b510      	push	{r4, lr}
 8005732:	460c      	mov	r4, r1
 8005734:	2101      	movs	r1, #1
 8005736:	f7ff febd 	bl	80054b4 <_Balloc>
 800573a:	4602      	mov	r2, r0
 800573c:	b928      	cbnz	r0, 800574a <__i2b+0x1a>
 800573e:	f240 1145 	movw	r1, #325	@ 0x145
 8005742:	4b04      	ldr	r3, [pc, #16]	@ (8005754 <__i2b+0x24>)
 8005744:	4804      	ldr	r0, [pc, #16]	@ (8005758 <__i2b+0x28>)
 8005746:	f001 fc29 	bl	8006f9c <__assert_func>
 800574a:	2301      	movs	r3, #1
 800574c:	6144      	str	r4, [r0, #20]
 800574e:	6103      	str	r3, [r0, #16]
 8005750:	bd10      	pop	{r4, pc}
 8005752:	bf00      	nop
 8005754:	08007dbb 	.word	0x08007dbb
 8005758:	08007dcc 	.word	0x08007dcc

0800575c <__multiply>:
 800575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005760:	4614      	mov	r4, r2
 8005762:	690a      	ldr	r2, [r1, #16]
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	460f      	mov	r7, r1
 8005768:	429a      	cmp	r2, r3
 800576a:	bfa2      	ittt	ge
 800576c:	4623      	movge	r3, r4
 800576e:	460c      	movge	r4, r1
 8005770:	461f      	movge	r7, r3
 8005772:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005776:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	6861      	ldr	r1, [r4, #4]
 800577e:	eb0a 0609 	add.w	r6, sl, r9
 8005782:	42b3      	cmp	r3, r6
 8005784:	b085      	sub	sp, #20
 8005786:	bfb8      	it	lt
 8005788:	3101      	addlt	r1, #1
 800578a:	f7ff fe93 	bl	80054b4 <_Balloc>
 800578e:	b930      	cbnz	r0, 800579e <__multiply+0x42>
 8005790:	4602      	mov	r2, r0
 8005792:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005796:	4b43      	ldr	r3, [pc, #268]	@ (80058a4 <__multiply+0x148>)
 8005798:	4843      	ldr	r0, [pc, #268]	@ (80058a8 <__multiply+0x14c>)
 800579a:	f001 fbff 	bl	8006f9c <__assert_func>
 800579e:	f100 0514 	add.w	r5, r0, #20
 80057a2:	462b      	mov	r3, r5
 80057a4:	2200      	movs	r2, #0
 80057a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057aa:	4543      	cmp	r3, r8
 80057ac:	d321      	bcc.n	80057f2 <__multiply+0x96>
 80057ae:	f107 0114 	add.w	r1, r7, #20
 80057b2:	f104 0214 	add.w	r2, r4, #20
 80057b6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80057ba:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80057be:	9302      	str	r3, [sp, #8]
 80057c0:	1b13      	subs	r3, r2, r4
 80057c2:	3b15      	subs	r3, #21
 80057c4:	f023 0303 	bic.w	r3, r3, #3
 80057c8:	3304      	adds	r3, #4
 80057ca:	f104 0715 	add.w	r7, r4, #21
 80057ce:	42ba      	cmp	r2, r7
 80057d0:	bf38      	it	cc
 80057d2:	2304      	movcc	r3, #4
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	9b02      	ldr	r3, [sp, #8]
 80057d8:	9103      	str	r1, [sp, #12]
 80057da:	428b      	cmp	r3, r1
 80057dc:	d80c      	bhi.n	80057f8 <__multiply+0x9c>
 80057de:	2e00      	cmp	r6, #0
 80057e0:	dd03      	ble.n	80057ea <__multiply+0x8e>
 80057e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d05a      	beq.n	80058a0 <__multiply+0x144>
 80057ea:	6106      	str	r6, [r0, #16]
 80057ec:	b005      	add	sp, #20
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f2:	f843 2b04 	str.w	r2, [r3], #4
 80057f6:	e7d8      	b.n	80057aa <__multiply+0x4e>
 80057f8:	f8b1 a000 	ldrh.w	sl, [r1]
 80057fc:	f1ba 0f00 	cmp.w	sl, #0
 8005800:	d023      	beq.n	800584a <__multiply+0xee>
 8005802:	46a9      	mov	r9, r5
 8005804:	f04f 0c00 	mov.w	ip, #0
 8005808:	f104 0e14 	add.w	lr, r4, #20
 800580c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005810:	f8d9 3000 	ldr.w	r3, [r9]
 8005814:	fa1f fb87 	uxth.w	fp, r7
 8005818:	b29b      	uxth	r3, r3
 800581a:	fb0a 330b 	mla	r3, sl, fp, r3
 800581e:	4463      	add	r3, ip
 8005820:	f8d9 c000 	ldr.w	ip, [r9]
 8005824:	0c3f      	lsrs	r7, r7, #16
 8005826:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800582a:	fb0a c707 	mla	r7, sl, r7, ip
 800582e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005832:	b29b      	uxth	r3, r3
 8005834:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005838:	4572      	cmp	r2, lr
 800583a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800583e:	f849 3b04 	str.w	r3, [r9], #4
 8005842:	d8e3      	bhi.n	800580c <__multiply+0xb0>
 8005844:	9b01      	ldr	r3, [sp, #4]
 8005846:	f845 c003 	str.w	ip, [r5, r3]
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	3104      	adds	r1, #4
 800584e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005852:	f1b9 0f00 	cmp.w	r9, #0
 8005856:	d021      	beq.n	800589c <__multiply+0x140>
 8005858:	46ae      	mov	lr, r5
 800585a:	f04f 0a00 	mov.w	sl, #0
 800585e:	682b      	ldr	r3, [r5, #0]
 8005860:	f104 0c14 	add.w	ip, r4, #20
 8005864:	f8bc b000 	ldrh.w	fp, [ip]
 8005868:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800586c:	b29b      	uxth	r3, r3
 800586e:	fb09 770b 	mla	r7, r9, fp, r7
 8005872:	4457      	add	r7, sl
 8005874:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005878:	f84e 3b04 	str.w	r3, [lr], #4
 800587c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005884:	f8be 3000 	ldrh.w	r3, [lr]
 8005888:	4562      	cmp	r2, ip
 800588a:	fb09 330a 	mla	r3, r9, sl, r3
 800588e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005892:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005896:	d8e5      	bhi.n	8005864 <__multiply+0x108>
 8005898:	9f01      	ldr	r7, [sp, #4]
 800589a:	51eb      	str	r3, [r5, r7]
 800589c:	3504      	adds	r5, #4
 800589e:	e79a      	b.n	80057d6 <__multiply+0x7a>
 80058a0:	3e01      	subs	r6, #1
 80058a2:	e79c      	b.n	80057de <__multiply+0x82>
 80058a4:	08007dbb 	.word	0x08007dbb
 80058a8:	08007dcc 	.word	0x08007dcc

080058ac <__pow5mult>:
 80058ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b0:	4615      	mov	r5, r2
 80058b2:	f012 0203 	ands.w	r2, r2, #3
 80058b6:	4607      	mov	r7, r0
 80058b8:	460e      	mov	r6, r1
 80058ba:	d007      	beq.n	80058cc <__pow5mult+0x20>
 80058bc:	4c25      	ldr	r4, [pc, #148]	@ (8005954 <__pow5mult+0xa8>)
 80058be:	3a01      	subs	r2, #1
 80058c0:	2300      	movs	r3, #0
 80058c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058c6:	f7ff fe57 	bl	8005578 <__multadd>
 80058ca:	4606      	mov	r6, r0
 80058cc:	10ad      	asrs	r5, r5, #2
 80058ce:	d03d      	beq.n	800594c <__pow5mult+0xa0>
 80058d0:	69fc      	ldr	r4, [r7, #28]
 80058d2:	b97c      	cbnz	r4, 80058f4 <__pow5mult+0x48>
 80058d4:	2010      	movs	r0, #16
 80058d6:	f7ff fd37 	bl	8005348 <malloc>
 80058da:	4602      	mov	r2, r0
 80058dc:	61f8      	str	r0, [r7, #28]
 80058de:	b928      	cbnz	r0, 80058ec <__pow5mult+0x40>
 80058e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80058e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005958 <__pow5mult+0xac>)
 80058e6:	481d      	ldr	r0, [pc, #116]	@ (800595c <__pow5mult+0xb0>)
 80058e8:	f001 fb58 	bl	8006f9c <__assert_func>
 80058ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058f0:	6004      	str	r4, [r0, #0]
 80058f2:	60c4      	str	r4, [r0, #12]
 80058f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80058f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058fc:	b94c      	cbnz	r4, 8005912 <__pow5mult+0x66>
 80058fe:	f240 2171 	movw	r1, #625	@ 0x271
 8005902:	4638      	mov	r0, r7
 8005904:	f7ff ff14 	bl	8005730 <__i2b>
 8005908:	2300      	movs	r3, #0
 800590a:	4604      	mov	r4, r0
 800590c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005910:	6003      	str	r3, [r0, #0]
 8005912:	f04f 0900 	mov.w	r9, #0
 8005916:	07eb      	lsls	r3, r5, #31
 8005918:	d50a      	bpl.n	8005930 <__pow5mult+0x84>
 800591a:	4631      	mov	r1, r6
 800591c:	4622      	mov	r2, r4
 800591e:	4638      	mov	r0, r7
 8005920:	f7ff ff1c 	bl	800575c <__multiply>
 8005924:	4680      	mov	r8, r0
 8005926:	4631      	mov	r1, r6
 8005928:	4638      	mov	r0, r7
 800592a:	f7ff fe03 	bl	8005534 <_Bfree>
 800592e:	4646      	mov	r6, r8
 8005930:	106d      	asrs	r5, r5, #1
 8005932:	d00b      	beq.n	800594c <__pow5mult+0xa0>
 8005934:	6820      	ldr	r0, [r4, #0]
 8005936:	b938      	cbnz	r0, 8005948 <__pow5mult+0x9c>
 8005938:	4622      	mov	r2, r4
 800593a:	4621      	mov	r1, r4
 800593c:	4638      	mov	r0, r7
 800593e:	f7ff ff0d 	bl	800575c <__multiply>
 8005942:	6020      	str	r0, [r4, #0]
 8005944:	f8c0 9000 	str.w	r9, [r0]
 8005948:	4604      	mov	r4, r0
 800594a:	e7e4      	b.n	8005916 <__pow5mult+0x6a>
 800594c:	4630      	mov	r0, r6
 800594e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005952:	bf00      	nop
 8005954:	08007e28 	.word	0x08007e28
 8005958:	08007d4c 	.word	0x08007d4c
 800595c:	08007dcc 	.word	0x08007dcc

08005960 <__lshift>:
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005964:	460c      	mov	r4, r1
 8005966:	4607      	mov	r7, r0
 8005968:	4691      	mov	r9, r2
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6849      	ldr	r1, [r1, #4]
 800596e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005978:	f108 0601 	add.w	r6, r8, #1
 800597c:	42b3      	cmp	r3, r6
 800597e:	db0b      	blt.n	8005998 <__lshift+0x38>
 8005980:	4638      	mov	r0, r7
 8005982:	f7ff fd97 	bl	80054b4 <_Balloc>
 8005986:	4605      	mov	r5, r0
 8005988:	b948      	cbnz	r0, 800599e <__lshift+0x3e>
 800598a:	4602      	mov	r2, r0
 800598c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005990:	4b27      	ldr	r3, [pc, #156]	@ (8005a30 <__lshift+0xd0>)
 8005992:	4828      	ldr	r0, [pc, #160]	@ (8005a34 <__lshift+0xd4>)
 8005994:	f001 fb02 	bl	8006f9c <__assert_func>
 8005998:	3101      	adds	r1, #1
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	e7ee      	b.n	800597c <__lshift+0x1c>
 800599e:	2300      	movs	r3, #0
 80059a0:	f100 0114 	add.w	r1, r0, #20
 80059a4:	f100 0210 	add.w	r2, r0, #16
 80059a8:	4618      	mov	r0, r3
 80059aa:	4553      	cmp	r3, sl
 80059ac:	db33      	blt.n	8005a16 <__lshift+0xb6>
 80059ae:	6920      	ldr	r0, [r4, #16]
 80059b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059b4:	f104 0314 	add.w	r3, r4, #20
 80059b8:	f019 091f 	ands.w	r9, r9, #31
 80059bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059c4:	d02b      	beq.n	8005a1e <__lshift+0xbe>
 80059c6:	468a      	mov	sl, r1
 80059c8:	2200      	movs	r2, #0
 80059ca:	f1c9 0e20 	rsb	lr, r9, #32
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	fa00 f009 	lsl.w	r0, r0, r9
 80059d4:	4310      	orrs	r0, r2
 80059d6:	f84a 0b04 	str.w	r0, [sl], #4
 80059da:	f853 2b04 	ldr.w	r2, [r3], #4
 80059de:	459c      	cmp	ip, r3
 80059e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80059e4:	d8f3      	bhi.n	80059ce <__lshift+0x6e>
 80059e6:	ebac 0304 	sub.w	r3, ip, r4
 80059ea:	3b15      	subs	r3, #21
 80059ec:	f023 0303 	bic.w	r3, r3, #3
 80059f0:	3304      	adds	r3, #4
 80059f2:	f104 0015 	add.w	r0, r4, #21
 80059f6:	4584      	cmp	ip, r0
 80059f8:	bf38      	it	cc
 80059fa:	2304      	movcc	r3, #4
 80059fc:	50ca      	str	r2, [r1, r3]
 80059fe:	b10a      	cbz	r2, 8005a04 <__lshift+0xa4>
 8005a00:	f108 0602 	add.w	r6, r8, #2
 8005a04:	3e01      	subs	r6, #1
 8005a06:	4638      	mov	r0, r7
 8005a08:	4621      	mov	r1, r4
 8005a0a:	612e      	str	r6, [r5, #16]
 8005a0c:	f7ff fd92 	bl	8005534 <_Bfree>
 8005a10:	4628      	mov	r0, r5
 8005a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a16:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	e7c5      	b.n	80059aa <__lshift+0x4a>
 8005a1e:	3904      	subs	r1, #4
 8005a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a24:	459c      	cmp	ip, r3
 8005a26:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a2a:	d8f9      	bhi.n	8005a20 <__lshift+0xc0>
 8005a2c:	e7ea      	b.n	8005a04 <__lshift+0xa4>
 8005a2e:	bf00      	nop
 8005a30:	08007dbb 	.word	0x08007dbb
 8005a34:	08007dcc 	.word	0x08007dcc

08005a38 <__mcmp>:
 8005a38:	4603      	mov	r3, r0
 8005a3a:	690a      	ldr	r2, [r1, #16]
 8005a3c:	6900      	ldr	r0, [r0, #16]
 8005a3e:	b530      	push	{r4, r5, lr}
 8005a40:	1a80      	subs	r0, r0, r2
 8005a42:	d10e      	bne.n	8005a62 <__mcmp+0x2a>
 8005a44:	3314      	adds	r3, #20
 8005a46:	3114      	adds	r1, #20
 8005a48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a58:	4295      	cmp	r5, r2
 8005a5a:	d003      	beq.n	8005a64 <__mcmp+0x2c>
 8005a5c:	d205      	bcs.n	8005a6a <__mcmp+0x32>
 8005a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a62:	bd30      	pop	{r4, r5, pc}
 8005a64:	42a3      	cmp	r3, r4
 8005a66:	d3f3      	bcc.n	8005a50 <__mcmp+0x18>
 8005a68:	e7fb      	b.n	8005a62 <__mcmp+0x2a>
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	e7f9      	b.n	8005a62 <__mcmp+0x2a>
	...

08005a70 <__mdiff>:
 8005a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	4689      	mov	r9, r1
 8005a76:	4606      	mov	r6, r0
 8005a78:	4611      	mov	r1, r2
 8005a7a:	4648      	mov	r0, r9
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	f7ff ffdb 	bl	8005a38 <__mcmp>
 8005a82:	1e05      	subs	r5, r0, #0
 8005a84:	d112      	bne.n	8005aac <__mdiff+0x3c>
 8005a86:	4629      	mov	r1, r5
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7ff fd13 	bl	80054b4 <_Balloc>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	b928      	cbnz	r0, 8005a9e <__mdiff+0x2e>
 8005a92:	f240 2137 	movw	r1, #567	@ 0x237
 8005a96:	4b3e      	ldr	r3, [pc, #248]	@ (8005b90 <__mdiff+0x120>)
 8005a98:	483e      	ldr	r0, [pc, #248]	@ (8005b94 <__mdiff+0x124>)
 8005a9a:	f001 fa7f 	bl	8006f9c <__assert_func>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	b003      	add	sp, #12
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	bfbc      	itt	lt
 8005aae:	464b      	movlt	r3, r9
 8005ab0:	46a1      	movlt	r9, r4
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ab8:	bfba      	itte	lt
 8005aba:	461c      	movlt	r4, r3
 8005abc:	2501      	movlt	r5, #1
 8005abe:	2500      	movge	r5, #0
 8005ac0:	f7ff fcf8 	bl	80054b4 <_Balloc>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	b918      	cbnz	r0, 8005ad0 <__mdiff+0x60>
 8005ac8:	f240 2145 	movw	r1, #581	@ 0x245
 8005acc:	4b30      	ldr	r3, [pc, #192]	@ (8005b90 <__mdiff+0x120>)
 8005ace:	e7e3      	b.n	8005a98 <__mdiff+0x28>
 8005ad0:	f100 0b14 	add.w	fp, r0, #20
 8005ad4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ad8:	f109 0310 	add.w	r3, r9, #16
 8005adc:	60c5      	str	r5, [r0, #12]
 8005ade:	f04f 0c00 	mov.w	ip, #0
 8005ae2:	f109 0514 	add.w	r5, r9, #20
 8005ae6:	46d9      	mov	r9, fp
 8005ae8:	6926      	ldr	r6, [r4, #16]
 8005aea:	f104 0e14 	add.w	lr, r4, #20
 8005aee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005af2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	9b01      	ldr	r3, [sp, #4]
 8005afa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005afe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b02:	b281      	uxth	r1, r0
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	fa1f f38a 	uxth.w	r3, sl
 8005b0a:	1a5b      	subs	r3, r3, r1
 8005b0c:	0c00      	lsrs	r0, r0, #16
 8005b0e:	4463      	add	r3, ip
 8005b10:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b14:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b1e:	4576      	cmp	r6, lr
 8005b20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b24:	f849 3b04 	str.w	r3, [r9], #4
 8005b28:	d8e6      	bhi.n	8005af8 <__mdiff+0x88>
 8005b2a:	1b33      	subs	r3, r6, r4
 8005b2c:	3b15      	subs	r3, #21
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	3415      	adds	r4, #21
 8005b34:	3304      	adds	r3, #4
 8005b36:	42a6      	cmp	r6, r4
 8005b38:	bf38      	it	cc
 8005b3a:	2304      	movcc	r3, #4
 8005b3c:	441d      	add	r5, r3
 8005b3e:	445b      	add	r3, fp
 8005b40:	461e      	mov	r6, r3
 8005b42:	462c      	mov	r4, r5
 8005b44:	4544      	cmp	r4, r8
 8005b46:	d30e      	bcc.n	8005b66 <__mdiff+0xf6>
 8005b48:	f108 0103 	add.w	r1, r8, #3
 8005b4c:	1b49      	subs	r1, r1, r5
 8005b4e:	f021 0103 	bic.w	r1, r1, #3
 8005b52:	3d03      	subs	r5, #3
 8005b54:	45a8      	cmp	r8, r5
 8005b56:	bf38      	it	cc
 8005b58:	2100      	movcc	r1, #0
 8005b5a:	440b      	add	r3, r1
 8005b5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b60:	b199      	cbz	r1, 8005b8a <__mdiff+0x11a>
 8005b62:	6117      	str	r7, [r2, #16]
 8005b64:	e79e      	b.n	8005aa4 <__mdiff+0x34>
 8005b66:	46e6      	mov	lr, ip
 8005b68:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b6c:	fa1f fc81 	uxth.w	ip, r1
 8005b70:	44f4      	add	ip, lr
 8005b72:	0c08      	lsrs	r0, r1, #16
 8005b74:	4471      	add	r1, lr
 8005b76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b7a:	b289      	uxth	r1, r1
 8005b7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b84:	f846 1b04 	str.w	r1, [r6], #4
 8005b88:	e7dc      	b.n	8005b44 <__mdiff+0xd4>
 8005b8a:	3f01      	subs	r7, #1
 8005b8c:	e7e6      	b.n	8005b5c <__mdiff+0xec>
 8005b8e:	bf00      	nop
 8005b90:	08007dbb 	.word	0x08007dbb
 8005b94:	08007dcc 	.word	0x08007dcc

08005b98 <__ulp>:
 8005b98:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd4 <__ulp+0x3c>)
 8005b9a:	400b      	ands	r3, r1
 8005b9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	dc08      	bgt.n	8005bb6 <__ulp+0x1e>
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005baa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005bae:	da04      	bge.n	8005bba <__ulp+0x22>
 8005bb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005bb4:	4113      	asrs	r3, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	e008      	b.n	8005bcc <__ulp+0x34>
 8005bba:	f1a2 0314 	sub.w	r3, r2, #20
 8005bbe:	2b1e      	cmp	r3, #30
 8005bc0:	bfd6      	itet	le
 8005bc2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005bc6:	2201      	movgt	r2, #1
 8005bc8:	40da      	lsrle	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	7ff00000 	.word	0x7ff00000

08005bd8 <__b2d>:
 8005bd8:	6902      	ldr	r2, [r0, #16]
 8005bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bdc:	f100 0614 	add.w	r6, r0, #20
 8005be0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005be4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005be8:	4f1e      	ldr	r7, [pc, #120]	@ (8005c64 <__b2d+0x8c>)
 8005bea:	4620      	mov	r0, r4
 8005bec:	f7ff fd54 	bl	8005698 <__hi0bits>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f1c0 0020 	rsb	r0, r0, #32
 8005bf6:	2b0a      	cmp	r3, #10
 8005bf8:	f1a2 0504 	sub.w	r5, r2, #4
 8005bfc:	6008      	str	r0, [r1, #0]
 8005bfe:	dc12      	bgt.n	8005c26 <__b2d+0x4e>
 8005c00:	42ae      	cmp	r6, r5
 8005c02:	bf2c      	ite	cs
 8005c04:	2200      	movcs	r2, #0
 8005c06:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005c0a:	f1c3 0c0b 	rsb	ip, r3, #11
 8005c0e:	3315      	adds	r3, #21
 8005c10:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005c14:	fa04 f303 	lsl.w	r3, r4, r3
 8005c18:	fa22 f20c 	lsr.w	r2, r2, ip
 8005c1c:	ea4e 0107 	orr.w	r1, lr, r7
 8005c20:	431a      	orrs	r2, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c26:	42ae      	cmp	r6, r5
 8005c28:	bf36      	itet	cc
 8005c2a:	f1a2 0508 	subcc.w	r5, r2, #8
 8005c2e:	2200      	movcs	r2, #0
 8005c30:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005c34:	3b0b      	subs	r3, #11
 8005c36:	d012      	beq.n	8005c5e <__b2d+0x86>
 8005c38:	f1c3 0720 	rsb	r7, r3, #32
 8005c3c:	fa22 f107 	lsr.w	r1, r2, r7
 8005c40:	409c      	lsls	r4, r3
 8005c42:	430c      	orrs	r4, r1
 8005c44:	42b5      	cmp	r5, r6
 8005c46:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005c4a:	bf94      	ite	ls
 8005c4c:	2400      	movls	r4, #0
 8005c4e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005c52:	409a      	lsls	r2, r3
 8005c54:	40fc      	lsrs	r4, r7
 8005c56:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005c5a:	4322      	orrs	r2, r4
 8005c5c:	e7e1      	b.n	8005c22 <__b2d+0x4a>
 8005c5e:	ea44 0107 	orr.w	r1, r4, r7
 8005c62:	e7de      	b.n	8005c22 <__b2d+0x4a>
 8005c64:	3ff00000 	.word	0x3ff00000

08005c68 <__d2b>:
 8005c68:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	4690      	mov	r8, r2
 8005c70:	4699      	mov	r9, r3
 8005c72:	9e08      	ldr	r6, [sp, #32]
 8005c74:	f7ff fc1e 	bl	80054b4 <_Balloc>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	b930      	cbnz	r0, 8005c8a <__d2b+0x22>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005c82:	4b23      	ldr	r3, [pc, #140]	@ (8005d10 <__d2b+0xa8>)
 8005c84:	4823      	ldr	r0, [pc, #140]	@ (8005d14 <__d2b+0xac>)
 8005c86:	f001 f989 	bl	8006f9c <__assert_func>
 8005c8a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005c8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c92:	b10d      	cbz	r5, 8005c98 <__d2b+0x30>
 8005c94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	f1b8 0300 	subs.w	r3, r8, #0
 8005c9e:	d024      	beq.n	8005cea <__d2b+0x82>
 8005ca0:	4668      	mov	r0, sp
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	f7ff fd17 	bl	80056d6 <__lo0bits>
 8005ca8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005cac:	b1d8      	cbz	r0, 8005ce6 <__d2b+0x7e>
 8005cae:	f1c0 0320 	rsb	r3, r0, #32
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	40c2      	lsrs	r2, r0
 8005cba:	6163      	str	r3, [r4, #20]
 8005cbc:	9201      	str	r2, [sp, #4]
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2201      	moveq	r2, #1
 8005cc6:	2202      	movne	r2, #2
 8005cc8:	61a3      	str	r3, [r4, #24]
 8005cca:	6122      	str	r2, [r4, #16]
 8005ccc:	b1ad      	cbz	r5, 8005cfa <__d2b+0x92>
 8005cce:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005cd2:	4405      	add	r5, r0
 8005cd4:	6035      	str	r5, [r6, #0]
 8005cd6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cdc:	6018      	str	r0, [r3, #0]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	b002      	add	sp, #8
 8005ce2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005ce6:	6161      	str	r1, [r4, #20]
 8005ce8:	e7e9      	b.n	8005cbe <__d2b+0x56>
 8005cea:	a801      	add	r0, sp, #4
 8005cec:	f7ff fcf3 	bl	80056d6 <__lo0bits>
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	6163      	str	r3, [r4, #20]
 8005cf6:	3020      	adds	r0, #32
 8005cf8:	e7e7      	b.n	8005cca <__d2b+0x62>
 8005cfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005cfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d02:	6030      	str	r0, [r6, #0]
 8005d04:	6918      	ldr	r0, [r3, #16]
 8005d06:	f7ff fcc7 	bl	8005698 <__hi0bits>
 8005d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d0e:	e7e4      	b.n	8005cda <__d2b+0x72>
 8005d10:	08007dbb 	.word	0x08007dbb
 8005d14:	08007dcc 	.word	0x08007dcc

08005d18 <__ratio>:
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	b085      	sub	sp, #20
 8005d1e:	e9cd 1000 	strd	r1, r0, [sp]
 8005d22:	a902      	add	r1, sp, #8
 8005d24:	f7ff ff58 	bl	8005bd8 <__b2d>
 8005d28:	468b      	mov	fp, r1
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	9800      	ldr	r0, [sp, #0]
 8005d30:	a903      	add	r1, sp, #12
 8005d32:	f7ff ff51 	bl	8005bd8 <__b2d>
 8005d36:	460d      	mov	r5, r1
 8005d38:	9b01      	ldr	r3, [sp, #4]
 8005d3a:	4689      	mov	r9, r1
 8005d3c:	6919      	ldr	r1, [r3, #16]
 8005d3e:	9b00      	ldr	r3, [sp, #0]
 8005d40:	4604      	mov	r4, r0
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	4630      	mov	r0, r6
 8005d46:	1ac9      	subs	r1, r1, r3
 8005d48:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bfcd      	iteet	gt
 8005d56:	463a      	movgt	r2, r7
 8005d58:	462a      	movle	r2, r5
 8005d5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005d5e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005d62:	bfd8      	it	le
 8005d64:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005d68:	464b      	mov	r3, r9
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	4659      	mov	r1, fp
 8005d6e:	f7fa fcdd 	bl	800072c <__aeabi_ddiv>
 8005d72:	b005      	add	sp, #20
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d78 <__copybits>:
 8005d78:	3901      	subs	r1, #1
 8005d7a:	b570      	push	{r4, r5, r6, lr}
 8005d7c:	1149      	asrs	r1, r1, #5
 8005d7e:	6914      	ldr	r4, [r2, #16]
 8005d80:	3101      	adds	r1, #1
 8005d82:	f102 0314 	add.w	r3, r2, #20
 8005d86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005d8e:	1f05      	subs	r5, r0, #4
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d30c      	bcc.n	8005dae <__copybits+0x36>
 8005d94:	1aa3      	subs	r3, r4, r2
 8005d96:	3b11      	subs	r3, #17
 8005d98:	f023 0303 	bic.w	r3, r3, #3
 8005d9c:	3211      	adds	r2, #17
 8005d9e:	42a2      	cmp	r2, r4
 8005da0:	bf88      	it	hi
 8005da2:	2300      	movhi	r3, #0
 8005da4:	4418      	add	r0, r3
 8005da6:	2300      	movs	r3, #0
 8005da8:	4288      	cmp	r0, r1
 8005daa:	d305      	bcc.n	8005db8 <__copybits+0x40>
 8005dac:	bd70      	pop	{r4, r5, r6, pc}
 8005dae:	f853 6b04 	ldr.w	r6, [r3], #4
 8005db2:	f845 6f04 	str.w	r6, [r5, #4]!
 8005db6:	e7eb      	b.n	8005d90 <__copybits+0x18>
 8005db8:	f840 3b04 	str.w	r3, [r0], #4
 8005dbc:	e7f4      	b.n	8005da8 <__copybits+0x30>

08005dbe <__any_on>:
 8005dbe:	f100 0214 	add.w	r2, r0, #20
 8005dc2:	6900      	ldr	r0, [r0, #16]
 8005dc4:	114b      	asrs	r3, r1, #5
 8005dc6:	4298      	cmp	r0, r3
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	db11      	blt.n	8005df0 <__any_on+0x32>
 8005dcc:	dd0a      	ble.n	8005de4 <__any_on+0x26>
 8005dce:	f011 011f 	ands.w	r1, r1, #31
 8005dd2:	d007      	beq.n	8005de4 <__any_on+0x26>
 8005dd4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005dd8:	fa24 f001 	lsr.w	r0, r4, r1
 8005ddc:	fa00 f101 	lsl.w	r1, r0, r1
 8005de0:	428c      	cmp	r4, r1
 8005de2:	d10b      	bne.n	8005dfc <__any_on+0x3e>
 8005de4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d803      	bhi.n	8005df4 <__any_on+0x36>
 8005dec:	2000      	movs	r0, #0
 8005dee:	bd10      	pop	{r4, pc}
 8005df0:	4603      	mov	r3, r0
 8005df2:	e7f7      	b.n	8005de4 <__any_on+0x26>
 8005df4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	d0f5      	beq.n	8005de8 <__any_on+0x2a>
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	e7f6      	b.n	8005dee <__any_on+0x30>

08005e00 <sulp>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	460f      	mov	r7, r1
 8005e06:	4690      	mov	r8, r2
 8005e08:	f7ff fec6 	bl	8005b98 <__ulp>
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	460d      	mov	r5, r1
 8005e10:	f1b8 0f00 	cmp.w	r8, #0
 8005e14:	d011      	beq.n	8005e3a <sulp+0x3a>
 8005e16:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005e1a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dd0b      	ble.n	8005e3a <sulp+0x3a>
 8005e22:	2400      	movs	r4, #0
 8005e24:	051b      	lsls	r3, r3, #20
 8005e26:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005e2a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	f7fa fb51 	bl	80004d8 <__aeabi_dmul>
 8005e36:	4604      	mov	r4, r0
 8005e38:	460d      	mov	r5, r1
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e42:	0000      	movs	r0, r0
 8005e44:	0000      	movs	r0, r0
	...

08005e48 <_strtod_l>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	b09f      	sub	sp, #124	@ 0x7c
 8005e4e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005e50:	2200      	movs	r2, #0
 8005e52:	460c      	mov	r4, r1
 8005e54:	921a      	str	r2, [sp, #104]	@ 0x68
 8005e56:	f04f 0a00 	mov.w	sl, #0
 8005e5a:	f04f 0b00 	mov.w	fp, #0
 8005e5e:	460a      	mov	r2, r1
 8005e60:	9005      	str	r0, [sp, #20]
 8005e62:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e64:	7811      	ldrb	r1, [r2, #0]
 8005e66:	292b      	cmp	r1, #43	@ 0x2b
 8005e68:	d048      	beq.n	8005efc <_strtod_l+0xb4>
 8005e6a:	d836      	bhi.n	8005eda <_strtod_l+0x92>
 8005e6c:	290d      	cmp	r1, #13
 8005e6e:	d830      	bhi.n	8005ed2 <_strtod_l+0x8a>
 8005e70:	2908      	cmp	r1, #8
 8005e72:	d830      	bhi.n	8005ed6 <_strtod_l+0x8e>
 8005e74:	2900      	cmp	r1, #0
 8005e76:	d039      	beq.n	8005eec <_strtod_l+0xa4>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005e7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005e7e:	782a      	ldrb	r2, [r5, #0]
 8005e80:	2a30      	cmp	r2, #48	@ 0x30
 8005e82:	f040 80b1 	bne.w	8005fe8 <_strtod_l+0x1a0>
 8005e86:	786a      	ldrb	r2, [r5, #1]
 8005e88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005e8c:	2a58      	cmp	r2, #88	@ 0x58
 8005e8e:	d16c      	bne.n	8005f6a <_strtod_l+0x122>
 8005e90:	9302      	str	r3, [sp, #8]
 8005e92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e94:	4a8e      	ldr	r2, [pc, #568]	@ (80060d0 <_strtod_l+0x288>)
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	ab1a      	add	r3, sp, #104	@ 0x68
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	9805      	ldr	r0, [sp, #20]
 8005e9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005ea0:	a919      	add	r1, sp, #100	@ 0x64
 8005ea2:	f001 f915 	bl	80070d0 <__gethex>
 8005ea6:	f010 060f 	ands.w	r6, r0, #15
 8005eaa:	4604      	mov	r4, r0
 8005eac:	d005      	beq.n	8005eba <_strtod_l+0x72>
 8005eae:	2e06      	cmp	r6, #6
 8005eb0:	d126      	bne.n	8005f00 <_strtod_l+0xb8>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	9519      	str	r5, [sp, #100]	@ 0x64
 8005eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 8584 	bne.w	80069ca <_strtod_l+0xb82>
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec4:	b1bb      	cbz	r3, 8005ef6 <_strtod_l+0xae>
 8005ec6:	4650      	mov	r0, sl
 8005ec8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005ecc:	b01f      	add	sp, #124	@ 0x7c
 8005ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed2:	2920      	cmp	r1, #32
 8005ed4:	d1d0      	bne.n	8005e78 <_strtod_l+0x30>
 8005ed6:	3201      	adds	r2, #1
 8005ed8:	e7c3      	b.n	8005e62 <_strtod_l+0x1a>
 8005eda:	292d      	cmp	r1, #45	@ 0x2d
 8005edc:	d1cc      	bne.n	8005e78 <_strtod_l+0x30>
 8005ede:	2101      	movs	r1, #1
 8005ee0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005ee2:	1c51      	adds	r1, r2, #1
 8005ee4:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ee6:	7852      	ldrb	r2, [r2, #1]
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	d1c7      	bne.n	8005e7c <_strtod_l+0x34>
 8005eec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005eee:	9419      	str	r4, [sp, #100]	@ 0x64
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f040 8568 	bne.w	80069c6 <_strtod_l+0xb7e>
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	4659      	mov	r1, fp
 8005efa:	e7e7      	b.n	8005ecc <_strtod_l+0x84>
 8005efc:	2100      	movs	r1, #0
 8005efe:	e7ef      	b.n	8005ee0 <_strtod_l+0x98>
 8005f00:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f02:	b13a      	cbz	r2, 8005f14 <_strtod_l+0xcc>
 8005f04:	2135      	movs	r1, #53	@ 0x35
 8005f06:	a81c      	add	r0, sp, #112	@ 0x70
 8005f08:	f7ff ff36 	bl	8005d78 <__copybits>
 8005f0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f0e:	9805      	ldr	r0, [sp, #20]
 8005f10:	f7ff fb10 	bl	8005534 <_Bfree>
 8005f14:	3e01      	subs	r6, #1
 8005f16:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005f18:	2e04      	cmp	r6, #4
 8005f1a:	d806      	bhi.n	8005f2a <_strtod_l+0xe2>
 8005f1c:	e8df f006 	tbb	[pc, r6]
 8005f20:	201d0314 	.word	0x201d0314
 8005f24:	14          	.byte	0x14
 8005f25:	00          	.byte	0x00
 8005f26:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005f2a:	05e1      	lsls	r1, r4, #23
 8005f2c:	bf48      	it	mi
 8005f2e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005f32:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f36:	0d1b      	lsrs	r3, r3, #20
 8005f38:	051b      	lsls	r3, r3, #20
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1bd      	bne.n	8005eba <_strtod_l+0x72>
 8005f3e:	f7fe fb29 	bl	8004594 <__errno>
 8005f42:	2322      	movs	r3, #34	@ 0x22
 8005f44:	6003      	str	r3, [r0, #0]
 8005f46:	e7b8      	b.n	8005eba <_strtod_l+0x72>
 8005f48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005f4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005f50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f54:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005f58:	e7e7      	b.n	8005f2a <_strtod_l+0xe2>
 8005f5a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80060d4 <_strtod_l+0x28c>
 8005f5e:	e7e4      	b.n	8005f2a <_strtod_l+0xe2>
 8005f60:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005f64:	f04f 3aff 	mov.w	sl, #4294967295
 8005f68:	e7df      	b.n	8005f2a <_strtod_l+0xe2>
 8005f6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b30      	cmp	r3, #48	@ 0x30
 8005f74:	d0f9      	beq.n	8005f6a <_strtod_l+0x122>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d09f      	beq.n	8005eba <_strtod_l+0x72>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f80:	220a      	movs	r2, #10
 8005f82:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f84:	2300      	movs	r3, #0
 8005f86:	461f      	mov	r7, r3
 8005f88:	9308      	str	r3, [sp, #32]
 8005f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f8c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005f8e:	7805      	ldrb	r5, [r0, #0]
 8005f90:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005f94:	b2d9      	uxtb	r1, r3
 8005f96:	2909      	cmp	r1, #9
 8005f98:	d928      	bls.n	8005fec <_strtod_l+0x1a4>
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	494e      	ldr	r1, [pc, #312]	@ (80060d8 <_strtod_l+0x290>)
 8005f9e:	f000 ffc7 	bl	8006f30 <strncmp>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d032      	beq.n	800600c <_strtod_l+0x1c4>
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	462a      	mov	r2, r5
 8005faa:	4681      	mov	r9, r0
 8005fac:	463d      	mov	r5, r7
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2a65      	cmp	r2, #101	@ 0x65
 8005fb2:	d001      	beq.n	8005fb8 <_strtod_l+0x170>
 8005fb4:	2a45      	cmp	r2, #69	@ 0x45
 8005fb6:	d114      	bne.n	8005fe2 <_strtod_l+0x19a>
 8005fb8:	b91d      	cbnz	r5, 8005fc2 <_strtod_l+0x17a>
 8005fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fbc:	4302      	orrs	r2, r0
 8005fbe:	d095      	beq.n	8005eec <_strtod_l+0xa4>
 8005fc0:	2500      	movs	r5, #0
 8005fc2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005fc4:	1c62      	adds	r2, r4, #1
 8005fc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fc8:	7862      	ldrb	r2, [r4, #1]
 8005fca:	2a2b      	cmp	r2, #43	@ 0x2b
 8005fcc:	d077      	beq.n	80060be <_strtod_l+0x276>
 8005fce:	2a2d      	cmp	r2, #45	@ 0x2d
 8005fd0:	d07b      	beq.n	80060ca <_strtod_l+0x282>
 8005fd2:	f04f 0c00 	mov.w	ip, #0
 8005fd6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005fda:	2909      	cmp	r1, #9
 8005fdc:	f240 8082 	bls.w	80060e4 <_strtod_l+0x29c>
 8005fe0:	9419      	str	r4, [sp, #100]	@ 0x64
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	e0a2      	b.n	800612e <_strtod_l+0x2e6>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e7c7      	b.n	8005f7c <_strtod_l+0x134>
 8005fec:	2f08      	cmp	r7, #8
 8005fee:	bfd5      	itete	le
 8005ff0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005ff2:	9908      	ldrgt	r1, [sp, #32]
 8005ff4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ff8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005ffc:	f100 0001 	add.w	r0, r0, #1
 8006000:	bfd4      	ite	le
 8006002:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006004:	9308      	strgt	r3, [sp, #32]
 8006006:	3701      	adds	r7, #1
 8006008:	9019      	str	r0, [sp, #100]	@ 0x64
 800600a:	e7bf      	b.n	8005f8c <_strtod_l+0x144>
 800600c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	9219      	str	r2, [sp, #100]	@ 0x64
 8006012:	785a      	ldrb	r2, [r3, #1]
 8006014:	b37f      	cbz	r7, 8006076 <_strtod_l+0x22e>
 8006016:	4681      	mov	r9, r0
 8006018:	463d      	mov	r5, r7
 800601a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800601e:	2b09      	cmp	r3, #9
 8006020:	d912      	bls.n	8006048 <_strtod_l+0x200>
 8006022:	2301      	movs	r3, #1
 8006024:	e7c4      	b.n	8005fb0 <_strtod_l+0x168>
 8006026:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006028:	3001      	adds	r0, #1
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	9219      	str	r2, [sp, #100]	@ 0x64
 800602e:	785a      	ldrb	r2, [r3, #1]
 8006030:	2a30      	cmp	r2, #48	@ 0x30
 8006032:	d0f8      	beq.n	8006026 <_strtod_l+0x1de>
 8006034:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006038:	2b08      	cmp	r3, #8
 800603a:	f200 84cb 	bhi.w	80069d4 <_strtod_l+0xb8c>
 800603e:	4681      	mov	r9, r0
 8006040:	2000      	movs	r0, #0
 8006042:	4605      	mov	r5, r0
 8006044:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006046:	930c      	str	r3, [sp, #48]	@ 0x30
 8006048:	3a30      	subs	r2, #48	@ 0x30
 800604a:	f100 0301 	add.w	r3, r0, #1
 800604e:	d02a      	beq.n	80060a6 <_strtod_l+0x25e>
 8006050:	4499      	add	r9, r3
 8006052:	210a      	movs	r1, #10
 8006054:	462b      	mov	r3, r5
 8006056:	eb00 0c05 	add.w	ip, r0, r5
 800605a:	4563      	cmp	r3, ip
 800605c:	d10d      	bne.n	800607a <_strtod_l+0x232>
 800605e:	1c69      	adds	r1, r5, #1
 8006060:	4401      	add	r1, r0
 8006062:	4428      	add	r0, r5
 8006064:	2808      	cmp	r0, #8
 8006066:	dc16      	bgt.n	8006096 <_strtod_l+0x24e>
 8006068:	230a      	movs	r3, #10
 800606a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800606c:	fb03 2300 	mla	r3, r3, r0, r2
 8006070:	930a      	str	r3, [sp, #40]	@ 0x28
 8006072:	2300      	movs	r3, #0
 8006074:	e018      	b.n	80060a8 <_strtod_l+0x260>
 8006076:	4638      	mov	r0, r7
 8006078:	e7da      	b.n	8006030 <_strtod_l+0x1e8>
 800607a:	2b08      	cmp	r3, #8
 800607c:	f103 0301 	add.w	r3, r3, #1
 8006080:	dc03      	bgt.n	800608a <_strtod_l+0x242>
 8006082:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006084:	434e      	muls	r6, r1
 8006086:	960a      	str	r6, [sp, #40]	@ 0x28
 8006088:	e7e7      	b.n	800605a <_strtod_l+0x212>
 800608a:	2b10      	cmp	r3, #16
 800608c:	bfde      	ittt	le
 800608e:	9e08      	ldrle	r6, [sp, #32]
 8006090:	434e      	mulle	r6, r1
 8006092:	9608      	strle	r6, [sp, #32]
 8006094:	e7e1      	b.n	800605a <_strtod_l+0x212>
 8006096:	280f      	cmp	r0, #15
 8006098:	dceb      	bgt.n	8006072 <_strtod_l+0x22a>
 800609a:	230a      	movs	r3, #10
 800609c:	9808      	ldr	r0, [sp, #32]
 800609e:	fb03 2300 	mla	r3, r3, r0, r2
 80060a2:	9308      	str	r3, [sp, #32]
 80060a4:	e7e5      	b.n	8006072 <_strtod_l+0x22a>
 80060a6:	4629      	mov	r1, r5
 80060a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060aa:	460d      	mov	r5, r1
 80060ac:	1c50      	adds	r0, r2, #1
 80060ae:	9019      	str	r0, [sp, #100]	@ 0x64
 80060b0:	7852      	ldrb	r2, [r2, #1]
 80060b2:	4618      	mov	r0, r3
 80060b4:	e7b1      	b.n	800601a <_strtod_l+0x1d2>
 80060b6:	f04f 0900 	mov.w	r9, #0
 80060ba:	2301      	movs	r3, #1
 80060bc:	e77d      	b.n	8005fba <_strtod_l+0x172>
 80060be:	f04f 0c00 	mov.w	ip, #0
 80060c2:	1ca2      	adds	r2, r4, #2
 80060c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80060c6:	78a2      	ldrb	r2, [r4, #2]
 80060c8:	e785      	b.n	8005fd6 <_strtod_l+0x18e>
 80060ca:	f04f 0c01 	mov.w	ip, #1
 80060ce:	e7f8      	b.n	80060c2 <_strtod_l+0x27a>
 80060d0:	08007f40 	.word	0x08007f40
 80060d4:	7ff00000 	.word	0x7ff00000
 80060d8:	08007f28 	.word	0x08007f28
 80060dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060de:	1c51      	adds	r1, r2, #1
 80060e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80060e2:	7852      	ldrb	r2, [r2, #1]
 80060e4:	2a30      	cmp	r2, #48	@ 0x30
 80060e6:	d0f9      	beq.n	80060dc <_strtod_l+0x294>
 80060e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80060ec:	2908      	cmp	r1, #8
 80060ee:	f63f af78 	bhi.w	8005fe2 <_strtod_l+0x19a>
 80060f2:	f04f 080a 	mov.w	r8, #10
 80060f6:	3a30      	subs	r2, #48	@ 0x30
 80060f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80060fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80060fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006100:	1c56      	adds	r6, r2, #1
 8006102:	9619      	str	r6, [sp, #100]	@ 0x64
 8006104:	7852      	ldrb	r2, [r2, #1]
 8006106:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800610a:	f1be 0f09 	cmp.w	lr, #9
 800610e:	d939      	bls.n	8006184 <_strtod_l+0x33c>
 8006110:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006112:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006116:	1a76      	subs	r6, r6, r1
 8006118:	2e08      	cmp	r6, #8
 800611a:	dc03      	bgt.n	8006124 <_strtod_l+0x2dc>
 800611c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800611e:	4588      	cmp	r8, r1
 8006120:	bfa8      	it	ge
 8006122:	4688      	movge	r8, r1
 8006124:	f1bc 0f00 	cmp.w	ip, #0
 8006128:	d001      	beq.n	800612e <_strtod_l+0x2e6>
 800612a:	f1c8 0800 	rsb	r8, r8, #0
 800612e:	2d00      	cmp	r5, #0
 8006130:	d14e      	bne.n	80061d0 <_strtod_l+0x388>
 8006132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006134:	4308      	orrs	r0, r1
 8006136:	f47f aec0 	bne.w	8005eba <_strtod_l+0x72>
 800613a:	2b00      	cmp	r3, #0
 800613c:	f47f aed6 	bne.w	8005eec <_strtod_l+0xa4>
 8006140:	2a69      	cmp	r2, #105	@ 0x69
 8006142:	d028      	beq.n	8006196 <_strtod_l+0x34e>
 8006144:	dc25      	bgt.n	8006192 <_strtod_l+0x34a>
 8006146:	2a49      	cmp	r2, #73	@ 0x49
 8006148:	d025      	beq.n	8006196 <_strtod_l+0x34e>
 800614a:	2a4e      	cmp	r2, #78	@ 0x4e
 800614c:	f47f aece 	bne.w	8005eec <_strtod_l+0xa4>
 8006150:	499a      	ldr	r1, [pc, #616]	@ (80063bc <_strtod_l+0x574>)
 8006152:	a819      	add	r0, sp, #100	@ 0x64
 8006154:	f001 f9de 	bl	8007514 <__match>
 8006158:	2800      	cmp	r0, #0
 800615a:	f43f aec7 	beq.w	8005eec <_strtod_l+0xa4>
 800615e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b28      	cmp	r3, #40	@ 0x28
 8006164:	d12e      	bne.n	80061c4 <_strtod_l+0x37c>
 8006166:	4996      	ldr	r1, [pc, #600]	@ (80063c0 <_strtod_l+0x578>)
 8006168:	aa1c      	add	r2, sp, #112	@ 0x70
 800616a:	a819      	add	r0, sp, #100	@ 0x64
 800616c:	f001 f9e6 	bl	800753c <__hexnan>
 8006170:	2805      	cmp	r0, #5
 8006172:	d127      	bne.n	80061c4 <_strtod_l+0x37c>
 8006174:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006176:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800617a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800617e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006182:	e69a      	b.n	8005eba <_strtod_l+0x72>
 8006184:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006186:	fb08 2101 	mla	r1, r8, r1, r2
 800618a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800618e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006190:	e7b5      	b.n	80060fe <_strtod_l+0x2b6>
 8006192:	2a6e      	cmp	r2, #110	@ 0x6e
 8006194:	e7da      	b.n	800614c <_strtod_l+0x304>
 8006196:	498b      	ldr	r1, [pc, #556]	@ (80063c4 <_strtod_l+0x57c>)
 8006198:	a819      	add	r0, sp, #100	@ 0x64
 800619a:	f001 f9bb 	bl	8007514 <__match>
 800619e:	2800      	cmp	r0, #0
 80061a0:	f43f aea4 	beq.w	8005eec <_strtod_l+0xa4>
 80061a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061a6:	4988      	ldr	r1, [pc, #544]	@ (80063c8 <_strtod_l+0x580>)
 80061a8:	3b01      	subs	r3, #1
 80061aa:	a819      	add	r0, sp, #100	@ 0x64
 80061ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80061ae:	f001 f9b1 	bl	8007514 <__match>
 80061b2:	b910      	cbnz	r0, 80061ba <_strtod_l+0x372>
 80061b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061b6:	3301      	adds	r3, #1
 80061b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80061ba:	f04f 0a00 	mov.w	sl, #0
 80061be:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80063cc <_strtod_l+0x584>
 80061c2:	e67a      	b.n	8005eba <_strtod_l+0x72>
 80061c4:	4882      	ldr	r0, [pc, #520]	@ (80063d0 <_strtod_l+0x588>)
 80061c6:	f000 fee3 	bl	8006f90 <nan>
 80061ca:	4682      	mov	sl, r0
 80061cc:	468b      	mov	fp, r1
 80061ce:	e674      	b.n	8005eba <_strtod_l+0x72>
 80061d0:	eba8 0309 	sub.w	r3, r8, r9
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	bf08      	it	eq
 80061d8:	462f      	moveq	r7, r5
 80061da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061dc:	2d10      	cmp	r5, #16
 80061de:	462c      	mov	r4, r5
 80061e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e2:	bfa8      	it	ge
 80061e4:	2410      	movge	r4, #16
 80061e6:	f7fa f8fd 	bl	80003e4 <__aeabi_ui2d>
 80061ea:	2d09      	cmp	r5, #9
 80061ec:	4682      	mov	sl, r0
 80061ee:	468b      	mov	fp, r1
 80061f0:	dc11      	bgt.n	8006216 <_strtod_l+0x3ce>
 80061f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f43f ae60 	beq.w	8005eba <_strtod_l+0x72>
 80061fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fc:	dd76      	ble.n	80062ec <_strtod_l+0x4a4>
 80061fe:	2b16      	cmp	r3, #22
 8006200:	dc5d      	bgt.n	80062be <_strtod_l+0x476>
 8006202:	4974      	ldr	r1, [pc, #464]	@ (80063d4 <_strtod_l+0x58c>)
 8006204:	4652      	mov	r2, sl
 8006206:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800620a:	465b      	mov	r3, fp
 800620c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006210:	f7fa f962 	bl	80004d8 <__aeabi_dmul>
 8006214:	e7d9      	b.n	80061ca <_strtod_l+0x382>
 8006216:	4b6f      	ldr	r3, [pc, #444]	@ (80063d4 <_strtod_l+0x58c>)
 8006218:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800621c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006220:	f7fa f95a 	bl	80004d8 <__aeabi_dmul>
 8006224:	4682      	mov	sl, r0
 8006226:	9808      	ldr	r0, [sp, #32]
 8006228:	468b      	mov	fp, r1
 800622a:	f7fa f8db 	bl	80003e4 <__aeabi_ui2d>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4650      	mov	r0, sl
 8006234:	4659      	mov	r1, fp
 8006236:	f7f9 ff99 	bl	800016c <__adddf3>
 800623a:	2d0f      	cmp	r5, #15
 800623c:	4682      	mov	sl, r0
 800623e:	468b      	mov	fp, r1
 8006240:	ddd7      	ble.n	80061f2 <_strtod_l+0x3aa>
 8006242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006244:	1b2c      	subs	r4, r5, r4
 8006246:	441c      	add	r4, r3
 8006248:	2c00      	cmp	r4, #0
 800624a:	f340 8096 	ble.w	800637a <_strtod_l+0x532>
 800624e:	f014 030f 	ands.w	r3, r4, #15
 8006252:	d00a      	beq.n	800626a <_strtod_l+0x422>
 8006254:	495f      	ldr	r1, [pc, #380]	@ (80063d4 <_strtod_l+0x58c>)
 8006256:	4652      	mov	r2, sl
 8006258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800625c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006260:	465b      	mov	r3, fp
 8006262:	f7fa f939 	bl	80004d8 <__aeabi_dmul>
 8006266:	4682      	mov	sl, r0
 8006268:	468b      	mov	fp, r1
 800626a:	f034 040f 	bics.w	r4, r4, #15
 800626e:	d073      	beq.n	8006358 <_strtod_l+0x510>
 8006270:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006274:	dd48      	ble.n	8006308 <_strtod_l+0x4c0>
 8006276:	2400      	movs	r4, #0
 8006278:	46a0      	mov	r8, r4
 800627a:	46a1      	mov	r9, r4
 800627c:	940a      	str	r4, [sp, #40]	@ 0x28
 800627e:	2322      	movs	r3, #34	@ 0x22
 8006280:	f04f 0a00 	mov.w	sl, #0
 8006284:	9a05      	ldr	r2, [sp, #20]
 8006286:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80063cc <_strtod_l+0x584>
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	f43f ae13 	beq.w	8005eba <_strtod_l+0x72>
 8006294:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006296:	9805      	ldr	r0, [sp, #20]
 8006298:	f7ff f94c 	bl	8005534 <_Bfree>
 800629c:	4649      	mov	r1, r9
 800629e:	9805      	ldr	r0, [sp, #20]
 80062a0:	f7ff f948 	bl	8005534 <_Bfree>
 80062a4:	4641      	mov	r1, r8
 80062a6:	9805      	ldr	r0, [sp, #20]
 80062a8:	f7ff f944 	bl	8005534 <_Bfree>
 80062ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ae:	9805      	ldr	r0, [sp, #20]
 80062b0:	f7ff f940 	bl	8005534 <_Bfree>
 80062b4:	4621      	mov	r1, r4
 80062b6:	9805      	ldr	r0, [sp, #20]
 80062b8:	f7ff f93c 	bl	8005534 <_Bfree>
 80062bc:	e5fd      	b.n	8005eba <_strtod_l+0x72>
 80062be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80062c4:	4293      	cmp	r3, r2
 80062c6:	dbbc      	blt.n	8006242 <_strtod_l+0x3fa>
 80062c8:	4c42      	ldr	r4, [pc, #264]	@ (80063d4 <_strtod_l+0x58c>)
 80062ca:	f1c5 050f 	rsb	r5, r5, #15
 80062ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80062d2:	4652      	mov	r2, sl
 80062d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062d8:	465b      	mov	r3, fp
 80062da:	f7fa f8fd 	bl	80004d8 <__aeabi_dmul>
 80062de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e0:	1b5d      	subs	r5, r3, r5
 80062e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80062e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80062ea:	e791      	b.n	8006210 <_strtod_l+0x3c8>
 80062ec:	3316      	adds	r3, #22
 80062ee:	dba8      	blt.n	8006242 <_strtod_l+0x3fa>
 80062f0:	4b38      	ldr	r3, [pc, #224]	@ (80063d4 <_strtod_l+0x58c>)
 80062f2:	eba9 0808 	sub.w	r8, r9, r8
 80062f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80062fa:	4650      	mov	r0, sl
 80062fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006300:	4659      	mov	r1, fp
 8006302:	f7fa fa13 	bl	800072c <__aeabi_ddiv>
 8006306:	e760      	b.n	80061ca <_strtod_l+0x382>
 8006308:	4b33      	ldr	r3, [pc, #204]	@ (80063d8 <_strtod_l+0x590>)
 800630a:	4650      	mov	r0, sl
 800630c:	9308      	str	r3, [sp, #32]
 800630e:	2300      	movs	r3, #0
 8006310:	4659      	mov	r1, fp
 8006312:	461e      	mov	r6, r3
 8006314:	1124      	asrs	r4, r4, #4
 8006316:	2c01      	cmp	r4, #1
 8006318:	dc21      	bgt.n	800635e <_strtod_l+0x516>
 800631a:	b10b      	cbz	r3, 8006320 <_strtod_l+0x4d8>
 800631c:	4682      	mov	sl, r0
 800631e:	468b      	mov	fp, r1
 8006320:	492d      	ldr	r1, [pc, #180]	@ (80063d8 <_strtod_l+0x590>)
 8006322:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006326:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800632a:	4652      	mov	r2, sl
 800632c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006330:	465b      	mov	r3, fp
 8006332:	f7fa f8d1 	bl	80004d8 <__aeabi_dmul>
 8006336:	4b25      	ldr	r3, [pc, #148]	@ (80063cc <_strtod_l+0x584>)
 8006338:	460a      	mov	r2, r1
 800633a:	400b      	ands	r3, r1
 800633c:	4927      	ldr	r1, [pc, #156]	@ (80063dc <_strtod_l+0x594>)
 800633e:	4682      	mov	sl, r0
 8006340:	428b      	cmp	r3, r1
 8006342:	d898      	bhi.n	8006276 <_strtod_l+0x42e>
 8006344:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006348:	428b      	cmp	r3, r1
 800634a:	bf86      	itte	hi
 800634c:	f04f 3aff 	movhi.w	sl, #4294967295
 8006350:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80063e0 <_strtod_l+0x598>
 8006354:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006358:	2300      	movs	r3, #0
 800635a:	9308      	str	r3, [sp, #32]
 800635c:	e07a      	b.n	8006454 <_strtod_l+0x60c>
 800635e:	07e2      	lsls	r2, r4, #31
 8006360:	d505      	bpl.n	800636e <_strtod_l+0x526>
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f7fa f8b6 	bl	80004d8 <__aeabi_dmul>
 800636c:	2301      	movs	r3, #1
 800636e:	9a08      	ldr	r2, [sp, #32]
 8006370:	3601      	adds	r6, #1
 8006372:	3208      	adds	r2, #8
 8006374:	1064      	asrs	r4, r4, #1
 8006376:	9208      	str	r2, [sp, #32]
 8006378:	e7cd      	b.n	8006316 <_strtod_l+0x4ce>
 800637a:	d0ed      	beq.n	8006358 <_strtod_l+0x510>
 800637c:	4264      	negs	r4, r4
 800637e:	f014 020f 	ands.w	r2, r4, #15
 8006382:	d00a      	beq.n	800639a <_strtod_l+0x552>
 8006384:	4b13      	ldr	r3, [pc, #76]	@ (80063d4 <_strtod_l+0x58c>)
 8006386:	4650      	mov	r0, sl
 8006388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800638c:	4659      	mov	r1, fp
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7fa f9cb 	bl	800072c <__aeabi_ddiv>
 8006396:	4682      	mov	sl, r0
 8006398:	468b      	mov	fp, r1
 800639a:	1124      	asrs	r4, r4, #4
 800639c:	d0dc      	beq.n	8006358 <_strtod_l+0x510>
 800639e:	2c1f      	cmp	r4, #31
 80063a0:	dd20      	ble.n	80063e4 <_strtod_l+0x59c>
 80063a2:	2400      	movs	r4, #0
 80063a4:	46a0      	mov	r8, r4
 80063a6:	46a1      	mov	r9, r4
 80063a8:	940a      	str	r4, [sp, #40]	@ 0x28
 80063aa:	2322      	movs	r3, #34	@ 0x22
 80063ac:	9a05      	ldr	r2, [sp, #20]
 80063ae:	f04f 0a00 	mov.w	sl, #0
 80063b2:	f04f 0b00 	mov.w	fp, #0
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	e768      	b.n	800628c <_strtod_l+0x444>
 80063ba:	bf00      	nop
 80063bc:	08007d13 	.word	0x08007d13
 80063c0:	08007f2c 	.word	0x08007f2c
 80063c4:	08007d0b 	.word	0x08007d0b
 80063c8:	08007d42 	.word	0x08007d42
 80063cc:	7ff00000 	.word	0x7ff00000
 80063d0:	080080d5 	.word	0x080080d5
 80063d4:	08007e60 	.word	0x08007e60
 80063d8:	08007e38 	.word	0x08007e38
 80063dc:	7ca00000 	.word	0x7ca00000
 80063e0:	7fefffff 	.word	0x7fefffff
 80063e4:	f014 0310 	ands.w	r3, r4, #16
 80063e8:	bf18      	it	ne
 80063ea:	236a      	movne	r3, #106	@ 0x6a
 80063ec:	4650      	mov	r0, sl
 80063ee:	9308      	str	r3, [sp, #32]
 80063f0:	4659      	mov	r1, fp
 80063f2:	2300      	movs	r3, #0
 80063f4:	4ea9      	ldr	r6, [pc, #676]	@ (800669c <_strtod_l+0x854>)
 80063f6:	07e2      	lsls	r2, r4, #31
 80063f8:	d504      	bpl.n	8006404 <_strtod_l+0x5bc>
 80063fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063fe:	f7fa f86b 	bl	80004d8 <__aeabi_dmul>
 8006402:	2301      	movs	r3, #1
 8006404:	1064      	asrs	r4, r4, #1
 8006406:	f106 0608 	add.w	r6, r6, #8
 800640a:	d1f4      	bne.n	80063f6 <_strtod_l+0x5ae>
 800640c:	b10b      	cbz	r3, 8006412 <_strtod_l+0x5ca>
 800640e:	4682      	mov	sl, r0
 8006410:	468b      	mov	fp, r1
 8006412:	9b08      	ldr	r3, [sp, #32]
 8006414:	b1b3      	cbz	r3, 8006444 <_strtod_l+0x5fc>
 8006416:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800641a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800641e:	2b00      	cmp	r3, #0
 8006420:	4659      	mov	r1, fp
 8006422:	dd0f      	ble.n	8006444 <_strtod_l+0x5fc>
 8006424:	2b1f      	cmp	r3, #31
 8006426:	dd57      	ble.n	80064d8 <_strtod_l+0x690>
 8006428:	2b34      	cmp	r3, #52	@ 0x34
 800642a:	bfd8      	it	le
 800642c:	f04f 33ff 	movle.w	r3, #4294967295
 8006430:	f04f 0a00 	mov.w	sl, #0
 8006434:	bfcf      	iteee	gt
 8006436:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800643a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800643e:	4093      	lslle	r3, r2
 8006440:	ea03 0b01 	andle.w	fp, r3, r1
 8006444:	2200      	movs	r2, #0
 8006446:	2300      	movs	r3, #0
 8006448:	4650      	mov	r0, sl
 800644a:	4659      	mov	r1, fp
 800644c:	f7fa faac 	bl	80009a8 <__aeabi_dcmpeq>
 8006450:	2800      	cmp	r0, #0
 8006452:	d1a6      	bne.n	80063a2 <_strtod_l+0x55a>
 8006454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006456:	463a      	mov	r2, r7
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800645c:	462b      	mov	r3, r5
 800645e:	9805      	ldr	r0, [sp, #20]
 8006460:	f7ff f8d0 	bl	8005604 <__s2b>
 8006464:	900a      	str	r0, [sp, #40]	@ 0x28
 8006466:	2800      	cmp	r0, #0
 8006468:	f43f af05 	beq.w	8006276 <_strtod_l+0x42e>
 800646c:	2400      	movs	r4, #0
 800646e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006470:	eba9 0308 	sub.w	r3, r9, r8
 8006474:	2a00      	cmp	r2, #0
 8006476:	bfa8      	it	ge
 8006478:	2300      	movge	r3, #0
 800647a:	46a0      	mov	r8, r4
 800647c:	9312      	str	r3, [sp, #72]	@ 0x48
 800647e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006482:	9316      	str	r3, [sp, #88]	@ 0x58
 8006484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006486:	9805      	ldr	r0, [sp, #20]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	f7ff f813 	bl	80054b4 <_Balloc>
 800648e:	4681      	mov	r9, r0
 8006490:	2800      	cmp	r0, #0
 8006492:	f43f aef4 	beq.w	800627e <_strtod_l+0x436>
 8006496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006498:	300c      	adds	r0, #12
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	f103 010c 	add.w	r1, r3, #12
 80064a0:	3202      	adds	r2, #2
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	f000 fd66 	bl	8006f74 <memcpy>
 80064a8:	ab1c      	add	r3, sp, #112	@ 0x70
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	ab1b      	add	r3, sp, #108	@ 0x6c
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4652      	mov	r2, sl
 80064b2:	465b      	mov	r3, fp
 80064b4:	9805      	ldr	r0, [sp, #20]
 80064b6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80064ba:	f7ff fbd5 	bl	8005c68 <__d2b>
 80064be:	901a      	str	r0, [sp, #104]	@ 0x68
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f43f aedc 	beq.w	800627e <_strtod_l+0x436>
 80064c6:	2101      	movs	r1, #1
 80064c8:	9805      	ldr	r0, [sp, #20]
 80064ca:	f7ff f931 	bl	8005730 <__i2b>
 80064ce:	4680      	mov	r8, r0
 80064d0:	b948      	cbnz	r0, 80064e6 <_strtod_l+0x69e>
 80064d2:	f04f 0800 	mov.w	r8, #0
 80064d6:	e6d2      	b.n	800627e <_strtod_l+0x436>
 80064d8:	f04f 32ff 	mov.w	r2, #4294967295
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	ea03 0a0a 	and.w	sl, r3, sl
 80064e4:	e7ae      	b.n	8006444 <_strtod_l+0x5fc>
 80064e6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80064e8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80064ea:	2d00      	cmp	r5, #0
 80064ec:	bfab      	itete	ge
 80064ee:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80064f0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80064f2:	18ef      	addge	r7, r5, r3
 80064f4:	1b5e      	sublt	r6, r3, r5
 80064f6:	9b08      	ldr	r3, [sp, #32]
 80064f8:	bfa8      	it	ge
 80064fa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80064fc:	eba5 0503 	sub.w	r5, r5, r3
 8006500:	4415      	add	r5, r2
 8006502:	4b67      	ldr	r3, [pc, #412]	@ (80066a0 <_strtod_l+0x858>)
 8006504:	f105 35ff 	add.w	r5, r5, #4294967295
 8006508:	bfb8      	it	lt
 800650a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800650c:	429d      	cmp	r5, r3
 800650e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006512:	da50      	bge.n	80065b6 <_strtod_l+0x76e>
 8006514:	1b5b      	subs	r3, r3, r5
 8006516:	2b1f      	cmp	r3, #31
 8006518:	f04f 0101 	mov.w	r1, #1
 800651c:	eba2 0203 	sub.w	r2, r2, r3
 8006520:	dc3d      	bgt.n	800659e <_strtod_l+0x756>
 8006522:	fa01 f303 	lsl.w	r3, r1, r3
 8006526:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006528:	2300      	movs	r3, #0
 800652a:	9310      	str	r3, [sp, #64]	@ 0x40
 800652c:	18bd      	adds	r5, r7, r2
 800652e:	9b08      	ldr	r3, [sp, #32]
 8006530:	42af      	cmp	r7, r5
 8006532:	4416      	add	r6, r2
 8006534:	441e      	add	r6, r3
 8006536:	463b      	mov	r3, r7
 8006538:	bfa8      	it	ge
 800653a:	462b      	movge	r3, r5
 800653c:	42b3      	cmp	r3, r6
 800653e:	bfa8      	it	ge
 8006540:	4633      	movge	r3, r6
 8006542:	2b00      	cmp	r3, #0
 8006544:	bfc2      	ittt	gt
 8006546:	1aed      	subgt	r5, r5, r3
 8006548:	1af6      	subgt	r6, r6, r3
 800654a:	1aff      	subgt	r7, r7, r3
 800654c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800654e:	2b00      	cmp	r3, #0
 8006550:	dd16      	ble.n	8006580 <_strtod_l+0x738>
 8006552:	4641      	mov	r1, r8
 8006554:	461a      	mov	r2, r3
 8006556:	9805      	ldr	r0, [sp, #20]
 8006558:	f7ff f9a8 	bl	80058ac <__pow5mult>
 800655c:	4680      	mov	r8, r0
 800655e:	2800      	cmp	r0, #0
 8006560:	d0b7      	beq.n	80064d2 <_strtod_l+0x68a>
 8006562:	4601      	mov	r1, r0
 8006564:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006566:	9805      	ldr	r0, [sp, #20]
 8006568:	f7ff f8f8 	bl	800575c <__multiply>
 800656c:	900e      	str	r0, [sp, #56]	@ 0x38
 800656e:	2800      	cmp	r0, #0
 8006570:	f43f ae85 	beq.w	800627e <_strtod_l+0x436>
 8006574:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006576:	9805      	ldr	r0, [sp, #20]
 8006578:	f7fe ffdc 	bl	8005534 <_Bfree>
 800657c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800657e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006580:	2d00      	cmp	r5, #0
 8006582:	dc1d      	bgt.n	80065c0 <_strtod_l+0x778>
 8006584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	dd23      	ble.n	80065d2 <_strtod_l+0x78a>
 800658a:	4649      	mov	r1, r9
 800658c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800658e:	9805      	ldr	r0, [sp, #20]
 8006590:	f7ff f98c 	bl	80058ac <__pow5mult>
 8006594:	4681      	mov	r9, r0
 8006596:	b9e0      	cbnz	r0, 80065d2 <_strtod_l+0x78a>
 8006598:	f04f 0900 	mov.w	r9, #0
 800659c:	e66f      	b.n	800627e <_strtod_l+0x436>
 800659e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80065a2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80065a6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80065aa:	35e2      	adds	r5, #226	@ 0xe2
 80065ac:	fa01 f305 	lsl.w	r3, r1, r5
 80065b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80065b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80065b4:	e7ba      	b.n	800652c <_strtod_l+0x6e4>
 80065b6:	2300      	movs	r3, #0
 80065b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80065ba:	2301      	movs	r3, #1
 80065bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065be:	e7b5      	b.n	800652c <_strtod_l+0x6e4>
 80065c0:	462a      	mov	r2, r5
 80065c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065c4:	9805      	ldr	r0, [sp, #20]
 80065c6:	f7ff f9cb 	bl	8005960 <__lshift>
 80065ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d1d9      	bne.n	8006584 <_strtod_l+0x73c>
 80065d0:	e655      	b.n	800627e <_strtod_l+0x436>
 80065d2:	2e00      	cmp	r6, #0
 80065d4:	dd07      	ble.n	80065e6 <_strtod_l+0x79e>
 80065d6:	4649      	mov	r1, r9
 80065d8:	4632      	mov	r2, r6
 80065da:	9805      	ldr	r0, [sp, #20]
 80065dc:	f7ff f9c0 	bl	8005960 <__lshift>
 80065e0:	4681      	mov	r9, r0
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d0d8      	beq.n	8006598 <_strtod_l+0x750>
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	dd08      	ble.n	80065fc <_strtod_l+0x7b4>
 80065ea:	4641      	mov	r1, r8
 80065ec:	463a      	mov	r2, r7
 80065ee:	9805      	ldr	r0, [sp, #20]
 80065f0:	f7ff f9b6 	bl	8005960 <__lshift>
 80065f4:	4680      	mov	r8, r0
 80065f6:	2800      	cmp	r0, #0
 80065f8:	f43f ae41 	beq.w	800627e <_strtod_l+0x436>
 80065fc:	464a      	mov	r2, r9
 80065fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006600:	9805      	ldr	r0, [sp, #20]
 8006602:	f7ff fa35 	bl	8005a70 <__mdiff>
 8006606:	4604      	mov	r4, r0
 8006608:	2800      	cmp	r0, #0
 800660a:	f43f ae38 	beq.w	800627e <_strtod_l+0x436>
 800660e:	68c3      	ldr	r3, [r0, #12]
 8006610:	4641      	mov	r1, r8
 8006612:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006614:	2300      	movs	r3, #0
 8006616:	60c3      	str	r3, [r0, #12]
 8006618:	f7ff fa0e 	bl	8005a38 <__mcmp>
 800661c:	2800      	cmp	r0, #0
 800661e:	da45      	bge.n	80066ac <_strtod_l+0x864>
 8006620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006622:	ea53 030a 	orrs.w	r3, r3, sl
 8006626:	d16b      	bne.n	8006700 <_strtod_l+0x8b8>
 8006628:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800662c:	2b00      	cmp	r3, #0
 800662e:	d167      	bne.n	8006700 <_strtod_l+0x8b8>
 8006630:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006634:	0d1b      	lsrs	r3, r3, #20
 8006636:	051b      	lsls	r3, r3, #20
 8006638:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800663c:	d960      	bls.n	8006700 <_strtod_l+0x8b8>
 800663e:	6963      	ldr	r3, [r4, #20]
 8006640:	b913      	cbnz	r3, 8006648 <_strtod_l+0x800>
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	2b01      	cmp	r3, #1
 8006646:	dd5b      	ble.n	8006700 <_strtod_l+0x8b8>
 8006648:	4621      	mov	r1, r4
 800664a:	2201      	movs	r2, #1
 800664c:	9805      	ldr	r0, [sp, #20]
 800664e:	f7ff f987 	bl	8005960 <__lshift>
 8006652:	4641      	mov	r1, r8
 8006654:	4604      	mov	r4, r0
 8006656:	f7ff f9ef 	bl	8005a38 <__mcmp>
 800665a:	2800      	cmp	r0, #0
 800665c:	dd50      	ble.n	8006700 <_strtod_l+0x8b8>
 800665e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006662:	9a08      	ldr	r2, [sp, #32]
 8006664:	0d1b      	lsrs	r3, r3, #20
 8006666:	051b      	lsls	r3, r3, #20
 8006668:	2a00      	cmp	r2, #0
 800666a:	d06a      	beq.n	8006742 <_strtod_l+0x8fa>
 800666c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006670:	d867      	bhi.n	8006742 <_strtod_l+0x8fa>
 8006672:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006676:	f67f ae98 	bls.w	80063aa <_strtod_l+0x562>
 800667a:	4650      	mov	r0, sl
 800667c:	4659      	mov	r1, fp
 800667e:	4b09      	ldr	r3, [pc, #36]	@ (80066a4 <_strtod_l+0x85c>)
 8006680:	2200      	movs	r2, #0
 8006682:	f7f9 ff29 	bl	80004d8 <__aeabi_dmul>
 8006686:	4b08      	ldr	r3, [pc, #32]	@ (80066a8 <_strtod_l+0x860>)
 8006688:	4682      	mov	sl, r0
 800668a:	400b      	ands	r3, r1
 800668c:	468b      	mov	fp, r1
 800668e:	2b00      	cmp	r3, #0
 8006690:	f47f ae00 	bne.w	8006294 <_strtod_l+0x44c>
 8006694:	2322      	movs	r3, #34	@ 0x22
 8006696:	9a05      	ldr	r2, [sp, #20]
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e5fb      	b.n	8006294 <_strtod_l+0x44c>
 800669c:	08007f58 	.word	0x08007f58
 80066a0:	fffffc02 	.word	0xfffffc02
 80066a4:	39500000 	.word	0x39500000
 80066a8:	7ff00000 	.word	0x7ff00000
 80066ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80066b0:	d165      	bne.n	800677e <_strtod_l+0x936>
 80066b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80066b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066b8:	b35a      	cbz	r2, 8006712 <_strtod_l+0x8ca>
 80066ba:	4a99      	ldr	r2, [pc, #612]	@ (8006920 <_strtod_l+0xad8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d12b      	bne.n	8006718 <_strtod_l+0x8d0>
 80066c0:	9b08      	ldr	r3, [sp, #32]
 80066c2:	4651      	mov	r1, sl
 80066c4:	b303      	cbz	r3, 8006708 <_strtod_l+0x8c0>
 80066c6:	465a      	mov	r2, fp
 80066c8:	4b96      	ldr	r3, [pc, #600]	@ (8006924 <_strtod_l+0xadc>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80066d0:	f04f 32ff 	mov.w	r2, #4294967295
 80066d4:	d81b      	bhi.n	800670e <_strtod_l+0x8c6>
 80066d6:	0d1b      	lsrs	r3, r3, #20
 80066d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	4299      	cmp	r1, r3
 80066e2:	d119      	bne.n	8006718 <_strtod_l+0x8d0>
 80066e4:	4b90      	ldr	r3, [pc, #576]	@ (8006928 <_strtod_l+0xae0>)
 80066e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d102      	bne.n	80066f2 <_strtod_l+0x8aa>
 80066ec:	3101      	adds	r1, #1
 80066ee:	f43f adc6 	beq.w	800627e <_strtod_l+0x436>
 80066f2:	f04f 0a00 	mov.w	sl, #0
 80066f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006924 <_strtod_l+0xadc>)
 80066f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066fa:	401a      	ands	r2, r3
 80066fc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006700:	9b08      	ldr	r3, [sp, #32]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1b9      	bne.n	800667a <_strtod_l+0x832>
 8006706:	e5c5      	b.n	8006294 <_strtod_l+0x44c>
 8006708:	f04f 33ff 	mov.w	r3, #4294967295
 800670c:	e7e8      	b.n	80066e0 <_strtod_l+0x898>
 800670e:	4613      	mov	r3, r2
 8006710:	e7e6      	b.n	80066e0 <_strtod_l+0x898>
 8006712:	ea53 030a 	orrs.w	r3, r3, sl
 8006716:	d0a2      	beq.n	800665e <_strtod_l+0x816>
 8006718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800671a:	b1db      	cbz	r3, 8006754 <_strtod_l+0x90c>
 800671c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800671e:	4213      	tst	r3, r2
 8006720:	d0ee      	beq.n	8006700 <_strtod_l+0x8b8>
 8006722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006724:	4650      	mov	r0, sl
 8006726:	4659      	mov	r1, fp
 8006728:	9a08      	ldr	r2, [sp, #32]
 800672a:	b1bb      	cbz	r3, 800675c <_strtod_l+0x914>
 800672c:	f7ff fb68 	bl	8005e00 <sulp>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006738:	f7f9 fd18 	bl	800016c <__adddf3>
 800673c:	4682      	mov	sl, r0
 800673e:	468b      	mov	fp, r1
 8006740:	e7de      	b.n	8006700 <_strtod_l+0x8b8>
 8006742:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006746:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800674a:	f04f 3aff 	mov.w	sl, #4294967295
 800674e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006752:	e7d5      	b.n	8006700 <_strtod_l+0x8b8>
 8006754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006756:	ea13 0f0a 	tst.w	r3, sl
 800675a:	e7e1      	b.n	8006720 <_strtod_l+0x8d8>
 800675c:	f7ff fb50 	bl	8005e00 <sulp>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006768:	f7f9 fcfe 	bl	8000168 <__aeabi_dsub>
 800676c:	2200      	movs	r2, #0
 800676e:	2300      	movs	r3, #0
 8006770:	4682      	mov	sl, r0
 8006772:	468b      	mov	fp, r1
 8006774:	f7fa f918 	bl	80009a8 <__aeabi_dcmpeq>
 8006778:	2800      	cmp	r0, #0
 800677a:	d0c1      	beq.n	8006700 <_strtod_l+0x8b8>
 800677c:	e615      	b.n	80063aa <_strtod_l+0x562>
 800677e:	4641      	mov	r1, r8
 8006780:	4620      	mov	r0, r4
 8006782:	f7ff fac9 	bl	8005d18 <__ratio>
 8006786:	2200      	movs	r2, #0
 8006788:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800678c:	4606      	mov	r6, r0
 800678e:	460f      	mov	r7, r1
 8006790:	f7fa f91e 	bl	80009d0 <__aeabi_dcmple>
 8006794:	2800      	cmp	r0, #0
 8006796:	d06d      	beq.n	8006874 <_strtod_l+0xa2c>
 8006798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d178      	bne.n	8006890 <_strtod_l+0xa48>
 800679e:	f1ba 0f00 	cmp.w	sl, #0
 80067a2:	d156      	bne.n	8006852 <_strtod_l+0xa0a>
 80067a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d158      	bne.n	8006860 <_strtod_l+0xa18>
 80067ae:	2200      	movs	r2, #0
 80067b0:	4630      	mov	r0, r6
 80067b2:	4639      	mov	r1, r7
 80067b4:	4b5d      	ldr	r3, [pc, #372]	@ (800692c <_strtod_l+0xae4>)
 80067b6:	f7fa f901 	bl	80009bc <__aeabi_dcmplt>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d157      	bne.n	800686e <_strtod_l+0xa26>
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	2200      	movs	r2, #0
 80067c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006930 <_strtod_l+0xae8>)
 80067c6:	f7f9 fe87 	bl	80004d8 <__aeabi_dmul>
 80067ca:	4606      	mov	r6, r0
 80067cc:	460f      	mov	r7, r1
 80067ce:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80067d2:	9606      	str	r6, [sp, #24]
 80067d4:	9307      	str	r3, [sp, #28]
 80067d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067da:	4d52      	ldr	r5, [pc, #328]	@ (8006924 <_strtod_l+0xadc>)
 80067dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80067e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067e2:	401d      	ands	r5, r3
 80067e4:	4b53      	ldr	r3, [pc, #332]	@ (8006934 <_strtod_l+0xaec>)
 80067e6:	429d      	cmp	r5, r3
 80067e8:	f040 80aa 	bne.w	8006940 <_strtod_l+0xaf8>
 80067ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067ee:	4650      	mov	r0, sl
 80067f0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80067f4:	4659      	mov	r1, fp
 80067f6:	f7ff f9cf 	bl	8005b98 <__ulp>
 80067fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067fe:	f7f9 fe6b 	bl	80004d8 <__aeabi_dmul>
 8006802:	4652      	mov	r2, sl
 8006804:	465b      	mov	r3, fp
 8006806:	f7f9 fcb1 	bl	800016c <__adddf3>
 800680a:	460b      	mov	r3, r1
 800680c:	4945      	ldr	r1, [pc, #276]	@ (8006924 <_strtod_l+0xadc>)
 800680e:	4a4a      	ldr	r2, [pc, #296]	@ (8006938 <_strtod_l+0xaf0>)
 8006810:	4019      	ands	r1, r3
 8006812:	4291      	cmp	r1, r2
 8006814:	4682      	mov	sl, r0
 8006816:	d942      	bls.n	800689e <_strtod_l+0xa56>
 8006818:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800681a:	4b43      	ldr	r3, [pc, #268]	@ (8006928 <_strtod_l+0xae0>)
 800681c:	429a      	cmp	r2, r3
 800681e:	d103      	bne.n	8006828 <_strtod_l+0x9e0>
 8006820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006822:	3301      	adds	r3, #1
 8006824:	f43f ad2b 	beq.w	800627e <_strtod_l+0x436>
 8006828:	f04f 3aff 	mov.w	sl, #4294967295
 800682c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006928 <_strtod_l+0xae0>
 8006830:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006832:	9805      	ldr	r0, [sp, #20]
 8006834:	f7fe fe7e 	bl	8005534 <_Bfree>
 8006838:	4649      	mov	r1, r9
 800683a:	9805      	ldr	r0, [sp, #20]
 800683c:	f7fe fe7a 	bl	8005534 <_Bfree>
 8006840:	4641      	mov	r1, r8
 8006842:	9805      	ldr	r0, [sp, #20]
 8006844:	f7fe fe76 	bl	8005534 <_Bfree>
 8006848:	4621      	mov	r1, r4
 800684a:	9805      	ldr	r0, [sp, #20]
 800684c:	f7fe fe72 	bl	8005534 <_Bfree>
 8006850:	e618      	b.n	8006484 <_strtod_l+0x63c>
 8006852:	f1ba 0f01 	cmp.w	sl, #1
 8006856:	d103      	bne.n	8006860 <_strtod_l+0xa18>
 8006858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800685a:	2b00      	cmp	r3, #0
 800685c:	f43f ada5 	beq.w	80063aa <_strtod_l+0x562>
 8006860:	2200      	movs	r2, #0
 8006862:	4b36      	ldr	r3, [pc, #216]	@ (800693c <_strtod_l+0xaf4>)
 8006864:	2600      	movs	r6, #0
 8006866:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800686a:	4f30      	ldr	r7, [pc, #192]	@ (800692c <_strtod_l+0xae4>)
 800686c:	e7b3      	b.n	80067d6 <_strtod_l+0x98e>
 800686e:	2600      	movs	r6, #0
 8006870:	4f2f      	ldr	r7, [pc, #188]	@ (8006930 <_strtod_l+0xae8>)
 8006872:	e7ac      	b.n	80067ce <_strtod_l+0x986>
 8006874:	4630      	mov	r0, r6
 8006876:	4639      	mov	r1, r7
 8006878:	4b2d      	ldr	r3, [pc, #180]	@ (8006930 <_strtod_l+0xae8>)
 800687a:	2200      	movs	r2, #0
 800687c:	f7f9 fe2c 	bl	80004d8 <__aeabi_dmul>
 8006880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006882:	4606      	mov	r6, r0
 8006884:	460f      	mov	r7, r1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0a1      	beq.n	80067ce <_strtod_l+0x986>
 800688a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800688e:	e7a2      	b.n	80067d6 <_strtod_l+0x98e>
 8006890:	2200      	movs	r2, #0
 8006892:	4b26      	ldr	r3, [pc, #152]	@ (800692c <_strtod_l+0xae4>)
 8006894:	4616      	mov	r6, r2
 8006896:	461f      	mov	r7, r3
 8006898:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800689c:	e79b      	b.n	80067d6 <_strtod_l+0x98e>
 800689e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1c1      	bne.n	8006830 <_strtod_l+0x9e8>
 80068ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068b0:	0d1b      	lsrs	r3, r3, #20
 80068b2:	051b      	lsls	r3, r3, #20
 80068b4:	429d      	cmp	r5, r3
 80068b6:	d1bb      	bne.n	8006830 <_strtod_l+0x9e8>
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7fa fbd2 	bl	8001064 <__aeabi_d2lz>
 80068c0:	f7f9 fddc 	bl	800047c <__aeabi_l2d>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4630      	mov	r0, r6
 80068ca:	4639      	mov	r1, r7
 80068cc:	f7f9 fc4c 	bl	8000168 <__aeabi_dsub>
 80068d0:	460b      	mov	r3, r1
 80068d2:	4602      	mov	r2, r0
 80068d4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80068d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80068dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068de:	ea46 060a 	orr.w	r6, r6, sl
 80068e2:	431e      	orrs	r6, r3
 80068e4:	d069      	beq.n	80069ba <_strtod_l+0xb72>
 80068e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8006910 <_strtod_l+0xac8>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f7fa f866 	bl	80009bc <__aeabi_dcmplt>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f47f accf 	bne.w	8006294 <_strtod_l+0x44c>
 80068f6:	a308      	add	r3, pc, #32	@ (adr r3, 8006918 <_strtod_l+0xad0>)
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006900:	f7fa f87a 	bl	80009f8 <__aeabi_dcmpgt>
 8006904:	2800      	cmp	r0, #0
 8006906:	d093      	beq.n	8006830 <_strtod_l+0x9e8>
 8006908:	e4c4      	b.n	8006294 <_strtod_l+0x44c>
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w
 8006910:	94a03595 	.word	0x94a03595
 8006914:	3fdfffff 	.word	0x3fdfffff
 8006918:	35afe535 	.word	0x35afe535
 800691c:	3fe00000 	.word	0x3fe00000
 8006920:	000fffff 	.word	0x000fffff
 8006924:	7ff00000 	.word	0x7ff00000
 8006928:	7fefffff 	.word	0x7fefffff
 800692c:	3ff00000 	.word	0x3ff00000
 8006930:	3fe00000 	.word	0x3fe00000
 8006934:	7fe00000 	.word	0x7fe00000
 8006938:	7c9fffff 	.word	0x7c9fffff
 800693c:	bff00000 	.word	0xbff00000
 8006940:	9b08      	ldr	r3, [sp, #32]
 8006942:	b323      	cbz	r3, 800698e <_strtod_l+0xb46>
 8006944:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006948:	d821      	bhi.n	800698e <_strtod_l+0xb46>
 800694a:	a327      	add	r3, pc, #156	@ (adr r3, 80069e8 <_strtod_l+0xba0>)
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	4630      	mov	r0, r6
 8006952:	4639      	mov	r1, r7
 8006954:	f7fa f83c 	bl	80009d0 <__aeabi_dcmple>
 8006958:	b1a0      	cbz	r0, 8006984 <_strtod_l+0xb3c>
 800695a:	4639      	mov	r1, r7
 800695c:	4630      	mov	r0, r6
 800695e:	f7fa f893 	bl	8000a88 <__aeabi_d2uiz>
 8006962:	2801      	cmp	r0, #1
 8006964:	bf38      	it	cc
 8006966:	2001      	movcc	r0, #1
 8006968:	f7f9 fd3c 	bl	80003e4 <__aeabi_ui2d>
 800696c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800696e:	4606      	mov	r6, r0
 8006970:	460f      	mov	r7, r1
 8006972:	b9fb      	cbnz	r3, 80069b4 <_strtod_l+0xb6c>
 8006974:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006978:	9014      	str	r0, [sp, #80]	@ 0x50
 800697a:	9315      	str	r3, [sp, #84]	@ 0x54
 800697c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006980:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006984:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006986:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800698a:	1b5b      	subs	r3, r3, r5
 800698c:	9311      	str	r3, [sp, #68]	@ 0x44
 800698e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006992:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006996:	f7ff f8ff 	bl	8005b98 <__ulp>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4650      	mov	r0, sl
 80069a0:	4659      	mov	r1, fp
 80069a2:	f7f9 fd99 	bl	80004d8 <__aeabi_dmul>
 80069a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069aa:	f7f9 fbdf 	bl	800016c <__adddf3>
 80069ae:	4682      	mov	sl, r0
 80069b0:	468b      	mov	fp, r1
 80069b2:	e776      	b.n	80068a2 <_strtod_l+0xa5a>
 80069b4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80069b8:	e7e0      	b.n	800697c <_strtod_l+0xb34>
 80069ba:	a30d      	add	r3, pc, #52	@ (adr r3, 80069f0 <_strtod_l+0xba8>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fffc 	bl	80009bc <__aeabi_dcmplt>
 80069c4:	e79e      	b.n	8006904 <_strtod_l+0xabc>
 80069c6:	2300      	movs	r3, #0
 80069c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069cc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	f7ff ba77 	b.w	8005ec2 <_strtod_l+0x7a>
 80069d4:	2a65      	cmp	r2, #101	@ 0x65
 80069d6:	f43f ab6e 	beq.w	80060b6 <_strtod_l+0x26e>
 80069da:	2a45      	cmp	r2, #69	@ 0x45
 80069dc:	f43f ab6b 	beq.w	80060b6 <_strtod_l+0x26e>
 80069e0:	2301      	movs	r3, #1
 80069e2:	f7ff bba6 	b.w	8006132 <_strtod_l+0x2ea>
 80069e6:	bf00      	nop
 80069e8:	ffc00000 	.word	0xffc00000
 80069ec:	41dfffff 	.word	0x41dfffff
 80069f0:	94a03595 	.word	0x94a03595
 80069f4:	3fcfffff 	.word	0x3fcfffff

080069f8 <_strtod_r>:
 80069f8:	4b01      	ldr	r3, [pc, #4]	@ (8006a00 <_strtod_r+0x8>)
 80069fa:	f7ff ba25 	b.w	8005e48 <_strtod_l>
 80069fe:	bf00      	nop
 8006a00:	20000068 	.word	0x20000068

08006a04 <_strtol_l.constprop.0>:
 8006a04:	2b24      	cmp	r3, #36	@ 0x24
 8006a06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0a:	4686      	mov	lr, r0
 8006a0c:	4690      	mov	r8, r2
 8006a0e:	d801      	bhi.n	8006a14 <_strtol_l.constprop.0+0x10>
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d106      	bne.n	8006a22 <_strtol_l.constprop.0+0x1e>
 8006a14:	f7fd fdbe 	bl	8004594 <__errno>
 8006a18:	2316      	movs	r3, #22
 8006a1a:	6003      	str	r3, [r0, #0]
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a22:	460d      	mov	r5, r1
 8006a24:	4833      	ldr	r0, [pc, #204]	@ (8006af4 <_strtol_l.constprop.0+0xf0>)
 8006a26:	462a      	mov	r2, r5
 8006a28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a2c:	5d06      	ldrb	r6, [r0, r4]
 8006a2e:	f016 0608 	ands.w	r6, r6, #8
 8006a32:	d1f8      	bne.n	8006a26 <_strtol_l.constprop.0+0x22>
 8006a34:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a36:	d12d      	bne.n	8006a94 <_strtol_l.constprop.0+0x90>
 8006a38:	2601      	movs	r6, #1
 8006a3a:	782c      	ldrb	r4, [r5, #0]
 8006a3c:	1c95      	adds	r5, r2, #2
 8006a3e:	f033 0210 	bics.w	r2, r3, #16
 8006a42:	d109      	bne.n	8006a58 <_strtol_l.constprop.0+0x54>
 8006a44:	2c30      	cmp	r4, #48	@ 0x30
 8006a46:	d12a      	bne.n	8006a9e <_strtol_l.constprop.0+0x9a>
 8006a48:	782a      	ldrb	r2, [r5, #0]
 8006a4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a4e:	2a58      	cmp	r2, #88	@ 0x58
 8006a50:	d125      	bne.n	8006a9e <_strtol_l.constprop.0+0x9a>
 8006a52:	2310      	movs	r3, #16
 8006a54:	786c      	ldrb	r4, [r5, #1]
 8006a56:	3502      	adds	r5, #2
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a62:	fbbc f9f3 	udiv	r9, ip, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	fb03 ca19 	mls	sl, r3, r9, ip
 8006a6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006a70:	2f09      	cmp	r7, #9
 8006a72:	d81b      	bhi.n	8006aac <_strtol_l.constprop.0+0xa8>
 8006a74:	463c      	mov	r4, r7
 8006a76:	42a3      	cmp	r3, r4
 8006a78:	dd27      	ble.n	8006aca <_strtol_l.constprop.0+0xc6>
 8006a7a:	1c57      	adds	r7, r2, #1
 8006a7c:	d007      	beq.n	8006a8e <_strtol_l.constprop.0+0x8a>
 8006a7e:	4581      	cmp	r9, r0
 8006a80:	d320      	bcc.n	8006ac4 <_strtol_l.constprop.0+0xc0>
 8006a82:	d101      	bne.n	8006a88 <_strtol_l.constprop.0+0x84>
 8006a84:	45a2      	cmp	sl, r4
 8006a86:	db1d      	blt.n	8006ac4 <_strtol_l.constprop.0+0xc0>
 8006a88:	2201      	movs	r2, #1
 8006a8a:	fb00 4003 	mla	r0, r0, r3, r4
 8006a8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a92:	e7eb      	b.n	8006a6c <_strtol_l.constprop.0+0x68>
 8006a94:	2c2b      	cmp	r4, #43	@ 0x2b
 8006a96:	bf04      	itt	eq
 8006a98:	782c      	ldrbeq	r4, [r5, #0]
 8006a9a:	1c95      	addeq	r5, r2, #2
 8006a9c:	e7cf      	b.n	8006a3e <_strtol_l.constprop.0+0x3a>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1da      	bne.n	8006a58 <_strtol_l.constprop.0+0x54>
 8006aa2:	2c30      	cmp	r4, #48	@ 0x30
 8006aa4:	bf0c      	ite	eq
 8006aa6:	2308      	moveq	r3, #8
 8006aa8:	230a      	movne	r3, #10
 8006aaa:	e7d5      	b.n	8006a58 <_strtol_l.constprop.0+0x54>
 8006aac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006ab0:	2f19      	cmp	r7, #25
 8006ab2:	d801      	bhi.n	8006ab8 <_strtol_l.constprop.0+0xb4>
 8006ab4:	3c37      	subs	r4, #55	@ 0x37
 8006ab6:	e7de      	b.n	8006a76 <_strtol_l.constprop.0+0x72>
 8006ab8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006abc:	2f19      	cmp	r7, #25
 8006abe:	d804      	bhi.n	8006aca <_strtol_l.constprop.0+0xc6>
 8006ac0:	3c57      	subs	r4, #87	@ 0x57
 8006ac2:	e7d8      	b.n	8006a76 <_strtol_l.constprop.0+0x72>
 8006ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac8:	e7e1      	b.n	8006a8e <_strtol_l.constprop.0+0x8a>
 8006aca:	1c53      	adds	r3, r2, #1
 8006acc:	d108      	bne.n	8006ae0 <_strtol_l.constprop.0+0xdc>
 8006ace:	2322      	movs	r3, #34	@ 0x22
 8006ad0:	4660      	mov	r0, ip
 8006ad2:	f8ce 3000 	str.w	r3, [lr]
 8006ad6:	f1b8 0f00 	cmp.w	r8, #0
 8006ada:	d0a0      	beq.n	8006a1e <_strtol_l.constprop.0+0x1a>
 8006adc:	1e69      	subs	r1, r5, #1
 8006ade:	e006      	b.n	8006aee <_strtol_l.constprop.0+0xea>
 8006ae0:	b106      	cbz	r6, 8006ae4 <_strtol_l.constprop.0+0xe0>
 8006ae2:	4240      	negs	r0, r0
 8006ae4:	f1b8 0f00 	cmp.w	r8, #0
 8006ae8:	d099      	beq.n	8006a1e <_strtol_l.constprop.0+0x1a>
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	d1f6      	bne.n	8006adc <_strtol_l.constprop.0+0xd8>
 8006aee:	f8c8 1000 	str.w	r1, [r8]
 8006af2:	e794      	b.n	8006a1e <_strtol_l.constprop.0+0x1a>
 8006af4:	08007f81 	.word	0x08007f81

08006af8 <_strtol_r>:
 8006af8:	f7ff bf84 	b.w	8006a04 <_strtol_l.constprop.0>

08006afc <__ssputs_r>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	461f      	mov	r7, r3
 8006b02:	688e      	ldr	r6, [r1, #8]
 8006b04:	4682      	mov	sl, r0
 8006b06:	42be      	cmp	r6, r7
 8006b08:	460c      	mov	r4, r1
 8006b0a:	4690      	mov	r8, r2
 8006b0c:	680b      	ldr	r3, [r1, #0]
 8006b0e:	d82d      	bhi.n	8006b6c <__ssputs_r+0x70>
 8006b10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b18:	d026      	beq.n	8006b68 <__ssputs_r+0x6c>
 8006b1a:	6965      	ldr	r5, [r4, #20]
 8006b1c:	6909      	ldr	r1, [r1, #16]
 8006b1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b22:	eba3 0901 	sub.w	r9, r3, r1
 8006b26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b2a:	1c7b      	adds	r3, r7, #1
 8006b2c:	444b      	add	r3, r9
 8006b2e:	106d      	asrs	r5, r5, #1
 8006b30:	429d      	cmp	r5, r3
 8006b32:	bf38      	it	cc
 8006b34:	461d      	movcc	r5, r3
 8006b36:	0553      	lsls	r3, r2, #21
 8006b38:	d527      	bpl.n	8006b8a <__ssputs_r+0x8e>
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	f7fe fc2e 	bl	800539c <_malloc_r>
 8006b40:	4606      	mov	r6, r0
 8006b42:	b360      	cbz	r0, 8006b9e <__ssputs_r+0xa2>
 8006b44:	464a      	mov	r2, r9
 8006b46:	6921      	ldr	r1, [r4, #16]
 8006b48:	f000 fa14 	bl	8006f74 <memcpy>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b56:	81a3      	strh	r3, [r4, #12]
 8006b58:	6126      	str	r6, [r4, #16]
 8006b5a:	444e      	add	r6, r9
 8006b5c:	6026      	str	r6, [r4, #0]
 8006b5e:	463e      	mov	r6, r7
 8006b60:	6165      	str	r5, [r4, #20]
 8006b62:	eba5 0509 	sub.w	r5, r5, r9
 8006b66:	60a5      	str	r5, [r4, #8]
 8006b68:	42be      	cmp	r6, r7
 8006b6a:	d900      	bls.n	8006b6e <__ssputs_r+0x72>
 8006b6c:	463e      	mov	r6, r7
 8006b6e:	4632      	mov	r2, r6
 8006b70:	4641      	mov	r1, r8
 8006b72:	6820      	ldr	r0, [r4, #0]
 8006b74:	f000 f9c2 	bl	8006efc <memmove>
 8006b78:	2000      	movs	r0, #0
 8006b7a:	68a3      	ldr	r3, [r4, #8]
 8006b7c:	1b9b      	subs	r3, r3, r6
 8006b7e:	60a3      	str	r3, [r4, #8]
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	4433      	add	r3, r6
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8a:	462a      	mov	r2, r5
 8006b8c:	f000 fd83 	bl	8007696 <_realloc_r>
 8006b90:	4606      	mov	r6, r0
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d1e0      	bne.n	8006b58 <__ssputs_r+0x5c>
 8006b96:	4650      	mov	r0, sl
 8006b98:	6921      	ldr	r1, [r4, #16]
 8006b9a:	f7fe fb8d 	bl	80052b8 <_free_r>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	f8ca 3000 	str.w	r3, [sl]
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8006baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	e7e9      	b.n	8006b86 <__ssputs_r+0x8a>
	...

08006bb4 <_svfiprintf_r>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	4698      	mov	r8, r3
 8006bba:	898b      	ldrh	r3, [r1, #12]
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	460d      	mov	r5, r1
 8006bc2:	4614      	mov	r4, r2
 8006bc4:	b09d      	sub	sp, #116	@ 0x74
 8006bc6:	d510      	bpl.n	8006bea <_svfiprintf_r+0x36>
 8006bc8:	690b      	ldr	r3, [r1, #16]
 8006bca:	b973      	cbnz	r3, 8006bea <_svfiprintf_r+0x36>
 8006bcc:	2140      	movs	r1, #64	@ 0x40
 8006bce:	f7fe fbe5 	bl	800539c <_malloc_r>
 8006bd2:	6028      	str	r0, [r5, #0]
 8006bd4:	6128      	str	r0, [r5, #16]
 8006bd6:	b930      	cbnz	r0, 8006be6 <_svfiprintf_r+0x32>
 8006bd8:	230c      	movs	r3, #12
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	b01d      	add	sp, #116	@ 0x74
 8006be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be6:	2340      	movs	r3, #64	@ 0x40
 8006be8:	616b      	str	r3, [r5, #20]
 8006bea:	2300      	movs	r3, #0
 8006bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bee:	2320      	movs	r3, #32
 8006bf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bf4:	2330      	movs	r3, #48	@ 0x30
 8006bf6:	f04f 0901 	mov.w	r9, #1
 8006bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bfe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006d98 <_svfiprintf_r+0x1e4>
 8006c02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c06:	4623      	mov	r3, r4
 8006c08:	469a      	mov	sl, r3
 8006c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c0e:	b10a      	cbz	r2, 8006c14 <_svfiprintf_r+0x60>
 8006c10:	2a25      	cmp	r2, #37	@ 0x25
 8006c12:	d1f9      	bne.n	8006c08 <_svfiprintf_r+0x54>
 8006c14:	ebba 0b04 	subs.w	fp, sl, r4
 8006c18:	d00b      	beq.n	8006c32 <_svfiprintf_r+0x7e>
 8006c1a:	465b      	mov	r3, fp
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff ff6b 	bl	8006afc <__ssputs_r>
 8006c26:	3001      	adds	r0, #1
 8006c28:	f000 80a7 	beq.w	8006d7a <_svfiprintf_r+0x1c6>
 8006c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c2e:	445a      	add	r2, fp
 8006c30:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c32:	f89a 3000 	ldrb.w	r3, [sl]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 809f 	beq.w	8006d7a <_svfiprintf_r+0x1c6>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c46:	f10a 0a01 	add.w	sl, sl, #1
 8006c4a:	9304      	str	r3, [sp, #16]
 8006c4c:	9307      	str	r3, [sp, #28]
 8006c4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c52:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c54:	4654      	mov	r4, sl
 8006c56:	2205      	movs	r2, #5
 8006c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c5c:	484e      	ldr	r0, [pc, #312]	@ (8006d98 <_svfiprintf_r+0x1e4>)
 8006c5e:	f7fd fcc6 	bl	80045ee <memchr>
 8006c62:	9a04      	ldr	r2, [sp, #16]
 8006c64:	b9d8      	cbnz	r0, 8006c9e <_svfiprintf_r+0xea>
 8006c66:	06d0      	lsls	r0, r2, #27
 8006c68:	bf44      	itt	mi
 8006c6a:	2320      	movmi	r3, #32
 8006c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c70:	0711      	lsls	r1, r2, #28
 8006c72:	bf44      	itt	mi
 8006c74:	232b      	movmi	r3, #43	@ 0x2b
 8006c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c80:	d015      	beq.n	8006cae <_svfiprintf_r+0xfa>
 8006c82:	4654      	mov	r4, sl
 8006c84:	2000      	movs	r0, #0
 8006c86:	f04f 0c0a 	mov.w	ip, #10
 8006c8a:	9a07      	ldr	r2, [sp, #28]
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c92:	3b30      	subs	r3, #48	@ 0x30
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	d94b      	bls.n	8006d30 <_svfiprintf_r+0x17c>
 8006c98:	b1b0      	cbz	r0, 8006cc8 <_svfiprintf_r+0x114>
 8006c9a:	9207      	str	r2, [sp, #28]
 8006c9c:	e014      	b.n	8006cc8 <_svfiprintf_r+0x114>
 8006c9e:	eba0 0308 	sub.w	r3, r0, r8
 8006ca2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	46a2      	mov	sl, r4
 8006caa:	9304      	str	r3, [sp, #16]
 8006cac:	e7d2      	b.n	8006c54 <_svfiprintf_r+0xa0>
 8006cae:	9b03      	ldr	r3, [sp, #12]
 8006cb0:	1d19      	adds	r1, r3, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	9103      	str	r1, [sp, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bfbb      	ittet	lt
 8006cba:	425b      	neglt	r3, r3
 8006cbc:	f042 0202 	orrlt.w	r2, r2, #2
 8006cc0:	9307      	strge	r3, [sp, #28]
 8006cc2:	9307      	strlt	r3, [sp, #28]
 8006cc4:	bfb8      	it	lt
 8006cc6:	9204      	strlt	r2, [sp, #16]
 8006cc8:	7823      	ldrb	r3, [r4, #0]
 8006cca:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ccc:	d10a      	bne.n	8006ce4 <_svfiprintf_r+0x130>
 8006cce:	7863      	ldrb	r3, [r4, #1]
 8006cd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd2:	d132      	bne.n	8006d3a <_svfiprintf_r+0x186>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	3402      	adds	r4, #2
 8006cd8:	1d1a      	adds	r2, r3, #4
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	9203      	str	r2, [sp, #12]
 8006cde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006d9c <_svfiprintf_r+0x1e8>
 8006ce8:	2203      	movs	r2, #3
 8006cea:	4650      	mov	r0, sl
 8006cec:	7821      	ldrb	r1, [r4, #0]
 8006cee:	f7fd fc7e 	bl	80045ee <memchr>
 8006cf2:	b138      	cbz	r0, 8006d04 <_svfiprintf_r+0x150>
 8006cf4:	2240      	movs	r2, #64	@ 0x40
 8006cf6:	9b04      	ldr	r3, [sp, #16]
 8006cf8:	eba0 000a 	sub.w	r0, r0, sl
 8006cfc:	4082      	lsls	r2, r0
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	3401      	adds	r4, #1
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d08:	2206      	movs	r2, #6
 8006d0a:	4825      	ldr	r0, [pc, #148]	@ (8006da0 <_svfiprintf_r+0x1ec>)
 8006d0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d10:	f7fd fc6d 	bl	80045ee <memchr>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d036      	beq.n	8006d86 <_svfiprintf_r+0x1d2>
 8006d18:	4b22      	ldr	r3, [pc, #136]	@ (8006da4 <_svfiprintf_r+0x1f0>)
 8006d1a:	bb1b      	cbnz	r3, 8006d64 <_svfiprintf_r+0x1b0>
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	3307      	adds	r3, #7
 8006d20:	f023 0307 	bic.w	r3, r3, #7
 8006d24:	3308      	adds	r3, #8
 8006d26:	9303      	str	r3, [sp, #12]
 8006d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2a:	4433      	add	r3, r6
 8006d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d2e:	e76a      	b.n	8006c06 <_svfiprintf_r+0x52>
 8006d30:	460c      	mov	r4, r1
 8006d32:	2001      	movs	r0, #1
 8006d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d38:	e7a8      	b.n	8006c8c <_svfiprintf_r+0xd8>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f04f 0c0a 	mov.w	ip, #10
 8006d40:	4619      	mov	r1, r3
 8006d42:	3401      	adds	r4, #1
 8006d44:	9305      	str	r3, [sp, #20]
 8006d46:	4620      	mov	r0, r4
 8006d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d4c:	3a30      	subs	r2, #48	@ 0x30
 8006d4e:	2a09      	cmp	r2, #9
 8006d50:	d903      	bls.n	8006d5a <_svfiprintf_r+0x1a6>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0c6      	beq.n	8006ce4 <_svfiprintf_r+0x130>
 8006d56:	9105      	str	r1, [sp, #20]
 8006d58:	e7c4      	b.n	8006ce4 <_svfiprintf_r+0x130>
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d62:	e7f0      	b.n	8006d46 <_svfiprintf_r+0x192>
 8006d64:	ab03      	add	r3, sp, #12
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006da8 <_svfiprintf_r+0x1f4>)
 8006d6e:	a904      	add	r1, sp, #16
 8006d70:	f7fc fcca 	bl	8003708 <_printf_float>
 8006d74:	1c42      	adds	r2, r0, #1
 8006d76:	4606      	mov	r6, r0
 8006d78:	d1d6      	bne.n	8006d28 <_svfiprintf_r+0x174>
 8006d7a:	89ab      	ldrh	r3, [r5, #12]
 8006d7c:	065b      	lsls	r3, r3, #25
 8006d7e:	f53f af2d 	bmi.w	8006bdc <_svfiprintf_r+0x28>
 8006d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d84:	e72c      	b.n	8006be0 <_svfiprintf_r+0x2c>
 8006d86:	ab03      	add	r3, sp, #12
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	462a      	mov	r2, r5
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <_svfiprintf_r+0x1f4>)
 8006d90:	a904      	add	r1, sp, #16
 8006d92:	f7fc ff57 	bl	8003c44 <_printf_i>
 8006d96:	e7ed      	b.n	8006d74 <_svfiprintf_r+0x1c0>
 8006d98:	08008081 	.word	0x08008081
 8006d9c:	08008087 	.word	0x08008087
 8006da0:	0800808b 	.word	0x0800808b
 8006da4:	08003709 	.word	0x08003709
 8006da8:	08006afd 	.word	0x08006afd

08006dac <__sflush_r>:
 8006dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	0716      	lsls	r6, r2, #28
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	d454      	bmi.n	8006e64 <__sflush_r+0xb8>
 8006dba:	684b      	ldr	r3, [r1, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dc02      	bgt.n	8006dc6 <__sflush_r+0x1a>
 8006dc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dd48      	ble.n	8006e58 <__sflush_r+0xac>
 8006dc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dc8:	2e00      	cmp	r6, #0
 8006dca:	d045      	beq.n	8006e58 <__sflush_r+0xac>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dd2:	682f      	ldr	r7, [r5, #0]
 8006dd4:	6a21      	ldr	r1, [r4, #32]
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	d030      	beq.n	8006e3c <__sflush_r+0x90>
 8006dda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	0759      	lsls	r1, r3, #29
 8006de0:	d505      	bpl.n	8006dee <__sflush_r+0x42>
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	1ad2      	subs	r2, r2, r3
 8006de6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006de8:	b10b      	cbz	r3, 8006dee <__sflush_r+0x42>
 8006dea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006dec:	1ad2      	subs	r2, r2, r3
 8006dee:	2300      	movs	r3, #0
 8006df0:	4628      	mov	r0, r5
 8006df2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006df4:	6a21      	ldr	r1, [r4, #32]
 8006df6:	47b0      	blx	r6
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	89a3      	ldrh	r3, [r4, #12]
 8006dfc:	d106      	bne.n	8006e0c <__sflush_r+0x60>
 8006dfe:	6829      	ldr	r1, [r5, #0]
 8006e00:	291d      	cmp	r1, #29
 8006e02:	d82b      	bhi.n	8006e5c <__sflush_r+0xb0>
 8006e04:	4a28      	ldr	r2, [pc, #160]	@ (8006ea8 <__sflush_r+0xfc>)
 8006e06:	410a      	asrs	r2, r1
 8006e08:	07d6      	lsls	r6, r2, #31
 8006e0a:	d427      	bmi.n	8006e5c <__sflush_r+0xb0>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	6062      	str	r2, [r4, #4]
 8006e10:	6922      	ldr	r2, [r4, #16]
 8006e12:	04d9      	lsls	r1, r3, #19
 8006e14:	6022      	str	r2, [r4, #0]
 8006e16:	d504      	bpl.n	8006e22 <__sflush_r+0x76>
 8006e18:	1c42      	adds	r2, r0, #1
 8006e1a:	d101      	bne.n	8006e20 <__sflush_r+0x74>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b903      	cbnz	r3, 8006e22 <__sflush_r+0x76>
 8006e20:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e24:	602f      	str	r7, [r5, #0]
 8006e26:	b1b9      	cbz	r1, 8006e58 <__sflush_r+0xac>
 8006e28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e2c:	4299      	cmp	r1, r3
 8006e2e:	d002      	beq.n	8006e36 <__sflush_r+0x8a>
 8006e30:	4628      	mov	r0, r5
 8006e32:	f7fe fa41 	bl	80052b8 <_free_r>
 8006e36:	2300      	movs	r3, #0
 8006e38:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e3a:	e00d      	b.n	8006e58 <__sflush_r+0xac>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b0      	blx	r6
 8006e42:	4602      	mov	r2, r0
 8006e44:	1c50      	adds	r0, r2, #1
 8006e46:	d1c9      	bne.n	8006ddc <__sflush_r+0x30>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0c6      	beq.n	8006ddc <__sflush_r+0x30>
 8006e4e:	2b1d      	cmp	r3, #29
 8006e50:	d001      	beq.n	8006e56 <__sflush_r+0xaa>
 8006e52:	2b16      	cmp	r3, #22
 8006e54:	d11d      	bne.n	8006e92 <__sflush_r+0xe6>
 8006e56:	602f      	str	r7, [r5, #0]
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e021      	b.n	8006ea0 <__sflush_r+0xf4>
 8006e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e60:	b21b      	sxth	r3, r3
 8006e62:	e01a      	b.n	8006e9a <__sflush_r+0xee>
 8006e64:	690f      	ldr	r7, [r1, #16]
 8006e66:	2f00      	cmp	r7, #0
 8006e68:	d0f6      	beq.n	8006e58 <__sflush_r+0xac>
 8006e6a:	0793      	lsls	r3, r2, #30
 8006e6c:	bf18      	it	ne
 8006e6e:	2300      	movne	r3, #0
 8006e70:	680e      	ldr	r6, [r1, #0]
 8006e72:	bf08      	it	eq
 8006e74:	694b      	ldreq	r3, [r1, #20]
 8006e76:	1bf6      	subs	r6, r6, r7
 8006e78:	600f      	str	r7, [r1, #0]
 8006e7a:	608b      	str	r3, [r1, #8]
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	ddeb      	ble.n	8006e58 <__sflush_r+0xac>
 8006e80:	4633      	mov	r3, r6
 8006e82:	463a      	mov	r2, r7
 8006e84:	4628      	mov	r0, r5
 8006e86:	6a21      	ldr	r1, [r4, #32]
 8006e88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006e8c:	47e0      	blx	ip
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	dc07      	bgt.n	8006ea2 <__sflush_r+0xf6>
 8006e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea2:	4407      	add	r7, r0
 8006ea4:	1a36      	subs	r6, r6, r0
 8006ea6:	e7e9      	b.n	8006e7c <__sflush_r+0xd0>
 8006ea8:	dfbffffe 	.word	0xdfbffffe

08006eac <_fflush_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	690b      	ldr	r3, [r1, #16]
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	b913      	cbnz	r3, 8006ebc <_fflush_r+0x10>
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	4628      	mov	r0, r5
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	b118      	cbz	r0, 8006ec6 <_fflush_r+0x1a>
 8006ebe:	6a03      	ldr	r3, [r0, #32]
 8006ec0:	b90b      	cbnz	r3, 8006ec6 <_fflush_r+0x1a>
 8006ec2:	f7fd fa7b 	bl	80043bc <__sinit>
 8006ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f3      	beq.n	8006eb6 <_fflush_r+0xa>
 8006ece:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ed0:	07d0      	lsls	r0, r2, #31
 8006ed2:	d404      	bmi.n	8006ede <_fflush_r+0x32>
 8006ed4:	0599      	lsls	r1, r3, #22
 8006ed6:	d402      	bmi.n	8006ede <_fflush_r+0x32>
 8006ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eda:	f7fd fb86 	bl	80045ea <__retarget_lock_acquire_recursive>
 8006ede:	4628      	mov	r0, r5
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	f7ff ff63 	bl	8006dac <__sflush_r>
 8006ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ee8:	4605      	mov	r5, r0
 8006eea:	07da      	lsls	r2, r3, #31
 8006eec:	d4e4      	bmi.n	8006eb8 <_fflush_r+0xc>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	059b      	lsls	r3, r3, #22
 8006ef2:	d4e1      	bmi.n	8006eb8 <_fflush_r+0xc>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ef6:	f7fd fb79 	bl	80045ec <__retarget_lock_release_recursive>
 8006efa:	e7dd      	b.n	8006eb8 <_fflush_r+0xc>

08006efc <memmove>:
 8006efc:	4288      	cmp	r0, r1
 8006efe:	b510      	push	{r4, lr}
 8006f00:	eb01 0402 	add.w	r4, r1, r2
 8006f04:	d902      	bls.n	8006f0c <memmove+0x10>
 8006f06:	4284      	cmp	r4, r0
 8006f08:	4623      	mov	r3, r4
 8006f0a:	d807      	bhi.n	8006f1c <memmove+0x20>
 8006f0c:	1e43      	subs	r3, r0, #1
 8006f0e:	42a1      	cmp	r1, r4
 8006f10:	d008      	beq.n	8006f24 <memmove+0x28>
 8006f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f1a:	e7f8      	b.n	8006f0e <memmove+0x12>
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	4402      	add	r2, r0
 8006f20:	428a      	cmp	r2, r1
 8006f22:	d100      	bne.n	8006f26 <memmove+0x2a>
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f2e:	e7f7      	b.n	8006f20 <memmove+0x24>

08006f30 <strncmp>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	b16a      	cbz	r2, 8006f50 <strncmp+0x20>
 8006f34:	3901      	subs	r1, #1
 8006f36:	1884      	adds	r4, r0, r2
 8006f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d103      	bne.n	8006f4c <strncmp+0x1c>
 8006f44:	42a0      	cmp	r0, r4
 8006f46:	d001      	beq.n	8006f4c <strncmp+0x1c>
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	d1f5      	bne.n	8006f38 <strncmp+0x8>
 8006f4c:	1ad0      	subs	r0, r2, r3
 8006f4e:	bd10      	pop	{r4, pc}
 8006f50:	4610      	mov	r0, r2
 8006f52:	e7fc      	b.n	8006f4e <strncmp+0x1e>

08006f54 <_sbrk_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	2300      	movs	r3, #0
 8006f58:	4d05      	ldr	r5, [pc, #20]	@ (8006f70 <_sbrk_r+0x1c>)
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7fa fdb0 	bl	8001ac4 <_sbrk>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_sbrk_r+0x1a>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_sbrk_r+0x1a>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20000448 	.word	0x20000448

08006f74 <memcpy>:
 8006f74:	440a      	add	r2, r1
 8006f76:	4291      	cmp	r1, r2
 8006f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f7c:	d100      	bne.n	8006f80 <memcpy+0xc>
 8006f7e:	4770      	bx	lr
 8006f80:	b510      	push	{r4, lr}
 8006f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f86:	4291      	cmp	r1, r2
 8006f88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f8c:	d1f9      	bne.n	8006f82 <memcpy+0xe>
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <nan>:
 8006f90:	2000      	movs	r0, #0
 8006f92:	4901      	ldr	r1, [pc, #4]	@ (8006f98 <nan+0x8>)
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	7ff80000 	.word	0x7ff80000

08006f9c <__assert_func>:
 8006f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f9e:	4614      	mov	r4, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4b09      	ldr	r3, [pc, #36]	@ (8006fc8 <__assert_func+0x2c>)
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68d8      	ldr	r0, [r3, #12]
 8006faa:	b954      	cbnz	r4, 8006fc2 <__assert_func+0x26>
 8006fac:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <__assert_func+0x30>)
 8006fae:	461c      	mov	r4, r3
 8006fb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fb4:	9100      	str	r1, [sp, #0]
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	4905      	ldr	r1, [pc, #20]	@ (8006fd0 <__assert_func+0x34>)
 8006fba:	f000 fba7 	bl	800770c <fiprintf>
 8006fbe:	f000 fbb7 	bl	8007730 <abort>
 8006fc2:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <__assert_func+0x38>)
 8006fc4:	e7f4      	b.n	8006fb0 <__assert_func+0x14>
 8006fc6:	bf00      	nop
 8006fc8:	20000018 	.word	0x20000018
 8006fcc:	080080d5 	.word	0x080080d5
 8006fd0:	080080a7 	.word	0x080080a7
 8006fd4:	0800809a 	.word	0x0800809a

08006fd8 <_calloc_r>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	fba1 5402 	umull	r5, r4, r1, r2
 8006fde:	b93c      	cbnz	r4, 8006ff0 <_calloc_r+0x18>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7fe f9db 	bl	800539c <_malloc_r>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <_calloc_r+0x1e>
 8006fea:	2600      	movs	r6, #0
 8006fec:	4630      	mov	r0, r6
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	220c      	movs	r2, #12
 8006ff2:	6002      	str	r2, [r0, #0]
 8006ff4:	e7f9      	b.n	8006fea <_calloc_r+0x12>
 8006ff6:	462a      	mov	r2, r5
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f7fd fa78 	bl	80044ee <memset>
 8006ffe:	e7f5      	b.n	8006fec <_calloc_r+0x14>

08007000 <rshift>:
 8007000:	6903      	ldr	r3, [r0, #16]
 8007002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007006:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800700a:	f100 0414 	add.w	r4, r0, #20
 800700e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007012:	dd46      	ble.n	80070a2 <rshift+0xa2>
 8007014:	f011 011f 	ands.w	r1, r1, #31
 8007018:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800701c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007020:	d10c      	bne.n	800703c <rshift+0x3c>
 8007022:	4629      	mov	r1, r5
 8007024:	f100 0710 	add.w	r7, r0, #16
 8007028:	42b1      	cmp	r1, r6
 800702a:	d335      	bcc.n	8007098 <rshift+0x98>
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	1eea      	subs	r2, r5, #3
 8007032:	4296      	cmp	r6, r2
 8007034:	bf38      	it	cc
 8007036:	2300      	movcc	r3, #0
 8007038:	4423      	add	r3, r4
 800703a:	e015      	b.n	8007068 <rshift+0x68>
 800703c:	46a1      	mov	r9, r4
 800703e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007042:	f1c1 0820 	rsb	r8, r1, #32
 8007046:	40cf      	lsrs	r7, r1
 8007048:	f105 0e04 	add.w	lr, r5, #4
 800704c:	4576      	cmp	r6, lr
 800704e:	46f4      	mov	ip, lr
 8007050:	d816      	bhi.n	8007080 <rshift+0x80>
 8007052:	1a9a      	subs	r2, r3, r2
 8007054:	0092      	lsls	r2, r2, #2
 8007056:	3a04      	subs	r2, #4
 8007058:	3501      	adds	r5, #1
 800705a:	42ae      	cmp	r6, r5
 800705c:	bf38      	it	cc
 800705e:	2200      	movcc	r2, #0
 8007060:	18a3      	adds	r3, r4, r2
 8007062:	50a7      	str	r7, [r4, r2]
 8007064:	b107      	cbz	r7, 8007068 <rshift+0x68>
 8007066:	3304      	adds	r3, #4
 8007068:	42a3      	cmp	r3, r4
 800706a:	eba3 0204 	sub.w	r2, r3, r4
 800706e:	bf08      	it	eq
 8007070:	2300      	moveq	r3, #0
 8007072:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007076:	6102      	str	r2, [r0, #16]
 8007078:	bf08      	it	eq
 800707a:	6143      	streq	r3, [r0, #20]
 800707c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007080:	f8dc c000 	ldr.w	ip, [ip]
 8007084:	fa0c fc08 	lsl.w	ip, ip, r8
 8007088:	ea4c 0707 	orr.w	r7, ip, r7
 800708c:	f849 7b04 	str.w	r7, [r9], #4
 8007090:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007094:	40cf      	lsrs	r7, r1
 8007096:	e7d9      	b.n	800704c <rshift+0x4c>
 8007098:	f851 cb04 	ldr.w	ip, [r1], #4
 800709c:	f847 cf04 	str.w	ip, [r7, #4]!
 80070a0:	e7c2      	b.n	8007028 <rshift+0x28>
 80070a2:	4623      	mov	r3, r4
 80070a4:	e7e0      	b.n	8007068 <rshift+0x68>

080070a6 <__hexdig_fun>:
 80070a6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	d802      	bhi.n	80070b4 <__hexdig_fun+0xe>
 80070ae:	3820      	subs	r0, #32
 80070b0:	b2c0      	uxtb	r0, r0
 80070b2:	4770      	bx	lr
 80070b4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80070b8:	2b05      	cmp	r3, #5
 80070ba:	d801      	bhi.n	80070c0 <__hexdig_fun+0x1a>
 80070bc:	3847      	subs	r0, #71	@ 0x47
 80070be:	e7f7      	b.n	80070b0 <__hexdig_fun+0xa>
 80070c0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80070c4:	2b05      	cmp	r3, #5
 80070c6:	d801      	bhi.n	80070cc <__hexdig_fun+0x26>
 80070c8:	3827      	subs	r0, #39	@ 0x27
 80070ca:	e7f1      	b.n	80070b0 <__hexdig_fun+0xa>
 80070cc:	2000      	movs	r0, #0
 80070ce:	4770      	bx	lr

080070d0 <__gethex>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	468a      	mov	sl, r1
 80070d6:	4690      	mov	r8, r2
 80070d8:	b085      	sub	sp, #20
 80070da:	9302      	str	r3, [sp, #8]
 80070dc:	680b      	ldr	r3, [r1, #0]
 80070de:	9001      	str	r0, [sp, #4]
 80070e0:	1c9c      	adds	r4, r3, #2
 80070e2:	46a1      	mov	r9, r4
 80070e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80070e8:	2830      	cmp	r0, #48	@ 0x30
 80070ea:	d0fa      	beq.n	80070e2 <__gethex+0x12>
 80070ec:	eba9 0303 	sub.w	r3, r9, r3
 80070f0:	f1a3 0b02 	sub.w	fp, r3, #2
 80070f4:	f7ff ffd7 	bl	80070a6 <__hexdig_fun>
 80070f8:	4605      	mov	r5, r0
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d168      	bne.n	80071d0 <__gethex+0x100>
 80070fe:	2201      	movs	r2, #1
 8007100:	4648      	mov	r0, r9
 8007102:	499f      	ldr	r1, [pc, #636]	@ (8007380 <__gethex+0x2b0>)
 8007104:	f7ff ff14 	bl	8006f30 <strncmp>
 8007108:	4607      	mov	r7, r0
 800710a:	2800      	cmp	r0, #0
 800710c:	d167      	bne.n	80071de <__gethex+0x10e>
 800710e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007112:	4626      	mov	r6, r4
 8007114:	f7ff ffc7 	bl	80070a6 <__hexdig_fun>
 8007118:	2800      	cmp	r0, #0
 800711a:	d062      	beq.n	80071e2 <__gethex+0x112>
 800711c:	4623      	mov	r3, r4
 800711e:	7818      	ldrb	r0, [r3, #0]
 8007120:	4699      	mov	r9, r3
 8007122:	2830      	cmp	r0, #48	@ 0x30
 8007124:	f103 0301 	add.w	r3, r3, #1
 8007128:	d0f9      	beq.n	800711e <__gethex+0x4e>
 800712a:	f7ff ffbc 	bl	80070a6 <__hexdig_fun>
 800712e:	fab0 f580 	clz	r5, r0
 8007132:	f04f 0b01 	mov.w	fp, #1
 8007136:	096d      	lsrs	r5, r5, #5
 8007138:	464a      	mov	r2, r9
 800713a:	4616      	mov	r6, r2
 800713c:	7830      	ldrb	r0, [r6, #0]
 800713e:	3201      	adds	r2, #1
 8007140:	f7ff ffb1 	bl	80070a6 <__hexdig_fun>
 8007144:	2800      	cmp	r0, #0
 8007146:	d1f8      	bne.n	800713a <__gethex+0x6a>
 8007148:	2201      	movs	r2, #1
 800714a:	4630      	mov	r0, r6
 800714c:	498c      	ldr	r1, [pc, #560]	@ (8007380 <__gethex+0x2b0>)
 800714e:	f7ff feef 	bl	8006f30 <strncmp>
 8007152:	2800      	cmp	r0, #0
 8007154:	d13f      	bne.n	80071d6 <__gethex+0x106>
 8007156:	b944      	cbnz	r4, 800716a <__gethex+0x9a>
 8007158:	1c74      	adds	r4, r6, #1
 800715a:	4622      	mov	r2, r4
 800715c:	4616      	mov	r6, r2
 800715e:	7830      	ldrb	r0, [r6, #0]
 8007160:	3201      	adds	r2, #1
 8007162:	f7ff ffa0 	bl	80070a6 <__hexdig_fun>
 8007166:	2800      	cmp	r0, #0
 8007168:	d1f8      	bne.n	800715c <__gethex+0x8c>
 800716a:	1ba4      	subs	r4, r4, r6
 800716c:	00a7      	lsls	r7, r4, #2
 800716e:	7833      	ldrb	r3, [r6, #0]
 8007170:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007174:	2b50      	cmp	r3, #80	@ 0x50
 8007176:	d13e      	bne.n	80071f6 <__gethex+0x126>
 8007178:	7873      	ldrb	r3, [r6, #1]
 800717a:	2b2b      	cmp	r3, #43	@ 0x2b
 800717c:	d033      	beq.n	80071e6 <__gethex+0x116>
 800717e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007180:	d034      	beq.n	80071ec <__gethex+0x11c>
 8007182:	2400      	movs	r4, #0
 8007184:	1c71      	adds	r1, r6, #1
 8007186:	7808      	ldrb	r0, [r1, #0]
 8007188:	f7ff ff8d 	bl	80070a6 <__hexdig_fun>
 800718c:	1e43      	subs	r3, r0, #1
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b18      	cmp	r3, #24
 8007192:	d830      	bhi.n	80071f6 <__gethex+0x126>
 8007194:	f1a0 0210 	sub.w	r2, r0, #16
 8007198:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800719c:	f7ff ff83 	bl	80070a6 <__hexdig_fun>
 80071a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80071a4:	fa5f fc8c 	uxtb.w	ip, ip
 80071a8:	f1bc 0f18 	cmp.w	ip, #24
 80071ac:	f04f 030a 	mov.w	r3, #10
 80071b0:	d91e      	bls.n	80071f0 <__gethex+0x120>
 80071b2:	b104      	cbz	r4, 80071b6 <__gethex+0xe6>
 80071b4:	4252      	negs	r2, r2
 80071b6:	4417      	add	r7, r2
 80071b8:	f8ca 1000 	str.w	r1, [sl]
 80071bc:	b1ed      	cbz	r5, 80071fa <__gethex+0x12a>
 80071be:	f1bb 0f00 	cmp.w	fp, #0
 80071c2:	bf0c      	ite	eq
 80071c4:	2506      	moveq	r5, #6
 80071c6:	2500      	movne	r5, #0
 80071c8:	4628      	mov	r0, r5
 80071ca:	b005      	add	sp, #20
 80071cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d0:	2500      	movs	r5, #0
 80071d2:	462c      	mov	r4, r5
 80071d4:	e7b0      	b.n	8007138 <__gethex+0x68>
 80071d6:	2c00      	cmp	r4, #0
 80071d8:	d1c7      	bne.n	800716a <__gethex+0x9a>
 80071da:	4627      	mov	r7, r4
 80071dc:	e7c7      	b.n	800716e <__gethex+0x9e>
 80071de:	464e      	mov	r6, r9
 80071e0:	462f      	mov	r7, r5
 80071e2:	2501      	movs	r5, #1
 80071e4:	e7c3      	b.n	800716e <__gethex+0x9e>
 80071e6:	2400      	movs	r4, #0
 80071e8:	1cb1      	adds	r1, r6, #2
 80071ea:	e7cc      	b.n	8007186 <__gethex+0xb6>
 80071ec:	2401      	movs	r4, #1
 80071ee:	e7fb      	b.n	80071e8 <__gethex+0x118>
 80071f0:	fb03 0002 	mla	r0, r3, r2, r0
 80071f4:	e7ce      	b.n	8007194 <__gethex+0xc4>
 80071f6:	4631      	mov	r1, r6
 80071f8:	e7de      	b.n	80071b8 <__gethex+0xe8>
 80071fa:	4629      	mov	r1, r5
 80071fc:	eba6 0309 	sub.w	r3, r6, r9
 8007200:	3b01      	subs	r3, #1
 8007202:	2b07      	cmp	r3, #7
 8007204:	dc0a      	bgt.n	800721c <__gethex+0x14c>
 8007206:	9801      	ldr	r0, [sp, #4]
 8007208:	f7fe f954 	bl	80054b4 <_Balloc>
 800720c:	4604      	mov	r4, r0
 800720e:	b940      	cbnz	r0, 8007222 <__gethex+0x152>
 8007210:	4602      	mov	r2, r0
 8007212:	21e4      	movs	r1, #228	@ 0xe4
 8007214:	4b5b      	ldr	r3, [pc, #364]	@ (8007384 <__gethex+0x2b4>)
 8007216:	485c      	ldr	r0, [pc, #368]	@ (8007388 <__gethex+0x2b8>)
 8007218:	f7ff fec0 	bl	8006f9c <__assert_func>
 800721c:	3101      	adds	r1, #1
 800721e:	105b      	asrs	r3, r3, #1
 8007220:	e7ef      	b.n	8007202 <__gethex+0x132>
 8007222:	2300      	movs	r3, #0
 8007224:	f100 0a14 	add.w	sl, r0, #20
 8007228:	4655      	mov	r5, sl
 800722a:	469b      	mov	fp, r3
 800722c:	45b1      	cmp	r9, r6
 800722e:	d337      	bcc.n	80072a0 <__gethex+0x1d0>
 8007230:	f845 bb04 	str.w	fp, [r5], #4
 8007234:	eba5 050a 	sub.w	r5, r5, sl
 8007238:	10ad      	asrs	r5, r5, #2
 800723a:	6125      	str	r5, [r4, #16]
 800723c:	4658      	mov	r0, fp
 800723e:	f7fe fa2b 	bl	8005698 <__hi0bits>
 8007242:	016d      	lsls	r5, r5, #5
 8007244:	f8d8 6000 	ldr.w	r6, [r8]
 8007248:	1a2d      	subs	r5, r5, r0
 800724a:	42b5      	cmp	r5, r6
 800724c:	dd54      	ble.n	80072f8 <__gethex+0x228>
 800724e:	1bad      	subs	r5, r5, r6
 8007250:	4629      	mov	r1, r5
 8007252:	4620      	mov	r0, r4
 8007254:	f7fe fdb3 	bl	8005dbe <__any_on>
 8007258:	4681      	mov	r9, r0
 800725a:	b178      	cbz	r0, 800727c <__gethex+0x1ac>
 800725c:	f04f 0901 	mov.w	r9, #1
 8007260:	1e6b      	subs	r3, r5, #1
 8007262:	1159      	asrs	r1, r3, #5
 8007264:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007268:	f003 021f 	and.w	r2, r3, #31
 800726c:	fa09 f202 	lsl.w	r2, r9, r2
 8007270:	420a      	tst	r2, r1
 8007272:	d003      	beq.n	800727c <__gethex+0x1ac>
 8007274:	454b      	cmp	r3, r9
 8007276:	dc36      	bgt.n	80072e6 <__gethex+0x216>
 8007278:	f04f 0902 	mov.w	r9, #2
 800727c:	4629      	mov	r1, r5
 800727e:	4620      	mov	r0, r4
 8007280:	f7ff febe 	bl	8007000 <rshift>
 8007284:	442f      	add	r7, r5
 8007286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800728a:	42bb      	cmp	r3, r7
 800728c:	da42      	bge.n	8007314 <__gethex+0x244>
 800728e:	4621      	mov	r1, r4
 8007290:	9801      	ldr	r0, [sp, #4]
 8007292:	f7fe f94f 	bl	8005534 <_Bfree>
 8007296:	2300      	movs	r3, #0
 8007298:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800729a:	25a3      	movs	r5, #163	@ 0xa3
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e793      	b.n	80071c8 <__gethex+0xf8>
 80072a0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80072a4:	2a2e      	cmp	r2, #46	@ 0x2e
 80072a6:	d012      	beq.n	80072ce <__gethex+0x1fe>
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	d104      	bne.n	80072b6 <__gethex+0x1e6>
 80072ac:	f845 bb04 	str.w	fp, [r5], #4
 80072b0:	f04f 0b00 	mov.w	fp, #0
 80072b4:	465b      	mov	r3, fp
 80072b6:	7830      	ldrb	r0, [r6, #0]
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	f7ff fef4 	bl	80070a6 <__hexdig_fun>
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	f000 000f 	and.w	r0, r0, #15
 80072c4:	4098      	lsls	r0, r3
 80072c6:	ea4b 0b00 	orr.w	fp, fp, r0
 80072ca:	3304      	adds	r3, #4
 80072cc:	e7ae      	b.n	800722c <__gethex+0x15c>
 80072ce:	45b1      	cmp	r9, r6
 80072d0:	d8ea      	bhi.n	80072a8 <__gethex+0x1d8>
 80072d2:	2201      	movs	r2, #1
 80072d4:	4630      	mov	r0, r6
 80072d6:	492a      	ldr	r1, [pc, #168]	@ (8007380 <__gethex+0x2b0>)
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	f7ff fe29 	bl	8006f30 <strncmp>
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d1e1      	bne.n	80072a8 <__gethex+0x1d8>
 80072e4:	e7a2      	b.n	800722c <__gethex+0x15c>
 80072e6:	4620      	mov	r0, r4
 80072e8:	1ea9      	subs	r1, r5, #2
 80072ea:	f7fe fd68 	bl	8005dbe <__any_on>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d0c2      	beq.n	8007278 <__gethex+0x1a8>
 80072f2:	f04f 0903 	mov.w	r9, #3
 80072f6:	e7c1      	b.n	800727c <__gethex+0x1ac>
 80072f8:	da09      	bge.n	800730e <__gethex+0x23e>
 80072fa:	1b75      	subs	r5, r6, r5
 80072fc:	4621      	mov	r1, r4
 80072fe:	462a      	mov	r2, r5
 8007300:	9801      	ldr	r0, [sp, #4]
 8007302:	f7fe fb2d 	bl	8005960 <__lshift>
 8007306:	4604      	mov	r4, r0
 8007308:	1b7f      	subs	r7, r7, r5
 800730a:	f100 0a14 	add.w	sl, r0, #20
 800730e:	f04f 0900 	mov.w	r9, #0
 8007312:	e7b8      	b.n	8007286 <__gethex+0x1b6>
 8007314:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007318:	42bd      	cmp	r5, r7
 800731a:	dd6f      	ble.n	80073fc <__gethex+0x32c>
 800731c:	1bed      	subs	r5, r5, r7
 800731e:	42ae      	cmp	r6, r5
 8007320:	dc34      	bgt.n	800738c <__gethex+0x2bc>
 8007322:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d022      	beq.n	8007370 <__gethex+0x2a0>
 800732a:	2b03      	cmp	r3, #3
 800732c:	d024      	beq.n	8007378 <__gethex+0x2a8>
 800732e:	2b01      	cmp	r3, #1
 8007330:	d115      	bne.n	800735e <__gethex+0x28e>
 8007332:	42ae      	cmp	r6, r5
 8007334:	d113      	bne.n	800735e <__gethex+0x28e>
 8007336:	2e01      	cmp	r6, #1
 8007338:	d10b      	bne.n	8007352 <__gethex+0x282>
 800733a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800733e:	9a02      	ldr	r2, [sp, #8]
 8007340:	2562      	movs	r5, #98	@ 0x62
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	2301      	movs	r3, #1
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	f8ca 3000 	str.w	r3, [sl]
 800734c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800734e:	601c      	str	r4, [r3, #0]
 8007350:	e73a      	b.n	80071c8 <__gethex+0xf8>
 8007352:	4620      	mov	r0, r4
 8007354:	1e71      	subs	r1, r6, #1
 8007356:	f7fe fd32 	bl	8005dbe <__any_on>
 800735a:	2800      	cmp	r0, #0
 800735c:	d1ed      	bne.n	800733a <__gethex+0x26a>
 800735e:	4621      	mov	r1, r4
 8007360:	9801      	ldr	r0, [sp, #4]
 8007362:	f7fe f8e7 	bl	8005534 <_Bfree>
 8007366:	2300      	movs	r3, #0
 8007368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800736a:	2550      	movs	r5, #80	@ 0x50
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e72b      	b.n	80071c8 <__gethex+0xf8>
 8007370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1f3      	bne.n	800735e <__gethex+0x28e>
 8007376:	e7e0      	b.n	800733a <__gethex+0x26a>
 8007378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1dd      	bne.n	800733a <__gethex+0x26a>
 800737e:	e7ee      	b.n	800735e <__gethex+0x28e>
 8007380:	08007f28 	.word	0x08007f28
 8007384:	08007dbb 	.word	0x08007dbb
 8007388:	080080d6 	.word	0x080080d6
 800738c:	1e6f      	subs	r7, r5, #1
 800738e:	f1b9 0f00 	cmp.w	r9, #0
 8007392:	d130      	bne.n	80073f6 <__gethex+0x326>
 8007394:	b127      	cbz	r7, 80073a0 <__gethex+0x2d0>
 8007396:	4639      	mov	r1, r7
 8007398:	4620      	mov	r0, r4
 800739a:	f7fe fd10 	bl	8005dbe <__any_on>
 800739e:	4681      	mov	r9, r0
 80073a0:	2301      	movs	r3, #1
 80073a2:	4629      	mov	r1, r5
 80073a4:	1b76      	subs	r6, r6, r5
 80073a6:	2502      	movs	r5, #2
 80073a8:	117a      	asrs	r2, r7, #5
 80073aa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80073ae:	f007 071f 	and.w	r7, r7, #31
 80073b2:	40bb      	lsls	r3, r7
 80073b4:	4213      	tst	r3, r2
 80073b6:	4620      	mov	r0, r4
 80073b8:	bf18      	it	ne
 80073ba:	f049 0902 	orrne.w	r9, r9, #2
 80073be:	f7ff fe1f 	bl	8007000 <rshift>
 80073c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80073c6:	f1b9 0f00 	cmp.w	r9, #0
 80073ca:	d047      	beq.n	800745c <__gethex+0x38c>
 80073cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d015      	beq.n	8007400 <__gethex+0x330>
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d017      	beq.n	8007408 <__gethex+0x338>
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d109      	bne.n	80073f0 <__gethex+0x320>
 80073dc:	f019 0f02 	tst.w	r9, #2
 80073e0:	d006      	beq.n	80073f0 <__gethex+0x320>
 80073e2:	f8da 3000 	ldr.w	r3, [sl]
 80073e6:	ea49 0903 	orr.w	r9, r9, r3
 80073ea:	f019 0f01 	tst.w	r9, #1
 80073ee:	d10e      	bne.n	800740e <__gethex+0x33e>
 80073f0:	f045 0510 	orr.w	r5, r5, #16
 80073f4:	e032      	b.n	800745c <__gethex+0x38c>
 80073f6:	f04f 0901 	mov.w	r9, #1
 80073fa:	e7d1      	b.n	80073a0 <__gethex+0x2d0>
 80073fc:	2501      	movs	r5, #1
 80073fe:	e7e2      	b.n	80073c6 <__gethex+0x2f6>
 8007400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007402:	f1c3 0301 	rsb	r3, r3, #1
 8007406:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <__gethex+0x320>
 800740e:	f04f 0c00 	mov.w	ip, #0
 8007412:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007416:	f104 0314 	add.w	r3, r4, #20
 800741a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800741e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007422:	4618      	mov	r0, r3
 8007424:	f853 2b04 	ldr.w	r2, [r3], #4
 8007428:	f1b2 3fff 	cmp.w	r2, #4294967295
 800742c:	d01b      	beq.n	8007466 <__gethex+0x396>
 800742e:	3201      	adds	r2, #1
 8007430:	6002      	str	r2, [r0, #0]
 8007432:	2d02      	cmp	r5, #2
 8007434:	f104 0314 	add.w	r3, r4, #20
 8007438:	d13c      	bne.n	80074b4 <__gethex+0x3e4>
 800743a:	f8d8 2000 	ldr.w	r2, [r8]
 800743e:	3a01      	subs	r2, #1
 8007440:	42b2      	cmp	r2, r6
 8007442:	d109      	bne.n	8007458 <__gethex+0x388>
 8007444:	2201      	movs	r2, #1
 8007446:	1171      	asrs	r1, r6, #5
 8007448:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800744c:	f006 061f 	and.w	r6, r6, #31
 8007450:	fa02 f606 	lsl.w	r6, r2, r6
 8007454:	421e      	tst	r6, r3
 8007456:	d13a      	bne.n	80074ce <__gethex+0x3fe>
 8007458:	f045 0520 	orr.w	r5, r5, #32
 800745c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800745e:	601c      	str	r4, [r3, #0]
 8007460:	9b02      	ldr	r3, [sp, #8]
 8007462:	601f      	str	r7, [r3, #0]
 8007464:	e6b0      	b.n	80071c8 <__gethex+0xf8>
 8007466:	4299      	cmp	r1, r3
 8007468:	f843 cc04 	str.w	ip, [r3, #-4]
 800746c:	d8d9      	bhi.n	8007422 <__gethex+0x352>
 800746e:	68a3      	ldr	r3, [r4, #8]
 8007470:	459b      	cmp	fp, r3
 8007472:	db17      	blt.n	80074a4 <__gethex+0x3d4>
 8007474:	6861      	ldr	r1, [r4, #4]
 8007476:	9801      	ldr	r0, [sp, #4]
 8007478:	3101      	adds	r1, #1
 800747a:	f7fe f81b 	bl	80054b4 <_Balloc>
 800747e:	4681      	mov	r9, r0
 8007480:	b918      	cbnz	r0, 800748a <__gethex+0x3ba>
 8007482:	4602      	mov	r2, r0
 8007484:	2184      	movs	r1, #132	@ 0x84
 8007486:	4b19      	ldr	r3, [pc, #100]	@ (80074ec <__gethex+0x41c>)
 8007488:	e6c5      	b.n	8007216 <__gethex+0x146>
 800748a:	6922      	ldr	r2, [r4, #16]
 800748c:	f104 010c 	add.w	r1, r4, #12
 8007490:	3202      	adds	r2, #2
 8007492:	0092      	lsls	r2, r2, #2
 8007494:	300c      	adds	r0, #12
 8007496:	f7ff fd6d 	bl	8006f74 <memcpy>
 800749a:	4621      	mov	r1, r4
 800749c:	9801      	ldr	r0, [sp, #4]
 800749e:	f7fe f849 	bl	8005534 <_Bfree>
 80074a2:	464c      	mov	r4, r9
 80074a4:	6923      	ldr	r3, [r4, #16]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	6122      	str	r2, [r4, #16]
 80074aa:	2201      	movs	r2, #1
 80074ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074b0:	615a      	str	r2, [r3, #20]
 80074b2:	e7be      	b.n	8007432 <__gethex+0x362>
 80074b4:	6922      	ldr	r2, [r4, #16]
 80074b6:	455a      	cmp	r2, fp
 80074b8:	dd0b      	ble.n	80074d2 <__gethex+0x402>
 80074ba:	2101      	movs	r1, #1
 80074bc:	4620      	mov	r0, r4
 80074be:	f7ff fd9f 	bl	8007000 <rshift>
 80074c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074c6:	3701      	adds	r7, #1
 80074c8:	42bb      	cmp	r3, r7
 80074ca:	f6ff aee0 	blt.w	800728e <__gethex+0x1be>
 80074ce:	2501      	movs	r5, #1
 80074d0:	e7c2      	b.n	8007458 <__gethex+0x388>
 80074d2:	f016 061f 	ands.w	r6, r6, #31
 80074d6:	d0fa      	beq.n	80074ce <__gethex+0x3fe>
 80074d8:	4453      	add	r3, sl
 80074da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80074de:	f7fe f8db 	bl	8005698 <__hi0bits>
 80074e2:	f1c6 0620 	rsb	r6, r6, #32
 80074e6:	42b0      	cmp	r0, r6
 80074e8:	dbe7      	blt.n	80074ba <__gethex+0x3ea>
 80074ea:	e7f0      	b.n	80074ce <__gethex+0x3fe>
 80074ec:	08007dbb 	.word	0x08007dbb

080074f0 <L_shift>:
 80074f0:	f1c2 0208 	rsb	r2, r2, #8
 80074f4:	0092      	lsls	r2, r2, #2
 80074f6:	b570      	push	{r4, r5, r6, lr}
 80074f8:	f1c2 0620 	rsb	r6, r2, #32
 80074fc:	6843      	ldr	r3, [r0, #4]
 80074fe:	6804      	ldr	r4, [r0, #0]
 8007500:	fa03 f506 	lsl.w	r5, r3, r6
 8007504:	432c      	orrs	r4, r5
 8007506:	40d3      	lsrs	r3, r2
 8007508:	6004      	str	r4, [r0, #0]
 800750a:	f840 3f04 	str.w	r3, [r0, #4]!
 800750e:	4288      	cmp	r0, r1
 8007510:	d3f4      	bcc.n	80074fc <L_shift+0xc>
 8007512:	bd70      	pop	{r4, r5, r6, pc}

08007514 <__match>:
 8007514:	b530      	push	{r4, r5, lr}
 8007516:	6803      	ldr	r3, [r0, #0]
 8007518:	3301      	adds	r3, #1
 800751a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800751e:	b914      	cbnz	r4, 8007526 <__match+0x12>
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	2001      	movs	r0, #1
 8007524:	bd30      	pop	{r4, r5, pc}
 8007526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800752a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800752e:	2d19      	cmp	r5, #25
 8007530:	bf98      	it	ls
 8007532:	3220      	addls	r2, #32
 8007534:	42a2      	cmp	r2, r4
 8007536:	d0f0      	beq.n	800751a <__match+0x6>
 8007538:	2000      	movs	r0, #0
 800753a:	e7f3      	b.n	8007524 <__match+0x10>

0800753c <__hexnan>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	2500      	movs	r5, #0
 8007542:	680b      	ldr	r3, [r1, #0]
 8007544:	4682      	mov	sl, r0
 8007546:	115e      	asrs	r6, r3, #5
 8007548:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800754c:	f013 031f 	ands.w	r3, r3, #31
 8007550:	bf18      	it	ne
 8007552:	3604      	addne	r6, #4
 8007554:	1f37      	subs	r7, r6, #4
 8007556:	4690      	mov	r8, r2
 8007558:	46b9      	mov	r9, r7
 800755a:	463c      	mov	r4, r7
 800755c:	46ab      	mov	fp, r5
 800755e:	b087      	sub	sp, #28
 8007560:	6801      	ldr	r1, [r0, #0]
 8007562:	9301      	str	r3, [sp, #4]
 8007564:	f846 5c04 	str.w	r5, [r6, #-4]
 8007568:	9502      	str	r5, [sp, #8]
 800756a:	784a      	ldrb	r2, [r1, #1]
 800756c:	1c4b      	adds	r3, r1, #1
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	b342      	cbz	r2, 80075c4 <__hexnan+0x88>
 8007572:	4610      	mov	r0, r2
 8007574:	9105      	str	r1, [sp, #20]
 8007576:	9204      	str	r2, [sp, #16]
 8007578:	f7ff fd95 	bl	80070a6 <__hexdig_fun>
 800757c:	2800      	cmp	r0, #0
 800757e:	d151      	bne.n	8007624 <__hexnan+0xe8>
 8007580:	9a04      	ldr	r2, [sp, #16]
 8007582:	9905      	ldr	r1, [sp, #20]
 8007584:	2a20      	cmp	r2, #32
 8007586:	d818      	bhi.n	80075ba <__hexnan+0x7e>
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	459b      	cmp	fp, r3
 800758c:	dd13      	ble.n	80075b6 <__hexnan+0x7a>
 800758e:	454c      	cmp	r4, r9
 8007590:	d206      	bcs.n	80075a0 <__hexnan+0x64>
 8007592:	2d07      	cmp	r5, #7
 8007594:	dc04      	bgt.n	80075a0 <__hexnan+0x64>
 8007596:	462a      	mov	r2, r5
 8007598:	4649      	mov	r1, r9
 800759a:	4620      	mov	r0, r4
 800759c:	f7ff ffa8 	bl	80074f0 <L_shift>
 80075a0:	4544      	cmp	r4, r8
 80075a2:	d952      	bls.n	800764a <__hexnan+0x10e>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f1a4 0904 	sub.w	r9, r4, #4
 80075aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80075ae:	461d      	mov	r5, r3
 80075b0:	464c      	mov	r4, r9
 80075b2:	f8cd b008 	str.w	fp, [sp, #8]
 80075b6:	9903      	ldr	r1, [sp, #12]
 80075b8:	e7d7      	b.n	800756a <__hexnan+0x2e>
 80075ba:	2a29      	cmp	r2, #41	@ 0x29
 80075bc:	d157      	bne.n	800766e <__hexnan+0x132>
 80075be:	3102      	adds	r1, #2
 80075c0:	f8ca 1000 	str.w	r1, [sl]
 80075c4:	f1bb 0f00 	cmp.w	fp, #0
 80075c8:	d051      	beq.n	800766e <__hexnan+0x132>
 80075ca:	454c      	cmp	r4, r9
 80075cc:	d206      	bcs.n	80075dc <__hexnan+0xa0>
 80075ce:	2d07      	cmp	r5, #7
 80075d0:	dc04      	bgt.n	80075dc <__hexnan+0xa0>
 80075d2:	462a      	mov	r2, r5
 80075d4:	4649      	mov	r1, r9
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff ff8a 	bl	80074f0 <L_shift>
 80075dc:	4544      	cmp	r4, r8
 80075de:	d936      	bls.n	800764e <__hexnan+0x112>
 80075e0:	4623      	mov	r3, r4
 80075e2:	f1a8 0204 	sub.w	r2, r8, #4
 80075e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80075ea:	429f      	cmp	r7, r3
 80075ec:	f842 1f04 	str.w	r1, [r2, #4]!
 80075f0:	d2f9      	bcs.n	80075e6 <__hexnan+0xaa>
 80075f2:	1b3b      	subs	r3, r7, r4
 80075f4:	f023 0303 	bic.w	r3, r3, #3
 80075f8:	3304      	adds	r3, #4
 80075fa:	3401      	adds	r4, #1
 80075fc:	3e03      	subs	r6, #3
 80075fe:	42b4      	cmp	r4, r6
 8007600:	bf88      	it	hi
 8007602:	2304      	movhi	r3, #4
 8007604:	2200      	movs	r2, #0
 8007606:	4443      	add	r3, r8
 8007608:	f843 2b04 	str.w	r2, [r3], #4
 800760c:	429f      	cmp	r7, r3
 800760e:	d2fb      	bcs.n	8007608 <__hexnan+0xcc>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	b91b      	cbnz	r3, 800761c <__hexnan+0xe0>
 8007614:	4547      	cmp	r7, r8
 8007616:	d128      	bne.n	800766a <__hexnan+0x12e>
 8007618:	2301      	movs	r3, #1
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	2005      	movs	r0, #5
 800761e:	b007      	add	sp, #28
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	3501      	adds	r5, #1
 8007626:	2d08      	cmp	r5, #8
 8007628:	f10b 0b01 	add.w	fp, fp, #1
 800762c:	dd06      	ble.n	800763c <__hexnan+0x100>
 800762e:	4544      	cmp	r4, r8
 8007630:	d9c1      	bls.n	80075b6 <__hexnan+0x7a>
 8007632:	2300      	movs	r3, #0
 8007634:	2501      	movs	r5, #1
 8007636:	f844 3c04 	str.w	r3, [r4, #-4]
 800763a:	3c04      	subs	r4, #4
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	f000 000f 	and.w	r0, r0, #15
 8007642:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007646:	6020      	str	r0, [r4, #0]
 8007648:	e7b5      	b.n	80075b6 <__hexnan+0x7a>
 800764a:	2508      	movs	r5, #8
 800764c:	e7b3      	b.n	80075b6 <__hexnan+0x7a>
 800764e:	9b01      	ldr	r3, [sp, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0dd      	beq.n	8007610 <__hexnan+0xd4>
 8007654:	f04f 32ff 	mov.w	r2, #4294967295
 8007658:	f1c3 0320 	rsb	r3, r3, #32
 800765c:	40da      	lsrs	r2, r3
 800765e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007662:	4013      	ands	r3, r2
 8007664:	f846 3c04 	str.w	r3, [r6, #-4]
 8007668:	e7d2      	b.n	8007610 <__hexnan+0xd4>
 800766a:	3f04      	subs	r7, #4
 800766c:	e7d0      	b.n	8007610 <__hexnan+0xd4>
 800766e:	2004      	movs	r0, #4
 8007670:	e7d5      	b.n	800761e <__hexnan+0xe2>

08007672 <__ascii_mbtowc>:
 8007672:	b082      	sub	sp, #8
 8007674:	b901      	cbnz	r1, 8007678 <__ascii_mbtowc+0x6>
 8007676:	a901      	add	r1, sp, #4
 8007678:	b142      	cbz	r2, 800768c <__ascii_mbtowc+0x1a>
 800767a:	b14b      	cbz	r3, 8007690 <__ascii_mbtowc+0x1e>
 800767c:	7813      	ldrb	r3, [r2, #0]
 800767e:	600b      	str	r3, [r1, #0]
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	1e10      	subs	r0, r2, #0
 8007684:	bf18      	it	ne
 8007686:	2001      	movne	r0, #1
 8007688:	b002      	add	sp, #8
 800768a:	4770      	bx	lr
 800768c:	4610      	mov	r0, r2
 800768e:	e7fb      	b.n	8007688 <__ascii_mbtowc+0x16>
 8007690:	f06f 0001 	mvn.w	r0, #1
 8007694:	e7f8      	b.n	8007688 <__ascii_mbtowc+0x16>

08007696 <_realloc_r>:
 8007696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769a:	4680      	mov	r8, r0
 800769c:	4615      	mov	r5, r2
 800769e:	460c      	mov	r4, r1
 80076a0:	b921      	cbnz	r1, 80076ac <_realloc_r+0x16>
 80076a2:	4611      	mov	r1, r2
 80076a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	f7fd be78 	b.w	800539c <_malloc_r>
 80076ac:	b92a      	cbnz	r2, 80076ba <_realloc_r+0x24>
 80076ae:	f7fd fe03 	bl	80052b8 <_free_r>
 80076b2:	2400      	movs	r4, #0
 80076b4:	4620      	mov	r0, r4
 80076b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ba:	f000 f840 	bl	800773e <_malloc_usable_size_r>
 80076be:	4285      	cmp	r5, r0
 80076c0:	4606      	mov	r6, r0
 80076c2:	d802      	bhi.n	80076ca <_realloc_r+0x34>
 80076c4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076c8:	d8f4      	bhi.n	80076b4 <_realloc_r+0x1e>
 80076ca:	4629      	mov	r1, r5
 80076cc:	4640      	mov	r0, r8
 80076ce:	f7fd fe65 	bl	800539c <_malloc_r>
 80076d2:	4607      	mov	r7, r0
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d0ec      	beq.n	80076b2 <_realloc_r+0x1c>
 80076d8:	42b5      	cmp	r5, r6
 80076da:	462a      	mov	r2, r5
 80076dc:	4621      	mov	r1, r4
 80076de:	bf28      	it	cs
 80076e0:	4632      	movcs	r2, r6
 80076e2:	f7ff fc47 	bl	8006f74 <memcpy>
 80076e6:	4621      	mov	r1, r4
 80076e8:	4640      	mov	r0, r8
 80076ea:	f7fd fde5 	bl	80052b8 <_free_r>
 80076ee:	463c      	mov	r4, r7
 80076f0:	e7e0      	b.n	80076b4 <_realloc_r+0x1e>

080076f2 <__ascii_wctomb>:
 80076f2:	4603      	mov	r3, r0
 80076f4:	4608      	mov	r0, r1
 80076f6:	b141      	cbz	r1, 800770a <__ascii_wctomb+0x18>
 80076f8:	2aff      	cmp	r2, #255	@ 0xff
 80076fa:	d904      	bls.n	8007706 <__ascii_wctomb+0x14>
 80076fc:	228a      	movs	r2, #138	@ 0x8a
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	4770      	bx	lr
 8007706:	2001      	movs	r0, #1
 8007708:	700a      	strb	r2, [r1, #0]
 800770a:	4770      	bx	lr

0800770c <fiprintf>:
 800770c:	b40e      	push	{r1, r2, r3}
 800770e:	b503      	push	{r0, r1, lr}
 8007710:	4601      	mov	r1, r0
 8007712:	ab03      	add	r3, sp, #12
 8007714:	4805      	ldr	r0, [pc, #20]	@ (800772c <fiprintf+0x20>)
 8007716:	f853 2b04 	ldr.w	r2, [r3], #4
 800771a:	6800      	ldr	r0, [r0, #0]
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	f000 f83d 	bl	800779c <_vfiprintf_r>
 8007722:	b002      	add	sp, #8
 8007724:	f85d eb04 	ldr.w	lr, [sp], #4
 8007728:	b003      	add	sp, #12
 800772a:	4770      	bx	lr
 800772c:	20000018 	.word	0x20000018

08007730 <abort>:
 8007730:	2006      	movs	r0, #6
 8007732:	b508      	push	{r3, lr}
 8007734:	f000 fa06 	bl	8007b44 <raise>
 8007738:	2001      	movs	r0, #1
 800773a:	f7fa f94e 	bl	80019da <_exit>

0800773e <_malloc_usable_size_r>:
 800773e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007742:	1f18      	subs	r0, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfbc      	itt	lt
 8007748:	580b      	ldrlt	r3, [r1, r0]
 800774a:	18c0      	addlt	r0, r0, r3
 800774c:	4770      	bx	lr

0800774e <__sfputc_r>:
 800774e:	6893      	ldr	r3, [r2, #8]
 8007750:	b410      	push	{r4}
 8007752:	3b01      	subs	r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	6093      	str	r3, [r2, #8]
 8007758:	da07      	bge.n	800776a <__sfputc_r+0x1c>
 800775a:	6994      	ldr	r4, [r2, #24]
 800775c:	42a3      	cmp	r3, r4
 800775e:	db01      	blt.n	8007764 <__sfputc_r+0x16>
 8007760:	290a      	cmp	r1, #10
 8007762:	d102      	bne.n	800776a <__sfputc_r+0x1c>
 8007764:	bc10      	pop	{r4}
 8007766:	f000 b931 	b.w	80079cc <__swbuf_r>
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	1c58      	adds	r0, r3, #1
 800776e:	6010      	str	r0, [r2, #0]
 8007770:	7019      	strb	r1, [r3, #0]
 8007772:	4608      	mov	r0, r1
 8007774:	bc10      	pop	{r4}
 8007776:	4770      	bx	lr

08007778 <__sfputs_r>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	4614      	mov	r4, r2
 8007780:	18d5      	adds	r5, r2, r3
 8007782:	42ac      	cmp	r4, r5
 8007784:	d101      	bne.n	800778a <__sfputs_r+0x12>
 8007786:	2000      	movs	r0, #0
 8007788:	e007      	b.n	800779a <__sfputs_r+0x22>
 800778a:	463a      	mov	r2, r7
 800778c:	4630      	mov	r0, r6
 800778e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007792:	f7ff ffdc 	bl	800774e <__sfputc_r>
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	d1f3      	bne.n	8007782 <__sfputs_r+0xa>
 800779a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800779c <_vfiprintf_r>:
 800779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	460d      	mov	r5, r1
 80077a2:	4614      	mov	r4, r2
 80077a4:	4698      	mov	r8, r3
 80077a6:	4606      	mov	r6, r0
 80077a8:	b09d      	sub	sp, #116	@ 0x74
 80077aa:	b118      	cbz	r0, 80077b4 <_vfiprintf_r+0x18>
 80077ac:	6a03      	ldr	r3, [r0, #32]
 80077ae:	b90b      	cbnz	r3, 80077b4 <_vfiprintf_r+0x18>
 80077b0:	f7fc fe04 	bl	80043bc <__sinit>
 80077b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077b6:	07d9      	lsls	r1, r3, #31
 80077b8:	d405      	bmi.n	80077c6 <_vfiprintf_r+0x2a>
 80077ba:	89ab      	ldrh	r3, [r5, #12]
 80077bc:	059a      	lsls	r2, r3, #22
 80077be:	d402      	bmi.n	80077c6 <_vfiprintf_r+0x2a>
 80077c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077c2:	f7fc ff12 	bl	80045ea <__retarget_lock_acquire_recursive>
 80077c6:	89ab      	ldrh	r3, [r5, #12]
 80077c8:	071b      	lsls	r3, r3, #28
 80077ca:	d501      	bpl.n	80077d0 <_vfiprintf_r+0x34>
 80077cc:	692b      	ldr	r3, [r5, #16]
 80077ce:	b99b      	cbnz	r3, 80077f8 <_vfiprintf_r+0x5c>
 80077d0:	4629      	mov	r1, r5
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f938 	bl	8007a48 <__swsetup_r>
 80077d8:	b170      	cbz	r0, 80077f8 <_vfiprintf_r+0x5c>
 80077da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077dc:	07dc      	lsls	r4, r3, #31
 80077de:	d504      	bpl.n	80077ea <_vfiprintf_r+0x4e>
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	b01d      	add	sp, #116	@ 0x74
 80077e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ea:	89ab      	ldrh	r3, [r5, #12]
 80077ec:	0598      	lsls	r0, r3, #22
 80077ee:	d4f7      	bmi.n	80077e0 <_vfiprintf_r+0x44>
 80077f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077f2:	f7fc fefb 	bl	80045ec <__retarget_lock_release_recursive>
 80077f6:	e7f3      	b.n	80077e0 <_vfiprintf_r+0x44>
 80077f8:	2300      	movs	r3, #0
 80077fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80077fc:	2320      	movs	r3, #32
 80077fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007802:	2330      	movs	r3, #48	@ 0x30
 8007804:	f04f 0901 	mov.w	r9, #1
 8007808:	f8cd 800c 	str.w	r8, [sp, #12]
 800780c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80079b8 <_vfiprintf_r+0x21c>
 8007810:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007814:	4623      	mov	r3, r4
 8007816:	469a      	mov	sl, r3
 8007818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800781c:	b10a      	cbz	r2, 8007822 <_vfiprintf_r+0x86>
 800781e:	2a25      	cmp	r2, #37	@ 0x25
 8007820:	d1f9      	bne.n	8007816 <_vfiprintf_r+0x7a>
 8007822:	ebba 0b04 	subs.w	fp, sl, r4
 8007826:	d00b      	beq.n	8007840 <_vfiprintf_r+0xa4>
 8007828:	465b      	mov	r3, fp
 800782a:	4622      	mov	r2, r4
 800782c:	4629      	mov	r1, r5
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff ffa2 	bl	8007778 <__sfputs_r>
 8007834:	3001      	adds	r0, #1
 8007836:	f000 80a7 	beq.w	8007988 <_vfiprintf_r+0x1ec>
 800783a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800783c:	445a      	add	r2, fp
 800783e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007840:	f89a 3000 	ldrb.w	r3, [sl]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 809f 	beq.w	8007988 <_vfiprintf_r+0x1ec>
 800784a:	2300      	movs	r3, #0
 800784c:	f04f 32ff 	mov.w	r2, #4294967295
 8007850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007854:	f10a 0a01 	add.w	sl, sl, #1
 8007858:	9304      	str	r3, [sp, #16]
 800785a:	9307      	str	r3, [sp, #28]
 800785c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007860:	931a      	str	r3, [sp, #104]	@ 0x68
 8007862:	4654      	mov	r4, sl
 8007864:	2205      	movs	r2, #5
 8007866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786a:	4853      	ldr	r0, [pc, #332]	@ (80079b8 <_vfiprintf_r+0x21c>)
 800786c:	f7fc febf 	bl	80045ee <memchr>
 8007870:	9a04      	ldr	r2, [sp, #16]
 8007872:	b9d8      	cbnz	r0, 80078ac <_vfiprintf_r+0x110>
 8007874:	06d1      	lsls	r1, r2, #27
 8007876:	bf44      	itt	mi
 8007878:	2320      	movmi	r3, #32
 800787a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800787e:	0713      	lsls	r3, r2, #28
 8007880:	bf44      	itt	mi
 8007882:	232b      	movmi	r3, #43	@ 0x2b
 8007884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007888:	f89a 3000 	ldrb.w	r3, [sl]
 800788c:	2b2a      	cmp	r3, #42	@ 0x2a
 800788e:	d015      	beq.n	80078bc <_vfiprintf_r+0x120>
 8007890:	4654      	mov	r4, sl
 8007892:	2000      	movs	r0, #0
 8007894:	f04f 0c0a 	mov.w	ip, #10
 8007898:	9a07      	ldr	r2, [sp, #28]
 800789a:	4621      	mov	r1, r4
 800789c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a0:	3b30      	subs	r3, #48	@ 0x30
 80078a2:	2b09      	cmp	r3, #9
 80078a4:	d94b      	bls.n	800793e <_vfiprintf_r+0x1a2>
 80078a6:	b1b0      	cbz	r0, 80078d6 <_vfiprintf_r+0x13a>
 80078a8:	9207      	str	r2, [sp, #28]
 80078aa:	e014      	b.n	80078d6 <_vfiprintf_r+0x13a>
 80078ac:	eba0 0308 	sub.w	r3, r0, r8
 80078b0:	fa09 f303 	lsl.w	r3, r9, r3
 80078b4:	4313      	orrs	r3, r2
 80078b6:	46a2      	mov	sl, r4
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	e7d2      	b.n	8007862 <_vfiprintf_r+0xc6>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	1d19      	adds	r1, r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	9103      	str	r1, [sp, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bfbb      	ittet	lt
 80078c8:	425b      	neglt	r3, r3
 80078ca:	f042 0202 	orrlt.w	r2, r2, #2
 80078ce:	9307      	strge	r3, [sp, #28]
 80078d0:	9307      	strlt	r3, [sp, #28]
 80078d2:	bfb8      	it	lt
 80078d4:	9204      	strlt	r2, [sp, #16]
 80078d6:	7823      	ldrb	r3, [r4, #0]
 80078d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80078da:	d10a      	bne.n	80078f2 <_vfiprintf_r+0x156>
 80078dc:	7863      	ldrb	r3, [r4, #1]
 80078de:	2b2a      	cmp	r3, #42	@ 0x2a
 80078e0:	d132      	bne.n	8007948 <_vfiprintf_r+0x1ac>
 80078e2:	9b03      	ldr	r3, [sp, #12]
 80078e4:	3402      	adds	r4, #2
 80078e6:	1d1a      	adds	r2, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	9203      	str	r2, [sp, #12]
 80078ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80079bc <_vfiprintf_r+0x220>
 80078f6:	2203      	movs	r2, #3
 80078f8:	4650      	mov	r0, sl
 80078fa:	7821      	ldrb	r1, [r4, #0]
 80078fc:	f7fc fe77 	bl	80045ee <memchr>
 8007900:	b138      	cbz	r0, 8007912 <_vfiprintf_r+0x176>
 8007902:	2240      	movs	r2, #64	@ 0x40
 8007904:	9b04      	ldr	r3, [sp, #16]
 8007906:	eba0 000a 	sub.w	r0, r0, sl
 800790a:	4082      	lsls	r2, r0
 800790c:	4313      	orrs	r3, r2
 800790e:	3401      	adds	r4, #1
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007916:	2206      	movs	r2, #6
 8007918:	4829      	ldr	r0, [pc, #164]	@ (80079c0 <_vfiprintf_r+0x224>)
 800791a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800791e:	f7fc fe66 	bl	80045ee <memchr>
 8007922:	2800      	cmp	r0, #0
 8007924:	d03f      	beq.n	80079a6 <_vfiprintf_r+0x20a>
 8007926:	4b27      	ldr	r3, [pc, #156]	@ (80079c4 <_vfiprintf_r+0x228>)
 8007928:	bb1b      	cbnz	r3, 8007972 <_vfiprintf_r+0x1d6>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	3307      	adds	r3, #7
 800792e:	f023 0307 	bic.w	r3, r3, #7
 8007932:	3308      	adds	r3, #8
 8007934:	9303      	str	r3, [sp, #12]
 8007936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007938:	443b      	add	r3, r7
 800793a:	9309      	str	r3, [sp, #36]	@ 0x24
 800793c:	e76a      	b.n	8007814 <_vfiprintf_r+0x78>
 800793e:	460c      	mov	r4, r1
 8007940:	2001      	movs	r0, #1
 8007942:	fb0c 3202 	mla	r2, ip, r2, r3
 8007946:	e7a8      	b.n	800789a <_vfiprintf_r+0xfe>
 8007948:	2300      	movs	r3, #0
 800794a:	f04f 0c0a 	mov.w	ip, #10
 800794e:	4619      	mov	r1, r3
 8007950:	3401      	adds	r4, #1
 8007952:	9305      	str	r3, [sp, #20]
 8007954:	4620      	mov	r0, r4
 8007956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800795a:	3a30      	subs	r2, #48	@ 0x30
 800795c:	2a09      	cmp	r2, #9
 800795e:	d903      	bls.n	8007968 <_vfiprintf_r+0x1cc>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0c6      	beq.n	80078f2 <_vfiprintf_r+0x156>
 8007964:	9105      	str	r1, [sp, #20]
 8007966:	e7c4      	b.n	80078f2 <_vfiprintf_r+0x156>
 8007968:	4604      	mov	r4, r0
 800796a:	2301      	movs	r3, #1
 800796c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007970:	e7f0      	b.n	8007954 <_vfiprintf_r+0x1b8>
 8007972:	ab03      	add	r3, sp, #12
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	462a      	mov	r2, r5
 8007978:	4630      	mov	r0, r6
 800797a:	4b13      	ldr	r3, [pc, #76]	@ (80079c8 <_vfiprintf_r+0x22c>)
 800797c:	a904      	add	r1, sp, #16
 800797e:	f7fb fec3 	bl	8003708 <_printf_float>
 8007982:	4607      	mov	r7, r0
 8007984:	1c78      	adds	r0, r7, #1
 8007986:	d1d6      	bne.n	8007936 <_vfiprintf_r+0x19a>
 8007988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800798a:	07d9      	lsls	r1, r3, #31
 800798c:	d405      	bmi.n	800799a <_vfiprintf_r+0x1fe>
 800798e:	89ab      	ldrh	r3, [r5, #12]
 8007990:	059a      	lsls	r2, r3, #22
 8007992:	d402      	bmi.n	800799a <_vfiprintf_r+0x1fe>
 8007994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007996:	f7fc fe29 	bl	80045ec <__retarget_lock_release_recursive>
 800799a:	89ab      	ldrh	r3, [r5, #12]
 800799c:	065b      	lsls	r3, r3, #25
 800799e:	f53f af1f 	bmi.w	80077e0 <_vfiprintf_r+0x44>
 80079a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079a4:	e71e      	b.n	80077e4 <_vfiprintf_r+0x48>
 80079a6:	ab03      	add	r3, sp, #12
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	462a      	mov	r2, r5
 80079ac:	4630      	mov	r0, r6
 80079ae:	4b06      	ldr	r3, [pc, #24]	@ (80079c8 <_vfiprintf_r+0x22c>)
 80079b0:	a904      	add	r1, sp, #16
 80079b2:	f7fc f947 	bl	8003c44 <_printf_i>
 80079b6:	e7e4      	b.n	8007982 <_vfiprintf_r+0x1e6>
 80079b8:	08008081 	.word	0x08008081
 80079bc:	08008087 	.word	0x08008087
 80079c0:	0800808b 	.word	0x0800808b
 80079c4:	08003709 	.word	0x08003709
 80079c8:	08007779 	.word	0x08007779

080079cc <__swbuf_r>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	460e      	mov	r6, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	4605      	mov	r5, r0
 80079d4:	b118      	cbz	r0, 80079de <__swbuf_r+0x12>
 80079d6:	6a03      	ldr	r3, [r0, #32]
 80079d8:	b90b      	cbnz	r3, 80079de <__swbuf_r+0x12>
 80079da:	f7fc fcef 	bl	80043bc <__sinit>
 80079de:	69a3      	ldr	r3, [r4, #24]
 80079e0:	60a3      	str	r3, [r4, #8]
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	071a      	lsls	r2, r3, #28
 80079e6:	d501      	bpl.n	80079ec <__swbuf_r+0x20>
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	b943      	cbnz	r3, 80079fe <__swbuf_r+0x32>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f82a 	bl	8007a48 <__swsetup_r>
 80079f4:	b118      	cbz	r0, 80079fe <__swbuf_r+0x32>
 80079f6:	f04f 37ff 	mov.w	r7, #4294967295
 80079fa:	4638      	mov	r0, r7
 80079fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	6922      	ldr	r2, [r4, #16]
 8007a02:	b2f6      	uxtb	r6, r6
 8007a04:	1a98      	subs	r0, r3, r2
 8007a06:	6963      	ldr	r3, [r4, #20]
 8007a08:	4637      	mov	r7, r6
 8007a0a:	4283      	cmp	r3, r0
 8007a0c:	dc05      	bgt.n	8007a1a <__swbuf_r+0x4e>
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4628      	mov	r0, r5
 8007a12:	f7ff fa4b 	bl	8006eac <_fflush_r>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d1ed      	bne.n	80079f6 <__swbuf_r+0x2a>
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	60a3      	str	r3, [r4, #8]
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	6022      	str	r2, [r4, #0]
 8007a26:	701e      	strb	r6, [r3, #0]
 8007a28:	6962      	ldr	r2, [r4, #20]
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d004      	beq.n	8007a3a <__swbuf_r+0x6e>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	07db      	lsls	r3, r3, #31
 8007a34:	d5e1      	bpl.n	80079fa <__swbuf_r+0x2e>
 8007a36:	2e0a      	cmp	r6, #10
 8007a38:	d1df      	bne.n	80079fa <__swbuf_r+0x2e>
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f7ff fa35 	bl	8006eac <_fflush_r>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d0d9      	beq.n	80079fa <__swbuf_r+0x2e>
 8007a46:	e7d6      	b.n	80079f6 <__swbuf_r+0x2a>

08007a48 <__swsetup_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4b29      	ldr	r3, [pc, #164]	@ (8007af0 <__swsetup_r+0xa8>)
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	460c      	mov	r4, r1
 8007a52:	b118      	cbz	r0, 8007a5c <__swsetup_r+0x14>
 8007a54:	6a03      	ldr	r3, [r0, #32]
 8007a56:	b90b      	cbnz	r3, 8007a5c <__swsetup_r+0x14>
 8007a58:	f7fc fcb0 	bl	80043bc <__sinit>
 8007a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a60:	0719      	lsls	r1, r3, #28
 8007a62:	d422      	bmi.n	8007aaa <__swsetup_r+0x62>
 8007a64:	06da      	lsls	r2, r3, #27
 8007a66:	d407      	bmi.n	8007a78 <__swsetup_r+0x30>
 8007a68:	2209      	movs	r2, #9
 8007a6a:	602a      	str	r2, [r5, #0]
 8007a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	e033      	b.n	8007ae0 <__swsetup_r+0x98>
 8007a78:	0758      	lsls	r0, r3, #29
 8007a7a:	d512      	bpl.n	8007aa2 <__swsetup_r+0x5a>
 8007a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a7e:	b141      	cbz	r1, 8007a92 <__swsetup_r+0x4a>
 8007a80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a84:	4299      	cmp	r1, r3
 8007a86:	d002      	beq.n	8007a8e <__swsetup_r+0x46>
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f7fd fc15 	bl	80052b8 <_free_r>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f043 0308 	orr.w	r3, r3, #8
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	b94b      	cbnz	r3, 8007ac2 <__swsetup_r+0x7a>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab8:	d003      	beq.n	8007ac2 <__swsetup_r+0x7a>
 8007aba:	4621      	mov	r1, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	f000 f882 	bl	8007bc6 <__smakebuf_r>
 8007ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac6:	f013 0201 	ands.w	r2, r3, #1
 8007aca:	d00a      	beq.n	8007ae2 <__swsetup_r+0x9a>
 8007acc:	2200      	movs	r2, #0
 8007ace:	60a2      	str	r2, [r4, #8]
 8007ad0:	6962      	ldr	r2, [r4, #20]
 8007ad2:	4252      	negs	r2, r2
 8007ad4:	61a2      	str	r2, [r4, #24]
 8007ad6:	6922      	ldr	r2, [r4, #16]
 8007ad8:	b942      	cbnz	r2, 8007aec <__swsetup_r+0xa4>
 8007ada:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ade:	d1c5      	bne.n	8007a6c <__swsetup_r+0x24>
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	0799      	lsls	r1, r3, #30
 8007ae4:	bf58      	it	pl
 8007ae6:	6962      	ldrpl	r2, [r4, #20]
 8007ae8:	60a2      	str	r2, [r4, #8]
 8007aea:	e7f4      	b.n	8007ad6 <__swsetup_r+0x8e>
 8007aec:	2000      	movs	r0, #0
 8007aee:	e7f7      	b.n	8007ae0 <__swsetup_r+0x98>
 8007af0:	20000018 	.word	0x20000018

08007af4 <_raise_r>:
 8007af4:	291f      	cmp	r1, #31
 8007af6:	b538      	push	{r3, r4, r5, lr}
 8007af8:	4605      	mov	r5, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	d904      	bls.n	8007b08 <_raise_r+0x14>
 8007afe:	2316      	movs	r3, #22
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	f04f 30ff 	mov.w	r0, #4294967295
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b0a:	b112      	cbz	r2, 8007b12 <_raise_r+0x1e>
 8007b0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b10:	b94b      	cbnz	r3, 8007b26 <_raise_r+0x32>
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 f830 	bl	8007b78 <_getpid_r>
 8007b18:	4622      	mov	r2, r4
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b22:	f000 b817 	b.w	8007b54 <_kill_r>
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d00a      	beq.n	8007b40 <_raise_r+0x4c>
 8007b2a:	1c59      	adds	r1, r3, #1
 8007b2c:	d103      	bne.n	8007b36 <_raise_r+0x42>
 8007b2e:	2316      	movs	r3, #22
 8007b30:	6003      	str	r3, [r0, #0]
 8007b32:	2001      	movs	r0, #1
 8007b34:	e7e7      	b.n	8007b06 <_raise_r+0x12>
 8007b36:	2100      	movs	r1, #0
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b3e:	4798      	blx	r3
 8007b40:	2000      	movs	r0, #0
 8007b42:	e7e0      	b.n	8007b06 <_raise_r+0x12>

08007b44 <raise>:
 8007b44:	4b02      	ldr	r3, [pc, #8]	@ (8007b50 <raise+0xc>)
 8007b46:	4601      	mov	r1, r0
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	f7ff bfd3 	b.w	8007af4 <_raise_r>
 8007b4e:	bf00      	nop
 8007b50:	20000018 	.word	0x20000018

08007b54 <_kill_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	2300      	movs	r3, #0
 8007b58:	4d06      	ldr	r5, [pc, #24]	@ (8007b74 <_kill_r+0x20>)
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	4611      	mov	r1, r2
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	f7f9 ff2a 	bl	80019ba <_kill>
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	d102      	bne.n	8007b70 <_kill_r+0x1c>
 8007b6a:	682b      	ldr	r3, [r5, #0]
 8007b6c:	b103      	cbz	r3, 8007b70 <_kill_r+0x1c>
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	bd38      	pop	{r3, r4, r5, pc}
 8007b72:	bf00      	nop
 8007b74:	20000448 	.word	0x20000448

08007b78 <_getpid_r>:
 8007b78:	f7f9 bf18 	b.w	80019ac <_getpid>

08007b7c <__swhatbuf_r>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	460c      	mov	r4, r1
 8007b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b84:	4615      	mov	r5, r2
 8007b86:	2900      	cmp	r1, #0
 8007b88:	461e      	mov	r6, r3
 8007b8a:	b096      	sub	sp, #88	@ 0x58
 8007b8c:	da0c      	bge.n	8007ba8 <__swhatbuf_r+0x2c>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	2100      	movs	r1, #0
 8007b92:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b96:	bf14      	ite	ne
 8007b98:	2340      	movne	r3, #64	@ 0x40
 8007b9a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	6031      	str	r1, [r6, #0]
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	b016      	add	sp, #88	@ 0x58
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}
 8007ba8:	466a      	mov	r2, sp
 8007baa:	f000 f849 	bl	8007c40 <_fstat_r>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	dbed      	blt.n	8007b8e <__swhatbuf_r+0x12>
 8007bb2:	9901      	ldr	r1, [sp, #4]
 8007bb4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bb8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bbc:	4259      	negs	r1, r3
 8007bbe:	4159      	adcs	r1, r3
 8007bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bc4:	e7eb      	b.n	8007b9e <__swhatbuf_r+0x22>

08007bc6 <__smakebuf_r>:
 8007bc6:	898b      	ldrh	r3, [r1, #12]
 8007bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bca:	079d      	lsls	r5, r3, #30
 8007bcc:	4606      	mov	r6, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	d507      	bpl.n	8007be2 <__smakebuf_r+0x1c>
 8007bd2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	6123      	str	r3, [r4, #16]
 8007bda:	2301      	movs	r3, #1
 8007bdc:	6163      	str	r3, [r4, #20]
 8007bde:	b003      	add	sp, #12
 8007be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be2:	466a      	mov	r2, sp
 8007be4:	ab01      	add	r3, sp, #4
 8007be6:	f7ff ffc9 	bl	8007b7c <__swhatbuf_r>
 8007bea:	9f00      	ldr	r7, [sp, #0]
 8007bec:	4605      	mov	r5, r0
 8007bee:	4639      	mov	r1, r7
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7fd fbd3 	bl	800539c <_malloc_r>
 8007bf6:	b948      	cbnz	r0, 8007c0c <__smakebuf_r+0x46>
 8007bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfc:	059a      	lsls	r2, r3, #22
 8007bfe:	d4ee      	bmi.n	8007bde <__smakebuf_r+0x18>
 8007c00:	f023 0303 	bic.w	r3, r3, #3
 8007c04:	f043 0302 	orr.w	r3, r3, #2
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	e7e2      	b.n	8007bd2 <__smakebuf_r+0xc>
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	6020      	str	r0, [r4, #0]
 8007c1c:	b15b      	cbz	r3, 8007c36 <__smakebuf_r+0x70>
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c24:	f000 f81e 	bl	8007c64 <_isatty_r>
 8007c28:	b128      	cbz	r0, 8007c36 <__smakebuf_r+0x70>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f023 0303 	bic.w	r3, r3, #3
 8007c30:	f043 0301 	orr.w	r3, r3, #1
 8007c34:	81a3      	strh	r3, [r4, #12]
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	431d      	orrs	r5, r3
 8007c3a:	81a5      	strh	r5, [r4, #12]
 8007c3c:	e7cf      	b.n	8007bde <__smakebuf_r+0x18>
	...

08007c40 <_fstat_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	2300      	movs	r3, #0
 8007c44:	4d06      	ldr	r5, [pc, #24]	@ (8007c60 <_fstat_r+0x20>)
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f7f9 ff13 	bl	8001a78 <_fstat>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d102      	bne.n	8007c5c <_fstat_r+0x1c>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b103      	cbz	r3, 8007c5c <_fstat_r+0x1c>
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000448 	.word	0x20000448

08007c64 <_isatty_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	2300      	movs	r3, #0
 8007c68:	4d05      	ldr	r5, [pc, #20]	@ (8007c80 <_isatty_r+0x1c>)
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7f9 ff11 	bl	8001a96 <_isatty>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_isatty_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_isatty_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20000448 	.word	0x20000448

08007c84 <_init>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr

08007c90 <_fini>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr
