
MAX31865 RTD PT100_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  080085b8  080085b8  000095b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b20  08008b20  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b20  08008b20  00009b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b28  08008b28  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b28  08008b28  00009b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b2c  08008b2c  00009b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008b30  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001e8  08008d18  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08008d18  0000a3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000932f  00000000  00000000  0000a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab2  00000000  00000000  00013540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00014ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070f  00000000  00000000  00015940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001811a  00000000  00000000  0001604f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac94  00000000  00000000  0002e169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000862ec  00000000  00000000  00038dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf0e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba4  00000000  00000000  000bf12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c2cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080085a0 	.word	0x080085a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080085a0 	.word	0x080085a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <writeRegister8>:
/**
 * @brief Write an 8-bit value to the specified register.
 * @param addr Register address.
 * @param data Data to write.
 */
void writeRegister8(uint8_t addr, uint8_t data) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
    addr |= 0x80; // MSB=1 for write, make sure top bit is set
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001192:	71fb      	strb	r3, [r7, #7]

    uint8_t buffer[2] = {addr, data};
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	733b      	strb	r3, [r7, #12]
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2110      	movs	r1, #16
 80011a0:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <writeRegister8+0x4c>)
 80011a2:	f001 fa27 	bl	80025f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buffer, 2, SPI_DELAY);
 80011a6:	f107 010c 	add.w	r1, r7, #12
 80011aa:	23ff      	movs	r3, #255	@ 0xff
 80011ac:	2202      	movs	r2, #2
 80011ae:	4807      	ldr	r0, [pc, #28]	@ (80011cc <writeRegister8+0x50>)
 80011b0:	f001 fecc 	bl	8002f4c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2110      	movs	r1, #16
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <writeRegister8+0x4c>)
 80011ba:	f001 fa1b 	bl	80025f4 <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010800 	.word	0x40010800
 80011cc:	20000208 	.word	0x20000208

080011d0 <readRegisterN>:
 * @brief Read multiple bytes from the specified register.
 * @param addr Register address.
 * @param buffer Buffer to store the read data.
 * @param n Number of bytes to read.
 */
void readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
    addr &= 0x7F; // MSB=0 for read, make sure top bit is not set
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2110      	movs	r1, #16
 80011ee:	480c      	ldr	r0, [pc, #48]	@ (8001220 <readRegisterN+0x50>)
 80011f0:	f001 fa00 	bl	80025f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &addr, 1, SPI_DELAY);
 80011f4:	1df9      	adds	r1, r7, #7
 80011f6:	23ff      	movs	r3, #255	@ 0xff
 80011f8:	2201      	movs	r2, #1
 80011fa:	480a      	ldr	r0, [pc, #40]	@ (8001224 <readRegisterN+0x54>)
 80011fc:	f001 fea6 	bl	8002f4c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, n, SPI_DELAY);
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	b29a      	uxth	r2, r3
 8001204:	23ff      	movs	r3, #255	@ 0xff
 8001206:	6839      	ldr	r1, [r7, #0]
 8001208:	4806      	ldr	r0, [pc, #24]	@ (8001224 <readRegisterN+0x54>)
 800120a:	f001 ffe2 	bl	80031d2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2110      	movs	r1, #16
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <readRegisterN+0x50>)
 8001214:	f001 f9ee 	bl	80025f4 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010800 	.word	0x40010800
 8001224:	20000208 	.word	0x20000208

08001228 <readRegister8>:
/**
 * @brief Read an 8-bit value from the specified register.
 * @param addr Register address.
 * @return 8-bit value read from the register.
 */
uint8_t readRegister8(uint8_t addr) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    uint8_t ret = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
    readRegisterN(addr, &ret, 1);
 8001236:	f107 010f 	add.w	r1, r7, #15
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2201      	movs	r2, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffc6 	bl	80011d0 <readRegisterN>
    return ret;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <readRegister16>:
/**
 * @brief Read a 16-bit value from the specified register.
 * @param addr Register address.
 * @return 16-bit value read from the register.
 */
uint16_t readRegister16(uint8_t addr) {
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2] = {0, 0};
 8001258:	2300      	movs	r3, #0
 800125a:	81bb      	strh	r3, [r7, #12]
    readRegisterN(addr, buffer, 2);
 800125c:	f107 010c 	add.w	r1, r7, #12
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2202      	movs	r2, #2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ffb3 	bl	80011d0 <readRegisterN>

    uint16_t ret = (uint16_t)buffer[0]; // Cast to uint16_t before left shift
 800126a:	7b3b      	ldrb	r3, [r7, #12]
 800126c:	81fb      	strh	r3, [r7, #14]
    ret <<= 8;
 800126e:	89fb      	ldrh	r3, [r7, #14]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	81fb      	strh	r3, [r7, #14]
    ret |= buffer[1];
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	461a      	mov	r2, r3
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	4313      	orrs	r3, r2
 800127c:	81fb      	strh	r3, [r7, #14]

    return ret;
 800127e:	89fb      	ldrh	r3, [r7, #14]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <setWires>:
}
/**
 * @brief Set the number of wires for the RTD configuration.
 * @param wires Number of wires configuration (2, 3, or 4-wire).
 */
void setWires(max31865_numwires_t wires) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff ffc8 	bl	8001228 <readRegister8>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
    if (wires == MAX31865_3WIRE) {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d104      	bne.n	80012ac <setWires+0x24>
        t |= MAX31865_CONFIG_3WIRE;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f043 0310 	orr.w	r3, r3, #16
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e003      	b.n	80012b4 <setWires+0x2c>
    } else {
        t &= ~MAX31865_CONFIG_3WIRE;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	f023 0310 	bic.w	r3, r3, #16
 80012b2:	73fb      	strb	r3, [r7, #15]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	4619      	mov	r1, r3
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ff5f 	bl	800117c <writeRegister8>
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <enableBias>:
/**
 * @brief Enable or disable the bias voltage on the RTD sensor.
 * @param b True to enable, false to disable.
 */
void enableBias(bool b) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ffa9 	bl	8001228 <readRegister8>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]
    if (b) {
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <enableBias+0x24>
        t |= MAX31865_CONFIG_BIAS; // Enable bias
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e003      	b.n	80012f2 <enableBias+0x2c>
    } else {
        t &= ~MAX31865_CONFIG_BIAS; // Disable bias
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012f0:	73fb      	strb	r3, [r7, #15]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	4619      	mov	r1, r3
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff ff40 	bl	800117c <writeRegister8>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <autoConvert>:

/**
 * @brief Enable or disable automatic conversion mode.
 * @param b True to enable, false to disable.
 */
void autoConvert(bool b) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff ff8a 	bl	8001228 <readRegister8>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
    if (b) {
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <autoConvert+0x24>
        t |= MAX31865_CONFIG_MODEAUTO; // Enable auto convert
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e003      	b.n	8001330 <autoConvert+0x2c>
    } else {
        t &= ~MAX31865_CONFIG_MODEAUTO; // Disable auto convert
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800132e:	73fb      	strb	r3, [r7, #15]
    }
    writeRegister8(MAX31865_CONFIG_REG, t);
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4619      	mov	r1, r3
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ff21 	bl	800117c <writeRegister8>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <setThresholds>:
/**
 * @brief Set the high and low fault thresholds.
 * @param lower Lower threshold.
 * @param upper Upper threshold.
 */
void setThresholds(uint16_t lower, uint16_t upper) {
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	460a      	mov	r2, r1
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	4613      	mov	r3, r2
 8001350:	80bb      	strh	r3, [r7, #4]
    writeRegister8(MAX31865_LFAULTLSB_REG, lower & 0xFF);
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4619      	mov	r1, r3
 8001358:	2006      	movs	r0, #6
 800135a:	f7ff ff0f 	bl	800117c <writeRegister8>
    writeRegister8(MAX31865_LFAULTMSB_REG, lower >> 8);
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	b29b      	uxth	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4619      	mov	r1, r3
 8001368:	2005      	movs	r0, #5
 800136a:	f7ff ff07 	bl	800117c <writeRegister8>
    writeRegister8(MAX31865_HFAULTLSB_REG, upper & 0xFF);
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	2004      	movs	r0, #4
 8001376:	f7ff ff01 	bl	800117c <writeRegister8>
    writeRegister8(MAX31865_HFAULTMSB_REG, upper >> 8);
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b29b      	uxth	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4619      	mov	r1, r3
 8001384:	2003      	movs	r0, #3
 8001386:	f7ff fef9 	bl	800117c <writeRegister8>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <begin>:
/**
 * @brief Initialize the MAX31865 device.
 * @param wires Number of wires configuration (2, 3, or 4-wire).
 * @return True if initialization is successful, otherwise false.
 */
bool begin(max31865_numwires_t wires) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
    if (HAL_SPI_Init(&hspi1) == HAL_OK) {
 800139e:	4812      	ldr	r0, [pc, #72]	@ (80013e8 <begin+0x54>)
 80013a0:	f001 fd50 	bl	8002e44 <HAL_SPI_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <begin+0x1e>
        initialized = true;
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <begin+0x58>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e002      	b.n	80013b8 <begin+0x24>
    } else {
        initialized = false;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <begin+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
    }

    setWires(wires);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff64 	bl	8001288 <setWires>
    enableBias(false);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff80 	bl	80012c6 <enableBias>
    autoConvert(false);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff ff9c 	bl	8001304 <autoConvert>
    setThresholds(0, 0xFFFF);
 80013cc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ffb6 	bl	8001342 <setThresholds>
    clearFault();
 80013d6:	f000 f9d5 	bl	8001784 <clearFault>

    return initialized;
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <begin+0x58>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000208 	.word	0x20000208
 80013ec:	20000204 	.word	0x20000204

080013f0 <readRTD>:

/**
 * @brief Read the RTD resistance value.
 * @return Raw RTD resistance value.
 */
uint16_t readRTD(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
    clearFault();
 80013f6:	f000 f9c5 	bl	8001784 <clearFault>
    enableBias(true);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff ff63 	bl	80012c6 <enableBias>
    HAL_Delay(10);
 8001400:	200a      	movs	r0, #10
 8001402:	f000 fe6b 	bl	80020dc <HAL_Delay>

    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff ff0e 	bl	8001228 <readRegister8>
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
    t |= MAX31865_CONFIG_1SHOT;
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	71fb      	strb	r3, [r7, #7]
    writeRegister8(MAX31865_CONFIG_REG, t);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4619      	mov	r1, r3
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fead 	bl	800117c <writeRegister8>
    HAL_Delay(65);
 8001422:	2041      	movs	r0, #65	@ 0x41
 8001424:	f000 fe5a 	bl	80020dc <HAL_Delay>

    uint16_t rtd = readRegister16(MAX31865_RTDMSB_REG);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ff10 	bl	800124e <readRegister16>
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
    enableBias(false); // Disable bias current to reduce self-heating.
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ff47 	bl	80012c6 <enableBias>

    rtd >>= 1; // Remove fault bit
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	80bb      	strh	r3, [r7, #4]

    return rtd;
 800143e:	88bb      	ldrh	r3, [r7, #4]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <temperature>:
 * @brief Calculate the temperature from the RTD resistance.
 * @param RTDnominal Nominal resistance of the RTD at 0°C.
 * @param refResistor Reference resistance value.
 * @return Calculated temperature.
 */
float temperature(float RTDnominal, float refResistor) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
    return calculateTemperature(readRTD(), RTDnominal, refResistor);
 8001452:	f7ff ffcd 	bl	80013f0 <readRTD>
 8001456:	4603      	mov	r3, r0
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f807 	bl	8001470 <calculateTemperature>
 8001462:	4603      	mov	r3, r0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0000      	movs	r0, r0
	...

08001470 <calculateTemperature>:
 * @param RTDraw Raw RTD resistance value.
 * @param RTDnominal Nominal resistance of the RTD at 0°C.
 * @param refResistor Reference resistance value.
 * @return Calculated temperature.
 */
float calculateTemperature(uint16_t RTDraw, float RTDnominal, float refResistor) {
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	81fb      	strh	r3, [r7, #14]
    float Z1, Z2, Z3, Z4, Rt, temp;

    Rt = RTDraw;
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fc27 	bl	8000cd4 <__aeabi_ui2f>
 8001486:	4603      	mov	r3, r0
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt /= 32768;
 800148a:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 800148e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001490:	f7ff fd2c 	bl	8000eec <__aeabi_fdiv>
 8001494:	4603      	mov	r3, r0
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt *= refResistor;
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800149c:	f7ff fc72 	bl	8000d84 <__aeabi_fmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    Z1 = -RTD_A;
 80014a4:	4b90      	ldr	r3, [pc, #576]	@ (80016e8 <calculateTemperature+0x278>)
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    Z2 = RTD_A * RTD_A - (4 * RTD_B);
 80014a8:	4b90      	ldr	r3, [pc, #576]	@ (80016ec <calculateTemperature+0x27c>)
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    Z3 = (4 * RTD_B) / RTDnominal;
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f7fe ffbb 	bl	8000428 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	a180      	add	r1, pc, #512	@ (adr r1, 80016b8 <calculateTemperature+0x248>)
 80014b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014bc:	f7ff f936 	bl	800072c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fafe 	bl	8000ac8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	623b      	str	r3, [r7, #32]
    Z4 = 2 * RTD_B;
 80014d0:	4b87      	ldr	r3, [pc, #540]	@ (80016f0 <calculateTemperature+0x280>)
 80014d2:	61fb      	str	r3, [r7, #28]

    temp = Z2 + (Z3 * Rt);
 80014d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014d6:	6a38      	ldr	r0, [r7, #32]
 80014d8:	f7ff fc54 	bl	8000d84 <__aeabi_fmul>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014e2:	f7ff fb47 	bl	8000b74 <__addsf3>
 80014e6:	4603      	mov	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]
    temp = (sqrt(temp) + Z1) / Z4;
 80014ea:	69b8      	ldr	r0, [r7, #24]
 80014ec:	f7fe ff9c 	bl	8000428 <__aeabi_f2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f006 ff58 	bl	80083ac <sqrt>
 80014fc:	4604      	mov	r4, r0
 80014fe:	460d      	mov	r5, r1
 8001500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001502:	f7fe ff91 	bl	8000428 <__aeabi_f2d>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7fe fe2d 	bl	800016c <__adddf3>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4614      	mov	r4, r2
 8001518:	461d      	mov	r5, r3
 800151a:	69f8      	ldr	r0, [r7, #28]
 800151c:	f7fe ff84 	bl	8000428 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4620      	mov	r0, r4
 8001526:	4629      	mov	r1, r5
 8001528:	f7ff f900 	bl	800072c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fac8 	bl	8000ac8 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]

    if (temp >= 0) return temp;
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	69b8      	ldr	r0, [r7, #24]
 8001542:	f7ff fdd1 	bl	80010e8 <__aeabi_fcmpge>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <calculateTemperature+0xe0>
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	e0af      	b.n	80016b0 <calculateTemperature+0x240>

    Rt /= RTDnominal;
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001554:	f7ff fcca 	bl	8000eec <__aeabi_fdiv>
 8001558:	4603      	mov	r3, r0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Rt *= 100; // Normalize to 100 ohm
 800155c:	4965      	ldr	r1, [pc, #404]	@ (80016f4 <calculateTemperature+0x284>)
 800155e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001560:	f7ff fc10 	bl	8000d84 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c

    float rpoly = Rt;
 8001568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800156a:	617b      	str	r3, [r7, #20]

    temp = -242.02;
 800156c:	4b62      	ldr	r3, [pc, #392]	@ (80016f8 <calculateTemperature+0x288>)
 800156e:	61bb      	str	r3, [r7, #24]
    temp += 2.2228 * rpoly;
 8001570:	69b8      	ldr	r0, [r7, #24]
 8001572:	f7fe ff59 	bl	8000428 <__aeabi_f2d>
 8001576:	4604      	mov	r4, r0
 8001578:	460d      	mov	r5, r1
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7fe ff54 	bl	8000428 <__aeabi_f2d>
 8001580:	a34f      	add	r3, pc, #316	@ (adr r3, 80016c0 <calculateTemperature+0x250>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7fe ffa7 	bl	80004d8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4620      	mov	r0, r4
 8001590:	4629      	mov	r1, r5
 8001592:	f7fe fdeb 	bl	800016c <__adddf3>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff fa93 	bl	8000ac8 <__aeabi_d2f>
 80015a2:	4603      	mov	r3, r0
 80015a4:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt; // Square
 80015a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015a8:	6978      	ldr	r0, [r7, #20]
 80015aa:	f7ff fbeb 	bl	8000d84 <__aeabi_fmul>
 80015ae:	4603      	mov	r3, r0
 80015b0:	617b      	str	r3, [r7, #20]
    temp += 2.5859e-3 * rpoly;
 80015b2:	69b8      	ldr	r0, [r7, #24]
 80015b4:	f7fe ff38 	bl	8000428 <__aeabi_f2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	6978      	ldr	r0, [r7, #20]
 80015be:	f7fe ff33 	bl	8000428 <__aeabi_f2d>
 80015c2:	a341      	add	r3, pc, #260	@ (adr r3, 80016c8 <calculateTemperature+0x258>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7fe ff86 	bl	80004d8 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4620      	mov	r0, r4
 80015d2:	4629      	mov	r1, r5
 80015d4:	f7fe fdca 	bl	800016c <__adddf3>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fa72 	bl	8000ac8 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt; // ^3
 80015e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff fbca 	bl	8000d84 <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	617b      	str	r3, [r7, #20]
    temp -= 4.8260e-6 * rpoly;
 80015f4:	69b8      	ldr	r0, [r7, #24]
 80015f6:	f7fe ff17 	bl	8000428 <__aeabi_f2d>
 80015fa:	4604      	mov	r4, r0
 80015fc:	460d      	mov	r5, r1
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7fe ff12 	bl	8000428 <__aeabi_f2d>
 8001604:	a332      	add	r3, pc, #200	@ (adr r3, 80016d0 <calculateTemperature+0x260>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe ff65 	bl	80004d8 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	f7fe fda7 	bl	8000168 <__aeabi_dsub>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa51 	bl	8000ac8 <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt; // ^4
 800162a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800162c:	6978      	ldr	r0, [r7, #20]
 800162e:	f7ff fba9 	bl	8000d84 <__aeabi_fmul>
 8001632:	4603      	mov	r3, r0
 8001634:	617b      	str	r3, [r7, #20]
    temp -= 2.8183e-8 * rpoly;
 8001636:	69b8      	ldr	r0, [r7, #24]
 8001638:	f7fe fef6 	bl	8000428 <__aeabi_f2d>
 800163c:	4604      	mov	r4, r0
 800163e:	460d      	mov	r5, r1
 8001640:	6978      	ldr	r0, [r7, #20]
 8001642:	f7fe fef1 	bl	8000428 <__aeabi_f2d>
 8001646:	a324      	add	r3, pc, #144	@ (adr r3, 80016d8 <calculateTemperature+0x268>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe ff44 	bl	80004d8 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe fd86 	bl	8000168 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fa30 	bl	8000ac8 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	61bb      	str	r3, [r7, #24]
    rpoly *= Rt; // ^5
 800166c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff fb88 	bl	8000d84 <__aeabi_fmul>
 8001674:	4603      	mov	r3, r0
 8001676:	617b      	str	r3, [r7, #20]
    temp += 1.5243e-10 * rpoly;
 8001678:	69b8      	ldr	r0, [r7, #24]
 800167a:	f7fe fed5 	bl	8000428 <__aeabi_f2d>
 800167e:	4604      	mov	r4, r0
 8001680:	460d      	mov	r5, r1
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7fe fed0 	bl	8000428 <__aeabi_f2d>
 8001688:	a315      	add	r3, pc, #84	@ (adr r3, 80016e0 <calculateTemperature+0x270>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe ff23 	bl	80004d8 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4620      	mov	r0, r4
 8001698:	4629      	mov	r1, r5
 800169a:	f7fe fd67 	bl	800016c <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa0f 	bl	8000ac8 <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]

    return temp;
 80016ae:	69bb      	ldr	r3, [r7, #24]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3730      	adds	r7, #48	@ 0x30
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bdb0      	pop	{r4, r5, r7, pc}
 80016b8:	ee19ce88 	.word	0xee19ce88
 80016bc:	bec360af 	.word	0xbec360af
 80016c0:	5dcc63f1 	.word	0x5dcc63f1
 80016c4:	4001c84b 	.word	0x4001c84b
 80016c8:	7dc882bb 	.word	0x7dc882bb
 80016cc:	3f652f06 	.word	0x3f652f06
 80016d0:	c766c293 	.word	0xc766c293
 80016d4:	3ed43de0 	.word	0x3ed43de0
 80016d8:	513156ce 	.word	0x513156ce
 80016dc:	3e5e42e2 	.word	0x3e5e42e2
 80016e0:	61e4fa3e 	.word	0x61e4fa3e
 80016e4:	3de4f327 	.word	0x3de4f327
 80016e8:	bb801132 	.word	0xbb801132
 80016ec:	37938317 	.word	0x37938317
 80016f0:	b59b057f 	.word	0xb59b057f
 80016f4:	42c80000 	.word	0x42c80000
 80016f8:	c372051f 	.word	0xc372051f

080016fc <readFault>:
/**
 * @brief Read fault status from the MAX31865.
 * @param fault_cycle Fault detection cycle mode.
 * @return Fault status register value.
 */
uint8_t readFault(max31865_fault_cycle_t fault_cycle) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
    if (fault_cycle) {
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d033      	beq.n	8001774 <readFault+0x78>
        uint8_t cfg_reg = readRegister8(MAX31865_CONFIG_REG);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fd8b 	bl	8001228 <readRegister8>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
        cfg_reg &= 0x11; // Mask out wire and filter bits
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	f003 0311 	and.w	r3, r3, #17
 800171c:	73fb      	strb	r3, [r7, #15]
        switch (fault_cycle) {
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d01c      	beq.n	800175e <readFault+0x62>
 8001724:	2b03      	cmp	r3, #3
 8001726:	dc24      	bgt.n	8001772 <readFault+0x76>
 8001728:	2b01      	cmp	r3, #1
 800172a:	d002      	beq.n	8001732 <readFault+0x36>
 800172c:	2b02      	cmp	r3, #2
 800172e:	d00c      	beq.n	800174a <readFault+0x4e>
        case MAX31865_FAULT_MANUAL_FINISH:
            writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001100));
            return 0;
        case MAX31865_FAULT_NONE:
        default:
            break;
 8001730:	e01f      	b.n	8001772 <readFault+0x76>
            writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10000100));
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	f063 037b 	orn	r3, r3, #123	@ 0x7b
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fd1d 	bl	800117c <writeRegister8>
            HAL_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f000 fcca 	bl	80020dc <HAL_Delay>
            break;
 8001748:	e014      	b.n	8001774 <readFault+0x78>
            writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001000));
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	f063 0377 	orn	r3, r3, #119	@ 0x77
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4619      	mov	r1, r3
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fd11 	bl	800117c <writeRegister8>
            return 0;
 800175a:	2300      	movs	r3, #0
 800175c:	e00e      	b.n	800177c <readFault+0x80>
            writeRegister8(MAX31865_CONFIG_REG, (cfg_reg | 0b10001100));
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	f063 0373 	orn	r3, r3, #115	@ 0x73
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fd07 	bl	800117c <writeRegister8>
            return 0;
 800176e:	2300      	movs	r3, #0
 8001770:	e004      	b.n	800177c <readFault+0x80>
            break;
 8001772:	bf00      	nop
        }
    }
    return readRegister8(MAX31865_FAULTSTAT_REG);
 8001774:	2007      	movs	r0, #7
 8001776:	f7ff fd57 	bl	8001228 <readRegister8>
 800177a:	4603      	mov	r3, r0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <clearFault>:

/**
 * @brief Clear fault status on the MAX31865.
 */
void clearFault(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
    uint8_t t = readRegister8(MAX31865_CONFIG_REG);
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff fd4c 	bl	8001228 <readRegister8>
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
    t &= ~0x2C;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f023 032c 	bic.w	r3, r3, #44	@ 0x2c
 800179a:	71fb      	strb	r3, [r7, #7]
    t |= MAX31865_CONFIG_FAULTSTAT;
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	71fb      	strb	r3, [r7, #7]
    writeRegister8(MAX31865_CONFIG_REG, t);
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4619      	mov	r1, r3
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fce7 	bl	800117c <writeRegister8>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b096      	sub	sp, #88	@ 0x58
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint16_t rtd = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	uint8_t fault;
	max31865_fault_cycle_t fault_cycle = MAX31865_FAULT_AUTO;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ca:	f000 fc25 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ce:	f000 f961 	bl	8001a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d2:	f000 f9fb 	bl	8001bcc <MX_GPIO_Init>
  MX_SPI1_Init();
 80017d6:	f000 f999 	bl	8001b0c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80017da:	f000 f9cd 	bl	8001b78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

   begin(MAX31865_4WIRE);  // set to 2WIRE or 4WIRE as necessary
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fdd8 	bl	8001394 <begin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  rtd = readRTD();
 80017e4:	f7ff fe04 	bl	80013f0 <readRTD>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	      ratio = rtd;
 80017ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fa6e 	bl	8000cd4 <__aeabi_ui2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	653b      	str	r3, [r7, #80]	@ 0x50
	      ratio /= 32768;
 80017fc:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8001800:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001802:	f7ff fb73 	bl	8000eec <__aeabi_fdiv>
 8001806:	4603      	mov	r3, r0
 8001808:	653b      	str	r3, [r7, #80]	@ 0x50

	      sprintf(MSG1,"RTD value: %d",rtd);
 800180a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800180e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001812:	498f      	ldr	r1, [pc, #572]	@ (8001a50 <main+0x298>)
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f99b 	bl	8004b50 <siprintf>
	      HAL_UART_Transmit(&huart1,(uint8_t*) MSG1, sizeof(MSG1), 100);
 800181a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800181e:	2364      	movs	r3, #100	@ 0x64
 8001820:	2214      	movs	r2, #20
 8001822:	488c      	ldr	r0, [pc, #560]	@ (8001a54 <main+0x29c>)
 8001824:	f002 f8e6 	bl	80039f4 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart1,(uint8_t*) "\n\r",2, 10);
 8001828:	230a      	movs	r3, #10
 800182a:	2202      	movs	r2, #2
 800182c:	498a      	ldr	r1, [pc, #552]	@ (8001a58 <main+0x2a0>)
 800182e:	4889      	ldr	r0, [pc, #548]	@ (8001a54 <main+0x29c>)
 8001830:	f002 f8e0 	bl	80039f4 <HAL_UART_Transmit>

	      sprintf(MSG1,"Ratio = %.8f" ,ratio);
 8001834:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001836:	f7fe fdf7 	bl	8000428 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001842:	4986      	ldr	r1, [pc, #536]	@ (8001a5c <main+0x2a4>)
 8001844:	f003 f984 	bl	8004b50 <siprintf>
	      HAL_UART_Transmit(&huart1,(uint8_t*) MSG1, sizeof(MSG1), 100);
 8001848:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800184c:	2364      	movs	r3, #100	@ 0x64
 800184e:	2214      	movs	r2, #20
 8001850:	4880      	ldr	r0, [pc, #512]	@ (8001a54 <main+0x29c>)
 8001852:	f002 f8cf 	bl	80039f4 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart1,(uint8_t*) "\n\r",2, 10);
 8001856:	230a      	movs	r3, #10
 8001858:	2202      	movs	r2, #2
 800185a:	497f      	ldr	r1, [pc, #508]	@ (8001a58 <main+0x2a0>)
 800185c:	487d      	ldr	r0, [pc, #500]	@ (8001a54 <main+0x29c>)
 800185e:	f002 f8c9 	bl	80039f4 <HAL_UART_Transmit>

	      sprintf(MSG1,"Resistance = %.8f",RREF*ratio);
 8001862:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001864:	f7fe fde0 	bl	8000428 <__aeabi_f2d>
 8001868:	a377      	add	r3, pc, #476	@ (adr r3, 8001a48 <main+0x290>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fe33 	bl	80004d8 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800187a:	4979      	ldr	r1, [pc, #484]	@ (8001a60 <main+0x2a8>)
 800187c:	f003 f968 	bl	8004b50 <siprintf>
	      HAL_UART_Transmit(&huart1,(uint8_t*) MSG1, sizeof(MSG1), 100);
 8001880:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001884:	2364      	movs	r3, #100	@ 0x64
 8001886:	2214      	movs	r2, #20
 8001888:	4872      	ldr	r0, [pc, #456]	@ (8001a54 <main+0x29c>)
 800188a:	f002 f8b3 	bl	80039f4 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart1,(uint8_t*) "\n\r",2, 10);
 800188e:	230a      	movs	r3, #10
 8001890:	2202      	movs	r2, #2
 8001892:	4971      	ldr	r1, [pc, #452]	@ (8001a58 <main+0x2a0>)
 8001894:	486f      	ldr	r0, [pc, #444]	@ (8001a54 <main+0x29c>)
 8001896:	f002 f8ad 	bl	80039f4 <HAL_UART_Transmit>

	      sprintf(MSG1,"Temperature = %.2f",temperature(RNOMINAL, RREF));
 800189a:	4972      	ldr	r1, [pc, #456]	@ (8001a64 <main+0x2ac>)
 800189c:	4872      	ldr	r0, [pc, #456]	@ (8001a68 <main+0x2b0>)
 800189e:	f7ff fdd3 	bl	8001448 <temperature>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fdbf 	bl	8000428 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80018b2:	496e      	ldr	r1, [pc, #440]	@ (8001a6c <main+0x2b4>)
 80018b4:	f003 f94c 	bl	8004b50 <siprintf>
	      HAL_UART_Transmit(&huart1,(uint8_t*) "***********", 10, 50);
 80018b8:	2332      	movs	r3, #50	@ 0x32
 80018ba:	220a      	movs	r2, #10
 80018bc:	496c      	ldr	r1, [pc, #432]	@ (8001a70 <main+0x2b8>)
 80018be:	4865      	ldr	r0, [pc, #404]	@ (8001a54 <main+0x29c>)
 80018c0:	f002 f898 	bl	80039f4 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart1,(uint8_t*) MSG1, sizeof(MSG1), 100);
 80018c4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80018c8:	2364      	movs	r3, #100	@ 0x64
 80018ca:	2214      	movs	r2, #20
 80018cc:	4861      	ldr	r0, [pc, #388]	@ (8001a54 <main+0x29c>)
 80018ce:	f002 f891 	bl	80039f4 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart1,(uint8_t*) "************", 10, 50);
 80018d2:	2332      	movs	r3, #50	@ 0x32
 80018d4:	220a      	movs	r2, #10
 80018d6:	4967      	ldr	r1, [pc, #412]	@ (8001a74 <main+0x2bc>)
 80018d8:	485e      	ldr	r0, [pc, #376]	@ (8001a54 <main+0x29c>)
 80018da:	f002 f88b 	bl	80039f4 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart1,(uint8_t*) "\n\r",2, 10);
 80018de:	230a      	movs	r3, #10
 80018e0:	2202      	movs	r2, #2
 80018e2:	495d      	ldr	r1, [pc, #372]	@ (8001a58 <main+0x2a0>)
 80018e4:	485b      	ldr	r0, [pc, #364]	@ (8001a54 <main+0x29c>)
 80018e6:	f002 f885 	bl	80039f4 <HAL_UART_Transmit>

	      fault = readFault(fault_cycle);
 80018ea:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff04 	bl	80016fc <readFault>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	      if (fault) {
 80018fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 809d 	beq.w	8001a3e <main+0x286>
	           sprintf(buffer, "Fault 0x%X\n", fault);
 8001904:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	495b      	ldr	r1, [pc, #364]	@ (8001a78 <main+0x2c0>)
 800190c:	4618      	mov	r0, r3
 800190e:	f003 f91f 	bl	8004b50 <siprintf>
	           HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fc1b 	bl	8000150 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	1d39      	adds	r1, r7, #4
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	484b      	ldr	r0, [pc, #300]	@ (8001a54 <main+0x29c>)
 8001926:	f002 f865 	bl	80039f4 <HAL_UART_Transmit>

	           if (fault & MAX31865_FAULT_HIGHTHRESH) {
 800192a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800192e:	2b00      	cmp	r3, #0
 8001930:	da10      	bge.n	8001954 <main+0x19c>
	               sprintf(buffer, "RTD High Threshold\n");
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4951      	ldr	r1, [pc, #324]	@ (8001a7c <main+0x2c4>)
 8001936:	4618      	mov	r0, r3
 8001938:	f003 f90a 	bl	8004b50 <siprintf>
	               HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc06 	bl	8000150 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	1d39      	adds	r1, r7, #4
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	4841      	ldr	r0, [pc, #260]	@ (8001a54 <main+0x29c>)
 8001950:	f002 f850 	bl	80039f4 <HAL_UART_Transmit>
	           }
	           if (fault & MAX31865_FAULT_LOWTHRESH) {
 8001954:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <main+0x1ca>
	               sprintf(buffer, "RTD Low Threshold\n");
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	4947      	ldr	r1, [pc, #284]	@ (8001a80 <main+0x2c8>)
 8001964:	4618      	mov	r0, r3
 8001966:	f003 f8f3 	bl	8004b50 <siprintf>
	               HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fbef 	bl	8000150 <strlen>
 8001972:	4603      	mov	r3, r0
 8001974:	b29a      	uxth	r2, r3
 8001976:	1d39      	adds	r1, r7, #4
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	4835      	ldr	r0, [pc, #212]	@ (8001a54 <main+0x29c>)
 800197e:	f002 f839 	bl	80039f4 <HAL_UART_Transmit>
	           }
	           if (fault & MAX31865_FAULT_REFINLOW) {
 8001982:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b00      	cmp	r3, #0
 800198c:	d010      	beq.n	80019b0 <main+0x1f8>
	               sprintf(buffer, "REFIN- > 0.85 x Bias\n");
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	493c      	ldr	r1, [pc, #240]	@ (8001a84 <main+0x2cc>)
 8001992:	4618      	mov	r0, r3
 8001994:	f003 f8dc 	bl	8004b50 <siprintf>
	               HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fbd8 	bl	8000150 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	1d39      	adds	r1, r7, #4
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	482a      	ldr	r0, [pc, #168]	@ (8001a54 <main+0x29c>)
 80019ac:	f002 f822 	bl	80039f4 <HAL_UART_Transmit>
	           }
	           if (fault & MAX31865_FAULT_REFINHIGH) {
 80019b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d010      	beq.n	80019de <main+0x226>
	               sprintf(buffer, "REFIN- < 0.85 x Bias - FORCE- open\n");
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4932      	ldr	r1, [pc, #200]	@ (8001a88 <main+0x2d0>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 f8c5 	bl	8004b50 <siprintf>
	               HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fbc1 	bl	8000150 <strlen>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	1d39      	adds	r1, r7, #4
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	481e      	ldr	r0, [pc, #120]	@ (8001a54 <main+0x29c>)
 80019da:	f002 f80b 	bl	80039f4 <HAL_UART_Transmit>
	           }
	           if (fault & MAX31865_FAULT_RTDINLOW) {
 80019de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d010      	beq.n	8001a0c <main+0x254>
	               sprintf(buffer, "RTDIN- < 0.85 x Bias - FORCE- open\n");
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4927      	ldr	r1, [pc, #156]	@ (8001a8c <main+0x2d4>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f8ae 	bl	8004b50 <siprintf>
	               HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fbaa 	bl	8000150 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	1d39      	adds	r1, r7, #4
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <main+0x29c>)
 8001a08:	f001 fff4 	bl	80039f4 <HAL_UART_Transmit>
	           }
	           if (fault & MAX31865_FAULT_OVUV) {
 8001a0c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <main+0x282>
	               sprintf(buffer, "Under/Over voltage\n");
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	491d      	ldr	r1, [pc, #116]	@ (8001a90 <main+0x2d8>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 f897 	bl	8004b50 <siprintf>
	               HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fb93 	bl	8000150 <strlen>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	1d39      	adds	r1, r7, #4
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	4807      	ldr	r0, [pc, #28]	@ (8001a54 <main+0x29c>)
 8001a36:	f001 ffdd 	bl	80039f4 <HAL_UART_Transmit>
	           }
	           clearFault();
 8001a3a:	f7ff fea3 	bl	8001784 <clearFault>
	       }
	       HAL_Delay(9*5000);
 8001a3e:	f64a 70c8 	movw	r0, #45000	@ 0xafc8
 8001a42:	f000 fb4b 	bl	80020dc <HAL_Delay>
	  rtd = readRTD();
 8001a46:	e6cd      	b.n	80017e4 <main+0x2c>
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	407ae000 	.word	0x407ae000
 8001a50:	080085b8 	.word	0x080085b8
 8001a54:	20000260 	.word	0x20000260
 8001a58:	080085c8 	.word	0x080085c8
 8001a5c:	080085cc 	.word	0x080085cc
 8001a60:	080085dc 	.word	0x080085dc
 8001a64:	43d70000 	.word	0x43d70000
 8001a68:	42c80000 	.word	0x42c80000
 8001a6c:	080085f0 	.word	0x080085f0
 8001a70:	08008604 	.word	0x08008604
 8001a74:	08008610 	.word	0x08008610
 8001a78:	08008620 	.word	0x08008620
 8001a7c:	0800862c 	.word	0x0800862c
 8001a80:	08008640 	.word	0x08008640
 8001a84:	08008654 	.word	0x08008654
 8001a88:	0800866c 	.word	0x0800866c
 8001a8c:	08008690 	.word	0x08008690
 8001a90:	080086b4 	.word	0x080086b4

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b090      	sub	sp, #64	@ 0x40
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	2228      	movs	r2, #40	@ 0x28
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 f8b7 	bl	8004c16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac6:	f107 0318 	add.w	r3, r7, #24
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fdaa 	bl	8002624 <HAL_RCC_OscConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001ad6:	f000 f8b7 	bl	8001c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ada:	230f      	movs	r3, #15
 8001adc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 f817 	bl	8002b28 <HAL_RCC_ClockConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001b00:	f000 f8a2 	bl	8001c48 <Error_Handler>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3740      	adds	r7, #64	@ 0x40
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b12:	4a18      	ldr	r2, [pc, #96]	@ (8001b74 <MX_SPI1_Init+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b58:	220a      	movs	r2, #10
 8001b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	@ (8001b70 <MX_SPI1_Init+0x64>)
 8001b5e:	f001 f971 	bl	8002e44 <HAL_SPI_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b68:	f000 f86e 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000208 	.word	0x20000208
 8001b74:	40013000 	.word	0x40013000

08001b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <MX_USART1_UART_Init+0x50>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_USART1_UART_Init+0x4c>)
 8001bb0:	f001 fed0 	bl	8003954 <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bba:	f000 f845 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000260 	.word	0x20000260
 8001bc8:	40013800 	.word	0x40013800

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be0:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <MX_GPIO_Init+0x74>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a16      	ldr	r2, [pc, #88]	@ (8001c40 <MX_GPIO_Init+0x74>)
 8001be6:	f043 0320 	orr.w	r3, r3, #32
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_GPIO_Init+0x74>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_GPIO_Init+0x74>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <MX_GPIO_Init+0x74>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_GPIO_Init+0x74>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2110      	movs	r1, #16
 8001c14:	480b      	ldr	r0, [pc, #44]	@ (8001c44 <MX_GPIO_Init+0x78>)
 8001c16:	f000 fced 	bl	80025f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2302      	movs	r3, #2
 8001c28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4804      	ldr	r0, [pc, #16]	@ (8001c44 <MX_GPIO_Init+0x78>)
 8001c32:	f000 fb5b 	bl	80022ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010800 	.word	0x40010800

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <Error_Handler+0x8>

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_MspInit+0x5c>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <HAL_MspInit+0x5c>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6193      	str	r3, [r2, #24]
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_MspInit+0x5c>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_MspInit+0x5c>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb0 <HAL_MspInit+0x5c>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <HAL_MspInit+0x5c>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_MspInit+0x60>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <HAL_MspInit+0x60>)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000

08001cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d40 <HAL_SPI_MspInit+0x88>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d12f      	bne.n	8001d38 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <HAL_SPI_MspInit+0x8c>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <HAL_SPI_MspInit+0x8c>)
 8001cde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_SPI_MspInit+0x8c>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <HAL_SPI_MspInit+0x8c>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <HAL_SPI_MspInit+0x8c>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_SPI_MspInit+0x8c>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d08:	23a0      	movs	r3, #160	@ 0xa0
 8001d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480b      	ldr	r0, [pc, #44]	@ (8001d48 <HAL_SPI_MspInit+0x90>)
 8001d1c:	f000 fae6 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d20:	2340      	movs	r3, #64	@ 0x40
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <HAL_SPI_MspInit+0x90>)
 8001d34:	f000 fada 	bl	80022ec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40013000 	.word	0x40013000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800

08001d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <HAL_UART_MspInit+0x8c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d131      	bne.n	8001dd0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_UART_MspInit+0x90>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	@ (8001ddc <HAL_UART_MspInit+0x90>)
 8001d72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_UART_MspInit+0x90>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d84:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_UART_MspInit+0x90>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <HAL_UART_MspInit+0x90>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_UART_MspInit+0x90>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	4619      	mov	r1, r3
 8001db0:	480b      	ldr	r0, [pc, #44]	@ (8001de0 <HAL_UART_MspInit+0x94>)
 8001db2:	f000 fa9b 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <HAL_UART_MspInit+0x94>)
 8001dcc:	f000 fa8e 	bl	80022ec <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <NMI_Handler+0x4>

08001dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f000 f936 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return 1;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <_kill>:

int _kill(int pid, int sig)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e54:	f002 ff32 	bl	8004cbc <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2216      	movs	r2, #22
 8001e5c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_exit>:

void _exit (int status)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e72:	f04f 31ff 	mov.w	r1, #4294967295
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffe7 	bl	8001e4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <_exit+0x12>

08001e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00a      	b.n	8001ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e92:	f3af 8000 	nop.w
 8001e96:	4601      	mov	r1, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf0      	blt.n	8001e92 <_read+0x12>
  }

  return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e009      	b.n	8001ee0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbf1      	blt.n	8001ecc <_write+0x12>
  }
  return len;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_close>:

int _close(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f18:	605a      	str	r2, [r3, #4]
  return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <_isatty>:

int _isatty(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
	...

08001f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	@ (8001fb0 <_sbrk+0x5c>)
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <_sbrk+0x60>)
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f70:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <_sbrk+0x64>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	@ (8001fbc <_sbrk+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <_sbrk+0x64>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d207      	bcs.n	8001f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f84:	f002 fe9a 	bl	8004cbc <__errno>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	e009      	b.n	8001fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <_sbrk+0x64>)
 8001fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20005000 	.word	0x20005000
 8001fb4:	00000400 	.word	0x00000400
 8001fb8:	200002a8 	.word	0x200002a8
 8001fbc:	20000400 	.word	0x20000400

08001fc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fcc:	f7ff fff8 	bl	8001fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd0:	480b      	ldr	r0, [pc, #44]	@ (8002000 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fd2:	490c      	ldr	r1, [pc, #48]	@ (8002004 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a09      	ldr	r2, [pc, #36]	@ (800200c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fe8:	4c09      	ldr	r4, [pc, #36]	@ (8002010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f002 fe67 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ffa:	f7ff fbdd 	bl	80017b8 <main>
  bx lr
 8001ffe:	4770      	bx	lr
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002008:	08008b30 	.word	0x08008b30
  ldr r2, =_sbss
 800200c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002010:	200003fc 	.word	0x200003fc

08002014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC1_2_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_Init+0x28>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <HAL_Init+0x28>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f000 f92b 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202e:	200f      	movs	r0, #15
 8002030:	f000 f808 	bl	8002044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002034:	f7ff fe0e 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_InitTick+0x54>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_InitTick+0x58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205a:	fbb3 f3f1 	udiv	r3, r3, r1
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f935 	bl	80022d2 <HAL_SYSTICK_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e00e      	b.n	8002090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b0f      	cmp	r3, #15
 8002076:	d80a      	bhi.n	800208e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002078:	2200      	movs	r2, #0
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f000 f90b 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002084:	4a06      	ldr	r2, [pc, #24]	@ (80020a0 <HAL_InitTick+0x5c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000000 	.word	0x20000000
 800209c:	20000008 	.word	0x20000008
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_IncTick+0x1c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_IncTick+0x20>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a03      	ldr	r2, [pc, #12]	@ (80020c4 <HAL_IncTick+0x20>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000008 	.word	0x20000008
 80020c4:	200002ac 	.word	0x200002ac

080020c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b02      	ldr	r3, [pc, #8]	@ (80020d8 <HAL_GetTick+0x10>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	200002ac 	.word	0x200002ac

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff fff0 	bl	80020c8 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffe0 	bl	80020c8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	@ (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	@ (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	@ 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f7ff ff90 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff49 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff5e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff90 	bl	80021dc <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5f 	bl	8002188 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffb0 	bl	8002240 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b08b      	sub	sp, #44	@ 0x2c
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fe:	e169      	b.n	80025d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002300:	2201      	movs	r2, #1
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8158 	bne.w	80025ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a9a      	ldr	r2, [pc, #616]	@ (800258c <HAL_GPIO_Init+0x2a0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d05e      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 8002328:	4a98      	ldr	r2, [pc, #608]	@ (800258c <HAL_GPIO_Init+0x2a0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d875      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 800232e:	4a98      	ldr	r2, [pc, #608]	@ (8002590 <HAL_GPIO_Init+0x2a4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d058      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 8002334:	4a96      	ldr	r2, [pc, #600]	@ (8002590 <HAL_GPIO_Init+0x2a4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d86f      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 800233a:	4a96      	ldr	r2, [pc, #600]	@ (8002594 <HAL_GPIO_Init+0x2a8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d052      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 8002340:	4a94      	ldr	r2, [pc, #592]	@ (8002594 <HAL_GPIO_Init+0x2a8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d869      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 8002346:	4a94      	ldr	r2, [pc, #592]	@ (8002598 <HAL_GPIO_Init+0x2ac>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d04c      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 800234c:	4a92      	ldr	r2, [pc, #584]	@ (8002598 <HAL_GPIO_Init+0x2ac>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d863      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 8002352:	4a92      	ldr	r2, [pc, #584]	@ (800259c <HAL_GPIO_Init+0x2b0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d046      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
 8002358:	4a90      	ldr	r2, [pc, #576]	@ (800259c <HAL_GPIO_Init+0x2b0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d85d      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 800235e:	2b12      	cmp	r3, #18
 8002360:	d82a      	bhi.n	80023b8 <HAL_GPIO_Init+0xcc>
 8002362:	2b12      	cmp	r3, #18
 8002364:	d859      	bhi.n	800241a <HAL_GPIO_Init+0x12e>
 8002366:	a201      	add	r2, pc, #4	@ (adr r2, 800236c <HAL_GPIO_Init+0x80>)
 8002368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236c:	080023e7 	.word	0x080023e7
 8002370:	080023c1 	.word	0x080023c1
 8002374:	080023d3 	.word	0x080023d3
 8002378:	08002415 	.word	0x08002415
 800237c:	0800241b 	.word	0x0800241b
 8002380:	0800241b 	.word	0x0800241b
 8002384:	0800241b 	.word	0x0800241b
 8002388:	0800241b 	.word	0x0800241b
 800238c:	0800241b 	.word	0x0800241b
 8002390:	0800241b 	.word	0x0800241b
 8002394:	0800241b 	.word	0x0800241b
 8002398:	0800241b 	.word	0x0800241b
 800239c:	0800241b 	.word	0x0800241b
 80023a0:	0800241b 	.word	0x0800241b
 80023a4:	0800241b 	.word	0x0800241b
 80023a8:	0800241b 	.word	0x0800241b
 80023ac:	0800241b 	.word	0x0800241b
 80023b0:	080023c9 	.word	0x080023c9
 80023b4:	080023dd 	.word	0x080023dd
 80023b8:	4a79      	ldr	r2, [pc, #484]	@ (80025a0 <HAL_GPIO_Init+0x2b4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023be:	e02c      	b.n	800241a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e029      	b.n	800241c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	3304      	adds	r3, #4
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e024      	b.n	800241c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	3308      	adds	r3, #8
 80023d8:	623b      	str	r3, [r7, #32]
          break;
 80023da:	e01f      	b.n	800241c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	330c      	adds	r3, #12
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e01a      	b.n	800241c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ee:	2304      	movs	r3, #4
 80023f0:	623b      	str	r3, [r7, #32]
          break;
 80023f2:	e013      	b.n	800241c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023fc:	2308      	movs	r3, #8
 80023fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	611a      	str	r2, [r3, #16]
          break;
 8002406:	e009      	b.n	800241c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002408:	2308      	movs	r3, #8
 800240a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	615a      	str	r2, [r3, #20]
          break;
 8002412:	e003      	b.n	800241c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
          break;
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x130>
          break;
 800241a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2bff      	cmp	r3, #255	@ 0xff
 8002420:	d801      	bhi.n	8002426 <HAL_GPIO_Init+0x13a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	e001      	b.n	800242a <HAL_GPIO_Init+0x13e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2bff      	cmp	r3, #255	@ 0xff
 8002430:	d802      	bhi.n	8002438 <HAL_GPIO_Init+0x14c>
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	e002      	b.n	800243e <HAL_GPIO_Init+0x152>
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	3b08      	subs	r3, #8
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	210f      	movs	r1, #15
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	6a39      	ldr	r1, [r7, #32]
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	431a      	orrs	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80b1 	beq.w	80025ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800246c:	4b4d      	ldr	r3, [pc, #308]	@ (80025a4 <HAL_GPIO_Init+0x2b8>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	4a4c      	ldr	r2, [pc, #304]	@ (80025a4 <HAL_GPIO_Init+0x2b8>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6193      	str	r3, [r2, #24]
 8002478:	4b4a      	ldr	r3, [pc, #296]	@ (80025a4 <HAL_GPIO_Init+0x2b8>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002484:	4a48      	ldr	r2, [pc, #288]	@ (80025a8 <HAL_GPIO_Init+0x2bc>)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a40      	ldr	r2, [pc, #256]	@ (80025ac <HAL_GPIO_Init+0x2c0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_GPIO_Init+0x1ec>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3f      	ldr	r2, [pc, #252]	@ (80025b0 <HAL_GPIO_Init+0x2c4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00d      	beq.n	80024d4 <HAL_GPIO_Init+0x1e8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3e      	ldr	r2, [pc, #248]	@ (80025b4 <HAL_GPIO_Init+0x2c8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d007      	beq.n	80024d0 <HAL_GPIO_Init+0x1e4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a3d      	ldr	r2, [pc, #244]	@ (80025b8 <HAL_GPIO_Init+0x2cc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_GPIO_Init+0x1e0>
 80024c8:	2303      	movs	r3, #3
 80024ca:	e006      	b.n	80024da <HAL_GPIO_Init+0x1ee>
 80024cc:	2304      	movs	r3, #4
 80024ce:	e004      	b.n	80024da <HAL_GPIO_Init+0x1ee>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e002      	b.n	80024da <HAL_GPIO_Init+0x1ee>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <HAL_GPIO_Init+0x1ee>
 80024d8:	2300      	movs	r3, #0
 80024da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024dc:	f002 0203 	and.w	r2, r2, #3
 80024e0:	0092      	lsls	r2, r2, #2
 80024e2:	4093      	lsls	r3, r2
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ea:	492f      	ldr	r1, [pc, #188]	@ (80025a8 <HAL_GPIO_Init+0x2bc>)
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002504:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	492c      	ldr	r1, [pc, #176]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002512:	4b2a      	ldr	r3, [pc, #168]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	4928      	ldr	r1, [pc, #160]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 800251c:	4013      	ands	r3, r2
 800251e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800252c:	4b23      	ldr	r3, [pc, #140]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	4922      	ldr	r1, [pc, #136]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	60cb      	str	r3, [r1, #12]
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800253a:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	491e      	ldr	r1, [pc, #120]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 8002544:	4013      	ands	r3, r2
 8002546:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4918      	ldr	r1, [pc, #96]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002562:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	4914      	ldr	r1, [pc, #80]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 800256c:	4013      	ands	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d021      	beq.n	80025c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800257c:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	490e      	ldr	r1, [pc, #56]	@ (80025bc <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	e021      	b.n	80025ce <HAL_GPIO_Init+0x2e2>
 800258a:	bf00      	nop
 800258c:	10320000 	.word	0x10320000
 8002590:	10310000 	.word	0x10310000
 8002594:	10220000 	.word	0x10220000
 8002598:	10210000 	.word	0x10210000
 800259c:	10120000 	.word	0x10120000
 80025a0:	10110000 	.word	0x10110000
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40010800 	.word	0x40010800
 80025b0:	40010c00 	.word	0x40010c00
 80025b4:	40011000 	.word	0x40011000
 80025b8:	40011400 	.word	0x40011400
 80025bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_GPIO_Init+0x304>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	4909      	ldr	r1, [pc, #36]	@ (80025f0 <HAL_GPIO_Init+0x304>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	3301      	adds	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f47f ae8e 	bne.w	8002300 <HAL_GPIO_Init+0x14>
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	372c      	adds	r7, #44	@ 0x2c
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
 8002600:	4613      	mov	r3, r2
 8002602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002604:	787b      	ldrb	r3, [r7, #1]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002610:	e003      	b.n	800261a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	041a      	lsls	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e272      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8087 	beq.w	8002752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002644:	4b92      	ldr	r3, [pc, #584]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b04      	cmp	r3, #4
 800264e:	d00c      	beq.n	800266a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002650:	4b8f      	ldr	r3, [pc, #572]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d112      	bne.n	8002682 <HAL_RCC_OscConfig+0x5e>
 800265c:	4b8c      	ldr	r3, [pc, #560]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002668:	d10b      	bne.n	8002682 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	4b89      	ldr	r3, [pc, #548]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d06c      	beq.n	8002750 <HAL_RCC_OscConfig+0x12c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d168      	bne.n	8002750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e24c      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x76>
 800268c:	4b80      	ldr	r3, [pc, #512]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a7f      	ldr	r2, [pc, #508]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e02e      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a2:	4b7b      	ldr	r3, [pc, #492]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7a      	ldr	r2, [pc, #488]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b78      	ldr	r3, [pc, #480]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a77      	ldr	r2, [pc, #476]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0xbc>
 80026c6:	4b72      	ldr	r3, [pc, #456]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a71      	ldr	r2, [pc, #452]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 80026e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b68      	ldr	r3, [pc, #416]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a67      	ldr	r2, [pc, #412]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fce2 	bl	80020c8 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fcde 	bl	80020c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e200      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b5d      	ldr	r3, [pc, #372]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xe4>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff fcce 	bl	80020c8 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff fcca 	bl	80020c8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1ec      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b53      	ldr	r3, [pc, #332]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x10c>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d063      	beq.n	8002826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800275e:	4b4c      	ldr	r3, [pc, #304]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800276a:	4b49      	ldr	r3, [pc, #292]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b08      	cmp	r3, #8
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x18c>
 8002776:	4b46      	ldr	r3, [pc, #280]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b43      	ldr	r3, [pc, #268]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x176>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1c0      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3d      	ldr	r3, [pc, #244]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4939      	ldr	r1, [pc, #228]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7ff fc83 	bl	80020c8 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff fc7f 	bl	80020c8 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1a1      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4927      	ldr	r1, [pc, #156]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b26      	ldr	r3, [pc, #152]	@ (8002894 <HAL_RCC_OscConfig+0x270>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff fc62 	bl	80020c8 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002808:	f7ff fc5e 	bl	80020c8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e180      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d03a      	beq.n	80028a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d019      	beq.n	800286e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b17      	ldr	r3, [pc, #92]	@ (8002898 <HAL_RCC_OscConfig+0x274>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002840:	f7ff fc42 	bl	80020c8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7ff fc3e 	bl	80020c8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e160      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <HAL_RCC_OscConfig+0x26c>)
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002866:	2001      	movs	r0, #1
 8002868:	f000 face 	bl	8002e08 <RCC_Delay>
 800286c:	e01c      	b.n	80028a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286e:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_RCC_OscConfig+0x274>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7ff fc28 	bl	80020c8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287a:	e00f      	b.n	800289c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7ff fc24 	bl	80020c8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d908      	bls.n	800289c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e146      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	42420000 	.word	0x42420000
 8002898:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b92      	ldr	r3, [pc, #584]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e9      	bne.n	800287c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a6 	beq.w	8002a02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b88      	ldr	r3, [pc, #544]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4a87      	ldr	r2, [pc, #540]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	61d3      	str	r3, [r2, #28]
 80028d2:	4b85      	ldr	r3, [pc, #532]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028de:	2301      	movs	r3, #1
 80028e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b82      	ldr	r3, [pc, #520]	@ (8002aec <HAL_RCC_OscConfig+0x4c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d118      	bne.n	8002920 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002aec <HAL_RCC_OscConfig+0x4c8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a7e      	ldr	r2, [pc, #504]	@ (8002aec <HAL_RCC_OscConfig+0x4c8>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fa:	f7ff fbe5 	bl	80020c8 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7ff fbe1 	bl	80020c8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	@ 0x64
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e103      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	4b75      	ldr	r3, [pc, #468]	@ (8002aec <HAL_RCC_OscConfig+0x4c8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d106      	bne.n	8002936 <HAL_RCC_OscConfig+0x312>
 8002928:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6213      	str	r3, [r2, #32]
 8002934:	e02d      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x334>
 800293e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a69      	ldr	r2, [pc, #420]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	4b67      	ldr	r3, [pc, #412]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a66      	ldr	r2, [pc, #408]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6213      	str	r3, [r2, #32]
 8002956:	e01c      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d10c      	bne.n	800297a <HAL_RCC_OscConfig+0x356>
 8002960:	4b61      	ldr	r3, [pc, #388]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a60      	ldr	r2, [pc, #384]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6213      	str	r3, [r2, #32]
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 800297a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b58      	ldr	r3, [pc, #352]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a57      	ldr	r2, [pc, #348]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d015      	beq.n	80029c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7ff fb95 	bl	80020c8 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7ff fb91 	bl	80020c8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0b1      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ee      	beq.n	80029a2 <HAL_RCC_OscConfig+0x37e>
 80029c4:	e014      	b.n	80029f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7ff fb7f 	bl	80020c8 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7ff fb7b 	bl	80020c8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e09b      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	4b40      	ldr	r3, [pc, #256]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ee      	bne.n	80029ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4a3b      	ldr	r2, [pc, #236]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8087 	beq.w	8002b1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d061      	beq.n	8002adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d146      	bne.n	8002aae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a20:	4b33      	ldr	r3, [pc, #204]	@ (8002af0 <HAL_RCC_OscConfig+0x4cc>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7ff fb4f 	bl	80020c8 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7ff fb4b 	bl	80020c8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e06d      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a40:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a54:	d108      	bne.n	8002a68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4921      	ldr	r1, [pc, #132]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a19      	ldr	r1, [r3, #32]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	491b      	ldr	r1, [pc, #108]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a80:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <HAL_RCC_OscConfig+0x4cc>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7ff fb1f 	bl	80020c8 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7ff fb1b 	bl	80020c8 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e03d      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x46a>
 8002aac:	e035      	b.n	8002b1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_RCC_OscConfig+0x4cc>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fb08 	bl	80020c8 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7ff fb04 	bl	80020c8 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e026      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ace:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x498>
 8002ada:	e01e      	b.n	8002b1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e019      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40007000 	.word	0x40007000
 8002af0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b24 <HAL_RCC_OscConfig+0x500>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0d0      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d910      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b67      	ldr	r3, [pc, #412]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0207 	bic.w	r2, r3, #7
 8002b52:	4965      	ldr	r1, [pc, #404]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b63      	ldr	r3, [pc, #396]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0b8      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b84:	4b59      	ldr	r3, [pc, #356]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a58      	ldr	r2, [pc, #352]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b9c:	4b53      	ldr	r3, [pc, #332]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a52      	ldr	r2, [pc, #328]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ba6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b50      	ldr	r3, [pc, #320]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	494d      	ldr	r1, [pc, #308]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d040      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	4b47      	ldr	r3, [pc, #284]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d115      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be6:	4b41      	ldr	r3, [pc, #260]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e073      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06b      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c06:	4b39      	ldr	r3, [pc, #228]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4936      	ldr	r1, [pc, #216]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c18:	f7ff fa56 	bl	80020c8 <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7ff fa52 	bl	80020c8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e053      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	4b2d      	ldr	r3, [pc, #180]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 020c 	and.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1eb      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c48:	4b27      	ldr	r3, [pc, #156]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d210      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b24      	ldr	r3, [pc, #144]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4922      	ldr	r1, [pc, #136]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e032      	b.n	8002cde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4916      	ldr	r1, [pc, #88]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ca2:	4b12      	ldr	r3, [pc, #72]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	490e      	ldr	r1, [pc, #56]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb6:	f000 f821 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	490a      	ldr	r1, [pc, #40]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	5ccb      	ldrb	r3, [r1, r3]
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	4a09      	ldr	r2, [pc, #36]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f9b4 	bl	8002044 <HAL_InitTick>

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	080086c8 	.word	0x080086c8
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d16:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x30>
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x36>
 8002d2a:	e027      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2e:	613b      	str	r3, [r7, #16]
      break;
 8002d30:	e027      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	0c9b      	lsrs	r3, r3, #18
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d3c:	5cd3      	ldrb	r3, [r2, r3]
 8002d3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d4a:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	0c5b      	lsrs	r3, r3, #17
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
 8002d58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d5e:	fb03 f202 	mul.w	r2, r3, r2
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e004      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	613b      	str	r3, [r7, #16]
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7e:	613b      	str	r3, [r7, #16]
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	693b      	ldr	r3, [r7, #16]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	007a1200 	.word	0x007a1200
 8002d98:	080086e0 	.word	0x080086e0
 8002d9c:	080086f0 	.word	0x080086f0
 8002da0:	003d0900 	.word	0x003d0900

08002da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da8:	4b02      	ldr	r3, [pc, #8]	@ (8002db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dbc:	f7ff fff2 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	@ (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	080086d8 	.word	0x080086d8

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de4:	f7ff ffde 	bl	8002da4 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0adb      	lsrs	r3, r3, #11
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	080086d8 	.word	0x080086d8

08002e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e10:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <RCC_Delay+0x34>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	@ (8002e40 <RCC_Delay+0x38>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0a5b      	lsrs	r3, r3, #9
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e24:	bf00      	nop
  }
  while (Delay --);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	60fa      	str	r2, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f9      	bne.n	8002e24 <RCC_Delay+0x1c>
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	10624dd3 	.word	0x10624dd3

08002e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e076      	b.n	8002f44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d108      	bne.n	8002e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e66:	d009      	beq.n	8002e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
 8002e6e:	e005      	b.n	8002e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe ff0e 	bl	8001cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f00:	ea42 0103 	orr.w	r1, r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	0c1a      	lsrs	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f002 0204 	and.w	r2, r2, #4
 8002f22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_SPI_Transmit+0x22>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e12d      	b.n	80031ca <HAL_SPI_Transmit+0x27e>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f76:	f7ff f8a7 	bl	80020c8 <HAL_GetTick>
 8002f7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d002      	beq.n	8002f92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f90:	e116      	b.n	80031c0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_SPI_Transmit+0x52>
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fa2:	e10d      	b.n	80031c0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fea:	d10f      	bne.n	800300c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800300a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003016:	2b40      	cmp	r3, #64	@ 0x40
 8003018:	d007      	beq.n	800302a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003028:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003032:	d14f      	bne.n	80030d4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_SPI_Transmit+0xf6>
 800303c:	8afb      	ldrh	r3, [r7, #22]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d142      	bne.n	80030c8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	881a      	ldrh	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	1c9a      	adds	r2, r3, #2
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003066:	e02f      	b.n	80030c8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d112      	bne.n	800309c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	86da      	strh	r2, [r3, #54]	@ 0x36
 800309a:	e015      	b.n	80030c8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800309c:	f7ff f814 	bl	80020c8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d803      	bhi.n	80030b4 <HAL_SPI_Transmit+0x168>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Transmit+0x16e>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80030c6:	e07b      	b.n	80031c0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ca      	bne.n	8003068 <HAL_SPI_Transmit+0x11c>
 80030d2:	e050      	b.n	8003176 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_SPI_Transmit+0x196>
 80030dc:	8afb      	ldrh	r3, [r7, #22]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d144      	bne.n	800316c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003108:	e030      	b.n	800316c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d113      	bne.n	8003140 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800313e:	e015      	b.n	800316c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003140:	f7fe ffc2 	bl	80020c8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d803      	bhi.n	8003158 <HAL_SPI_Transmit+0x20c>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d102      	bne.n	800315e <HAL_SPI_Transmit+0x212>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800316a:	e029      	b.n	80031c0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1c9      	bne.n	800310a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fbcc 	bl	8003918 <SPI_EndRxTxTransaction>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e003      	b.n	80031c0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80031c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b088      	sub	sp, #32
 80031d6:	af02      	add	r7, sp, #8
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d002      	beq.n	80031f8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031f6:	e0fb      	b.n	80033f0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003200:	d112      	bne.n	8003228 <HAL_SPI_Receive+0x56>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10e      	bne.n	8003228 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2204      	movs	r2, #4
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f8ef 	bl	8003402 <HAL_SPI_TransmitReceive>
 8003224:	4603      	mov	r3, r0
 8003226:	e0e8      	b.n	80033fa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_SPI_Receive+0x64>
 8003232:	2302      	movs	r3, #2
 8003234:	e0e1      	b.n	80033fa <HAL_SPI_Receive+0x228>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800323e:	f7fe ff43 	bl	80020c8 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_SPI_Receive+0x7e>
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003254:	e0cc      	b.n	80033f0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2204      	movs	r2, #4
 800325a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800329c:	d10f      	bne.n	80032be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	d007      	beq.n	80032dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d16a      	bne.n	80033ba <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032e4:	e032      	b.n	800334c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d115      	bne.n	8003320 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f103 020c 	add.w	r2, r3, #12
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800331e:	e015      	b.n	800334c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003320:	f7fe fed2 	bl	80020c8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d803      	bhi.n	8003338 <HAL_SPI_Receive+0x166>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d102      	bne.n	800333e <HAL_SPI_Receive+0x16c>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800334a:	e051      	b.n	80033f0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1c7      	bne.n	80032e6 <HAL_SPI_Receive+0x114>
 8003356:	e035      	b.n	80033c4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d113      	bne.n	800338e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	b292      	uxth	r2, r2
 8003372:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800338c:	e015      	b.n	80033ba <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338e:	f7fe fe9b 	bl	80020c8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d803      	bhi.n	80033a6 <HAL_SPI_Receive+0x1d4>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d102      	bne.n	80033ac <HAL_SPI_Receive+0x1da>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80033b8:	e01a      	b.n	80033f0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1c9      	bne.n	8003358 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fa53 	bl	8003874 <SPI_EndRxTransaction>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
 80033e6:	e003      	b.n	80033f0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08c      	sub	sp, #48	@ 0x30
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003410:	2301      	movs	r3, #1
 8003412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_SPI_TransmitReceive+0x26>
 8003424:	2302      	movs	r3, #2
 8003426:	e198      	b.n	800375a <HAL_SPI_TransmitReceive+0x358>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003430:	f7fe fe4a 	bl	80020c8 <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800343c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800344a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800344e:	2b01      	cmp	r3, #1
 8003450:	d00f      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x70>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003458:	d107      	bne.n	800346a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_SPI_TransmitReceive+0x68>
 8003462:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003466:	2b04      	cmp	r3, #4
 8003468:	d003      	beq.n	8003472 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800346a:	2302      	movs	r3, #2
 800346c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003470:	e16d      	b.n	800374e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x82>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x82>
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d103      	bne.n	800348c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800348a:	e160      	b.n	800374e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b04      	cmp	r3, #4
 8003496:	d003      	beq.n	80034a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2205      	movs	r2, #5
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	887a      	ldrh	r2, [r7, #2]
 80034c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e0:	2b40      	cmp	r3, #64	@ 0x40
 80034e2:	d007      	beq.n	80034f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034fc:	d17c      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_SPI_TransmitReceive+0x10a>
 8003506:	8b7b      	ldrh	r3, [r7, #26]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d16a      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003530:	e057      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b02      	cmp	r3, #2
 800353e:	d11b      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x176>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x176>
 800354a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d113      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d119      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x1b8>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d014      	beq.n	80035ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	b292      	uxth	r2, r2
 800359c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035b6:	2301      	movs	r3, #1
 80035b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035ba:	f7fe fd85 	bl	80020c8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d80b      	bhi.n	80035e2 <HAL_SPI_TransmitReceive+0x1e0>
 80035ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d007      	beq.n	80035e2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80035e0:	e0b5      	b.n	800374e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1a2      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x130>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d19d      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x130>
 80035f6:	e080      	b.n	80036fa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x204>
 8003600:	8b7b      	ldrh	r3, [r7, #26]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d16f      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800362c:	e05b      	b.n	80036e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d11c      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x274>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d017      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x274>
 8003646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d114      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	7812      	ldrb	r2, [r2, #0]
 8003658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d119      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x2b6>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d014      	beq.n	80036b8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036b4:	2301      	movs	r3, #1
 80036b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036b8:	f7fe fd06 	bl	80020c8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d803      	bhi.n	80036d0 <HAL_SPI_TransmitReceive+0x2ce>
 80036c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x2d4>
 80036d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d107      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80036e4:	e033      	b.n	800374e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d19e      	bne.n	800362e <HAL_SPI_TransmitReceive+0x22c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d199      	bne.n	800362e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f90a 	bl	8003918 <SPI_EndRxTxTransaction>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003716:	e01a      	b.n	800374e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003744:	e003      	b.n	800374e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003756:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800375a:	4618      	mov	r0, r3
 800375c:	3730      	adds	r7, #48	@ 0x30
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003774:	f7fe fca8 	bl	80020c8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	4413      	add	r3, r2
 8003782:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003784:	f7fe fca0 	bl	80020c8 <HAL_GetTick>
 8003788:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800378a:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	015b      	lsls	r3, r3, #5
 8003790:	0d1b      	lsrs	r3, r3, #20
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379a:	e054      	b.n	8003846 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d050      	beq.n	8003846 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037a4:	f7fe fc90 	bl	80020c8 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d902      	bls.n	80037ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d13d      	bne.n	8003836 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d2:	d111      	bne.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037dc:	d004      	beq.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e6:	d107      	bne.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003800:	d10f      	bne.n	8003822 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e017      	b.n	8003866 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3b01      	subs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	429a      	cmp	r2, r3
 8003862:	d19b      	bne.n	800379c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000

08003874 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003888:	d111      	bne.n	80038ae <SPI_EndRxTransaction+0x3a>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003892:	d004      	beq.n	800389e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389c:	d107      	bne.n	80038ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038b6:	d117      	bne.n	80038e8 <SPI_EndRxTransaction+0x74>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c0:	d112      	bne.n	80038e8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2101      	movs	r1, #1
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff49 	bl	8003764 <SPI_WaitFlagStateUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01a      	beq.n	800390e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e013      	b.n	8003910 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2200      	movs	r2, #0
 80038f0:	2180      	movs	r1, #128	@ 0x80
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff ff36 	bl	8003764 <SPI_WaitFlagStateUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e000      	b.n	8003910 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	2180      	movs	r1, #128	@ 0x80
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff ff18 	bl	8003764 <SPI_WaitFlagStateUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e000      	b.n	800394c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e042      	b.n	80039ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe f9e6 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	@ 0x24
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f91d 	bl	8003bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d16d      	bne.n	8003af0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_UART_Transmit+0x2c>
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e066      	b.n	8003af2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2221      	movs	r2, #33	@ 0x21
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a32:	f7fe fb49 	bl	80020c8 <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	88fa      	ldrh	r2, [r7, #6]
 8003a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4c:	d108      	bne.n	8003a60 <HAL_UART_Transmit+0x6c>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	e003      	b.n	8003a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a68:	e02a      	b.n	8003ac0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	@ 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f840 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e036      	b.n	8003af2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1cf      	bne.n	8003a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	@ 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f810 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e006      	b.n	8003af2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b090      	sub	sp, #64	@ 0x40
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	e050      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d04c      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	f7fe fad5 	bl	80020c8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d241      	bcs.n	8003bae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b4a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b7e:	623a      	str	r2, [r7, #32]
 8003b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	69f9      	ldr	r1, [r7, #28]
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e00f      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d09f      	beq.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3740      	adds	r7, #64	@ 0x40
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c12:	f023 030c 	bic.w	r3, r3, #12
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cec <UART_SetConfig+0x114>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d103      	bne.n	8003c48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7ff f8ce 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	e002      	b.n	8003c4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c48:	f7ff f8b6 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009a      	lsls	r2, r3, #2
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	4a22      	ldr	r2, [pc, #136]	@ (8003cf0 <UART_SetConfig+0x118>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	0119      	lsls	r1, r3, #4
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	009a      	lsls	r2, r3, #2
 8003c78:	441a      	add	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c84:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <UART_SetConfig+0x118>)
 8003c86:	fba3 0302 	umull	r0, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2064      	movs	r0, #100	@ 0x64
 8003c8e:	fb00 f303 	mul.w	r3, r0, r3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	3332      	adds	r3, #50	@ 0x32
 8003c98:	4a15      	ldr	r2, [pc, #84]	@ (8003cf0 <UART_SetConfig+0x118>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca4:	4419      	add	r1, r3
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009a      	lsls	r2, r3, #2
 8003cb0:	441a      	add	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <UART_SetConfig+0x118>)
 8003cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2064      	movs	r0, #100	@ 0x64
 8003cc6:	fb00 f303 	mul.w	r3, r0, r3
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	3332      	adds	r3, #50	@ 0x32
 8003cd0:	4a07      	ldr	r2, [pc, #28]	@ (8003cf0 <UART_SetConfig+0x118>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	440a      	add	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40013800 	.word	0x40013800
 8003cf0:	51eb851f 	.word	0x51eb851f

08003cf4 <__cvt>:
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	bfbb      	ittet	lt
 8003cfe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003d02:	461d      	movlt	r5, r3
 8003d04:	2300      	movge	r3, #0
 8003d06:	232d      	movlt	r3, #45	@ 0x2d
 8003d08:	b088      	sub	sp, #32
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	bfb8      	it	lt
 8003d0e:	4614      	movlt	r4, r2
 8003d10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003d12:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003d14:	7013      	strb	r3, [r2, #0]
 8003d16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d18:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003d1c:	f023 0820 	bic.w	r8, r3, #32
 8003d20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d24:	d005      	beq.n	8003d32 <__cvt+0x3e>
 8003d26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d2a:	d100      	bne.n	8003d2e <__cvt+0x3a>
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e000      	b.n	8003d34 <__cvt+0x40>
 8003d32:	2303      	movs	r3, #3
 8003d34:	aa07      	add	r2, sp, #28
 8003d36:	9204      	str	r2, [sp, #16]
 8003d38:	aa06      	add	r2, sp, #24
 8003d3a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d3e:	e9cd 3600 	strd	r3, r6, [sp]
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	f001 f883 	bl	8004e50 <_dtoa_r>
 8003d4a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d4e:	4607      	mov	r7, r0
 8003d50:	d119      	bne.n	8003d86 <__cvt+0x92>
 8003d52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003d54:	07db      	lsls	r3, r3, #31
 8003d56:	d50e      	bpl.n	8003d76 <__cvt+0x82>
 8003d58:	eb00 0906 	add.w	r9, r0, r6
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2300      	movs	r3, #0
 8003d60:	4620      	mov	r0, r4
 8003d62:	4629      	mov	r1, r5
 8003d64:	f7fc fe20 	bl	80009a8 <__aeabi_dcmpeq>
 8003d68:	b108      	cbz	r0, 8003d6e <__cvt+0x7a>
 8003d6a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d6e:	2230      	movs	r2, #48	@ 0x30
 8003d70:	9b07      	ldr	r3, [sp, #28]
 8003d72:	454b      	cmp	r3, r9
 8003d74:	d31e      	bcc.n	8003db4 <__cvt+0xc0>
 8003d76:	4638      	mov	r0, r7
 8003d78:	9b07      	ldr	r3, [sp, #28]
 8003d7a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003d7c:	1bdb      	subs	r3, r3, r7
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	b008      	add	sp, #32
 8003d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d86:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d8a:	eb00 0906 	add.w	r9, r0, r6
 8003d8e:	d1e5      	bne.n	8003d5c <__cvt+0x68>
 8003d90:	7803      	ldrb	r3, [r0, #0]
 8003d92:	2b30      	cmp	r3, #48	@ 0x30
 8003d94:	d10a      	bne.n	8003dac <__cvt+0xb8>
 8003d96:	2200      	movs	r2, #0
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	f7fc fe03 	bl	80009a8 <__aeabi_dcmpeq>
 8003da2:	b918      	cbnz	r0, 8003dac <__cvt+0xb8>
 8003da4:	f1c6 0601 	rsb	r6, r6, #1
 8003da8:	f8ca 6000 	str.w	r6, [sl]
 8003dac:	f8da 3000 	ldr.w	r3, [sl]
 8003db0:	4499      	add	r9, r3
 8003db2:	e7d3      	b.n	8003d5c <__cvt+0x68>
 8003db4:	1c59      	adds	r1, r3, #1
 8003db6:	9107      	str	r1, [sp, #28]
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e7d9      	b.n	8003d70 <__cvt+0x7c>

08003dbc <__exponent>:
 8003dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dbe:	2900      	cmp	r1, #0
 8003dc0:	bfb6      	itet	lt
 8003dc2:	232d      	movlt	r3, #45	@ 0x2d
 8003dc4:	232b      	movge	r3, #43	@ 0x2b
 8003dc6:	4249      	neglt	r1, r1
 8003dc8:	2909      	cmp	r1, #9
 8003dca:	7002      	strb	r2, [r0, #0]
 8003dcc:	7043      	strb	r3, [r0, #1]
 8003dce:	dd29      	ble.n	8003e24 <__exponent+0x68>
 8003dd0:	f10d 0307 	add.w	r3, sp, #7
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	270a      	movs	r7, #10
 8003dd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8003ddc:	461a      	mov	r2, r3
 8003dde:	fb07 1416 	mls	r4, r7, r6, r1
 8003de2:	3430      	adds	r4, #48	@ 0x30
 8003de4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003de8:	460c      	mov	r4, r1
 8003dea:	2c63      	cmp	r4, #99	@ 0x63
 8003dec:	4631      	mov	r1, r6
 8003dee:	f103 33ff 	add.w	r3, r3, #4294967295
 8003df2:	dcf1      	bgt.n	8003dd8 <__exponent+0x1c>
 8003df4:	3130      	adds	r1, #48	@ 0x30
 8003df6:	1e94      	subs	r4, r2, #2
 8003df8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	1c41      	adds	r1, r0, #1
 8003e00:	42ab      	cmp	r3, r5
 8003e02:	d30a      	bcc.n	8003e1a <__exponent+0x5e>
 8003e04:	f10d 0309 	add.w	r3, sp, #9
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	42ac      	cmp	r4, r5
 8003e0c:	bf88      	it	hi
 8003e0e:	2300      	movhi	r3, #0
 8003e10:	3302      	adds	r3, #2
 8003e12:	4403      	add	r3, r0
 8003e14:	1a18      	subs	r0, r3, r0
 8003e16:	b003      	add	sp, #12
 8003e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e1a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e1e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e22:	e7ed      	b.n	8003e00 <__exponent+0x44>
 8003e24:	2330      	movs	r3, #48	@ 0x30
 8003e26:	3130      	adds	r1, #48	@ 0x30
 8003e28:	7083      	strb	r3, [r0, #2]
 8003e2a:	70c1      	strb	r1, [r0, #3]
 8003e2c:	1d03      	adds	r3, r0, #4
 8003e2e:	e7f1      	b.n	8003e14 <__exponent+0x58>

08003e30 <_printf_float>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	b091      	sub	sp, #68	@ 0x44
 8003e36:	460c      	mov	r4, r1
 8003e38:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003e3c:	4616      	mov	r6, r2
 8003e3e:	461f      	mov	r7, r3
 8003e40:	4605      	mov	r5, r0
 8003e42:	f000 fef1 	bl	8004c28 <_localeconv_r>
 8003e46:	6803      	ldr	r3, [r0, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	9308      	str	r3, [sp, #32]
 8003e4c:	f7fc f980 	bl	8000150 <strlen>
 8003e50:	2300      	movs	r3, #0
 8003e52:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e54:	f8d8 3000 	ldr.w	r3, [r8]
 8003e58:	9009      	str	r0, [sp, #36]	@ 0x24
 8003e5a:	3307      	adds	r3, #7
 8003e5c:	f023 0307 	bic.w	r3, r3, #7
 8003e60:	f103 0208 	add.w	r2, r3, #8
 8003e64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003e68:	f8d4 b000 	ldr.w	fp, [r4]
 8003e6c:	f8c8 2000 	str.w	r2, [r8]
 8003e70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e7a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003e8a:	4b9c      	ldr	r3, [pc, #624]	@ (80040fc <_printf_float+0x2cc>)
 8003e8c:	f7fc fdbe 	bl	8000a0c <__aeabi_dcmpun>
 8003e90:	bb70      	cbnz	r0, 8003ef0 <_printf_float+0xc0>
 8003e92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e96:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9a:	4b98      	ldr	r3, [pc, #608]	@ (80040fc <_printf_float+0x2cc>)
 8003e9c:	f7fc fd98 	bl	80009d0 <__aeabi_dcmple>
 8003ea0:	bb30      	cbnz	r0, 8003ef0 <_printf_float+0xc0>
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	f7fc fd87 	bl	80009bc <__aeabi_dcmplt>
 8003eae:	b110      	cbz	r0, 8003eb6 <_printf_float+0x86>
 8003eb0:	232d      	movs	r3, #45	@ 0x2d
 8003eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eb6:	4a92      	ldr	r2, [pc, #584]	@ (8004100 <_printf_float+0x2d0>)
 8003eb8:	4b92      	ldr	r3, [pc, #584]	@ (8004104 <_printf_float+0x2d4>)
 8003eba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003ebe:	bf94      	ite	ls
 8003ec0:	4690      	movls	r8, r2
 8003ec2:	4698      	movhi	r8, r3
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	f04f 0900 	mov.w	r9, #0
 8003eca:	6123      	str	r3, [r4, #16]
 8003ecc:	f02b 0304 	bic.w	r3, fp, #4
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	4633      	mov	r3, r6
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	9700      	str	r7, [sp, #0]
 8003eda:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003edc:	f000 f9d4 	bl	8004288 <_printf_common>
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	f040 8090 	bne.w	8004006 <_printf_float+0x1d6>
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eea:	b011      	add	sp, #68	@ 0x44
 8003eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	4640      	mov	r0, r8
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	f7fc fd88 	bl	8000a0c <__aeabi_dcmpun>
 8003efc:	b148      	cbz	r0, 8003f12 <_printf_float+0xe2>
 8003efe:	464b      	mov	r3, r9
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bfb8      	it	lt
 8003f04:	232d      	movlt	r3, #45	@ 0x2d
 8003f06:	4a80      	ldr	r2, [pc, #512]	@ (8004108 <_printf_float+0x2d8>)
 8003f08:	bfb8      	it	lt
 8003f0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800410c <_printf_float+0x2dc>)
 8003f10:	e7d3      	b.n	8003eba <_printf_float+0x8a>
 8003f12:	6863      	ldr	r3, [r4, #4]
 8003f14:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	d13f      	bne.n	8003f9c <_printf_float+0x16c>
 8003f1c:	2306      	movs	r3, #6
 8003f1e:	6063      	str	r3, [r4, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	9206      	str	r2, [sp, #24]
 8003f2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8003f2c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003f30:	aa0d      	add	r2, sp, #52	@ 0x34
 8003f32:	9203      	str	r2, [sp, #12]
 8003f34:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003f38:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	4642      	mov	r2, r8
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	4628      	mov	r0, r5
 8003f44:	464b      	mov	r3, r9
 8003f46:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f48:	f7ff fed4 	bl	8003cf4 <__cvt>
 8003f4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f4e:	4680      	mov	r8, r0
 8003f50:	2947      	cmp	r1, #71	@ 0x47
 8003f52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f54:	d128      	bne.n	8003fa8 <_printf_float+0x178>
 8003f56:	1cc8      	adds	r0, r1, #3
 8003f58:	db02      	blt.n	8003f60 <_printf_float+0x130>
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	4299      	cmp	r1, r3
 8003f5e:	dd40      	ble.n	8003fe2 <_printf_float+0x1b2>
 8003f60:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f64:	fa5f fa8a 	uxtb.w	sl, sl
 8003f68:	4652      	mov	r2, sl
 8003f6a:	3901      	subs	r1, #1
 8003f6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003f70:	910d      	str	r1, [sp, #52]	@ 0x34
 8003f72:	f7ff ff23 	bl	8003dbc <__exponent>
 8003f76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f78:	4681      	mov	r9, r0
 8003f7a:	1813      	adds	r3, r2, r0
 8003f7c:	2a01      	cmp	r2, #1
 8003f7e:	6123      	str	r3, [r4, #16]
 8003f80:	dc02      	bgt.n	8003f88 <_printf_float+0x158>
 8003f82:	6822      	ldr	r2, [r4, #0]
 8003f84:	07d2      	lsls	r2, r2, #31
 8003f86:	d501      	bpl.n	8003f8c <_printf_float+0x15c>
 8003f88:	3301      	adds	r3, #1
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d09e      	beq.n	8003ed2 <_printf_float+0xa2>
 8003f94:	232d      	movs	r3, #45	@ 0x2d
 8003f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f9a:	e79a      	b.n	8003ed2 <_printf_float+0xa2>
 8003f9c:	2947      	cmp	r1, #71	@ 0x47
 8003f9e:	d1bf      	bne.n	8003f20 <_printf_float+0xf0>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1bd      	bne.n	8003f20 <_printf_float+0xf0>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e7ba      	b.n	8003f1e <_printf_float+0xee>
 8003fa8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003fac:	d9dc      	bls.n	8003f68 <_printf_float+0x138>
 8003fae:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003fb2:	d118      	bne.n	8003fe6 <_printf_float+0x1b6>
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	dd0b      	ble.n	8003fd2 <_printf_float+0x1a2>
 8003fba:	6121      	str	r1, [r4, #16]
 8003fbc:	b913      	cbnz	r3, 8003fc4 <_printf_float+0x194>
 8003fbe:	6822      	ldr	r2, [r4, #0]
 8003fc0:	07d0      	lsls	r0, r2, #31
 8003fc2:	d502      	bpl.n	8003fca <_printf_float+0x19a>
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	440b      	add	r3, r1
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	f04f 0900 	mov.w	r9, #0
 8003fce:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003fd0:	e7dc      	b.n	8003f8c <_printf_float+0x15c>
 8003fd2:	b913      	cbnz	r3, 8003fda <_printf_float+0x1aa>
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	07d2      	lsls	r2, r2, #31
 8003fd8:	d501      	bpl.n	8003fde <_printf_float+0x1ae>
 8003fda:	3302      	adds	r3, #2
 8003fdc:	e7f4      	b.n	8003fc8 <_printf_float+0x198>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e7f2      	b.n	8003fc8 <_printf_float+0x198>
 8003fe2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003fe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003fe8:	4299      	cmp	r1, r3
 8003fea:	db05      	blt.n	8003ff8 <_printf_float+0x1c8>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	6121      	str	r1, [r4, #16]
 8003ff0:	07d8      	lsls	r0, r3, #31
 8003ff2:	d5ea      	bpl.n	8003fca <_printf_float+0x19a>
 8003ff4:	1c4b      	adds	r3, r1, #1
 8003ff6:	e7e7      	b.n	8003fc8 <_printf_float+0x198>
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	bfcc      	ite	gt
 8003ffc:	2201      	movgt	r2, #1
 8003ffe:	f1c1 0202 	rsble	r2, r1, #2
 8004002:	4413      	add	r3, r2
 8004004:	e7e0      	b.n	8003fc8 <_printf_float+0x198>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	055a      	lsls	r2, r3, #21
 800400a:	d407      	bmi.n	800401c <_printf_float+0x1ec>
 800400c:	6923      	ldr	r3, [r4, #16]
 800400e:	4642      	mov	r2, r8
 8004010:	4631      	mov	r1, r6
 8004012:	4628      	mov	r0, r5
 8004014:	47b8      	blx	r7
 8004016:	3001      	adds	r0, #1
 8004018:	d12b      	bne.n	8004072 <_printf_float+0x242>
 800401a:	e764      	b.n	8003ee6 <_printf_float+0xb6>
 800401c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004020:	f240 80dc 	bls.w	80041dc <_printf_float+0x3ac>
 8004024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004028:	2200      	movs	r2, #0
 800402a:	2300      	movs	r3, #0
 800402c:	f7fc fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 8004030:	2800      	cmp	r0, #0
 8004032:	d033      	beq.n	800409c <_printf_float+0x26c>
 8004034:	2301      	movs	r3, #1
 8004036:	4631      	mov	r1, r6
 8004038:	4628      	mov	r0, r5
 800403a:	4a35      	ldr	r2, [pc, #212]	@ (8004110 <_printf_float+0x2e0>)
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	f43f af51 	beq.w	8003ee6 <_printf_float+0xb6>
 8004044:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004048:	4543      	cmp	r3, r8
 800404a:	db02      	blt.n	8004052 <_printf_float+0x222>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	07d8      	lsls	r0, r3, #31
 8004050:	d50f      	bpl.n	8004072 <_printf_float+0x242>
 8004052:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	f43f af42 	beq.w	8003ee6 <_printf_float+0xb6>
 8004062:	f04f 0900 	mov.w	r9, #0
 8004066:	f108 38ff 	add.w	r8, r8, #4294967295
 800406a:	f104 0a1a 	add.w	sl, r4, #26
 800406e:	45c8      	cmp	r8, r9
 8004070:	dc09      	bgt.n	8004086 <_printf_float+0x256>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	079b      	lsls	r3, r3, #30
 8004076:	f100 8102 	bmi.w	800427e <_printf_float+0x44e>
 800407a:	68e0      	ldr	r0, [r4, #12]
 800407c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800407e:	4298      	cmp	r0, r3
 8004080:	bfb8      	it	lt
 8004082:	4618      	movlt	r0, r3
 8004084:	e731      	b.n	8003eea <_printf_float+0xba>
 8004086:	2301      	movs	r3, #1
 8004088:	4652      	mov	r2, sl
 800408a:	4631      	mov	r1, r6
 800408c:	4628      	mov	r0, r5
 800408e:	47b8      	blx	r7
 8004090:	3001      	adds	r0, #1
 8004092:	f43f af28 	beq.w	8003ee6 <_printf_float+0xb6>
 8004096:	f109 0901 	add.w	r9, r9, #1
 800409a:	e7e8      	b.n	800406e <_printf_float+0x23e>
 800409c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800409e:	2b00      	cmp	r3, #0
 80040a0:	dc38      	bgt.n	8004114 <_printf_float+0x2e4>
 80040a2:	2301      	movs	r3, #1
 80040a4:	4631      	mov	r1, r6
 80040a6:	4628      	mov	r0, r5
 80040a8:	4a19      	ldr	r2, [pc, #100]	@ (8004110 <_printf_float+0x2e0>)
 80040aa:	47b8      	blx	r7
 80040ac:	3001      	adds	r0, #1
 80040ae:	f43f af1a 	beq.w	8003ee6 <_printf_float+0xb6>
 80040b2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80040b6:	ea59 0303 	orrs.w	r3, r9, r3
 80040ba:	d102      	bne.n	80040c2 <_printf_float+0x292>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	07d9      	lsls	r1, r3, #31
 80040c0:	d5d7      	bpl.n	8004072 <_printf_float+0x242>
 80040c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040c6:	4631      	mov	r1, r6
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b8      	blx	r7
 80040cc:	3001      	adds	r0, #1
 80040ce:	f43f af0a 	beq.w	8003ee6 <_printf_float+0xb6>
 80040d2:	f04f 0a00 	mov.w	sl, #0
 80040d6:	f104 0b1a 	add.w	fp, r4, #26
 80040da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040dc:	425b      	negs	r3, r3
 80040de:	4553      	cmp	r3, sl
 80040e0:	dc01      	bgt.n	80040e6 <_printf_float+0x2b6>
 80040e2:	464b      	mov	r3, r9
 80040e4:	e793      	b.n	800400e <_printf_float+0x1de>
 80040e6:	2301      	movs	r3, #1
 80040e8:	465a      	mov	r2, fp
 80040ea:	4631      	mov	r1, r6
 80040ec:	4628      	mov	r0, r5
 80040ee:	47b8      	blx	r7
 80040f0:	3001      	adds	r0, #1
 80040f2:	f43f aef8 	beq.w	8003ee6 <_printf_float+0xb6>
 80040f6:	f10a 0a01 	add.w	sl, sl, #1
 80040fa:	e7ee      	b.n	80040da <_printf_float+0x2aa>
 80040fc:	7fefffff 	.word	0x7fefffff
 8004100:	080086f2 	.word	0x080086f2
 8004104:	080086f6 	.word	0x080086f6
 8004108:	080086fa 	.word	0x080086fa
 800410c:	080086fe 	.word	0x080086fe
 8004110:	08008702 	.word	0x08008702
 8004114:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004116:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800411a:	4553      	cmp	r3, sl
 800411c:	bfa8      	it	ge
 800411e:	4653      	movge	r3, sl
 8004120:	2b00      	cmp	r3, #0
 8004122:	4699      	mov	r9, r3
 8004124:	dc36      	bgt.n	8004194 <_printf_float+0x364>
 8004126:	f04f 0b00 	mov.w	fp, #0
 800412a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800412e:	f104 021a 	add.w	r2, r4, #26
 8004132:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004134:	930a      	str	r3, [sp, #40]	@ 0x28
 8004136:	eba3 0309 	sub.w	r3, r3, r9
 800413a:	455b      	cmp	r3, fp
 800413c:	dc31      	bgt.n	80041a2 <_printf_float+0x372>
 800413e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004140:	459a      	cmp	sl, r3
 8004142:	dc3a      	bgt.n	80041ba <_printf_float+0x38a>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	07da      	lsls	r2, r3, #31
 8004148:	d437      	bmi.n	80041ba <_printf_float+0x38a>
 800414a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800414c:	ebaa 0903 	sub.w	r9, sl, r3
 8004150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004152:	ebaa 0303 	sub.w	r3, sl, r3
 8004156:	4599      	cmp	r9, r3
 8004158:	bfa8      	it	ge
 800415a:	4699      	movge	r9, r3
 800415c:	f1b9 0f00 	cmp.w	r9, #0
 8004160:	dc33      	bgt.n	80041ca <_printf_float+0x39a>
 8004162:	f04f 0800 	mov.w	r8, #0
 8004166:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800416a:	f104 0b1a 	add.w	fp, r4, #26
 800416e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004170:	ebaa 0303 	sub.w	r3, sl, r3
 8004174:	eba3 0309 	sub.w	r3, r3, r9
 8004178:	4543      	cmp	r3, r8
 800417a:	f77f af7a 	ble.w	8004072 <_printf_float+0x242>
 800417e:	2301      	movs	r3, #1
 8004180:	465a      	mov	r2, fp
 8004182:	4631      	mov	r1, r6
 8004184:	4628      	mov	r0, r5
 8004186:	47b8      	blx	r7
 8004188:	3001      	adds	r0, #1
 800418a:	f43f aeac 	beq.w	8003ee6 <_printf_float+0xb6>
 800418e:	f108 0801 	add.w	r8, r8, #1
 8004192:	e7ec      	b.n	800416e <_printf_float+0x33e>
 8004194:	4642      	mov	r2, r8
 8004196:	4631      	mov	r1, r6
 8004198:	4628      	mov	r0, r5
 800419a:	47b8      	blx	r7
 800419c:	3001      	adds	r0, #1
 800419e:	d1c2      	bne.n	8004126 <_printf_float+0x2f6>
 80041a0:	e6a1      	b.n	8003ee6 <_printf_float+0xb6>
 80041a2:	2301      	movs	r3, #1
 80041a4:	4631      	mov	r1, r6
 80041a6:	4628      	mov	r0, r5
 80041a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80041aa:	47b8      	blx	r7
 80041ac:	3001      	adds	r0, #1
 80041ae:	f43f ae9a 	beq.w	8003ee6 <_printf_float+0xb6>
 80041b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041b4:	f10b 0b01 	add.w	fp, fp, #1
 80041b8:	e7bb      	b.n	8004132 <_printf_float+0x302>
 80041ba:	4631      	mov	r1, r6
 80041bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041c0:	4628      	mov	r0, r5
 80041c2:	47b8      	blx	r7
 80041c4:	3001      	adds	r0, #1
 80041c6:	d1c0      	bne.n	800414a <_printf_float+0x31a>
 80041c8:	e68d      	b.n	8003ee6 <_printf_float+0xb6>
 80041ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041cc:	464b      	mov	r3, r9
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	4442      	add	r2, r8
 80041d4:	47b8      	blx	r7
 80041d6:	3001      	adds	r0, #1
 80041d8:	d1c3      	bne.n	8004162 <_printf_float+0x332>
 80041da:	e684      	b.n	8003ee6 <_printf_float+0xb6>
 80041dc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80041e0:	f1ba 0f01 	cmp.w	sl, #1
 80041e4:	dc01      	bgt.n	80041ea <_printf_float+0x3ba>
 80041e6:	07db      	lsls	r3, r3, #31
 80041e8:	d536      	bpl.n	8004258 <_printf_float+0x428>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4642      	mov	r2, r8
 80041ee:	4631      	mov	r1, r6
 80041f0:	4628      	mov	r0, r5
 80041f2:	47b8      	blx	r7
 80041f4:	3001      	adds	r0, #1
 80041f6:	f43f ae76 	beq.w	8003ee6 <_printf_float+0xb6>
 80041fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041fe:	4631      	mov	r1, r6
 8004200:	4628      	mov	r0, r5
 8004202:	47b8      	blx	r7
 8004204:	3001      	adds	r0, #1
 8004206:	f43f ae6e 	beq.w	8003ee6 <_printf_float+0xb6>
 800420a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800420e:	2200      	movs	r2, #0
 8004210:	2300      	movs	r3, #0
 8004212:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004216:	f7fc fbc7 	bl	80009a8 <__aeabi_dcmpeq>
 800421a:	b9c0      	cbnz	r0, 800424e <_printf_float+0x41e>
 800421c:	4653      	mov	r3, sl
 800421e:	f108 0201 	add.w	r2, r8, #1
 8004222:	4631      	mov	r1, r6
 8004224:	4628      	mov	r0, r5
 8004226:	47b8      	blx	r7
 8004228:	3001      	adds	r0, #1
 800422a:	d10c      	bne.n	8004246 <_printf_float+0x416>
 800422c:	e65b      	b.n	8003ee6 <_printf_float+0xb6>
 800422e:	2301      	movs	r3, #1
 8004230:	465a      	mov	r2, fp
 8004232:	4631      	mov	r1, r6
 8004234:	4628      	mov	r0, r5
 8004236:	47b8      	blx	r7
 8004238:	3001      	adds	r0, #1
 800423a:	f43f ae54 	beq.w	8003ee6 <_printf_float+0xb6>
 800423e:	f108 0801 	add.w	r8, r8, #1
 8004242:	45d0      	cmp	r8, sl
 8004244:	dbf3      	blt.n	800422e <_printf_float+0x3fe>
 8004246:	464b      	mov	r3, r9
 8004248:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800424c:	e6e0      	b.n	8004010 <_printf_float+0x1e0>
 800424e:	f04f 0800 	mov.w	r8, #0
 8004252:	f104 0b1a 	add.w	fp, r4, #26
 8004256:	e7f4      	b.n	8004242 <_printf_float+0x412>
 8004258:	2301      	movs	r3, #1
 800425a:	4642      	mov	r2, r8
 800425c:	e7e1      	b.n	8004222 <_printf_float+0x3f2>
 800425e:	2301      	movs	r3, #1
 8004260:	464a      	mov	r2, r9
 8004262:	4631      	mov	r1, r6
 8004264:	4628      	mov	r0, r5
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	f43f ae3c 	beq.w	8003ee6 <_printf_float+0xb6>
 800426e:	f108 0801 	add.w	r8, r8, #1
 8004272:	68e3      	ldr	r3, [r4, #12]
 8004274:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004276:	1a5b      	subs	r3, r3, r1
 8004278:	4543      	cmp	r3, r8
 800427a:	dcf0      	bgt.n	800425e <_printf_float+0x42e>
 800427c:	e6fd      	b.n	800407a <_printf_float+0x24a>
 800427e:	f04f 0800 	mov.w	r8, #0
 8004282:	f104 0919 	add.w	r9, r4, #25
 8004286:	e7f4      	b.n	8004272 <_printf_float+0x442>

08004288 <_printf_common>:
 8004288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	4616      	mov	r6, r2
 800428e:	4698      	mov	r8, r3
 8004290:	688a      	ldr	r2, [r1, #8]
 8004292:	690b      	ldr	r3, [r1, #16]
 8004294:	4607      	mov	r7, r0
 8004296:	4293      	cmp	r3, r2
 8004298:	bfb8      	it	lt
 800429a:	4613      	movlt	r3, r2
 800429c:	6033      	str	r3, [r6, #0]
 800429e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042a2:	460c      	mov	r4, r1
 80042a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042a8:	b10a      	cbz	r2, 80042ae <_printf_common+0x26>
 80042aa:	3301      	adds	r3, #1
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	0699      	lsls	r1, r3, #26
 80042b2:	bf42      	ittt	mi
 80042b4:	6833      	ldrmi	r3, [r6, #0]
 80042b6:	3302      	addmi	r3, #2
 80042b8:	6033      	strmi	r3, [r6, #0]
 80042ba:	6825      	ldr	r5, [r4, #0]
 80042bc:	f015 0506 	ands.w	r5, r5, #6
 80042c0:	d106      	bne.n	80042d0 <_printf_common+0x48>
 80042c2:	f104 0a19 	add.w	sl, r4, #25
 80042c6:	68e3      	ldr	r3, [r4, #12]
 80042c8:	6832      	ldr	r2, [r6, #0]
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	42ab      	cmp	r3, r5
 80042ce:	dc2b      	bgt.n	8004328 <_printf_common+0xa0>
 80042d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	3b00      	subs	r3, #0
 80042d8:	bf18      	it	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	0692      	lsls	r2, r2, #26
 80042de:	d430      	bmi.n	8004342 <_printf_common+0xba>
 80042e0:	4641      	mov	r1, r8
 80042e2:	4638      	mov	r0, r7
 80042e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042e8:	47c8      	blx	r9
 80042ea:	3001      	adds	r0, #1
 80042ec:	d023      	beq.n	8004336 <_printf_common+0xae>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	6922      	ldr	r2, [r4, #16]
 80042f2:	f003 0306 	and.w	r3, r3, #6
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	bf14      	ite	ne
 80042fa:	2500      	movne	r5, #0
 80042fc:	6833      	ldreq	r3, [r6, #0]
 80042fe:	f04f 0600 	mov.w	r6, #0
 8004302:	bf08      	it	eq
 8004304:	68e5      	ldreq	r5, [r4, #12]
 8004306:	f104 041a 	add.w	r4, r4, #26
 800430a:	bf08      	it	eq
 800430c:	1aed      	subeq	r5, r5, r3
 800430e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004312:	bf08      	it	eq
 8004314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004318:	4293      	cmp	r3, r2
 800431a:	bfc4      	itt	gt
 800431c:	1a9b      	subgt	r3, r3, r2
 800431e:	18ed      	addgt	r5, r5, r3
 8004320:	42b5      	cmp	r5, r6
 8004322:	d11a      	bne.n	800435a <_printf_common+0xd2>
 8004324:	2000      	movs	r0, #0
 8004326:	e008      	b.n	800433a <_printf_common+0xb2>
 8004328:	2301      	movs	r3, #1
 800432a:	4652      	mov	r2, sl
 800432c:	4641      	mov	r1, r8
 800432e:	4638      	mov	r0, r7
 8004330:	47c8      	blx	r9
 8004332:	3001      	adds	r0, #1
 8004334:	d103      	bne.n	800433e <_printf_common+0xb6>
 8004336:	f04f 30ff 	mov.w	r0, #4294967295
 800433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433e:	3501      	adds	r5, #1
 8004340:	e7c1      	b.n	80042c6 <_printf_common+0x3e>
 8004342:	2030      	movs	r0, #48	@ 0x30
 8004344:	18e1      	adds	r1, r4, r3
 8004346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004350:	4422      	add	r2, r4
 8004352:	3302      	adds	r3, #2
 8004354:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004358:	e7c2      	b.n	80042e0 <_printf_common+0x58>
 800435a:	2301      	movs	r3, #1
 800435c:	4622      	mov	r2, r4
 800435e:	4641      	mov	r1, r8
 8004360:	4638      	mov	r0, r7
 8004362:	47c8      	blx	r9
 8004364:	3001      	adds	r0, #1
 8004366:	d0e6      	beq.n	8004336 <_printf_common+0xae>
 8004368:	3601      	adds	r6, #1
 800436a:	e7d9      	b.n	8004320 <_printf_common+0x98>

0800436c <_printf_i>:
 800436c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004370:	7e0f      	ldrb	r7, [r1, #24]
 8004372:	4691      	mov	r9, r2
 8004374:	2f78      	cmp	r7, #120	@ 0x78
 8004376:	4680      	mov	r8, r0
 8004378:	460c      	mov	r4, r1
 800437a:	469a      	mov	sl, r3
 800437c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800437e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004382:	d807      	bhi.n	8004394 <_printf_i+0x28>
 8004384:	2f62      	cmp	r7, #98	@ 0x62
 8004386:	d80a      	bhi.n	800439e <_printf_i+0x32>
 8004388:	2f00      	cmp	r7, #0
 800438a:	f000 80d3 	beq.w	8004534 <_printf_i+0x1c8>
 800438e:	2f58      	cmp	r7, #88	@ 0x58
 8004390:	f000 80ba 	beq.w	8004508 <_printf_i+0x19c>
 8004394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800439c:	e03a      	b.n	8004414 <_printf_i+0xa8>
 800439e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043a2:	2b15      	cmp	r3, #21
 80043a4:	d8f6      	bhi.n	8004394 <_printf_i+0x28>
 80043a6:	a101      	add	r1, pc, #4	@ (adr r1, 80043ac <_printf_i+0x40>)
 80043a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043ac:	08004405 	.word	0x08004405
 80043b0:	08004419 	.word	0x08004419
 80043b4:	08004395 	.word	0x08004395
 80043b8:	08004395 	.word	0x08004395
 80043bc:	08004395 	.word	0x08004395
 80043c0:	08004395 	.word	0x08004395
 80043c4:	08004419 	.word	0x08004419
 80043c8:	08004395 	.word	0x08004395
 80043cc:	08004395 	.word	0x08004395
 80043d0:	08004395 	.word	0x08004395
 80043d4:	08004395 	.word	0x08004395
 80043d8:	0800451b 	.word	0x0800451b
 80043dc:	08004443 	.word	0x08004443
 80043e0:	080044d5 	.word	0x080044d5
 80043e4:	08004395 	.word	0x08004395
 80043e8:	08004395 	.word	0x08004395
 80043ec:	0800453d 	.word	0x0800453d
 80043f0:	08004395 	.word	0x08004395
 80043f4:	08004443 	.word	0x08004443
 80043f8:	08004395 	.word	0x08004395
 80043fc:	08004395 	.word	0x08004395
 8004400:	080044dd 	.word	0x080044dd
 8004404:	6833      	ldr	r3, [r6, #0]
 8004406:	1d1a      	adds	r2, r3, #4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6032      	str	r2, [r6, #0]
 800440c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004414:	2301      	movs	r3, #1
 8004416:	e09e      	b.n	8004556 <_printf_i+0x1ea>
 8004418:	6833      	ldr	r3, [r6, #0]
 800441a:	6820      	ldr	r0, [r4, #0]
 800441c:	1d19      	adds	r1, r3, #4
 800441e:	6031      	str	r1, [r6, #0]
 8004420:	0606      	lsls	r6, r0, #24
 8004422:	d501      	bpl.n	8004428 <_printf_i+0xbc>
 8004424:	681d      	ldr	r5, [r3, #0]
 8004426:	e003      	b.n	8004430 <_printf_i+0xc4>
 8004428:	0645      	lsls	r5, r0, #25
 800442a:	d5fb      	bpl.n	8004424 <_printf_i+0xb8>
 800442c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004430:	2d00      	cmp	r5, #0
 8004432:	da03      	bge.n	800443c <_printf_i+0xd0>
 8004434:	232d      	movs	r3, #45	@ 0x2d
 8004436:	426d      	negs	r5, r5
 8004438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800443c:	230a      	movs	r3, #10
 800443e:	4859      	ldr	r0, [pc, #356]	@ (80045a4 <_printf_i+0x238>)
 8004440:	e011      	b.n	8004466 <_printf_i+0xfa>
 8004442:	6821      	ldr	r1, [r4, #0]
 8004444:	6833      	ldr	r3, [r6, #0]
 8004446:	0608      	lsls	r0, r1, #24
 8004448:	f853 5b04 	ldr.w	r5, [r3], #4
 800444c:	d402      	bmi.n	8004454 <_printf_i+0xe8>
 800444e:	0649      	lsls	r1, r1, #25
 8004450:	bf48      	it	mi
 8004452:	b2ad      	uxthmi	r5, r5
 8004454:	2f6f      	cmp	r7, #111	@ 0x6f
 8004456:	6033      	str	r3, [r6, #0]
 8004458:	bf14      	ite	ne
 800445a:	230a      	movne	r3, #10
 800445c:	2308      	moveq	r3, #8
 800445e:	4851      	ldr	r0, [pc, #324]	@ (80045a4 <_printf_i+0x238>)
 8004460:	2100      	movs	r1, #0
 8004462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004466:	6866      	ldr	r6, [r4, #4]
 8004468:	2e00      	cmp	r6, #0
 800446a:	bfa8      	it	ge
 800446c:	6821      	ldrge	r1, [r4, #0]
 800446e:	60a6      	str	r6, [r4, #8]
 8004470:	bfa4      	itt	ge
 8004472:	f021 0104 	bicge.w	r1, r1, #4
 8004476:	6021      	strge	r1, [r4, #0]
 8004478:	b90d      	cbnz	r5, 800447e <_printf_i+0x112>
 800447a:	2e00      	cmp	r6, #0
 800447c:	d04b      	beq.n	8004516 <_printf_i+0x1aa>
 800447e:	4616      	mov	r6, r2
 8004480:	fbb5 f1f3 	udiv	r1, r5, r3
 8004484:	fb03 5711 	mls	r7, r3, r1, r5
 8004488:	5dc7      	ldrb	r7, [r0, r7]
 800448a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800448e:	462f      	mov	r7, r5
 8004490:	42bb      	cmp	r3, r7
 8004492:	460d      	mov	r5, r1
 8004494:	d9f4      	bls.n	8004480 <_printf_i+0x114>
 8004496:	2b08      	cmp	r3, #8
 8004498:	d10b      	bne.n	80044b2 <_printf_i+0x146>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	07df      	lsls	r7, r3, #31
 800449e:	d508      	bpl.n	80044b2 <_printf_i+0x146>
 80044a0:	6923      	ldr	r3, [r4, #16]
 80044a2:	6861      	ldr	r1, [r4, #4]
 80044a4:	4299      	cmp	r1, r3
 80044a6:	bfde      	ittt	le
 80044a8:	2330      	movle	r3, #48	@ 0x30
 80044aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044b2:	1b92      	subs	r2, r2, r6
 80044b4:	6122      	str	r2, [r4, #16]
 80044b6:	464b      	mov	r3, r9
 80044b8:	4621      	mov	r1, r4
 80044ba:	4640      	mov	r0, r8
 80044bc:	f8cd a000 	str.w	sl, [sp]
 80044c0:	aa03      	add	r2, sp, #12
 80044c2:	f7ff fee1 	bl	8004288 <_printf_common>
 80044c6:	3001      	adds	r0, #1
 80044c8:	d14a      	bne.n	8004560 <_printf_i+0x1f4>
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	b004      	add	sp, #16
 80044d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f043 0320 	orr.w	r3, r3, #32
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	2778      	movs	r7, #120	@ 0x78
 80044de:	4832      	ldr	r0, [pc, #200]	@ (80045a8 <_printf_i+0x23c>)
 80044e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	6831      	ldr	r1, [r6, #0]
 80044e8:	061f      	lsls	r7, r3, #24
 80044ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80044ee:	d402      	bmi.n	80044f6 <_printf_i+0x18a>
 80044f0:	065f      	lsls	r7, r3, #25
 80044f2:	bf48      	it	mi
 80044f4:	b2ad      	uxthmi	r5, r5
 80044f6:	6031      	str	r1, [r6, #0]
 80044f8:	07d9      	lsls	r1, r3, #31
 80044fa:	bf44      	itt	mi
 80044fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004500:	6023      	strmi	r3, [r4, #0]
 8004502:	b11d      	cbz	r5, 800450c <_printf_i+0x1a0>
 8004504:	2310      	movs	r3, #16
 8004506:	e7ab      	b.n	8004460 <_printf_i+0xf4>
 8004508:	4826      	ldr	r0, [pc, #152]	@ (80045a4 <_printf_i+0x238>)
 800450a:	e7e9      	b.n	80044e0 <_printf_i+0x174>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	f023 0320 	bic.w	r3, r3, #32
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	e7f6      	b.n	8004504 <_printf_i+0x198>
 8004516:	4616      	mov	r6, r2
 8004518:	e7bd      	b.n	8004496 <_printf_i+0x12a>
 800451a:	6833      	ldr	r3, [r6, #0]
 800451c:	6825      	ldr	r5, [r4, #0]
 800451e:	1d18      	adds	r0, r3, #4
 8004520:	6961      	ldr	r1, [r4, #20]
 8004522:	6030      	str	r0, [r6, #0]
 8004524:	062e      	lsls	r6, r5, #24
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	d501      	bpl.n	800452e <_printf_i+0x1c2>
 800452a:	6019      	str	r1, [r3, #0]
 800452c:	e002      	b.n	8004534 <_printf_i+0x1c8>
 800452e:	0668      	lsls	r0, r5, #25
 8004530:	d5fb      	bpl.n	800452a <_printf_i+0x1be>
 8004532:	8019      	strh	r1, [r3, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	4616      	mov	r6, r2
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	e7bc      	b.n	80044b6 <_printf_i+0x14a>
 800453c:	6833      	ldr	r3, [r6, #0]
 800453e:	2100      	movs	r1, #0
 8004540:	1d1a      	adds	r2, r3, #4
 8004542:	6032      	str	r2, [r6, #0]
 8004544:	681e      	ldr	r6, [r3, #0]
 8004546:	6862      	ldr	r2, [r4, #4]
 8004548:	4630      	mov	r0, r6
 800454a:	f000 fbe4 	bl	8004d16 <memchr>
 800454e:	b108      	cbz	r0, 8004554 <_printf_i+0x1e8>
 8004550:	1b80      	subs	r0, r0, r6
 8004552:	6060      	str	r0, [r4, #4]
 8004554:	6863      	ldr	r3, [r4, #4]
 8004556:	6123      	str	r3, [r4, #16]
 8004558:	2300      	movs	r3, #0
 800455a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800455e:	e7aa      	b.n	80044b6 <_printf_i+0x14a>
 8004560:	4632      	mov	r2, r6
 8004562:	4649      	mov	r1, r9
 8004564:	4640      	mov	r0, r8
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	47d0      	blx	sl
 800456a:	3001      	adds	r0, #1
 800456c:	d0ad      	beq.n	80044ca <_printf_i+0x15e>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	079b      	lsls	r3, r3, #30
 8004572:	d413      	bmi.n	800459c <_printf_i+0x230>
 8004574:	68e0      	ldr	r0, [r4, #12]
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	4298      	cmp	r0, r3
 800457a:	bfb8      	it	lt
 800457c:	4618      	movlt	r0, r3
 800457e:	e7a6      	b.n	80044ce <_printf_i+0x162>
 8004580:	2301      	movs	r3, #1
 8004582:	4632      	mov	r2, r6
 8004584:	4649      	mov	r1, r9
 8004586:	4640      	mov	r0, r8
 8004588:	47d0      	blx	sl
 800458a:	3001      	adds	r0, #1
 800458c:	d09d      	beq.n	80044ca <_printf_i+0x15e>
 800458e:	3501      	adds	r5, #1
 8004590:	68e3      	ldr	r3, [r4, #12]
 8004592:	9903      	ldr	r1, [sp, #12]
 8004594:	1a5b      	subs	r3, r3, r1
 8004596:	42ab      	cmp	r3, r5
 8004598:	dcf2      	bgt.n	8004580 <_printf_i+0x214>
 800459a:	e7eb      	b.n	8004574 <_printf_i+0x208>
 800459c:	2500      	movs	r5, #0
 800459e:	f104 0619 	add.w	r6, r4, #25
 80045a2:	e7f5      	b.n	8004590 <_printf_i+0x224>
 80045a4:	08008704 	.word	0x08008704
 80045a8:	08008715 	.word	0x08008715

080045ac <_scanf_float>:
 80045ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b0:	b087      	sub	sp, #28
 80045b2:	9303      	str	r3, [sp, #12]
 80045b4:	688b      	ldr	r3, [r1, #8]
 80045b6:	4617      	mov	r7, r2
 80045b8:	1e5a      	subs	r2, r3, #1
 80045ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80045be:	bf82      	ittt	hi
 80045c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80045c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80045c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80045cc:	460a      	mov	r2, r1
 80045ce:	f04f 0500 	mov.w	r5, #0
 80045d2:	bf88      	it	hi
 80045d4:	608b      	strhi	r3, [r1, #8]
 80045d6:	680b      	ldr	r3, [r1, #0]
 80045d8:	4680      	mov	r8, r0
 80045da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80045de:	f842 3b1c 	str.w	r3, [r2], #28
 80045e2:	460c      	mov	r4, r1
 80045e4:	bf98      	it	ls
 80045e6:	f04f 0b00 	movls.w	fp, #0
 80045ea:	4616      	mov	r6, r2
 80045ec:	46aa      	mov	sl, r5
 80045ee:	46a9      	mov	r9, r5
 80045f0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80045f4:	9201      	str	r2, [sp, #4]
 80045f6:	9502      	str	r5, [sp, #8]
 80045f8:	68a2      	ldr	r2, [r4, #8]
 80045fa:	b152      	cbz	r2, 8004612 <_scanf_float+0x66>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b4e      	cmp	r3, #78	@ 0x4e
 8004602:	d865      	bhi.n	80046d0 <_scanf_float+0x124>
 8004604:	2b40      	cmp	r3, #64	@ 0x40
 8004606:	d83d      	bhi.n	8004684 <_scanf_float+0xd8>
 8004608:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800460c:	b2c8      	uxtb	r0, r1
 800460e:	280e      	cmp	r0, #14
 8004610:	d93b      	bls.n	800468a <_scanf_float+0xde>
 8004612:	f1b9 0f00 	cmp.w	r9, #0
 8004616:	d003      	beq.n	8004620 <_scanf_float+0x74>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004624:	f1ba 0f01 	cmp.w	sl, #1
 8004628:	f200 8118 	bhi.w	800485c <_scanf_float+0x2b0>
 800462c:	9b01      	ldr	r3, [sp, #4]
 800462e:	429e      	cmp	r6, r3
 8004630:	f200 8109 	bhi.w	8004846 <_scanf_float+0x29a>
 8004634:	2001      	movs	r0, #1
 8004636:	b007      	add	sp, #28
 8004638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004640:	2a0d      	cmp	r2, #13
 8004642:	d8e6      	bhi.n	8004612 <_scanf_float+0x66>
 8004644:	a101      	add	r1, pc, #4	@ (adr r1, 800464c <_scanf_float+0xa0>)
 8004646:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004793 	.word	0x08004793
 8004650:	08004613 	.word	0x08004613
 8004654:	08004613 	.word	0x08004613
 8004658:	08004613 	.word	0x08004613
 800465c:	080047f3 	.word	0x080047f3
 8004660:	080047cb 	.word	0x080047cb
 8004664:	08004613 	.word	0x08004613
 8004668:	08004613 	.word	0x08004613
 800466c:	080047a1 	.word	0x080047a1
 8004670:	08004613 	.word	0x08004613
 8004674:	08004613 	.word	0x08004613
 8004678:	08004613 	.word	0x08004613
 800467c:	08004613 	.word	0x08004613
 8004680:	08004759 	.word	0x08004759
 8004684:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004688:	e7da      	b.n	8004640 <_scanf_float+0x94>
 800468a:	290e      	cmp	r1, #14
 800468c:	d8c1      	bhi.n	8004612 <_scanf_float+0x66>
 800468e:	a001      	add	r0, pc, #4	@ (adr r0, 8004694 <_scanf_float+0xe8>)
 8004690:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004694:	08004749 	.word	0x08004749
 8004698:	08004613 	.word	0x08004613
 800469c:	08004749 	.word	0x08004749
 80046a0:	080047df 	.word	0x080047df
 80046a4:	08004613 	.word	0x08004613
 80046a8:	080046f1 	.word	0x080046f1
 80046ac:	0800472f 	.word	0x0800472f
 80046b0:	0800472f 	.word	0x0800472f
 80046b4:	0800472f 	.word	0x0800472f
 80046b8:	0800472f 	.word	0x0800472f
 80046bc:	0800472f 	.word	0x0800472f
 80046c0:	0800472f 	.word	0x0800472f
 80046c4:	0800472f 	.word	0x0800472f
 80046c8:	0800472f 	.word	0x0800472f
 80046cc:	0800472f 	.word	0x0800472f
 80046d0:	2b6e      	cmp	r3, #110	@ 0x6e
 80046d2:	d809      	bhi.n	80046e8 <_scanf_float+0x13c>
 80046d4:	2b60      	cmp	r3, #96	@ 0x60
 80046d6:	d8b1      	bhi.n	800463c <_scanf_float+0x90>
 80046d8:	2b54      	cmp	r3, #84	@ 0x54
 80046da:	d07b      	beq.n	80047d4 <_scanf_float+0x228>
 80046dc:	2b59      	cmp	r3, #89	@ 0x59
 80046de:	d198      	bne.n	8004612 <_scanf_float+0x66>
 80046e0:	2d07      	cmp	r5, #7
 80046e2:	d196      	bne.n	8004612 <_scanf_float+0x66>
 80046e4:	2508      	movs	r5, #8
 80046e6:	e02c      	b.n	8004742 <_scanf_float+0x196>
 80046e8:	2b74      	cmp	r3, #116	@ 0x74
 80046ea:	d073      	beq.n	80047d4 <_scanf_float+0x228>
 80046ec:	2b79      	cmp	r3, #121	@ 0x79
 80046ee:	e7f6      	b.n	80046de <_scanf_float+0x132>
 80046f0:	6821      	ldr	r1, [r4, #0]
 80046f2:	05c8      	lsls	r0, r1, #23
 80046f4:	d51b      	bpl.n	800472e <_scanf_float+0x182>
 80046f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80046fa:	6021      	str	r1, [r4, #0]
 80046fc:	f109 0901 	add.w	r9, r9, #1
 8004700:	f1bb 0f00 	cmp.w	fp, #0
 8004704:	d003      	beq.n	800470e <_scanf_float+0x162>
 8004706:	3201      	adds	r2, #1
 8004708:	f10b 3bff 	add.w	fp, fp, #4294967295
 800470c:	60a2      	str	r2, [r4, #8]
 800470e:	68a3      	ldr	r3, [r4, #8]
 8004710:	3b01      	subs	r3, #1
 8004712:	60a3      	str	r3, [r4, #8]
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	3301      	adds	r3, #1
 8004718:	6123      	str	r3, [r4, #16]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3b01      	subs	r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	f340 8087 	ble.w	8004834 <_scanf_float+0x288>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	e764      	b.n	80045f8 <_scanf_float+0x4c>
 800472e:	eb1a 0105 	adds.w	r1, sl, r5
 8004732:	f47f af6e 	bne.w	8004612 <_scanf_float+0x66>
 8004736:	460d      	mov	r5, r1
 8004738:	468a      	mov	sl, r1
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004740:	6022      	str	r2, [r4, #0]
 8004742:	f806 3b01 	strb.w	r3, [r6], #1
 8004746:	e7e2      	b.n	800470e <_scanf_float+0x162>
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	0610      	lsls	r0, r2, #24
 800474c:	f57f af61 	bpl.w	8004612 <_scanf_float+0x66>
 8004750:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004754:	6022      	str	r2, [r4, #0]
 8004756:	e7f4      	b.n	8004742 <_scanf_float+0x196>
 8004758:	f1ba 0f00 	cmp.w	sl, #0
 800475c:	d10e      	bne.n	800477c <_scanf_float+0x1d0>
 800475e:	f1b9 0f00 	cmp.w	r9, #0
 8004762:	d10e      	bne.n	8004782 <_scanf_float+0x1d6>
 8004764:	6822      	ldr	r2, [r4, #0]
 8004766:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800476a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800476e:	d108      	bne.n	8004782 <_scanf_float+0x1d6>
 8004770:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004774:	f04f 0a01 	mov.w	sl, #1
 8004778:	6022      	str	r2, [r4, #0]
 800477a:	e7e2      	b.n	8004742 <_scanf_float+0x196>
 800477c:	f1ba 0f02 	cmp.w	sl, #2
 8004780:	d055      	beq.n	800482e <_scanf_float+0x282>
 8004782:	2d01      	cmp	r5, #1
 8004784:	d002      	beq.n	800478c <_scanf_float+0x1e0>
 8004786:	2d04      	cmp	r5, #4
 8004788:	f47f af43 	bne.w	8004612 <_scanf_float+0x66>
 800478c:	3501      	adds	r5, #1
 800478e:	b2ed      	uxtb	r5, r5
 8004790:	e7d7      	b.n	8004742 <_scanf_float+0x196>
 8004792:	f1ba 0f01 	cmp.w	sl, #1
 8004796:	f47f af3c 	bne.w	8004612 <_scanf_float+0x66>
 800479a:	f04f 0a02 	mov.w	sl, #2
 800479e:	e7d0      	b.n	8004742 <_scanf_float+0x196>
 80047a0:	b97d      	cbnz	r5, 80047c2 <_scanf_float+0x216>
 80047a2:	f1b9 0f00 	cmp.w	r9, #0
 80047a6:	f47f af37 	bne.w	8004618 <_scanf_float+0x6c>
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80047b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80047b4:	f040 8103 	bne.w	80049be <_scanf_float+0x412>
 80047b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80047bc:	2501      	movs	r5, #1
 80047be:	6022      	str	r2, [r4, #0]
 80047c0:	e7bf      	b.n	8004742 <_scanf_float+0x196>
 80047c2:	2d03      	cmp	r5, #3
 80047c4:	d0e2      	beq.n	800478c <_scanf_float+0x1e0>
 80047c6:	2d05      	cmp	r5, #5
 80047c8:	e7de      	b.n	8004788 <_scanf_float+0x1dc>
 80047ca:	2d02      	cmp	r5, #2
 80047cc:	f47f af21 	bne.w	8004612 <_scanf_float+0x66>
 80047d0:	2503      	movs	r5, #3
 80047d2:	e7b6      	b.n	8004742 <_scanf_float+0x196>
 80047d4:	2d06      	cmp	r5, #6
 80047d6:	f47f af1c 	bne.w	8004612 <_scanf_float+0x66>
 80047da:	2507      	movs	r5, #7
 80047dc:	e7b1      	b.n	8004742 <_scanf_float+0x196>
 80047de:	6822      	ldr	r2, [r4, #0]
 80047e0:	0591      	lsls	r1, r2, #22
 80047e2:	f57f af16 	bpl.w	8004612 <_scanf_float+0x66>
 80047e6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80047ea:	6022      	str	r2, [r4, #0]
 80047ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80047f0:	e7a7      	b.n	8004742 <_scanf_float+0x196>
 80047f2:	6822      	ldr	r2, [r4, #0]
 80047f4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80047f8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80047fc:	d006      	beq.n	800480c <_scanf_float+0x260>
 80047fe:	0550      	lsls	r0, r2, #21
 8004800:	f57f af07 	bpl.w	8004612 <_scanf_float+0x66>
 8004804:	f1b9 0f00 	cmp.w	r9, #0
 8004808:	f000 80d9 	beq.w	80049be <_scanf_float+0x412>
 800480c:	0591      	lsls	r1, r2, #22
 800480e:	bf58      	it	pl
 8004810:	9902      	ldrpl	r1, [sp, #8]
 8004812:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004816:	bf58      	it	pl
 8004818:	eba9 0101 	subpl.w	r1, r9, r1
 800481c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004820:	f04f 0900 	mov.w	r9, #0
 8004824:	bf58      	it	pl
 8004826:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800482a:	6022      	str	r2, [r4, #0]
 800482c:	e789      	b.n	8004742 <_scanf_float+0x196>
 800482e:	f04f 0a03 	mov.w	sl, #3
 8004832:	e786      	b.n	8004742 <_scanf_float+0x196>
 8004834:	4639      	mov	r1, r7
 8004836:	4640      	mov	r0, r8
 8004838:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800483c:	4798      	blx	r3
 800483e:	2800      	cmp	r0, #0
 8004840:	f43f aeda 	beq.w	80045f8 <_scanf_float+0x4c>
 8004844:	e6e5      	b.n	8004612 <_scanf_float+0x66>
 8004846:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800484a:	463a      	mov	r2, r7
 800484c:	4640      	mov	r0, r8
 800484e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004852:	4798      	blx	r3
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	3b01      	subs	r3, #1
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	e6e7      	b.n	800462c <_scanf_float+0x80>
 800485c:	1e6b      	subs	r3, r5, #1
 800485e:	2b06      	cmp	r3, #6
 8004860:	d824      	bhi.n	80048ac <_scanf_float+0x300>
 8004862:	2d02      	cmp	r5, #2
 8004864:	d836      	bhi.n	80048d4 <_scanf_float+0x328>
 8004866:	9b01      	ldr	r3, [sp, #4]
 8004868:	429e      	cmp	r6, r3
 800486a:	f67f aee3 	bls.w	8004634 <_scanf_float+0x88>
 800486e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004872:	463a      	mov	r2, r7
 8004874:	4640      	mov	r0, r8
 8004876:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800487a:	4798      	blx	r3
 800487c:	6923      	ldr	r3, [r4, #16]
 800487e:	3b01      	subs	r3, #1
 8004880:	6123      	str	r3, [r4, #16]
 8004882:	e7f0      	b.n	8004866 <_scanf_float+0x2ba>
 8004884:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004888:	463a      	mov	r2, r7
 800488a:	4640      	mov	r0, r8
 800488c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004890:	4798      	blx	r3
 8004892:	6923      	ldr	r3, [r4, #16]
 8004894:	3b01      	subs	r3, #1
 8004896:	6123      	str	r3, [r4, #16]
 8004898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800489c:	fa5f fa8a 	uxtb.w	sl, sl
 80048a0:	f1ba 0f02 	cmp.w	sl, #2
 80048a4:	d1ee      	bne.n	8004884 <_scanf_float+0x2d8>
 80048a6:	3d03      	subs	r5, #3
 80048a8:	b2ed      	uxtb	r5, r5
 80048aa:	1b76      	subs	r6, r6, r5
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	05da      	lsls	r2, r3, #23
 80048b0:	d530      	bpl.n	8004914 <_scanf_float+0x368>
 80048b2:	055b      	lsls	r3, r3, #21
 80048b4:	d511      	bpl.n	80048da <_scanf_float+0x32e>
 80048b6:	9b01      	ldr	r3, [sp, #4]
 80048b8:	429e      	cmp	r6, r3
 80048ba:	f67f aebb 	bls.w	8004634 <_scanf_float+0x88>
 80048be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048c2:	463a      	mov	r2, r7
 80048c4:	4640      	mov	r0, r8
 80048c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048ca:	4798      	blx	r3
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	e7f0      	b.n	80048b6 <_scanf_float+0x30a>
 80048d4:	46aa      	mov	sl, r5
 80048d6:	46b3      	mov	fp, r6
 80048d8:	e7de      	b.n	8004898 <_scanf_float+0x2ec>
 80048da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80048de:	6923      	ldr	r3, [r4, #16]
 80048e0:	2965      	cmp	r1, #101	@ 0x65
 80048e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80048e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	d00c      	beq.n	8004908 <_scanf_float+0x35c>
 80048ee:	2945      	cmp	r1, #69	@ 0x45
 80048f0:	d00a      	beq.n	8004908 <_scanf_float+0x35c>
 80048f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048f6:	463a      	mov	r2, r7
 80048f8:	4640      	mov	r0, r8
 80048fa:	4798      	blx	r3
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004902:	3b01      	subs	r3, #1
 8004904:	1eb5      	subs	r5, r6, #2
 8004906:	6123      	str	r3, [r4, #16]
 8004908:	463a      	mov	r2, r7
 800490a:	4640      	mov	r0, r8
 800490c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004910:	4798      	blx	r3
 8004912:	462e      	mov	r6, r5
 8004914:	6822      	ldr	r2, [r4, #0]
 8004916:	f012 0210 	ands.w	r2, r2, #16
 800491a:	d001      	beq.n	8004920 <_scanf_float+0x374>
 800491c:	2000      	movs	r0, #0
 800491e:	e68a      	b.n	8004636 <_scanf_float+0x8a>
 8004920:	7032      	strb	r2, [r6, #0]
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492c:	d11c      	bne.n	8004968 <_scanf_float+0x3bc>
 800492e:	9b02      	ldr	r3, [sp, #8]
 8004930:	454b      	cmp	r3, r9
 8004932:	eba3 0209 	sub.w	r2, r3, r9
 8004936:	d123      	bne.n	8004980 <_scanf_float+0x3d4>
 8004938:	2200      	movs	r2, #0
 800493a:	4640      	mov	r0, r8
 800493c:	9901      	ldr	r1, [sp, #4]
 800493e:	f002 fbef 	bl	8007120 <_strtod_r>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	6825      	ldr	r5, [r4, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f015 0f02 	tst.w	r5, #2
 800494c:	4606      	mov	r6, r0
 800494e:	460f      	mov	r7, r1
 8004950:	f103 0204 	add.w	r2, r3, #4
 8004954:	d01f      	beq.n	8004996 <_scanf_float+0x3ea>
 8004956:	9903      	ldr	r1, [sp, #12]
 8004958:	600a      	str	r2, [r1, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	e9c3 6700 	strd	r6, r7, [r3]
 8004960:	68e3      	ldr	r3, [r4, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60e3      	str	r3, [r4, #12]
 8004966:	e7d9      	b.n	800491c <_scanf_float+0x370>
 8004968:	9b04      	ldr	r3, [sp, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0e4      	beq.n	8004938 <_scanf_float+0x38c>
 800496e:	9905      	ldr	r1, [sp, #20]
 8004970:	230a      	movs	r3, #10
 8004972:	4640      	mov	r0, r8
 8004974:	3101      	adds	r1, #1
 8004976:	f002 fc53 	bl	8007220 <_strtol_r>
 800497a:	9b04      	ldr	r3, [sp, #16]
 800497c:	9e05      	ldr	r6, [sp, #20]
 800497e:	1ac2      	subs	r2, r0, r3
 8004980:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004984:	429e      	cmp	r6, r3
 8004986:	bf28      	it	cs
 8004988:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800498c:	4630      	mov	r0, r6
 800498e:	490d      	ldr	r1, [pc, #52]	@ (80049c4 <_scanf_float+0x418>)
 8004990:	f000 f8de 	bl	8004b50 <siprintf>
 8004994:	e7d0      	b.n	8004938 <_scanf_float+0x38c>
 8004996:	076d      	lsls	r5, r5, #29
 8004998:	d4dd      	bmi.n	8004956 <_scanf_float+0x3aa>
 800499a:	9d03      	ldr	r5, [sp, #12]
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	681d      	ldr	r5, [r3, #0]
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	f7fc f832 	bl	8000a0c <__aeabi_dcmpun>
 80049a8:	b120      	cbz	r0, 80049b4 <_scanf_float+0x408>
 80049aa:	4807      	ldr	r0, [pc, #28]	@ (80049c8 <_scanf_float+0x41c>)
 80049ac:	f000 f9c2 	bl	8004d34 <nanf>
 80049b0:	6028      	str	r0, [r5, #0]
 80049b2:	e7d5      	b.n	8004960 <_scanf_float+0x3b4>
 80049b4:	4630      	mov	r0, r6
 80049b6:	4639      	mov	r1, r7
 80049b8:	f7fc f886 	bl	8000ac8 <__aeabi_d2f>
 80049bc:	e7f8      	b.n	80049b0 <_scanf_float+0x404>
 80049be:	f04f 0900 	mov.w	r9, #0
 80049c2:	e62d      	b.n	8004620 <_scanf_float+0x74>
 80049c4:	08008726 	.word	0x08008726
 80049c8:	08008abd 	.word	0x08008abd

080049cc <std>:
 80049cc:	2300      	movs	r3, #0
 80049ce:	b510      	push	{r4, lr}
 80049d0:	4604      	mov	r4, r0
 80049d2:	e9c0 3300 	strd	r3, r3, [r0]
 80049d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049da:	6083      	str	r3, [r0, #8]
 80049dc:	8181      	strh	r1, [r0, #12]
 80049de:	6643      	str	r3, [r0, #100]	@ 0x64
 80049e0:	81c2      	strh	r2, [r0, #14]
 80049e2:	6183      	str	r3, [r0, #24]
 80049e4:	4619      	mov	r1, r3
 80049e6:	2208      	movs	r2, #8
 80049e8:	305c      	adds	r0, #92	@ 0x5c
 80049ea:	f000 f914 	bl	8004c16 <memset>
 80049ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004a24 <std+0x58>)
 80049f0:	6224      	str	r4, [r4, #32]
 80049f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <std+0x5c>)
 80049f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80049f8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <std+0x60>)
 80049fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <std+0x64>)
 80049fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a00:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <std+0x68>)
 8004a02:	429c      	cmp	r4, r3
 8004a04:	d006      	beq.n	8004a14 <std+0x48>
 8004a06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a0a:	4294      	cmp	r4, r2
 8004a0c:	d002      	beq.n	8004a14 <std+0x48>
 8004a0e:	33d0      	adds	r3, #208	@ 0xd0
 8004a10:	429c      	cmp	r4, r3
 8004a12:	d105      	bne.n	8004a20 <std+0x54>
 8004a14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a1c:	f000 b978 	b.w	8004d10 <__retarget_lock_init_recursive>
 8004a20:	bd10      	pop	{r4, pc}
 8004a22:	bf00      	nop
 8004a24:	08004b91 	.word	0x08004b91
 8004a28:	08004bb3 	.word	0x08004bb3
 8004a2c:	08004beb 	.word	0x08004beb
 8004a30:	08004c0f 	.word	0x08004c0f
 8004a34:	200002b0 	.word	0x200002b0

08004a38 <stdio_exit_handler>:
 8004a38:	4a02      	ldr	r2, [pc, #8]	@ (8004a44 <stdio_exit_handler+0xc>)
 8004a3a:	4903      	ldr	r1, [pc, #12]	@ (8004a48 <stdio_exit_handler+0x10>)
 8004a3c:	4803      	ldr	r0, [pc, #12]	@ (8004a4c <stdio_exit_handler+0x14>)
 8004a3e:	f000 b869 	b.w	8004b14 <_fwalk_sglue>
 8004a42:	bf00      	nop
 8004a44:	2000000c 	.word	0x2000000c
 8004a48:	080075d5 	.word	0x080075d5
 8004a4c:	2000001c 	.word	0x2000001c

08004a50 <cleanup_stdio>:
 8004a50:	6841      	ldr	r1, [r0, #4]
 8004a52:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <cleanup_stdio+0x34>)
 8004a54:	b510      	push	{r4, lr}
 8004a56:	4299      	cmp	r1, r3
 8004a58:	4604      	mov	r4, r0
 8004a5a:	d001      	beq.n	8004a60 <cleanup_stdio+0x10>
 8004a5c:	f002 fdba 	bl	80075d4 <_fflush_r>
 8004a60:	68a1      	ldr	r1, [r4, #8]
 8004a62:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <cleanup_stdio+0x38>)
 8004a64:	4299      	cmp	r1, r3
 8004a66:	d002      	beq.n	8004a6e <cleanup_stdio+0x1e>
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f002 fdb3 	bl	80075d4 <_fflush_r>
 8004a6e:	68e1      	ldr	r1, [r4, #12]
 8004a70:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <cleanup_stdio+0x3c>)
 8004a72:	4299      	cmp	r1, r3
 8004a74:	d004      	beq.n	8004a80 <cleanup_stdio+0x30>
 8004a76:	4620      	mov	r0, r4
 8004a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7c:	f002 bdaa 	b.w	80075d4 <_fflush_r>
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	bf00      	nop
 8004a84:	200002b0 	.word	0x200002b0
 8004a88:	20000318 	.word	0x20000318
 8004a8c:	20000380 	.word	0x20000380

08004a90 <global_stdio_init.part.0>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <global_stdio_init.part.0+0x30>)
 8004a94:	4c0b      	ldr	r4, [pc, #44]	@ (8004ac4 <global_stdio_init.part.0+0x34>)
 8004a96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac8 <global_stdio_init.part.0+0x38>)
 8004a98:	4620      	mov	r0, r4
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	2104      	movs	r1, #4
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f7ff ff94 	bl	80049cc <std>
 8004aa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2109      	movs	r1, #9
 8004aac:	f7ff ff8e 	bl	80049cc <std>
 8004ab0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aba:	2112      	movs	r1, #18
 8004abc:	f7ff bf86 	b.w	80049cc <std>
 8004ac0:	200003e8 	.word	0x200003e8
 8004ac4:	200002b0 	.word	0x200002b0
 8004ac8:	08004a39 	.word	0x08004a39

08004acc <__sfp_lock_acquire>:
 8004acc:	4801      	ldr	r0, [pc, #4]	@ (8004ad4 <__sfp_lock_acquire+0x8>)
 8004ace:	f000 b920 	b.w	8004d12 <__retarget_lock_acquire_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	200003f1 	.word	0x200003f1

08004ad8 <__sfp_lock_release>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	@ (8004ae0 <__sfp_lock_release+0x8>)
 8004ada:	f000 b91b 	b.w	8004d14 <__retarget_lock_release_recursive>
 8004ade:	bf00      	nop
 8004ae0:	200003f1 	.word	0x200003f1

08004ae4 <__sinit>:
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	f7ff fff0 	bl	8004acc <__sfp_lock_acquire>
 8004aec:	6a23      	ldr	r3, [r4, #32]
 8004aee:	b11b      	cbz	r3, 8004af8 <__sinit+0x14>
 8004af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af4:	f7ff bff0 	b.w	8004ad8 <__sfp_lock_release>
 8004af8:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <__sinit+0x28>)
 8004afa:	6223      	str	r3, [r4, #32]
 8004afc:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <__sinit+0x2c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f5      	bne.n	8004af0 <__sinit+0xc>
 8004b04:	f7ff ffc4 	bl	8004a90 <global_stdio_init.part.0>
 8004b08:	e7f2      	b.n	8004af0 <__sinit+0xc>
 8004b0a:	bf00      	nop
 8004b0c:	08004a51 	.word	0x08004a51
 8004b10:	200003e8 	.word	0x200003e8

08004b14 <_fwalk_sglue>:
 8004b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b18:	4607      	mov	r7, r0
 8004b1a:	4688      	mov	r8, r1
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	2600      	movs	r6, #0
 8004b20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b24:	f1b9 0901 	subs.w	r9, r9, #1
 8004b28:	d505      	bpl.n	8004b36 <_fwalk_sglue+0x22>
 8004b2a:	6824      	ldr	r4, [r4, #0]
 8004b2c:	2c00      	cmp	r4, #0
 8004b2e:	d1f7      	bne.n	8004b20 <_fwalk_sglue+0xc>
 8004b30:	4630      	mov	r0, r6
 8004b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b36:	89ab      	ldrh	r3, [r5, #12]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d907      	bls.n	8004b4c <_fwalk_sglue+0x38>
 8004b3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b40:	3301      	adds	r3, #1
 8004b42:	d003      	beq.n	8004b4c <_fwalk_sglue+0x38>
 8004b44:	4629      	mov	r1, r5
 8004b46:	4638      	mov	r0, r7
 8004b48:	47c0      	blx	r8
 8004b4a:	4306      	orrs	r6, r0
 8004b4c:	3568      	adds	r5, #104	@ 0x68
 8004b4e:	e7e9      	b.n	8004b24 <_fwalk_sglue+0x10>

08004b50 <siprintf>:
 8004b50:	b40e      	push	{r1, r2, r3}
 8004b52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b56:	b500      	push	{lr}
 8004b58:	b09c      	sub	sp, #112	@ 0x70
 8004b5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b5c:	9002      	str	r0, [sp, #8]
 8004b5e:	9006      	str	r0, [sp, #24]
 8004b60:	9107      	str	r1, [sp, #28]
 8004b62:	9104      	str	r1, [sp, #16]
 8004b64:	4808      	ldr	r0, [pc, #32]	@ (8004b88 <siprintf+0x38>)
 8004b66:	4909      	ldr	r1, [pc, #36]	@ (8004b8c <siprintf+0x3c>)
 8004b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b6c:	9105      	str	r1, [sp, #20]
 8004b6e:	6800      	ldr	r0, [r0, #0]
 8004b70:	a902      	add	r1, sp, #8
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	f002 fbb2 	bl	80072dc <_svfiprintf_r>
 8004b78:	2200      	movs	r2, #0
 8004b7a:	9b02      	ldr	r3, [sp, #8]
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	b01c      	add	sp, #112	@ 0x70
 8004b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b84:	b003      	add	sp, #12
 8004b86:	4770      	bx	lr
 8004b88:	20000018 	.word	0x20000018
 8004b8c:	ffff0208 	.word	0xffff0208

08004b90 <__sread>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	460c      	mov	r4, r1
 8004b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b98:	f000 f86c 	bl	8004c74 <_read_r>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	bfab      	itete	ge
 8004ba0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ba4:	181b      	addge	r3, r3, r0
 8004ba6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004baa:	bfac      	ite	ge
 8004bac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bae:	81a3      	strhlt	r3, [r4, #12]
 8004bb0:	bd10      	pop	{r4, pc}

08004bb2 <__swrite>:
 8004bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb6:	461f      	mov	r7, r3
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	4605      	mov	r5, r0
 8004bbc:	05db      	lsls	r3, r3, #23
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	d505      	bpl.n	8004bd0 <__swrite+0x1e>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bcc:	f000 f840 	bl	8004c50 <_lseek_r>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	4628      	mov	r0, r5
 8004bdc:	463b      	mov	r3, r7
 8004bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004be6:	f000 b857 	b.w	8004c98 <_write_r>

08004bea <__sseek>:
 8004bea:	b510      	push	{r4, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf2:	f000 f82d 	bl	8004c50 <_lseek_r>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	bf15      	itete	ne
 8004bfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004bfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c06:	81a3      	strheq	r3, [r4, #12]
 8004c08:	bf18      	it	ne
 8004c0a:	81a3      	strhne	r3, [r4, #12]
 8004c0c:	bd10      	pop	{r4, pc}

08004c0e <__sclose>:
 8004c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c12:	f000 b80d 	b.w	8004c30 <_close_r>

08004c16 <memset>:
 8004c16:	4603      	mov	r3, r0
 8004c18:	4402      	add	r2, r0
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d100      	bne.n	8004c20 <memset+0xa>
 8004c1e:	4770      	bx	lr
 8004c20:	f803 1b01 	strb.w	r1, [r3], #1
 8004c24:	e7f9      	b.n	8004c1a <memset+0x4>
	...

08004c28 <_localeconv_r>:
 8004c28:	4800      	ldr	r0, [pc, #0]	@ (8004c2c <_localeconv_r+0x4>)
 8004c2a:	4770      	bx	lr
 8004c2c:	20000158 	.word	0x20000158

08004c30 <_close_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	2300      	movs	r3, #0
 8004c34:	4d05      	ldr	r5, [pc, #20]	@ (8004c4c <_close_r+0x1c>)
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fd f959 	bl	8001ef2 <_close>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_close_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_close_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	200003ec 	.word	0x200003ec

08004c50 <_lseek_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4d05      	ldr	r5, [pc, #20]	@ (8004c70 <_lseek_r+0x20>)
 8004c5c:	602a      	str	r2, [r5, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f7fd f96b 	bl	8001f3a <_lseek>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_lseek_r+0x1e>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_lseek_r+0x1e>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	200003ec 	.word	0x200003ec

08004c74 <_read_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4604      	mov	r4, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4d05      	ldr	r5, [pc, #20]	@ (8004c94 <_read_r+0x20>)
 8004c80:	602a      	str	r2, [r5, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f7fd f8fc 	bl	8001e80 <_read>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_read_r+0x1e>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_read_r+0x1e>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	200003ec 	.word	0x200003ec

08004c98 <_write_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4d05      	ldr	r5, [pc, #20]	@ (8004cb8 <_write_r+0x20>)
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fd f907 	bl	8001eba <_write>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_write_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_write_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200003ec 	.word	0x200003ec

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	@ (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000018 	.word	0x20000018

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	2600      	movs	r6, #0
 8004ccc:	4d0c      	ldr	r5, [pc, #48]	@ (8004d00 <__libc_init_array+0x38>)
 8004cce:	4c0d      	ldr	r4, [pc, #52]	@ (8004d04 <__libc_init_array+0x3c>)
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	f003 fc62 	bl	80085a0 <_init>
 8004cdc:	2600      	movs	r6, #0
 8004cde:	4d0a      	ldr	r5, [pc, #40]	@ (8004d08 <__libc_init_array+0x40>)
 8004ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8004d0c <__libc_init_array+0x44>)
 8004ce2:	1b64      	subs	r4, r4, r5
 8004ce4:	10a4      	asrs	r4, r4, #2
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08008b28 	.word	0x08008b28
 8004d04:	08008b28 	.word	0x08008b28
 8004d08:	08008b28 	.word	0x08008b28
 8004d0c:	08008b2c 	.word	0x08008b2c

08004d10 <__retarget_lock_init_recursive>:
 8004d10:	4770      	bx	lr

08004d12 <__retarget_lock_acquire_recursive>:
 8004d12:	4770      	bx	lr

08004d14 <__retarget_lock_release_recursive>:
 8004d14:	4770      	bx	lr

08004d16 <memchr>:
 8004d16:	4603      	mov	r3, r0
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	b2c9      	uxtb	r1, r1
 8004d1c:	4402      	add	r2, r0
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	d101      	bne.n	8004d28 <memchr+0x12>
 8004d24:	2000      	movs	r0, #0
 8004d26:	e003      	b.n	8004d30 <memchr+0x1a>
 8004d28:	7804      	ldrb	r4, [r0, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	428c      	cmp	r4, r1
 8004d2e:	d1f6      	bne.n	8004d1e <memchr+0x8>
 8004d30:	bd10      	pop	{r4, pc}
	...

08004d34 <nanf>:
 8004d34:	4800      	ldr	r0, [pc, #0]	@ (8004d38 <nanf+0x4>)
 8004d36:	4770      	bx	lr
 8004d38:	7fc00000 	.word	0x7fc00000

08004d3c <quorem>:
 8004d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d40:	6903      	ldr	r3, [r0, #16]
 8004d42:	690c      	ldr	r4, [r1, #16]
 8004d44:	4607      	mov	r7, r0
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	db7e      	blt.n	8004e48 <quorem+0x10c>
 8004d4a:	3c01      	subs	r4, #1
 8004d4c:	00a3      	lsls	r3, r4, #2
 8004d4e:	f100 0514 	add.w	r5, r0, #20
 8004d52:	f101 0814 	add.w	r8, r1, #20
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d66:	3301      	adds	r3, #1
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d72:	d32e      	bcc.n	8004dd2 <quorem+0x96>
 8004d74:	f04f 0a00 	mov.w	sl, #0
 8004d78:	46c4      	mov	ip, r8
 8004d7a:	46ae      	mov	lr, r5
 8004d7c:	46d3      	mov	fp, sl
 8004d7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d82:	b298      	uxth	r0, r3
 8004d84:	fb06 a000 	mla	r0, r6, r0, sl
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	0c02      	lsrs	r2, r0, #16
 8004d8c:	fb06 2303 	mla	r3, r6, r3, r2
 8004d90:	f8de 2000 	ldr.w	r2, [lr]
 8004d94:	b280      	uxth	r0, r0
 8004d96:	b292      	uxth	r2, r2
 8004d98:	1a12      	subs	r2, r2, r0
 8004d9a:	445a      	add	r2, fp
 8004d9c:	f8de 0000 	ldr.w	r0, [lr]
 8004da0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004daa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004dae:	b292      	uxth	r2, r2
 8004db0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004db4:	45e1      	cmp	r9, ip
 8004db6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004dba:	f84e 2b04 	str.w	r2, [lr], #4
 8004dbe:	d2de      	bcs.n	8004d7e <quorem+0x42>
 8004dc0:	9b00      	ldr	r3, [sp, #0]
 8004dc2:	58eb      	ldr	r3, [r5, r3]
 8004dc4:	b92b      	cbnz	r3, 8004dd2 <quorem+0x96>
 8004dc6:	9b01      	ldr	r3, [sp, #4]
 8004dc8:	3b04      	subs	r3, #4
 8004dca:	429d      	cmp	r5, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	d32f      	bcc.n	8004e30 <quorem+0xf4>
 8004dd0:	613c      	str	r4, [r7, #16]
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	f001 f9c4 	bl	8006160 <__mcmp>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	db25      	blt.n	8004e28 <quorem+0xec>
 8004ddc:	4629      	mov	r1, r5
 8004dde:	2000      	movs	r0, #0
 8004de0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004de4:	f8d1 c000 	ldr.w	ip, [r1]
 8004de8:	fa1f fe82 	uxth.w	lr, r2
 8004dec:	fa1f f38c 	uxth.w	r3, ip
 8004df0:	eba3 030e 	sub.w	r3, r3, lr
 8004df4:	4403      	add	r3, r0
 8004df6:	0c12      	lsrs	r2, r2, #16
 8004df8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004dfc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e06:	45c1      	cmp	r9, r8
 8004e08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e0c:	f841 3b04 	str.w	r3, [r1], #4
 8004e10:	d2e6      	bcs.n	8004de0 <quorem+0xa4>
 8004e12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e1a:	b922      	cbnz	r2, 8004e26 <quorem+0xea>
 8004e1c:	3b04      	subs	r3, #4
 8004e1e:	429d      	cmp	r5, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	d30b      	bcc.n	8004e3c <quorem+0x100>
 8004e24:	613c      	str	r4, [r7, #16]
 8004e26:	3601      	adds	r6, #1
 8004e28:	4630      	mov	r0, r6
 8004e2a:	b003      	add	sp, #12
 8004e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	3b04      	subs	r3, #4
 8004e34:	2a00      	cmp	r2, #0
 8004e36:	d1cb      	bne.n	8004dd0 <quorem+0x94>
 8004e38:	3c01      	subs	r4, #1
 8004e3a:	e7c6      	b.n	8004dca <quorem+0x8e>
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	3b04      	subs	r3, #4
 8004e40:	2a00      	cmp	r2, #0
 8004e42:	d1ef      	bne.n	8004e24 <quorem+0xe8>
 8004e44:	3c01      	subs	r4, #1
 8004e46:	e7ea      	b.n	8004e1e <quorem+0xe2>
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e7ee      	b.n	8004e2a <quorem+0xee>
 8004e4c:	0000      	movs	r0, r0
	...

08004e50 <_dtoa_r>:
 8004e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	69c7      	ldr	r7, [r0, #28]
 8004e5a:	b097      	sub	sp, #92	@ 0x5c
 8004e5c:	4683      	mov	fp, r0
 8004e5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004e62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004e64:	b97f      	cbnz	r7, 8004e86 <_dtoa_r+0x36>
 8004e66:	2010      	movs	r0, #16
 8004e68:	f000 fe02 	bl	8005a70 <malloc>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004e72:	b920      	cbnz	r0, 8004e7e <_dtoa_r+0x2e>
 8004e74:	21ef      	movs	r1, #239	@ 0xef
 8004e76:	4ba8      	ldr	r3, [pc, #672]	@ (8005118 <_dtoa_r+0x2c8>)
 8004e78:	48a8      	ldr	r0, [pc, #672]	@ (800511c <_dtoa_r+0x2cc>)
 8004e7a:	f002 fc23 	bl	80076c4 <__assert_func>
 8004e7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e82:	6007      	str	r7, [r0, #0]
 8004e84:	60c7      	str	r7, [r0, #12]
 8004e86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e8a:	6819      	ldr	r1, [r3, #0]
 8004e8c:	b159      	cbz	r1, 8004ea6 <_dtoa_r+0x56>
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	2301      	movs	r3, #1
 8004e92:	4093      	lsls	r3, r2
 8004e94:	604a      	str	r2, [r1, #4]
 8004e96:	608b      	str	r3, [r1, #8]
 8004e98:	4658      	mov	r0, fp
 8004e9a:	f000 fedf 	bl	8005c5c <_Bfree>
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	1e2b      	subs	r3, r5, #0
 8004ea8:	bfaf      	iteee	ge
 8004eaa:	2300      	movge	r3, #0
 8004eac:	2201      	movlt	r2, #1
 8004eae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004eb2:	9303      	strlt	r3, [sp, #12]
 8004eb4:	bfa8      	it	ge
 8004eb6:	6033      	strge	r3, [r6, #0]
 8004eb8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ebc:	4b98      	ldr	r3, [pc, #608]	@ (8005120 <_dtoa_r+0x2d0>)
 8004ebe:	bfb8      	it	lt
 8004ec0:	6032      	strlt	r2, [r6, #0]
 8004ec2:	ea33 0308 	bics.w	r3, r3, r8
 8004ec6:	d112      	bne.n	8004eee <_dtoa_r+0x9e>
 8004ec8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ecc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004ed4:	4323      	orrs	r3, r4
 8004ed6:	f000 8550 	beq.w	800597a <_dtoa_r+0xb2a>
 8004eda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004edc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005124 <_dtoa_r+0x2d4>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8552 	beq.w	800598a <_dtoa_r+0xb3a>
 8004ee6:	f10a 0303 	add.w	r3, sl, #3
 8004eea:	f000 bd4c 	b.w	8005986 <_dtoa_r+0xb36>
 8004eee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ef2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004ef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004efa:	2200      	movs	r2, #0
 8004efc:	2300      	movs	r3, #0
 8004efe:	f7fb fd53 	bl	80009a8 <__aeabi_dcmpeq>
 8004f02:	4607      	mov	r7, r0
 8004f04:	b158      	cbz	r0, 8004f1e <_dtoa_r+0xce>
 8004f06:	2301      	movs	r3, #1
 8004f08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f0e:	b113      	cbz	r3, 8004f16 <_dtoa_r+0xc6>
 8004f10:	4b85      	ldr	r3, [pc, #532]	@ (8005128 <_dtoa_r+0x2d8>)
 8004f12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800512c <_dtoa_r+0x2dc>
 8004f1a:	f000 bd36 	b.w	800598a <_dtoa_r+0xb3a>
 8004f1e:	ab14      	add	r3, sp, #80	@ 0x50
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	ab15      	add	r3, sp, #84	@ 0x54
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	4658      	mov	r0, fp
 8004f28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004f2c:	f001 fa30 	bl	8006390 <__d2b>
 8004f30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004f34:	4681      	mov	r9, r0
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d077      	beq.n	800502a <_dtoa_r+0x1da>
 8004f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f50:	9712      	str	r7, [sp, #72]	@ 0x48
 8004f52:	4619      	mov	r1, r3
 8004f54:	2200      	movs	r2, #0
 8004f56:	4b76      	ldr	r3, [pc, #472]	@ (8005130 <_dtoa_r+0x2e0>)
 8004f58:	f7fb f906 	bl	8000168 <__aeabi_dsub>
 8004f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8005100 <_dtoa_r+0x2b0>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f7fb fab9 	bl	80004d8 <__aeabi_dmul>
 8004f66:	a368      	add	r3, pc, #416	@ (adr r3, 8005108 <_dtoa_r+0x2b8>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f7fb f8fe 	bl	800016c <__adddf3>
 8004f70:	4604      	mov	r4, r0
 8004f72:	4630      	mov	r0, r6
 8004f74:	460d      	mov	r5, r1
 8004f76:	f7fb fa45 	bl	8000404 <__aeabi_i2d>
 8004f7a:	a365      	add	r3, pc, #404	@ (adr r3, 8005110 <_dtoa_r+0x2c0>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f7fb faaa 	bl	80004d8 <__aeabi_dmul>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4620      	mov	r0, r4
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7fb f8ee 	bl	800016c <__adddf3>
 8004f90:	4604      	mov	r4, r0
 8004f92:	460d      	mov	r5, r1
 8004f94:	f7fb fd50 	bl	8000a38 <__aeabi_d2iz>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4607      	mov	r7, r0
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f7fb fd0b 	bl	80009bc <__aeabi_dcmplt>
 8004fa6:	b140      	cbz	r0, 8004fba <_dtoa_r+0x16a>
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f7fb fa2b 	bl	8000404 <__aeabi_i2d>
 8004fae:	4622      	mov	r2, r4
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	f7fb fcf9 	bl	80009a8 <__aeabi_dcmpeq>
 8004fb6:	b900      	cbnz	r0, 8004fba <_dtoa_r+0x16a>
 8004fb8:	3f01      	subs	r7, #1
 8004fba:	2f16      	cmp	r7, #22
 8004fbc:	d853      	bhi.n	8005066 <_dtoa_r+0x216>
 8004fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005134 <_dtoa_r+0x2e4>)
 8004fc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fcf6 	bl	80009bc <__aeabi_dcmplt>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d04a      	beq.n	800506a <_dtoa_r+0x21a>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	3f01      	subs	r7, #1
 8004fd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004fda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fdc:	1b9b      	subs	r3, r3, r6
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	bf46      	itte	mi
 8004fe2:	f1c3 0801 	rsbmi	r8, r3, #1
 8004fe6:	2300      	movmi	r3, #0
 8004fe8:	f04f 0800 	movpl.w	r8, #0
 8004fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fee:	bf48      	it	mi
 8004ff0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004ff2:	2f00      	cmp	r7, #0
 8004ff4:	db3b      	blt.n	800506e <_dtoa_r+0x21e>
 8004ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff8:	970e      	str	r7, [sp, #56]	@ 0x38
 8004ffa:	443b      	add	r3, r7
 8004ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ffe:	2300      	movs	r3, #0
 8005000:	930a      	str	r3, [sp, #40]	@ 0x28
 8005002:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005004:	2b09      	cmp	r3, #9
 8005006:	d866      	bhi.n	80050d6 <_dtoa_r+0x286>
 8005008:	2b05      	cmp	r3, #5
 800500a:	bfc4      	itt	gt
 800500c:	3b04      	subgt	r3, #4
 800500e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005010:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005012:	bfc8      	it	gt
 8005014:	2400      	movgt	r4, #0
 8005016:	f1a3 0302 	sub.w	r3, r3, #2
 800501a:	bfd8      	it	le
 800501c:	2401      	movle	r4, #1
 800501e:	2b03      	cmp	r3, #3
 8005020:	d864      	bhi.n	80050ec <_dtoa_r+0x29c>
 8005022:	e8df f003 	tbb	[pc, r3]
 8005026:	382b      	.short	0x382b
 8005028:	5636      	.short	0x5636
 800502a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800502e:	441e      	add	r6, r3
 8005030:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005034:	2b20      	cmp	r3, #32
 8005036:	bfc1      	itttt	gt
 8005038:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800503c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005040:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005044:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005048:	bfd6      	itet	le
 800504a:	f1c3 0320 	rsble	r3, r3, #32
 800504e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005052:	fa04 f003 	lslle.w	r0, r4, r3
 8005056:	f7fb f9c5 	bl	80003e4 <__aeabi_ui2d>
 800505a:	2201      	movs	r2, #1
 800505c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005060:	3e01      	subs	r6, #1
 8005062:	9212      	str	r2, [sp, #72]	@ 0x48
 8005064:	e775      	b.n	8004f52 <_dtoa_r+0x102>
 8005066:	2301      	movs	r3, #1
 8005068:	e7b6      	b.n	8004fd8 <_dtoa_r+0x188>
 800506a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800506c:	e7b5      	b.n	8004fda <_dtoa_r+0x18a>
 800506e:	427b      	negs	r3, r7
 8005070:	930a      	str	r3, [sp, #40]	@ 0x28
 8005072:	2300      	movs	r3, #0
 8005074:	eba8 0807 	sub.w	r8, r8, r7
 8005078:	930e      	str	r3, [sp, #56]	@ 0x38
 800507a:	e7c2      	b.n	8005002 <_dtoa_r+0x1b2>
 800507c:	2300      	movs	r3, #0
 800507e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005080:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005082:	2b00      	cmp	r3, #0
 8005084:	dc35      	bgt.n	80050f2 <_dtoa_r+0x2a2>
 8005086:	2301      	movs	r3, #1
 8005088:	461a      	mov	r2, r3
 800508a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800508e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005090:	e00b      	b.n	80050aa <_dtoa_r+0x25a>
 8005092:	2301      	movs	r3, #1
 8005094:	e7f3      	b.n	800507e <_dtoa_r+0x22e>
 8005096:	2300      	movs	r3, #0
 8005098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800509a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	9308      	str	r3, [sp, #32]
 80050a0:	3301      	adds	r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	9307      	str	r3, [sp, #28]
 80050a6:	bfb8      	it	lt
 80050a8:	2301      	movlt	r3, #1
 80050aa:	2100      	movs	r1, #0
 80050ac:	2204      	movs	r2, #4
 80050ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 80050b2:	f102 0514 	add.w	r5, r2, #20
 80050b6:	429d      	cmp	r5, r3
 80050b8:	d91f      	bls.n	80050fa <_dtoa_r+0x2aa>
 80050ba:	6041      	str	r1, [r0, #4]
 80050bc:	4658      	mov	r0, fp
 80050be:	f000 fd8d 	bl	8005bdc <_Balloc>
 80050c2:	4682      	mov	sl, r0
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d139      	bne.n	800513c <_dtoa_r+0x2ec>
 80050c8:	4602      	mov	r2, r0
 80050ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80050ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005138 <_dtoa_r+0x2e8>)
 80050d0:	e6d2      	b.n	8004e78 <_dtoa_r+0x28>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e7e0      	b.n	8005098 <_dtoa_r+0x248>
 80050d6:	2401      	movs	r4, #1
 80050d8:	2300      	movs	r3, #0
 80050da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80050dc:	9320      	str	r3, [sp, #128]	@ 0x80
 80050de:	f04f 33ff 	mov.w	r3, #4294967295
 80050e2:	2200      	movs	r2, #0
 80050e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050e8:	2312      	movs	r3, #18
 80050ea:	e7d0      	b.n	800508e <_dtoa_r+0x23e>
 80050ec:	2301      	movs	r3, #1
 80050ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050f0:	e7f5      	b.n	80050de <_dtoa_r+0x28e>
 80050f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050f8:	e7d7      	b.n	80050aa <_dtoa_r+0x25a>
 80050fa:	3101      	adds	r1, #1
 80050fc:	0052      	lsls	r2, r2, #1
 80050fe:	e7d8      	b.n	80050b2 <_dtoa_r+0x262>
 8005100:	636f4361 	.word	0x636f4361
 8005104:	3fd287a7 	.word	0x3fd287a7
 8005108:	8b60c8b3 	.word	0x8b60c8b3
 800510c:	3fc68a28 	.word	0x3fc68a28
 8005110:	509f79fb 	.word	0x509f79fb
 8005114:	3fd34413 	.word	0x3fd34413
 8005118:	08008738 	.word	0x08008738
 800511c:	0800874f 	.word	0x0800874f
 8005120:	7ff00000 	.word	0x7ff00000
 8005124:	08008734 	.word	0x08008734
 8005128:	08008703 	.word	0x08008703
 800512c:	08008702 	.word	0x08008702
 8005130:	3ff80000 	.word	0x3ff80000
 8005134:	08008848 	.word	0x08008848
 8005138:	080087a7 	.word	0x080087a7
 800513c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005140:	6018      	str	r0, [r3, #0]
 8005142:	9b07      	ldr	r3, [sp, #28]
 8005144:	2b0e      	cmp	r3, #14
 8005146:	f200 80a4 	bhi.w	8005292 <_dtoa_r+0x442>
 800514a:	2c00      	cmp	r4, #0
 800514c:	f000 80a1 	beq.w	8005292 <_dtoa_r+0x442>
 8005150:	2f00      	cmp	r7, #0
 8005152:	dd33      	ble.n	80051bc <_dtoa_r+0x36c>
 8005154:	4b86      	ldr	r3, [pc, #536]	@ (8005370 <_dtoa_r+0x520>)
 8005156:	f007 020f 	and.w	r2, r7, #15
 800515a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800515e:	05f8      	lsls	r0, r7, #23
 8005160:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005164:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005168:	ea4f 1427 	mov.w	r4, r7, asr #4
 800516c:	d516      	bpl.n	800519c <_dtoa_r+0x34c>
 800516e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005172:	4b80      	ldr	r3, [pc, #512]	@ (8005374 <_dtoa_r+0x524>)
 8005174:	2603      	movs	r6, #3
 8005176:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800517a:	f7fb fad7 	bl	800072c <__aeabi_ddiv>
 800517e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005182:	f004 040f 	and.w	r4, r4, #15
 8005186:	4d7b      	ldr	r5, [pc, #492]	@ (8005374 <_dtoa_r+0x524>)
 8005188:	b954      	cbnz	r4, 80051a0 <_dtoa_r+0x350>
 800518a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800518e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005192:	f7fb facb 	bl	800072c <__aeabi_ddiv>
 8005196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800519a:	e028      	b.n	80051ee <_dtoa_r+0x39e>
 800519c:	2602      	movs	r6, #2
 800519e:	e7f2      	b.n	8005186 <_dtoa_r+0x336>
 80051a0:	07e1      	lsls	r1, r4, #31
 80051a2:	d508      	bpl.n	80051b6 <_dtoa_r+0x366>
 80051a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051ac:	f7fb f994 	bl	80004d8 <__aeabi_dmul>
 80051b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051b4:	3601      	adds	r6, #1
 80051b6:	1064      	asrs	r4, r4, #1
 80051b8:	3508      	adds	r5, #8
 80051ba:	e7e5      	b.n	8005188 <_dtoa_r+0x338>
 80051bc:	f000 80d2 	beq.w	8005364 <_dtoa_r+0x514>
 80051c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051c4:	427c      	negs	r4, r7
 80051c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005370 <_dtoa_r+0x520>)
 80051c8:	f004 020f 	and.w	r2, r4, #15
 80051cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fb f980 	bl	80004d8 <__aeabi_dmul>
 80051d8:	2602      	movs	r6, #2
 80051da:	2300      	movs	r3, #0
 80051dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051e0:	4d64      	ldr	r5, [pc, #400]	@ (8005374 <_dtoa_r+0x524>)
 80051e2:	1124      	asrs	r4, r4, #4
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	f040 80b2 	bne.w	800534e <_dtoa_r+0x4fe>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1d3      	bne.n	8005196 <_dtoa_r+0x346>
 80051ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80b7 	beq.w	8005368 <_dtoa_r+0x518>
 80051fa:	2200      	movs	r2, #0
 80051fc:	4620      	mov	r0, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	4b5d      	ldr	r3, [pc, #372]	@ (8005378 <_dtoa_r+0x528>)
 8005202:	f7fb fbdb 	bl	80009bc <__aeabi_dcmplt>
 8005206:	2800      	cmp	r0, #0
 8005208:	f000 80ae 	beq.w	8005368 <_dtoa_r+0x518>
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80aa 	beq.w	8005368 <_dtoa_r+0x518>
 8005214:	9b08      	ldr	r3, [sp, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	dd37      	ble.n	800528a <_dtoa_r+0x43a>
 800521a:	1e7b      	subs	r3, r7, #1
 800521c:	4620      	mov	r0, r4
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	2200      	movs	r2, #0
 8005222:	4629      	mov	r1, r5
 8005224:	4b55      	ldr	r3, [pc, #340]	@ (800537c <_dtoa_r+0x52c>)
 8005226:	f7fb f957 	bl	80004d8 <__aeabi_dmul>
 800522a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800522e:	9c08      	ldr	r4, [sp, #32]
 8005230:	3601      	adds	r6, #1
 8005232:	4630      	mov	r0, r6
 8005234:	f7fb f8e6 	bl	8000404 <__aeabi_i2d>
 8005238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800523c:	f7fb f94c 	bl	80004d8 <__aeabi_dmul>
 8005240:	2200      	movs	r2, #0
 8005242:	4b4f      	ldr	r3, [pc, #316]	@ (8005380 <_dtoa_r+0x530>)
 8005244:	f7fa ff92 	bl	800016c <__adddf3>
 8005248:	4605      	mov	r5, r0
 800524a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800524e:	2c00      	cmp	r4, #0
 8005250:	f040 809a 	bne.w	8005388 <_dtoa_r+0x538>
 8005254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005258:	2200      	movs	r2, #0
 800525a:	4b4a      	ldr	r3, [pc, #296]	@ (8005384 <_dtoa_r+0x534>)
 800525c:	f7fa ff84 	bl	8000168 <__aeabi_dsub>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005268:	462a      	mov	r2, r5
 800526a:	4633      	mov	r3, r6
 800526c:	f7fb fbc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005270:	2800      	cmp	r0, #0
 8005272:	f040 828e 	bne.w	8005792 <_dtoa_r+0x942>
 8005276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800527a:	462a      	mov	r2, r5
 800527c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005280:	f7fb fb9c 	bl	80009bc <__aeabi_dcmplt>
 8005284:	2800      	cmp	r0, #0
 8005286:	f040 8127 	bne.w	80054d8 <_dtoa_r+0x688>
 800528a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800528e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005292:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005294:	2b00      	cmp	r3, #0
 8005296:	f2c0 8163 	blt.w	8005560 <_dtoa_r+0x710>
 800529a:	2f0e      	cmp	r7, #14
 800529c:	f300 8160 	bgt.w	8005560 <_dtoa_r+0x710>
 80052a0:	4b33      	ldr	r3, [pc, #204]	@ (8005370 <_dtoa_r+0x520>)
 80052a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da03      	bge.n	80052bc <_dtoa_r+0x46c>
 80052b4:	9b07      	ldr	r3, [sp, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f340 8100 	ble.w	80054bc <_dtoa_r+0x66c>
 80052bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80052c0:	4656      	mov	r6, sl
 80052c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c6:	4620      	mov	r0, r4
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7fb fa2f 	bl	800072c <__aeabi_ddiv>
 80052ce:	f7fb fbb3 	bl	8000a38 <__aeabi_d2iz>
 80052d2:	4680      	mov	r8, r0
 80052d4:	f7fb f896 	bl	8000404 <__aeabi_i2d>
 80052d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052dc:	f7fb f8fc 	bl	80004d8 <__aeabi_dmul>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4620      	mov	r0, r4
 80052e6:	4629      	mov	r1, r5
 80052e8:	f7fa ff3e 	bl	8000168 <__aeabi_dsub>
 80052ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80052f0:	9d07      	ldr	r5, [sp, #28]
 80052f2:	f806 4b01 	strb.w	r4, [r6], #1
 80052f6:	eba6 040a 	sub.w	r4, r6, sl
 80052fa:	42a5      	cmp	r5, r4
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	f040 8116 	bne.w	8005530 <_dtoa_r+0x6e0>
 8005304:	f7fa ff32 	bl	800016c <__adddf3>
 8005308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800530c:	4604      	mov	r4, r0
 800530e:	460d      	mov	r5, r1
 8005310:	f7fb fb72 	bl	80009f8 <__aeabi_dcmpgt>
 8005314:	2800      	cmp	r0, #0
 8005316:	f040 80f8 	bne.w	800550a <_dtoa_r+0x6ba>
 800531a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800531e:	4620      	mov	r0, r4
 8005320:	4629      	mov	r1, r5
 8005322:	f7fb fb41 	bl	80009a8 <__aeabi_dcmpeq>
 8005326:	b118      	cbz	r0, 8005330 <_dtoa_r+0x4e0>
 8005328:	f018 0f01 	tst.w	r8, #1
 800532c:	f040 80ed 	bne.w	800550a <_dtoa_r+0x6ba>
 8005330:	4649      	mov	r1, r9
 8005332:	4658      	mov	r0, fp
 8005334:	f000 fc92 	bl	8005c5c <_Bfree>
 8005338:	2300      	movs	r3, #0
 800533a:	7033      	strb	r3, [r6, #0]
 800533c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800533e:	3701      	adds	r7, #1
 8005340:	601f      	str	r7, [r3, #0]
 8005342:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8320 	beq.w	800598a <_dtoa_r+0xb3a>
 800534a:	601e      	str	r6, [r3, #0]
 800534c:	e31d      	b.n	800598a <_dtoa_r+0xb3a>
 800534e:	07e2      	lsls	r2, r4, #31
 8005350:	d505      	bpl.n	800535e <_dtoa_r+0x50e>
 8005352:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005356:	f7fb f8bf 	bl	80004d8 <__aeabi_dmul>
 800535a:	2301      	movs	r3, #1
 800535c:	3601      	adds	r6, #1
 800535e:	1064      	asrs	r4, r4, #1
 8005360:	3508      	adds	r5, #8
 8005362:	e73f      	b.n	80051e4 <_dtoa_r+0x394>
 8005364:	2602      	movs	r6, #2
 8005366:	e742      	b.n	80051ee <_dtoa_r+0x39e>
 8005368:	9c07      	ldr	r4, [sp, #28]
 800536a:	9704      	str	r7, [sp, #16]
 800536c:	e761      	b.n	8005232 <_dtoa_r+0x3e2>
 800536e:	bf00      	nop
 8005370:	08008848 	.word	0x08008848
 8005374:	08008820 	.word	0x08008820
 8005378:	3ff00000 	.word	0x3ff00000
 800537c:	40240000 	.word	0x40240000
 8005380:	401c0000 	.word	0x401c0000
 8005384:	40140000 	.word	0x40140000
 8005388:	4b70      	ldr	r3, [pc, #448]	@ (800554c <_dtoa_r+0x6fc>)
 800538a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800538c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005394:	4454      	add	r4, sl
 8005396:	2900      	cmp	r1, #0
 8005398:	d045      	beq.n	8005426 <_dtoa_r+0x5d6>
 800539a:	2000      	movs	r0, #0
 800539c:	496c      	ldr	r1, [pc, #432]	@ (8005550 <_dtoa_r+0x700>)
 800539e:	f7fb f9c5 	bl	800072c <__aeabi_ddiv>
 80053a2:	4633      	mov	r3, r6
 80053a4:	462a      	mov	r2, r5
 80053a6:	f7fa fedf 	bl	8000168 <__aeabi_dsub>
 80053aa:	4656      	mov	r6, sl
 80053ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053b4:	f7fb fb40 	bl	8000a38 <__aeabi_d2iz>
 80053b8:	4605      	mov	r5, r0
 80053ba:	f7fb f823 	bl	8000404 <__aeabi_i2d>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c6:	f7fa fecf 	bl	8000168 <__aeabi_dsub>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	3530      	adds	r5, #48	@ 0x30
 80053d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053d8:	f806 5b01 	strb.w	r5, [r6], #1
 80053dc:	f7fb faee 	bl	80009bc <__aeabi_dcmplt>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d163      	bne.n	80054ac <_dtoa_r+0x65c>
 80053e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053e8:	2000      	movs	r0, #0
 80053ea:	495a      	ldr	r1, [pc, #360]	@ (8005554 <_dtoa_r+0x704>)
 80053ec:	f7fa febc 	bl	8000168 <__aeabi_dsub>
 80053f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053f4:	f7fb fae2 	bl	80009bc <__aeabi_dcmplt>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f040 8087 	bne.w	800550c <_dtoa_r+0x6bc>
 80053fe:	42a6      	cmp	r6, r4
 8005400:	f43f af43 	beq.w	800528a <_dtoa_r+0x43a>
 8005404:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005408:	2200      	movs	r2, #0
 800540a:	4b53      	ldr	r3, [pc, #332]	@ (8005558 <_dtoa_r+0x708>)
 800540c:	f7fb f864 	bl	80004d8 <__aeabi_dmul>
 8005410:	2200      	movs	r2, #0
 8005412:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800541a:	4b4f      	ldr	r3, [pc, #316]	@ (8005558 <_dtoa_r+0x708>)
 800541c:	f7fb f85c 	bl	80004d8 <__aeabi_dmul>
 8005420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005424:	e7c4      	b.n	80053b0 <_dtoa_r+0x560>
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	f7fb f855 	bl	80004d8 <__aeabi_dmul>
 800542e:	4656      	mov	r6, sl
 8005430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005434:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800543a:	f7fb fafd 	bl	8000a38 <__aeabi_d2iz>
 800543e:	4605      	mov	r5, r0
 8005440:	f7fa ffe0 	bl	8000404 <__aeabi_i2d>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800544c:	f7fa fe8c 	bl	8000168 <__aeabi_dsub>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	3530      	adds	r5, #48	@ 0x30
 8005456:	f806 5b01 	strb.w	r5, [r6], #1
 800545a:	42a6      	cmp	r6, r4
 800545c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	d124      	bne.n	80054b0 <_dtoa_r+0x660>
 8005466:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800546a:	4b39      	ldr	r3, [pc, #228]	@ (8005550 <_dtoa_r+0x700>)
 800546c:	f7fa fe7e 	bl	800016c <__adddf3>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005478:	f7fb fabe 	bl	80009f8 <__aeabi_dcmpgt>
 800547c:	2800      	cmp	r0, #0
 800547e:	d145      	bne.n	800550c <_dtoa_r+0x6bc>
 8005480:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005484:	2000      	movs	r0, #0
 8005486:	4932      	ldr	r1, [pc, #200]	@ (8005550 <_dtoa_r+0x700>)
 8005488:	f7fa fe6e 	bl	8000168 <__aeabi_dsub>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005494:	f7fb fa92 	bl	80009bc <__aeabi_dcmplt>
 8005498:	2800      	cmp	r0, #0
 800549a:	f43f aef6 	beq.w	800528a <_dtoa_r+0x43a>
 800549e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80054a0:	1e73      	subs	r3, r6, #1
 80054a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054a8:	2b30      	cmp	r3, #48	@ 0x30
 80054aa:	d0f8      	beq.n	800549e <_dtoa_r+0x64e>
 80054ac:	9f04      	ldr	r7, [sp, #16]
 80054ae:	e73f      	b.n	8005330 <_dtoa_r+0x4e0>
 80054b0:	4b29      	ldr	r3, [pc, #164]	@ (8005558 <_dtoa_r+0x708>)
 80054b2:	f7fb f811 	bl	80004d8 <__aeabi_dmul>
 80054b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054ba:	e7bc      	b.n	8005436 <_dtoa_r+0x5e6>
 80054bc:	d10c      	bne.n	80054d8 <_dtoa_r+0x688>
 80054be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054c2:	2200      	movs	r2, #0
 80054c4:	4b25      	ldr	r3, [pc, #148]	@ (800555c <_dtoa_r+0x70c>)
 80054c6:	f7fb f807 	bl	80004d8 <__aeabi_dmul>
 80054ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054ce:	f7fb fa89 	bl	80009e4 <__aeabi_dcmpge>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f000 815b 	beq.w	800578e <_dtoa_r+0x93e>
 80054d8:	2400      	movs	r4, #0
 80054da:	4625      	mov	r5, r4
 80054dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054de:	4656      	mov	r6, sl
 80054e0:	43db      	mvns	r3, r3
 80054e2:	9304      	str	r3, [sp, #16]
 80054e4:	2700      	movs	r7, #0
 80054e6:	4621      	mov	r1, r4
 80054e8:	4658      	mov	r0, fp
 80054ea:	f000 fbb7 	bl	8005c5c <_Bfree>
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	d0dc      	beq.n	80054ac <_dtoa_r+0x65c>
 80054f2:	b12f      	cbz	r7, 8005500 <_dtoa_r+0x6b0>
 80054f4:	42af      	cmp	r7, r5
 80054f6:	d003      	beq.n	8005500 <_dtoa_r+0x6b0>
 80054f8:	4639      	mov	r1, r7
 80054fa:	4658      	mov	r0, fp
 80054fc:	f000 fbae 	bl	8005c5c <_Bfree>
 8005500:	4629      	mov	r1, r5
 8005502:	4658      	mov	r0, fp
 8005504:	f000 fbaa 	bl	8005c5c <_Bfree>
 8005508:	e7d0      	b.n	80054ac <_dtoa_r+0x65c>
 800550a:	9704      	str	r7, [sp, #16]
 800550c:	4633      	mov	r3, r6
 800550e:	461e      	mov	r6, r3
 8005510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005514:	2a39      	cmp	r2, #57	@ 0x39
 8005516:	d107      	bne.n	8005528 <_dtoa_r+0x6d8>
 8005518:	459a      	cmp	sl, r3
 800551a:	d1f8      	bne.n	800550e <_dtoa_r+0x6be>
 800551c:	9a04      	ldr	r2, [sp, #16]
 800551e:	3201      	adds	r2, #1
 8005520:	9204      	str	r2, [sp, #16]
 8005522:	2230      	movs	r2, #48	@ 0x30
 8005524:	f88a 2000 	strb.w	r2, [sl]
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	3201      	adds	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e7bd      	b.n	80054ac <_dtoa_r+0x65c>
 8005530:	2200      	movs	r2, #0
 8005532:	4b09      	ldr	r3, [pc, #36]	@ (8005558 <_dtoa_r+0x708>)
 8005534:	f7fa ffd0 	bl	80004d8 <__aeabi_dmul>
 8005538:	2200      	movs	r2, #0
 800553a:	2300      	movs	r3, #0
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	f7fb fa32 	bl	80009a8 <__aeabi_dcmpeq>
 8005544:	2800      	cmp	r0, #0
 8005546:	f43f aebc 	beq.w	80052c2 <_dtoa_r+0x472>
 800554a:	e6f1      	b.n	8005330 <_dtoa_r+0x4e0>
 800554c:	08008848 	.word	0x08008848
 8005550:	3fe00000 	.word	0x3fe00000
 8005554:	3ff00000 	.word	0x3ff00000
 8005558:	40240000 	.word	0x40240000
 800555c:	40140000 	.word	0x40140000
 8005560:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005562:	2a00      	cmp	r2, #0
 8005564:	f000 80db 	beq.w	800571e <_dtoa_r+0x8ce>
 8005568:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800556a:	2a01      	cmp	r2, #1
 800556c:	f300 80bf 	bgt.w	80056ee <_dtoa_r+0x89e>
 8005570:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005572:	2a00      	cmp	r2, #0
 8005574:	f000 80b7 	beq.w	80056e6 <_dtoa_r+0x896>
 8005578:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800557c:	4646      	mov	r6, r8
 800557e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005582:	2101      	movs	r1, #1
 8005584:	441a      	add	r2, r3
 8005586:	4658      	mov	r0, fp
 8005588:	4498      	add	r8, r3
 800558a:	9209      	str	r2, [sp, #36]	@ 0x24
 800558c:	f000 fc64 	bl	8005e58 <__i2b>
 8005590:	4605      	mov	r5, r0
 8005592:	b15e      	cbz	r6, 80055ac <_dtoa_r+0x75c>
 8005594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	dd08      	ble.n	80055ac <_dtoa_r+0x75c>
 800559a:	42b3      	cmp	r3, r6
 800559c:	bfa8      	it	ge
 800559e:	4633      	movge	r3, r6
 80055a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055a2:	eba8 0803 	sub.w	r8, r8, r3
 80055a6:	1af6      	subs	r6, r6, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ae:	b1f3      	cbz	r3, 80055ee <_dtoa_r+0x79e>
 80055b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80b7 	beq.w	8005726 <_dtoa_r+0x8d6>
 80055b8:	b18c      	cbz	r4, 80055de <_dtoa_r+0x78e>
 80055ba:	4629      	mov	r1, r5
 80055bc:	4622      	mov	r2, r4
 80055be:	4658      	mov	r0, fp
 80055c0:	f000 fd08 	bl	8005fd4 <__pow5mult>
 80055c4:	464a      	mov	r2, r9
 80055c6:	4601      	mov	r1, r0
 80055c8:	4605      	mov	r5, r0
 80055ca:	4658      	mov	r0, fp
 80055cc:	f000 fc5a 	bl	8005e84 <__multiply>
 80055d0:	4649      	mov	r1, r9
 80055d2:	9004      	str	r0, [sp, #16]
 80055d4:	4658      	mov	r0, fp
 80055d6:	f000 fb41 	bl	8005c5c <_Bfree>
 80055da:	9b04      	ldr	r3, [sp, #16]
 80055dc:	4699      	mov	r9, r3
 80055de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055e0:	1b1a      	subs	r2, r3, r4
 80055e2:	d004      	beq.n	80055ee <_dtoa_r+0x79e>
 80055e4:	4649      	mov	r1, r9
 80055e6:	4658      	mov	r0, fp
 80055e8:	f000 fcf4 	bl	8005fd4 <__pow5mult>
 80055ec:	4681      	mov	r9, r0
 80055ee:	2101      	movs	r1, #1
 80055f0:	4658      	mov	r0, fp
 80055f2:	f000 fc31 	bl	8005e58 <__i2b>
 80055f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055f8:	4604      	mov	r4, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 81c9 	beq.w	8005992 <_dtoa_r+0xb42>
 8005600:	461a      	mov	r2, r3
 8005602:	4601      	mov	r1, r0
 8005604:	4658      	mov	r0, fp
 8005606:	f000 fce5 	bl	8005fd4 <__pow5mult>
 800560a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800560c:	4604      	mov	r4, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	f300 808f 	bgt.w	8005732 <_dtoa_r+0x8e2>
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 8087 	bne.w	800572a <_dtoa_r+0x8da>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 8083 	bne.w	800572e <_dtoa_r+0x8de>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800562e:	0d1b      	lsrs	r3, r3, #20
 8005630:	051b      	lsls	r3, r3, #20
 8005632:	b12b      	cbz	r3, 8005640 <_dtoa_r+0x7f0>
 8005634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005636:	f108 0801 	add.w	r8, r8, #1
 800563a:	3301      	adds	r3, #1
 800563c:	9309      	str	r3, [sp, #36]	@ 0x24
 800563e:	2301      	movs	r3, #1
 8005640:	930a      	str	r3, [sp, #40]	@ 0x28
 8005642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 81aa 	beq.w	800599e <_dtoa_r+0xb4e>
 800564a:	6923      	ldr	r3, [r4, #16]
 800564c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005650:	6918      	ldr	r0, [r3, #16]
 8005652:	f000 fbb5 	bl	8005dc0 <__hi0bits>
 8005656:	f1c0 0020 	rsb	r0, r0, #32
 800565a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565c:	4418      	add	r0, r3
 800565e:	f010 001f 	ands.w	r0, r0, #31
 8005662:	d071      	beq.n	8005748 <_dtoa_r+0x8f8>
 8005664:	f1c0 0320 	rsb	r3, r0, #32
 8005668:	2b04      	cmp	r3, #4
 800566a:	dd65      	ble.n	8005738 <_dtoa_r+0x8e8>
 800566c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800566e:	f1c0 001c 	rsb	r0, r0, #28
 8005672:	4403      	add	r3, r0
 8005674:	4480      	add	r8, r0
 8005676:	4406      	add	r6, r0
 8005678:	9309      	str	r3, [sp, #36]	@ 0x24
 800567a:	f1b8 0f00 	cmp.w	r8, #0
 800567e:	dd05      	ble.n	800568c <_dtoa_r+0x83c>
 8005680:	4649      	mov	r1, r9
 8005682:	4642      	mov	r2, r8
 8005684:	4658      	mov	r0, fp
 8005686:	f000 fcff 	bl	8006088 <__lshift>
 800568a:	4681      	mov	r9, r0
 800568c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	dd05      	ble.n	800569e <_dtoa_r+0x84e>
 8005692:	4621      	mov	r1, r4
 8005694:	461a      	mov	r2, r3
 8005696:	4658      	mov	r0, fp
 8005698:	f000 fcf6 	bl	8006088 <__lshift>
 800569c:	4604      	mov	r4, r0
 800569e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d053      	beq.n	800574c <_dtoa_r+0x8fc>
 80056a4:	4621      	mov	r1, r4
 80056a6:	4648      	mov	r0, r9
 80056a8:	f000 fd5a 	bl	8006160 <__mcmp>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	da4d      	bge.n	800574c <_dtoa_r+0x8fc>
 80056b0:	1e7b      	subs	r3, r7, #1
 80056b2:	4649      	mov	r1, r9
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	220a      	movs	r2, #10
 80056b8:	2300      	movs	r3, #0
 80056ba:	4658      	mov	r0, fp
 80056bc:	f000 faf0 	bl	8005ca0 <__multadd>
 80056c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056c2:	4681      	mov	r9, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 816c 	beq.w	80059a2 <_dtoa_r+0xb52>
 80056ca:	2300      	movs	r3, #0
 80056cc:	4629      	mov	r1, r5
 80056ce:	220a      	movs	r2, #10
 80056d0:	4658      	mov	r0, fp
 80056d2:	f000 fae5 	bl	8005ca0 <__multadd>
 80056d6:	9b08      	ldr	r3, [sp, #32]
 80056d8:	4605      	mov	r5, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dc61      	bgt.n	80057a2 <_dtoa_r+0x952>
 80056de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	dc3b      	bgt.n	800575c <_dtoa_r+0x90c>
 80056e4:	e05d      	b.n	80057a2 <_dtoa_r+0x952>
 80056e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80056ec:	e746      	b.n	800557c <_dtoa_r+0x72c>
 80056ee:	9b07      	ldr	r3, [sp, #28]
 80056f0:	1e5c      	subs	r4, r3, #1
 80056f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	bfbf      	itttt	lt
 80056f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80056fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80056fc:	1ae3      	sublt	r3, r4, r3
 80056fe:	18d2      	addlt	r2, r2, r3
 8005700:	bfa8      	it	ge
 8005702:	1b1c      	subge	r4, r3, r4
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	bfbe      	ittt	lt
 8005708:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800570a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800570c:	2400      	movlt	r4, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	bfb5      	itete	lt
 8005712:	eba8 0603 	sublt.w	r6, r8, r3
 8005716:	4646      	movge	r6, r8
 8005718:	2300      	movlt	r3, #0
 800571a:	9b07      	ldrge	r3, [sp, #28]
 800571c:	e730      	b.n	8005580 <_dtoa_r+0x730>
 800571e:	4646      	mov	r6, r8
 8005720:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005722:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005724:	e735      	b.n	8005592 <_dtoa_r+0x742>
 8005726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005728:	e75c      	b.n	80055e4 <_dtoa_r+0x794>
 800572a:	2300      	movs	r3, #0
 800572c:	e788      	b.n	8005640 <_dtoa_r+0x7f0>
 800572e:	9b02      	ldr	r3, [sp, #8]
 8005730:	e786      	b.n	8005640 <_dtoa_r+0x7f0>
 8005732:	2300      	movs	r3, #0
 8005734:	930a      	str	r3, [sp, #40]	@ 0x28
 8005736:	e788      	b.n	800564a <_dtoa_r+0x7fa>
 8005738:	d09f      	beq.n	800567a <_dtoa_r+0x82a>
 800573a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800573c:	331c      	adds	r3, #28
 800573e:	441a      	add	r2, r3
 8005740:	4498      	add	r8, r3
 8005742:	441e      	add	r6, r3
 8005744:	9209      	str	r2, [sp, #36]	@ 0x24
 8005746:	e798      	b.n	800567a <_dtoa_r+0x82a>
 8005748:	4603      	mov	r3, r0
 800574a:	e7f6      	b.n	800573a <_dtoa_r+0x8ea>
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	9704      	str	r7, [sp, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	dc20      	bgt.n	8005796 <_dtoa_r+0x946>
 8005754:	9308      	str	r3, [sp, #32]
 8005756:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005758:	2b02      	cmp	r3, #2
 800575a:	dd1e      	ble.n	800579a <_dtoa_r+0x94a>
 800575c:	9b08      	ldr	r3, [sp, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f47f aebc 	bne.w	80054dc <_dtoa_r+0x68c>
 8005764:	4621      	mov	r1, r4
 8005766:	2205      	movs	r2, #5
 8005768:	4658      	mov	r0, fp
 800576a:	f000 fa99 	bl	8005ca0 <__multadd>
 800576e:	4601      	mov	r1, r0
 8005770:	4604      	mov	r4, r0
 8005772:	4648      	mov	r0, r9
 8005774:	f000 fcf4 	bl	8006160 <__mcmp>
 8005778:	2800      	cmp	r0, #0
 800577a:	f77f aeaf 	ble.w	80054dc <_dtoa_r+0x68c>
 800577e:	2331      	movs	r3, #49	@ 0x31
 8005780:	4656      	mov	r6, sl
 8005782:	f806 3b01 	strb.w	r3, [r6], #1
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	3301      	adds	r3, #1
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	e6aa      	b.n	80054e4 <_dtoa_r+0x694>
 800578e:	9c07      	ldr	r4, [sp, #28]
 8005790:	9704      	str	r7, [sp, #16]
 8005792:	4625      	mov	r5, r4
 8005794:	e7f3      	b.n	800577e <_dtoa_r+0x92e>
 8005796:	9b07      	ldr	r3, [sp, #28]
 8005798:	9308      	str	r3, [sp, #32]
 800579a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8104 	beq.w	80059aa <_dtoa_r+0xb5a>
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	dd05      	ble.n	80057b2 <_dtoa_r+0x962>
 80057a6:	4629      	mov	r1, r5
 80057a8:	4632      	mov	r2, r6
 80057aa:	4658      	mov	r0, fp
 80057ac:	f000 fc6c 	bl	8006088 <__lshift>
 80057b0:	4605      	mov	r5, r0
 80057b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d05a      	beq.n	800586e <_dtoa_r+0xa1e>
 80057b8:	4658      	mov	r0, fp
 80057ba:	6869      	ldr	r1, [r5, #4]
 80057bc:	f000 fa0e 	bl	8005bdc <_Balloc>
 80057c0:	4606      	mov	r6, r0
 80057c2:	b928      	cbnz	r0, 80057d0 <_dtoa_r+0x980>
 80057c4:	4602      	mov	r2, r0
 80057c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80057ca:	4b83      	ldr	r3, [pc, #524]	@ (80059d8 <_dtoa_r+0xb88>)
 80057cc:	f7ff bb54 	b.w	8004e78 <_dtoa_r+0x28>
 80057d0:	692a      	ldr	r2, [r5, #16]
 80057d2:	f105 010c 	add.w	r1, r5, #12
 80057d6:	3202      	adds	r2, #2
 80057d8:	0092      	lsls	r2, r2, #2
 80057da:	300c      	adds	r0, #12
 80057dc:	f001 ff5e 	bl	800769c <memcpy>
 80057e0:	2201      	movs	r2, #1
 80057e2:	4631      	mov	r1, r6
 80057e4:	4658      	mov	r0, fp
 80057e6:	f000 fc4f 	bl	8006088 <__lshift>
 80057ea:	462f      	mov	r7, r5
 80057ec:	4605      	mov	r5, r0
 80057ee:	f10a 0301 	add.w	r3, sl, #1
 80057f2:	9307      	str	r3, [sp, #28]
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	4453      	add	r3, sl
 80057f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057fa:	9b02      	ldr	r3, [sp, #8]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	930a      	str	r3, [sp, #40]	@ 0x28
 8005802:	9b07      	ldr	r3, [sp, #28]
 8005804:	4621      	mov	r1, r4
 8005806:	3b01      	subs	r3, #1
 8005808:	4648      	mov	r0, r9
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	f7ff fa96 	bl	8004d3c <quorem>
 8005810:	4639      	mov	r1, r7
 8005812:	9008      	str	r0, [sp, #32]
 8005814:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005818:	4648      	mov	r0, r9
 800581a:	f000 fca1 	bl	8006160 <__mcmp>
 800581e:	462a      	mov	r2, r5
 8005820:	9009      	str	r0, [sp, #36]	@ 0x24
 8005822:	4621      	mov	r1, r4
 8005824:	4658      	mov	r0, fp
 8005826:	f000 fcb7 	bl	8006198 <__mdiff>
 800582a:	68c2      	ldr	r2, [r0, #12]
 800582c:	4606      	mov	r6, r0
 800582e:	bb02      	cbnz	r2, 8005872 <_dtoa_r+0xa22>
 8005830:	4601      	mov	r1, r0
 8005832:	4648      	mov	r0, r9
 8005834:	f000 fc94 	bl	8006160 <__mcmp>
 8005838:	4602      	mov	r2, r0
 800583a:	4631      	mov	r1, r6
 800583c:	4658      	mov	r0, fp
 800583e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005840:	f000 fa0c 	bl	8005c5c <_Bfree>
 8005844:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005846:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005848:	9e07      	ldr	r6, [sp, #28]
 800584a:	ea43 0102 	orr.w	r1, r3, r2
 800584e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005850:	4319      	orrs	r1, r3
 8005852:	d110      	bne.n	8005876 <_dtoa_r+0xa26>
 8005854:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005858:	d029      	beq.n	80058ae <_dtoa_r+0xa5e>
 800585a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd02      	ble.n	8005866 <_dtoa_r+0xa16>
 8005860:	9b08      	ldr	r3, [sp, #32]
 8005862:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005866:	9b02      	ldr	r3, [sp, #8]
 8005868:	f883 8000 	strb.w	r8, [r3]
 800586c:	e63b      	b.n	80054e6 <_dtoa_r+0x696>
 800586e:	4628      	mov	r0, r5
 8005870:	e7bb      	b.n	80057ea <_dtoa_r+0x99a>
 8005872:	2201      	movs	r2, #1
 8005874:	e7e1      	b.n	800583a <_dtoa_r+0x9ea>
 8005876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	db04      	blt.n	8005886 <_dtoa_r+0xa36>
 800587c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800587e:	430b      	orrs	r3, r1
 8005880:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005882:	430b      	orrs	r3, r1
 8005884:	d120      	bne.n	80058c8 <_dtoa_r+0xa78>
 8005886:	2a00      	cmp	r2, #0
 8005888:	dded      	ble.n	8005866 <_dtoa_r+0xa16>
 800588a:	4649      	mov	r1, r9
 800588c:	2201      	movs	r2, #1
 800588e:	4658      	mov	r0, fp
 8005890:	f000 fbfa 	bl	8006088 <__lshift>
 8005894:	4621      	mov	r1, r4
 8005896:	4681      	mov	r9, r0
 8005898:	f000 fc62 	bl	8006160 <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	dc03      	bgt.n	80058a8 <_dtoa_r+0xa58>
 80058a0:	d1e1      	bne.n	8005866 <_dtoa_r+0xa16>
 80058a2:	f018 0f01 	tst.w	r8, #1
 80058a6:	d0de      	beq.n	8005866 <_dtoa_r+0xa16>
 80058a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058ac:	d1d8      	bne.n	8005860 <_dtoa_r+0xa10>
 80058ae:	2339      	movs	r3, #57	@ 0x39
 80058b0:	9a02      	ldr	r2, [sp, #8]
 80058b2:	7013      	strb	r3, [r2, #0]
 80058b4:	4633      	mov	r3, r6
 80058b6:	461e      	mov	r6, r3
 80058b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80058bc:	3b01      	subs	r3, #1
 80058be:	2a39      	cmp	r2, #57	@ 0x39
 80058c0:	d052      	beq.n	8005968 <_dtoa_r+0xb18>
 80058c2:	3201      	adds	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e60e      	b.n	80054e6 <_dtoa_r+0x696>
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	dd07      	ble.n	80058dc <_dtoa_r+0xa8c>
 80058cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058d0:	d0ed      	beq.n	80058ae <_dtoa_r+0xa5e>
 80058d2:	9a02      	ldr	r2, [sp, #8]
 80058d4:	f108 0301 	add.w	r3, r8, #1
 80058d8:	7013      	strb	r3, [r2, #0]
 80058da:	e604      	b.n	80054e6 <_dtoa_r+0x696>
 80058dc:	9b07      	ldr	r3, [sp, #28]
 80058de:	9a07      	ldr	r2, [sp, #28]
 80058e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80058e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d028      	beq.n	800593c <_dtoa_r+0xaec>
 80058ea:	4649      	mov	r1, r9
 80058ec:	2300      	movs	r3, #0
 80058ee:	220a      	movs	r2, #10
 80058f0:	4658      	mov	r0, fp
 80058f2:	f000 f9d5 	bl	8005ca0 <__multadd>
 80058f6:	42af      	cmp	r7, r5
 80058f8:	4681      	mov	r9, r0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	f04f 020a 	mov.w	r2, #10
 8005902:	4639      	mov	r1, r7
 8005904:	4658      	mov	r0, fp
 8005906:	d107      	bne.n	8005918 <_dtoa_r+0xac8>
 8005908:	f000 f9ca 	bl	8005ca0 <__multadd>
 800590c:	4607      	mov	r7, r0
 800590e:	4605      	mov	r5, r0
 8005910:	9b07      	ldr	r3, [sp, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	e774      	b.n	8005802 <_dtoa_r+0x9b2>
 8005918:	f000 f9c2 	bl	8005ca0 <__multadd>
 800591c:	4629      	mov	r1, r5
 800591e:	4607      	mov	r7, r0
 8005920:	2300      	movs	r3, #0
 8005922:	220a      	movs	r2, #10
 8005924:	4658      	mov	r0, fp
 8005926:	f000 f9bb 	bl	8005ca0 <__multadd>
 800592a:	4605      	mov	r5, r0
 800592c:	e7f0      	b.n	8005910 <_dtoa_r+0xac0>
 800592e:	9b08      	ldr	r3, [sp, #32]
 8005930:	2700      	movs	r7, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	bfcc      	ite	gt
 8005936:	461e      	movgt	r6, r3
 8005938:	2601      	movle	r6, #1
 800593a:	4456      	add	r6, sl
 800593c:	4649      	mov	r1, r9
 800593e:	2201      	movs	r2, #1
 8005940:	4658      	mov	r0, fp
 8005942:	f000 fba1 	bl	8006088 <__lshift>
 8005946:	4621      	mov	r1, r4
 8005948:	4681      	mov	r9, r0
 800594a:	f000 fc09 	bl	8006160 <__mcmp>
 800594e:	2800      	cmp	r0, #0
 8005950:	dcb0      	bgt.n	80058b4 <_dtoa_r+0xa64>
 8005952:	d102      	bne.n	800595a <_dtoa_r+0xb0a>
 8005954:	f018 0f01 	tst.w	r8, #1
 8005958:	d1ac      	bne.n	80058b4 <_dtoa_r+0xa64>
 800595a:	4633      	mov	r3, r6
 800595c:	461e      	mov	r6, r3
 800595e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005962:	2a30      	cmp	r2, #48	@ 0x30
 8005964:	d0fa      	beq.n	800595c <_dtoa_r+0xb0c>
 8005966:	e5be      	b.n	80054e6 <_dtoa_r+0x696>
 8005968:	459a      	cmp	sl, r3
 800596a:	d1a4      	bne.n	80058b6 <_dtoa_r+0xa66>
 800596c:	9b04      	ldr	r3, [sp, #16]
 800596e:	3301      	adds	r3, #1
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	2331      	movs	r3, #49	@ 0x31
 8005974:	f88a 3000 	strb.w	r3, [sl]
 8005978:	e5b5      	b.n	80054e6 <_dtoa_r+0x696>
 800597a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800597c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80059dc <_dtoa_r+0xb8c>
 8005980:	b11b      	cbz	r3, 800598a <_dtoa_r+0xb3a>
 8005982:	f10a 0308 	add.w	r3, sl, #8
 8005986:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	4650      	mov	r0, sl
 800598c:	b017      	add	sp, #92	@ 0x5c
 800598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005992:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005994:	2b01      	cmp	r3, #1
 8005996:	f77f ae3d 	ble.w	8005614 <_dtoa_r+0x7c4>
 800599a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800599c:	930a      	str	r3, [sp, #40]	@ 0x28
 800599e:	2001      	movs	r0, #1
 80059a0:	e65b      	b.n	800565a <_dtoa_r+0x80a>
 80059a2:	9b08      	ldr	r3, [sp, #32]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f77f aed6 	ble.w	8005756 <_dtoa_r+0x906>
 80059aa:	4656      	mov	r6, sl
 80059ac:	4621      	mov	r1, r4
 80059ae:	4648      	mov	r0, r9
 80059b0:	f7ff f9c4 	bl	8004d3c <quorem>
 80059b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059b8:	9b08      	ldr	r3, [sp, #32]
 80059ba:	f806 8b01 	strb.w	r8, [r6], #1
 80059be:	eba6 020a 	sub.w	r2, r6, sl
 80059c2:	4293      	cmp	r3, r2
 80059c4:	ddb3      	ble.n	800592e <_dtoa_r+0xade>
 80059c6:	4649      	mov	r1, r9
 80059c8:	2300      	movs	r3, #0
 80059ca:	220a      	movs	r2, #10
 80059cc:	4658      	mov	r0, fp
 80059ce:	f000 f967 	bl	8005ca0 <__multadd>
 80059d2:	4681      	mov	r9, r0
 80059d4:	e7ea      	b.n	80059ac <_dtoa_r+0xb5c>
 80059d6:	bf00      	nop
 80059d8:	080087a7 	.word	0x080087a7
 80059dc:	0800872b 	.word	0x0800872b

080059e0 <_free_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4605      	mov	r5, r0
 80059e4:	2900      	cmp	r1, #0
 80059e6:	d040      	beq.n	8005a6a <_free_r+0x8a>
 80059e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ec:	1f0c      	subs	r4, r1, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bfb8      	it	lt
 80059f2:	18e4      	addlt	r4, r4, r3
 80059f4:	f000 f8e6 	bl	8005bc4 <__malloc_lock>
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <_free_r+0x8c>)
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	b933      	cbnz	r3, 8005a0c <_free_r+0x2c>
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	6014      	str	r4, [r2, #0]
 8005a02:	4628      	mov	r0, r5
 8005a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a08:	f000 b8e2 	b.w	8005bd0 <__malloc_unlock>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d908      	bls.n	8005a22 <_free_r+0x42>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	1821      	adds	r1, r4, r0
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf01      	itttt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	1809      	addeq	r1, r1, r0
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	e7ed      	b.n	80059fe <_free_r+0x1e>
 8005a22:	461a      	mov	r2, r3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b10b      	cbz	r3, 8005a2c <_free_r+0x4c>
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x42>
 8005a2c:	6811      	ldr	r1, [r2, #0]
 8005a2e:	1850      	adds	r0, r2, r1
 8005a30:	42a0      	cmp	r0, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x6c>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	4401      	add	r1, r0
 8005a38:	1850      	adds	r0, r2, r1
 8005a3a:	4283      	cmp	r3, r0
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	d1e0      	bne.n	8005a02 <_free_r+0x22>
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4408      	add	r0, r1
 8005a46:	6010      	str	r0, [r2, #0]
 8005a48:	6053      	str	r3, [r2, #4]
 8005a4a:	e7da      	b.n	8005a02 <_free_r+0x22>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x74>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	e7d6      	b.n	8005a02 <_free_r+0x22>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	1821      	adds	r1, r4, r0
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1809      	addeq	r1, r1, r0
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	6063      	str	r3, [r4, #4]
 8005a66:	6054      	str	r4, [r2, #4]
 8005a68:	e7cb      	b.n	8005a02 <_free_r+0x22>
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	200003f8 	.word	0x200003f8

08005a70 <malloc>:
 8005a70:	4b02      	ldr	r3, [pc, #8]	@ (8005a7c <malloc+0xc>)
 8005a72:	4601      	mov	r1, r0
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	f000 b825 	b.w	8005ac4 <_malloc_r>
 8005a7a:	bf00      	nop
 8005a7c:	20000018 	.word	0x20000018

08005a80 <sbrk_aligned>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4e0f      	ldr	r6, [pc, #60]	@ (8005ac0 <sbrk_aligned+0x40>)
 8005a84:	460c      	mov	r4, r1
 8005a86:	6831      	ldr	r1, [r6, #0]
 8005a88:	4605      	mov	r5, r0
 8005a8a:	b911      	cbnz	r1, 8005a92 <sbrk_aligned+0x12>
 8005a8c:	f001 fdf6 	bl	800767c <_sbrk_r>
 8005a90:	6030      	str	r0, [r6, #0]
 8005a92:	4621      	mov	r1, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	f001 fdf1 	bl	800767c <_sbrk_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	d103      	bne.n	8005aa6 <sbrk_aligned+0x26>
 8005a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
 8005aa6:	1cc4      	adds	r4, r0, #3
 8005aa8:	f024 0403 	bic.w	r4, r4, #3
 8005aac:	42a0      	cmp	r0, r4
 8005aae:	d0f8      	beq.n	8005aa2 <sbrk_aligned+0x22>
 8005ab0:	1a21      	subs	r1, r4, r0
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f001 fde2 	bl	800767c <_sbrk_r>
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d1f2      	bne.n	8005aa2 <sbrk_aligned+0x22>
 8005abc:	e7ef      	b.n	8005a9e <sbrk_aligned+0x1e>
 8005abe:	bf00      	nop
 8005ac0:	200003f4 	.word	0x200003f4

08005ac4 <_malloc_r>:
 8005ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac8:	1ccd      	adds	r5, r1, #3
 8005aca:	f025 0503 	bic.w	r5, r5, #3
 8005ace:	3508      	adds	r5, #8
 8005ad0:	2d0c      	cmp	r5, #12
 8005ad2:	bf38      	it	cc
 8005ad4:	250c      	movcc	r5, #12
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	4606      	mov	r6, r0
 8005ada:	db01      	blt.n	8005ae0 <_malloc_r+0x1c>
 8005adc:	42a9      	cmp	r1, r5
 8005ade:	d904      	bls.n	8005aea <_malloc_r+0x26>
 8005ae0:	230c      	movs	r3, #12
 8005ae2:	6033      	str	r3, [r6, #0]
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bc0 <_malloc_r+0xfc>
 8005aee:	f000 f869 	bl	8005bc4 <__malloc_lock>
 8005af2:	f8d8 3000 	ldr.w	r3, [r8]
 8005af6:	461c      	mov	r4, r3
 8005af8:	bb44      	cbnz	r4, 8005b4c <_malloc_r+0x88>
 8005afa:	4629      	mov	r1, r5
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff ffbf 	bl	8005a80 <sbrk_aligned>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	4604      	mov	r4, r0
 8005b06:	d158      	bne.n	8005bba <_malloc_r+0xf6>
 8005b08:	f8d8 4000 	ldr.w	r4, [r8]
 8005b0c:	4627      	mov	r7, r4
 8005b0e:	2f00      	cmp	r7, #0
 8005b10:	d143      	bne.n	8005b9a <_malloc_r+0xd6>
 8005b12:	2c00      	cmp	r4, #0
 8005b14:	d04b      	beq.n	8005bae <_malloc_r+0xea>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	4639      	mov	r1, r7
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	eb04 0903 	add.w	r9, r4, r3
 8005b20:	f001 fdac 	bl	800767c <_sbrk_r>
 8005b24:	4581      	cmp	r9, r0
 8005b26:	d142      	bne.n	8005bae <_malloc_r+0xea>
 8005b28:	6821      	ldr	r1, [r4, #0]
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	1a6d      	subs	r5, r5, r1
 8005b2e:	4629      	mov	r1, r5
 8005b30:	f7ff ffa6 	bl	8005a80 <sbrk_aligned>
 8005b34:	3001      	adds	r0, #1
 8005b36:	d03a      	beq.n	8005bae <_malloc_r+0xea>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	442b      	add	r3, r5
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	bb62      	cbnz	r2, 8005ba0 <_malloc_r+0xdc>
 8005b46:	f8c8 7000 	str.w	r7, [r8]
 8005b4a:	e00f      	b.n	8005b6c <_malloc_r+0xa8>
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	1b52      	subs	r2, r2, r5
 8005b50:	d420      	bmi.n	8005b94 <_malloc_r+0xd0>
 8005b52:	2a0b      	cmp	r2, #11
 8005b54:	d917      	bls.n	8005b86 <_malloc_r+0xc2>
 8005b56:	1961      	adds	r1, r4, r5
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	6025      	str	r5, [r4, #0]
 8005b5c:	bf18      	it	ne
 8005b5e:	6059      	strne	r1, [r3, #4]
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	bf08      	it	eq
 8005b64:	f8c8 1000 	streq.w	r1, [r8]
 8005b68:	5162      	str	r2, [r4, r5]
 8005b6a:	604b      	str	r3, [r1, #4]
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f82f 	bl	8005bd0 <__malloc_unlock>
 8005b72:	f104 000b 	add.w	r0, r4, #11
 8005b76:	1d23      	adds	r3, r4, #4
 8005b78:	f020 0007 	bic.w	r0, r0, #7
 8005b7c:	1ac2      	subs	r2, r0, r3
 8005b7e:	bf1c      	itt	ne
 8005b80:	1a1b      	subne	r3, r3, r0
 8005b82:	50a3      	strne	r3, [r4, r2]
 8005b84:	e7af      	b.n	8005ae6 <_malloc_r+0x22>
 8005b86:	6862      	ldr	r2, [r4, #4]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	bf0c      	ite	eq
 8005b8c:	f8c8 2000 	streq.w	r2, [r8]
 8005b90:	605a      	strne	r2, [r3, #4]
 8005b92:	e7eb      	b.n	8005b6c <_malloc_r+0xa8>
 8005b94:	4623      	mov	r3, r4
 8005b96:	6864      	ldr	r4, [r4, #4]
 8005b98:	e7ae      	b.n	8005af8 <_malloc_r+0x34>
 8005b9a:	463c      	mov	r4, r7
 8005b9c:	687f      	ldr	r7, [r7, #4]
 8005b9e:	e7b6      	b.n	8005b0e <_malloc_r+0x4a>
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d1fb      	bne.n	8005ba0 <_malloc_r+0xdc>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6053      	str	r3, [r2, #4]
 8005bac:	e7de      	b.n	8005b6c <_malloc_r+0xa8>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	f000 f80c 	bl	8005bd0 <__malloc_unlock>
 8005bb8:	e794      	b.n	8005ae4 <_malloc_r+0x20>
 8005bba:	6005      	str	r5, [r0, #0]
 8005bbc:	e7d6      	b.n	8005b6c <_malloc_r+0xa8>
 8005bbe:	bf00      	nop
 8005bc0:	200003f8 	.word	0x200003f8

08005bc4 <__malloc_lock>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__malloc_lock+0x8>)
 8005bc6:	f7ff b8a4 	b.w	8004d12 <__retarget_lock_acquire_recursive>
 8005bca:	bf00      	nop
 8005bcc:	200003f0 	.word	0x200003f0

08005bd0 <__malloc_unlock>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	@ (8005bd8 <__malloc_unlock+0x8>)
 8005bd2:	f7ff b89f 	b.w	8004d14 <__retarget_lock_release_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	200003f0 	.word	0x200003f0

08005bdc <_Balloc>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	69c6      	ldr	r6, [r0, #28]
 8005be0:	4604      	mov	r4, r0
 8005be2:	460d      	mov	r5, r1
 8005be4:	b976      	cbnz	r6, 8005c04 <_Balloc+0x28>
 8005be6:	2010      	movs	r0, #16
 8005be8:	f7ff ff42 	bl	8005a70 <malloc>
 8005bec:	4602      	mov	r2, r0
 8005bee:	61e0      	str	r0, [r4, #28]
 8005bf0:	b920      	cbnz	r0, 8005bfc <_Balloc+0x20>
 8005bf2:	216b      	movs	r1, #107	@ 0x6b
 8005bf4:	4b17      	ldr	r3, [pc, #92]	@ (8005c54 <_Balloc+0x78>)
 8005bf6:	4818      	ldr	r0, [pc, #96]	@ (8005c58 <_Balloc+0x7c>)
 8005bf8:	f001 fd64 	bl	80076c4 <__assert_func>
 8005bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c00:	6006      	str	r6, [r0, #0]
 8005c02:	60c6      	str	r6, [r0, #12]
 8005c04:	69e6      	ldr	r6, [r4, #28]
 8005c06:	68f3      	ldr	r3, [r6, #12]
 8005c08:	b183      	cbz	r3, 8005c2c <_Balloc+0x50>
 8005c0a:	69e3      	ldr	r3, [r4, #28]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c12:	b9b8      	cbnz	r0, 8005c44 <_Balloc+0x68>
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f605 	lsl.w	r6, r1, r5
 8005c1a:	1d72      	adds	r2, r6, #5
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	0092      	lsls	r2, r2, #2
 8005c20:	f001 fd6e 	bl	8007700 <_calloc_r>
 8005c24:	b160      	cbz	r0, 8005c40 <_Balloc+0x64>
 8005c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c2a:	e00e      	b.n	8005c4a <_Balloc+0x6e>
 8005c2c:	2221      	movs	r2, #33	@ 0x21
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4620      	mov	r0, r4
 8005c32:	f001 fd65 	bl	8007700 <_calloc_r>
 8005c36:	69e3      	ldr	r3, [r4, #28]
 8005c38:	60f0      	str	r0, [r6, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e4      	bne.n	8005c0a <_Balloc+0x2e>
 8005c40:	2000      	movs	r0, #0
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	6802      	ldr	r2, [r0, #0]
 8005c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c50:	e7f7      	b.n	8005c42 <_Balloc+0x66>
 8005c52:	bf00      	nop
 8005c54:	08008738 	.word	0x08008738
 8005c58:	080087b8 	.word	0x080087b8

08005c5c <_Bfree>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	69c6      	ldr	r6, [r0, #28]
 8005c60:	4605      	mov	r5, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	b976      	cbnz	r6, 8005c84 <_Bfree+0x28>
 8005c66:	2010      	movs	r0, #16
 8005c68:	f7ff ff02 	bl	8005a70 <malloc>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	61e8      	str	r0, [r5, #28]
 8005c70:	b920      	cbnz	r0, 8005c7c <_Bfree+0x20>
 8005c72:	218f      	movs	r1, #143	@ 0x8f
 8005c74:	4b08      	ldr	r3, [pc, #32]	@ (8005c98 <_Bfree+0x3c>)
 8005c76:	4809      	ldr	r0, [pc, #36]	@ (8005c9c <_Bfree+0x40>)
 8005c78:	f001 fd24 	bl	80076c4 <__assert_func>
 8005c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c80:	6006      	str	r6, [r0, #0]
 8005c82:	60c6      	str	r6, [r0, #12]
 8005c84:	b13c      	cbz	r4, 8005c96 <_Bfree+0x3a>
 8005c86:	69eb      	ldr	r3, [r5, #28]
 8005c88:	6862      	ldr	r2, [r4, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c90:	6021      	str	r1, [r4, #0]
 8005c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	08008738 	.word	0x08008738
 8005c9c:	080087b8 	.word	0x080087b8

08005ca0 <__multadd>:
 8005ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	461e      	mov	r6, r3
 8005caa:	2000      	movs	r0, #0
 8005cac:	690d      	ldr	r5, [r1, #16]
 8005cae:	f101 0c14 	add.w	ip, r1, #20
 8005cb2:	f8dc 3000 	ldr.w	r3, [ip]
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	b299      	uxth	r1, r3
 8005cba:	fb02 6101 	mla	r1, r2, r1, r6
 8005cbe:	0c1e      	lsrs	r6, r3, #16
 8005cc0:	0c0b      	lsrs	r3, r1, #16
 8005cc2:	fb02 3306 	mla	r3, r2, r6, r3
 8005cc6:	b289      	uxth	r1, r1
 8005cc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ccc:	4285      	cmp	r5, r0
 8005cce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cd2:	f84c 1b04 	str.w	r1, [ip], #4
 8005cd6:	dcec      	bgt.n	8005cb2 <__multadd+0x12>
 8005cd8:	b30e      	cbz	r6, 8005d1e <__multadd+0x7e>
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dc19      	bgt.n	8005d14 <__multadd+0x74>
 8005ce0:	6861      	ldr	r1, [r4, #4]
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	f7ff ff79 	bl	8005bdc <_Balloc>
 8005cea:	4680      	mov	r8, r0
 8005cec:	b928      	cbnz	r0, 8005cfa <__multadd+0x5a>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	21ba      	movs	r1, #186	@ 0xba
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d24 <__multadd+0x84>)
 8005cf4:	480c      	ldr	r0, [pc, #48]	@ (8005d28 <__multadd+0x88>)
 8005cf6:	f001 fce5 	bl	80076c4 <__assert_func>
 8005cfa:	6922      	ldr	r2, [r4, #16]
 8005cfc:	f104 010c 	add.w	r1, r4, #12
 8005d00:	3202      	adds	r2, #2
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	300c      	adds	r0, #12
 8005d06:	f001 fcc9 	bl	800769c <memcpy>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ffa5 	bl	8005c5c <_Bfree>
 8005d12:	4644      	mov	r4, r8
 8005d14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d18:	3501      	adds	r5, #1
 8005d1a:	615e      	str	r6, [r3, #20]
 8005d1c:	6125      	str	r5, [r4, #16]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d24:	080087a7 	.word	0x080087a7
 8005d28:	080087b8 	.word	0x080087b8

08005d2c <__s2b>:
 8005d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d30:	4615      	mov	r5, r2
 8005d32:	2209      	movs	r2, #9
 8005d34:	461f      	mov	r7, r3
 8005d36:	3308      	adds	r3, #8
 8005d38:	460c      	mov	r4, r1
 8005d3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d3e:	4606      	mov	r6, r0
 8005d40:	2201      	movs	r2, #1
 8005d42:	2100      	movs	r1, #0
 8005d44:	429a      	cmp	r2, r3
 8005d46:	db09      	blt.n	8005d5c <__s2b+0x30>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7ff ff47 	bl	8005bdc <_Balloc>
 8005d4e:	b940      	cbnz	r0, 8005d62 <__s2b+0x36>
 8005d50:	4602      	mov	r2, r0
 8005d52:	21d3      	movs	r1, #211	@ 0xd3
 8005d54:	4b18      	ldr	r3, [pc, #96]	@ (8005db8 <__s2b+0x8c>)
 8005d56:	4819      	ldr	r0, [pc, #100]	@ (8005dbc <__s2b+0x90>)
 8005d58:	f001 fcb4 	bl	80076c4 <__assert_func>
 8005d5c:	0052      	lsls	r2, r2, #1
 8005d5e:	3101      	adds	r1, #1
 8005d60:	e7f0      	b.n	8005d44 <__s2b+0x18>
 8005d62:	9b08      	ldr	r3, [sp, #32]
 8005d64:	2d09      	cmp	r5, #9
 8005d66:	6143      	str	r3, [r0, #20]
 8005d68:	f04f 0301 	mov.w	r3, #1
 8005d6c:	6103      	str	r3, [r0, #16]
 8005d6e:	dd16      	ble.n	8005d9e <__s2b+0x72>
 8005d70:	f104 0909 	add.w	r9, r4, #9
 8005d74:	46c8      	mov	r8, r9
 8005d76:	442c      	add	r4, r5
 8005d78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	220a      	movs	r2, #10
 8005d80:	4630      	mov	r0, r6
 8005d82:	3b30      	subs	r3, #48	@ 0x30
 8005d84:	f7ff ff8c 	bl	8005ca0 <__multadd>
 8005d88:	45a0      	cmp	r8, r4
 8005d8a:	d1f5      	bne.n	8005d78 <__s2b+0x4c>
 8005d8c:	f1a5 0408 	sub.w	r4, r5, #8
 8005d90:	444c      	add	r4, r9
 8005d92:	1b2d      	subs	r5, r5, r4
 8005d94:	1963      	adds	r3, r4, r5
 8005d96:	42bb      	cmp	r3, r7
 8005d98:	db04      	blt.n	8005da4 <__s2b+0x78>
 8005d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d9e:	2509      	movs	r5, #9
 8005da0:	340a      	adds	r4, #10
 8005da2:	e7f6      	b.n	8005d92 <__s2b+0x66>
 8005da4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005da8:	4601      	mov	r1, r0
 8005daa:	220a      	movs	r2, #10
 8005dac:	4630      	mov	r0, r6
 8005dae:	3b30      	subs	r3, #48	@ 0x30
 8005db0:	f7ff ff76 	bl	8005ca0 <__multadd>
 8005db4:	e7ee      	b.n	8005d94 <__s2b+0x68>
 8005db6:	bf00      	nop
 8005db8:	080087a7 	.word	0x080087a7
 8005dbc:	080087b8 	.word	0x080087b8

08005dc0 <__hi0bits>:
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005dc6:	bf3a      	itte	cc
 8005dc8:	0403      	lslcc	r3, r0, #16
 8005dca:	2010      	movcc	r0, #16
 8005dcc:	2000      	movcs	r0, #0
 8005dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dd2:	bf3c      	itt	cc
 8005dd4:	021b      	lslcc	r3, r3, #8
 8005dd6:	3008      	addcc	r0, #8
 8005dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ddc:	bf3c      	itt	cc
 8005dde:	011b      	lslcc	r3, r3, #4
 8005de0:	3004      	addcc	r0, #4
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de6:	bf3c      	itt	cc
 8005de8:	009b      	lslcc	r3, r3, #2
 8005dea:	3002      	addcc	r0, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	db05      	blt.n	8005dfc <__hi0bits+0x3c>
 8005df0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005df4:	f100 0001 	add.w	r0, r0, #1
 8005df8:	bf08      	it	eq
 8005dfa:	2020      	moveq	r0, #32
 8005dfc:	4770      	bx	lr

08005dfe <__lo0bits>:
 8005dfe:	6803      	ldr	r3, [r0, #0]
 8005e00:	4602      	mov	r2, r0
 8005e02:	f013 0007 	ands.w	r0, r3, #7
 8005e06:	d00b      	beq.n	8005e20 <__lo0bits+0x22>
 8005e08:	07d9      	lsls	r1, r3, #31
 8005e0a:	d421      	bmi.n	8005e50 <__lo0bits+0x52>
 8005e0c:	0798      	lsls	r0, r3, #30
 8005e0e:	bf49      	itett	mi
 8005e10:	085b      	lsrmi	r3, r3, #1
 8005e12:	089b      	lsrpl	r3, r3, #2
 8005e14:	2001      	movmi	r0, #1
 8005e16:	6013      	strmi	r3, [r2, #0]
 8005e18:	bf5c      	itt	pl
 8005e1a:	2002      	movpl	r0, #2
 8005e1c:	6013      	strpl	r3, [r2, #0]
 8005e1e:	4770      	bx	lr
 8005e20:	b299      	uxth	r1, r3
 8005e22:	b909      	cbnz	r1, 8005e28 <__lo0bits+0x2a>
 8005e24:	2010      	movs	r0, #16
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	b2d9      	uxtb	r1, r3
 8005e2a:	b909      	cbnz	r1, 8005e30 <__lo0bits+0x32>
 8005e2c:	3008      	adds	r0, #8
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	0719      	lsls	r1, r3, #28
 8005e32:	bf04      	itt	eq
 8005e34:	091b      	lsreq	r3, r3, #4
 8005e36:	3004      	addeq	r0, #4
 8005e38:	0799      	lsls	r1, r3, #30
 8005e3a:	bf04      	itt	eq
 8005e3c:	089b      	lsreq	r3, r3, #2
 8005e3e:	3002      	addeq	r0, #2
 8005e40:	07d9      	lsls	r1, r3, #31
 8005e42:	d403      	bmi.n	8005e4c <__lo0bits+0x4e>
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	f100 0001 	add.w	r0, r0, #1
 8005e4a:	d003      	beq.n	8005e54 <__lo0bits+0x56>
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4770      	bx	lr
 8005e50:	2000      	movs	r0, #0
 8005e52:	4770      	bx	lr
 8005e54:	2020      	movs	r0, #32
 8005e56:	4770      	bx	lr

08005e58 <__i2b>:
 8005e58:	b510      	push	{r4, lr}
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	f7ff febd 	bl	8005bdc <_Balloc>
 8005e62:	4602      	mov	r2, r0
 8005e64:	b928      	cbnz	r0, 8005e72 <__i2b+0x1a>
 8005e66:	f240 1145 	movw	r1, #325	@ 0x145
 8005e6a:	4b04      	ldr	r3, [pc, #16]	@ (8005e7c <__i2b+0x24>)
 8005e6c:	4804      	ldr	r0, [pc, #16]	@ (8005e80 <__i2b+0x28>)
 8005e6e:	f001 fc29 	bl	80076c4 <__assert_func>
 8005e72:	2301      	movs	r3, #1
 8005e74:	6144      	str	r4, [r0, #20]
 8005e76:	6103      	str	r3, [r0, #16]
 8005e78:	bd10      	pop	{r4, pc}
 8005e7a:	bf00      	nop
 8005e7c:	080087a7 	.word	0x080087a7
 8005e80:	080087b8 	.word	0x080087b8

08005e84 <__multiply>:
 8005e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	4614      	mov	r4, r2
 8005e8a:	690a      	ldr	r2, [r1, #16]
 8005e8c:	6923      	ldr	r3, [r4, #16]
 8005e8e:	460f      	mov	r7, r1
 8005e90:	429a      	cmp	r2, r3
 8005e92:	bfa2      	ittt	ge
 8005e94:	4623      	movge	r3, r4
 8005e96:	460c      	movge	r4, r1
 8005e98:	461f      	movge	r7, r3
 8005e9a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005e9e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005ea2:	68a3      	ldr	r3, [r4, #8]
 8005ea4:	6861      	ldr	r1, [r4, #4]
 8005ea6:	eb0a 0609 	add.w	r6, sl, r9
 8005eaa:	42b3      	cmp	r3, r6
 8005eac:	b085      	sub	sp, #20
 8005eae:	bfb8      	it	lt
 8005eb0:	3101      	addlt	r1, #1
 8005eb2:	f7ff fe93 	bl	8005bdc <_Balloc>
 8005eb6:	b930      	cbnz	r0, 8005ec6 <__multiply+0x42>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ebe:	4b43      	ldr	r3, [pc, #268]	@ (8005fcc <__multiply+0x148>)
 8005ec0:	4843      	ldr	r0, [pc, #268]	@ (8005fd0 <__multiply+0x14c>)
 8005ec2:	f001 fbff 	bl	80076c4 <__assert_func>
 8005ec6:	f100 0514 	add.w	r5, r0, #20
 8005eca:	462b      	mov	r3, r5
 8005ecc:	2200      	movs	r2, #0
 8005ece:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ed2:	4543      	cmp	r3, r8
 8005ed4:	d321      	bcc.n	8005f1a <__multiply+0x96>
 8005ed6:	f107 0114 	add.w	r1, r7, #20
 8005eda:	f104 0214 	add.w	r2, r4, #20
 8005ede:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005ee2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	1b13      	subs	r3, r2, r4
 8005eea:	3b15      	subs	r3, #21
 8005eec:	f023 0303 	bic.w	r3, r3, #3
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	f104 0715 	add.w	r7, r4, #21
 8005ef6:	42ba      	cmp	r2, r7
 8005ef8:	bf38      	it	cc
 8005efa:	2304      	movcc	r3, #4
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	9103      	str	r1, [sp, #12]
 8005f02:	428b      	cmp	r3, r1
 8005f04:	d80c      	bhi.n	8005f20 <__multiply+0x9c>
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	dd03      	ble.n	8005f12 <__multiply+0x8e>
 8005f0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d05a      	beq.n	8005fc8 <__multiply+0x144>
 8005f12:	6106      	str	r6, [r0, #16]
 8005f14:	b005      	add	sp, #20
 8005f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1a:	f843 2b04 	str.w	r2, [r3], #4
 8005f1e:	e7d8      	b.n	8005ed2 <__multiply+0x4e>
 8005f20:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f24:	f1ba 0f00 	cmp.w	sl, #0
 8005f28:	d023      	beq.n	8005f72 <__multiply+0xee>
 8005f2a:	46a9      	mov	r9, r5
 8005f2c:	f04f 0c00 	mov.w	ip, #0
 8005f30:	f104 0e14 	add.w	lr, r4, #20
 8005f34:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f38:	f8d9 3000 	ldr.w	r3, [r9]
 8005f3c:	fa1f fb87 	uxth.w	fp, r7
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f46:	4463      	add	r3, ip
 8005f48:	f8d9 c000 	ldr.w	ip, [r9]
 8005f4c:	0c3f      	lsrs	r7, r7, #16
 8005f4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f52:	fb0a c707 	mla	r7, sl, r7, ip
 8005f56:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f60:	4572      	cmp	r2, lr
 8005f62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005f66:	f849 3b04 	str.w	r3, [r9], #4
 8005f6a:	d8e3      	bhi.n	8005f34 <__multiply+0xb0>
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	f845 c003 	str.w	ip, [r5, r3]
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	3104      	adds	r1, #4
 8005f76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f7a:	f1b9 0f00 	cmp.w	r9, #0
 8005f7e:	d021      	beq.n	8005fc4 <__multiply+0x140>
 8005f80:	46ae      	mov	lr, r5
 8005f82:	f04f 0a00 	mov.w	sl, #0
 8005f86:	682b      	ldr	r3, [r5, #0]
 8005f88:	f104 0c14 	add.w	ip, r4, #20
 8005f8c:	f8bc b000 	ldrh.w	fp, [ip]
 8005f90:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	fb09 770b 	mla	r7, r9, fp, r7
 8005f9a:	4457      	add	r7, sl
 8005f9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005fa0:	f84e 3b04 	str.w	r3, [lr], #4
 8005fa4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fac:	f8be 3000 	ldrh.w	r3, [lr]
 8005fb0:	4562      	cmp	r2, ip
 8005fb2:	fb09 330a 	mla	r3, r9, sl, r3
 8005fb6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005fba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fbe:	d8e5      	bhi.n	8005f8c <__multiply+0x108>
 8005fc0:	9f01      	ldr	r7, [sp, #4]
 8005fc2:	51eb      	str	r3, [r5, r7]
 8005fc4:	3504      	adds	r5, #4
 8005fc6:	e79a      	b.n	8005efe <__multiply+0x7a>
 8005fc8:	3e01      	subs	r6, #1
 8005fca:	e79c      	b.n	8005f06 <__multiply+0x82>
 8005fcc:	080087a7 	.word	0x080087a7
 8005fd0:	080087b8 	.word	0x080087b8

08005fd4 <__pow5mult>:
 8005fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd8:	4615      	mov	r5, r2
 8005fda:	f012 0203 	ands.w	r2, r2, #3
 8005fde:	4607      	mov	r7, r0
 8005fe0:	460e      	mov	r6, r1
 8005fe2:	d007      	beq.n	8005ff4 <__pow5mult+0x20>
 8005fe4:	4c25      	ldr	r4, [pc, #148]	@ (800607c <__pow5mult+0xa8>)
 8005fe6:	3a01      	subs	r2, #1
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fee:	f7ff fe57 	bl	8005ca0 <__multadd>
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	10ad      	asrs	r5, r5, #2
 8005ff6:	d03d      	beq.n	8006074 <__pow5mult+0xa0>
 8005ff8:	69fc      	ldr	r4, [r7, #28]
 8005ffa:	b97c      	cbnz	r4, 800601c <__pow5mult+0x48>
 8005ffc:	2010      	movs	r0, #16
 8005ffe:	f7ff fd37 	bl	8005a70 <malloc>
 8006002:	4602      	mov	r2, r0
 8006004:	61f8      	str	r0, [r7, #28]
 8006006:	b928      	cbnz	r0, 8006014 <__pow5mult+0x40>
 8006008:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800600c:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <__pow5mult+0xac>)
 800600e:	481d      	ldr	r0, [pc, #116]	@ (8006084 <__pow5mult+0xb0>)
 8006010:	f001 fb58 	bl	80076c4 <__assert_func>
 8006014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006018:	6004      	str	r4, [r0, #0]
 800601a:	60c4      	str	r4, [r0, #12]
 800601c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006024:	b94c      	cbnz	r4, 800603a <__pow5mult+0x66>
 8006026:	f240 2171 	movw	r1, #625	@ 0x271
 800602a:	4638      	mov	r0, r7
 800602c:	f7ff ff14 	bl	8005e58 <__i2b>
 8006030:	2300      	movs	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	f8c8 0008 	str.w	r0, [r8, #8]
 8006038:	6003      	str	r3, [r0, #0]
 800603a:	f04f 0900 	mov.w	r9, #0
 800603e:	07eb      	lsls	r3, r5, #31
 8006040:	d50a      	bpl.n	8006058 <__pow5mult+0x84>
 8006042:	4631      	mov	r1, r6
 8006044:	4622      	mov	r2, r4
 8006046:	4638      	mov	r0, r7
 8006048:	f7ff ff1c 	bl	8005e84 <__multiply>
 800604c:	4680      	mov	r8, r0
 800604e:	4631      	mov	r1, r6
 8006050:	4638      	mov	r0, r7
 8006052:	f7ff fe03 	bl	8005c5c <_Bfree>
 8006056:	4646      	mov	r6, r8
 8006058:	106d      	asrs	r5, r5, #1
 800605a:	d00b      	beq.n	8006074 <__pow5mult+0xa0>
 800605c:	6820      	ldr	r0, [r4, #0]
 800605e:	b938      	cbnz	r0, 8006070 <__pow5mult+0x9c>
 8006060:	4622      	mov	r2, r4
 8006062:	4621      	mov	r1, r4
 8006064:	4638      	mov	r0, r7
 8006066:	f7ff ff0d 	bl	8005e84 <__multiply>
 800606a:	6020      	str	r0, [r4, #0]
 800606c:	f8c0 9000 	str.w	r9, [r0]
 8006070:	4604      	mov	r4, r0
 8006072:	e7e4      	b.n	800603e <__pow5mult+0x6a>
 8006074:	4630      	mov	r0, r6
 8006076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607a:	bf00      	nop
 800607c:	08008814 	.word	0x08008814
 8006080:	08008738 	.word	0x08008738
 8006084:	080087b8 	.word	0x080087b8

08006088 <__lshift>:
 8006088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	460c      	mov	r4, r1
 800608e:	4607      	mov	r7, r0
 8006090:	4691      	mov	r9, r2
 8006092:	6923      	ldr	r3, [r4, #16]
 8006094:	6849      	ldr	r1, [r1, #4]
 8006096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060a0:	f108 0601 	add.w	r6, r8, #1
 80060a4:	42b3      	cmp	r3, r6
 80060a6:	db0b      	blt.n	80060c0 <__lshift+0x38>
 80060a8:	4638      	mov	r0, r7
 80060aa:	f7ff fd97 	bl	8005bdc <_Balloc>
 80060ae:	4605      	mov	r5, r0
 80060b0:	b948      	cbnz	r0, 80060c6 <__lshift+0x3e>
 80060b2:	4602      	mov	r2, r0
 80060b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80060b8:	4b27      	ldr	r3, [pc, #156]	@ (8006158 <__lshift+0xd0>)
 80060ba:	4828      	ldr	r0, [pc, #160]	@ (800615c <__lshift+0xd4>)
 80060bc:	f001 fb02 	bl	80076c4 <__assert_func>
 80060c0:	3101      	adds	r1, #1
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	e7ee      	b.n	80060a4 <__lshift+0x1c>
 80060c6:	2300      	movs	r3, #0
 80060c8:	f100 0114 	add.w	r1, r0, #20
 80060cc:	f100 0210 	add.w	r2, r0, #16
 80060d0:	4618      	mov	r0, r3
 80060d2:	4553      	cmp	r3, sl
 80060d4:	db33      	blt.n	800613e <__lshift+0xb6>
 80060d6:	6920      	ldr	r0, [r4, #16]
 80060d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060dc:	f104 0314 	add.w	r3, r4, #20
 80060e0:	f019 091f 	ands.w	r9, r9, #31
 80060e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060ec:	d02b      	beq.n	8006146 <__lshift+0xbe>
 80060ee:	468a      	mov	sl, r1
 80060f0:	2200      	movs	r2, #0
 80060f2:	f1c9 0e20 	rsb	lr, r9, #32
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	fa00 f009 	lsl.w	r0, r0, r9
 80060fc:	4310      	orrs	r0, r2
 80060fe:	f84a 0b04 	str.w	r0, [sl], #4
 8006102:	f853 2b04 	ldr.w	r2, [r3], #4
 8006106:	459c      	cmp	ip, r3
 8006108:	fa22 f20e 	lsr.w	r2, r2, lr
 800610c:	d8f3      	bhi.n	80060f6 <__lshift+0x6e>
 800610e:	ebac 0304 	sub.w	r3, ip, r4
 8006112:	3b15      	subs	r3, #21
 8006114:	f023 0303 	bic.w	r3, r3, #3
 8006118:	3304      	adds	r3, #4
 800611a:	f104 0015 	add.w	r0, r4, #21
 800611e:	4584      	cmp	ip, r0
 8006120:	bf38      	it	cc
 8006122:	2304      	movcc	r3, #4
 8006124:	50ca      	str	r2, [r1, r3]
 8006126:	b10a      	cbz	r2, 800612c <__lshift+0xa4>
 8006128:	f108 0602 	add.w	r6, r8, #2
 800612c:	3e01      	subs	r6, #1
 800612e:	4638      	mov	r0, r7
 8006130:	4621      	mov	r1, r4
 8006132:	612e      	str	r6, [r5, #16]
 8006134:	f7ff fd92 	bl	8005c5c <_Bfree>
 8006138:	4628      	mov	r0, r5
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006142:	3301      	adds	r3, #1
 8006144:	e7c5      	b.n	80060d2 <__lshift+0x4a>
 8006146:	3904      	subs	r1, #4
 8006148:	f853 2b04 	ldr.w	r2, [r3], #4
 800614c:	459c      	cmp	ip, r3
 800614e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006152:	d8f9      	bhi.n	8006148 <__lshift+0xc0>
 8006154:	e7ea      	b.n	800612c <__lshift+0xa4>
 8006156:	bf00      	nop
 8006158:	080087a7 	.word	0x080087a7
 800615c:	080087b8 	.word	0x080087b8

08006160 <__mcmp>:
 8006160:	4603      	mov	r3, r0
 8006162:	690a      	ldr	r2, [r1, #16]
 8006164:	6900      	ldr	r0, [r0, #16]
 8006166:	b530      	push	{r4, r5, lr}
 8006168:	1a80      	subs	r0, r0, r2
 800616a:	d10e      	bne.n	800618a <__mcmp+0x2a>
 800616c:	3314      	adds	r3, #20
 800616e:	3114      	adds	r1, #20
 8006170:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006174:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006178:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800617c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006180:	4295      	cmp	r5, r2
 8006182:	d003      	beq.n	800618c <__mcmp+0x2c>
 8006184:	d205      	bcs.n	8006192 <__mcmp+0x32>
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	bd30      	pop	{r4, r5, pc}
 800618c:	42a3      	cmp	r3, r4
 800618e:	d3f3      	bcc.n	8006178 <__mcmp+0x18>
 8006190:	e7fb      	b.n	800618a <__mcmp+0x2a>
 8006192:	2001      	movs	r0, #1
 8006194:	e7f9      	b.n	800618a <__mcmp+0x2a>
	...

08006198 <__mdiff>:
 8006198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	4689      	mov	r9, r1
 800619e:	4606      	mov	r6, r0
 80061a0:	4611      	mov	r1, r2
 80061a2:	4648      	mov	r0, r9
 80061a4:	4614      	mov	r4, r2
 80061a6:	f7ff ffdb 	bl	8006160 <__mcmp>
 80061aa:	1e05      	subs	r5, r0, #0
 80061ac:	d112      	bne.n	80061d4 <__mdiff+0x3c>
 80061ae:	4629      	mov	r1, r5
 80061b0:	4630      	mov	r0, r6
 80061b2:	f7ff fd13 	bl	8005bdc <_Balloc>
 80061b6:	4602      	mov	r2, r0
 80061b8:	b928      	cbnz	r0, 80061c6 <__mdiff+0x2e>
 80061ba:	f240 2137 	movw	r1, #567	@ 0x237
 80061be:	4b3e      	ldr	r3, [pc, #248]	@ (80062b8 <__mdiff+0x120>)
 80061c0:	483e      	ldr	r0, [pc, #248]	@ (80062bc <__mdiff+0x124>)
 80061c2:	f001 fa7f 	bl	80076c4 <__assert_func>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061cc:	4610      	mov	r0, r2
 80061ce:	b003      	add	sp, #12
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	bfbc      	itt	lt
 80061d6:	464b      	movlt	r3, r9
 80061d8:	46a1      	movlt	r9, r4
 80061da:	4630      	mov	r0, r6
 80061dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80061e0:	bfba      	itte	lt
 80061e2:	461c      	movlt	r4, r3
 80061e4:	2501      	movlt	r5, #1
 80061e6:	2500      	movge	r5, #0
 80061e8:	f7ff fcf8 	bl	8005bdc <_Balloc>
 80061ec:	4602      	mov	r2, r0
 80061ee:	b918      	cbnz	r0, 80061f8 <__mdiff+0x60>
 80061f0:	f240 2145 	movw	r1, #581	@ 0x245
 80061f4:	4b30      	ldr	r3, [pc, #192]	@ (80062b8 <__mdiff+0x120>)
 80061f6:	e7e3      	b.n	80061c0 <__mdiff+0x28>
 80061f8:	f100 0b14 	add.w	fp, r0, #20
 80061fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006200:	f109 0310 	add.w	r3, r9, #16
 8006204:	60c5      	str	r5, [r0, #12]
 8006206:	f04f 0c00 	mov.w	ip, #0
 800620a:	f109 0514 	add.w	r5, r9, #20
 800620e:	46d9      	mov	r9, fp
 8006210:	6926      	ldr	r6, [r4, #16]
 8006212:	f104 0e14 	add.w	lr, r4, #20
 8006216:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800621a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800621e:	9301      	str	r3, [sp, #4]
 8006220:	9b01      	ldr	r3, [sp, #4]
 8006222:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006226:	f853 af04 	ldr.w	sl, [r3, #4]!
 800622a:	b281      	uxth	r1, r0
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	fa1f f38a 	uxth.w	r3, sl
 8006232:	1a5b      	subs	r3, r3, r1
 8006234:	0c00      	lsrs	r0, r0, #16
 8006236:	4463      	add	r3, ip
 8006238:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800623c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006246:	4576      	cmp	r6, lr
 8006248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800624c:	f849 3b04 	str.w	r3, [r9], #4
 8006250:	d8e6      	bhi.n	8006220 <__mdiff+0x88>
 8006252:	1b33      	subs	r3, r6, r4
 8006254:	3b15      	subs	r3, #21
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	3415      	adds	r4, #21
 800625c:	3304      	adds	r3, #4
 800625e:	42a6      	cmp	r6, r4
 8006260:	bf38      	it	cc
 8006262:	2304      	movcc	r3, #4
 8006264:	441d      	add	r5, r3
 8006266:	445b      	add	r3, fp
 8006268:	461e      	mov	r6, r3
 800626a:	462c      	mov	r4, r5
 800626c:	4544      	cmp	r4, r8
 800626e:	d30e      	bcc.n	800628e <__mdiff+0xf6>
 8006270:	f108 0103 	add.w	r1, r8, #3
 8006274:	1b49      	subs	r1, r1, r5
 8006276:	f021 0103 	bic.w	r1, r1, #3
 800627a:	3d03      	subs	r5, #3
 800627c:	45a8      	cmp	r8, r5
 800627e:	bf38      	it	cc
 8006280:	2100      	movcc	r1, #0
 8006282:	440b      	add	r3, r1
 8006284:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006288:	b199      	cbz	r1, 80062b2 <__mdiff+0x11a>
 800628a:	6117      	str	r7, [r2, #16]
 800628c:	e79e      	b.n	80061cc <__mdiff+0x34>
 800628e:	46e6      	mov	lr, ip
 8006290:	f854 1b04 	ldr.w	r1, [r4], #4
 8006294:	fa1f fc81 	uxth.w	ip, r1
 8006298:	44f4      	add	ip, lr
 800629a:	0c08      	lsrs	r0, r1, #16
 800629c:	4471      	add	r1, lr
 800629e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80062a2:	b289      	uxth	r1, r1
 80062a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80062a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062ac:	f846 1b04 	str.w	r1, [r6], #4
 80062b0:	e7dc      	b.n	800626c <__mdiff+0xd4>
 80062b2:	3f01      	subs	r7, #1
 80062b4:	e7e6      	b.n	8006284 <__mdiff+0xec>
 80062b6:	bf00      	nop
 80062b8:	080087a7 	.word	0x080087a7
 80062bc:	080087b8 	.word	0x080087b8

080062c0 <__ulp>:
 80062c0:	4b0e      	ldr	r3, [pc, #56]	@ (80062fc <__ulp+0x3c>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dc08      	bgt.n	80062de <__ulp+0x1e>
 80062cc:	425b      	negs	r3, r3
 80062ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80062d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80062d6:	da04      	bge.n	80062e2 <__ulp+0x22>
 80062d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80062dc:	4113      	asrs	r3, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	e008      	b.n	80062f4 <__ulp+0x34>
 80062e2:	f1a2 0314 	sub.w	r3, r2, #20
 80062e6:	2b1e      	cmp	r3, #30
 80062e8:	bfd6      	itet	le
 80062ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80062ee:	2201      	movgt	r2, #1
 80062f0:	40da      	lsrle	r2, r3
 80062f2:	2300      	movs	r3, #0
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	7ff00000 	.word	0x7ff00000

08006300 <__b2d>:
 8006300:	6902      	ldr	r2, [r0, #16]
 8006302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006304:	f100 0614 	add.w	r6, r0, #20
 8006308:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800630c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006310:	4f1e      	ldr	r7, [pc, #120]	@ (800638c <__b2d+0x8c>)
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fd54 	bl	8005dc0 <__hi0bits>
 8006318:	4603      	mov	r3, r0
 800631a:	f1c0 0020 	rsb	r0, r0, #32
 800631e:	2b0a      	cmp	r3, #10
 8006320:	f1a2 0504 	sub.w	r5, r2, #4
 8006324:	6008      	str	r0, [r1, #0]
 8006326:	dc12      	bgt.n	800634e <__b2d+0x4e>
 8006328:	42ae      	cmp	r6, r5
 800632a:	bf2c      	ite	cs
 800632c:	2200      	movcs	r2, #0
 800632e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006332:	f1c3 0c0b 	rsb	ip, r3, #11
 8006336:	3315      	adds	r3, #21
 8006338:	fa24 fe0c 	lsr.w	lr, r4, ip
 800633c:	fa04 f303 	lsl.w	r3, r4, r3
 8006340:	fa22 f20c 	lsr.w	r2, r2, ip
 8006344:	ea4e 0107 	orr.w	r1, lr, r7
 8006348:	431a      	orrs	r2, r3
 800634a:	4610      	mov	r0, r2
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634e:	42ae      	cmp	r6, r5
 8006350:	bf36      	itet	cc
 8006352:	f1a2 0508 	subcc.w	r5, r2, #8
 8006356:	2200      	movcs	r2, #0
 8006358:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800635c:	3b0b      	subs	r3, #11
 800635e:	d012      	beq.n	8006386 <__b2d+0x86>
 8006360:	f1c3 0720 	rsb	r7, r3, #32
 8006364:	fa22 f107 	lsr.w	r1, r2, r7
 8006368:	409c      	lsls	r4, r3
 800636a:	430c      	orrs	r4, r1
 800636c:	42b5      	cmp	r5, r6
 800636e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006372:	bf94      	ite	ls
 8006374:	2400      	movls	r4, #0
 8006376:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800637a:	409a      	lsls	r2, r3
 800637c:	40fc      	lsrs	r4, r7
 800637e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006382:	4322      	orrs	r2, r4
 8006384:	e7e1      	b.n	800634a <__b2d+0x4a>
 8006386:	ea44 0107 	orr.w	r1, r4, r7
 800638a:	e7de      	b.n	800634a <__b2d+0x4a>
 800638c:	3ff00000 	.word	0x3ff00000

08006390 <__d2b>:
 8006390:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006394:	2101      	movs	r1, #1
 8006396:	4690      	mov	r8, r2
 8006398:	4699      	mov	r9, r3
 800639a:	9e08      	ldr	r6, [sp, #32]
 800639c:	f7ff fc1e 	bl	8005bdc <_Balloc>
 80063a0:	4604      	mov	r4, r0
 80063a2:	b930      	cbnz	r0, 80063b2 <__d2b+0x22>
 80063a4:	4602      	mov	r2, r0
 80063a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80063aa:	4b23      	ldr	r3, [pc, #140]	@ (8006438 <__d2b+0xa8>)
 80063ac:	4823      	ldr	r0, [pc, #140]	@ (800643c <__d2b+0xac>)
 80063ae:	f001 f989 	bl	80076c4 <__assert_func>
 80063b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063ba:	b10d      	cbz	r5, 80063c0 <__d2b+0x30>
 80063bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	f1b8 0300 	subs.w	r3, r8, #0
 80063c6:	d024      	beq.n	8006412 <__d2b+0x82>
 80063c8:	4668      	mov	r0, sp
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	f7ff fd17 	bl	8005dfe <__lo0bits>
 80063d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063d4:	b1d8      	cbz	r0, 800640e <__d2b+0x7e>
 80063d6:	f1c0 0320 	rsb	r3, r0, #32
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	430b      	orrs	r3, r1
 80063e0:	40c2      	lsrs	r2, r0
 80063e2:	6163      	str	r3, [r4, #20]
 80063e4:	9201      	str	r2, [sp, #4]
 80063e6:	9b01      	ldr	r3, [sp, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	2201      	moveq	r2, #1
 80063ee:	2202      	movne	r2, #2
 80063f0:	61a3      	str	r3, [r4, #24]
 80063f2:	6122      	str	r2, [r4, #16]
 80063f4:	b1ad      	cbz	r5, 8006422 <__d2b+0x92>
 80063f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80063fa:	4405      	add	r5, r0
 80063fc:	6035      	str	r5, [r6, #0]
 80063fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006404:	6018      	str	r0, [r3, #0]
 8006406:	4620      	mov	r0, r4
 8006408:	b002      	add	sp, #8
 800640a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800640e:	6161      	str	r1, [r4, #20]
 8006410:	e7e9      	b.n	80063e6 <__d2b+0x56>
 8006412:	a801      	add	r0, sp, #4
 8006414:	f7ff fcf3 	bl	8005dfe <__lo0bits>
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	6163      	str	r3, [r4, #20]
 800641e:	3020      	adds	r0, #32
 8006420:	e7e7      	b.n	80063f2 <__d2b+0x62>
 8006422:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006426:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800642a:	6030      	str	r0, [r6, #0]
 800642c:	6918      	ldr	r0, [r3, #16]
 800642e:	f7ff fcc7 	bl	8005dc0 <__hi0bits>
 8006432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006436:	e7e4      	b.n	8006402 <__d2b+0x72>
 8006438:	080087a7 	.word	0x080087a7
 800643c:	080087b8 	.word	0x080087b8

08006440 <__ratio>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	b085      	sub	sp, #20
 8006446:	e9cd 1000 	strd	r1, r0, [sp]
 800644a:	a902      	add	r1, sp, #8
 800644c:	f7ff ff58 	bl	8006300 <__b2d>
 8006450:	468b      	mov	fp, r1
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	9800      	ldr	r0, [sp, #0]
 8006458:	a903      	add	r1, sp, #12
 800645a:	f7ff ff51 	bl	8006300 <__b2d>
 800645e:	460d      	mov	r5, r1
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	4689      	mov	r9, r1
 8006464:	6919      	ldr	r1, [r3, #16]
 8006466:	9b00      	ldr	r3, [sp, #0]
 8006468:	4604      	mov	r4, r0
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	4630      	mov	r0, r6
 800646e:	1ac9      	subs	r1, r1, r3
 8006470:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800647a:	2b00      	cmp	r3, #0
 800647c:	bfcd      	iteet	gt
 800647e:	463a      	movgt	r2, r7
 8006480:	462a      	movle	r2, r5
 8006482:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006486:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800648a:	bfd8      	it	le
 800648c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006490:	464b      	mov	r3, r9
 8006492:	4622      	mov	r2, r4
 8006494:	4659      	mov	r1, fp
 8006496:	f7fa f949 	bl	800072c <__aeabi_ddiv>
 800649a:	b005      	add	sp, #20
 800649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064a0 <__copybits>:
 80064a0:	3901      	subs	r1, #1
 80064a2:	b570      	push	{r4, r5, r6, lr}
 80064a4:	1149      	asrs	r1, r1, #5
 80064a6:	6914      	ldr	r4, [r2, #16]
 80064a8:	3101      	adds	r1, #1
 80064aa:	f102 0314 	add.w	r3, r2, #20
 80064ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064b6:	1f05      	subs	r5, r0, #4
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	d30c      	bcc.n	80064d6 <__copybits+0x36>
 80064bc:	1aa3      	subs	r3, r4, r2
 80064be:	3b11      	subs	r3, #17
 80064c0:	f023 0303 	bic.w	r3, r3, #3
 80064c4:	3211      	adds	r2, #17
 80064c6:	42a2      	cmp	r2, r4
 80064c8:	bf88      	it	hi
 80064ca:	2300      	movhi	r3, #0
 80064cc:	4418      	add	r0, r3
 80064ce:	2300      	movs	r3, #0
 80064d0:	4288      	cmp	r0, r1
 80064d2:	d305      	bcc.n	80064e0 <__copybits+0x40>
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
 80064d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80064da:	f845 6f04 	str.w	r6, [r5, #4]!
 80064de:	e7eb      	b.n	80064b8 <__copybits+0x18>
 80064e0:	f840 3b04 	str.w	r3, [r0], #4
 80064e4:	e7f4      	b.n	80064d0 <__copybits+0x30>

080064e6 <__any_on>:
 80064e6:	f100 0214 	add.w	r2, r0, #20
 80064ea:	6900      	ldr	r0, [r0, #16]
 80064ec:	114b      	asrs	r3, r1, #5
 80064ee:	4298      	cmp	r0, r3
 80064f0:	b510      	push	{r4, lr}
 80064f2:	db11      	blt.n	8006518 <__any_on+0x32>
 80064f4:	dd0a      	ble.n	800650c <__any_on+0x26>
 80064f6:	f011 011f 	ands.w	r1, r1, #31
 80064fa:	d007      	beq.n	800650c <__any_on+0x26>
 80064fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006500:	fa24 f001 	lsr.w	r0, r4, r1
 8006504:	fa00 f101 	lsl.w	r1, r0, r1
 8006508:	428c      	cmp	r4, r1
 800650a:	d10b      	bne.n	8006524 <__any_on+0x3e>
 800650c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006510:	4293      	cmp	r3, r2
 8006512:	d803      	bhi.n	800651c <__any_on+0x36>
 8006514:	2000      	movs	r0, #0
 8006516:	bd10      	pop	{r4, pc}
 8006518:	4603      	mov	r3, r0
 800651a:	e7f7      	b.n	800650c <__any_on+0x26>
 800651c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006520:	2900      	cmp	r1, #0
 8006522:	d0f5      	beq.n	8006510 <__any_on+0x2a>
 8006524:	2001      	movs	r0, #1
 8006526:	e7f6      	b.n	8006516 <__any_on+0x30>

08006528 <sulp>:
 8006528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652c:	460f      	mov	r7, r1
 800652e:	4690      	mov	r8, r2
 8006530:	f7ff fec6 	bl	80062c0 <__ulp>
 8006534:	4604      	mov	r4, r0
 8006536:	460d      	mov	r5, r1
 8006538:	f1b8 0f00 	cmp.w	r8, #0
 800653c:	d011      	beq.n	8006562 <sulp+0x3a>
 800653e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006542:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006546:	2b00      	cmp	r3, #0
 8006548:	dd0b      	ble.n	8006562 <sulp+0x3a>
 800654a:	2400      	movs	r4, #0
 800654c:	051b      	lsls	r3, r3, #20
 800654e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006552:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006556:	4622      	mov	r2, r4
 8006558:	462b      	mov	r3, r5
 800655a:	f7f9 ffbd 	bl	80004d8 <__aeabi_dmul>
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656a:	0000      	movs	r0, r0
 800656c:	0000      	movs	r0, r0
	...

08006570 <_strtod_l>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	b09f      	sub	sp, #124	@ 0x7c
 8006576:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006578:	2200      	movs	r2, #0
 800657a:	460c      	mov	r4, r1
 800657c:	921a      	str	r2, [sp, #104]	@ 0x68
 800657e:	f04f 0a00 	mov.w	sl, #0
 8006582:	f04f 0b00 	mov.w	fp, #0
 8006586:	460a      	mov	r2, r1
 8006588:	9005      	str	r0, [sp, #20]
 800658a:	9219      	str	r2, [sp, #100]	@ 0x64
 800658c:	7811      	ldrb	r1, [r2, #0]
 800658e:	292b      	cmp	r1, #43	@ 0x2b
 8006590:	d048      	beq.n	8006624 <_strtod_l+0xb4>
 8006592:	d836      	bhi.n	8006602 <_strtod_l+0x92>
 8006594:	290d      	cmp	r1, #13
 8006596:	d830      	bhi.n	80065fa <_strtod_l+0x8a>
 8006598:	2908      	cmp	r1, #8
 800659a:	d830      	bhi.n	80065fe <_strtod_l+0x8e>
 800659c:	2900      	cmp	r1, #0
 800659e:	d039      	beq.n	8006614 <_strtod_l+0xa4>
 80065a0:	2200      	movs	r2, #0
 80065a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80065a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80065a6:	782a      	ldrb	r2, [r5, #0]
 80065a8:	2a30      	cmp	r2, #48	@ 0x30
 80065aa:	f040 80b1 	bne.w	8006710 <_strtod_l+0x1a0>
 80065ae:	786a      	ldrb	r2, [r5, #1]
 80065b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065b4:	2a58      	cmp	r2, #88	@ 0x58
 80065b6:	d16c      	bne.n	8006692 <_strtod_l+0x122>
 80065b8:	9302      	str	r3, [sp, #8]
 80065ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065bc:	4a8e      	ldr	r2, [pc, #568]	@ (80067f8 <_strtod_l+0x288>)
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	ab1a      	add	r3, sp, #104	@ 0x68
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	9805      	ldr	r0, [sp, #20]
 80065c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80065c8:	a919      	add	r1, sp, #100	@ 0x64
 80065ca:	f001 f915 	bl	80077f8 <__gethex>
 80065ce:	f010 060f 	ands.w	r6, r0, #15
 80065d2:	4604      	mov	r4, r0
 80065d4:	d005      	beq.n	80065e2 <_strtod_l+0x72>
 80065d6:	2e06      	cmp	r6, #6
 80065d8:	d126      	bne.n	8006628 <_strtod_l+0xb8>
 80065da:	2300      	movs	r3, #0
 80065dc:	3501      	adds	r5, #1
 80065de:	9519      	str	r5, [sp, #100]	@ 0x64
 80065e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 8584 	bne.w	80070f2 <_strtod_l+0xb82>
 80065ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065ec:	b1bb      	cbz	r3, 800661e <_strtod_l+0xae>
 80065ee:	4650      	mov	r0, sl
 80065f0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80065f4:	b01f      	add	sp, #124	@ 0x7c
 80065f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fa:	2920      	cmp	r1, #32
 80065fc:	d1d0      	bne.n	80065a0 <_strtod_l+0x30>
 80065fe:	3201      	adds	r2, #1
 8006600:	e7c3      	b.n	800658a <_strtod_l+0x1a>
 8006602:	292d      	cmp	r1, #45	@ 0x2d
 8006604:	d1cc      	bne.n	80065a0 <_strtod_l+0x30>
 8006606:	2101      	movs	r1, #1
 8006608:	910b      	str	r1, [sp, #44]	@ 0x2c
 800660a:	1c51      	adds	r1, r2, #1
 800660c:	9119      	str	r1, [sp, #100]	@ 0x64
 800660e:	7852      	ldrb	r2, [r2, #1]
 8006610:	2a00      	cmp	r2, #0
 8006612:	d1c7      	bne.n	80065a4 <_strtod_l+0x34>
 8006614:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006616:	9419      	str	r4, [sp, #100]	@ 0x64
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 8568 	bne.w	80070ee <_strtod_l+0xb7e>
 800661e:	4650      	mov	r0, sl
 8006620:	4659      	mov	r1, fp
 8006622:	e7e7      	b.n	80065f4 <_strtod_l+0x84>
 8006624:	2100      	movs	r1, #0
 8006626:	e7ef      	b.n	8006608 <_strtod_l+0x98>
 8006628:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800662a:	b13a      	cbz	r2, 800663c <_strtod_l+0xcc>
 800662c:	2135      	movs	r1, #53	@ 0x35
 800662e:	a81c      	add	r0, sp, #112	@ 0x70
 8006630:	f7ff ff36 	bl	80064a0 <__copybits>
 8006634:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006636:	9805      	ldr	r0, [sp, #20]
 8006638:	f7ff fb10 	bl	8005c5c <_Bfree>
 800663c:	3e01      	subs	r6, #1
 800663e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006640:	2e04      	cmp	r6, #4
 8006642:	d806      	bhi.n	8006652 <_strtod_l+0xe2>
 8006644:	e8df f006 	tbb	[pc, r6]
 8006648:	201d0314 	.word	0x201d0314
 800664c:	14          	.byte	0x14
 800664d:	00          	.byte	0x00
 800664e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006652:	05e1      	lsls	r1, r4, #23
 8006654:	bf48      	it	mi
 8006656:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800665a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800665e:	0d1b      	lsrs	r3, r3, #20
 8006660:	051b      	lsls	r3, r3, #20
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1bd      	bne.n	80065e2 <_strtod_l+0x72>
 8006666:	f7fe fb29 	bl	8004cbc <__errno>
 800666a:	2322      	movs	r3, #34	@ 0x22
 800666c:	6003      	str	r3, [r0, #0]
 800666e:	e7b8      	b.n	80065e2 <_strtod_l+0x72>
 8006670:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006674:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006678:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800667c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006680:	e7e7      	b.n	8006652 <_strtod_l+0xe2>
 8006682:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80067fc <_strtod_l+0x28c>
 8006686:	e7e4      	b.n	8006652 <_strtod_l+0xe2>
 8006688:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800668c:	f04f 3aff 	mov.w	sl, #4294967295
 8006690:	e7df      	b.n	8006652 <_strtod_l+0xe2>
 8006692:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	9219      	str	r2, [sp, #100]	@ 0x64
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b30      	cmp	r3, #48	@ 0x30
 800669c:	d0f9      	beq.n	8006692 <_strtod_l+0x122>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d09f      	beq.n	80065e2 <_strtod_l+0x72>
 80066a2:	2301      	movs	r3, #1
 80066a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066a8:	220a      	movs	r2, #10
 80066aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80066ac:	2300      	movs	r3, #0
 80066ae:	461f      	mov	r7, r3
 80066b0:	9308      	str	r3, [sp, #32]
 80066b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80066b4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80066b6:	7805      	ldrb	r5, [r0, #0]
 80066b8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80066bc:	b2d9      	uxtb	r1, r3
 80066be:	2909      	cmp	r1, #9
 80066c0:	d928      	bls.n	8006714 <_strtod_l+0x1a4>
 80066c2:	2201      	movs	r2, #1
 80066c4:	494e      	ldr	r1, [pc, #312]	@ (8006800 <_strtod_l+0x290>)
 80066c6:	f000 ffc7 	bl	8007658 <strncmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d032      	beq.n	8006734 <_strtod_l+0x1c4>
 80066ce:	2000      	movs	r0, #0
 80066d0:	462a      	mov	r2, r5
 80066d2:	4681      	mov	r9, r0
 80066d4:	463d      	mov	r5, r7
 80066d6:	4603      	mov	r3, r0
 80066d8:	2a65      	cmp	r2, #101	@ 0x65
 80066da:	d001      	beq.n	80066e0 <_strtod_l+0x170>
 80066dc:	2a45      	cmp	r2, #69	@ 0x45
 80066de:	d114      	bne.n	800670a <_strtod_l+0x19a>
 80066e0:	b91d      	cbnz	r5, 80066ea <_strtod_l+0x17a>
 80066e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066e4:	4302      	orrs	r2, r0
 80066e6:	d095      	beq.n	8006614 <_strtod_l+0xa4>
 80066e8:	2500      	movs	r5, #0
 80066ea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80066ec:	1c62      	adds	r2, r4, #1
 80066ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80066f0:	7862      	ldrb	r2, [r4, #1]
 80066f2:	2a2b      	cmp	r2, #43	@ 0x2b
 80066f4:	d077      	beq.n	80067e6 <_strtod_l+0x276>
 80066f6:	2a2d      	cmp	r2, #45	@ 0x2d
 80066f8:	d07b      	beq.n	80067f2 <_strtod_l+0x282>
 80066fa:	f04f 0c00 	mov.w	ip, #0
 80066fe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006702:	2909      	cmp	r1, #9
 8006704:	f240 8082 	bls.w	800680c <_strtod_l+0x29c>
 8006708:	9419      	str	r4, [sp, #100]	@ 0x64
 800670a:	f04f 0800 	mov.w	r8, #0
 800670e:	e0a2      	b.n	8006856 <_strtod_l+0x2e6>
 8006710:	2300      	movs	r3, #0
 8006712:	e7c7      	b.n	80066a4 <_strtod_l+0x134>
 8006714:	2f08      	cmp	r7, #8
 8006716:	bfd5      	itete	le
 8006718:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800671a:	9908      	ldrgt	r1, [sp, #32]
 800671c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006720:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006724:	f100 0001 	add.w	r0, r0, #1
 8006728:	bfd4      	ite	le
 800672a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800672c:	9308      	strgt	r3, [sp, #32]
 800672e:	3701      	adds	r7, #1
 8006730:	9019      	str	r0, [sp, #100]	@ 0x64
 8006732:	e7bf      	b.n	80066b4 <_strtod_l+0x144>
 8006734:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	9219      	str	r2, [sp, #100]	@ 0x64
 800673a:	785a      	ldrb	r2, [r3, #1]
 800673c:	b37f      	cbz	r7, 800679e <_strtod_l+0x22e>
 800673e:	4681      	mov	r9, r0
 8006740:	463d      	mov	r5, r7
 8006742:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006746:	2b09      	cmp	r3, #9
 8006748:	d912      	bls.n	8006770 <_strtod_l+0x200>
 800674a:	2301      	movs	r3, #1
 800674c:	e7c4      	b.n	80066d8 <_strtod_l+0x168>
 800674e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006750:	3001      	adds	r0, #1
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	9219      	str	r2, [sp, #100]	@ 0x64
 8006756:	785a      	ldrb	r2, [r3, #1]
 8006758:	2a30      	cmp	r2, #48	@ 0x30
 800675a:	d0f8      	beq.n	800674e <_strtod_l+0x1de>
 800675c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006760:	2b08      	cmp	r3, #8
 8006762:	f200 84cb 	bhi.w	80070fc <_strtod_l+0xb8c>
 8006766:	4681      	mov	r9, r0
 8006768:	2000      	movs	r0, #0
 800676a:	4605      	mov	r5, r0
 800676c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800676e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006770:	3a30      	subs	r2, #48	@ 0x30
 8006772:	f100 0301 	add.w	r3, r0, #1
 8006776:	d02a      	beq.n	80067ce <_strtod_l+0x25e>
 8006778:	4499      	add	r9, r3
 800677a:	210a      	movs	r1, #10
 800677c:	462b      	mov	r3, r5
 800677e:	eb00 0c05 	add.w	ip, r0, r5
 8006782:	4563      	cmp	r3, ip
 8006784:	d10d      	bne.n	80067a2 <_strtod_l+0x232>
 8006786:	1c69      	adds	r1, r5, #1
 8006788:	4401      	add	r1, r0
 800678a:	4428      	add	r0, r5
 800678c:	2808      	cmp	r0, #8
 800678e:	dc16      	bgt.n	80067be <_strtod_l+0x24e>
 8006790:	230a      	movs	r3, #10
 8006792:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006794:	fb03 2300 	mla	r3, r3, r0, r2
 8006798:	930a      	str	r3, [sp, #40]	@ 0x28
 800679a:	2300      	movs	r3, #0
 800679c:	e018      	b.n	80067d0 <_strtod_l+0x260>
 800679e:	4638      	mov	r0, r7
 80067a0:	e7da      	b.n	8006758 <_strtod_l+0x1e8>
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	f103 0301 	add.w	r3, r3, #1
 80067a8:	dc03      	bgt.n	80067b2 <_strtod_l+0x242>
 80067aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80067ac:	434e      	muls	r6, r1
 80067ae:	960a      	str	r6, [sp, #40]	@ 0x28
 80067b0:	e7e7      	b.n	8006782 <_strtod_l+0x212>
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	bfde      	ittt	le
 80067b6:	9e08      	ldrle	r6, [sp, #32]
 80067b8:	434e      	mulle	r6, r1
 80067ba:	9608      	strle	r6, [sp, #32]
 80067bc:	e7e1      	b.n	8006782 <_strtod_l+0x212>
 80067be:	280f      	cmp	r0, #15
 80067c0:	dceb      	bgt.n	800679a <_strtod_l+0x22a>
 80067c2:	230a      	movs	r3, #10
 80067c4:	9808      	ldr	r0, [sp, #32]
 80067c6:	fb03 2300 	mla	r3, r3, r0, r2
 80067ca:	9308      	str	r3, [sp, #32]
 80067cc:	e7e5      	b.n	800679a <_strtod_l+0x22a>
 80067ce:	4629      	mov	r1, r5
 80067d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067d2:	460d      	mov	r5, r1
 80067d4:	1c50      	adds	r0, r2, #1
 80067d6:	9019      	str	r0, [sp, #100]	@ 0x64
 80067d8:	7852      	ldrb	r2, [r2, #1]
 80067da:	4618      	mov	r0, r3
 80067dc:	e7b1      	b.n	8006742 <_strtod_l+0x1d2>
 80067de:	f04f 0900 	mov.w	r9, #0
 80067e2:	2301      	movs	r3, #1
 80067e4:	e77d      	b.n	80066e2 <_strtod_l+0x172>
 80067e6:	f04f 0c00 	mov.w	ip, #0
 80067ea:	1ca2      	adds	r2, r4, #2
 80067ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80067ee:	78a2      	ldrb	r2, [r4, #2]
 80067f0:	e785      	b.n	80066fe <_strtod_l+0x18e>
 80067f2:	f04f 0c01 	mov.w	ip, #1
 80067f6:	e7f8      	b.n	80067ea <_strtod_l+0x27a>
 80067f8:	08008928 	.word	0x08008928
 80067fc:	7ff00000 	.word	0x7ff00000
 8006800:	08008910 	.word	0x08008910
 8006804:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006806:	1c51      	adds	r1, r2, #1
 8006808:	9119      	str	r1, [sp, #100]	@ 0x64
 800680a:	7852      	ldrb	r2, [r2, #1]
 800680c:	2a30      	cmp	r2, #48	@ 0x30
 800680e:	d0f9      	beq.n	8006804 <_strtod_l+0x294>
 8006810:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006814:	2908      	cmp	r1, #8
 8006816:	f63f af78 	bhi.w	800670a <_strtod_l+0x19a>
 800681a:	f04f 080a 	mov.w	r8, #10
 800681e:	3a30      	subs	r2, #48	@ 0x30
 8006820:	920e      	str	r2, [sp, #56]	@ 0x38
 8006822:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006824:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006826:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006828:	1c56      	adds	r6, r2, #1
 800682a:	9619      	str	r6, [sp, #100]	@ 0x64
 800682c:	7852      	ldrb	r2, [r2, #1]
 800682e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006832:	f1be 0f09 	cmp.w	lr, #9
 8006836:	d939      	bls.n	80068ac <_strtod_l+0x33c>
 8006838:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800683a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800683e:	1a76      	subs	r6, r6, r1
 8006840:	2e08      	cmp	r6, #8
 8006842:	dc03      	bgt.n	800684c <_strtod_l+0x2dc>
 8006844:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006846:	4588      	cmp	r8, r1
 8006848:	bfa8      	it	ge
 800684a:	4688      	movge	r8, r1
 800684c:	f1bc 0f00 	cmp.w	ip, #0
 8006850:	d001      	beq.n	8006856 <_strtod_l+0x2e6>
 8006852:	f1c8 0800 	rsb	r8, r8, #0
 8006856:	2d00      	cmp	r5, #0
 8006858:	d14e      	bne.n	80068f8 <_strtod_l+0x388>
 800685a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800685c:	4308      	orrs	r0, r1
 800685e:	f47f aec0 	bne.w	80065e2 <_strtod_l+0x72>
 8006862:	2b00      	cmp	r3, #0
 8006864:	f47f aed6 	bne.w	8006614 <_strtod_l+0xa4>
 8006868:	2a69      	cmp	r2, #105	@ 0x69
 800686a:	d028      	beq.n	80068be <_strtod_l+0x34e>
 800686c:	dc25      	bgt.n	80068ba <_strtod_l+0x34a>
 800686e:	2a49      	cmp	r2, #73	@ 0x49
 8006870:	d025      	beq.n	80068be <_strtod_l+0x34e>
 8006872:	2a4e      	cmp	r2, #78	@ 0x4e
 8006874:	f47f aece 	bne.w	8006614 <_strtod_l+0xa4>
 8006878:	499a      	ldr	r1, [pc, #616]	@ (8006ae4 <_strtod_l+0x574>)
 800687a:	a819      	add	r0, sp, #100	@ 0x64
 800687c:	f001 f9de 	bl	8007c3c <__match>
 8006880:	2800      	cmp	r0, #0
 8006882:	f43f aec7 	beq.w	8006614 <_strtod_l+0xa4>
 8006886:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b28      	cmp	r3, #40	@ 0x28
 800688c:	d12e      	bne.n	80068ec <_strtod_l+0x37c>
 800688e:	4996      	ldr	r1, [pc, #600]	@ (8006ae8 <_strtod_l+0x578>)
 8006890:	aa1c      	add	r2, sp, #112	@ 0x70
 8006892:	a819      	add	r0, sp, #100	@ 0x64
 8006894:	f001 f9e6 	bl	8007c64 <__hexnan>
 8006898:	2805      	cmp	r0, #5
 800689a:	d127      	bne.n	80068ec <_strtod_l+0x37c>
 800689c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800689e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80068a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80068a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80068aa:	e69a      	b.n	80065e2 <_strtod_l+0x72>
 80068ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80068ae:	fb08 2101 	mla	r1, r8, r1, r2
 80068b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80068b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80068b8:	e7b5      	b.n	8006826 <_strtod_l+0x2b6>
 80068ba:	2a6e      	cmp	r2, #110	@ 0x6e
 80068bc:	e7da      	b.n	8006874 <_strtod_l+0x304>
 80068be:	498b      	ldr	r1, [pc, #556]	@ (8006aec <_strtod_l+0x57c>)
 80068c0:	a819      	add	r0, sp, #100	@ 0x64
 80068c2:	f001 f9bb 	bl	8007c3c <__match>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	f43f aea4 	beq.w	8006614 <_strtod_l+0xa4>
 80068cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068ce:	4988      	ldr	r1, [pc, #544]	@ (8006af0 <_strtod_l+0x580>)
 80068d0:	3b01      	subs	r3, #1
 80068d2:	a819      	add	r0, sp, #100	@ 0x64
 80068d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80068d6:	f001 f9b1 	bl	8007c3c <__match>
 80068da:	b910      	cbnz	r0, 80068e2 <_strtod_l+0x372>
 80068dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068de:	3301      	adds	r3, #1
 80068e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80068e2:	f04f 0a00 	mov.w	sl, #0
 80068e6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006af4 <_strtod_l+0x584>
 80068ea:	e67a      	b.n	80065e2 <_strtod_l+0x72>
 80068ec:	4882      	ldr	r0, [pc, #520]	@ (8006af8 <_strtod_l+0x588>)
 80068ee:	f000 fee3 	bl	80076b8 <nan>
 80068f2:	4682      	mov	sl, r0
 80068f4:	468b      	mov	fp, r1
 80068f6:	e674      	b.n	80065e2 <_strtod_l+0x72>
 80068f8:	eba8 0309 	sub.w	r3, r8, r9
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	bf08      	it	eq
 8006900:	462f      	moveq	r7, r5
 8006902:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006904:	2d10      	cmp	r5, #16
 8006906:	462c      	mov	r4, r5
 8006908:	9309      	str	r3, [sp, #36]	@ 0x24
 800690a:	bfa8      	it	ge
 800690c:	2410      	movge	r4, #16
 800690e:	f7f9 fd69 	bl	80003e4 <__aeabi_ui2d>
 8006912:	2d09      	cmp	r5, #9
 8006914:	4682      	mov	sl, r0
 8006916:	468b      	mov	fp, r1
 8006918:	dc11      	bgt.n	800693e <_strtod_l+0x3ce>
 800691a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	f43f ae60 	beq.w	80065e2 <_strtod_l+0x72>
 8006922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006924:	dd76      	ble.n	8006a14 <_strtod_l+0x4a4>
 8006926:	2b16      	cmp	r3, #22
 8006928:	dc5d      	bgt.n	80069e6 <_strtod_l+0x476>
 800692a:	4974      	ldr	r1, [pc, #464]	@ (8006afc <_strtod_l+0x58c>)
 800692c:	4652      	mov	r2, sl
 800692e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006932:	465b      	mov	r3, fp
 8006934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006938:	f7f9 fdce 	bl	80004d8 <__aeabi_dmul>
 800693c:	e7d9      	b.n	80068f2 <_strtod_l+0x382>
 800693e:	4b6f      	ldr	r3, [pc, #444]	@ (8006afc <_strtod_l+0x58c>)
 8006940:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006944:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006948:	f7f9 fdc6 	bl	80004d8 <__aeabi_dmul>
 800694c:	4682      	mov	sl, r0
 800694e:	9808      	ldr	r0, [sp, #32]
 8006950:	468b      	mov	fp, r1
 8006952:	f7f9 fd47 	bl	80003e4 <__aeabi_ui2d>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4650      	mov	r0, sl
 800695c:	4659      	mov	r1, fp
 800695e:	f7f9 fc05 	bl	800016c <__adddf3>
 8006962:	2d0f      	cmp	r5, #15
 8006964:	4682      	mov	sl, r0
 8006966:	468b      	mov	fp, r1
 8006968:	ddd7      	ble.n	800691a <_strtod_l+0x3aa>
 800696a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696c:	1b2c      	subs	r4, r5, r4
 800696e:	441c      	add	r4, r3
 8006970:	2c00      	cmp	r4, #0
 8006972:	f340 8096 	ble.w	8006aa2 <_strtod_l+0x532>
 8006976:	f014 030f 	ands.w	r3, r4, #15
 800697a:	d00a      	beq.n	8006992 <_strtod_l+0x422>
 800697c:	495f      	ldr	r1, [pc, #380]	@ (8006afc <_strtod_l+0x58c>)
 800697e:	4652      	mov	r2, sl
 8006980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006988:	465b      	mov	r3, fp
 800698a:	f7f9 fda5 	bl	80004d8 <__aeabi_dmul>
 800698e:	4682      	mov	sl, r0
 8006990:	468b      	mov	fp, r1
 8006992:	f034 040f 	bics.w	r4, r4, #15
 8006996:	d073      	beq.n	8006a80 <_strtod_l+0x510>
 8006998:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800699c:	dd48      	ble.n	8006a30 <_strtod_l+0x4c0>
 800699e:	2400      	movs	r4, #0
 80069a0:	46a0      	mov	r8, r4
 80069a2:	46a1      	mov	r9, r4
 80069a4:	940a      	str	r4, [sp, #40]	@ 0x28
 80069a6:	2322      	movs	r3, #34	@ 0x22
 80069a8:	f04f 0a00 	mov.w	sl, #0
 80069ac:	9a05      	ldr	r2, [sp, #20]
 80069ae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006af4 <_strtod_l+0x584>
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f43f ae13 	beq.w	80065e2 <_strtod_l+0x72>
 80069bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069be:	9805      	ldr	r0, [sp, #20]
 80069c0:	f7ff f94c 	bl	8005c5c <_Bfree>
 80069c4:	4649      	mov	r1, r9
 80069c6:	9805      	ldr	r0, [sp, #20]
 80069c8:	f7ff f948 	bl	8005c5c <_Bfree>
 80069cc:	4641      	mov	r1, r8
 80069ce:	9805      	ldr	r0, [sp, #20]
 80069d0:	f7ff f944 	bl	8005c5c <_Bfree>
 80069d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069d6:	9805      	ldr	r0, [sp, #20]
 80069d8:	f7ff f940 	bl	8005c5c <_Bfree>
 80069dc:	4621      	mov	r1, r4
 80069de:	9805      	ldr	r0, [sp, #20]
 80069e0:	f7ff f93c 	bl	8005c5c <_Bfree>
 80069e4:	e5fd      	b.n	80065e2 <_strtod_l+0x72>
 80069e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80069ec:	4293      	cmp	r3, r2
 80069ee:	dbbc      	blt.n	800696a <_strtod_l+0x3fa>
 80069f0:	4c42      	ldr	r4, [pc, #264]	@ (8006afc <_strtod_l+0x58c>)
 80069f2:	f1c5 050f 	rsb	r5, r5, #15
 80069f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80069fa:	4652      	mov	r2, sl
 80069fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a00:	465b      	mov	r3, fp
 8006a02:	f7f9 fd69 	bl	80004d8 <__aeabi_dmul>
 8006a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a08:	1b5d      	subs	r5, r3, r5
 8006a0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a12:	e791      	b.n	8006938 <_strtod_l+0x3c8>
 8006a14:	3316      	adds	r3, #22
 8006a16:	dba8      	blt.n	800696a <_strtod_l+0x3fa>
 8006a18:	4b38      	ldr	r3, [pc, #224]	@ (8006afc <_strtod_l+0x58c>)
 8006a1a:	eba9 0808 	sub.w	r8, r9, r8
 8006a1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006a22:	4650      	mov	r0, sl
 8006a24:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006a28:	4659      	mov	r1, fp
 8006a2a:	f7f9 fe7f 	bl	800072c <__aeabi_ddiv>
 8006a2e:	e760      	b.n	80068f2 <_strtod_l+0x382>
 8006a30:	4b33      	ldr	r3, [pc, #204]	@ (8006b00 <_strtod_l+0x590>)
 8006a32:	4650      	mov	r0, sl
 8006a34:	9308      	str	r3, [sp, #32]
 8006a36:	2300      	movs	r3, #0
 8006a38:	4659      	mov	r1, fp
 8006a3a:	461e      	mov	r6, r3
 8006a3c:	1124      	asrs	r4, r4, #4
 8006a3e:	2c01      	cmp	r4, #1
 8006a40:	dc21      	bgt.n	8006a86 <_strtod_l+0x516>
 8006a42:	b10b      	cbz	r3, 8006a48 <_strtod_l+0x4d8>
 8006a44:	4682      	mov	sl, r0
 8006a46:	468b      	mov	fp, r1
 8006a48:	492d      	ldr	r1, [pc, #180]	@ (8006b00 <_strtod_l+0x590>)
 8006a4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006a4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006a52:	4652      	mov	r2, sl
 8006a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a58:	465b      	mov	r3, fp
 8006a5a:	f7f9 fd3d 	bl	80004d8 <__aeabi_dmul>
 8006a5e:	4b25      	ldr	r3, [pc, #148]	@ (8006af4 <_strtod_l+0x584>)
 8006a60:	460a      	mov	r2, r1
 8006a62:	400b      	ands	r3, r1
 8006a64:	4927      	ldr	r1, [pc, #156]	@ (8006b04 <_strtod_l+0x594>)
 8006a66:	4682      	mov	sl, r0
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	d898      	bhi.n	800699e <_strtod_l+0x42e>
 8006a6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006a70:	428b      	cmp	r3, r1
 8006a72:	bf86      	itte	hi
 8006a74:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a78:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006b08 <_strtod_l+0x598>
 8006a7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006a80:	2300      	movs	r3, #0
 8006a82:	9308      	str	r3, [sp, #32]
 8006a84:	e07a      	b.n	8006b7c <_strtod_l+0x60c>
 8006a86:	07e2      	lsls	r2, r4, #31
 8006a88:	d505      	bpl.n	8006a96 <_strtod_l+0x526>
 8006a8a:	9b08      	ldr	r3, [sp, #32]
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fd22 	bl	80004d8 <__aeabi_dmul>
 8006a94:	2301      	movs	r3, #1
 8006a96:	9a08      	ldr	r2, [sp, #32]
 8006a98:	3601      	adds	r6, #1
 8006a9a:	3208      	adds	r2, #8
 8006a9c:	1064      	asrs	r4, r4, #1
 8006a9e:	9208      	str	r2, [sp, #32]
 8006aa0:	e7cd      	b.n	8006a3e <_strtod_l+0x4ce>
 8006aa2:	d0ed      	beq.n	8006a80 <_strtod_l+0x510>
 8006aa4:	4264      	negs	r4, r4
 8006aa6:	f014 020f 	ands.w	r2, r4, #15
 8006aaa:	d00a      	beq.n	8006ac2 <_strtod_l+0x552>
 8006aac:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <_strtod_l+0x58c>)
 8006aae:	4650      	mov	r0, sl
 8006ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7f9 fe37 	bl	800072c <__aeabi_ddiv>
 8006abe:	4682      	mov	sl, r0
 8006ac0:	468b      	mov	fp, r1
 8006ac2:	1124      	asrs	r4, r4, #4
 8006ac4:	d0dc      	beq.n	8006a80 <_strtod_l+0x510>
 8006ac6:	2c1f      	cmp	r4, #31
 8006ac8:	dd20      	ble.n	8006b0c <_strtod_l+0x59c>
 8006aca:	2400      	movs	r4, #0
 8006acc:	46a0      	mov	r8, r4
 8006ace:	46a1      	mov	r9, r4
 8006ad0:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ad2:	2322      	movs	r3, #34	@ 0x22
 8006ad4:	9a05      	ldr	r2, [sp, #20]
 8006ad6:	f04f 0a00 	mov.w	sl, #0
 8006ada:	f04f 0b00 	mov.w	fp, #0
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e768      	b.n	80069b4 <_strtod_l+0x444>
 8006ae2:	bf00      	nop
 8006ae4:	080086ff 	.word	0x080086ff
 8006ae8:	08008914 	.word	0x08008914
 8006aec:	080086f7 	.word	0x080086f7
 8006af0:	0800872e 	.word	0x0800872e
 8006af4:	7ff00000 	.word	0x7ff00000
 8006af8:	08008abd 	.word	0x08008abd
 8006afc:	08008848 	.word	0x08008848
 8006b00:	08008820 	.word	0x08008820
 8006b04:	7ca00000 	.word	0x7ca00000
 8006b08:	7fefffff 	.word	0x7fefffff
 8006b0c:	f014 0310 	ands.w	r3, r4, #16
 8006b10:	bf18      	it	ne
 8006b12:	236a      	movne	r3, #106	@ 0x6a
 8006b14:	4650      	mov	r0, sl
 8006b16:	9308      	str	r3, [sp, #32]
 8006b18:	4659      	mov	r1, fp
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4ea9      	ldr	r6, [pc, #676]	@ (8006dc4 <_strtod_l+0x854>)
 8006b1e:	07e2      	lsls	r2, r4, #31
 8006b20:	d504      	bpl.n	8006b2c <_strtod_l+0x5bc>
 8006b22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b26:	f7f9 fcd7 	bl	80004d8 <__aeabi_dmul>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	1064      	asrs	r4, r4, #1
 8006b2e:	f106 0608 	add.w	r6, r6, #8
 8006b32:	d1f4      	bne.n	8006b1e <_strtod_l+0x5ae>
 8006b34:	b10b      	cbz	r3, 8006b3a <_strtod_l+0x5ca>
 8006b36:	4682      	mov	sl, r0
 8006b38:	468b      	mov	fp, r1
 8006b3a:	9b08      	ldr	r3, [sp, #32]
 8006b3c:	b1b3      	cbz	r3, 8006b6c <_strtod_l+0x5fc>
 8006b3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	4659      	mov	r1, fp
 8006b4a:	dd0f      	ble.n	8006b6c <_strtod_l+0x5fc>
 8006b4c:	2b1f      	cmp	r3, #31
 8006b4e:	dd57      	ble.n	8006c00 <_strtod_l+0x690>
 8006b50:	2b34      	cmp	r3, #52	@ 0x34
 8006b52:	bfd8      	it	le
 8006b54:	f04f 33ff 	movle.w	r3, #4294967295
 8006b58:	f04f 0a00 	mov.w	sl, #0
 8006b5c:	bfcf      	iteee	gt
 8006b5e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006b62:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006b66:	4093      	lslle	r3, r2
 8006b68:	ea03 0b01 	andle.w	fp, r3, r1
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4650      	mov	r0, sl
 8006b72:	4659      	mov	r1, fp
 8006b74:	f7f9 ff18 	bl	80009a8 <__aeabi_dcmpeq>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d1a6      	bne.n	8006aca <_strtod_l+0x55a>
 8006b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b7e:	463a      	mov	r2, r7
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b84:	462b      	mov	r3, r5
 8006b86:	9805      	ldr	r0, [sp, #20]
 8006b88:	f7ff f8d0 	bl	8005d2c <__s2b>
 8006b8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f43f af05 	beq.w	800699e <_strtod_l+0x42e>
 8006b94:	2400      	movs	r4, #0
 8006b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b98:	eba9 0308 	sub.w	r3, r9, r8
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	bfa8      	it	ge
 8006ba0:	2300      	movge	r3, #0
 8006ba2:	46a0      	mov	r8, r4
 8006ba4:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ba6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006baa:	9316      	str	r3, [sp, #88]	@ 0x58
 8006bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bae:	9805      	ldr	r0, [sp, #20]
 8006bb0:	6859      	ldr	r1, [r3, #4]
 8006bb2:	f7ff f813 	bl	8005bdc <_Balloc>
 8006bb6:	4681      	mov	r9, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	f43f aef4 	beq.w	80069a6 <_strtod_l+0x436>
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bc0:	300c      	adds	r0, #12
 8006bc2:	691a      	ldr	r2, [r3, #16]
 8006bc4:	f103 010c 	add.w	r1, r3, #12
 8006bc8:	3202      	adds	r2, #2
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	f000 fd66 	bl	800769c <memcpy>
 8006bd0:	ab1c      	add	r3, sp, #112	@ 0x70
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4652      	mov	r2, sl
 8006bda:	465b      	mov	r3, fp
 8006bdc:	9805      	ldr	r0, [sp, #20]
 8006bde:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006be2:	f7ff fbd5 	bl	8006390 <__d2b>
 8006be6:	901a      	str	r0, [sp, #104]	@ 0x68
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f43f aedc 	beq.w	80069a6 <_strtod_l+0x436>
 8006bee:	2101      	movs	r1, #1
 8006bf0:	9805      	ldr	r0, [sp, #20]
 8006bf2:	f7ff f931 	bl	8005e58 <__i2b>
 8006bf6:	4680      	mov	r8, r0
 8006bf8:	b948      	cbnz	r0, 8006c0e <_strtod_l+0x69e>
 8006bfa:	f04f 0800 	mov.w	r8, #0
 8006bfe:	e6d2      	b.n	80069a6 <_strtod_l+0x436>
 8006c00:	f04f 32ff 	mov.w	r2, #4294967295
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	ea03 0a0a 	and.w	sl, r3, sl
 8006c0c:	e7ae      	b.n	8006b6c <_strtod_l+0x5fc>
 8006c0e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006c10:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006c12:	2d00      	cmp	r5, #0
 8006c14:	bfab      	itete	ge
 8006c16:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006c18:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006c1a:	18ef      	addge	r7, r5, r3
 8006c1c:	1b5e      	sublt	r6, r3, r5
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	bfa8      	it	ge
 8006c22:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006c24:	eba5 0503 	sub.w	r5, r5, r3
 8006c28:	4415      	add	r5, r2
 8006c2a:	4b67      	ldr	r3, [pc, #412]	@ (8006dc8 <_strtod_l+0x858>)
 8006c2c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006c30:	bfb8      	it	lt
 8006c32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006c34:	429d      	cmp	r5, r3
 8006c36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c3a:	da50      	bge.n	8006cde <_strtod_l+0x76e>
 8006c3c:	1b5b      	subs	r3, r3, r5
 8006c3e:	2b1f      	cmp	r3, #31
 8006c40:	f04f 0101 	mov.w	r1, #1
 8006c44:	eba2 0203 	sub.w	r2, r2, r3
 8006c48:	dc3d      	bgt.n	8006cc6 <_strtod_l+0x756>
 8006c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c50:	2300      	movs	r3, #0
 8006c52:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c54:	18bd      	adds	r5, r7, r2
 8006c56:	9b08      	ldr	r3, [sp, #32]
 8006c58:	42af      	cmp	r7, r5
 8006c5a:	4416      	add	r6, r2
 8006c5c:	441e      	add	r6, r3
 8006c5e:	463b      	mov	r3, r7
 8006c60:	bfa8      	it	ge
 8006c62:	462b      	movge	r3, r5
 8006c64:	42b3      	cmp	r3, r6
 8006c66:	bfa8      	it	ge
 8006c68:	4633      	movge	r3, r6
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	bfc2      	ittt	gt
 8006c6e:	1aed      	subgt	r5, r5, r3
 8006c70:	1af6      	subgt	r6, r6, r3
 8006c72:	1aff      	subgt	r7, r7, r3
 8006c74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dd16      	ble.n	8006ca8 <_strtod_l+0x738>
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	9805      	ldr	r0, [sp, #20]
 8006c80:	f7ff f9a8 	bl	8005fd4 <__pow5mult>
 8006c84:	4680      	mov	r8, r0
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d0b7      	beq.n	8006bfa <_strtod_l+0x68a>
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c8e:	9805      	ldr	r0, [sp, #20]
 8006c90:	f7ff f8f8 	bl	8005e84 <__multiply>
 8006c94:	900e      	str	r0, [sp, #56]	@ 0x38
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f43f ae85 	beq.w	80069a6 <_strtod_l+0x436>
 8006c9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c9e:	9805      	ldr	r0, [sp, #20]
 8006ca0:	f7fe ffdc 	bl	8005c5c <_Bfree>
 8006ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ca6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	dc1d      	bgt.n	8006ce8 <_strtod_l+0x778>
 8006cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	dd23      	ble.n	8006cfa <_strtod_l+0x78a>
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006cb6:	9805      	ldr	r0, [sp, #20]
 8006cb8:	f7ff f98c 	bl	8005fd4 <__pow5mult>
 8006cbc:	4681      	mov	r9, r0
 8006cbe:	b9e0      	cbnz	r0, 8006cfa <_strtod_l+0x78a>
 8006cc0:	f04f 0900 	mov.w	r9, #0
 8006cc4:	e66f      	b.n	80069a6 <_strtod_l+0x436>
 8006cc6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006cca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006cce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006cd2:	35e2      	adds	r5, #226	@ 0xe2
 8006cd4:	fa01 f305 	lsl.w	r3, r1, r5
 8006cd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cda:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006cdc:	e7ba      	b.n	8006c54 <_strtod_l+0x6e4>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ce6:	e7b5      	b.n	8006c54 <_strtod_l+0x6e4>
 8006ce8:	462a      	mov	r2, r5
 8006cea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cec:	9805      	ldr	r0, [sp, #20]
 8006cee:	f7ff f9cb 	bl	8006088 <__lshift>
 8006cf2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d1d9      	bne.n	8006cac <_strtod_l+0x73c>
 8006cf8:	e655      	b.n	80069a6 <_strtod_l+0x436>
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	dd07      	ble.n	8006d0e <_strtod_l+0x79e>
 8006cfe:	4649      	mov	r1, r9
 8006d00:	4632      	mov	r2, r6
 8006d02:	9805      	ldr	r0, [sp, #20]
 8006d04:	f7ff f9c0 	bl	8006088 <__lshift>
 8006d08:	4681      	mov	r9, r0
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d0d8      	beq.n	8006cc0 <_strtod_l+0x750>
 8006d0e:	2f00      	cmp	r7, #0
 8006d10:	dd08      	ble.n	8006d24 <_strtod_l+0x7b4>
 8006d12:	4641      	mov	r1, r8
 8006d14:	463a      	mov	r2, r7
 8006d16:	9805      	ldr	r0, [sp, #20]
 8006d18:	f7ff f9b6 	bl	8006088 <__lshift>
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f43f ae41 	beq.w	80069a6 <_strtod_l+0x436>
 8006d24:	464a      	mov	r2, r9
 8006d26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d28:	9805      	ldr	r0, [sp, #20]
 8006d2a:	f7ff fa35 	bl	8006198 <__mdiff>
 8006d2e:	4604      	mov	r4, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f43f ae38 	beq.w	80069a6 <_strtod_l+0x436>
 8006d36:	68c3      	ldr	r3, [r0, #12]
 8006d38:	4641      	mov	r1, r8
 8006d3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60c3      	str	r3, [r0, #12]
 8006d40:	f7ff fa0e 	bl	8006160 <__mcmp>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	da45      	bge.n	8006dd4 <_strtod_l+0x864>
 8006d48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d4a:	ea53 030a 	orrs.w	r3, r3, sl
 8006d4e:	d16b      	bne.n	8006e28 <_strtod_l+0x8b8>
 8006d50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d167      	bne.n	8006e28 <_strtod_l+0x8b8>
 8006d58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d5c:	0d1b      	lsrs	r3, r3, #20
 8006d5e:	051b      	lsls	r3, r3, #20
 8006d60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d64:	d960      	bls.n	8006e28 <_strtod_l+0x8b8>
 8006d66:	6963      	ldr	r3, [r4, #20]
 8006d68:	b913      	cbnz	r3, 8006d70 <_strtod_l+0x800>
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	dd5b      	ble.n	8006e28 <_strtod_l+0x8b8>
 8006d70:	4621      	mov	r1, r4
 8006d72:	2201      	movs	r2, #1
 8006d74:	9805      	ldr	r0, [sp, #20]
 8006d76:	f7ff f987 	bl	8006088 <__lshift>
 8006d7a:	4641      	mov	r1, r8
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	f7ff f9ef 	bl	8006160 <__mcmp>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	dd50      	ble.n	8006e28 <_strtod_l+0x8b8>
 8006d86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d8a:	9a08      	ldr	r2, [sp, #32]
 8006d8c:	0d1b      	lsrs	r3, r3, #20
 8006d8e:	051b      	lsls	r3, r3, #20
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	d06a      	beq.n	8006e6a <_strtod_l+0x8fa>
 8006d94:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d98:	d867      	bhi.n	8006e6a <_strtod_l+0x8fa>
 8006d9a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006d9e:	f67f ae98 	bls.w	8006ad2 <_strtod_l+0x562>
 8006da2:	4650      	mov	r0, sl
 8006da4:	4659      	mov	r1, fp
 8006da6:	4b09      	ldr	r3, [pc, #36]	@ (8006dcc <_strtod_l+0x85c>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	f7f9 fb95 	bl	80004d8 <__aeabi_dmul>
 8006dae:	4b08      	ldr	r3, [pc, #32]	@ (8006dd0 <_strtod_l+0x860>)
 8006db0:	4682      	mov	sl, r0
 8006db2:	400b      	ands	r3, r1
 8006db4:	468b      	mov	fp, r1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f47f ae00 	bne.w	80069bc <_strtod_l+0x44c>
 8006dbc:	2322      	movs	r3, #34	@ 0x22
 8006dbe:	9a05      	ldr	r2, [sp, #20]
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	e5fb      	b.n	80069bc <_strtod_l+0x44c>
 8006dc4:	08008940 	.word	0x08008940
 8006dc8:	fffffc02 	.word	0xfffffc02
 8006dcc:	39500000 	.word	0x39500000
 8006dd0:	7ff00000 	.word	0x7ff00000
 8006dd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006dd8:	d165      	bne.n	8006ea6 <_strtod_l+0x936>
 8006dda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006ddc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006de0:	b35a      	cbz	r2, 8006e3a <_strtod_l+0x8ca>
 8006de2:	4a99      	ldr	r2, [pc, #612]	@ (8007048 <_strtod_l+0xad8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d12b      	bne.n	8006e40 <_strtod_l+0x8d0>
 8006de8:	9b08      	ldr	r3, [sp, #32]
 8006dea:	4651      	mov	r1, sl
 8006dec:	b303      	cbz	r3, 8006e30 <_strtod_l+0x8c0>
 8006dee:	465a      	mov	r2, fp
 8006df0:	4b96      	ldr	r3, [pc, #600]	@ (800704c <_strtod_l+0xadc>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006df8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfc:	d81b      	bhi.n	8006e36 <_strtod_l+0x8c6>
 8006dfe:	0d1b      	lsrs	r3, r3, #20
 8006e00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	d119      	bne.n	8006e40 <_strtod_l+0x8d0>
 8006e0c:	4b90      	ldr	r3, [pc, #576]	@ (8007050 <_strtod_l+0xae0>)
 8006e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d102      	bne.n	8006e1a <_strtod_l+0x8aa>
 8006e14:	3101      	adds	r1, #1
 8006e16:	f43f adc6 	beq.w	80069a6 <_strtod_l+0x436>
 8006e1a:	f04f 0a00 	mov.w	sl, #0
 8006e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800704c <_strtod_l+0xadc>)
 8006e20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e22:	401a      	ands	r2, r3
 8006e24:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006e28:	9b08      	ldr	r3, [sp, #32]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1b9      	bne.n	8006da2 <_strtod_l+0x832>
 8006e2e:	e5c5      	b.n	80069bc <_strtod_l+0x44c>
 8006e30:	f04f 33ff 	mov.w	r3, #4294967295
 8006e34:	e7e8      	b.n	8006e08 <_strtod_l+0x898>
 8006e36:	4613      	mov	r3, r2
 8006e38:	e7e6      	b.n	8006e08 <_strtod_l+0x898>
 8006e3a:	ea53 030a 	orrs.w	r3, r3, sl
 8006e3e:	d0a2      	beq.n	8006d86 <_strtod_l+0x816>
 8006e40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e42:	b1db      	cbz	r3, 8006e7c <_strtod_l+0x90c>
 8006e44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e46:	4213      	tst	r3, r2
 8006e48:	d0ee      	beq.n	8006e28 <_strtod_l+0x8b8>
 8006e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	4659      	mov	r1, fp
 8006e50:	9a08      	ldr	r2, [sp, #32]
 8006e52:	b1bb      	cbz	r3, 8006e84 <_strtod_l+0x914>
 8006e54:	f7ff fb68 	bl	8006528 <sulp>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e60:	f7f9 f984 	bl	800016c <__adddf3>
 8006e64:	4682      	mov	sl, r0
 8006e66:	468b      	mov	fp, r1
 8006e68:	e7de      	b.n	8006e28 <_strtod_l+0x8b8>
 8006e6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006e6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e72:	f04f 3aff 	mov.w	sl, #4294967295
 8006e76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e7a:	e7d5      	b.n	8006e28 <_strtod_l+0x8b8>
 8006e7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e7e:	ea13 0f0a 	tst.w	r3, sl
 8006e82:	e7e1      	b.n	8006e48 <_strtod_l+0x8d8>
 8006e84:	f7ff fb50 	bl	8006528 <sulp>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e90:	f7f9 f96a 	bl	8000168 <__aeabi_dsub>
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4682      	mov	sl, r0
 8006e9a:	468b      	mov	fp, r1
 8006e9c:	f7f9 fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d0c1      	beq.n	8006e28 <_strtod_l+0x8b8>
 8006ea4:	e615      	b.n	8006ad2 <_strtod_l+0x562>
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f7ff fac9 	bl	8006440 <__ratio>
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	460f      	mov	r7, r1
 8006eb8:	f7f9 fd8a 	bl	80009d0 <__aeabi_dcmple>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d06d      	beq.n	8006f9c <_strtod_l+0xa2c>
 8006ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d178      	bne.n	8006fb8 <_strtod_l+0xa48>
 8006ec6:	f1ba 0f00 	cmp.w	sl, #0
 8006eca:	d156      	bne.n	8006f7a <_strtod_l+0xa0a>
 8006ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d158      	bne.n	8006f88 <_strtod_l+0xa18>
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	4630      	mov	r0, r6
 8006eda:	4639      	mov	r1, r7
 8006edc:	4b5d      	ldr	r3, [pc, #372]	@ (8007054 <_strtod_l+0xae4>)
 8006ede:	f7f9 fd6d 	bl	80009bc <__aeabi_dcmplt>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d157      	bne.n	8006f96 <_strtod_l+0xa26>
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	4639      	mov	r1, r7
 8006eea:	2200      	movs	r2, #0
 8006eec:	4b5a      	ldr	r3, [pc, #360]	@ (8007058 <_strtod_l+0xae8>)
 8006eee:	f7f9 faf3 	bl	80004d8 <__aeabi_dmul>
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460f      	mov	r7, r1
 8006ef6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006efa:	9606      	str	r6, [sp, #24]
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f02:	4d52      	ldr	r5, [pc, #328]	@ (800704c <_strtod_l+0xadc>)
 8006f04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f0a:	401d      	ands	r5, r3
 8006f0c:	4b53      	ldr	r3, [pc, #332]	@ (800705c <_strtod_l+0xaec>)
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	f040 80aa 	bne.w	8007068 <_strtod_l+0xaf8>
 8006f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f16:	4650      	mov	r0, sl
 8006f18:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	f7ff f9cf 	bl	80062c0 <__ulp>
 8006f22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f26:	f7f9 fad7 	bl	80004d8 <__aeabi_dmul>
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	465b      	mov	r3, fp
 8006f2e:	f7f9 f91d 	bl	800016c <__adddf3>
 8006f32:	460b      	mov	r3, r1
 8006f34:	4945      	ldr	r1, [pc, #276]	@ (800704c <_strtod_l+0xadc>)
 8006f36:	4a4a      	ldr	r2, [pc, #296]	@ (8007060 <_strtod_l+0xaf0>)
 8006f38:	4019      	ands	r1, r3
 8006f3a:	4291      	cmp	r1, r2
 8006f3c:	4682      	mov	sl, r0
 8006f3e:	d942      	bls.n	8006fc6 <_strtod_l+0xa56>
 8006f40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f42:	4b43      	ldr	r3, [pc, #268]	@ (8007050 <_strtod_l+0xae0>)
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d103      	bne.n	8006f50 <_strtod_l+0x9e0>
 8006f48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f43f ad2b 	beq.w	80069a6 <_strtod_l+0x436>
 8006f50:	f04f 3aff 	mov.w	sl, #4294967295
 8006f54:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007050 <_strtod_l+0xae0>
 8006f58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f5a:	9805      	ldr	r0, [sp, #20]
 8006f5c:	f7fe fe7e 	bl	8005c5c <_Bfree>
 8006f60:	4649      	mov	r1, r9
 8006f62:	9805      	ldr	r0, [sp, #20]
 8006f64:	f7fe fe7a 	bl	8005c5c <_Bfree>
 8006f68:	4641      	mov	r1, r8
 8006f6a:	9805      	ldr	r0, [sp, #20]
 8006f6c:	f7fe fe76 	bl	8005c5c <_Bfree>
 8006f70:	4621      	mov	r1, r4
 8006f72:	9805      	ldr	r0, [sp, #20]
 8006f74:	f7fe fe72 	bl	8005c5c <_Bfree>
 8006f78:	e618      	b.n	8006bac <_strtod_l+0x63c>
 8006f7a:	f1ba 0f01 	cmp.w	sl, #1
 8006f7e:	d103      	bne.n	8006f88 <_strtod_l+0xa18>
 8006f80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f43f ada5 	beq.w	8006ad2 <_strtod_l+0x562>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4b36      	ldr	r3, [pc, #216]	@ (8007064 <_strtod_l+0xaf4>)
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f92:	4f30      	ldr	r7, [pc, #192]	@ (8007054 <_strtod_l+0xae4>)
 8006f94:	e7b3      	b.n	8006efe <_strtod_l+0x98e>
 8006f96:	2600      	movs	r6, #0
 8006f98:	4f2f      	ldr	r7, [pc, #188]	@ (8007058 <_strtod_l+0xae8>)
 8006f9a:	e7ac      	b.n	8006ef6 <_strtod_l+0x986>
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8007058 <_strtod_l+0xae8>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f7f9 fa98 	bl	80004d8 <__aeabi_dmul>
 8006fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006faa:	4606      	mov	r6, r0
 8006fac:	460f      	mov	r7, r1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0a1      	beq.n	8006ef6 <_strtod_l+0x986>
 8006fb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006fb6:	e7a2      	b.n	8006efe <_strtod_l+0x98e>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4b26      	ldr	r3, [pc, #152]	@ (8007054 <_strtod_l+0xae4>)
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fc4:	e79b      	b.n	8006efe <_strtod_l+0x98e>
 8006fc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1c1      	bne.n	8006f58 <_strtod_l+0x9e8>
 8006fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fd8:	0d1b      	lsrs	r3, r3, #20
 8006fda:	051b      	lsls	r3, r3, #20
 8006fdc:	429d      	cmp	r5, r3
 8006fde:	d1bb      	bne.n	8006f58 <_strtod_l+0x9e8>
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	f7fa f894 	bl	8001110 <__aeabi_d2lz>
 8006fe8:	f7f9 fa48 	bl	800047c <__aeabi_l2d>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 f8b8 	bl	8000168 <__aeabi_dsub>
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007000:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007006:	ea46 060a 	orr.w	r6, r6, sl
 800700a:	431e      	orrs	r6, r3
 800700c:	d069      	beq.n	80070e2 <_strtod_l+0xb72>
 800700e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007038 <_strtod_l+0xac8>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 fcd2 	bl	80009bc <__aeabi_dcmplt>
 8007018:	2800      	cmp	r0, #0
 800701a:	f47f accf 	bne.w	80069bc <_strtod_l+0x44c>
 800701e:	a308      	add	r3, pc, #32	@ (adr r3, 8007040 <_strtod_l+0xad0>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007028:	f7f9 fce6 	bl	80009f8 <__aeabi_dcmpgt>
 800702c:	2800      	cmp	r0, #0
 800702e:	d093      	beq.n	8006f58 <_strtod_l+0x9e8>
 8007030:	e4c4      	b.n	80069bc <_strtod_l+0x44c>
 8007032:	bf00      	nop
 8007034:	f3af 8000 	nop.w
 8007038:	94a03595 	.word	0x94a03595
 800703c:	3fdfffff 	.word	0x3fdfffff
 8007040:	35afe535 	.word	0x35afe535
 8007044:	3fe00000 	.word	0x3fe00000
 8007048:	000fffff 	.word	0x000fffff
 800704c:	7ff00000 	.word	0x7ff00000
 8007050:	7fefffff 	.word	0x7fefffff
 8007054:	3ff00000 	.word	0x3ff00000
 8007058:	3fe00000 	.word	0x3fe00000
 800705c:	7fe00000 	.word	0x7fe00000
 8007060:	7c9fffff 	.word	0x7c9fffff
 8007064:	bff00000 	.word	0xbff00000
 8007068:	9b08      	ldr	r3, [sp, #32]
 800706a:	b323      	cbz	r3, 80070b6 <_strtod_l+0xb46>
 800706c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007070:	d821      	bhi.n	80070b6 <_strtod_l+0xb46>
 8007072:	a327      	add	r3, pc, #156	@ (adr r3, 8007110 <_strtod_l+0xba0>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fca8 	bl	80009d0 <__aeabi_dcmple>
 8007080:	b1a0      	cbz	r0, 80070ac <_strtod_l+0xb3c>
 8007082:	4639      	mov	r1, r7
 8007084:	4630      	mov	r0, r6
 8007086:	f7f9 fcff 	bl	8000a88 <__aeabi_d2uiz>
 800708a:	2801      	cmp	r0, #1
 800708c:	bf38      	it	cc
 800708e:	2001      	movcc	r0, #1
 8007090:	f7f9 f9a8 	bl	80003e4 <__aeabi_ui2d>
 8007094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007096:	4606      	mov	r6, r0
 8007098:	460f      	mov	r7, r1
 800709a:	b9fb      	cbnz	r3, 80070dc <_strtod_l+0xb6c>
 800709c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070a0:	9014      	str	r0, [sp, #80]	@ 0x50
 80070a2:	9315      	str	r3, [sp, #84]	@ 0x54
 80070a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80070a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80070ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070ae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80070b2:	1b5b      	subs	r3, r3, r5
 80070b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80070b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80070be:	f7ff f8ff 	bl	80062c0 <__ulp>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4650      	mov	r0, sl
 80070c8:	4659      	mov	r1, fp
 80070ca:	f7f9 fa05 	bl	80004d8 <__aeabi_dmul>
 80070ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80070d2:	f7f9 f84b 	bl	800016c <__adddf3>
 80070d6:	4682      	mov	sl, r0
 80070d8:	468b      	mov	fp, r1
 80070da:	e776      	b.n	8006fca <_strtod_l+0xa5a>
 80070dc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80070e0:	e7e0      	b.n	80070a4 <_strtod_l+0xb34>
 80070e2:	a30d      	add	r3, pc, #52	@ (adr r3, 8007118 <_strtod_l+0xba8>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f7f9 fc68 	bl	80009bc <__aeabi_dcmplt>
 80070ec:	e79e      	b.n	800702c <_strtod_l+0xabc>
 80070ee:	2300      	movs	r3, #0
 80070f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070f4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	f7ff ba77 	b.w	80065ea <_strtod_l+0x7a>
 80070fc:	2a65      	cmp	r2, #101	@ 0x65
 80070fe:	f43f ab6e 	beq.w	80067de <_strtod_l+0x26e>
 8007102:	2a45      	cmp	r2, #69	@ 0x45
 8007104:	f43f ab6b 	beq.w	80067de <_strtod_l+0x26e>
 8007108:	2301      	movs	r3, #1
 800710a:	f7ff bba6 	b.w	800685a <_strtod_l+0x2ea>
 800710e:	bf00      	nop
 8007110:	ffc00000 	.word	0xffc00000
 8007114:	41dfffff 	.word	0x41dfffff
 8007118:	94a03595 	.word	0x94a03595
 800711c:	3fcfffff 	.word	0x3fcfffff

08007120 <_strtod_r>:
 8007120:	4b01      	ldr	r3, [pc, #4]	@ (8007128 <_strtod_r+0x8>)
 8007122:	f7ff ba25 	b.w	8006570 <_strtod_l>
 8007126:	bf00      	nop
 8007128:	20000068 	.word	0x20000068

0800712c <_strtol_l.constprop.0>:
 800712c:	2b24      	cmp	r3, #36	@ 0x24
 800712e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007132:	4686      	mov	lr, r0
 8007134:	4690      	mov	r8, r2
 8007136:	d801      	bhi.n	800713c <_strtol_l.constprop.0+0x10>
 8007138:	2b01      	cmp	r3, #1
 800713a:	d106      	bne.n	800714a <_strtol_l.constprop.0+0x1e>
 800713c:	f7fd fdbe 	bl	8004cbc <__errno>
 8007140:	2316      	movs	r3, #22
 8007142:	6003      	str	r3, [r0, #0]
 8007144:	2000      	movs	r0, #0
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	460d      	mov	r5, r1
 800714c:	4833      	ldr	r0, [pc, #204]	@ (800721c <_strtol_l.constprop.0+0xf0>)
 800714e:	462a      	mov	r2, r5
 8007150:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007154:	5d06      	ldrb	r6, [r0, r4]
 8007156:	f016 0608 	ands.w	r6, r6, #8
 800715a:	d1f8      	bne.n	800714e <_strtol_l.constprop.0+0x22>
 800715c:	2c2d      	cmp	r4, #45	@ 0x2d
 800715e:	d12d      	bne.n	80071bc <_strtol_l.constprop.0+0x90>
 8007160:	2601      	movs	r6, #1
 8007162:	782c      	ldrb	r4, [r5, #0]
 8007164:	1c95      	adds	r5, r2, #2
 8007166:	f033 0210 	bics.w	r2, r3, #16
 800716a:	d109      	bne.n	8007180 <_strtol_l.constprop.0+0x54>
 800716c:	2c30      	cmp	r4, #48	@ 0x30
 800716e:	d12a      	bne.n	80071c6 <_strtol_l.constprop.0+0x9a>
 8007170:	782a      	ldrb	r2, [r5, #0]
 8007172:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007176:	2a58      	cmp	r2, #88	@ 0x58
 8007178:	d125      	bne.n	80071c6 <_strtol_l.constprop.0+0x9a>
 800717a:	2310      	movs	r3, #16
 800717c:	786c      	ldrb	r4, [r5, #1]
 800717e:	3502      	adds	r5, #2
 8007180:	2200      	movs	r2, #0
 8007182:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007186:	f10c 3cff 	add.w	ip, ip, #4294967295
 800718a:	fbbc f9f3 	udiv	r9, ip, r3
 800718e:	4610      	mov	r0, r2
 8007190:	fb03 ca19 	mls	sl, r3, r9, ip
 8007194:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007198:	2f09      	cmp	r7, #9
 800719a:	d81b      	bhi.n	80071d4 <_strtol_l.constprop.0+0xa8>
 800719c:	463c      	mov	r4, r7
 800719e:	42a3      	cmp	r3, r4
 80071a0:	dd27      	ble.n	80071f2 <_strtol_l.constprop.0+0xc6>
 80071a2:	1c57      	adds	r7, r2, #1
 80071a4:	d007      	beq.n	80071b6 <_strtol_l.constprop.0+0x8a>
 80071a6:	4581      	cmp	r9, r0
 80071a8:	d320      	bcc.n	80071ec <_strtol_l.constprop.0+0xc0>
 80071aa:	d101      	bne.n	80071b0 <_strtol_l.constprop.0+0x84>
 80071ac:	45a2      	cmp	sl, r4
 80071ae:	db1d      	blt.n	80071ec <_strtol_l.constprop.0+0xc0>
 80071b0:	2201      	movs	r2, #1
 80071b2:	fb00 4003 	mla	r0, r0, r3, r4
 80071b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ba:	e7eb      	b.n	8007194 <_strtol_l.constprop.0+0x68>
 80071bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80071be:	bf04      	itt	eq
 80071c0:	782c      	ldrbeq	r4, [r5, #0]
 80071c2:	1c95      	addeq	r5, r2, #2
 80071c4:	e7cf      	b.n	8007166 <_strtol_l.constprop.0+0x3a>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1da      	bne.n	8007180 <_strtol_l.constprop.0+0x54>
 80071ca:	2c30      	cmp	r4, #48	@ 0x30
 80071cc:	bf0c      	ite	eq
 80071ce:	2308      	moveq	r3, #8
 80071d0:	230a      	movne	r3, #10
 80071d2:	e7d5      	b.n	8007180 <_strtol_l.constprop.0+0x54>
 80071d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80071d8:	2f19      	cmp	r7, #25
 80071da:	d801      	bhi.n	80071e0 <_strtol_l.constprop.0+0xb4>
 80071dc:	3c37      	subs	r4, #55	@ 0x37
 80071de:	e7de      	b.n	800719e <_strtol_l.constprop.0+0x72>
 80071e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80071e4:	2f19      	cmp	r7, #25
 80071e6:	d804      	bhi.n	80071f2 <_strtol_l.constprop.0+0xc6>
 80071e8:	3c57      	subs	r4, #87	@ 0x57
 80071ea:	e7d8      	b.n	800719e <_strtol_l.constprop.0+0x72>
 80071ec:	f04f 32ff 	mov.w	r2, #4294967295
 80071f0:	e7e1      	b.n	80071b6 <_strtol_l.constprop.0+0x8a>
 80071f2:	1c53      	adds	r3, r2, #1
 80071f4:	d108      	bne.n	8007208 <_strtol_l.constprop.0+0xdc>
 80071f6:	2322      	movs	r3, #34	@ 0x22
 80071f8:	4660      	mov	r0, ip
 80071fa:	f8ce 3000 	str.w	r3, [lr]
 80071fe:	f1b8 0f00 	cmp.w	r8, #0
 8007202:	d0a0      	beq.n	8007146 <_strtol_l.constprop.0+0x1a>
 8007204:	1e69      	subs	r1, r5, #1
 8007206:	e006      	b.n	8007216 <_strtol_l.constprop.0+0xea>
 8007208:	b106      	cbz	r6, 800720c <_strtol_l.constprop.0+0xe0>
 800720a:	4240      	negs	r0, r0
 800720c:	f1b8 0f00 	cmp.w	r8, #0
 8007210:	d099      	beq.n	8007146 <_strtol_l.constprop.0+0x1a>
 8007212:	2a00      	cmp	r2, #0
 8007214:	d1f6      	bne.n	8007204 <_strtol_l.constprop.0+0xd8>
 8007216:	f8c8 1000 	str.w	r1, [r8]
 800721a:	e794      	b.n	8007146 <_strtol_l.constprop.0+0x1a>
 800721c:	08008969 	.word	0x08008969

08007220 <_strtol_r>:
 8007220:	f7ff bf84 	b.w	800712c <_strtol_l.constprop.0>

08007224 <__ssputs_r>:
 8007224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	461f      	mov	r7, r3
 800722a:	688e      	ldr	r6, [r1, #8]
 800722c:	4682      	mov	sl, r0
 800722e:	42be      	cmp	r6, r7
 8007230:	460c      	mov	r4, r1
 8007232:	4690      	mov	r8, r2
 8007234:	680b      	ldr	r3, [r1, #0]
 8007236:	d82d      	bhi.n	8007294 <__ssputs_r+0x70>
 8007238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800723c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007240:	d026      	beq.n	8007290 <__ssputs_r+0x6c>
 8007242:	6965      	ldr	r5, [r4, #20]
 8007244:	6909      	ldr	r1, [r1, #16]
 8007246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800724a:	eba3 0901 	sub.w	r9, r3, r1
 800724e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007252:	1c7b      	adds	r3, r7, #1
 8007254:	444b      	add	r3, r9
 8007256:	106d      	asrs	r5, r5, #1
 8007258:	429d      	cmp	r5, r3
 800725a:	bf38      	it	cc
 800725c:	461d      	movcc	r5, r3
 800725e:	0553      	lsls	r3, r2, #21
 8007260:	d527      	bpl.n	80072b2 <__ssputs_r+0x8e>
 8007262:	4629      	mov	r1, r5
 8007264:	f7fe fc2e 	bl	8005ac4 <_malloc_r>
 8007268:	4606      	mov	r6, r0
 800726a:	b360      	cbz	r0, 80072c6 <__ssputs_r+0xa2>
 800726c:	464a      	mov	r2, r9
 800726e:	6921      	ldr	r1, [r4, #16]
 8007270:	f000 fa14 	bl	800769c <memcpy>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800727a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	6126      	str	r6, [r4, #16]
 8007282:	444e      	add	r6, r9
 8007284:	6026      	str	r6, [r4, #0]
 8007286:	463e      	mov	r6, r7
 8007288:	6165      	str	r5, [r4, #20]
 800728a:	eba5 0509 	sub.w	r5, r5, r9
 800728e:	60a5      	str	r5, [r4, #8]
 8007290:	42be      	cmp	r6, r7
 8007292:	d900      	bls.n	8007296 <__ssputs_r+0x72>
 8007294:	463e      	mov	r6, r7
 8007296:	4632      	mov	r2, r6
 8007298:	4641      	mov	r1, r8
 800729a:	6820      	ldr	r0, [r4, #0]
 800729c:	f000 f9c2 	bl	8007624 <memmove>
 80072a0:	2000      	movs	r0, #0
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	1b9b      	subs	r3, r3, r6
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	4433      	add	r3, r6
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b2:	462a      	mov	r2, r5
 80072b4:	f000 fd83 	bl	8007dbe <_realloc_r>
 80072b8:	4606      	mov	r6, r0
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d1e0      	bne.n	8007280 <__ssputs_r+0x5c>
 80072be:	4650      	mov	r0, sl
 80072c0:	6921      	ldr	r1, [r4, #16]
 80072c2:	f7fe fb8d 	bl	80059e0 <_free_r>
 80072c6:	230c      	movs	r3, #12
 80072c8:	f8ca 3000 	str.w	r3, [sl]
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295
 80072d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	e7e9      	b.n	80072ae <__ssputs_r+0x8a>
	...

080072dc <_svfiprintf_r>:
 80072dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	4698      	mov	r8, r3
 80072e2:	898b      	ldrh	r3, [r1, #12]
 80072e4:	4607      	mov	r7, r0
 80072e6:	061b      	lsls	r3, r3, #24
 80072e8:	460d      	mov	r5, r1
 80072ea:	4614      	mov	r4, r2
 80072ec:	b09d      	sub	sp, #116	@ 0x74
 80072ee:	d510      	bpl.n	8007312 <_svfiprintf_r+0x36>
 80072f0:	690b      	ldr	r3, [r1, #16]
 80072f2:	b973      	cbnz	r3, 8007312 <_svfiprintf_r+0x36>
 80072f4:	2140      	movs	r1, #64	@ 0x40
 80072f6:	f7fe fbe5 	bl	8005ac4 <_malloc_r>
 80072fa:	6028      	str	r0, [r5, #0]
 80072fc:	6128      	str	r0, [r5, #16]
 80072fe:	b930      	cbnz	r0, 800730e <_svfiprintf_r+0x32>
 8007300:	230c      	movs	r3, #12
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
 8007308:	b01d      	add	sp, #116	@ 0x74
 800730a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730e:	2340      	movs	r3, #64	@ 0x40
 8007310:	616b      	str	r3, [r5, #20]
 8007312:	2300      	movs	r3, #0
 8007314:	9309      	str	r3, [sp, #36]	@ 0x24
 8007316:	2320      	movs	r3, #32
 8007318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800731c:	2330      	movs	r3, #48	@ 0x30
 800731e:	f04f 0901 	mov.w	r9, #1
 8007322:	f8cd 800c 	str.w	r8, [sp, #12]
 8007326:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80074c0 <_svfiprintf_r+0x1e4>
 800732a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800732e:	4623      	mov	r3, r4
 8007330:	469a      	mov	sl, r3
 8007332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007336:	b10a      	cbz	r2, 800733c <_svfiprintf_r+0x60>
 8007338:	2a25      	cmp	r2, #37	@ 0x25
 800733a:	d1f9      	bne.n	8007330 <_svfiprintf_r+0x54>
 800733c:	ebba 0b04 	subs.w	fp, sl, r4
 8007340:	d00b      	beq.n	800735a <_svfiprintf_r+0x7e>
 8007342:	465b      	mov	r3, fp
 8007344:	4622      	mov	r2, r4
 8007346:	4629      	mov	r1, r5
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff ff6b 	bl	8007224 <__ssputs_r>
 800734e:	3001      	adds	r0, #1
 8007350:	f000 80a7 	beq.w	80074a2 <_svfiprintf_r+0x1c6>
 8007354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007356:	445a      	add	r2, fp
 8007358:	9209      	str	r2, [sp, #36]	@ 0x24
 800735a:	f89a 3000 	ldrb.w	r3, [sl]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 809f 	beq.w	80074a2 <_svfiprintf_r+0x1c6>
 8007364:	2300      	movs	r3, #0
 8007366:	f04f 32ff 	mov.w	r2, #4294967295
 800736a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800736e:	f10a 0a01 	add.w	sl, sl, #1
 8007372:	9304      	str	r3, [sp, #16]
 8007374:	9307      	str	r3, [sp, #28]
 8007376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800737a:	931a      	str	r3, [sp, #104]	@ 0x68
 800737c:	4654      	mov	r4, sl
 800737e:	2205      	movs	r2, #5
 8007380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007384:	484e      	ldr	r0, [pc, #312]	@ (80074c0 <_svfiprintf_r+0x1e4>)
 8007386:	f7fd fcc6 	bl	8004d16 <memchr>
 800738a:	9a04      	ldr	r2, [sp, #16]
 800738c:	b9d8      	cbnz	r0, 80073c6 <_svfiprintf_r+0xea>
 800738e:	06d0      	lsls	r0, r2, #27
 8007390:	bf44      	itt	mi
 8007392:	2320      	movmi	r3, #32
 8007394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007398:	0711      	lsls	r1, r2, #28
 800739a:	bf44      	itt	mi
 800739c:	232b      	movmi	r3, #43	@ 0x2b
 800739e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a2:	f89a 3000 	ldrb.w	r3, [sl]
 80073a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a8:	d015      	beq.n	80073d6 <_svfiprintf_r+0xfa>
 80073aa:	4654      	mov	r4, sl
 80073ac:	2000      	movs	r0, #0
 80073ae:	f04f 0c0a 	mov.w	ip, #10
 80073b2:	9a07      	ldr	r2, [sp, #28]
 80073b4:	4621      	mov	r1, r4
 80073b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ba:	3b30      	subs	r3, #48	@ 0x30
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d94b      	bls.n	8007458 <_svfiprintf_r+0x17c>
 80073c0:	b1b0      	cbz	r0, 80073f0 <_svfiprintf_r+0x114>
 80073c2:	9207      	str	r2, [sp, #28]
 80073c4:	e014      	b.n	80073f0 <_svfiprintf_r+0x114>
 80073c6:	eba0 0308 	sub.w	r3, r0, r8
 80073ca:	fa09 f303 	lsl.w	r3, r9, r3
 80073ce:	4313      	orrs	r3, r2
 80073d0:	46a2      	mov	sl, r4
 80073d2:	9304      	str	r3, [sp, #16]
 80073d4:	e7d2      	b.n	800737c <_svfiprintf_r+0xa0>
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	1d19      	adds	r1, r3, #4
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	9103      	str	r1, [sp, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfbb      	ittet	lt
 80073e2:	425b      	neglt	r3, r3
 80073e4:	f042 0202 	orrlt.w	r2, r2, #2
 80073e8:	9307      	strge	r3, [sp, #28]
 80073ea:	9307      	strlt	r3, [sp, #28]
 80073ec:	bfb8      	it	lt
 80073ee:	9204      	strlt	r2, [sp, #16]
 80073f0:	7823      	ldrb	r3, [r4, #0]
 80073f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80073f4:	d10a      	bne.n	800740c <_svfiprintf_r+0x130>
 80073f6:	7863      	ldrb	r3, [r4, #1]
 80073f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073fa:	d132      	bne.n	8007462 <_svfiprintf_r+0x186>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	3402      	adds	r4, #2
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	9203      	str	r2, [sp, #12]
 8007406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800740a:	9305      	str	r3, [sp, #20]
 800740c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80074c4 <_svfiprintf_r+0x1e8>
 8007410:	2203      	movs	r2, #3
 8007412:	4650      	mov	r0, sl
 8007414:	7821      	ldrb	r1, [r4, #0]
 8007416:	f7fd fc7e 	bl	8004d16 <memchr>
 800741a:	b138      	cbz	r0, 800742c <_svfiprintf_r+0x150>
 800741c:	2240      	movs	r2, #64	@ 0x40
 800741e:	9b04      	ldr	r3, [sp, #16]
 8007420:	eba0 000a 	sub.w	r0, r0, sl
 8007424:	4082      	lsls	r2, r0
 8007426:	4313      	orrs	r3, r2
 8007428:	3401      	adds	r4, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007430:	2206      	movs	r2, #6
 8007432:	4825      	ldr	r0, [pc, #148]	@ (80074c8 <_svfiprintf_r+0x1ec>)
 8007434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007438:	f7fd fc6d 	bl	8004d16 <memchr>
 800743c:	2800      	cmp	r0, #0
 800743e:	d036      	beq.n	80074ae <_svfiprintf_r+0x1d2>
 8007440:	4b22      	ldr	r3, [pc, #136]	@ (80074cc <_svfiprintf_r+0x1f0>)
 8007442:	bb1b      	cbnz	r3, 800748c <_svfiprintf_r+0x1b0>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	3307      	adds	r3, #7
 8007448:	f023 0307 	bic.w	r3, r3, #7
 800744c:	3308      	adds	r3, #8
 800744e:	9303      	str	r3, [sp, #12]
 8007450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007452:	4433      	add	r3, r6
 8007454:	9309      	str	r3, [sp, #36]	@ 0x24
 8007456:	e76a      	b.n	800732e <_svfiprintf_r+0x52>
 8007458:	460c      	mov	r4, r1
 800745a:	2001      	movs	r0, #1
 800745c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007460:	e7a8      	b.n	80073b4 <_svfiprintf_r+0xd8>
 8007462:	2300      	movs	r3, #0
 8007464:	f04f 0c0a 	mov.w	ip, #10
 8007468:	4619      	mov	r1, r3
 800746a:	3401      	adds	r4, #1
 800746c:	9305      	str	r3, [sp, #20]
 800746e:	4620      	mov	r0, r4
 8007470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007474:	3a30      	subs	r2, #48	@ 0x30
 8007476:	2a09      	cmp	r2, #9
 8007478:	d903      	bls.n	8007482 <_svfiprintf_r+0x1a6>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0c6      	beq.n	800740c <_svfiprintf_r+0x130>
 800747e:	9105      	str	r1, [sp, #20]
 8007480:	e7c4      	b.n	800740c <_svfiprintf_r+0x130>
 8007482:	4604      	mov	r4, r0
 8007484:	2301      	movs	r3, #1
 8007486:	fb0c 2101 	mla	r1, ip, r1, r2
 800748a:	e7f0      	b.n	800746e <_svfiprintf_r+0x192>
 800748c:	ab03      	add	r3, sp, #12
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	462a      	mov	r2, r5
 8007492:	4638      	mov	r0, r7
 8007494:	4b0e      	ldr	r3, [pc, #56]	@ (80074d0 <_svfiprintf_r+0x1f4>)
 8007496:	a904      	add	r1, sp, #16
 8007498:	f7fc fcca 	bl	8003e30 <_printf_float>
 800749c:	1c42      	adds	r2, r0, #1
 800749e:	4606      	mov	r6, r0
 80074a0:	d1d6      	bne.n	8007450 <_svfiprintf_r+0x174>
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	065b      	lsls	r3, r3, #25
 80074a6:	f53f af2d 	bmi.w	8007304 <_svfiprintf_r+0x28>
 80074aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074ac:	e72c      	b.n	8007308 <_svfiprintf_r+0x2c>
 80074ae:	ab03      	add	r3, sp, #12
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	462a      	mov	r2, r5
 80074b4:	4638      	mov	r0, r7
 80074b6:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <_svfiprintf_r+0x1f4>)
 80074b8:	a904      	add	r1, sp, #16
 80074ba:	f7fc ff57 	bl	800436c <_printf_i>
 80074be:	e7ed      	b.n	800749c <_svfiprintf_r+0x1c0>
 80074c0:	08008a69 	.word	0x08008a69
 80074c4:	08008a6f 	.word	0x08008a6f
 80074c8:	08008a73 	.word	0x08008a73
 80074cc:	08003e31 	.word	0x08003e31
 80074d0:	08007225 	.word	0x08007225

080074d4 <__sflush_r>:
 80074d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	0716      	lsls	r6, r2, #28
 80074dc:	4605      	mov	r5, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	d454      	bmi.n	800758c <__sflush_r+0xb8>
 80074e2:	684b      	ldr	r3, [r1, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dc02      	bgt.n	80074ee <__sflush_r+0x1a>
 80074e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dd48      	ble.n	8007580 <__sflush_r+0xac>
 80074ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074f0:	2e00      	cmp	r6, #0
 80074f2:	d045      	beq.n	8007580 <__sflush_r+0xac>
 80074f4:	2300      	movs	r3, #0
 80074f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074fa:	682f      	ldr	r7, [r5, #0]
 80074fc:	6a21      	ldr	r1, [r4, #32]
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	d030      	beq.n	8007564 <__sflush_r+0x90>
 8007502:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	0759      	lsls	r1, r3, #29
 8007508:	d505      	bpl.n	8007516 <__sflush_r+0x42>
 800750a:	6863      	ldr	r3, [r4, #4]
 800750c:	1ad2      	subs	r2, r2, r3
 800750e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007510:	b10b      	cbz	r3, 8007516 <__sflush_r+0x42>
 8007512:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007514:	1ad2      	subs	r2, r2, r3
 8007516:	2300      	movs	r3, #0
 8007518:	4628      	mov	r0, r5
 800751a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800751c:	6a21      	ldr	r1, [r4, #32]
 800751e:	47b0      	blx	r6
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	d106      	bne.n	8007534 <__sflush_r+0x60>
 8007526:	6829      	ldr	r1, [r5, #0]
 8007528:	291d      	cmp	r1, #29
 800752a:	d82b      	bhi.n	8007584 <__sflush_r+0xb0>
 800752c:	4a28      	ldr	r2, [pc, #160]	@ (80075d0 <__sflush_r+0xfc>)
 800752e:	410a      	asrs	r2, r1
 8007530:	07d6      	lsls	r6, r2, #31
 8007532:	d427      	bmi.n	8007584 <__sflush_r+0xb0>
 8007534:	2200      	movs	r2, #0
 8007536:	6062      	str	r2, [r4, #4]
 8007538:	6922      	ldr	r2, [r4, #16]
 800753a:	04d9      	lsls	r1, r3, #19
 800753c:	6022      	str	r2, [r4, #0]
 800753e:	d504      	bpl.n	800754a <__sflush_r+0x76>
 8007540:	1c42      	adds	r2, r0, #1
 8007542:	d101      	bne.n	8007548 <__sflush_r+0x74>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b903      	cbnz	r3, 800754a <__sflush_r+0x76>
 8007548:	6560      	str	r0, [r4, #84]	@ 0x54
 800754a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800754c:	602f      	str	r7, [r5, #0]
 800754e:	b1b9      	cbz	r1, 8007580 <__sflush_r+0xac>
 8007550:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007554:	4299      	cmp	r1, r3
 8007556:	d002      	beq.n	800755e <__sflush_r+0x8a>
 8007558:	4628      	mov	r0, r5
 800755a:	f7fe fa41 	bl	80059e0 <_free_r>
 800755e:	2300      	movs	r3, #0
 8007560:	6363      	str	r3, [r4, #52]	@ 0x34
 8007562:	e00d      	b.n	8007580 <__sflush_r+0xac>
 8007564:	2301      	movs	r3, #1
 8007566:	4628      	mov	r0, r5
 8007568:	47b0      	blx	r6
 800756a:	4602      	mov	r2, r0
 800756c:	1c50      	adds	r0, r2, #1
 800756e:	d1c9      	bne.n	8007504 <__sflush_r+0x30>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0c6      	beq.n	8007504 <__sflush_r+0x30>
 8007576:	2b1d      	cmp	r3, #29
 8007578:	d001      	beq.n	800757e <__sflush_r+0xaa>
 800757a:	2b16      	cmp	r3, #22
 800757c:	d11d      	bne.n	80075ba <__sflush_r+0xe6>
 800757e:	602f      	str	r7, [r5, #0]
 8007580:	2000      	movs	r0, #0
 8007582:	e021      	b.n	80075c8 <__sflush_r+0xf4>
 8007584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007588:	b21b      	sxth	r3, r3
 800758a:	e01a      	b.n	80075c2 <__sflush_r+0xee>
 800758c:	690f      	ldr	r7, [r1, #16]
 800758e:	2f00      	cmp	r7, #0
 8007590:	d0f6      	beq.n	8007580 <__sflush_r+0xac>
 8007592:	0793      	lsls	r3, r2, #30
 8007594:	bf18      	it	ne
 8007596:	2300      	movne	r3, #0
 8007598:	680e      	ldr	r6, [r1, #0]
 800759a:	bf08      	it	eq
 800759c:	694b      	ldreq	r3, [r1, #20]
 800759e:	1bf6      	subs	r6, r6, r7
 80075a0:	600f      	str	r7, [r1, #0]
 80075a2:	608b      	str	r3, [r1, #8]
 80075a4:	2e00      	cmp	r6, #0
 80075a6:	ddeb      	ble.n	8007580 <__sflush_r+0xac>
 80075a8:	4633      	mov	r3, r6
 80075aa:	463a      	mov	r2, r7
 80075ac:	4628      	mov	r0, r5
 80075ae:	6a21      	ldr	r1, [r4, #32]
 80075b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80075b4:	47e0      	blx	ip
 80075b6:	2800      	cmp	r0, #0
 80075b8:	dc07      	bgt.n	80075ca <__sflush_r+0xf6>
 80075ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ca:	4407      	add	r7, r0
 80075cc:	1a36      	subs	r6, r6, r0
 80075ce:	e7e9      	b.n	80075a4 <__sflush_r+0xd0>
 80075d0:	dfbffffe 	.word	0xdfbffffe

080075d4 <_fflush_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	690b      	ldr	r3, [r1, #16]
 80075d8:	4605      	mov	r5, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	b913      	cbnz	r3, 80075e4 <_fflush_r+0x10>
 80075de:	2500      	movs	r5, #0
 80075e0:	4628      	mov	r0, r5
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	b118      	cbz	r0, 80075ee <_fflush_r+0x1a>
 80075e6:	6a03      	ldr	r3, [r0, #32]
 80075e8:	b90b      	cbnz	r3, 80075ee <_fflush_r+0x1a>
 80075ea:	f7fd fa7b 	bl	8004ae4 <__sinit>
 80075ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0f3      	beq.n	80075de <_fflush_r+0xa>
 80075f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075f8:	07d0      	lsls	r0, r2, #31
 80075fa:	d404      	bmi.n	8007606 <_fflush_r+0x32>
 80075fc:	0599      	lsls	r1, r3, #22
 80075fe:	d402      	bmi.n	8007606 <_fflush_r+0x32>
 8007600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007602:	f7fd fb86 	bl	8004d12 <__retarget_lock_acquire_recursive>
 8007606:	4628      	mov	r0, r5
 8007608:	4621      	mov	r1, r4
 800760a:	f7ff ff63 	bl	80074d4 <__sflush_r>
 800760e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007610:	4605      	mov	r5, r0
 8007612:	07da      	lsls	r2, r3, #31
 8007614:	d4e4      	bmi.n	80075e0 <_fflush_r+0xc>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	059b      	lsls	r3, r3, #22
 800761a:	d4e1      	bmi.n	80075e0 <_fflush_r+0xc>
 800761c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800761e:	f7fd fb79 	bl	8004d14 <__retarget_lock_release_recursive>
 8007622:	e7dd      	b.n	80075e0 <_fflush_r+0xc>

08007624 <memmove>:
 8007624:	4288      	cmp	r0, r1
 8007626:	b510      	push	{r4, lr}
 8007628:	eb01 0402 	add.w	r4, r1, r2
 800762c:	d902      	bls.n	8007634 <memmove+0x10>
 800762e:	4284      	cmp	r4, r0
 8007630:	4623      	mov	r3, r4
 8007632:	d807      	bhi.n	8007644 <memmove+0x20>
 8007634:	1e43      	subs	r3, r0, #1
 8007636:	42a1      	cmp	r1, r4
 8007638:	d008      	beq.n	800764c <memmove+0x28>
 800763a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800763e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007642:	e7f8      	b.n	8007636 <memmove+0x12>
 8007644:	4601      	mov	r1, r0
 8007646:	4402      	add	r2, r0
 8007648:	428a      	cmp	r2, r1
 800764a:	d100      	bne.n	800764e <memmove+0x2a>
 800764c:	bd10      	pop	{r4, pc}
 800764e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007656:	e7f7      	b.n	8007648 <memmove+0x24>

08007658 <strncmp>:
 8007658:	b510      	push	{r4, lr}
 800765a:	b16a      	cbz	r2, 8007678 <strncmp+0x20>
 800765c:	3901      	subs	r1, #1
 800765e:	1884      	adds	r4, r0, r2
 8007660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007664:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007668:	429a      	cmp	r2, r3
 800766a:	d103      	bne.n	8007674 <strncmp+0x1c>
 800766c:	42a0      	cmp	r0, r4
 800766e:	d001      	beq.n	8007674 <strncmp+0x1c>
 8007670:	2a00      	cmp	r2, #0
 8007672:	d1f5      	bne.n	8007660 <strncmp+0x8>
 8007674:	1ad0      	subs	r0, r2, r3
 8007676:	bd10      	pop	{r4, pc}
 8007678:	4610      	mov	r0, r2
 800767a:	e7fc      	b.n	8007676 <strncmp+0x1e>

0800767c <_sbrk_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	2300      	movs	r3, #0
 8007680:	4d05      	ldr	r5, [pc, #20]	@ (8007698 <_sbrk_r+0x1c>)
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7fa fc64 	bl	8001f54 <_sbrk>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_sbrk_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_sbrk_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	200003ec 	.word	0x200003ec

0800769c <memcpy>:
 800769c:	440a      	add	r2, r1
 800769e:	4291      	cmp	r1, r2
 80076a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a4:	d100      	bne.n	80076a8 <memcpy+0xc>
 80076a6:	4770      	bx	lr
 80076a8:	b510      	push	{r4, lr}
 80076aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ae:	4291      	cmp	r1, r2
 80076b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b4:	d1f9      	bne.n	80076aa <memcpy+0xe>
 80076b6:	bd10      	pop	{r4, pc}

080076b8 <nan>:
 80076b8:	2000      	movs	r0, #0
 80076ba:	4901      	ldr	r1, [pc, #4]	@ (80076c0 <nan+0x8>)
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	7ff80000 	.word	0x7ff80000

080076c4 <__assert_func>:
 80076c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076c6:	4614      	mov	r4, r2
 80076c8:	461a      	mov	r2, r3
 80076ca:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <__assert_func+0x2c>)
 80076cc:	4605      	mov	r5, r0
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68d8      	ldr	r0, [r3, #12]
 80076d2:	b954      	cbnz	r4, 80076ea <__assert_func+0x26>
 80076d4:	4b07      	ldr	r3, [pc, #28]	@ (80076f4 <__assert_func+0x30>)
 80076d6:	461c      	mov	r4, r3
 80076d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076dc:	9100      	str	r1, [sp, #0]
 80076de:	462b      	mov	r3, r5
 80076e0:	4905      	ldr	r1, [pc, #20]	@ (80076f8 <__assert_func+0x34>)
 80076e2:	f000 fba7 	bl	8007e34 <fiprintf>
 80076e6:	f000 fbb7 	bl	8007e58 <abort>
 80076ea:	4b04      	ldr	r3, [pc, #16]	@ (80076fc <__assert_func+0x38>)
 80076ec:	e7f4      	b.n	80076d8 <__assert_func+0x14>
 80076ee:	bf00      	nop
 80076f0:	20000018 	.word	0x20000018
 80076f4:	08008abd 	.word	0x08008abd
 80076f8:	08008a8f 	.word	0x08008a8f
 80076fc:	08008a82 	.word	0x08008a82

08007700 <_calloc_r>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	fba1 5402 	umull	r5, r4, r1, r2
 8007706:	b93c      	cbnz	r4, 8007718 <_calloc_r+0x18>
 8007708:	4629      	mov	r1, r5
 800770a:	f7fe f9db 	bl	8005ac4 <_malloc_r>
 800770e:	4606      	mov	r6, r0
 8007710:	b928      	cbnz	r0, 800771e <_calloc_r+0x1e>
 8007712:	2600      	movs	r6, #0
 8007714:	4630      	mov	r0, r6
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	220c      	movs	r2, #12
 800771a:	6002      	str	r2, [r0, #0]
 800771c:	e7f9      	b.n	8007712 <_calloc_r+0x12>
 800771e:	462a      	mov	r2, r5
 8007720:	4621      	mov	r1, r4
 8007722:	f7fd fa78 	bl	8004c16 <memset>
 8007726:	e7f5      	b.n	8007714 <_calloc_r+0x14>

08007728 <rshift>:
 8007728:	6903      	ldr	r3, [r0, #16]
 800772a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800772e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007732:	f100 0414 	add.w	r4, r0, #20
 8007736:	ea4f 1261 	mov.w	r2, r1, asr #5
 800773a:	dd46      	ble.n	80077ca <rshift+0xa2>
 800773c:	f011 011f 	ands.w	r1, r1, #31
 8007740:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007744:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007748:	d10c      	bne.n	8007764 <rshift+0x3c>
 800774a:	4629      	mov	r1, r5
 800774c:	f100 0710 	add.w	r7, r0, #16
 8007750:	42b1      	cmp	r1, r6
 8007752:	d335      	bcc.n	80077c0 <rshift+0x98>
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	1eea      	subs	r2, r5, #3
 800775a:	4296      	cmp	r6, r2
 800775c:	bf38      	it	cc
 800775e:	2300      	movcc	r3, #0
 8007760:	4423      	add	r3, r4
 8007762:	e015      	b.n	8007790 <rshift+0x68>
 8007764:	46a1      	mov	r9, r4
 8007766:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800776a:	f1c1 0820 	rsb	r8, r1, #32
 800776e:	40cf      	lsrs	r7, r1
 8007770:	f105 0e04 	add.w	lr, r5, #4
 8007774:	4576      	cmp	r6, lr
 8007776:	46f4      	mov	ip, lr
 8007778:	d816      	bhi.n	80077a8 <rshift+0x80>
 800777a:	1a9a      	subs	r2, r3, r2
 800777c:	0092      	lsls	r2, r2, #2
 800777e:	3a04      	subs	r2, #4
 8007780:	3501      	adds	r5, #1
 8007782:	42ae      	cmp	r6, r5
 8007784:	bf38      	it	cc
 8007786:	2200      	movcc	r2, #0
 8007788:	18a3      	adds	r3, r4, r2
 800778a:	50a7      	str	r7, [r4, r2]
 800778c:	b107      	cbz	r7, 8007790 <rshift+0x68>
 800778e:	3304      	adds	r3, #4
 8007790:	42a3      	cmp	r3, r4
 8007792:	eba3 0204 	sub.w	r2, r3, r4
 8007796:	bf08      	it	eq
 8007798:	2300      	moveq	r3, #0
 800779a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800779e:	6102      	str	r2, [r0, #16]
 80077a0:	bf08      	it	eq
 80077a2:	6143      	streq	r3, [r0, #20]
 80077a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077a8:	f8dc c000 	ldr.w	ip, [ip]
 80077ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80077b0:	ea4c 0707 	orr.w	r7, ip, r7
 80077b4:	f849 7b04 	str.w	r7, [r9], #4
 80077b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077bc:	40cf      	lsrs	r7, r1
 80077be:	e7d9      	b.n	8007774 <rshift+0x4c>
 80077c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80077c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80077c8:	e7c2      	b.n	8007750 <rshift+0x28>
 80077ca:	4623      	mov	r3, r4
 80077cc:	e7e0      	b.n	8007790 <rshift+0x68>

080077ce <__hexdig_fun>:
 80077ce:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80077d2:	2b09      	cmp	r3, #9
 80077d4:	d802      	bhi.n	80077dc <__hexdig_fun+0xe>
 80077d6:	3820      	subs	r0, #32
 80077d8:	b2c0      	uxtb	r0, r0
 80077da:	4770      	bx	lr
 80077dc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	d801      	bhi.n	80077e8 <__hexdig_fun+0x1a>
 80077e4:	3847      	subs	r0, #71	@ 0x47
 80077e6:	e7f7      	b.n	80077d8 <__hexdig_fun+0xa>
 80077e8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80077ec:	2b05      	cmp	r3, #5
 80077ee:	d801      	bhi.n	80077f4 <__hexdig_fun+0x26>
 80077f0:	3827      	subs	r0, #39	@ 0x27
 80077f2:	e7f1      	b.n	80077d8 <__hexdig_fun+0xa>
 80077f4:	2000      	movs	r0, #0
 80077f6:	4770      	bx	lr

080077f8 <__gethex>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	468a      	mov	sl, r1
 80077fe:	4690      	mov	r8, r2
 8007800:	b085      	sub	sp, #20
 8007802:	9302      	str	r3, [sp, #8]
 8007804:	680b      	ldr	r3, [r1, #0]
 8007806:	9001      	str	r0, [sp, #4]
 8007808:	1c9c      	adds	r4, r3, #2
 800780a:	46a1      	mov	r9, r4
 800780c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007810:	2830      	cmp	r0, #48	@ 0x30
 8007812:	d0fa      	beq.n	800780a <__gethex+0x12>
 8007814:	eba9 0303 	sub.w	r3, r9, r3
 8007818:	f1a3 0b02 	sub.w	fp, r3, #2
 800781c:	f7ff ffd7 	bl	80077ce <__hexdig_fun>
 8007820:	4605      	mov	r5, r0
 8007822:	2800      	cmp	r0, #0
 8007824:	d168      	bne.n	80078f8 <__gethex+0x100>
 8007826:	2201      	movs	r2, #1
 8007828:	4648      	mov	r0, r9
 800782a:	499f      	ldr	r1, [pc, #636]	@ (8007aa8 <__gethex+0x2b0>)
 800782c:	f7ff ff14 	bl	8007658 <strncmp>
 8007830:	4607      	mov	r7, r0
 8007832:	2800      	cmp	r0, #0
 8007834:	d167      	bne.n	8007906 <__gethex+0x10e>
 8007836:	f899 0001 	ldrb.w	r0, [r9, #1]
 800783a:	4626      	mov	r6, r4
 800783c:	f7ff ffc7 	bl	80077ce <__hexdig_fun>
 8007840:	2800      	cmp	r0, #0
 8007842:	d062      	beq.n	800790a <__gethex+0x112>
 8007844:	4623      	mov	r3, r4
 8007846:	7818      	ldrb	r0, [r3, #0]
 8007848:	4699      	mov	r9, r3
 800784a:	2830      	cmp	r0, #48	@ 0x30
 800784c:	f103 0301 	add.w	r3, r3, #1
 8007850:	d0f9      	beq.n	8007846 <__gethex+0x4e>
 8007852:	f7ff ffbc 	bl	80077ce <__hexdig_fun>
 8007856:	fab0 f580 	clz	r5, r0
 800785a:	f04f 0b01 	mov.w	fp, #1
 800785e:	096d      	lsrs	r5, r5, #5
 8007860:	464a      	mov	r2, r9
 8007862:	4616      	mov	r6, r2
 8007864:	7830      	ldrb	r0, [r6, #0]
 8007866:	3201      	adds	r2, #1
 8007868:	f7ff ffb1 	bl	80077ce <__hexdig_fun>
 800786c:	2800      	cmp	r0, #0
 800786e:	d1f8      	bne.n	8007862 <__gethex+0x6a>
 8007870:	2201      	movs	r2, #1
 8007872:	4630      	mov	r0, r6
 8007874:	498c      	ldr	r1, [pc, #560]	@ (8007aa8 <__gethex+0x2b0>)
 8007876:	f7ff feef 	bl	8007658 <strncmp>
 800787a:	2800      	cmp	r0, #0
 800787c:	d13f      	bne.n	80078fe <__gethex+0x106>
 800787e:	b944      	cbnz	r4, 8007892 <__gethex+0x9a>
 8007880:	1c74      	adds	r4, r6, #1
 8007882:	4622      	mov	r2, r4
 8007884:	4616      	mov	r6, r2
 8007886:	7830      	ldrb	r0, [r6, #0]
 8007888:	3201      	adds	r2, #1
 800788a:	f7ff ffa0 	bl	80077ce <__hexdig_fun>
 800788e:	2800      	cmp	r0, #0
 8007890:	d1f8      	bne.n	8007884 <__gethex+0x8c>
 8007892:	1ba4      	subs	r4, r4, r6
 8007894:	00a7      	lsls	r7, r4, #2
 8007896:	7833      	ldrb	r3, [r6, #0]
 8007898:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800789c:	2b50      	cmp	r3, #80	@ 0x50
 800789e:	d13e      	bne.n	800791e <__gethex+0x126>
 80078a0:	7873      	ldrb	r3, [r6, #1]
 80078a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80078a4:	d033      	beq.n	800790e <__gethex+0x116>
 80078a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80078a8:	d034      	beq.n	8007914 <__gethex+0x11c>
 80078aa:	2400      	movs	r4, #0
 80078ac:	1c71      	adds	r1, r6, #1
 80078ae:	7808      	ldrb	r0, [r1, #0]
 80078b0:	f7ff ff8d 	bl	80077ce <__hexdig_fun>
 80078b4:	1e43      	subs	r3, r0, #1
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b18      	cmp	r3, #24
 80078ba:	d830      	bhi.n	800791e <__gethex+0x126>
 80078bc:	f1a0 0210 	sub.w	r2, r0, #16
 80078c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078c4:	f7ff ff83 	bl	80077ce <__hexdig_fun>
 80078c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80078cc:	fa5f fc8c 	uxtb.w	ip, ip
 80078d0:	f1bc 0f18 	cmp.w	ip, #24
 80078d4:	f04f 030a 	mov.w	r3, #10
 80078d8:	d91e      	bls.n	8007918 <__gethex+0x120>
 80078da:	b104      	cbz	r4, 80078de <__gethex+0xe6>
 80078dc:	4252      	negs	r2, r2
 80078de:	4417      	add	r7, r2
 80078e0:	f8ca 1000 	str.w	r1, [sl]
 80078e4:	b1ed      	cbz	r5, 8007922 <__gethex+0x12a>
 80078e6:	f1bb 0f00 	cmp.w	fp, #0
 80078ea:	bf0c      	ite	eq
 80078ec:	2506      	moveq	r5, #6
 80078ee:	2500      	movne	r5, #0
 80078f0:	4628      	mov	r0, r5
 80078f2:	b005      	add	sp, #20
 80078f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f8:	2500      	movs	r5, #0
 80078fa:	462c      	mov	r4, r5
 80078fc:	e7b0      	b.n	8007860 <__gethex+0x68>
 80078fe:	2c00      	cmp	r4, #0
 8007900:	d1c7      	bne.n	8007892 <__gethex+0x9a>
 8007902:	4627      	mov	r7, r4
 8007904:	e7c7      	b.n	8007896 <__gethex+0x9e>
 8007906:	464e      	mov	r6, r9
 8007908:	462f      	mov	r7, r5
 800790a:	2501      	movs	r5, #1
 800790c:	e7c3      	b.n	8007896 <__gethex+0x9e>
 800790e:	2400      	movs	r4, #0
 8007910:	1cb1      	adds	r1, r6, #2
 8007912:	e7cc      	b.n	80078ae <__gethex+0xb6>
 8007914:	2401      	movs	r4, #1
 8007916:	e7fb      	b.n	8007910 <__gethex+0x118>
 8007918:	fb03 0002 	mla	r0, r3, r2, r0
 800791c:	e7ce      	b.n	80078bc <__gethex+0xc4>
 800791e:	4631      	mov	r1, r6
 8007920:	e7de      	b.n	80078e0 <__gethex+0xe8>
 8007922:	4629      	mov	r1, r5
 8007924:	eba6 0309 	sub.w	r3, r6, r9
 8007928:	3b01      	subs	r3, #1
 800792a:	2b07      	cmp	r3, #7
 800792c:	dc0a      	bgt.n	8007944 <__gethex+0x14c>
 800792e:	9801      	ldr	r0, [sp, #4]
 8007930:	f7fe f954 	bl	8005bdc <_Balloc>
 8007934:	4604      	mov	r4, r0
 8007936:	b940      	cbnz	r0, 800794a <__gethex+0x152>
 8007938:	4602      	mov	r2, r0
 800793a:	21e4      	movs	r1, #228	@ 0xe4
 800793c:	4b5b      	ldr	r3, [pc, #364]	@ (8007aac <__gethex+0x2b4>)
 800793e:	485c      	ldr	r0, [pc, #368]	@ (8007ab0 <__gethex+0x2b8>)
 8007940:	f7ff fec0 	bl	80076c4 <__assert_func>
 8007944:	3101      	adds	r1, #1
 8007946:	105b      	asrs	r3, r3, #1
 8007948:	e7ef      	b.n	800792a <__gethex+0x132>
 800794a:	2300      	movs	r3, #0
 800794c:	f100 0a14 	add.w	sl, r0, #20
 8007950:	4655      	mov	r5, sl
 8007952:	469b      	mov	fp, r3
 8007954:	45b1      	cmp	r9, r6
 8007956:	d337      	bcc.n	80079c8 <__gethex+0x1d0>
 8007958:	f845 bb04 	str.w	fp, [r5], #4
 800795c:	eba5 050a 	sub.w	r5, r5, sl
 8007960:	10ad      	asrs	r5, r5, #2
 8007962:	6125      	str	r5, [r4, #16]
 8007964:	4658      	mov	r0, fp
 8007966:	f7fe fa2b 	bl	8005dc0 <__hi0bits>
 800796a:	016d      	lsls	r5, r5, #5
 800796c:	f8d8 6000 	ldr.w	r6, [r8]
 8007970:	1a2d      	subs	r5, r5, r0
 8007972:	42b5      	cmp	r5, r6
 8007974:	dd54      	ble.n	8007a20 <__gethex+0x228>
 8007976:	1bad      	subs	r5, r5, r6
 8007978:	4629      	mov	r1, r5
 800797a:	4620      	mov	r0, r4
 800797c:	f7fe fdb3 	bl	80064e6 <__any_on>
 8007980:	4681      	mov	r9, r0
 8007982:	b178      	cbz	r0, 80079a4 <__gethex+0x1ac>
 8007984:	f04f 0901 	mov.w	r9, #1
 8007988:	1e6b      	subs	r3, r5, #1
 800798a:	1159      	asrs	r1, r3, #5
 800798c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007990:	f003 021f 	and.w	r2, r3, #31
 8007994:	fa09 f202 	lsl.w	r2, r9, r2
 8007998:	420a      	tst	r2, r1
 800799a:	d003      	beq.n	80079a4 <__gethex+0x1ac>
 800799c:	454b      	cmp	r3, r9
 800799e:	dc36      	bgt.n	8007a0e <__gethex+0x216>
 80079a0:	f04f 0902 	mov.w	r9, #2
 80079a4:	4629      	mov	r1, r5
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff febe 	bl	8007728 <rshift>
 80079ac:	442f      	add	r7, r5
 80079ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079b2:	42bb      	cmp	r3, r7
 80079b4:	da42      	bge.n	8007a3c <__gethex+0x244>
 80079b6:	4621      	mov	r1, r4
 80079b8:	9801      	ldr	r0, [sp, #4]
 80079ba:	f7fe f94f 	bl	8005c5c <_Bfree>
 80079be:	2300      	movs	r3, #0
 80079c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079c2:	25a3      	movs	r5, #163	@ 0xa3
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e793      	b.n	80078f0 <__gethex+0xf8>
 80079c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80079cc:	2a2e      	cmp	r2, #46	@ 0x2e
 80079ce:	d012      	beq.n	80079f6 <__gethex+0x1fe>
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d104      	bne.n	80079de <__gethex+0x1e6>
 80079d4:	f845 bb04 	str.w	fp, [r5], #4
 80079d8:	f04f 0b00 	mov.w	fp, #0
 80079dc:	465b      	mov	r3, fp
 80079de:	7830      	ldrb	r0, [r6, #0]
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	f7ff fef4 	bl	80077ce <__hexdig_fun>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	f000 000f 	and.w	r0, r0, #15
 80079ec:	4098      	lsls	r0, r3
 80079ee:	ea4b 0b00 	orr.w	fp, fp, r0
 80079f2:	3304      	adds	r3, #4
 80079f4:	e7ae      	b.n	8007954 <__gethex+0x15c>
 80079f6:	45b1      	cmp	r9, r6
 80079f8:	d8ea      	bhi.n	80079d0 <__gethex+0x1d8>
 80079fa:	2201      	movs	r2, #1
 80079fc:	4630      	mov	r0, r6
 80079fe:	492a      	ldr	r1, [pc, #168]	@ (8007aa8 <__gethex+0x2b0>)
 8007a00:	9303      	str	r3, [sp, #12]
 8007a02:	f7ff fe29 	bl	8007658 <strncmp>
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d1e1      	bne.n	80079d0 <__gethex+0x1d8>
 8007a0c:	e7a2      	b.n	8007954 <__gethex+0x15c>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	1ea9      	subs	r1, r5, #2
 8007a12:	f7fe fd68 	bl	80064e6 <__any_on>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d0c2      	beq.n	80079a0 <__gethex+0x1a8>
 8007a1a:	f04f 0903 	mov.w	r9, #3
 8007a1e:	e7c1      	b.n	80079a4 <__gethex+0x1ac>
 8007a20:	da09      	bge.n	8007a36 <__gethex+0x23e>
 8007a22:	1b75      	subs	r5, r6, r5
 8007a24:	4621      	mov	r1, r4
 8007a26:	462a      	mov	r2, r5
 8007a28:	9801      	ldr	r0, [sp, #4]
 8007a2a:	f7fe fb2d 	bl	8006088 <__lshift>
 8007a2e:	4604      	mov	r4, r0
 8007a30:	1b7f      	subs	r7, r7, r5
 8007a32:	f100 0a14 	add.w	sl, r0, #20
 8007a36:	f04f 0900 	mov.w	r9, #0
 8007a3a:	e7b8      	b.n	80079ae <__gethex+0x1b6>
 8007a3c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a40:	42bd      	cmp	r5, r7
 8007a42:	dd6f      	ble.n	8007b24 <__gethex+0x32c>
 8007a44:	1bed      	subs	r5, r5, r7
 8007a46:	42ae      	cmp	r6, r5
 8007a48:	dc34      	bgt.n	8007ab4 <__gethex+0x2bc>
 8007a4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d022      	beq.n	8007a98 <__gethex+0x2a0>
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d024      	beq.n	8007aa0 <__gethex+0x2a8>
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d115      	bne.n	8007a86 <__gethex+0x28e>
 8007a5a:	42ae      	cmp	r6, r5
 8007a5c:	d113      	bne.n	8007a86 <__gethex+0x28e>
 8007a5e:	2e01      	cmp	r6, #1
 8007a60:	d10b      	bne.n	8007a7a <__gethex+0x282>
 8007a62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a66:	9a02      	ldr	r2, [sp, #8]
 8007a68:	2562      	movs	r5, #98	@ 0x62
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	f8ca 3000 	str.w	r3, [sl]
 8007a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a76:	601c      	str	r4, [r3, #0]
 8007a78:	e73a      	b.n	80078f0 <__gethex+0xf8>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	1e71      	subs	r1, r6, #1
 8007a7e:	f7fe fd32 	bl	80064e6 <__any_on>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d1ed      	bne.n	8007a62 <__gethex+0x26a>
 8007a86:	4621      	mov	r1, r4
 8007a88:	9801      	ldr	r0, [sp, #4]
 8007a8a:	f7fe f8e7 	bl	8005c5c <_Bfree>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a92:	2550      	movs	r5, #80	@ 0x50
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	e72b      	b.n	80078f0 <__gethex+0xf8>
 8007a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1f3      	bne.n	8007a86 <__gethex+0x28e>
 8007a9e:	e7e0      	b.n	8007a62 <__gethex+0x26a>
 8007aa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1dd      	bne.n	8007a62 <__gethex+0x26a>
 8007aa6:	e7ee      	b.n	8007a86 <__gethex+0x28e>
 8007aa8:	08008910 	.word	0x08008910
 8007aac:	080087a7 	.word	0x080087a7
 8007ab0:	08008abe 	.word	0x08008abe
 8007ab4:	1e6f      	subs	r7, r5, #1
 8007ab6:	f1b9 0f00 	cmp.w	r9, #0
 8007aba:	d130      	bne.n	8007b1e <__gethex+0x326>
 8007abc:	b127      	cbz	r7, 8007ac8 <__gethex+0x2d0>
 8007abe:	4639      	mov	r1, r7
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f7fe fd10 	bl	80064e6 <__any_on>
 8007ac6:	4681      	mov	r9, r0
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4629      	mov	r1, r5
 8007acc:	1b76      	subs	r6, r6, r5
 8007ace:	2502      	movs	r5, #2
 8007ad0:	117a      	asrs	r2, r7, #5
 8007ad2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ad6:	f007 071f 	and.w	r7, r7, #31
 8007ada:	40bb      	lsls	r3, r7
 8007adc:	4213      	tst	r3, r2
 8007ade:	4620      	mov	r0, r4
 8007ae0:	bf18      	it	ne
 8007ae2:	f049 0902 	orrne.w	r9, r9, #2
 8007ae6:	f7ff fe1f 	bl	8007728 <rshift>
 8007aea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007aee:	f1b9 0f00 	cmp.w	r9, #0
 8007af2:	d047      	beq.n	8007b84 <__gethex+0x38c>
 8007af4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d015      	beq.n	8007b28 <__gethex+0x330>
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d017      	beq.n	8007b30 <__gethex+0x338>
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d109      	bne.n	8007b18 <__gethex+0x320>
 8007b04:	f019 0f02 	tst.w	r9, #2
 8007b08:	d006      	beq.n	8007b18 <__gethex+0x320>
 8007b0a:	f8da 3000 	ldr.w	r3, [sl]
 8007b0e:	ea49 0903 	orr.w	r9, r9, r3
 8007b12:	f019 0f01 	tst.w	r9, #1
 8007b16:	d10e      	bne.n	8007b36 <__gethex+0x33e>
 8007b18:	f045 0510 	orr.w	r5, r5, #16
 8007b1c:	e032      	b.n	8007b84 <__gethex+0x38c>
 8007b1e:	f04f 0901 	mov.w	r9, #1
 8007b22:	e7d1      	b.n	8007ac8 <__gethex+0x2d0>
 8007b24:	2501      	movs	r5, #1
 8007b26:	e7e2      	b.n	8007aee <__gethex+0x2f6>
 8007b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b2a:	f1c3 0301 	rsb	r3, r3, #1
 8007b2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0f0      	beq.n	8007b18 <__gethex+0x320>
 8007b36:	f04f 0c00 	mov.w	ip, #0
 8007b3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b3e:	f104 0314 	add.w	r3, r4, #20
 8007b42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b50:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b54:	d01b      	beq.n	8007b8e <__gethex+0x396>
 8007b56:	3201      	adds	r2, #1
 8007b58:	6002      	str	r2, [r0, #0]
 8007b5a:	2d02      	cmp	r5, #2
 8007b5c:	f104 0314 	add.w	r3, r4, #20
 8007b60:	d13c      	bne.n	8007bdc <__gethex+0x3e4>
 8007b62:	f8d8 2000 	ldr.w	r2, [r8]
 8007b66:	3a01      	subs	r2, #1
 8007b68:	42b2      	cmp	r2, r6
 8007b6a:	d109      	bne.n	8007b80 <__gethex+0x388>
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	1171      	asrs	r1, r6, #5
 8007b70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b74:	f006 061f 	and.w	r6, r6, #31
 8007b78:	fa02 f606 	lsl.w	r6, r2, r6
 8007b7c:	421e      	tst	r6, r3
 8007b7e:	d13a      	bne.n	8007bf6 <__gethex+0x3fe>
 8007b80:	f045 0520 	orr.w	r5, r5, #32
 8007b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b86:	601c      	str	r4, [r3, #0]
 8007b88:	9b02      	ldr	r3, [sp, #8]
 8007b8a:	601f      	str	r7, [r3, #0]
 8007b8c:	e6b0      	b.n	80078f0 <__gethex+0xf8>
 8007b8e:	4299      	cmp	r1, r3
 8007b90:	f843 cc04 	str.w	ip, [r3, #-4]
 8007b94:	d8d9      	bhi.n	8007b4a <__gethex+0x352>
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	459b      	cmp	fp, r3
 8007b9a:	db17      	blt.n	8007bcc <__gethex+0x3d4>
 8007b9c:	6861      	ldr	r1, [r4, #4]
 8007b9e:	9801      	ldr	r0, [sp, #4]
 8007ba0:	3101      	adds	r1, #1
 8007ba2:	f7fe f81b 	bl	8005bdc <_Balloc>
 8007ba6:	4681      	mov	r9, r0
 8007ba8:	b918      	cbnz	r0, 8007bb2 <__gethex+0x3ba>
 8007baa:	4602      	mov	r2, r0
 8007bac:	2184      	movs	r1, #132	@ 0x84
 8007bae:	4b19      	ldr	r3, [pc, #100]	@ (8007c14 <__gethex+0x41c>)
 8007bb0:	e6c5      	b.n	800793e <__gethex+0x146>
 8007bb2:	6922      	ldr	r2, [r4, #16]
 8007bb4:	f104 010c 	add.w	r1, r4, #12
 8007bb8:	3202      	adds	r2, #2
 8007bba:	0092      	lsls	r2, r2, #2
 8007bbc:	300c      	adds	r0, #12
 8007bbe:	f7ff fd6d 	bl	800769c <memcpy>
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	9801      	ldr	r0, [sp, #4]
 8007bc6:	f7fe f849 	bl	8005c5c <_Bfree>
 8007bca:	464c      	mov	r4, r9
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	6122      	str	r2, [r4, #16]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bd8:	615a      	str	r2, [r3, #20]
 8007bda:	e7be      	b.n	8007b5a <__gethex+0x362>
 8007bdc:	6922      	ldr	r2, [r4, #16]
 8007bde:	455a      	cmp	r2, fp
 8007be0:	dd0b      	ble.n	8007bfa <__gethex+0x402>
 8007be2:	2101      	movs	r1, #1
 8007be4:	4620      	mov	r0, r4
 8007be6:	f7ff fd9f 	bl	8007728 <rshift>
 8007bea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bee:	3701      	adds	r7, #1
 8007bf0:	42bb      	cmp	r3, r7
 8007bf2:	f6ff aee0 	blt.w	80079b6 <__gethex+0x1be>
 8007bf6:	2501      	movs	r5, #1
 8007bf8:	e7c2      	b.n	8007b80 <__gethex+0x388>
 8007bfa:	f016 061f 	ands.w	r6, r6, #31
 8007bfe:	d0fa      	beq.n	8007bf6 <__gethex+0x3fe>
 8007c00:	4453      	add	r3, sl
 8007c02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c06:	f7fe f8db 	bl	8005dc0 <__hi0bits>
 8007c0a:	f1c6 0620 	rsb	r6, r6, #32
 8007c0e:	42b0      	cmp	r0, r6
 8007c10:	dbe7      	blt.n	8007be2 <__gethex+0x3ea>
 8007c12:	e7f0      	b.n	8007bf6 <__gethex+0x3fe>
 8007c14:	080087a7 	.word	0x080087a7

08007c18 <L_shift>:
 8007c18:	f1c2 0208 	rsb	r2, r2, #8
 8007c1c:	0092      	lsls	r2, r2, #2
 8007c1e:	b570      	push	{r4, r5, r6, lr}
 8007c20:	f1c2 0620 	rsb	r6, r2, #32
 8007c24:	6843      	ldr	r3, [r0, #4]
 8007c26:	6804      	ldr	r4, [r0, #0]
 8007c28:	fa03 f506 	lsl.w	r5, r3, r6
 8007c2c:	432c      	orrs	r4, r5
 8007c2e:	40d3      	lsrs	r3, r2
 8007c30:	6004      	str	r4, [r0, #0]
 8007c32:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c36:	4288      	cmp	r0, r1
 8007c38:	d3f4      	bcc.n	8007c24 <L_shift+0xc>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}

08007c3c <__match>:
 8007c3c:	b530      	push	{r4, r5, lr}
 8007c3e:	6803      	ldr	r3, [r0, #0]
 8007c40:	3301      	adds	r3, #1
 8007c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c46:	b914      	cbnz	r4, 8007c4e <__match+0x12>
 8007c48:	6003      	str	r3, [r0, #0]
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	bd30      	pop	{r4, r5, pc}
 8007c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c52:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007c56:	2d19      	cmp	r5, #25
 8007c58:	bf98      	it	ls
 8007c5a:	3220      	addls	r2, #32
 8007c5c:	42a2      	cmp	r2, r4
 8007c5e:	d0f0      	beq.n	8007c42 <__match+0x6>
 8007c60:	2000      	movs	r0, #0
 8007c62:	e7f3      	b.n	8007c4c <__match+0x10>

08007c64 <__hexnan>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	2500      	movs	r5, #0
 8007c6a:	680b      	ldr	r3, [r1, #0]
 8007c6c:	4682      	mov	sl, r0
 8007c6e:	115e      	asrs	r6, r3, #5
 8007c70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c74:	f013 031f 	ands.w	r3, r3, #31
 8007c78:	bf18      	it	ne
 8007c7a:	3604      	addne	r6, #4
 8007c7c:	1f37      	subs	r7, r6, #4
 8007c7e:	4690      	mov	r8, r2
 8007c80:	46b9      	mov	r9, r7
 8007c82:	463c      	mov	r4, r7
 8007c84:	46ab      	mov	fp, r5
 8007c86:	b087      	sub	sp, #28
 8007c88:	6801      	ldr	r1, [r0, #0]
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	f846 5c04 	str.w	r5, [r6, #-4]
 8007c90:	9502      	str	r5, [sp, #8]
 8007c92:	784a      	ldrb	r2, [r1, #1]
 8007c94:	1c4b      	adds	r3, r1, #1
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	b342      	cbz	r2, 8007cec <__hexnan+0x88>
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	9105      	str	r1, [sp, #20]
 8007c9e:	9204      	str	r2, [sp, #16]
 8007ca0:	f7ff fd95 	bl	80077ce <__hexdig_fun>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d151      	bne.n	8007d4c <__hexnan+0xe8>
 8007ca8:	9a04      	ldr	r2, [sp, #16]
 8007caa:	9905      	ldr	r1, [sp, #20]
 8007cac:	2a20      	cmp	r2, #32
 8007cae:	d818      	bhi.n	8007ce2 <__hexnan+0x7e>
 8007cb0:	9b02      	ldr	r3, [sp, #8]
 8007cb2:	459b      	cmp	fp, r3
 8007cb4:	dd13      	ble.n	8007cde <__hexnan+0x7a>
 8007cb6:	454c      	cmp	r4, r9
 8007cb8:	d206      	bcs.n	8007cc8 <__hexnan+0x64>
 8007cba:	2d07      	cmp	r5, #7
 8007cbc:	dc04      	bgt.n	8007cc8 <__hexnan+0x64>
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f7ff ffa8 	bl	8007c18 <L_shift>
 8007cc8:	4544      	cmp	r4, r8
 8007cca:	d952      	bls.n	8007d72 <__hexnan+0x10e>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f1a4 0904 	sub.w	r9, r4, #4
 8007cd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	464c      	mov	r4, r9
 8007cda:	f8cd b008 	str.w	fp, [sp, #8]
 8007cde:	9903      	ldr	r1, [sp, #12]
 8007ce0:	e7d7      	b.n	8007c92 <__hexnan+0x2e>
 8007ce2:	2a29      	cmp	r2, #41	@ 0x29
 8007ce4:	d157      	bne.n	8007d96 <__hexnan+0x132>
 8007ce6:	3102      	adds	r1, #2
 8007ce8:	f8ca 1000 	str.w	r1, [sl]
 8007cec:	f1bb 0f00 	cmp.w	fp, #0
 8007cf0:	d051      	beq.n	8007d96 <__hexnan+0x132>
 8007cf2:	454c      	cmp	r4, r9
 8007cf4:	d206      	bcs.n	8007d04 <__hexnan+0xa0>
 8007cf6:	2d07      	cmp	r5, #7
 8007cf8:	dc04      	bgt.n	8007d04 <__hexnan+0xa0>
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f7ff ff8a 	bl	8007c18 <L_shift>
 8007d04:	4544      	cmp	r4, r8
 8007d06:	d936      	bls.n	8007d76 <__hexnan+0x112>
 8007d08:	4623      	mov	r3, r4
 8007d0a:	f1a8 0204 	sub.w	r2, r8, #4
 8007d0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d12:	429f      	cmp	r7, r3
 8007d14:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d18:	d2f9      	bcs.n	8007d0e <__hexnan+0xaa>
 8007d1a:	1b3b      	subs	r3, r7, r4
 8007d1c:	f023 0303 	bic.w	r3, r3, #3
 8007d20:	3304      	adds	r3, #4
 8007d22:	3401      	adds	r4, #1
 8007d24:	3e03      	subs	r6, #3
 8007d26:	42b4      	cmp	r4, r6
 8007d28:	bf88      	it	hi
 8007d2a:	2304      	movhi	r3, #4
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4443      	add	r3, r8
 8007d30:	f843 2b04 	str.w	r2, [r3], #4
 8007d34:	429f      	cmp	r7, r3
 8007d36:	d2fb      	bcs.n	8007d30 <__hexnan+0xcc>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	b91b      	cbnz	r3, 8007d44 <__hexnan+0xe0>
 8007d3c:	4547      	cmp	r7, r8
 8007d3e:	d128      	bne.n	8007d92 <__hexnan+0x12e>
 8007d40:	2301      	movs	r3, #1
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	2005      	movs	r0, #5
 8007d46:	b007      	add	sp, #28
 8007d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	2d08      	cmp	r5, #8
 8007d50:	f10b 0b01 	add.w	fp, fp, #1
 8007d54:	dd06      	ble.n	8007d64 <__hexnan+0x100>
 8007d56:	4544      	cmp	r4, r8
 8007d58:	d9c1      	bls.n	8007cde <__hexnan+0x7a>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	2501      	movs	r5, #1
 8007d5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d62:	3c04      	subs	r4, #4
 8007d64:	6822      	ldr	r2, [r4, #0]
 8007d66:	f000 000f 	and.w	r0, r0, #15
 8007d6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007d6e:	6020      	str	r0, [r4, #0]
 8007d70:	e7b5      	b.n	8007cde <__hexnan+0x7a>
 8007d72:	2508      	movs	r5, #8
 8007d74:	e7b3      	b.n	8007cde <__hexnan+0x7a>
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0dd      	beq.n	8007d38 <__hexnan+0xd4>
 8007d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d80:	f1c3 0320 	rsb	r3, r3, #32
 8007d84:	40da      	lsrs	r2, r3
 8007d86:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007d90:	e7d2      	b.n	8007d38 <__hexnan+0xd4>
 8007d92:	3f04      	subs	r7, #4
 8007d94:	e7d0      	b.n	8007d38 <__hexnan+0xd4>
 8007d96:	2004      	movs	r0, #4
 8007d98:	e7d5      	b.n	8007d46 <__hexnan+0xe2>

08007d9a <__ascii_mbtowc>:
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	b901      	cbnz	r1, 8007da0 <__ascii_mbtowc+0x6>
 8007d9e:	a901      	add	r1, sp, #4
 8007da0:	b142      	cbz	r2, 8007db4 <__ascii_mbtowc+0x1a>
 8007da2:	b14b      	cbz	r3, 8007db8 <__ascii_mbtowc+0x1e>
 8007da4:	7813      	ldrb	r3, [r2, #0]
 8007da6:	600b      	str	r3, [r1, #0]
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	1e10      	subs	r0, r2, #0
 8007dac:	bf18      	it	ne
 8007dae:	2001      	movne	r0, #1
 8007db0:	b002      	add	sp, #8
 8007db2:	4770      	bx	lr
 8007db4:	4610      	mov	r0, r2
 8007db6:	e7fb      	b.n	8007db0 <__ascii_mbtowc+0x16>
 8007db8:	f06f 0001 	mvn.w	r0, #1
 8007dbc:	e7f8      	b.n	8007db0 <__ascii_mbtowc+0x16>

08007dbe <_realloc_r>:
 8007dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	4680      	mov	r8, r0
 8007dc4:	4615      	mov	r5, r2
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	b921      	cbnz	r1, 8007dd4 <_realloc_r+0x16>
 8007dca:	4611      	mov	r1, r2
 8007dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd0:	f7fd be78 	b.w	8005ac4 <_malloc_r>
 8007dd4:	b92a      	cbnz	r2, 8007de2 <_realloc_r+0x24>
 8007dd6:	f7fd fe03 	bl	80059e0 <_free_r>
 8007dda:	2400      	movs	r4, #0
 8007ddc:	4620      	mov	r0, r4
 8007dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de2:	f000 f840 	bl	8007e66 <_malloc_usable_size_r>
 8007de6:	4285      	cmp	r5, r0
 8007de8:	4606      	mov	r6, r0
 8007dea:	d802      	bhi.n	8007df2 <_realloc_r+0x34>
 8007dec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007df0:	d8f4      	bhi.n	8007ddc <_realloc_r+0x1e>
 8007df2:	4629      	mov	r1, r5
 8007df4:	4640      	mov	r0, r8
 8007df6:	f7fd fe65 	bl	8005ac4 <_malloc_r>
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d0ec      	beq.n	8007dda <_realloc_r+0x1c>
 8007e00:	42b5      	cmp	r5, r6
 8007e02:	462a      	mov	r2, r5
 8007e04:	4621      	mov	r1, r4
 8007e06:	bf28      	it	cs
 8007e08:	4632      	movcs	r2, r6
 8007e0a:	f7ff fc47 	bl	800769c <memcpy>
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4640      	mov	r0, r8
 8007e12:	f7fd fde5 	bl	80059e0 <_free_r>
 8007e16:	463c      	mov	r4, r7
 8007e18:	e7e0      	b.n	8007ddc <_realloc_r+0x1e>

08007e1a <__ascii_wctomb>:
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	b141      	cbz	r1, 8007e32 <__ascii_wctomb+0x18>
 8007e20:	2aff      	cmp	r2, #255	@ 0xff
 8007e22:	d904      	bls.n	8007e2e <__ascii_wctomb+0x14>
 8007e24:	228a      	movs	r2, #138	@ 0x8a
 8007e26:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	4770      	bx	lr
 8007e2e:	2001      	movs	r0, #1
 8007e30:	700a      	strb	r2, [r1, #0]
 8007e32:	4770      	bx	lr

08007e34 <fiprintf>:
 8007e34:	b40e      	push	{r1, r2, r3}
 8007e36:	b503      	push	{r0, r1, lr}
 8007e38:	4601      	mov	r1, r0
 8007e3a:	ab03      	add	r3, sp, #12
 8007e3c:	4805      	ldr	r0, [pc, #20]	@ (8007e54 <fiprintf+0x20>)
 8007e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e42:	6800      	ldr	r0, [r0, #0]
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	f000 f83d 	bl	8007ec4 <_vfiprintf_r>
 8007e4a:	b002      	add	sp, #8
 8007e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e50:	b003      	add	sp, #12
 8007e52:	4770      	bx	lr
 8007e54:	20000018 	.word	0x20000018

08007e58 <abort>:
 8007e58:	2006      	movs	r0, #6
 8007e5a:	b508      	push	{r3, lr}
 8007e5c:	f000 fa06 	bl	800826c <raise>
 8007e60:	2001      	movs	r0, #1
 8007e62:	f7fa f802 	bl	8001e6a <_exit>

08007e66 <_malloc_usable_size_r>:
 8007e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e6a:	1f18      	subs	r0, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bfbc      	itt	lt
 8007e70:	580b      	ldrlt	r3, [r1, r0]
 8007e72:	18c0      	addlt	r0, r0, r3
 8007e74:	4770      	bx	lr

08007e76 <__sfputc_r>:
 8007e76:	6893      	ldr	r3, [r2, #8]
 8007e78:	b410      	push	{r4}
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	6093      	str	r3, [r2, #8]
 8007e80:	da07      	bge.n	8007e92 <__sfputc_r+0x1c>
 8007e82:	6994      	ldr	r4, [r2, #24]
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	db01      	blt.n	8007e8c <__sfputc_r+0x16>
 8007e88:	290a      	cmp	r1, #10
 8007e8a:	d102      	bne.n	8007e92 <__sfputc_r+0x1c>
 8007e8c:	bc10      	pop	{r4}
 8007e8e:	f000 b931 	b.w	80080f4 <__swbuf_r>
 8007e92:	6813      	ldr	r3, [r2, #0]
 8007e94:	1c58      	adds	r0, r3, #1
 8007e96:	6010      	str	r0, [r2, #0]
 8007e98:	7019      	strb	r1, [r3, #0]
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	bc10      	pop	{r4}
 8007e9e:	4770      	bx	lr

08007ea0 <__sfputs_r>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	18d5      	adds	r5, r2, r3
 8007eaa:	42ac      	cmp	r4, r5
 8007eac:	d101      	bne.n	8007eb2 <__sfputs_r+0x12>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e007      	b.n	8007ec2 <__sfputs_r+0x22>
 8007eb2:	463a      	mov	r2, r7
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eba:	f7ff ffdc 	bl	8007e76 <__sfputc_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d1f3      	bne.n	8007eaa <__sfputs_r+0xa>
 8007ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ec4 <_vfiprintf_r>:
 8007ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec8:	460d      	mov	r5, r1
 8007eca:	4614      	mov	r4, r2
 8007ecc:	4698      	mov	r8, r3
 8007ece:	4606      	mov	r6, r0
 8007ed0:	b09d      	sub	sp, #116	@ 0x74
 8007ed2:	b118      	cbz	r0, 8007edc <_vfiprintf_r+0x18>
 8007ed4:	6a03      	ldr	r3, [r0, #32]
 8007ed6:	b90b      	cbnz	r3, 8007edc <_vfiprintf_r+0x18>
 8007ed8:	f7fc fe04 	bl	8004ae4 <__sinit>
 8007edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ede:	07d9      	lsls	r1, r3, #31
 8007ee0:	d405      	bmi.n	8007eee <_vfiprintf_r+0x2a>
 8007ee2:	89ab      	ldrh	r3, [r5, #12]
 8007ee4:	059a      	lsls	r2, r3, #22
 8007ee6:	d402      	bmi.n	8007eee <_vfiprintf_r+0x2a>
 8007ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eea:	f7fc ff12 	bl	8004d12 <__retarget_lock_acquire_recursive>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	071b      	lsls	r3, r3, #28
 8007ef2:	d501      	bpl.n	8007ef8 <_vfiprintf_r+0x34>
 8007ef4:	692b      	ldr	r3, [r5, #16]
 8007ef6:	b99b      	cbnz	r3, 8007f20 <_vfiprintf_r+0x5c>
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4630      	mov	r0, r6
 8007efc:	f000 f938 	bl	8008170 <__swsetup_r>
 8007f00:	b170      	cbz	r0, 8007f20 <_vfiprintf_r+0x5c>
 8007f02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f04:	07dc      	lsls	r4, r3, #31
 8007f06:	d504      	bpl.n	8007f12 <_vfiprintf_r+0x4e>
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	b01d      	add	sp, #116	@ 0x74
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	0598      	lsls	r0, r3, #22
 8007f16:	d4f7      	bmi.n	8007f08 <_vfiprintf_r+0x44>
 8007f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f1a:	f7fc fefb 	bl	8004d14 <__retarget_lock_release_recursive>
 8007f1e:	e7f3      	b.n	8007f08 <_vfiprintf_r+0x44>
 8007f20:	2300      	movs	r3, #0
 8007f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f24:	2320      	movs	r3, #32
 8007f26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f2a:	2330      	movs	r3, #48	@ 0x30
 8007f2c:	f04f 0901 	mov.w	r9, #1
 8007f30:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f34:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80080e0 <_vfiprintf_r+0x21c>
 8007f38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f3c:	4623      	mov	r3, r4
 8007f3e:	469a      	mov	sl, r3
 8007f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f44:	b10a      	cbz	r2, 8007f4a <_vfiprintf_r+0x86>
 8007f46:	2a25      	cmp	r2, #37	@ 0x25
 8007f48:	d1f9      	bne.n	8007f3e <_vfiprintf_r+0x7a>
 8007f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f4e:	d00b      	beq.n	8007f68 <_vfiprintf_r+0xa4>
 8007f50:	465b      	mov	r3, fp
 8007f52:	4622      	mov	r2, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff ffa2 	bl	8007ea0 <__sfputs_r>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f000 80a7 	beq.w	80080b0 <_vfiprintf_r+0x1ec>
 8007f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f64:	445a      	add	r2, fp
 8007f66:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f68:	f89a 3000 	ldrb.w	r3, [sl]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 809f 	beq.w	80080b0 <_vfiprintf_r+0x1ec>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f04f 32ff 	mov.w	r2, #4294967295
 8007f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f7c:	f10a 0a01 	add.w	sl, sl, #1
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	9307      	str	r3, [sp, #28]
 8007f84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f88:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f8a:	4654      	mov	r4, sl
 8007f8c:	2205      	movs	r2, #5
 8007f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f92:	4853      	ldr	r0, [pc, #332]	@ (80080e0 <_vfiprintf_r+0x21c>)
 8007f94:	f7fc febf 	bl	8004d16 <memchr>
 8007f98:	9a04      	ldr	r2, [sp, #16]
 8007f9a:	b9d8      	cbnz	r0, 8007fd4 <_vfiprintf_r+0x110>
 8007f9c:	06d1      	lsls	r1, r2, #27
 8007f9e:	bf44      	itt	mi
 8007fa0:	2320      	movmi	r3, #32
 8007fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fa6:	0713      	lsls	r3, r2, #28
 8007fa8:	bf44      	itt	mi
 8007faa:	232b      	movmi	r3, #43	@ 0x2b
 8007fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fb6:	d015      	beq.n	8007fe4 <_vfiprintf_r+0x120>
 8007fb8:	4654      	mov	r4, sl
 8007fba:	2000      	movs	r0, #0
 8007fbc:	f04f 0c0a 	mov.w	ip, #10
 8007fc0:	9a07      	ldr	r2, [sp, #28]
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc8:	3b30      	subs	r3, #48	@ 0x30
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d94b      	bls.n	8008066 <_vfiprintf_r+0x1a2>
 8007fce:	b1b0      	cbz	r0, 8007ffe <_vfiprintf_r+0x13a>
 8007fd0:	9207      	str	r2, [sp, #28]
 8007fd2:	e014      	b.n	8007ffe <_vfiprintf_r+0x13a>
 8007fd4:	eba0 0308 	sub.w	r3, r0, r8
 8007fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	46a2      	mov	sl, r4
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	e7d2      	b.n	8007f8a <_vfiprintf_r+0xc6>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	1d19      	adds	r1, r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	9103      	str	r1, [sp, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfbb      	ittet	lt
 8007ff0:	425b      	neglt	r3, r3
 8007ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ff6:	9307      	strge	r3, [sp, #28]
 8007ff8:	9307      	strlt	r3, [sp, #28]
 8007ffa:	bfb8      	it	lt
 8007ffc:	9204      	strlt	r2, [sp, #16]
 8007ffe:	7823      	ldrb	r3, [r4, #0]
 8008000:	2b2e      	cmp	r3, #46	@ 0x2e
 8008002:	d10a      	bne.n	800801a <_vfiprintf_r+0x156>
 8008004:	7863      	ldrb	r3, [r4, #1]
 8008006:	2b2a      	cmp	r3, #42	@ 0x2a
 8008008:	d132      	bne.n	8008070 <_vfiprintf_r+0x1ac>
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	3402      	adds	r4, #2
 800800e:	1d1a      	adds	r2, r3, #4
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	9203      	str	r2, [sp, #12]
 8008014:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80080e4 <_vfiprintf_r+0x220>
 800801e:	2203      	movs	r2, #3
 8008020:	4650      	mov	r0, sl
 8008022:	7821      	ldrb	r1, [r4, #0]
 8008024:	f7fc fe77 	bl	8004d16 <memchr>
 8008028:	b138      	cbz	r0, 800803a <_vfiprintf_r+0x176>
 800802a:	2240      	movs	r2, #64	@ 0x40
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	eba0 000a 	sub.w	r0, r0, sl
 8008032:	4082      	lsls	r2, r0
 8008034:	4313      	orrs	r3, r2
 8008036:	3401      	adds	r4, #1
 8008038:	9304      	str	r3, [sp, #16]
 800803a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803e:	2206      	movs	r2, #6
 8008040:	4829      	ldr	r0, [pc, #164]	@ (80080e8 <_vfiprintf_r+0x224>)
 8008042:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008046:	f7fc fe66 	bl	8004d16 <memchr>
 800804a:	2800      	cmp	r0, #0
 800804c:	d03f      	beq.n	80080ce <_vfiprintf_r+0x20a>
 800804e:	4b27      	ldr	r3, [pc, #156]	@ (80080ec <_vfiprintf_r+0x228>)
 8008050:	bb1b      	cbnz	r3, 800809a <_vfiprintf_r+0x1d6>
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	3307      	adds	r3, #7
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	3308      	adds	r3, #8
 800805c:	9303      	str	r3, [sp, #12]
 800805e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008060:	443b      	add	r3, r7
 8008062:	9309      	str	r3, [sp, #36]	@ 0x24
 8008064:	e76a      	b.n	8007f3c <_vfiprintf_r+0x78>
 8008066:	460c      	mov	r4, r1
 8008068:	2001      	movs	r0, #1
 800806a:	fb0c 3202 	mla	r2, ip, r2, r3
 800806e:	e7a8      	b.n	8007fc2 <_vfiprintf_r+0xfe>
 8008070:	2300      	movs	r3, #0
 8008072:	f04f 0c0a 	mov.w	ip, #10
 8008076:	4619      	mov	r1, r3
 8008078:	3401      	adds	r4, #1
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	4620      	mov	r0, r4
 800807e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008082:	3a30      	subs	r2, #48	@ 0x30
 8008084:	2a09      	cmp	r2, #9
 8008086:	d903      	bls.n	8008090 <_vfiprintf_r+0x1cc>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0c6      	beq.n	800801a <_vfiprintf_r+0x156>
 800808c:	9105      	str	r1, [sp, #20]
 800808e:	e7c4      	b.n	800801a <_vfiprintf_r+0x156>
 8008090:	4604      	mov	r4, r0
 8008092:	2301      	movs	r3, #1
 8008094:	fb0c 2101 	mla	r1, ip, r1, r2
 8008098:	e7f0      	b.n	800807c <_vfiprintf_r+0x1b8>
 800809a:	ab03      	add	r3, sp, #12
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	462a      	mov	r2, r5
 80080a0:	4630      	mov	r0, r6
 80080a2:	4b13      	ldr	r3, [pc, #76]	@ (80080f0 <_vfiprintf_r+0x22c>)
 80080a4:	a904      	add	r1, sp, #16
 80080a6:	f7fb fec3 	bl	8003e30 <_printf_float>
 80080aa:	4607      	mov	r7, r0
 80080ac:	1c78      	adds	r0, r7, #1
 80080ae:	d1d6      	bne.n	800805e <_vfiprintf_r+0x19a>
 80080b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080b2:	07d9      	lsls	r1, r3, #31
 80080b4:	d405      	bmi.n	80080c2 <_vfiprintf_r+0x1fe>
 80080b6:	89ab      	ldrh	r3, [r5, #12]
 80080b8:	059a      	lsls	r2, r3, #22
 80080ba:	d402      	bmi.n	80080c2 <_vfiprintf_r+0x1fe>
 80080bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080be:	f7fc fe29 	bl	8004d14 <__retarget_lock_release_recursive>
 80080c2:	89ab      	ldrh	r3, [r5, #12]
 80080c4:	065b      	lsls	r3, r3, #25
 80080c6:	f53f af1f 	bmi.w	8007f08 <_vfiprintf_r+0x44>
 80080ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080cc:	e71e      	b.n	8007f0c <_vfiprintf_r+0x48>
 80080ce:	ab03      	add	r3, sp, #12
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	462a      	mov	r2, r5
 80080d4:	4630      	mov	r0, r6
 80080d6:	4b06      	ldr	r3, [pc, #24]	@ (80080f0 <_vfiprintf_r+0x22c>)
 80080d8:	a904      	add	r1, sp, #16
 80080da:	f7fc f947 	bl	800436c <_printf_i>
 80080de:	e7e4      	b.n	80080aa <_vfiprintf_r+0x1e6>
 80080e0:	08008a69 	.word	0x08008a69
 80080e4:	08008a6f 	.word	0x08008a6f
 80080e8:	08008a73 	.word	0x08008a73
 80080ec:	08003e31 	.word	0x08003e31
 80080f0:	08007ea1 	.word	0x08007ea1

080080f4 <__swbuf_r>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	460e      	mov	r6, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	4605      	mov	r5, r0
 80080fc:	b118      	cbz	r0, 8008106 <__swbuf_r+0x12>
 80080fe:	6a03      	ldr	r3, [r0, #32]
 8008100:	b90b      	cbnz	r3, 8008106 <__swbuf_r+0x12>
 8008102:	f7fc fcef 	bl	8004ae4 <__sinit>
 8008106:	69a3      	ldr	r3, [r4, #24]
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	071a      	lsls	r2, r3, #28
 800810e:	d501      	bpl.n	8008114 <__swbuf_r+0x20>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	b943      	cbnz	r3, 8008126 <__swbuf_r+0x32>
 8008114:	4621      	mov	r1, r4
 8008116:	4628      	mov	r0, r5
 8008118:	f000 f82a 	bl	8008170 <__swsetup_r>
 800811c:	b118      	cbz	r0, 8008126 <__swbuf_r+0x32>
 800811e:	f04f 37ff 	mov.w	r7, #4294967295
 8008122:	4638      	mov	r0, r7
 8008124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	6922      	ldr	r2, [r4, #16]
 800812a:	b2f6      	uxtb	r6, r6
 800812c:	1a98      	subs	r0, r3, r2
 800812e:	6963      	ldr	r3, [r4, #20]
 8008130:	4637      	mov	r7, r6
 8008132:	4283      	cmp	r3, r0
 8008134:	dc05      	bgt.n	8008142 <__swbuf_r+0x4e>
 8008136:	4621      	mov	r1, r4
 8008138:	4628      	mov	r0, r5
 800813a:	f7ff fa4b 	bl	80075d4 <_fflush_r>
 800813e:	2800      	cmp	r0, #0
 8008140:	d1ed      	bne.n	800811e <__swbuf_r+0x2a>
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	3b01      	subs	r3, #1
 8008146:	60a3      	str	r3, [r4, #8]
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	6022      	str	r2, [r4, #0]
 800814e:	701e      	strb	r6, [r3, #0]
 8008150:	6962      	ldr	r2, [r4, #20]
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	429a      	cmp	r2, r3
 8008156:	d004      	beq.n	8008162 <__swbuf_r+0x6e>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	07db      	lsls	r3, r3, #31
 800815c:	d5e1      	bpl.n	8008122 <__swbuf_r+0x2e>
 800815e:	2e0a      	cmp	r6, #10
 8008160:	d1df      	bne.n	8008122 <__swbuf_r+0x2e>
 8008162:	4621      	mov	r1, r4
 8008164:	4628      	mov	r0, r5
 8008166:	f7ff fa35 	bl	80075d4 <_fflush_r>
 800816a:	2800      	cmp	r0, #0
 800816c:	d0d9      	beq.n	8008122 <__swbuf_r+0x2e>
 800816e:	e7d6      	b.n	800811e <__swbuf_r+0x2a>

08008170 <__swsetup_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4b29      	ldr	r3, [pc, #164]	@ (8008218 <__swsetup_r+0xa8>)
 8008174:	4605      	mov	r5, r0
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	460c      	mov	r4, r1
 800817a:	b118      	cbz	r0, 8008184 <__swsetup_r+0x14>
 800817c:	6a03      	ldr	r3, [r0, #32]
 800817e:	b90b      	cbnz	r3, 8008184 <__swsetup_r+0x14>
 8008180:	f7fc fcb0 	bl	8004ae4 <__sinit>
 8008184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008188:	0719      	lsls	r1, r3, #28
 800818a:	d422      	bmi.n	80081d2 <__swsetup_r+0x62>
 800818c:	06da      	lsls	r2, r3, #27
 800818e:	d407      	bmi.n	80081a0 <__swsetup_r+0x30>
 8008190:	2209      	movs	r2, #9
 8008192:	602a      	str	r2, [r5, #0]
 8008194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	81a3      	strh	r3, [r4, #12]
 800819e:	e033      	b.n	8008208 <__swsetup_r+0x98>
 80081a0:	0758      	lsls	r0, r3, #29
 80081a2:	d512      	bpl.n	80081ca <__swsetup_r+0x5a>
 80081a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081a6:	b141      	cbz	r1, 80081ba <__swsetup_r+0x4a>
 80081a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081ac:	4299      	cmp	r1, r3
 80081ae:	d002      	beq.n	80081b6 <__swsetup_r+0x46>
 80081b0:	4628      	mov	r0, r5
 80081b2:	f7fd fc15 	bl	80059e0 <_free_r>
 80081b6:	2300      	movs	r3, #0
 80081b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081c0:	81a3      	strh	r3, [r4, #12]
 80081c2:	2300      	movs	r3, #0
 80081c4:	6063      	str	r3, [r4, #4]
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f043 0308 	orr.w	r3, r3, #8
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	b94b      	cbnz	r3, 80081ea <__swsetup_r+0x7a>
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081e0:	d003      	beq.n	80081ea <__swsetup_r+0x7a>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4628      	mov	r0, r5
 80081e6:	f000 f882 	bl	80082ee <__smakebuf_r>
 80081ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ee:	f013 0201 	ands.w	r2, r3, #1
 80081f2:	d00a      	beq.n	800820a <__swsetup_r+0x9a>
 80081f4:	2200      	movs	r2, #0
 80081f6:	60a2      	str	r2, [r4, #8]
 80081f8:	6962      	ldr	r2, [r4, #20]
 80081fa:	4252      	negs	r2, r2
 80081fc:	61a2      	str	r2, [r4, #24]
 80081fe:	6922      	ldr	r2, [r4, #16]
 8008200:	b942      	cbnz	r2, 8008214 <__swsetup_r+0xa4>
 8008202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008206:	d1c5      	bne.n	8008194 <__swsetup_r+0x24>
 8008208:	bd38      	pop	{r3, r4, r5, pc}
 800820a:	0799      	lsls	r1, r3, #30
 800820c:	bf58      	it	pl
 800820e:	6962      	ldrpl	r2, [r4, #20]
 8008210:	60a2      	str	r2, [r4, #8]
 8008212:	e7f4      	b.n	80081fe <__swsetup_r+0x8e>
 8008214:	2000      	movs	r0, #0
 8008216:	e7f7      	b.n	8008208 <__swsetup_r+0x98>
 8008218:	20000018 	.word	0x20000018

0800821c <_raise_r>:
 800821c:	291f      	cmp	r1, #31
 800821e:	b538      	push	{r3, r4, r5, lr}
 8008220:	4605      	mov	r5, r0
 8008222:	460c      	mov	r4, r1
 8008224:	d904      	bls.n	8008230 <_raise_r+0x14>
 8008226:	2316      	movs	r3, #22
 8008228:	6003      	str	r3, [r0, #0]
 800822a:	f04f 30ff 	mov.w	r0, #4294967295
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008232:	b112      	cbz	r2, 800823a <_raise_r+0x1e>
 8008234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008238:	b94b      	cbnz	r3, 800824e <_raise_r+0x32>
 800823a:	4628      	mov	r0, r5
 800823c:	f000 f830 	bl	80082a0 <_getpid_r>
 8008240:	4622      	mov	r2, r4
 8008242:	4601      	mov	r1, r0
 8008244:	4628      	mov	r0, r5
 8008246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800824a:	f000 b817 	b.w	800827c <_kill_r>
 800824e:	2b01      	cmp	r3, #1
 8008250:	d00a      	beq.n	8008268 <_raise_r+0x4c>
 8008252:	1c59      	adds	r1, r3, #1
 8008254:	d103      	bne.n	800825e <_raise_r+0x42>
 8008256:	2316      	movs	r3, #22
 8008258:	6003      	str	r3, [r0, #0]
 800825a:	2001      	movs	r0, #1
 800825c:	e7e7      	b.n	800822e <_raise_r+0x12>
 800825e:	2100      	movs	r1, #0
 8008260:	4620      	mov	r0, r4
 8008262:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008266:	4798      	blx	r3
 8008268:	2000      	movs	r0, #0
 800826a:	e7e0      	b.n	800822e <_raise_r+0x12>

0800826c <raise>:
 800826c:	4b02      	ldr	r3, [pc, #8]	@ (8008278 <raise+0xc>)
 800826e:	4601      	mov	r1, r0
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	f7ff bfd3 	b.w	800821c <_raise_r>
 8008276:	bf00      	nop
 8008278:	20000018 	.word	0x20000018

0800827c <_kill_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	2300      	movs	r3, #0
 8008280:	4d06      	ldr	r5, [pc, #24]	@ (800829c <_kill_r+0x20>)
 8008282:	4604      	mov	r4, r0
 8008284:	4608      	mov	r0, r1
 8008286:	4611      	mov	r1, r2
 8008288:	602b      	str	r3, [r5, #0]
 800828a:	f7f9 fdde 	bl	8001e4a <_kill>
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	d102      	bne.n	8008298 <_kill_r+0x1c>
 8008292:	682b      	ldr	r3, [r5, #0]
 8008294:	b103      	cbz	r3, 8008298 <_kill_r+0x1c>
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	bd38      	pop	{r3, r4, r5, pc}
 800829a:	bf00      	nop
 800829c:	200003ec 	.word	0x200003ec

080082a0 <_getpid_r>:
 80082a0:	f7f9 bdcc 	b.w	8001e3c <_getpid>

080082a4 <__swhatbuf_r>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	460c      	mov	r4, r1
 80082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ac:	4615      	mov	r5, r2
 80082ae:	2900      	cmp	r1, #0
 80082b0:	461e      	mov	r6, r3
 80082b2:	b096      	sub	sp, #88	@ 0x58
 80082b4:	da0c      	bge.n	80082d0 <__swhatbuf_r+0x2c>
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	2100      	movs	r1, #0
 80082ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082be:	bf14      	ite	ne
 80082c0:	2340      	movne	r3, #64	@ 0x40
 80082c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082c6:	2000      	movs	r0, #0
 80082c8:	6031      	str	r1, [r6, #0]
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	b016      	add	sp, #88	@ 0x58
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	466a      	mov	r2, sp
 80082d2:	f000 f849 	bl	8008368 <_fstat_r>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	dbed      	blt.n	80082b6 <__swhatbuf_r+0x12>
 80082da:	9901      	ldr	r1, [sp, #4]
 80082dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082e4:	4259      	negs	r1, r3
 80082e6:	4159      	adcs	r1, r3
 80082e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082ec:	e7eb      	b.n	80082c6 <__swhatbuf_r+0x22>

080082ee <__smakebuf_r>:
 80082ee:	898b      	ldrh	r3, [r1, #12]
 80082f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082f2:	079d      	lsls	r5, r3, #30
 80082f4:	4606      	mov	r6, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	d507      	bpl.n	800830a <__smakebuf_r+0x1c>
 80082fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	6123      	str	r3, [r4, #16]
 8008302:	2301      	movs	r3, #1
 8008304:	6163      	str	r3, [r4, #20]
 8008306:	b003      	add	sp, #12
 8008308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830a:	466a      	mov	r2, sp
 800830c:	ab01      	add	r3, sp, #4
 800830e:	f7ff ffc9 	bl	80082a4 <__swhatbuf_r>
 8008312:	9f00      	ldr	r7, [sp, #0]
 8008314:	4605      	mov	r5, r0
 8008316:	4639      	mov	r1, r7
 8008318:	4630      	mov	r0, r6
 800831a:	f7fd fbd3 	bl	8005ac4 <_malloc_r>
 800831e:	b948      	cbnz	r0, 8008334 <__smakebuf_r+0x46>
 8008320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008324:	059a      	lsls	r2, r3, #22
 8008326:	d4ee      	bmi.n	8008306 <__smakebuf_r+0x18>
 8008328:	f023 0303 	bic.w	r3, r3, #3
 800832c:	f043 0302 	orr.w	r3, r3, #2
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	e7e2      	b.n	80082fa <__smakebuf_r+0xc>
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800833a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	6020      	str	r0, [r4, #0]
 8008344:	b15b      	cbz	r3, 800835e <__smakebuf_r+0x70>
 8008346:	4630      	mov	r0, r6
 8008348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800834c:	f000 f81e 	bl	800838c <_isatty_r>
 8008350:	b128      	cbz	r0, 800835e <__smakebuf_r+0x70>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f023 0303 	bic.w	r3, r3, #3
 8008358:	f043 0301 	orr.w	r3, r3, #1
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	431d      	orrs	r5, r3
 8008362:	81a5      	strh	r5, [r4, #12]
 8008364:	e7cf      	b.n	8008306 <__smakebuf_r+0x18>
	...

08008368 <_fstat_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	2300      	movs	r3, #0
 800836c:	4d06      	ldr	r5, [pc, #24]	@ (8008388 <_fstat_r+0x20>)
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	4611      	mov	r1, r2
 8008374:	602b      	str	r3, [r5, #0]
 8008376:	f7f9 fdc7 	bl	8001f08 <_fstat>
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d102      	bne.n	8008384 <_fstat_r+0x1c>
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	b103      	cbz	r3, 8008384 <_fstat_r+0x1c>
 8008382:	6023      	str	r3, [r4, #0]
 8008384:	bd38      	pop	{r3, r4, r5, pc}
 8008386:	bf00      	nop
 8008388:	200003ec 	.word	0x200003ec

0800838c <_isatty_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	2300      	movs	r3, #0
 8008390:	4d05      	ldr	r5, [pc, #20]	@ (80083a8 <_isatty_r+0x1c>)
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	602b      	str	r3, [r5, #0]
 8008398:	f7f9 fdc5 	bl	8001f26 <_isatty>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_isatty_r+0x1a>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_isatty_r+0x1a>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	200003ec 	.word	0x200003ec

080083ac <sqrt>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	f000 f81f 	bl	80083f4 <__ieee754_sqrt>
 80083b6:	4632      	mov	r2, r6
 80083b8:	4604      	mov	r4, r0
 80083ba:	460d      	mov	r5, r1
 80083bc:	463b      	mov	r3, r7
 80083be:	4630      	mov	r0, r6
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7f8 fb23 	bl	8000a0c <__aeabi_dcmpun>
 80083c6:	b990      	cbnz	r0, 80083ee <sqrt+0x42>
 80083c8:	2200      	movs	r2, #0
 80083ca:	2300      	movs	r3, #0
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f8 faf4 	bl	80009bc <__aeabi_dcmplt>
 80083d4:	b158      	cbz	r0, 80083ee <sqrt+0x42>
 80083d6:	f7fc fc71 	bl	8004cbc <__errno>
 80083da:	2321      	movs	r3, #33	@ 0x21
 80083dc:	2200      	movs	r2, #0
 80083de:	6003      	str	r3, [r0, #0]
 80083e0:	2300      	movs	r3, #0
 80083e2:	4610      	mov	r0, r2
 80083e4:	4619      	mov	r1, r3
 80083e6:	f7f8 f9a1 	bl	800072c <__aeabi_ddiv>
 80083ea:	4604      	mov	r4, r0
 80083ec:	460d      	mov	r5, r1
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083f4 <__ieee754_sqrt>:
 80083f4:	4a67      	ldr	r2, [pc, #412]	@ (8008594 <__ieee754_sqrt+0x1a0>)
 80083f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	438a      	bics	r2, r1
 80083fc:	4606      	mov	r6, r0
 80083fe:	460f      	mov	r7, r1
 8008400:	460b      	mov	r3, r1
 8008402:	4604      	mov	r4, r0
 8008404:	d10e      	bne.n	8008424 <__ieee754_sqrt+0x30>
 8008406:	4602      	mov	r2, r0
 8008408:	f7f8 f866 	bl	80004d8 <__aeabi_dmul>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f7 feaa 	bl	800016c <__adddf3>
 8008418:	4606      	mov	r6, r0
 800841a:	460f      	mov	r7, r1
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	2900      	cmp	r1, #0
 8008426:	dc0c      	bgt.n	8008442 <__ieee754_sqrt+0x4e>
 8008428:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800842c:	4302      	orrs	r2, r0
 800842e:	d0f5      	beq.n	800841c <__ieee754_sqrt+0x28>
 8008430:	b189      	cbz	r1, 8008456 <__ieee754_sqrt+0x62>
 8008432:	4602      	mov	r2, r0
 8008434:	f7f7 fe98 	bl	8000168 <__aeabi_dsub>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	f7f8 f976 	bl	800072c <__aeabi_ddiv>
 8008440:	e7ea      	b.n	8008418 <__ieee754_sqrt+0x24>
 8008442:	150a      	asrs	r2, r1, #20
 8008444:	d115      	bne.n	8008472 <__ieee754_sqrt+0x7e>
 8008446:	2100      	movs	r1, #0
 8008448:	e009      	b.n	800845e <__ieee754_sqrt+0x6a>
 800844a:	0ae3      	lsrs	r3, r4, #11
 800844c:	3a15      	subs	r2, #21
 800844e:	0564      	lsls	r4, r4, #21
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0fa      	beq.n	800844a <__ieee754_sqrt+0x56>
 8008454:	e7f7      	b.n	8008446 <__ieee754_sqrt+0x52>
 8008456:	460a      	mov	r2, r1
 8008458:	e7fa      	b.n	8008450 <__ieee754_sqrt+0x5c>
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	3101      	adds	r1, #1
 800845e:	02d8      	lsls	r0, r3, #11
 8008460:	d5fb      	bpl.n	800845a <__ieee754_sqrt+0x66>
 8008462:	1e48      	subs	r0, r1, #1
 8008464:	1a12      	subs	r2, r2, r0
 8008466:	f1c1 0020 	rsb	r0, r1, #32
 800846a:	fa24 f000 	lsr.w	r0, r4, r0
 800846e:	4303      	orrs	r3, r0
 8008470:	408c      	lsls	r4, r1
 8008472:	2600      	movs	r6, #0
 8008474:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008478:	2116      	movs	r1, #22
 800847a:	07d2      	lsls	r2, r2, #31
 800847c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008480:	4632      	mov	r2, r6
 8008482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800848a:	bf5c      	itt	pl
 800848c:	005b      	lslpl	r3, r3, #1
 800848e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008492:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008496:	bf58      	it	pl
 8008498:	0064      	lslpl	r4, r4, #1
 800849a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800849e:	107f      	asrs	r7, r7, #1
 80084a0:	0064      	lsls	r4, r4, #1
 80084a2:	1815      	adds	r5, r2, r0
 80084a4:	429d      	cmp	r5, r3
 80084a6:	bfde      	ittt	le
 80084a8:	182a      	addle	r2, r5, r0
 80084aa:	1b5b      	suble	r3, r3, r5
 80084ac:	1836      	addle	r6, r6, r0
 80084ae:	0fe5      	lsrs	r5, r4, #31
 80084b0:	3901      	subs	r1, #1
 80084b2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80084b6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80084ba:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80084be:	d1f0      	bne.n	80084a2 <__ieee754_sqrt+0xae>
 80084c0:	460d      	mov	r5, r1
 80084c2:	f04f 0a20 	mov.w	sl, #32
 80084c6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80084ca:	429a      	cmp	r2, r3
 80084cc:	eb01 0c00 	add.w	ip, r1, r0
 80084d0:	db02      	blt.n	80084d8 <__ieee754_sqrt+0xe4>
 80084d2:	d113      	bne.n	80084fc <__ieee754_sqrt+0x108>
 80084d4:	45a4      	cmp	ip, r4
 80084d6:	d811      	bhi.n	80084fc <__ieee754_sqrt+0x108>
 80084d8:	f1bc 0f00 	cmp.w	ip, #0
 80084dc:	eb0c 0100 	add.w	r1, ip, r0
 80084e0:	da42      	bge.n	8008568 <__ieee754_sqrt+0x174>
 80084e2:	2900      	cmp	r1, #0
 80084e4:	db40      	blt.n	8008568 <__ieee754_sqrt+0x174>
 80084e6:	f102 0e01 	add.w	lr, r2, #1
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	4672      	mov	r2, lr
 80084ee:	45a4      	cmp	ip, r4
 80084f0:	bf88      	it	hi
 80084f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80084f6:	eba4 040c 	sub.w	r4, r4, ip
 80084fa:	4405      	add	r5, r0
 80084fc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008500:	f1ba 0a01 	subs.w	sl, sl, #1
 8008504:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008508:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800850c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008510:	d1db      	bne.n	80084ca <__ieee754_sqrt+0xd6>
 8008512:	431c      	orrs	r4, r3
 8008514:	d01a      	beq.n	800854c <__ieee754_sqrt+0x158>
 8008516:	4c20      	ldr	r4, [pc, #128]	@ (8008598 <__ieee754_sqrt+0x1a4>)
 8008518:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800859c <__ieee754_sqrt+0x1a8>
 800851c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008520:	e9db 2300 	ldrd	r2, r3, [fp]
 8008524:	f7f7 fe20 	bl	8000168 <__aeabi_dsub>
 8008528:	e9d4 8900 	ldrd	r8, r9, [r4]
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4640      	mov	r0, r8
 8008532:	4649      	mov	r1, r9
 8008534:	f7f8 fa4c 	bl	80009d0 <__aeabi_dcmple>
 8008538:	b140      	cbz	r0, 800854c <__ieee754_sqrt+0x158>
 800853a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800853e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008542:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008546:	d111      	bne.n	800856c <__ieee754_sqrt+0x178>
 8008548:	4655      	mov	r5, sl
 800854a:	3601      	adds	r6, #1
 800854c:	1072      	asrs	r2, r6, #1
 800854e:	086b      	lsrs	r3, r5, #1
 8008550:	07f1      	lsls	r1, r6, #31
 8008552:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008556:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800855a:	bf48      	it	mi
 800855c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008560:	4618      	mov	r0, r3
 8008562:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008566:	e757      	b.n	8008418 <__ieee754_sqrt+0x24>
 8008568:	4696      	mov	lr, r2
 800856a:	e7be      	b.n	80084ea <__ieee754_sqrt+0xf6>
 800856c:	f7f7 fdfe 	bl	800016c <__adddf3>
 8008570:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4640      	mov	r0, r8
 800857a:	4649      	mov	r1, r9
 800857c:	f7f8 fa1e 	bl	80009bc <__aeabi_dcmplt>
 8008580:	b120      	cbz	r0, 800858c <__ieee754_sqrt+0x198>
 8008582:	1ca8      	adds	r0, r5, #2
 8008584:	bf08      	it	eq
 8008586:	3601      	addeq	r6, #1
 8008588:	3502      	adds	r5, #2
 800858a:	e7df      	b.n	800854c <__ieee754_sqrt+0x158>
 800858c:	1c6b      	adds	r3, r5, #1
 800858e:	f023 0501 	bic.w	r5, r3, #1
 8008592:	e7db      	b.n	800854c <__ieee754_sqrt+0x158>
 8008594:	7ff00000 	.word	0x7ff00000
 8008598:	200001e0 	.word	0x200001e0
 800859c:	200001d8 	.word	0x200001d8

080085a0 <_init>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr

080085ac <_fini>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	bf00      	nop
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr
