
DHT22_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000778c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  080078a0  080078a0  000088a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d50  08007d50  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d50  08007d50  00008d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d58  08007d58  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d58  08007d58  00008d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d5c  08007d5c  00008d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001d4  08007f34  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08007f34  00009424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba98  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c66  00000000  00000000  00014c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00016900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a0  00000000  00000000  00017558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003018  00000000  00000000  00017ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de6d  00000000  00000000  0001af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008befd  00000000  00000000  00028d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4c7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d8  00000000  00000000  000b4cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000b9598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007884 	.word	0x08007884

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007884 	.word	0x08007884

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <uartx_write>:
#include "stdio.h"
#include "string.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 800109c:	1cf9      	adds	r1, r7, #3
 800109e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a2:	2201      	movs	r2, #1
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f001 ff11 	bl	8002ecc <HAL_UART_Transmit>

}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 80010bc:	e007      	b.n	80010ce <uartx_write_text+0x1c>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	603a      	str	r2, [r7, #0]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffe1 	bl	8001090 <uartx_write>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f3      	bne.n	80010be <uartx_write_text+0xc>

}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <microDelay>:
		float tCelsius = 0;
		float tFahrenheit = 0;
		float RH = 0;

		void microDelay (uint16_t delay)
		{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <microDelay+0x2c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	@ 0x24
		  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80010f2:	bf00      	nop
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <microDelay+0x2c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d3f9      	bcc.n	80010f4 <microDelay+0x14>
		}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	200001f8 	.word	0x200001f8

08001110 <DHT22_Start>:

		uint8_t DHT22_Start (void)
		{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
		  uint8_t Response = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]
		  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
		  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8001126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800112a:	607b      	str	r3, [r7, #4]
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
		  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	482d      	ldr	r0, [pc, #180]	@ (80011f4 <DHT22_Start+0xe4>)
 800113e:	f000 fdf9 	bl	8001d34 <HAL_GPIO_Init>
		  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001148:	482a      	ldr	r0, [pc, #168]	@ (80011f4 <DHT22_Start+0xe4>)
 800114a:	f000 ff8e 	bl	800206a <HAL_GPIO_WritePin>
		  microDelay (1300);   // wait for 1300us
 800114e:	f240 5014 	movw	r0, #1300	@ 0x514
 8001152:	f7ff ffc5 	bl	80010e0 <microDelay>
		  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	4825      	ldr	r0, [pc, #148]	@ (80011f4 <DHT22_Start+0xe4>)
 800115e:	f000 ff84 	bl	800206a <HAL_GPIO_WritePin>
		  microDelay (30);   // wait for 30us
 8001162:	201e      	movs	r0, #30
 8001164:	f7ff ffbc 	bl	80010e0 <microDelay>
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	481f      	ldr	r0, [pc, #124]	@ (80011f4 <DHT22_Start+0xe4>)
 8001176:	f000 fddd 	bl	8001d34 <HAL_GPIO_Init>
		  microDelay (40);
 800117a:	2028      	movs	r0, #40	@ 0x28
 800117c:	f7ff ffb0 	bl	80010e0 <microDelay>
		  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8001180:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001184:	481b      	ldr	r0, [pc, #108]	@ (80011f4 <DHT22_Start+0xe4>)
 8001186:	f000 ff59 	bl	800203c <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10c      	bne.n	80011aa <DHT22_Start+0x9a>
		  {
			microDelay (80);
 8001190:	2050      	movs	r0, #80	@ 0x50
 8001192:	f7ff ffa5 	bl	80010e0 <microDelay>
			if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 8001196:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800119a:	4816      	ldr	r0, [pc, #88]	@ (80011f4 <DHT22_Start+0xe4>)
 800119c:	f000 ff4e 	bl	800203c <HAL_GPIO_ReadPin>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <DHT22_Start+0x9a>
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
		  }
		  pMillis = HAL_GetTick();
 80011aa:	f000 fcb1 	bl	8001b10 <HAL_GetTick>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a11      	ldr	r2, [pc, #68]	@ (80011f8 <DHT22_Start+0xe8>)
 80011b2:	6013      	str	r3, [r2, #0]
		  cMillis = HAL_GetTick();
 80011b4:	f000 fcac 	bl	8001b10 <HAL_GetTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <DHT22_Start+0xec>)
 80011bc:	6013      	str	r3, [r2, #0]
		  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80011be:	e004      	b.n	80011ca <DHT22_Start+0xba>
		  {
			cMillis = HAL_GetTick();
 80011c0:	f000 fca6 	bl	8001b10 <HAL_GetTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <DHT22_Start+0xec>)
 80011c8:	6013      	str	r3, [r2, #0]
		  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80011ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <DHT22_Start+0xe4>)
 80011d0:	f000 ff34 	bl	800203c <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <DHT22_Start+0xd8>
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <DHT22_Start+0xe8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1c9a      	adds	r2, r3, #2
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <DHT22_Start+0xec>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8eb      	bhi.n	80011c0 <DHT22_Start+0xb0>
		  }
		  return Response;
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
		}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	200002c0 	.word	0x200002c0
 80011fc:	200002c4 	.word	0x200002c4

08001200 <DHT22_Read>:

		uint8_t DHT22_Read (void)
		{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
		  uint8_t a,b;
		  for (a=0;a<8;a++)
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	e066      	b.n	80012da <DHT22_Read+0xda>
		  {
			pMillis = HAL_GetTick();
 800120c:	f000 fc80 	bl	8001b10 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	4a36      	ldr	r2, [pc, #216]	@ (80012ec <DHT22_Read+0xec>)
 8001214:	6013      	str	r3, [r2, #0]
			cMillis = HAL_GetTick();
 8001216:	f000 fc7b 	bl	8001b10 <HAL_GetTick>
 800121a:	4603      	mov	r3, r0
 800121c:	4a34      	ldr	r2, [pc, #208]	@ (80012f0 <DHT22_Read+0xf0>)
 800121e:	6013      	str	r3, [r2, #0]
			while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8001220:	e004      	b.n	800122c <DHT22_Read+0x2c>
			{  // wait for the pin to go high
			  cMillis = HAL_GetTick();
 8001222:	f000 fc75 	bl	8001b10 <HAL_GetTick>
 8001226:	4603      	mov	r3, r0
 8001228:	4a31      	ldr	r2, [pc, #196]	@ (80012f0 <DHT22_Read+0xf0>)
 800122a:	6013      	str	r3, [r2, #0]
			while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800122c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001230:	4830      	ldr	r0, [pc, #192]	@ (80012f4 <DHT22_Read+0xf4>)
 8001232:	f000 ff03 	bl	800203c <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d106      	bne.n	800124a <DHT22_Read+0x4a>
 800123c:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <DHT22_Read+0xec>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	1c9a      	adds	r2, r3, #2
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <DHT22_Read+0xf0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d8eb      	bhi.n	8001222 <DHT22_Read+0x22>
			}
			microDelay (40);   // wait for 40 us
 800124a:	2028      	movs	r0, #40	@ 0x28
 800124c:	f7ff ff48 	bl	80010e0 <microDelay>
			if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001254:	4827      	ldr	r0, [pc, #156]	@ (80012f4 <DHT22_Read+0xf4>)
 8001256:	f000 fef1 	bl	800203c <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10e      	bne.n	800127e <DHT22_Read+0x7e>
			  b&= ~(1<<(7-a));
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2201      	movs	r2, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	b25b      	sxtb	r3, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	b25a      	sxtb	r2, r3
 8001272:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001276:	4013      	ands	r3, r2
 8001278:	b25b      	sxtb	r3, r3
 800127a:	71bb      	strb	r3, [r7, #6]
 800127c:	e00b      	b.n	8001296 <DHT22_Read+0x96>
			else
			  b|= (1<<(7-a));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f1c3 0307 	rsb	r3, r3, #7
 8001284:	2201      	movs	r2, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	b25a      	sxtb	r2, r3
 800128c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	71bb      	strb	r3, [r7, #6]
			pMillis = HAL_GetTick();
 8001296:	f000 fc3b 	bl	8001b10 <HAL_GetTick>
 800129a:	4603      	mov	r3, r0
 800129c:	4a13      	ldr	r2, [pc, #76]	@ (80012ec <DHT22_Read+0xec>)
 800129e:	6013      	str	r3, [r2, #0]
			cMillis = HAL_GetTick();
 80012a0:	f000 fc36 	bl	8001b10 <HAL_GetTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <DHT22_Read+0xf0>)
 80012a8:	6013      	str	r3, [r2, #0]
			while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80012aa:	e004      	b.n	80012b6 <DHT22_Read+0xb6>
			{  // wait for the pin to go low
			  cMillis = HAL_GetTick();
 80012ac:	f000 fc30 	bl	8001b10 <HAL_GetTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a0f      	ldr	r2, [pc, #60]	@ (80012f0 <DHT22_Read+0xf0>)
 80012b4:	6013      	str	r3, [r2, #0]
			while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80012b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ba:	480e      	ldr	r0, [pc, #56]	@ (80012f4 <DHT22_Read+0xf4>)
 80012bc:	f000 febe 	bl	800203c <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <DHT22_Read+0xd4>
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <DHT22_Read+0xec>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1c9a      	adds	r2, r3, #2
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <DHT22_Read+0xf0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8eb      	bhi.n	80012ac <DHT22_Read+0xac>
		  for (a=0;a<8;a++)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3301      	adds	r3, #1
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	d995      	bls.n	800120c <DHT22_Read+0xc>
			}
		  }
		  return b;
 80012e0:	79bb      	ldrb	r3, [r7, #6]
		}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002c0 	.word	0x200002c0
 80012f0:	200002c4 	.word	0x200002c4
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 fbaf 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f8e5 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 f9a3 	bl	8001650 <MX_GPIO_Init>
  MX_TIM1_Init();
 800130a:	f000 f927 	bl	800155c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800130e:	f000 f975 	bl	80015fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8001312:	485c      	ldr	r0, [pc, #368]	@ (8001484 <main+0x18c>)
 8001314:	f001 fb22 	bl	800295c <HAL_TIM_Base_Start>
  uartx_write_text(&huart1, "Start...\r\n");
 8001318:	495b      	ldr	r1, [pc, #364]	@ (8001488 <main+0x190>)
 800131a:	485c      	ldr	r0, [pc, #368]	@ (800148c <main+0x194>)
 800131c:	f7ff fec9 	bl	80010b2 <uartx_write_text>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 // HAL_Delay(10);
	  HAL_Delay(2000); // 1-second delay
 8001320:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001324:	f000 fbfe 	bl	8001b24 <HAL_Delay>
	  uartx_write_text(&huart1, "1...\r\n");
 8001328:	4959      	ldr	r1, [pc, #356]	@ (8001490 <main+0x198>)
 800132a:	4858      	ldr	r0, [pc, #352]	@ (800148c <main+0x194>)
 800132c:	f7ff fec1 	bl	80010b2 <uartx_write_text>
	    if (DHT22_Start())
 8001330:	f7ff feee 	bl	8001110 <DHT22_Start>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 809e 	beq.w	8001478 <main+0x180>
	    {
	        RH1 = DHT22_Read(); // Read the first 8 bits of humidity
 800133c:	f7ff ff60 	bl	8001200 <DHT22_Read>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b53      	ldr	r3, [pc, #332]	@ (8001494 <main+0x19c>)
 8001346:	701a      	strb	r2, [r3, #0]
	        RH2 = DHT22_Read(); // Read the second 8 bits of humidity
 8001348:	f7ff ff5a 	bl	8001200 <DHT22_Read>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b51      	ldr	r3, [pc, #324]	@ (8001498 <main+0x1a0>)
 8001352:	701a      	strb	r2, [r3, #0]
	        TC1 = DHT22_Read(); // Read the first 8 bits of temperature
 8001354:	f7ff ff54 	bl	8001200 <DHT22_Read>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <main+0x1a4>)
 800135e:	701a      	strb	r2, [r3, #0]
	        TC2 = DHT22_Read(); // Read the second 8 bits of temperature
 8001360:	f7ff ff4e 	bl	8001200 <DHT22_Read>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b4d      	ldr	r3, [pc, #308]	@ (80014a0 <main+0x1a8>)
 800136a:	701a      	strb	r2, [r3, #0]
	        SUM = DHT22_Read(); // Read checksum
 800136c:	f7ff ff48 	bl	8001200 <DHT22_Read>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b4b      	ldr	r3, [pc, #300]	@ (80014a4 <main+0x1ac>)
 8001376:	701a      	strb	r2, [r3, #0]
	        CHECK = RH1 + RH2 + TC1 + TC2;
 8001378:	4b46      	ldr	r3, [pc, #280]	@ (8001494 <main+0x19c>)
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	4b46      	ldr	r3, [pc, #280]	@ (8001498 <main+0x1a0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b45      	ldr	r3, [pc, #276]	@ (800149c <main+0x1a4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b44      	ldr	r3, [pc, #272]	@ (80014a0 <main+0x1a8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4413      	add	r3, r2
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b44      	ldr	r3, [pc, #272]	@ (80014a8 <main+0x1b0>)
 8001396:	701a      	strb	r2, [r3, #0]
	  	  uartx_write_text(&huart1, "2...\r\n");
 8001398:	4944      	ldr	r1, [pc, #272]	@ (80014ac <main+0x1b4>)
 800139a:	483c      	ldr	r0, [pc, #240]	@ (800148c <main+0x194>)
 800139c:	f7ff fe89 	bl	80010b2 <uartx_write_text>

	        if (CHECK == SUM) // Validate checksum
 80013a0:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <main+0x1b0>)
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <main+0x1ac>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d165      	bne.n	8001478 <main+0x180>
	        {
	            if (TC1 > 127) // If TC1=10000000, temperature is negative
 80013ac:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <main+0x1a4>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da0f      	bge.n	80013d6 <main+0xde>
	            {
	                tCelsius = (float)TC2 / 10 * (-1);
 80013b6:	4b3a      	ldr	r3, [pc, #232]	@ (80014a0 <main+0x1a8>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc8a 	bl	8000cd4 <__aeabi_ui2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	493b      	ldr	r1, [pc, #236]	@ (80014b0 <main+0x1b8>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd91 	bl	8000eec <__aeabi_fdiv>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80013d0:	4a38      	ldr	r2, [pc, #224]	@ (80014b4 <main+0x1bc>)
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e011      	b.n	80013fa <main+0x102>
	            }
	            else
	            {
	                tCelsius = (float)((TC1 << 8) | TC2) / 10;
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <main+0x1a4>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	4a30      	ldr	r2, [pc, #192]	@ (80014a0 <main+0x1a8>)
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fc7a 	bl	8000cdc <__aeabi_i2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4931      	ldr	r1, [pc, #196]	@ (80014b0 <main+0x1b8>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fd7d 	bl	8000eec <__aeabi_fdiv>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <main+0x1bc>)
 80013f8:	601a      	str	r2, [r3, #0]
	            }

	            RH = (float)((RH1 << 8) | RH2) / 10;
 80013fa:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <main+0x19c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	4a25      	ldr	r2, [pc, #148]	@ (8001498 <main+0x1a0>)
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	4313      	orrs	r3, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fc68 	bl	8000cdc <__aeabi_i2f>
 800140c:	4603      	mov	r3, r0
 800140e:	4928      	ldr	r1, [pc, #160]	@ (80014b0 <main+0x1b8>)
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd6b 	bl	8000eec <__aeabi_fdiv>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <main+0x1c0>)
 800141c:	601a      	str	r2, [r3, #0]

	            // Store temperature and humidity in DHT22 structure
	            DHT22.temperature = tCelsius; // Temperature in Celsius
 800141e:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <main+0x1bc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a26      	ldr	r2, [pc, #152]	@ (80014bc <main+0x1c4>)
 8001424:	6013      	str	r3, [r2, #0]
	            DHT22.humidity = RH;          // Relative humidity
 8001426:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <main+0x1c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a24      	ldr	r2, [pc, #144]	@ (80014bc <main+0x1c4>)
 800142c:	6053      	str	r3, [r2, #4]

	            // Format the output into a string
	            uartx_write_text(&huart1, "3...\r\n");
 800142e:	4924      	ldr	r1, [pc, #144]	@ (80014c0 <main+0x1c8>)
 8001430:	4816      	ldr	r0, [pc, #88]	@ (800148c <main+0x194>)
 8001432:	f7ff fe3e 	bl	80010b2 <uartx_write_text>
	            sprintf(outputBuffer, "Temperature: %2.1f C, Humidity: %2.1f \r\n", DHT22.temperature, DHT22.humidity);
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <main+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe fff4 	bl	8000428 <__aeabi_f2d>
 8001440:	4604      	mov	r4, r0
 8001442:	460d      	mov	r5, r1
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <main+0x1c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	f7fe ffed 	bl	8000428 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	e9cd 2300 	strd	r2, r3, [sp]
 8001456:	4622      	mov	r2, r4
 8001458:	462b      	mov	r3, r5
 800145a:	491a      	ldr	r1, [pc, #104]	@ (80014c4 <main+0x1cc>)
 800145c:	481a      	ldr	r0, [pc, #104]	@ (80014c8 <main+0x1d0>)
 800145e:	f002 fde3 	bl	8004028 <siprintf>

	            // Display the formatted string if needed
	          uartx_write_text(&huart1, outputBuffer);
 8001462:	4919      	ldr	r1, [pc, #100]	@ (80014c8 <main+0x1d0>)
 8001464:	4809      	ldr	r0, [pc, #36]	@ (800148c <main+0x194>)
 8001466:	f7ff fe24 	bl	80010b2 <uartx_write_text>
	          HAL_Delay(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f000 fb5a 	bl	8001b24 <HAL_Delay>
	 	  	  uartx_write_text(&huart1, "4...\r\n");
 8001470:	4916      	ldr	r1, [pc, #88]	@ (80014cc <main+0x1d4>)
 8001472:	4806      	ldr	r0, [pc, #24]	@ (800148c <main+0x194>)
 8001474:	f7ff fe1d 	bl	80010b2 <uartx_write_text>

	        }
	    }

	    HAL_Delay(2000); // 1-second delay
 8001478:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800147c:	f000 fb52 	bl	8001b24 <HAL_Delay>
	  HAL_Delay(2000); // 1-second delay
 8001480:	e74e      	b.n	8001320 <main+0x28>
 8001482:	bf00      	nop
 8001484:	200001f8 	.word	0x200001f8
 8001488:	080078a0 	.word	0x080078a0
 800148c:	20000240 	.word	0x20000240
 8001490:	080078ac 	.word	0x080078ac
 8001494:	200002ba 	.word	0x200002ba
 8001498:	200002bb 	.word	0x200002bb
 800149c:	200002bc 	.word	0x200002bc
 80014a0:	200002bd 	.word	0x200002bd
 80014a4:	200002be 	.word	0x200002be
 80014a8:	200002bf 	.word	0x200002bf
 80014ac:	080078b4 	.word	0x080078b4
 80014b0:	41200000 	.word	0x41200000
 80014b4:	200002c8 	.word	0x200002c8
 80014b8:	200002cc 	.word	0x200002cc
 80014bc:	200001f0 	.word	0x200001f0
 80014c0:	080078bc 	.word	0x080078bc
 80014c4:	080078c4 	.word	0x080078c4
 80014c8:	20000288 	.word	0x20000288
 80014cc:	080078f0 	.word	0x080078f0

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b090      	sub	sp, #64	@ 0x40
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2228      	movs	r2, #40	@ 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fe05 	bl	80040ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800150c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800150e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fdbf 	bl	800209c <HAL_RCC_OscConfig>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001524:	f000 f8e0 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001528:	230f      	movs	r3, #15
 800152a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	2302      	movs	r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2102      	movs	r1, #2
 8001542:	4618      	mov	r0, r3
 8001544:	f001 f82c 	bl	80025a0 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800154e:	f000 f8cb 	bl	80016e8 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3740      	adds	r7, #64	@ 0x40
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001578:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <MX_TIM1_Init+0x98>)
 800157a:	4a1f      	ldr	r2, [pc, #124]	@ (80015f8 <MX_TIM1_Init+0x9c>)
 800157c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <MX_TIM1_Init+0x98>)
 8001580:	2247      	movs	r2, #71	@ 0x47
 8001582:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <MX_TIM1_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_TIM1_Init+0x98>)
 800158c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001590:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <MX_TIM1_Init+0x98>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <MX_TIM1_Init+0x98>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <MX_TIM1_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a4:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <MX_TIM1_Init+0x98>)
 80015a6:	f001 f989 	bl	80028bc <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015b0:	f000 f89a 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <MX_TIM1_Init+0x98>)
 80015c2:	f001 fa15 	bl	80029f0 <HAL_TIM_ConfigClockSource>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015cc:	f000 f88c 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_TIM1_Init+0x98>)
 80015de:	f001 fbc7 	bl	8002d70 <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 f87e 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200001f8 	.word	0x200001f8
 80015f8:	40012c00 	.word	0x40012c00

080015fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 8001602:	4a12      	ldr	r2, [pc, #72]	@ (800164c <MX_USART1_UART_Init+0x50>)
 8001604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 8001608:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800160c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <MX_USART1_UART_Init+0x4c>)
 8001634:	f001 fbfa 	bl	8002e2c <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800163e:	f000 f853 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000240 	.word	0x20000240
 800164c:	40013800 	.word	0x40013800

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001664:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <MX_GPIO_Init+0x90>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <MX_GPIO_Init+0x90>)
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <MX_GPIO_Init+0x90>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <MX_GPIO_Init+0x90>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a17      	ldr	r2, [pc, #92]	@ (80016e0 <MX_GPIO_Init+0x90>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <MX_GPIO_Init+0x90>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_GPIO_Init+0x90>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a11      	ldr	r2, [pc, #68]	@ (80016e0 <MX_GPIO_Init+0x90>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_GPIO_Init+0x90>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b2:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <MX_GPIO_Init+0x94>)
 80016b4:	f000 fcd9 	bl	800206a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	4804      	ldr	r0, [pc, #16]	@ (80016e4 <MX_GPIO_Init+0x94>)
 80016d2:	f000 fb2f 	bl	8001d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d6:	bf00      	nop
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010c00 	.word	0x40010c00

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <Error_Handler+0x8>

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_MspInit+0x5c>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <HAL_MspInit+0x5c>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_MspInit+0x5c>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_MspInit+0x5c>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_MspInit+0x5c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_MspInit+0x5c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_MspInit+0x60>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_MspInit+0x60>)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a09      	ldr	r2, [pc, #36]	@ (800178c <HAL_TIM_Base_MspInit+0x34>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d10b      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_TIM_Base_MspInit+0x38>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <HAL_TIM_Base_MspInit+0x38>)
 8001770:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001774:	6193      	str	r3, [r2, #24]
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_TIM_Base_MspInit+0x38>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40012c00 	.word	0x40012c00
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <HAL_UART_MspInit+0x8c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d131      	bne.n	8001818 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_UART_MspInit+0x90>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	480b      	ldr	r0, [pc, #44]	@ (8001828 <HAL_UART_MspInit+0x94>)
 80017fa:	f000 fa9b 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_UART_MspInit+0x94>)
 8001814:	f000 fa8e 	bl	8001d34 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40013800 	.word	0x40013800
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187c:	f000 f936 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <_kill>:

int _kill(int pid, int sig)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800189c:	f002 fc7a 	bl	8004194 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2216      	movs	r2, #22
 80018a4:	601a      	str	r2, [r3, #0]
  return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_exit>:

void _exit (int status)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ba:	f04f 31ff 	mov.w	r1, #4294967295
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffe7 	bl	8001892 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <_exit+0x12>

080018c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018da:	f3af 8000 	nop.w
 80018de:	4601      	mov	r1, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf0      	blt.n	80018da <_read+0x12>
  }

  return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e009      	b.n	8001928 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf1      	blt.n	8001914 <_write+0x12>
  }
  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_close>:

int _close(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001960:	605a      	str	r2, [r3, #4]
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <_isatty>:

int _isatty(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
	...

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f002 fbe2 	bl	8004194 <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20005000 	.word	0x20005000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	200002d0 	.word	0x200002d0
 8001a04:	20000428 	.word	0x20000428

08001a08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a14:	f7ff fff8 	bl	8001a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a1a:	490c      	ldr	r1, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a30:	4c09      	ldr	r4, [pc, #36]	@ (8001a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f002 fbaf 	bl	80041a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a42:	f7ff fc59 	bl	80012f8 <main>
  bx lr
 8001a46:	4770      	bx	lr
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a50:	08007d60 	.word	0x08007d60
  ldr r2, =_sbss
 8001a54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a58:	20000424 	.word	0x20000424

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <HAL_Init+0x28>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_Init+0x28>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f92b 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	200f      	movs	r0, #15
 8001a78:	f000 f808 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f7ff fe3a 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f935 	bl	8001d1a <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f90b 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	@ (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_IncTick+0x1c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_IncTick+0x20>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a03      	ldr	r2, [pc, #12]	@ (8001b0c <HAL_IncTick+0x20>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	200002d4 	.word	0x200002d4

08001b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b02      	ldr	r3, [pc, #8]	@ (8001b20 <HAL_GetTick+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	200002d4 	.word	0x200002d4

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffe0 	bl	8001b10 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cac:	f7ff ff90 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff49 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf4:	f7ff ff5e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6978      	ldr	r0, [r7, #20]
 8001d00:	f7ff ff90 	bl	8001c24 <NVIC_EncodePriority>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff5f 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d12:	bf00      	nop
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffb0 	bl	8001c88 <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b08b      	sub	sp, #44	@ 0x2c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	e169      	b.n	800201c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8158 	bne.w	8002016 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a9a      	ldr	r2, [pc, #616]	@ (8001fd4 <HAL_GPIO_Init+0x2a0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d05e      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d70:	4a98      	ldr	r2, [pc, #608]	@ (8001fd4 <HAL_GPIO_Init+0x2a0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d875      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d76:	4a98      	ldr	r2, [pc, #608]	@ (8001fd8 <HAL_GPIO_Init+0x2a4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d058      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d7c:	4a96      	ldr	r2, [pc, #600]	@ (8001fd8 <HAL_GPIO_Init+0x2a4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d86f      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d82:	4a96      	ldr	r2, [pc, #600]	@ (8001fdc <HAL_GPIO_Init+0x2a8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d052      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d88:	4a94      	ldr	r2, [pc, #592]	@ (8001fdc <HAL_GPIO_Init+0x2a8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d869      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d8e:	4a94      	ldr	r2, [pc, #592]	@ (8001fe0 <HAL_GPIO_Init+0x2ac>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04c      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d94:	4a92      	ldr	r2, [pc, #584]	@ (8001fe0 <HAL_GPIO_Init+0x2ac>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d863      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d9a:	4a92      	ldr	r2, [pc, #584]	@ (8001fe4 <HAL_GPIO_Init+0x2b0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d046      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001da0:	4a90      	ldr	r2, [pc, #576]	@ (8001fe4 <HAL_GPIO_Init+0x2b0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d85d      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d82a      	bhi.n	8001e00 <HAL_GPIO_Init+0xcc>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d859      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001dae:	a201      	add	r2, pc, #4	@ (adr r2, 8001db4 <HAL_GPIO_Init+0x80>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001e2f 	.word	0x08001e2f
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001e1b 	.word	0x08001e1b
 8001dc0:	08001e5d 	.word	0x08001e5d
 8001dc4:	08001e63 	.word	0x08001e63
 8001dc8:	08001e63 	.word	0x08001e63
 8001dcc:	08001e63 	.word	0x08001e63
 8001dd0:	08001e63 	.word	0x08001e63
 8001dd4:	08001e63 	.word	0x08001e63
 8001dd8:	08001e63 	.word	0x08001e63
 8001ddc:	08001e63 	.word	0x08001e63
 8001de0:	08001e63 	.word	0x08001e63
 8001de4:	08001e63 	.word	0x08001e63
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e63 	.word	0x08001e63
 8001df0:	08001e63 	.word	0x08001e63
 8001df4:	08001e63 	.word	0x08001e63
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e25 	.word	0x08001e25
 8001e00:	4a79      	ldr	r2, [pc, #484]	@ (8001fe8 <HAL_GPIO_Init+0x2b4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e06:	e02c      	b.n	8001e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e029      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	3304      	adds	r3, #4
 8001e16:	623b      	str	r3, [r7, #32]
          break;
 8001e18:	e024      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	3308      	adds	r3, #8
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e01f      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e01a      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e36:	2304      	movs	r3, #4
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e013      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	611a      	str	r2, [r3, #16]
          break;
 8001e4e:	e009      	b.n	8001e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	615a      	str	r2, [r3, #20]
          break;
 8001e5a:	e003      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          break;
 8001e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	@ 0xff
 8001e68:	d801      	bhi.n	8001e6e <HAL_GPIO_Init+0x13a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	e001      	b.n	8001e72 <HAL_GPIO_Init+0x13e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	@ 0xff
 8001e78:	d802      	bhi.n	8001e80 <HAL_GPIO_Init+0x14c>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x152>
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	3b08      	subs	r3, #8
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	210f      	movs	r1, #15
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	6a39      	ldr	r1, [r7, #32]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80b1 	beq.w	8002016 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8001fec <HAL_GPIO_Init+0x2b8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ecc:	4a48      	ldr	r2, [pc, #288]	@ (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a40      	ldr	r2, [pc, #256]	@ (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x1ec>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1e8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3e      	ldr	r2, [pc, #248]	@ (8001ffc <HAL_GPIO_Init+0x2c8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1e4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1e0>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f20:	2300      	movs	r3, #0
 8001f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f32:	492f      	ldr	r1, [pc, #188]	@ (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	492c      	ldr	r1, [pc, #176]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4928      	ldr	r1, [pc, #160]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f74:	4b23      	ldr	r3, [pc, #140]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	4922      	ldr	r1, [pc, #136]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f82:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	491e      	ldr	r1, [pc, #120]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f9c:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4918      	ldr	r1, [pc, #96]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4914      	ldr	r1, [pc, #80]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d021      	beq.n	8002008 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	490e      	ldr	r1, [pc, #56]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e021      	b.n	8002016 <HAL_GPIO_Init+0x2e2>
 8001fd2:	bf00      	nop
 8001fd4:	10320000 	.word	0x10320000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10220000 	.word	0x10220000
 8001fe0:	10210000 	.word	0x10210000
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	10110000 	.word	0x10110000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40011400 	.word	0x40011400
 8002004:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_GPIO_Init+0x304>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	43db      	mvns	r3, r3
 8002010:	4909      	ldr	r1, [pc, #36]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8002012:	4013      	ands	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	3301      	adds	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	f47f ae8e 	bne.w	8001d48 <HAL_GPIO_Init+0x14>
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	372c      	adds	r7, #44	@ 0x2c
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	887b      	ldrh	r3, [r7, #2]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e001      	b.n	800205e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]
 8002076:	4613      	mov	r3, r2
 8002078:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207a:	787b      	ldrb	r3, [r7, #1]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002080:	887a      	ldrh	r2, [r7, #2]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002086:	e003      	b.n	8002090 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	041a      	lsls	r2, r3, #16
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	611a      	str	r2, [r3, #16]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
	...

0800209c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e272      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8087 	beq.w	80021ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020bc:	4b92      	ldr	r3, [pc, #584]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d00c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d112      	bne.n	80020fa <HAL_RCC_OscConfig+0x5e>
 80020d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e0:	d10b      	bne.n	80020fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e2:	4b89      	ldr	r3, [pc, #548]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d06c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x12c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d168      	bne.n	80021c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e24c      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x76>
 8002104:	4b80      	ldr	r3, [pc, #512]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a7f      	ldr	r2, [pc, #508]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e02e      	b.n	8002170 <HAL_RCC_OscConfig+0xd4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x98>
 800211a:	4b7b      	ldr	r3, [pc, #492]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a7a      	ldr	r2, [pc, #488]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b78      	ldr	r3, [pc, #480]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a77      	ldr	r2, [pc, #476]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800212c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e01d      	b.n	8002170 <HAL_RCC_OscConfig+0xd4>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0xbc>
 800213e:	4b72      	ldr	r3, [pc, #456]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a71      	ldr	r2, [pc, #452]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b6f      	ldr	r3, [pc, #444]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6e      	ldr	r2, [pc, #440]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0xd4>
 8002158:	4b6b      	ldr	r3, [pc, #428]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a6a      	ldr	r2, [pc, #424]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b68      	ldr	r3, [pc, #416]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a67      	ldr	r2, [pc, #412]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800216e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fcca 	bl	8001b10 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7ff fcc6 	bl	8001b10 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	@ 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e200      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b5d      	ldr	r3, [pc, #372]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0xe4>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fcb6 	bl	8001b10 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7ff fcb2 	bl	8001b10 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	@ 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1ec      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	4b53      	ldr	r3, [pc, #332]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x10c>
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d063      	beq.n	800229e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d11c      	bne.n	8002228 <HAL_RCC_OscConfig+0x18c>
 80021ee:	4b46      	ldr	r3, [pc, #280]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d116      	bne.n	8002228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	4b43      	ldr	r3, [pc, #268]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_RCC_OscConfig+0x176>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1c0      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	4b3d      	ldr	r3, [pc, #244]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4939      	ldr	r1, [pc, #228]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	e03a      	b.n	800229e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002230:	4b36      	ldr	r3, [pc, #216]	@ (800230c <HAL_RCC_OscConfig+0x270>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff fc6b 	bl	8001b10 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223e:	f7ff fc67 	bl	8001b10 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e1a1      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	4b2d      	ldr	r3, [pc, #180]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4927      	ldr	r1, [pc, #156]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002272:	4b26      	ldr	r3, [pc, #152]	@ (800230c <HAL_RCC_OscConfig+0x270>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fc4a 	bl	8001b10 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002280:	f7ff fc46 	bl	8001b10 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e180      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d03a      	beq.n	8002320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d019      	beq.n	80022e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b2:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7ff fc2a 	bl	8001b10 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c0:	f7ff fc26 	bl	8001b10 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e160      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022de:	2001      	movs	r0, #1
 80022e0:	f000 face 	bl	8002880 <RCC_Delay>
 80022e4:	e01c      	b.n	8002320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fc10 	bl	8001b10 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f2:	e00f      	b.n	8002314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff fc0c 	bl	8001b10 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d908      	bls.n	8002314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e146      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	42420000 	.word	0x42420000
 8002310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	4b92      	ldr	r3, [pc, #584]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e9      	bne.n	80022f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a6 	beq.w	800247a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002332:	4b8b      	ldr	r3, [pc, #556]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b88      	ldr	r3, [pc, #544]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a87      	ldr	r2, [pc, #540]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]
 800234a:	4b85      	ldr	r3, [pc, #532]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b82      	ldr	r3, [pc, #520]	@ (8002564 <HAL_RCC_OscConfig+0x4c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002366:	4b7f      	ldr	r3, [pc, #508]	@ (8002564 <HAL_RCC_OscConfig+0x4c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7e      	ldr	r2, [pc, #504]	@ (8002564 <HAL_RCC_OscConfig+0x4c8>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7ff fbcd 	bl	8001b10 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7ff fbc9 	bl	8001b10 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	@ 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e103      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b75      	ldr	r3, [pc, #468]	@ (8002564 <HAL_RCC_OscConfig+0x4c8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x312>
 80023a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	e02d      	b.n	800240a <HAL_RCC_OscConfig+0x36e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x334>
 80023b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a69      	ldr	r2, [pc, #420]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	4b67      	ldr	r3, [pc, #412]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a66      	ldr	r2, [pc, #408]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	e01c      	b.n	800240a <HAL_RCC_OscConfig+0x36e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x356>
 80023d8:	4b61      	ldr	r3, [pc, #388]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a60      	ldr	r2, [pc, #384]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	e00b      	b.n	800240a <HAL_RCC_OscConfig+0x36e>
 80023f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	4b58      	ldr	r3, [pc, #352]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a57      	ldr	r2, [pc, #348]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d015      	beq.n	800243e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff fb7d 	bl	8001b10 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7ff fb79 	bl	8001b10 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0b1      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	4b4b      	ldr	r3, [pc, #300]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ee      	beq.n	800241a <HAL_RCC_OscConfig+0x37e>
 800243c:	e014      	b.n	8002468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7ff fb67 	bl	8001b10 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7ff fb63 	bl	8001b10 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e09b      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	4b40      	ldr	r3, [pc, #256]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ee      	bne.n	8002446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b3c      	ldr	r3, [pc, #240]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8087 	beq.w	8002592 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b08      	cmp	r3, #8
 800248e:	d061      	beq.n	8002554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d146      	bne.n	8002526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002498:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <HAL_RCC_OscConfig+0x4cc>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7ff fb37 	bl	8001b10 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff fb33 	bl	8001b10 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e06d      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024cc:	d108      	bne.n	80024e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ce:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4921      	ldr	r1, [pc, #132]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a19      	ldr	r1, [r3, #32]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	430b      	orrs	r3, r1
 80024f2:	491b      	ldr	r1, [pc, #108]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7ff fb07 	bl	8001b10 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7ff fb03 	bl	8001b10 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e03d      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x46a>
 8002524:	e035      	b.n	8002592 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_RCC_OscConfig+0x4cc>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff faf0 	bl	8001b10 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7ff faec 	bl	8001b10 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e026      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x498>
 8002552:	e01e      	b.n	8002592 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d107      	bne.n	800256c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e019      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_RCC_OscConfig+0x500>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	429a      	cmp	r2, r3
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0d0      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b67      	ldr	r3, [pc, #412]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4965      	ldr	r1, [pc, #404]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a58      	ldr	r2, [pc, #352]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a52      	ldr	r2, [pc, #328]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800261e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d040      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d115      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	4b41      	ldr	r3, [pc, #260]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e073      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b3d      	ldr	r3, [pc, #244]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06b      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b39      	ldr	r3, [pc, #228]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4936      	ldr	r1, [pc, #216]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7ff fa3e 	bl	8001b10 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	e00a      	b.n	80026ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f7ff fa3a 	bl	8001b10 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e053      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 020c 	and.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1eb      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c0:	4b27      	ldr	r3, [pc, #156]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d210      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b24      	ldr	r3, [pc, #144]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0207 	bic.w	r2, r3, #7
 80026d6:	4922      	ldr	r1, [pc, #136]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f821 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	@ (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	@ (800276c <HAL_RCC_ClockConfig+0x1cc>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_ClockConfig+0x1d0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff f99c 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40022000 	.word	0x40022000
 8002764:	40021000 	.word	0x40021000
 8002768:	080078f8 	.word	0x080078f8
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x94>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b04      	cmp	r3, #4
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x30>
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0x36>
 80027a2:	e027      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <HAL_RCC_GetSysClockFreq+0x98>)
 80027a6:	613b      	str	r3, [r7, #16]
      break;
 80027a8:	e027      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0c9b      	lsrs	r3, r3, #18
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
 80027b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d010      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x94>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	0c5b      	lsrs	r3, r3, #17
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	4a11      	ldr	r2, [pc, #68]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a0d      	ldr	r2, [pc, #52]	@ (800280c <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	fb03 f202 	mul.w	r2, r3, r2
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e004      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002818 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	613b      	str	r3, [r7, #16]
      break;
 80027f2:	e002      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_RCC_GetSysClockFreq+0x98>)
 80027f6:	613b      	str	r3, [r7, #16]
      break;
 80027f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fa:	693b      	ldr	r3, [r7, #16]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	007a1200 	.word	0x007a1200
 8002810:	08007910 	.word	0x08007910
 8002814:	08007920 	.word	0x08007920
 8002818:	003d0900 	.word	0x003d0900

0800281c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b02      	ldr	r3, [pc, #8]	@ (800282c <HAL_RCC_GetHCLKFreq+0x10>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002834:	f7ff fff2 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4903      	ldr	r1, [pc, #12]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	08007908 	.word	0x08007908

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800285c:	f7ff ffde 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	0adb      	lsrs	r3, r3, #11
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4903      	ldr	r1, [pc, #12]	@ (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	08007908 	.word	0x08007908

08002880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <RCC_Delay+0x34>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <RCC_Delay+0x38>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0a5b      	lsrs	r3, r3, #9
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800289c:	bf00      	nop
  }
  while (Delay --);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	60fa      	str	r2, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f9      	bne.n	800289c <RCC_Delay+0x1c>
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	20000000 	.word	0x20000000
 80028b8:	10624dd3 	.word	0x10624dd3

080028bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e041      	b.n	8002952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe ff38 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 f940 	bl	8002b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e032      	b.n	80029da <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a18      	ldr	r2, [pc, #96]	@ (80029e4 <HAL_TIM_Base_Start+0x88>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00e      	beq.n	80029a4 <HAL_TIM_Base_Start+0x48>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800298e:	d009      	beq.n	80029a4 <HAL_TIM_Base_Start+0x48>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a14      	ldr	r2, [pc, #80]	@ (80029e8 <HAL_TIM_Base_Start+0x8c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_TIM_Base_Start+0x48>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a13      	ldr	r2, [pc, #76]	@ (80029ec <HAL_TIM_Base_Start+0x90>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d111      	bne.n	80029c8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d010      	beq.n	80029d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c6:	e007      	b.n	80029d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800

080029f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIM_ConfigClockSource+0x1c>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e0b4      	b.n	8002b76 <HAL_TIM_ConfigClockSource+0x186>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a44:	d03e      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a4a:	f200 8087 	bhi.w	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a52:	f000 8086 	beq.w	8002b62 <HAL_TIM_ConfigClockSource+0x172>
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a5a:	d87f      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b70      	cmp	r3, #112	@ 0x70
 8002a5e:	d01a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0xa6>
 8002a60:	2b70      	cmp	r3, #112	@ 0x70
 8002a62:	d87b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b60      	cmp	r3, #96	@ 0x60
 8002a66:	d050      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x11a>
 8002a68:	2b60      	cmp	r3, #96	@ 0x60
 8002a6a:	d877      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6c:	2b50      	cmp	r3, #80	@ 0x50
 8002a6e:	d03c      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0xfa>
 8002a70:	2b50      	cmp	r3, #80	@ 0x50
 8002a72:	d873      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a74:	2b40      	cmp	r3, #64	@ 0x40
 8002a76:	d058      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x13a>
 8002a78:	2b40      	cmp	r3, #64	@ 0x40
 8002a7a:	d86f      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	2b30      	cmp	r3, #48	@ 0x30
 8002a7e:	d064      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x15a>
 8002a80:	2b30      	cmp	r3, #48	@ 0x30
 8002a82:	d86b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d060      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x15a>
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d867      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d05c      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x15a>
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d05a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x15a>
 8002a94:	e062      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aa6:	f000 f944 	bl	8002d32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ab8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	609a      	str	r2, [r3, #8]
      break;
 8002ac2:	e04f      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ad4:	f000 f92d 	bl	8002d32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ae6:	609a      	str	r2, [r3, #8]
      break;
 8002ae8:	e03c      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 f8a4 	bl	8002c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2150      	movs	r1, #80	@ 0x50
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f8fb 	bl	8002cfe <TIM_ITRx_SetConfig>
      break;
 8002b08:	e02c      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f8c2 	bl	8002ca0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2160      	movs	r1, #96	@ 0x60
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f8eb 	bl	8002cfe <TIM_ITRx_SetConfig>
      break;
 8002b28:	e01c      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b36:	461a      	mov	r2, r3
 8002b38:	f000 f884 	bl	8002c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2140      	movs	r1, #64	@ 0x40
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f8db 	bl	8002cfe <TIM_ITRx_SetConfig>
      break;
 8002b48:	e00c      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f000 f8d2 	bl	8002cfe <TIM_ITRx_SetConfig>
      break;
 8002b5a:	e003      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b60:	e000      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a29      	ldr	r2, [pc, #164]	@ (8002c38 <TIM_Base_SetConfig+0xb8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00b      	beq.n	8002bb0 <TIM_Base_SetConfig+0x30>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9e:	d007      	beq.n	8002bb0 <TIM_Base_SetConfig+0x30>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a26      	ldr	r2, [pc, #152]	@ (8002c3c <TIM_Base_SetConfig+0xbc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <TIM_Base_SetConfig+0x30>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a25      	ldr	r2, [pc, #148]	@ (8002c40 <TIM_Base_SetConfig+0xc0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c38 <TIM_Base_SetConfig+0xb8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00b      	beq.n	8002be2 <TIM_Base_SetConfig+0x62>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd0:	d007      	beq.n	8002be2 <TIM_Base_SetConfig+0x62>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <TIM_Base_SetConfig+0xbc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d003      	beq.n	8002be2 <TIM_Base_SetConfig+0x62>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <TIM_Base_SetConfig+0xc0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d108      	bne.n	8002bf4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a07      	ldr	r2, [pc, #28]	@ (8002c38 <TIM_Base_SetConfig+0xb8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d103      	bne.n	8002c28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	615a      	str	r2, [r3, #20]
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800

08002c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f023 0201 	bic.w	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 030a 	bic.w	r3, r3, #10
 8002c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f023 0210 	bic.w	r2, r3, #16
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	031b      	lsls	r3, r3, #12
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	621a      	str	r2, [r3, #32]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f043 0307 	orr.w	r3, r3, #7
 8002d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b087      	sub	sp, #28
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	021a      	lsls	r2, r3, #8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	609a      	str	r2, [r3, #8]
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e046      	b.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a16      	ldr	r2, [pc, #88]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd4:	d009      	beq.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a12      	ldr	r2, [pc, #72]	@ (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10c      	bne.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800

08002e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e042      	b.n	8002ec4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe fc9e 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	@ 0x24
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f91d 	bl	80030b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	@ 0x28
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d16d      	bne.n	8002fc8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_UART_Transmit+0x2c>
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e066      	b.n	8002fca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	@ 0x21
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fe01 	bl	8001b10 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x6c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f40:	e02a      	b.n	8002f98 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	@ 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f840 	bl	8002fd2 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e036      	b.n	8002fca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3302      	adds	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e007      	b.n	8002f8a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1cf      	bne.n	8002f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2140      	movs	r1, #64	@ 0x40
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f810 	bl	8002fd2 <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e006      	b.n	8002fca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b090      	sub	sp, #64	@ 0x40
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe2:	e050      	b.n	8003086 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d04c      	beq.n	8003086 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ff2:	f7fe fd8d 	bl	8001b10 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d241      	bcs.n	8003086 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003022:	637a      	str	r2, [r7, #52]	@ 0x34
 8003024:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e5      	bne.n	8003002 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3314      	adds	r3, #20
 800303c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	613b      	str	r3, [r7, #16]
   return(result);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3314      	adds	r3, #20
 8003054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003056:	623a      	str	r2, [r7, #32]
 8003058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	69f9      	ldr	r1, [r7, #28]
 800305c:	6a3a      	ldr	r2, [r7, #32]
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	61bb      	str	r3, [r7, #24]
   return(result);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e5      	bne.n	8003036 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e00f      	b.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d09f      	beq.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3740      	adds	r7, #64	@ 0x40
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80030ea:	f023 030c 	bic.w	r3, r3, #12
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2c      	ldr	r2, [pc, #176]	@ (80031c4 <UART_SetConfig+0x114>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d103      	bne.n	8003120 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003118:	f7ff fb9e 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	e002      	b.n	8003126 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003120:	f7ff fb86 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003124:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009a      	lsls	r2, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <UART_SetConfig+0x118>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	0119      	lsls	r1, r3, #4
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fbb2 f2f3 	udiv	r2, r2, r3
 800315c:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <UART_SetConfig+0x118>)
 800315e:	fba3 0302 	umull	r0, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2064      	movs	r0, #100	@ 0x64
 8003166:	fb00 f303 	mul.w	r3, r0, r3
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	3332      	adds	r3, #50	@ 0x32
 8003170:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <UART_SetConfig+0x118>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800317c:	4419      	add	r1, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fbb2 f2f3 	udiv	r2, r2, r3
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <UART_SetConfig+0x118>)
 8003196:	fba3 0302 	umull	r0, r3, r3, r2
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2064      	movs	r0, #100	@ 0x64
 800319e:	fb00 f303 	mul.w	r3, r0, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	3332      	adds	r3, #50	@ 0x32
 80031a8:	4a07      	ldr	r2, [pc, #28]	@ (80031c8 <UART_SetConfig+0x118>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 020f 	and.w	r2, r3, #15
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	440a      	add	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40013800 	.word	0x40013800
 80031c8:	51eb851f 	.word	0x51eb851f

080031cc <__cvt>:
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d2:	461d      	mov	r5, r3
 80031d4:	bfbb      	ittet	lt
 80031d6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80031da:	461d      	movlt	r5, r3
 80031dc:	2300      	movge	r3, #0
 80031de:	232d      	movlt	r3, #45	@ 0x2d
 80031e0:	b088      	sub	sp, #32
 80031e2:	4614      	mov	r4, r2
 80031e4:	bfb8      	it	lt
 80031e6:	4614      	movlt	r4, r2
 80031e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80031ea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80031ec:	7013      	strb	r3, [r2, #0]
 80031ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80031f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80031f4:	f023 0820 	bic.w	r8, r3, #32
 80031f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031fc:	d005      	beq.n	800320a <__cvt+0x3e>
 80031fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003202:	d100      	bne.n	8003206 <__cvt+0x3a>
 8003204:	3601      	adds	r6, #1
 8003206:	2302      	movs	r3, #2
 8003208:	e000      	b.n	800320c <__cvt+0x40>
 800320a:	2303      	movs	r3, #3
 800320c:	aa07      	add	r2, sp, #28
 800320e:	9204      	str	r2, [sp, #16]
 8003210:	aa06      	add	r2, sp, #24
 8003212:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003216:	e9cd 3600 	strd	r3, r6, [sp]
 800321a:	4622      	mov	r2, r4
 800321c:	462b      	mov	r3, r5
 800321e:	f001 f883 	bl	8004328 <_dtoa_r>
 8003222:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003226:	4607      	mov	r7, r0
 8003228:	d119      	bne.n	800325e <__cvt+0x92>
 800322a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800322c:	07db      	lsls	r3, r3, #31
 800322e:	d50e      	bpl.n	800324e <__cvt+0x82>
 8003230:	eb00 0906 	add.w	r9, r0, r6
 8003234:	2200      	movs	r2, #0
 8003236:	2300      	movs	r3, #0
 8003238:	4620      	mov	r0, r4
 800323a:	4629      	mov	r1, r5
 800323c:	f7fd fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8003240:	b108      	cbz	r0, 8003246 <__cvt+0x7a>
 8003242:	f8cd 901c 	str.w	r9, [sp, #28]
 8003246:	2230      	movs	r2, #48	@ 0x30
 8003248:	9b07      	ldr	r3, [sp, #28]
 800324a:	454b      	cmp	r3, r9
 800324c:	d31e      	bcc.n	800328c <__cvt+0xc0>
 800324e:	4638      	mov	r0, r7
 8003250:	9b07      	ldr	r3, [sp, #28]
 8003252:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003254:	1bdb      	subs	r3, r3, r7
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	b008      	add	sp, #32
 800325a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003262:	eb00 0906 	add.w	r9, r0, r6
 8003266:	d1e5      	bne.n	8003234 <__cvt+0x68>
 8003268:	7803      	ldrb	r3, [r0, #0]
 800326a:	2b30      	cmp	r3, #48	@ 0x30
 800326c:	d10a      	bne.n	8003284 <__cvt+0xb8>
 800326e:	2200      	movs	r2, #0
 8003270:	2300      	movs	r3, #0
 8003272:	4620      	mov	r0, r4
 8003274:	4629      	mov	r1, r5
 8003276:	f7fd fb97 	bl	80009a8 <__aeabi_dcmpeq>
 800327a:	b918      	cbnz	r0, 8003284 <__cvt+0xb8>
 800327c:	f1c6 0601 	rsb	r6, r6, #1
 8003280:	f8ca 6000 	str.w	r6, [sl]
 8003284:	f8da 3000 	ldr.w	r3, [sl]
 8003288:	4499      	add	r9, r3
 800328a:	e7d3      	b.n	8003234 <__cvt+0x68>
 800328c:	1c59      	adds	r1, r3, #1
 800328e:	9107      	str	r1, [sp, #28]
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e7d9      	b.n	8003248 <__cvt+0x7c>

08003294 <__exponent>:
 8003294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003296:	2900      	cmp	r1, #0
 8003298:	bfb6      	itet	lt
 800329a:	232d      	movlt	r3, #45	@ 0x2d
 800329c:	232b      	movge	r3, #43	@ 0x2b
 800329e:	4249      	neglt	r1, r1
 80032a0:	2909      	cmp	r1, #9
 80032a2:	7002      	strb	r2, [r0, #0]
 80032a4:	7043      	strb	r3, [r0, #1]
 80032a6:	dd29      	ble.n	80032fc <__exponent+0x68>
 80032a8:	f10d 0307 	add.w	r3, sp, #7
 80032ac:	461d      	mov	r5, r3
 80032ae:	270a      	movs	r7, #10
 80032b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80032b4:	461a      	mov	r2, r3
 80032b6:	fb07 1416 	mls	r4, r7, r6, r1
 80032ba:	3430      	adds	r4, #48	@ 0x30
 80032bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80032c0:	460c      	mov	r4, r1
 80032c2:	2c63      	cmp	r4, #99	@ 0x63
 80032c4:	4631      	mov	r1, r6
 80032c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80032ca:	dcf1      	bgt.n	80032b0 <__exponent+0x1c>
 80032cc:	3130      	adds	r1, #48	@ 0x30
 80032ce:	1e94      	subs	r4, r2, #2
 80032d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80032d4:	4623      	mov	r3, r4
 80032d6:	1c41      	adds	r1, r0, #1
 80032d8:	42ab      	cmp	r3, r5
 80032da:	d30a      	bcc.n	80032f2 <__exponent+0x5e>
 80032dc:	f10d 0309 	add.w	r3, sp, #9
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	42ac      	cmp	r4, r5
 80032e4:	bf88      	it	hi
 80032e6:	2300      	movhi	r3, #0
 80032e8:	3302      	adds	r3, #2
 80032ea:	4403      	add	r3, r0
 80032ec:	1a18      	subs	r0, r3, r0
 80032ee:	b003      	add	sp, #12
 80032f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80032f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80032fa:	e7ed      	b.n	80032d8 <__exponent+0x44>
 80032fc:	2330      	movs	r3, #48	@ 0x30
 80032fe:	3130      	adds	r1, #48	@ 0x30
 8003300:	7083      	strb	r3, [r0, #2]
 8003302:	70c1      	strb	r1, [r0, #3]
 8003304:	1d03      	adds	r3, r0, #4
 8003306:	e7f1      	b.n	80032ec <__exponent+0x58>

08003308 <_printf_float>:
 8003308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330c:	b091      	sub	sp, #68	@ 0x44
 800330e:	460c      	mov	r4, r1
 8003310:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003314:	4616      	mov	r6, r2
 8003316:	461f      	mov	r7, r3
 8003318:	4605      	mov	r5, r0
 800331a:	f000 fef1 	bl	8004100 <_localeconv_r>
 800331e:	6803      	ldr	r3, [r0, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	9308      	str	r3, [sp, #32]
 8003324:	f7fc ff14 	bl	8000150 <strlen>
 8003328:	2300      	movs	r3, #0
 800332a:	930e      	str	r3, [sp, #56]	@ 0x38
 800332c:	f8d8 3000 	ldr.w	r3, [r8]
 8003330:	9009      	str	r0, [sp, #36]	@ 0x24
 8003332:	3307      	adds	r3, #7
 8003334:	f023 0307 	bic.w	r3, r3, #7
 8003338:	f103 0208 	add.w	r2, r3, #8
 800333c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003340:	f8d4 b000 	ldr.w	fp, [r4]
 8003344:	f8c8 2000 	str.w	r2, [r8]
 8003348:	e9d3 8900 	ldrd	r8, r9, [r3]
 800334c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003352:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003356:	f04f 32ff 	mov.w	r2, #4294967295
 800335a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800335e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003362:	4b9c      	ldr	r3, [pc, #624]	@ (80035d4 <_printf_float+0x2cc>)
 8003364:	f7fd fb52 	bl	8000a0c <__aeabi_dcmpun>
 8003368:	bb70      	cbnz	r0, 80033c8 <_printf_float+0xc0>
 800336a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800336e:	f04f 32ff 	mov.w	r2, #4294967295
 8003372:	4b98      	ldr	r3, [pc, #608]	@ (80035d4 <_printf_float+0x2cc>)
 8003374:	f7fd fb2c 	bl	80009d0 <__aeabi_dcmple>
 8003378:	bb30      	cbnz	r0, 80033c8 <_printf_float+0xc0>
 800337a:	2200      	movs	r2, #0
 800337c:	2300      	movs	r3, #0
 800337e:	4640      	mov	r0, r8
 8003380:	4649      	mov	r1, r9
 8003382:	f7fd fb1b 	bl	80009bc <__aeabi_dcmplt>
 8003386:	b110      	cbz	r0, 800338e <_printf_float+0x86>
 8003388:	232d      	movs	r3, #45	@ 0x2d
 800338a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800338e:	4a92      	ldr	r2, [pc, #584]	@ (80035d8 <_printf_float+0x2d0>)
 8003390:	4b92      	ldr	r3, [pc, #584]	@ (80035dc <_printf_float+0x2d4>)
 8003392:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003396:	bf94      	ite	ls
 8003398:	4690      	movls	r8, r2
 800339a:	4698      	movhi	r8, r3
 800339c:	2303      	movs	r3, #3
 800339e:	f04f 0900 	mov.w	r9, #0
 80033a2:	6123      	str	r3, [r4, #16]
 80033a4:	f02b 0304 	bic.w	r3, fp, #4
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	4633      	mov	r3, r6
 80033ac:	4621      	mov	r1, r4
 80033ae:	4628      	mov	r0, r5
 80033b0:	9700      	str	r7, [sp, #0]
 80033b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80033b4:	f000 f9d4 	bl	8003760 <_printf_common>
 80033b8:	3001      	adds	r0, #1
 80033ba:	f040 8090 	bne.w	80034de <_printf_float+0x1d6>
 80033be:	f04f 30ff 	mov.w	r0, #4294967295
 80033c2:	b011      	add	sp, #68	@ 0x44
 80033c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	4640      	mov	r0, r8
 80033ce:	4649      	mov	r1, r9
 80033d0:	f7fd fb1c 	bl	8000a0c <__aeabi_dcmpun>
 80033d4:	b148      	cbz	r0, 80033ea <_printf_float+0xe2>
 80033d6:	464b      	mov	r3, r9
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bfb8      	it	lt
 80033dc:	232d      	movlt	r3, #45	@ 0x2d
 80033de:	4a80      	ldr	r2, [pc, #512]	@ (80035e0 <_printf_float+0x2d8>)
 80033e0:	bfb8      	it	lt
 80033e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80033e6:	4b7f      	ldr	r3, [pc, #508]	@ (80035e4 <_printf_float+0x2dc>)
 80033e8:	e7d3      	b.n	8003392 <_printf_float+0x8a>
 80033ea:	6863      	ldr	r3, [r4, #4]
 80033ec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	d13f      	bne.n	8003474 <_printf_float+0x16c>
 80033f4:	2306      	movs	r3, #6
 80033f6:	6063      	str	r3, [r4, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80033fe:	6023      	str	r3, [r4, #0]
 8003400:	9206      	str	r2, [sp, #24]
 8003402:	aa0e      	add	r2, sp, #56	@ 0x38
 8003404:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003408:	aa0d      	add	r2, sp, #52	@ 0x34
 800340a:	9203      	str	r2, [sp, #12]
 800340c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003410:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003414:	6863      	ldr	r3, [r4, #4]
 8003416:	4642      	mov	r2, r8
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	4628      	mov	r0, r5
 800341c:	464b      	mov	r3, r9
 800341e:	910a      	str	r1, [sp, #40]	@ 0x28
 8003420:	f7ff fed4 	bl	80031cc <__cvt>
 8003424:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003426:	4680      	mov	r8, r0
 8003428:	2947      	cmp	r1, #71	@ 0x47
 800342a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800342c:	d128      	bne.n	8003480 <_printf_float+0x178>
 800342e:	1cc8      	adds	r0, r1, #3
 8003430:	db02      	blt.n	8003438 <_printf_float+0x130>
 8003432:	6863      	ldr	r3, [r4, #4]
 8003434:	4299      	cmp	r1, r3
 8003436:	dd40      	ble.n	80034ba <_printf_float+0x1b2>
 8003438:	f1aa 0a02 	sub.w	sl, sl, #2
 800343c:	fa5f fa8a 	uxtb.w	sl, sl
 8003440:	4652      	mov	r2, sl
 8003442:	3901      	subs	r1, #1
 8003444:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003448:	910d      	str	r1, [sp, #52]	@ 0x34
 800344a:	f7ff ff23 	bl	8003294 <__exponent>
 800344e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003450:	4681      	mov	r9, r0
 8003452:	1813      	adds	r3, r2, r0
 8003454:	2a01      	cmp	r2, #1
 8003456:	6123      	str	r3, [r4, #16]
 8003458:	dc02      	bgt.n	8003460 <_printf_float+0x158>
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	07d2      	lsls	r2, r2, #31
 800345e:	d501      	bpl.n	8003464 <_printf_float+0x15c>
 8003460:	3301      	adds	r3, #1
 8003462:	6123      	str	r3, [r4, #16]
 8003464:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003468:	2b00      	cmp	r3, #0
 800346a:	d09e      	beq.n	80033aa <_printf_float+0xa2>
 800346c:	232d      	movs	r3, #45	@ 0x2d
 800346e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003472:	e79a      	b.n	80033aa <_printf_float+0xa2>
 8003474:	2947      	cmp	r1, #71	@ 0x47
 8003476:	d1bf      	bne.n	80033f8 <_printf_float+0xf0>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1bd      	bne.n	80033f8 <_printf_float+0xf0>
 800347c:	2301      	movs	r3, #1
 800347e:	e7ba      	b.n	80033f6 <_printf_float+0xee>
 8003480:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003484:	d9dc      	bls.n	8003440 <_printf_float+0x138>
 8003486:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800348a:	d118      	bne.n	80034be <_printf_float+0x1b6>
 800348c:	2900      	cmp	r1, #0
 800348e:	6863      	ldr	r3, [r4, #4]
 8003490:	dd0b      	ble.n	80034aa <_printf_float+0x1a2>
 8003492:	6121      	str	r1, [r4, #16]
 8003494:	b913      	cbnz	r3, 800349c <_printf_float+0x194>
 8003496:	6822      	ldr	r2, [r4, #0]
 8003498:	07d0      	lsls	r0, r2, #31
 800349a:	d502      	bpl.n	80034a2 <_printf_float+0x19a>
 800349c:	3301      	adds	r3, #1
 800349e:	440b      	add	r3, r1
 80034a0:	6123      	str	r3, [r4, #16]
 80034a2:	f04f 0900 	mov.w	r9, #0
 80034a6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80034a8:	e7dc      	b.n	8003464 <_printf_float+0x15c>
 80034aa:	b913      	cbnz	r3, 80034b2 <_printf_float+0x1aa>
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	07d2      	lsls	r2, r2, #31
 80034b0:	d501      	bpl.n	80034b6 <_printf_float+0x1ae>
 80034b2:	3302      	adds	r3, #2
 80034b4:	e7f4      	b.n	80034a0 <_printf_float+0x198>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e7f2      	b.n	80034a0 <_printf_float+0x198>
 80034ba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80034be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80034c0:	4299      	cmp	r1, r3
 80034c2:	db05      	blt.n	80034d0 <_printf_float+0x1c8>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	6121      	str	r1, [r4, #16]
 80034c8:	07d8      	lsls	r0, r3, #31
 80034ca:	d5ea      	bpl.n	80034a2 <_printf_float+0x19a>
 80034cc:	1c4b      	adds	r3, r1, #1
 80034ce:	e7e7      	b.n	80034a0 <_printf_float+0x198>
 80034d0:	2900      	cmp	r1, #0
 80034d2:	bfcc      	ite	gt
 80034d4:	2201      	movgt	r2, #1
 80034d6:	f1c1 0202 	rsble	r2, r1, #2
 80034da:	4413      	add	r3, r2
 80034dc:	e7e0      	b.n	80034a0 <_printf_float+0x198>
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	055a      	lsls	r2, r3, #21
 80034e2:	d407      	bmi.n	80034f4 <_printf_float+0x1ec>
 80034e4:	6923      	ldr	r3, [r4, #16]
 80034e6:	4642      	mov	r2, r8
 80034e8:	4631      	mov	r1, r6
 80034ea:	4628      	mov	r0, r5
 80034ec:	47b8      	blx	r7
 80034ee:	3001      	adds	r0, #1
 80034f0:	d12b      	bne.n	800354a <_printf_float+0x242>
 80034f2:	e764      	b.n	80033be <_printf_float+0xb6>
 80034f4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80034f8:	f240 80dc 	bls.w	80036b4 <_printf_float+0x3ac>
 80034fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003500:	2200      	movs	r2, #0
 8003502:	2300      	movs	r3, #0
 8003504:	f7fd fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8003508:	2800      	cmp	r0, #0
 800350a:	d033      	beq.n	8003574 <_printf_float+0x26c>
 800350c:	2301      	movs	r3, #1
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	4a35      	ldr	r2, [pc, #212]	@ (80035e8 <_printf_float+0x2e0>)
 8003514:	47b8      	blx	r7
 8003516:	3001      	adds	r0, #1
 8003518:	f43f af51 	beq.w	80033be <_printf_float+0xb6>
 800351c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003520:	4543      	cmp	r3, r8
 8003522:	db02      	blt.n	800352a <_printf_float+0x222>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	07d8      	lsls	r0, r3, #31
 8003528:	d50f      	bpl.n	800354a <_printf_float+0x242>
 800352a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800352e:	4631      	mov	r1, r6
 8003530:	4628      	mov	r0, r5
 8003532:	47b8      	blx	r7
 8003534:	3001      	adds	r0, #1
 8003536:	f43f af42 	beq.w	80033be <_printf_float+0xb6>
 800353a:	f04f 0900 	mov.w	r9, #0
 800353e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003542:	f104 0a1a 	add.w	sl, r4, #26
 8003546:	45c8      	cmp	r8, r9
 8003548:	dc09      	bgt.n	800355e <_printf_float+0x256>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	079b      	lsls	r3, r3, #30
 800354e:	f100 8102 	bmi.w	8003756 <_printf_float+0x44e>
 8003552:	68e0      	ldr	r0, [r4, #12]
 8003554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003556:	4298      	cmp	r0, r3
 8003558:	bfb8      	it	lt
 800355a:	4618      	movlt	r0, r3
 800355c:	e731      	b.n	80033c2 <_printf_float+0xba>
 800355e:	2301      	movs	r3, #1
 8003560:	4652      	mov	r2, sl
 8003562:	4631      	mov	r1, r6
 8003564:	4628      	mov	r0, r5
 8003566:	47b8      	blx	r7
 8003568:	3001      	adds	r0, #1
 800356a:	f43f af28 	beq.w	80033be <_printf_float+0xb6>
 800356e:	f109 0901 	add.w	r9, r9, #1
 8003572:	e7e8      	b.n	8003546 <_printf_float+0x23e>
 8003574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003576:	2b00      	cmp	r3, #0
 8003578:	dc38      	bgt.n	80035ec <_printf_float+0x2e4>
 800357a:	2301      	movs	r3, #1
 800357c:	4631      	mov	r1, r6
 800357e:	4628      	mov	r0, r5
 8003580:	4a19      	ldr	r2, [pc, #100]	@ (80035e8 <_printf_float+0x2e0>)
 8003582:	47b8      	blx	r7
 8003584:	3001      	adds	r0, #1
 8003586:	f43f af1a 	beq.w	80033be <_printf_float+0xb6>
 800358a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800358e:	ea59 0303 	orrs.w	r3, r9, r3
 8003592:	d102      	bne.n	800359a <_printf_float+0x292>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	07d9      	lsls	r1, r3, #31
 8003598:	d5d7      	bpl.n	800354a <_printf_float+0x242>
 800359a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800359e:	4631      	mov	r1, r6
 80035a0:	4628      	mov	r0, r5
 80035a2:	47b8      	blx	r7
 80035a4:	3001      	adds	r0, #1
 80035a6:	f43f af0a 	beq.w	80033be <_printf_float+0xb6>
 80035aa:	f04f 0a00 	mov.w	sl, #0
 80035ae:	f104 0b1a 	add.w	fp, r4, #26
 80035b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035b4:	425b      	negs	r3, r3
 80035b6:	4553      	cmp	r3, sl
 80035b8:	dc01      	bgt.n	80035be <_printf_float+0x2b6>
 80035ba:	464b      	mov	r3, r9
 80035bc:	e793      	b.n	80034e6 <_printf_float+0x1de>
 80035be:	2301      	movs	r3, #1
 80035c0:	465a      	mov	r2, fp
 80035c2:	4631      	mov	r1, r6
 80035c4:	4628      	mov	r0, r5
 80035c6:	47b8      	blx	r7
 80035c8:	3001      	adds	r0, #1
 80035ca:	f43f aef8 	beq.w	80033be <_printf_float+0xb6>
 80035ce:	f10a 0a01 	add.w	sl, sl, #1
 80035d2:	e7ee      	b.n	80035b2 <_printf_float+0x2aa>
 80035d4:	7fefffff 	.word	0x7fefffff
 80035d8:	08007922 	.word	0x08007922
 80035dc:	08007926 	.word	0x08007926
 80035e0:	0800792a 	.word	0x0800792a
 80035e4:	0800792e 	.word	0x0800792e
 80035e8:	08007932 	.word	0x08007932
 80035ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035ee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80035f2:	4553      	cmp	r3, sl
 80035f4:	bfa8      	it	ge
 80035f6:	4653      	movge	r3, sl
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	4699      	mov	r9, r3
 80035fc:	dc36      	bgt.n	800366c <_printf_float+0x364>
 80035fe:	f04f 0b00 	mov.w	fp, #0
 8003602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003606:	f104 021a 	add.w	r2, r4, #26
 800360a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800360c:	930a      	str	r3, [sp, #40]	@ 0x28
 800360e:	eba3 0309 	sub.w	r3, r3, r9
 8003612:	455b      	cmp	r3, fp
 8003614:	dc31      	bgt.n	800367a <_printf_float+0x372>
 8003616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003618:	459a      	cmp	sl, r3
 800361a:	dc3a      	bgt.n	8003692 <_printf_float+0x38a>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	07da      	lsls	r2, r3, #31
 8003620:	d437      	bmi.n	8003692 <_printf_float+0x38a>
 8003622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003624:	ebaa 0903 	sub.w	r9, sl, r3
 8003628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800362a:	ebaa 0303 	sub.w	r3, sl, r3
 800362e:	4599      	cmp	r9, r3
 8003630:	bfa8      	it	ge
 8003632:	4699      	movge	r9, r3
 8003634:	f1b9 0f00 	cmp.w	r9, #0
 8003638:	dc33      	bgt.n	80036a2 <_printf_float+0x39a>
 800363a:	f04f 0800 	mov.w	r8, #0
 800363e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003642:	f104 0b1a 	add.w	fp, r4, #26
 8003646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003648:	ebaa 0303 	sub.w	r3, sl, r3
 800364c:	eba3 0309 	sub.w	r3, r3, r9
 8003650:	4543      	cmp	r3, r8
 8003652:	f77f af7a 	ble.w	800354a <_printf_float+0x242>
 8003656:	2301      	movs	r3, #1
 8003658:	465a      	mov	r2, fp
 800365a:	4631      	mov	r1, r6
 800365c:	4628      	mov	r0, r5
 800365e:	47b8      	blx	r7
 8003660:	3001      	adds	r0, #1
 8003662:	f43f aeac 	beq.w	80033be <_printf_float+0xb6>
 8003666:	f108 0801 	add.w	r8, r8, #1
 800366a:	e7ec      	b.n	8003646 <_printf_float+0x33e>
 800366c:	4642      	mov	r2, r8
 800366e:	4631      	mov	r1, r6
 8003670:	4628      	mov	r0, r5
 8003672:	47b8      	blx	r7
 8003674:	3001      	adds	r0, #1
 8003676:	d1c2      	bne.n	80035fe <_printf_float+0x2f6>
 8003678:	e6a1      	b.n	80033be <_printf_float+0xb6>
 800367a:	2301      	movs	r3, #1
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	920a      	str	r2, [sp, #40]	@ 0x28
 8003682:	47b8      	blx	r7
 8003684:	3001      	adds	r0, #1
 8003686:	f43f ae9a 	beq.w	80033be <_printf_float+0xb6>
 800368a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800368c:	f10b 0b01 	add.w	fp, fp, #1
 8003690:	e7bb      	b.n	800360a <_printf_float+0x302>
 8003692:	4631      	mov	r1, r6
 8003694:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003698:	4628      	mov	r0, r5
 800369a:	47b8      	blx	r7
 800369c:	3001      	adds	r0, #1
 800369e:	d1c0      	bne.n	8003622 <_printf_float+0x31a>
 80036a0:	e68d      	b.n	80033be <_printf_float+0xb6>
 80036a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80036a4:	464b      	mov	r3, r9
 80036a6:	4631      	mov	r1, r6
 80036a8:	4628      	mov	r0, r5
 80036aa:	4442      	add	r2, r8
 80036ac:	47b8      	blx	r7
 80036ae:	3001      	adds	r0, #1
 80036b0:	d1c3      	bne.n	800363a <_printf_float+0x332>
 80036b2:	e684      	b.n	80033be <_printf_float+0xb6>
 80036b4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80036b8:	f1ba 0f01 	cmp.w	sl, #1
 80036bc:	dc01      	bgt.n	80036c2 <_printf_float+0x3ba>
 80036be:	07db      	lsls	r3, r3, #31
 80036c0:	d536      	bpl.n	8003730 <_printf_float+0x428>
 80036c2:	2301      	movs	r3, #1
 80036c4:	4642      	mov	r2, r8
 80036c6:	4631      	mov	r1, r6
 80036c8:	4628      	mov	r0, r5
 80036ca:	47b8      	blx	r7
 80036cc:	3001      	adds	r0, #1
 80036ce:	f43f ae76 	beq.w	80033be <_printf_float+0xb6>
 80036d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036d6:	4631      	mov	r1, r6
 80036d8:	4628      	mov	r0, r5
 80036da:	47b8      	blx	r7
 80036dc:	3001      	adds	r0, #1
 80036de:	f43f ae6e 	beq.w	80033be <_printf_float+0xb6>
 80036e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036e6:	2200      	movs	r2, #0
 80036e8:	2300      	movs	r3, #0
 80036ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036ee:	f7fd f95b 	bl	80009a8 <__aeabi_dcmpeq>
 80036f2:	b9c0      	cbnz	r0, 8003726 <_printf_float+0x41e>
 80036f4:	4653      	mov	r3, sl
 80036f6:	f108 0201 	add.w	r2, r8, #1
 80036fa:	4631      	mov	r1, r6
 80036fc:	4628      	mov	r0, r5
 80036fe:	47b8      	blx	r7
 8003700:	3001      	adds	r0, #1
 8003702:	d10c      	bne.n	800371e <_printf_float+0x416>
 8003704:	e65b      	b.n	80033be <_printf_float+0xb6>
 8003706:	2301      	movs	r3, #1
 8003708:	465a      	mov	r2, fp
 800370a:	4631      	mov	r1, r6
 800370c:	4628      	mov	r0, r5
 800370e:	47b8      	blx	r7
 8003710:	3001      	adds	r0, #1
 8003712:	f43f ae54 	beq.w	80033be <_printf_float+0xb6>
 8003716:	f108 0801 	add.w	r8, r8, #1
 800371a:	45d0      	cmp	r8, sl
 800371c:	dbf3      	blt.n	8003706 <_printf_float+0x3fe>
 800371e:	464b      	mov	r3, r9
 8003720:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003724:	e6e0      	b.n	80034e8 <_printf_float+0x1e0>
 8003726:	f04f 0800 	mov.w	r8, #0
 800372a:	f104 0b1a 	add.w	fp, r4, #26
 800372e:	e7f4      	b.n	800371a <_printf_float+0x412>
 8003730:	2301      	movs	r3, #1
 8003732:	4642      	mov	r2, r8
 8003734:	e7e1      	b.n	80036fa <_printf_float+0x3f2>
 8003736:	2301      	movs	r3, #1
 8003738:	464a      	mov	r2, r9
 800373a:	4631      	mov	r1, r6
 800373c:	4628      	mov	r0, r5
 800373e:	47b8      	blx	r7
 8003740:	3001      	adds	r0, #1
 8003742:	f43f ae3c 	beq.w	80033be <_printf_float+0xb6>
 8003746:	f108 0801 	add.w	r8, r8, #1
 800374a:	68e3      	ldr	r3, [r4, #12]
 800374c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800374e:	1a5b      	subs	r3, r3, r1
 8003750:	4543      	cmp	r3, r8
 8003752:	dcf0      	bgt.n	8003736 <_printf_float+0x42e>
 8003754:	e6fd      	b.n	8003552 <_printf_float+0x24a>
 8003756:	f04f 0800 	mov.w	r8, #0
 800375a:	f104 0919 	add.w	r9, r4, #25
 800375e:	e7f4      	b.n	800374a <_printf_float+0x442>

08003760 <_printf_common>:
 8003760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003764:	4616      	mov	r6, r2
 8003766:	4698      	mov	r8, r3
 8003768:	688a      	ldr	r2, [r1, #8]
 800376a:	690b      	ldr	r3, [r1, #16]
 800376c:	4607      	mov	r7, r0
 800376e:	4293      	cmp	r3, r2
 8003770:	bfb8      	it	lt
 8003772:	4613      	movlt	r3, r2
 8003774:	6033      	str	r3, [r6, #0]
 8003776:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800377a:	460c      	mov	r4, r1
 800377c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003780:	b10a      	cbz	r2, 8003786 <_printf_common+0x26>
 8003782:	3301      	adds	r3, #1
 8003784:	6033      	str	r3, [r6, #0]
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	0699      	lsls	r1, r3, #26
 800378a:	bf42      	ittt	mi
 800378c:	6833      	ldrmi	r3, [r6, #0]
 800378e:	3302      	addmi	r3, #2
 8003790:	6033      	strmi	r3, [r6, #0]
 8003792:	6825      	ldr	r5, [r4, #0]
 8003794:	f015 0506 	ands.w	r5, r5, #6
 8003798:	d106      	bne.n	80037a8 <_printf_common+0x48>
 800379a:	f104 0a19 	add.w	sl, r4, #25
 800379e:	68e3      	ldr	r3, [r4, #12]
 80037a0:	6832      	ldr	r2, [r6, #0]
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	42ab      	cmp	r3, r5
 80037a6:	dc2b      	bgt.n	8003800 <_printf_common+0xa0>
 80037a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037ac:	6822      	ldr	r2, [r4, #0]
 80037ae:	3b00      	subs	r3, #0
 80037b0:	bf18      	it	ne
 80037b2:	2301      	movne	r3, #1
 80037b4:	0692      	lsls	r2, r2, #26
 80037b6:	d430      	bmi.n	800381a <_printf_common+0xba>
 80037b8:	4641      	mov	r1, r8
 80037ba:	4638      	mov	r0, r7
 80037bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037c0:	47c8      	blx	r9
 80037c2:	3001      	adds	r0, #1
 80037c4:	d023      	beq.n	800380e <_printf_common+0xae>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	6922      	ldr	r2, [r4, #16]
 80037ca:	f003 0306 	and.w	r3, r3, #6
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	bf14      	ite	ne
 80037d2:	2500      	movne	r5, #0
 80037d4:	6833      	ldreq	r3, [r6, #0]
 80037d6:	f04f 0600 	mov.w	r6, #0
 80037da:	bf08      	it	eq
 80037dc:	68e5      	ldreq	r5, [r4, #12]
 80037de:	f104 041a 	add.w	r4, r4, #26
 80037e2:	bf08      	it	eq
 80037e4:	1aed      	subeq	r5, r5, r3
 80037e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037ea:	bf08      	it	eq
 80037ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bfc4      	itt	gt
 80037f4:	1a9b      	subgt	r3, r3, r2
 80037f6:	18ed      	addgt	r5, r5, r3
 80037f8:	42b5      	cmp	r5, r6
 80037fa:	d11a      	bne.n	8003832 <_printf_common+0xd2>
 80037fc:	2000      	movs	r0, #0
 80037fe:	e008      	b.n	8003812 <_printf_common+0xb2>
 8003800:	2301      	movs	r3, #1
 8003802:	4652      	mov	r2, sl
 8003804:	4641      	mov	r1, r8
 8003806:	4638      	mov	r0, r7
 8003808:	47c8      	blx	r9
 800380a:	3001      	adds	r0, #1
 800380c:	d103      	bne.n	8003816 <_printf_common+0xb6>
 800380e:	f04f 30ff 	mov.w	r0, #4294967295
 8003812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003816:	3501      	adds	r5, #1
 8003818:	e7c1      	b.n	800379e <_printf_common+0x3e>
 800381a:	2030      	movs	r0, #48	@ 0x30
 800381c:	18e1      	adds	r1, r4, r3
 800381e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003828:	4422      	add	r2, r4
 800382a:	3302      	adds	r3, #2
 800382c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003830:	e7c2      	b.n	80037b8 <_printf_common+0x58>
 8003832:	2301      	movs	r3, #1
 8003834:	4622      	mov	r2, r4
 8003836:	4641      	mov	r1, r8
 8003838:	4638      	mov	r0, r7
 800383a:	47c8      	blx	r9
 800383c:	3001      	adds	r0, #1
 800383e:	d0e6      	beq.n	800380e <_printf_common+0xae>
 8003840:	3601      	adds	r6, #1
 8003842:	e7d9      	b.n	80037f8 <_printf_common+0x98>

08003844 <_printf_i>:
 8003844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	7e0f      	ldrb	r7, [r1, #24]
 800384a:	4691      	mov	r9, r2
 800384c:	2f78      	cmp	r7, #120	@ 0x78
 800384e:	4680      	mov	r8, r0
 8003850:	460c      	mov	r4, r1
 8003852:	469a      	mov	sl, r3
 8003854:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800385a:	d807      	bhi.n	800386c <_printf_i+0x28>
 800385c:	2f62      	cmp	r7, #98	@ 0x62
 800385e:	d80a      	bhi.n	8003876 <_printf_i+0x32>
 8003860:	2f00      	cmp	r7, #0
 8003862:	f000 80d3 	beq.w	8003a0c <_printf_i+0x1c8>
 8003866:	2f58      	cmp	r7, #88	@ 0x58
 8003868:	f000 80ba 	beq.w	80039e0 <_printf_i+0x19c>
 800386c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003874:	e03a      	b.n	80038ec <_printf_i+0xa8>
 8003876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800387a:	2b15      	cmp	r3, #21
 800387c:	d8f6      	bhi.n	800386c <_printf_i+0x28>
 800387e:	a101      	add	r1, pc, #4	@ (adr r1, 8003884 <_printf_i+0x40>)
 8003880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003884:	080038dd 	.word	0x080038dd
 8003888:	080038f1 	.word	0x080038f1
 800388c:	0800386d 	.word	0x0800386d
 8003890:	0800386d 	.word	0x0800386d
 8003894:	0800386d 	.word	0x0800386d
 8003898:	0800386d 	.word	0x0800386d
 800389c:	080038f1 	.word	0x080038f1
 80038a0:	0800386d 	.word	0x0800386d
 80038a4:	0800386d 	.word	0x0800386d
 80038a8:	0800386d 	.word	0x0800386d
 80038ac:	0800386d 	.word	0x0800386d
 80038b0:	080039f3 	.word	0x080039f3
 80038b4:	0800391b 	.word	0x0800391b
 80038b8:	080039ad 	.word	0x080039ad
 80038bc:	0800386d 	.word	0x0800386d
 80038c0:	0800386d 	.word	0x0800386d
 80038c4:	08003a15 	.word	0x08003a15
 80038c8:	0800386d 	.word	0x0800386d
 80038cc:	0800391b 	.word	0x0800391b
 80038d0:	0800386d 	.word	0x0800386d
 80038d4:	0800386d 	.word	0x0800386d
 80038d8:	080039b5 	.word	0x080039b5
 80038dc:	6833      	ldr	r3, [r6, #0]
 80038de:	1d1a      	adds	r2, r3, #4
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6032      	str	r2, [r6, #0]
 80038e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038ec:	2301      	movs	r3, #1
 80038ee:	e09e      	b.n	8003a2e <_printf_i+0x1ea>
 80038f0:	6833      	ldr	r3, [r6, #0]
 80038f2:	6820      	ldr	r0, [r4, #0]
 80038f4:	1d19      	adds	r1, r3, #4
 80038f6:	6031      	str	r1, [r6, #0]
 80038f8:	0606      	lsls	r6, r0, #24
 80038fa:	d501      	bpl.n	8003900 <_printf_i+0xbc>
 80038fc:	681d      	ldr	r5, [r3, #0]
 80038fe:	e003      	b.n	8003908 <_printf_i+0xc4>
 8003900:	0645      	lsls	r5, r0, #25
 8003902:	d5fb      	bpl.n	80038fc <_printf_i+0xb8>
 8003904:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003908:	2d00      	cmp	r5, #0
 800390a:	da03      	bge.n	8003914 <_printf_i+0xd0>
 800390c:	232d      	movs	r3, #45	@ 0x2d
 800390e:	426d      	negs	r5, r5
 8003910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003914:	230a      	movs	r3, #10
 8003916:	4859      	ldr	r0, [pc, #356]	@ (8003a7c <_printf_i+0x238>)
 8003918:	e011      	b.n	800393e <_printf_i+0xfa>
 800391a:	6821      	ldr	r1, [r4, #0]
 800391c:	6833      	ldr	r3, [r6, #0]
 800391e:	0608      	lsls	r0, r1, #24
 8003920:	f853 5b04 	ldr.w	r5, [r3], #4
 8003924:	d402      	bmi.n	800392c <_printf_i+0xe8>
 8003926:	0649      	lsls	r1, r1, #25
 8003928:	bf48      	it	mi
 800392a:	b2ad      	uxthmi	r5, r5
 800392c:	2f6f      	cmp	r7, #111	@ 0x6f
 800392e:	6033      	str	r3, [r6, #0]
 8003930:	bf14      	ite	ne
 8003932:	230a      	movne	r3, #10
 8003934:	2308      	moveq	r3, #8
 8003936:	4851      	ldr	r0, [pc, #324]	@ (8003a7c <_printf_i+0x238>)
 8003938:	2100      	movs	r1, #0
 800393a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800393e:	6866      	ldr	r6, [r4, #4]
 8003940:	2e00      	cmp	r6, #0
 8003942:	bfa8      	it	ge
 8003944:	6821      	ldrge	r1, [r4, #0]
 8003946:	60a6      	str	r6, [r4, #8]
 8003948:	bfa4      	itt	ge
 800394a:	f021 0104 	bicge.w	r1, r1, #4
 800394e:	6021      	strge	r1, [r4, #0]
 8003950:	b90d      	cbnz	r5, 8003956 <_printf_i+0x112>
 8003952:	2e00      	cmp	r6, #0
 8003954:	d04b      	beq.n	80039ee <_printf_i+0x1aa>
 8003956:	4616      	mov	r6, r2
 8003958:	fbb5 f1f3 	udiv	r1, r5, r3
 800395c:	fb03 5711 	mls	r7, r3, r1, r5
 8003960:	5dc7      	ldrb	r7, [r0, r7]
 8003962:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003966:	462f      	mov	r7, r5
 8003968:	42bb      	cmp	r3, r7
 800396a:	460d      	mov	r5, r1
 800396c:	d9f4      	bls.n	8003958 <_printf_i+0x114>
 800396e:	2b08      	cmp	r3, #8
 8003970:	d10b      	bne.n	800398a <_printf_i+0x146>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	07df      	lsls	r7, r3, #31
 8003976:	d508      	bpl.n	800398a <_printf_i+0x146>
 8003978:	6923      	ldr	r3, [r4, #16]
 800397a:	6861      	ldr	r1, [r4, #4]
 800397c:	4299      	cmp	r1, r3
 800397e:	bfde      	ittt	le
 8003980:	2330      	movle	r3, #48	@ 0x30
 8003982:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003986:	f106 36ff 	addle.w	r6, r6, #4294967295
 800398a:	1b92      	subs	r2, r2, r6
 800398c:	6122      	str	r2, [r4, #16]
 800398e:	464b      	mov	r3, r9
 8003990:	4621      	mov	r1, r4
 8003992:	4640      	mov	r0, r8
 8003994:	f8cd a000 	str.w	sl, [sp]
 8003998:	aa03      	add	r2, sp, #12
 800399a:	f7ff fee1 	bl	8003760 <_printf_common>
 800399e:	3001      	adds	r0, #1
 80039a0:	d14a      	bne.n	8003a38 <_printf_i+0x1f4>
 80039a2:	f04f 30ff 	mov.w	r0, #4294967295
 80039a6:	b004      	add	sp, #16
 80039a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	f043 0320 	orr.w	r3, r3, #32
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	2778      	movs	r7, #120	@ 0x78
 80039b6:	4832      	ldr	r0, [pc, #200]	@ (8003a80 <_printf_i+0x23c>)
 80039b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	6831      	ldr	r1, [r6, #0]
 80039c0:	061f      	lsls	r7, r3, #24
 80039c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80039c6:	d402      	bmi.n	80039ce <_printf_i+0x18a>
 80039c8:	065f      	lsls	r7, r3, #25
 80039ca:	bf48      	it	mi
 80039cc:	b2ad      	uxthmi	r5, r5
 80039ce:	6031      	str	r1, [r6, #0]
 80039d0:	07d9      	lsls	r1, r3, #31
 80039d2:	bf44      	itt	mi
 80039d4:	f043 0320 	orrmi.w	r3, r3, #32
 80039d8:	6023      	strmi	r3, [r4, #0]
 80039da:	b11d      	cbz	r5, 80039e4 <_printf_i+0x1a0>
 80039dc:	2310      	movs	r3, #16
 80039de:	e7ab      	b.n	8003938 <_printf_i+0xf4>
 80039e0:	4826      	ldr	r0, [pc, #152]	@ (8003a7c <_printf_i+0x238>)
 80039e2:	e7e9      	b.n	80039b8 <_printf_i+0x174>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	f023 0320 	bic.w	r3, r3, #32
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	e7f6      	b.n	80039dc <_printf_i+0x198>
 80039ee:	4616      	mov	r6, r2
 80039f0:	e7bd      	b.n	800396e <_printf_i+0x12a>
 80039f2:	6833      	ldr	r3, [r6, #0]
 80039f4:	6825      	ldr	r5, [r4, #0]
 80039f6:	1d18      	adds	r0, r3, #4
 80039f8:	6961      	ldr	r1, [r4, #20]
 80039fa:	6030      	str	r0, [r6, #0]
 80039fc:	062e      	lsls	r6, r5, #24
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	d501      	bpl.n	8003a06 <_printf_i+0x1c2>
 8003a02:	6019      	str	r1, [r3, #0]
 8003a04:	e002      	b.n	8003a0c <_printf_i+0x1c8>
 8003a06:	0668      	lsls	r0, r5, #25
 8003a08:	d5fb      	bpl.n	8003a02 <_printf_i+0x1be>
 8003a0a:	8019      	strh	r1, [r3, #0]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4616      	mov	r6, r2
 8003a10:	6123      	str	r3, [r4, #16]
 8003a12:	e7bc      	b.n	800398e <_printf_i+0x14a>
 8003a14:	6833      	ldr	r3, [r6, #0]
 8003a16:	2100      	movs	r1, #0
 8003a18:	1d1a      	adds	r2, r3, #4
 8003a1a:	6032      	str	r2, [r6, #0]
 8003a1c:	681e      	ldr	r6, [r3, #0]
 8003a1e:	6862      	ldr	r2, [r4, #4]
 8003a20:	4630      	mov	r0, r6
 8003a22:	f000 fbe4 	bl	80041ee <memchr>
 8003a26:	b108      	cbz	r0, 8003a2c <_printf_i+0x1e8>
 8003a28:	1b80      	subs	r0, r0, r6
 8003a2a:	6060      	str	r0, [r4, #4]
 8003a2c:	6863      	ldr	r3, [r4, #4]
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	2300      	movs	r3, #0
 8003a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a36:	e7aa      	b.n	800398e <_printf_i+0x14a>
 8003a38:	4632      	mov	r2, r6
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	6923      	ldr	r3, [r4, #16]
 8003a40:	47d0      	blx	sl
 8003a42:	3001      	adds	r0, #1
 8003a44:	d0ad      	beq.n	80039a2 <_printf_i+0x15e>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	079b      	lsls	r3, r3, #30
 8003a4a:	d413      	bmi.n	8003a74 <_printf_i+0x230>
 8003a4c:	68e0      	ldr	r0, [r4, #12]
 8003a4e:	9b03      	ldr	r3, [sp, #12]
 8003a50:	4298      	cmp	r0, r3
 8003a52:	bfb8      	it	lt
 8003a54:	4618      	movlt	r0, r3
 8003a56:	e7a6      	b.n	80039a6 <_printf_i+0x162>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	4632      	mov	r2, r6
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	4640      	mov	r0, r8
 8003a60:	47d0      	blx	sl
 8003a62:	3001      	adds	r0, #1
 8003a64:	d09d      	beq.n	80039a2 <_printf_i+0x15e>
 8003a66:	3501      	adds	r5, #1
 8003a68:	68e3      	ldr	r3, [r4, #12]
 8003a6a:	9903      	ldr	r1, [sp, #12]
 8003a6c:	1a5b      	subs	r3, r3, r1
 8003a6e:	42ab      	cmp	r3, r5
 8003a70:	dcf2      	bgt.n	8003a58 <_printf_i+0x214>
 8003a72:	e7eb      	b.n	8003a4c <_printf_i+0x208>
 8003a74:	2500      	movs	r5, #0
 8003a76:	f104 0619 	add.w	r6, r4, #25
 8003a7a:	e7f5      	b.n	8003a68 <_printf_i+0x224>
 8003a7c:	08007934 	.word	0x08007934
 8003a80:	08007945 	.word	0x08007945

08003a84 <_scanf_float>:
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	9303      	str	r3, [sp, #12]
 8003a8c:	688b      	ldr	r3, [r1, #8]
 8003a8e:	4617      	mov	r7, r2
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003a96:	bf82      	ittt	hi
 8003a98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003a9c:	eb03 0b05 	addhi.w	fp, r3, r5
 8003aa0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003aa4:	460a      	mov	r2, r1
 8003aa6:	f04f 0500 	mov.w	r5, #0
 8003aaa:	bf88      	it	hi
 8003aac:	608b      	strhi	r3, [r1, #8]
 8003aae:	680b      	ldr	r3, [r1, #0]
 8003ab0:	4680      	mov	r8, r0
 8003ab2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003ab6:	f842 3b1c 	str.w	r3, [r2], #28
 8003aba:	460c      	mov	r4, r1
 8003abc:	bf98      	it	ls
 8003abe:	f04f 0b00 	movls.w	fp, #0
 8003ac2:	4616      	mov	r6, r2
 8003ac4:	46aa      	mov	sl, r5
 8003ac6:	46a9      	mov	r9, r5
 8003ac8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003acc:	9201      	str	r2, [sp, #4]
 8003ace:	9502      	str	r5, [sp, #8]
 8003ad0:	68a2      	ldr	r2, [r4, #8]
 8003ad2:	b152      	cbz	r2, 8003aea <_scanf_float+0x66>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b4e      	cmp	r3, #78	@ 0x4e
 8003ada:	d865      	bhi.n	8003ba8 <_scanf_float+0x124>
 8003adc:	2b40      	cmp	r3, #64	@ 0x40
 8003ade:	d83d      	bhi.n	8003b5c <_scanf_float+0xd8>
 8003ae0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003ae4:	b2c8      	uxtb	r0, r1
 8003ae6:	280e      	cmp	r0, #14
 8003ae8:	d93b      	bls.n	8003b62 <_scanf_float+0xde>
 8003aea:	f1b9 0f00 	cmp.w	r9, #0
 8003aee:	d003      	beq.n	8003af8 <_scanf_float+0x74>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003afc:	f1ba 0f01 	cmp.w	sl, #1
 8003b00:	f200 8118 	bhi.w	8003d34 <_scanf_float+0x2b0>
 8003b04:	9b01      	ldr	r3, [sp, #4]
 8003b06:	429e      	cmp	r6, r3
 8003b08:	f200 8109 	bhi.w	8003d1e <_scanf_float+0x29a>
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	b007      	add	sp, #28
 8003b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b14:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003b18:	2a0d      	cmp	r2, #13
 8003b1a:	d8e6      	bhi.n	8003aea <_scanf_float+0x66>
 8003b1c:	a101      	add	r1, pc, #4	@ (adr r1, 8003b24 <_scanf_float+0xa0>)
 8003b1e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003c6b 	.word	0x08003c6b
 8003b28:	08003aeb 	.word	0x08003aeb
 8003b2c:	08003aeb 	.word	0x08003aeb
 8003b30:	08003aeb 	.word	0x08003aeb
 8003b34:	08003ccb 	.word	0x08003ccb
 8003b38:	08003ca3 	.word	0x08003ca3
 8003b3c:	08003aeb 	.word	0x08003aeb
 8003b40:	08003aeb 	.word	0x08003aeb
 8003b44:	08003c79 	.word	0x08003c79
 8003b48:	08003aeb 	.word	0x08003aeb
 8003b4c:	08003aeb 	.word	0x08003aeb
 8003b50:	08003aeb 	.word	0x08003aeb
 8003b54:	08003aeb 	.word	0x08003aeb
 8003b58:	08003c31 	.word	0x08003c31
 8003b5c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003b60:	e7da      	b.n	8003b18 <_scanf_float+0x94>
 8003b62:	290e      	cmp	r1, #14
 8003b64:	d8c1      	bhi.n	8003aea <_scanf_float+0x66>
 8003b66:	a001      	add	r0, pc, #4	@ (adr r0, 8003b6c <_scanf_float+0xe8>)
 8003b68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003b6c:	08003c21 	.word	0x08003c21
 8003b70:	08003aeb 	.word	0x08003aeb
 8003b74:	08003c21 	.word	0x08003c21
 8003b78:	08003cb7 	.word	0x08003cb7
 8003b7c:	08003aeb 	.word	0x08003aeb
 8003b80:	08003bc9 	.word	0x08003bc9
 8003b84:	08003c07 	.word	0x08003c07
 8003b88:	08003c07 	.word	0x08003c07
 8003b8c:	08003c07 	.word	0x08003c07
 8003b90:	08003c07 	.word	0x08003c07
 8003b94:	08003c07 	.word	0x08003c07
 8003b98:	08003c07 	.word	0x08003c07
 8003b9c:	08003c07 	.word	0x08003c07
 8003ba0:	08003c07 	.word	0x08003c07
 8003ba4:	08003c07 	.word	0x08003c07
 8003ba8:	2b6e      	cmp	r3, #110	@ 0x6e
 8003baa:	d809      	bhi.n	8003bc0 <_scanf_float+0x13c>
 8003bac:	2b60      	cmp	r3, #96	@ 0x60
 8003bae:	d8b1      	bhi.n	8003b14 <_scanf_float+0x90>
 8003bb0:	2b54      	cmp	r3, #84	@ 0x54
 8003bb2:	d07b      	beq.n	8003cac <_scanf_float+0x228>
 8003bb4:	2b59      	cmp	r3, #89	@ 0x59
 8003bb6:	d198      	bne.n	8003aea <_scanf_float+0x66>
 8003bb8:	2d07      	cmp	r5, #7
 8003bba:	d196      	bne.n	8003aea <_scanf_float+0x66>
 8003bbc:	2508      	movs	r5, #8
 8003bbe:	e02c      	b.n	8003c1a <_scanf_float+0x196>
 8003bc0:	2b74      	cmp	r3, #116	@ 0x74
 8003bc2:	d073      	beq.n	8003cac <_scanf_float+0x228>
 8003bc4:	2b79      	cmp	r3, #121	@ 0x79
 8003bc6:	e7f6      	b.n	8003bb6 <_scanf_float+0x132>
 8003bc8:	6821      	ldr	r1, [r4, #0]
 8003bca:	05c8      	lsls	r0, r1, #23
 8003bcc:	d51b      	bpl.n	8003c06 <_scanf_float+0x182>
 8003bce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003bd2:	6021      	str	r1, [r4, #0]
 8003bd4:	f109 0901 	add.w	r9, r9, #1
 8003bd8:	f1bb 0f00 	cmp.w	fp, #0
 8003bdc:	d003      	beq.n	8003be6 <_scanf_float+0x162>
 8003bde:	3201      	adds	r2, #1
 8003be0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003be4:	60a2      	str	r2, [r4, #8]
 8003be6:	68a3      	ldr	r3, [r4, #8]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	60a3      	str	r3, [r4, #8]
 8003bec:	6923      	ldr	r3, [r4, #16]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	6123      	str	r3, [r4, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	f340 8087 	ble.w	8003d0c <_scanf_float+0x288>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	e764      	b.n	8003ad0 <_scanf_float+0x4c>
 8003c06:	eb1a 0105 	adds.w	r1, sl, r5
 8003c0a:	f47f af6e 	bne.w	8003aea <_scanf_float+0x66>
 8003c0e:	460d      	mov	r5, r1
 8003c10:	468a      	mov	sl, r1
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003c18:	6022      	str	r2, [r4, #0]
 8003c1a:	f806 3b01 	strb.w	r3, [r6], #1
 8003c1e:	e7e2      	b.n	8003be6 <_scanf_float+0x162>
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	0610      	lsls	r0, r2, #24
 8003c24:	f57f af61 	bpl.w	8003aea <_scanf_float+0x66>
 8003c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c2c:	6022      	str	r2, [r4, #0]
 8003c2e:	e7f4      	b.n	8003c1a <_scanf_float+0x196>
 8003c30:	f1ba 0f00 	cmp.w	sl, #0
 8003c34:	d10e      	bne.n	8003c54 <_scanf_float+0x1d0>
 8003c36:	f1b9 0f00 	cmp.w	r9, #0
 8003c3a:	d10e      	bne.n	8003c5a <_scanf_float+0x1d6>
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003c42:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003c46:	d108      	bne.n	8003c5a <_scanf_float+0x1d6>
 8003c48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c4c:	f04f 0a01 	mov.w	sl, #1
 8003c50:	6022      	str	r2, [r4, #0]
 8003c52:	e7e2      	b.n	8003c1a <_scanf_float+0x196>
 8003c54:	f1ba 0f02 	cmp.w	sl, #2
 8003c58:	d055      	beq.n	8003d06 <_scanf_float+0x282>
 8003c5a:	2d01      	cmp	r5, #1
 8003c5c:	d002      	beq.n	8003c64 <_scanf_float+0x1e0>
 8003c5e:	2d04      	cmp	r5, #4
 8003c60:	f47f af43 	bne.w	8003aea <_scanf_float+0x66>
 8003c64:	3501      	adds	r5, #1
 8003c66:	b2ed      	uxtb	r5, r5
 8003c68:	e7d7      	b.n	8003c1a <_scanf_float+0x196>
 8003c6a:	f1ba 0f01 	cmp.w	sl, #1
 8003c6e:	f47f af3c 	bne.w	8003aea <_scanf_float+0x66>
 8003c72:	f04f 0a02 	mov.w	sl, #2
 8003c76:	e7d0      	b.n	8003c1a <_scanf_float+0x196>
 8003c78:	b97d      	cbnz	r5, 8003c9a <_scanf_float+0x216>
 8003c7a:	f1b9 0f00 	cmp.w	r9, #0
 8003c7e:	f47f af37 	bne.w	8003af0 <_scanf_float+0x6c>
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003c88:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003c8c:	f040 8103 	bne.w	8003e96 <_scanf_float+0x412>
 8003c90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c94:	2501      	movs	r5, #1
 8003c96:	6022      	str	r2, [r4, #0]
 8003c98:	e7bf      	b.n	8003c1a <_scanf_float+0x196>
 8003c9a:	2d03      	cmp	r5, #3
 8003c9c:	d0e2      	beq.n	8003c64 <_scanf_float+0x1e0>
 8003c9e:	2d05      	cmp	r5, #5
 8003ca0:	e7de      	b.n	8003c60 <_scanf_float+0x1dc>
 8003ca2:	2d02      	cmp	r5, #2
 8003ca4:	f47f af21 	bne.w	8003aea <_scanf_float+0x66>
 8003ca8:	2503      	movs	r5, #3
 8003caa:	e7b6      	b.n	8003c1a <_scanf_float+0x196>
 8003cac:	2d06      	cmp	r5, #6
 8003cae:	f47f af1c 	bne.w	8003aea <_scanf_float+0x66>
 8003cb2:	2507      	movs	r5, #7
 8003cb4:	e7b1      	b.n	8003c1a <_scanf_float+0x196>
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	0591      	lsls	r1, r2, #22
 8003cba:	f57f af16 	bpl.w	8003aea <_scanf_float+0x66>
 8003cbe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003cc2:	6022      	str	r2, [r4, #0]
 8003cc4:	f8cd 9008 	str.w	r9, [sp, #8]
 8003cc8:	e7a7      	b.n	8003c1a <_scanf_float+0x196>
 8003cca:	6822      	ldr	r2, [r4, #0]
 8003ccc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003cd0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003cd4:	d006      	beq.n	8003ce4 <_scanf_float+0x260>
 8003cd6:	0550      	lsls	r0, r2, #21
 8003cd8:	f57f af07 	bpl.w	8003aea <_scanf_float+0x66>
 8003cdc:	f1b9 0f00 	cmp.w	r9, #0
 8003ce0:	f000 80d9 	beq.w	8003e96 <_scanf_float+0x412>
 8003ce4:	0591      	lsls	r1, r2, #22
 8003ce6:	bf58      	it	pl
 8003ce8:	9902      	ldrpl	r1, [sp, #8]
 8003cea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003cee:	bf58      	it	pl
 8003cf0:	eba9 0101 	subpl.w	r1, r9, r1
 8003cf4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003cf8:	f04f 0900 	mov.w	r9, #0
 8003cfc:	bf58      	it	pl
 8003cfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003d02:	6022      	str	r2, [r4, #0]
 8003d04:	e789      	b.n	8003c1a <_scanf_float+0x196>
 8003d06:	f04f 0a03 	mov.w	sl, #3
 8003d0a:	e786      	b.n	8003c1a <_scanf_float+0x196>
 8003d0c:	4639      	mov	r1, r7
 8003d0e:	4640      	mov	r0, r8
 8003d10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003d14:	4798      	blx	r3
 8003d16:	2800      	cmp	r0, #0
 8003d18:	f43f aeda 	beq.w	8003ad0 <_scanf_float+0x4c>
 8003d1c:	e6e5      	b.n	8003aea <_scanf_float+0x66>
 8003d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d22:	463a      	mov	r2, r7
 8003d24:	4640      	mov	r0, r8
 8003d26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d2a:	4798      	blx	r3
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	e6e7      	b.n	8003b04 <_scanf_float+0x80>
 8003d34:	1e6b      	subs	r3, r5, #1
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d824      	bhi.n	8003d84 <_scanf_float+0x300>
 8003d3a:	2d02      	cmp	r5, #2
 8003d3c:	d836      	bhi.n	8003dac <_scanf_float+0x328>
 8003d3e:	9b01      	ldr	r3, [sp, #4]
 8003d40:	429e      	cmp	r6, r3
 8003d42:	f67f aee3 	bls.w	8003b0c <_scanf_float+0x88>
 8003d46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d4a:	463a      	mov	r2, r7
 8003d4c:	4640      	mov	r0, r8
 8003d4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d52:	4798      	blx	r3
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	6123      	str	r3, [r4, #16]
 8003d5a:	e7f0      	b.n	8003d3e <_scanf_float+0x2ba>
 8003d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d60:	463a      	mov	r2, r7
 8003d62:	4640      	mov	r0, r8
 8003d64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003d68:	4798      	blx	r3
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	6123      	str	r3, [r4, #16]
 8003d70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d74:	fa5f fa8a 	uxtb.w	sl, sl
 8003d78:	f1ba 0f02 	cmp.w	sl, #2
 8003d7c:	d1ee      	bne.n	8003d5c <_scanf_float+0x2d8>
 8003d7e:	3d03      	subs	r5, #3
 8003d80:	b2ed      	uxtb	r5, r5
 8003d82:	1b76      	subs	r6, r6, r5
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	05da      	lsls	r2, r3, #23
 8003d88:	d530      	bpl.n	8003dec <_scanf_float+0x368>
 8003d8a:	055b      	lsls	r3, r3, #21
 8003d8c:	d511      	bpl.n	8003db2 <_scanf_float+0x32e>
 8003d8e:	9b01      	ldr	r3, [sp, #4]
 8003d90:	429e      	cmp	r6, r3
 8003d92:	f67f aebb 	bls.w	8003b0c <_scanf_float+0x88>
 8003d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d9a:	463a      	mov	r2, r7
 8003d9c:	4640      	mov	r0, r8
 8003d9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003da2:	4798      	blx	r3
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	e7f0      	b.n	8003d8e <_scanf_float+0x30a>
 8003dac:	46aa      	mov	sl, r5
 8003dae:	46b3      	mov	fp, r6
 8003db0:	e7de      	b.n	8003d70 <_scanf_float+0x2ec>
 8003db2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	2965      	cmp	r1, #101	@ 0x65
 8003dba:	f103 33ff 	add.w	r3, r3, #4294967295
 8003dbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	d00c      	beq.n	8003de0 <_scanf_float+0x35c>
 8003dc6:	2945      	cmp	r1, #69	@ 0x45
 8003dc8:	d00a      	beq.n	8003de0 <_scanf_float+0x35c>
 8003dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dce:	463a      	mov	r2, r7
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	4798      	blx	r3
 8003dd4:	6923      	ldr	r3, [r4, #16]
 8003dd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	1eb5      	subs	r5, r6, #2
 8003dde:	6123      	str	r3, [r4, #16]
 8003de0:	463a      	mov	r2, r7
 8003de2:	4640      	mov	r0, r8
 8003de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003de8:	4798      	blx	r3
 8003dea:	462e      	mov	r6, r5
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	f012 0210 	ands.w	r2, r2, #16
 8003df2:	d001      	beq.n	8003df8 <_scanf_float+0x374>
 8003df4:	2000      	movs	r0, #0
 8003df6:	e68a      	b.n	8003b0e <_scanf_float+0x8a>
 8003df8:	7032      	strb	r2, [r6, #0]
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e04:	d11c      	bne.n	8003e40 <_scanf_float+0x3bc>
 8003e06:	9b02      	ldr	r3, [sp, #8]
 8003e08:	454b      	cmp	r3, r9
 8003e0a:	eba3 0209 	sub.w	r2, r3, r9
 8003e0e:	d123      	bne.n	8003e58 <_scanf_float+0x3d4>
 8003e10:	2200      	movs	r2, #0
 8003e12:	4640      	mov	r0, r8
 8003e14:	9901      	ldr	r1, [sp, #4]
 8003e16:	f002 fbef 	bl	80065f8 <_strtod_r>
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	6825      	ldr	r5, [r4, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f015 0f02 	tst.w	r5, #2
 8003e24:	4606      	mov	r6, r0
 8003e26:	460f      	mov	r7, r1
 8003e28:	f103 0204 	add.w	r2, r3, #4
 8003e2c:	d01f      	beq.n	8003e6e <_scanf_float+0x3ea>
 8003e2e:	9903      	ldr	r1, [sp, #12]
 8003e30:	600a      	str	r2, [r1, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	e9c3 6700 	strd	r6, r7, [r3]
 8003e38:	68e3      	ldr	r3, [r4, #12]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60e3      	str	r3, [r4, #12]
 8003e3e:	e7d9      	b.n	8003df4 <_scanf_float+0x370>
 8003e40:	9b04      	ldr	r3, [sp, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0e4      	beq.n	8003e10 <_scanf_float+0x38c>
 8003e46:	9905      	ldr	r1, [sp, #20]
 8003e48:	230a      	movs	r3, #10
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	3101      	adds	r1, #1
 8003e4e:	f002 fc53 	bl	80066f8 <_strtol_r>
 8003e52:	9b04      	ldr	r3, [sp, #16]
 8003e54:	9e05      	ldr	r6, [sp, #20]
 8003e56:	1ac2      	subs	r2, r0, r3
 8003e58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003e5c:	429e      	cmp	r6, r3
 8003e5e:	bf28      	it	cs
 8003e60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003e64:	4630      	mov	r0, r6
 8003e66:	490d      	ldr	r1, [pc, #52]	@ (8003e9c <_scanf_float+0x418>)
 8003e68:	f000 f8de 	bl	8004028 <siprintf>
 8003e6c:	e7d0      	b.n	8003e10 <_scanf_float+0x38c>
 8003e6e:	076d      	lsls	r5, r5, #29
 8003e70:	d4dd      	bmi.n	8003e2e <_scanf_float+0x3aa>
 8003e72:	9d03      	ldr	r5, [sp, #12]
 8003e74:	602a      	str	r2, [r5, #0]
 8003e76:	681d      	ldr	r5, [r3, #0]
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	f7fc fdc6 	bl	8000a0c <__aeabi_dcmpun>
 8003e80:	b120      	cbz	r0, 8003e8c <_scanf_float+0x408>
 8003e82:	4807      	ldr	r0, [pc, #28]	@ (8003ea0 <_scanf_float+0x41c>)
 8003e84:	f000 f9c2 	bl	800420c <nanf>
 8003e88:	6028      	str	r0, [r5, #0]
 8003e8a:	e7d5      	b.n	8003e38 <_scanf_float+0x3b4>
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	4639      	mov	r1, r7
 8003e90:	f7fc fe1a 	bl	8000ac8 <__aeabi_d2f>
 8003e94:	e7f8      	b.n	8003e88 <_scanf_float+0x404>
 8003e96:	f04f 0900 	mov.w	r9, #0
 8003e9a:	e62d      	b.n	8003af8 <_scanf_float+0x74>
 8003e9c:	08007956 	.word	0x08007956
 8003ea0:	08007ced 	.word	0x08007ced

08003ea4 <std>:
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8003eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eb2:	6083      	str	r3, [r0, #8]
 8003eb4:	8181      	strh	r1, [r0, #12]
 8003eb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003eb8:	81c2      	strh	r2, [r0, #14]
 8003eba:	6183      	str	r3, [r0, #24]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	305c      	adds	r0, #92	@ 0x5c
 8003ec2:	f000 f914 	bl	80040ee <memset>
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <std+0x58>)
 8003ec8:	6224      	str	r4, [r4, #32]
 8003eca:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <std+0x5c>)
 8003ece:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <std+0x60>)
 8003ed2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <std+0x64>)
 8003ed6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <std+0x68>)
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d006      	beq.n	8003eec <std+0x48>
 8003ede:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ee2:	4294      	cmp	r4, r2
 8003ee4:	d002      	beq.n	8003eec <std+0x48>
 8003ee6:	33d0      	adds	r3, #208	@ 0xd0
 8003ee8:	429c      	cmp	r4, r3
 8003eea:	d105      	bne.n	8003ef8 <std+0x54>
 8003eec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef4:	f000 b978 	b.w	80041e8 <__retarget_lock_init_recursive>
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	bf00      	nop
 8003efc:	08004069 	.word	0x08004069
 8003f00:	0800408b 	.word	0x0800408b
 8003f04:	080040c3 	.word	0x080040c3
 8003f08:	080040e7 	.word	0x080040e7
 8003f0c:	200002d8 	.word	0x200002d8

08003f10 <stdio_exit_handler>:
 8003f10:	4a02      	ldr	r2, [pc, #8]	@ (8003f1c <stdio_exit_handler+0xc>)
 8003f12:	4903      	ldr	r1, [pc, #12]	@ (8003f20 <stdio_exit_handler+0x10>)
 8003f14:	4803      	ldr	r0, [pc, #12]	@ (8003f24 <stdio_exit_handler+0x14>)
 8003f16:	f000 b869 	b.w	8003fec <_fwalk_sglue>
 8003f1a:	bf00      	nop
 8003f1c:	2000000c 	.word	0x2000000c
 8003f20:	08006aad 	.word	0x08006aad
 8003f24:	2000001c 	.word	0x2000001c

08003f28 <cleanup_stdio>:
 8003f28:	6841      	ldr	r1, [r0, #4]
 8003f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <cleanup_stdio+0x34>)
 8003f2c:	b510      	push	{r4, lr}
 8003f2e:	4299      	cmp	r1, r3
 8003f30:	4604      	mov	r4, r0
 8003f32:	d001      	beq.n	8003f38 <cleanup_stdio+0x10>
 8003f34:	f002 fdba 	bl	8006aac <_fflush_r>
 8003f38:	68a1      	ldr	r1, [r4, #8]
 8003f3a:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <cleanup_stdio+0x38>)
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	d002      	beq.n	8003f46 <cleanup_stdio+0x1e>
 8003f40:	4620      	mov	r0, r4
 8003f42:	f002 fdb3 	bl	8006aac <_fflush_r>
 8003f46:	68e1      	ldr	r1, [r4, #12]
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <cleanup_stdio+0x3c>)
 8003f4a:	4299      	cmp	r1, r3
 8003f4c:	d004      	beq.n	8003f58 <cleanup_stdio+0x30>
 8003f4e:	4620      	mov	r0, r4
 8003f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f54:	f002 bdaa 	b.w	8006aac <_fflush_r>
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200002d8 	.word	0x200002d8
 8003f60:	20000340 	.word	0x20000340
 8003f64:	200003a8 	.word	0x200003a8

08003f68 <global_stdio_init.part.0>:
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f98 <global_stdio_init.part.0+0x30>)
 8003f6c:	4c0b      	ldr	r4, [pc, #44]	@ (8003f9c <global_stdio_init.part.0+0x34>)
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa0 <global_stdio_init.part.0+0x38>)
 8003f70:	4620      	mov	r0, r4
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	2104      	movs	r1, #4
 8003f76:	2200      	movs	r2, #0
 8003f78:	f7ff ff94 	bl	8003ea4 <std>
 8003f7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f80:	2201      	movs	r2, #1
 8003f82:	2109      	movs	r1, #9
 8003f84:	f7ff ff8e 	bl	8003ea4 <std>
 8003f88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f92:	2112      	movs	r1, #18
 8003f94:	f7ff bf86 	b.w	8003ea4 <std>
 8003f98:	20000410 	.word	0x20000410
 8003f9c:	200002d8 	.word	0x200002d8
 8003fa0:	08003f11 	.word	0x08003f11

08003fa4 <__sfp_lock_acquire>:
 8003fa4:	4801      	ldr	r0, [pc, #4]	@ (8003fac <__sfp_lock_acquire+0x8>)
 8003fa6:	f000 b920 	b.w	80041ea <__retarget_lock_acquire_recursive>
 8003faa:	bf00      	nop
 8003fac:	20000419 	.word	0x20000419

08003fb0 <__sfp_lock_release>:
 8003fb0:	4801      	ldr	r0, [pc, #4]	@ (8003fb8 <__sfp_lock_release+0x8>)
 8003fb2:	f000 b91b 	b.w	80041ec <__retarget_lock_release_recursive>
 8003fb6:	bf00      	nop
 8003fb8:	20000419 	.word	0x20000419

08003fbc <__sinit>:
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	f7ff fff0 	bl	8003fa4 <__sfp_lock_acquire>
 8003fc4:	6a23      	ldr	r3, [r4, #32]
 8003fc6:	b11b      	cbz	r3, 8003fd0 <__sinit+0x14>
 8003fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fcc:	f7ff bff0 	b.w	8003fb0 <__sfp_lock_release>
 8003fd0:	4b04      	ldr	r3, [pc, #16]	@ (8003fe4 <__sinit+0x28>)
 8003fd2:	6223      	str	r3, [r4, #32]
 8003fd4:	4b04      	ldr	r3, [pc, #16]	@ (8003fe8 <__sinit+0x2c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f5      	bne.n	8003fc8 <__sinit+0xc>
 8003fdc:	f7ff ffc4 	bl	8003f68 <global_stdio_init.part.0>
 8003fe0:	e7f2      	b.n	8003fc8 <__sinit+0xc>
 8003fe2:	bf00      	nop
 8003fe4:	08003f29 	.word	0x08003f29
 8003fe8:	20000410 	.word	0x20000410

08003fec <_fwalk_sglue>:
 8003fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	4688      	mov	r8, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ffc:	f1b9 0901 	subs.w	r9, r9, #1
 8004000:	d505      	bpl.n	800400e <_fwalk_sglue+0x22>
 8004002:	6824      	ldr	r4, [r4, #0]
 8004004:	2c00      	cmp	r4, #0
 8004006:	d1f7      	bne.n	8003ff8 <_fwalk_sglue+0xc>
 8004008:	4630      	mov	r0, r6
 800400a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800400e:	89ab      	ldrh	r3, [r5, #12]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d907      	bls.n	8004024 <_fwalk_sglue+0x38>
 8004014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004018:	3301      	adds	r3, #1
 800401a:	d003      	beq.n	8004024 <_fwalk_sglue+0x38>
 800401c:	4629      	mov	r1, r5
 800401e:	4638      	mov	r0, r7
 8004020:	47c0      	blx	r8
 8004022:	4306      	orrs	r6, r0
 8004024:	3568      	adds	r5, #104	@ 0x68
 8004026:	e7e9      	b.n	8003ffc <_fwalk_sglue+0x10>

08004028 <siprintf>:
 8004028:	b40e      	push	{r1, r2, r3}
 800402a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800402e:	b500      	push	{lr}
 8004030:	b09c      	sub	sp, #112	@ 0x70
 8004032:	ab1d      	add	r3, sp, #116	@ 0x74
 8004034:	9002      	str	r0, [sp, #8]
 8004036:	9006      	str	r0, [sp, #24]
 8004038:	9107      	str	r1, [sp, #28]
 800403a:	9104      	str	r1, [sp, #16]
 800403c:	4808      	ldr	r0, [pc, #32]	@ (8004060 <siprintf+0x38>)
 800403e:	4909      	ldr	r1, [pc, #36]	@ (8004064 <siprintf+0x3c>)
 8004040:	f853 2b04 	ldr.w	r2, [r3], #4
 8004044:	9105      	str	r1, [sp, #20]
 8004046:	6800      	ldr	r0, [r0, #0]
 8004048:	a902      	add	r1, sp, #8
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	f002 fbb2 	bl	80067b4 <_svfiprintf_r>
 8004050:	2200      	movs	r2, #0
 8004052:	9b02      	ldr	r3, [sp, #8]
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	b01c      	add	sp, #112	@ 0x70
 8004058:	f85d eb04 	ldr.w	lr, [sp], #4
 800405c:	b003      	add	sp, #12
 800405e:	4770      	bx	lr
 8004060:	20000018 	.word	0x20000018
 8004064:	ffff0208 	.word	0xffff0208

08004068 <__sread>:
 8004068:	b510      	push	{r4, lr}
 800406a:	460c      	mov	r4, r1
 800406c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004070:	f000 f86c 	bl	800414c <_read_r>
 8004074:	2800      	cmp	r0, #0
 8004076:	bfab      	itete	ge
 8004078:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800407a:	89a3      	ldrhlt	r3, [r4, #12]
 800407c:	181b      	addge	r3, r3, r0
 800407e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004082:	bfac      	ite	ge
 8004084:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004086:	81a3      	strhlt	r3, [r4, #12]
 8004088:	bd10      	pop	{r4, pc}

0800408a <__swrite>:
 800408a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800408e:	461f      	mov	r7, r3
 8004090:	898b      	ldrh	r3, [r1, #12]
 8004092:	4605      	mov	r5, r0
 8004094:	05db      	lsls	r3, r3, #23
 8004096:	460c      	mov	r4, r1
 8004098:	4616      	mov	r6, r2
 800409a:	d505      	bpl.n	80040a8 <__swrite+0x1e>
 800409c:	2302      	movs	r3, #2
 800409e:	2200      	movs	r2, #0
 80040a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a4:	f000 f840 	bl	8004128 <_lseek_r>
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	4632      	mov	r2, r6
 80040ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	4628      	mov	r0, r5
 80040b4:	463b      	mov	r3, r7
 80040b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040be:	f000 b857 	b.w	8004170 <_write_r>

080040c2 <__sseek>:
 80040c2:	b510      	push	{r4, lr}
 80040c4:	460c      	mov	r4, r1
 80040c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ca:	f000 f82d 	bl	8004128 <_lseek_r>
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	bf15      	itete	ne
 80040d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040de:	81a3      	strheq	r3, [r4, #12]
 80040e0:	bf18      	it	ne
 80040e2:	81a3      	strhne	r3, [r4, #12]
 80040e4:	bd10      	pop	{r4, pc}

080040e6 <__sclose>:
 80040e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ea:	f000 b80d 	b.w	8004108 <_close_r>

080040ee <memset>:
 80040ee:	4603      	mov	r3, r0
 80040f0:	4402      	add	r2, r0
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d100      	bne.n	80040f8 <memset+0xa>
 80040f6:	4770      	bx	lr
 80040f8:	f803 1b01 	strb.w	r1, [r3], #1
 80040fc:	e7f9      	b.n	80040f2 <memset+0x4>
	...

08004100 <_localeconv_r>:
 8004100:	4800      	ldr	r0, [pc, #0]	@ (8004104 <_localeconv_r+0x4>)
 8004102:	4770      	bx	lr
 8004104:	20000158 	.word	0x20000158

08004108 <_close_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	2300      	movs	r3, #0
 800410c:	4d05      	ldr	r5, [pc, #20]	@ (8004124 <_close_r+0x1c>)
 800410e:	4604      	mov	r4, r0
 8004110:	4608      	mov	r0, r1
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	f7fd fc11 	bl	800193a <_close>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_close_r+0x1a>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_close_r+0x1a>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	20000414 	.word	0x20000414

08004128 <_lseek_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	2200      	movs	r2, #0
 8004132:	4d05      	ldr	r5, [pc, #20]	@ (8004148 <_lseek_r+0x20>)
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fd fc23 	bl	8001982 <_lseek>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d102      	bne.n	8004146 <_lseek_r+0x1e>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	b103      	cbz	r3, 8004146 <_lseek_r+0x1e>
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	20000414 	.word	0x20000414

0800414c <_read_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4604      	mov	r4, r0
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	2200      	movs	r2, #0
 8004156:	4d05      	ldr	r5, [pc, #20]	@ (800416c <_read_r+0x20>)
 8004158:	602a      	str	r2, [r5, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	f7fd fbb4 	bl	80018c8 <_read>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	d102      	bne.n	800416a <_read_r+0x1e>
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	b103      	cbz	r3, 800416a <_read_r+0x1e>
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	bd38      	pop	{r3, r4, r5, pc}
 800416c:	20000414 	.word	0x20000414

08004170 <_write_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	4611      	mov	r1, r2
 8004178:	2200      	movs	r2, #0
 800417a:	4d05      	ldr	r5, [pc, #20]	@ (8004190 <_write_r+0x20>)
 800417c:	602a      	str	r2, [r5, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	f7fd fbbf 	bl	8001902 <_write>
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	d102      	bne.n	800418e <_write_r+0x1e>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	b103      	cbz	r3, 800418e <_write_r+0x1e>
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	bd38      	pop	{r3, r4, r5, pc}
 8004190:	20000414 	.word	0x20000414

08004194 <__errno>:
 8004194:	4b01      	ldr	r3, [pc, #4]	@ (800419c <__errno+0x8>)
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000018 	.word	0x20000018

080041a0 <__libc_init_array>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	2600      	movs	r6, #0
 80041a4:	4d0c      	ldr	r5, [pc, #48]	@ (80041d8 <__libc_init_array+0x38>)
 80041a6:	4c0d      	ldr	r4, [pc, #52]	@ (80041dc <__libc_init_array+0x3c>)
 80041a8:	1b64      	subs	r4, r4, r5
 80041aa:	10a4      	asrs	r4, r4, #2
 80041ac:	42a6      	cmp	r6, r4
 80041ae:	d109      	bne.n	80041c4 <__libc_init_array+0x24>
 80041b0:	f003 fb68 	bl	8007884 <_init>
 80041b4:	2600      	movs	r6, #0
 80041b6:	4d0a      	ldr	r5, [pc, #40]	@ (80041e0 <__libc_init_array+0x40>)
 80041b8:	4c0a      	ldr	r4, [pc, #40]	@ (80041e4 <__libc_init_array+0x44>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	42a6      	cmp	r6, r4
 80041c0:	d105      	bne.n	80041ce <__libc_init_array+0x2e>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c8:	4798      	blx	r3
 80041ca:	3601      	adds	r6, #1
 80041cc:	e7ee      	b.n	80041ac <__libc_init_array+0xc>
 80041ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d2:	4798      	blx	r3
 80041d4:	3601      	adds	r6, #1
 80041d6:	e7f2      	b.n	80041be <__libc_init_array+0x1e>
 80041d8:	08007d58 	.word	0x08007d58
 80041dc:	08007d58 	.word	0x08007d58
 80041e0:	08007d58 	.word	0x08007d58
 80041e4:	08007d5c 	.word	0x08007d5c

080041e8 <__retarget_lock_init_recursive>:
 80041e8:	4770      	bx	lr

080041ea <__retarget_lock_acquire_recursive>:
 80041ea:	4770      	bx	lr

080041ec <__retarget_lock_release_recursive>:
 80041ec:	4770      	bx	lr

080041ee <memchr>:
 80041ee:	4603      	mov	r3, r0
 80041f0:	b510      	push	{r4, lr}
 80041f2:	b2c9      	uxtb	r1, r1
 80041f4:	4402      	add	r2, r0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	d101      	bne.n	8004200 <memchr+0x12>
 80041fc:	2000      	movs	r0, #0
 80041fe:	e003      	b.n	8004208 <memchr+0x1a>
 8004200:	7804      	ldrb	r4, [r0, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	428c      	cmp	r4, r1
 8004206:	d1f6      	bne.n	80041f6 <memchr+0x8>
 8004208:	bd10      	pop	{r4, pc}
	...

0800420c <nanf>:
 800420c:	4800      	ldr	r0, [pc, #0]	@ (8004210 <nanf+0x4>)
 800420e:	4770      	bx	lr
 8004210:	7fc00000 	.word	0x7fc00000

08004214 <quorem>:
 8004214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	6903      	ldr	r3, [r0, #16]
 800421a:	690c      	ldr	r4, [r1, #16]
 800421c:	4607      	mov	r7, r0
 800421e:	42a3      	cmp	r3, r4
 8004220:	db7e      	blt.n	8004320 <quorem+0x10c>
 8004222:	3c01      	subs	r4, #1
 8004224:	00a3      	lsls	r3, r4, #2
 8004226:	f100 0514 	add.w	r5, r0, #20
 800422a:	f101 0814 	add.w	r8, r1, #20
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800423a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800423e:	3301      	adds	r3, #1
 8004240:	429a      	cmp	r2, r3
 8004242:	fbb2 f6f3 	udiv	r6, r2, r3
 8004246:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800424a:	d32e      	bcc.n	80042aa <quorem+0x96>
 800424c:	f04f 0a00 	mov.w	sl, #0
 8004250:	46c4      	mov	ip, r8
 8004252:	46ae      	mov	lr, r5
 8004254:	46d3      	mov	fp, sl
 8004256:	f85c 3b04 	ldr.w	r3, [ip], #4
 800425a:	b298      	uxth	r0, r3
 800425c:	fb06 a000 	mla	r0, r6, r0, sl
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	0c02      	lsrs	r2, r0, #16
 8004264:	fb06 2303 	mla	r3, r6, r3, r2
 8004268:	f8de 2000 	ldr.w	r2, [lr]
 800426c:	b280      	uxth	r0, r0
 800426e:	b292      	uxth	r2, r2
 8004270:	1a12      	subs	r2, r2, r0
 8004272:	445a      	add	r2, fp
 8004274:	f8de 0000 	ldr.w	r0, [lr]
 8004278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800427c:	b29b      	uxth	r3, r3
 800427e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004282:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004286:	b292      	uxth	r2, r2
 8004288:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800428c:	45e1      	cmp	r9, ip
 800428e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004292:	f84e 2b04 	str.w	r2, [lr], #4
 8004296:	d2de      	bcs.n	8004256 <quorem+0x42>
 8004298:	9b00      	ldr	r3, [sp, #0]
 800429a:	58eb      	ldr	r3, [r5, r3]
 800429c:	b92b      	cbnz	r3, 80042aa <quorem+0x96>
 800429e:	9b01      	ldr	r3, [sp, #4]
 80042a0:	3b04      	subs	r3, #4
 80042a2:	429d      	cmp	r5, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	d32f      	bcc.n	8004308 <quorem+0xf4>
 80042a8:	613c      	str	r4, [r7, #16]
 80042aa:	4638      	mov	r0, r7
 80042ac:	f001 f9c4 	bl	8005638 <__mcmp>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	db25      	blt.n	8004300 <quorem+0xec>
 80042b4:	4629      	mov	r1, r5
 80042b6:	2000      	movs	r0, #0
 80042b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80042bc:	f8d1 c000 	ldr.w	ip, [r1]
 80042c0:	fa1f fe82 	uxth.w	lr, r2
 80042c4:	fa1f f38c 	uxth.w	r3, ip
 80042c8:	eba3 030e 	sub.w	r3, r3, lr
 80042cc:	4403      	add	r3, r0
 80042ce:	0c12      	lsrs	r2, r2, #16
 80042d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80042d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80042d8:	b29b      	uxth	r3, r3
 80042da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042de:	45c1      	cmp	r9, r8
 80042e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80042e4:	f841 3b04 	str.w	r3, [r1], #4
 80042e8:	d2e6      	bcs.n	80042b8 <quorem+0xa4>
 80042ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042f2:	b922      	cbnz	r2, 80042fe <quorem+0xea>
 80042f4:	3b04      	subs	r3, #4
 80042f6:	429d      	cmp	r5, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	d30b      	bcc.n	8004314 <quorem+0x100>
 80042fc:	613c      	str	r4, [r7, #16]
 80042fe:	3601      	adds	r6, #1
 8004300:	4630      	mov	r0, r6
 8004302:	b003      	add	sp, #12
 8004304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	3b04      	subs	r3, #4
 800430c:	2a00      	cmp	r2, #0
 800430e:	d1cb      	bne.n	80042a8 <quorem+0x94>
 8004310:	3c01      	subs	r4, #1
 8004312:	e7c6      	b.n	80042a2 <quorem+0x8e>
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	3b04      	subs	r3, #4
 8004318:	2a00      	cmp	r2, #0
 800431a:	d1ef      	bne.n	80042fc <quorem+0xe8>
 800431c:	3c01      	subs	r4, #1
 800431e:	e7ea      	b.n	80042f6 <quorem+0xe2>
 8004320:	2000      	movs	r0, #0
 8004322:	e7ee      	b.n	8004302 <quorem+0xee>
 8004324:	0000      	movs	r0, r0
	...

08004328 <_dtoa_r>:
 8004328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432c:	4614      	mov	r4, r2
 800432e:	461d      	mov	r5, r3
 8004330:	69c7      	ldr	r7, [r0, #28]
 8004332:	b097      	sub	sp, #92	@ 0x5c
 8004334:	4683      	mov	fp, r0
 8004336:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800433a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800433c:	b97f      	cbnz	r7, 800435e <_dtoa_r+0x36>
 800433e:	2010      	movs	r0, #16
 8004340:	f000 fe02 	bl	8004f48 <malloc>
 8004344:	4602      	mov	r2, r0
 8004346:	f8cb 001c 	str.w	r0, [fp, #28]
 800434a:	b920      	cbnz	r0, 8004356 <_dtoa_r+0x2e>
 800434c:	21ef      	movs	r1, #239	@ 0xef
 800434e:	4ba8      	ldr	r3, [pc, #672]	@ (80045f0 <_dtoa_r+0x2c8>)
 8004350:	48a8      	ldr	r0, [pc, #672]	@ (80045f4 <_dtoa_r+0x2cc>)
 8004352:	f002 fc23 	bl	8006b9c <__assert_func>
 8004356:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800435a:	6007      	str	r7, [r0, #0]
 800435c:	60c7      	str	r7, [r0, #12]
 800435e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004362:	6819      	ldr	r1, [r3, #0]
 8004364:	b159      	cbz	r1, 800437e <_dtoa_r+0x56>
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	2301      	movs	r3, #1
 800436a:	4093      	lsls	r3, r2
 800436c:	604a      	str	r2, [r1, #4]
 800436e:	608b      	str	r3, [r1, #8]
 8004370:	4658      	mov	r0, fp
 8004372:	f000 fedf 	bl	8005134 <_Bfree>
 8004376:	2200      	movs	r2, #0
 8004378:	f8db 301c 	ldr.w	r3, [fp, #28]
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	1e2b      	subs	r3, r5, #0
 8004380:	bfaf      	iteee	ge
 8004382:	2300      	movge	r3, #0
 8004384:	2201      	movlt	r2, #1
 8004386:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800438a:	9303      	strlt	r3, [sp, #12]
 800438c:	bfa8      	it	ge
 800438e:	6033      	strge	r3, [r6, #0]
 8004390:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004394:	4b98      	ldr	r3, [pc, #608]	@ (80045f8 <_dtoa_r+0x2d0>)
 8004396:	bfb8      	it	lt
 8004398:	6032      	strlt	r2, [r6, #0]
 800439a:	ea33 0308 	bics.w	r3, r3, r8
 800439e:	d112      	bne.n	80043c6 <_dtoa_r+0x9e>
 80043a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80043a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80043ac:	4323      	orrs	r3, r4
 80043ae:	f000 8550 	beq.w	8004e52 <_dtoa_r+0xb2a>
 80043b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80043b4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80045fc <_dtoa_r+0x2d4>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8552 	beq.w	8004e62 <_dtoa_r+0xb3a>
 80043be:	f10a 0303 	add.w	r3, sl, #3
 80043c2:	f000 bd4c 	b.w	8004e5e <_dtoa_r+0xb36>
 80043c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80043ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043d2:	2200      	movs	r2, #0
 80043d4:	2300      	movs	r3, #0
 80043d6:	f7fc fae7 	bl	80009a8 <__aeabi_dcmpeq>
 80043da:	4607      	mov	r7, r0
 80043dc:	b158      	cbz	r0, 80043f6 <_dtoa_r+0xce>
 80043de:	2301      	movs	r3, #1
 80043e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80043e6:	b113      	cbz	r3, 80043ee <_dtoa_r+0xc6>
 80043e8:	4b85      	ldr	r3, [pc, #532]	@ (8004600 <_dtoa_r+0x2d8>)
 80043ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004604 <_dtoa_r+0x2dc>
 80043f2:	f000 bd36 	b.w	8004e62 <_dtoa_r+0xb3a>
 80043f6:	ab14      	add	r3, sp, #80	@ 0x50
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	ab15      	add	r3, sp, #84	@ 0x54
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	4658      	mov	r0, fp
 8004400:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004404:	f001 fa30 	bl	8005868 <__d2b>
 8004408:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800440c:	4681      	mov	r9, r0
 800440e:	2e00      	cmp	r6, #0
 8004410:	d077      	beq.n	8004502 <_dtoa_r+0x1da>
 8004412:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004418:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800441c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004420:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004424:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004428:	9712      	str	r7, [sp, #72]	@ 0x48
 800442a:	4619      	mov	r1, r3
 800442c:	2200      	movs	r2, #0
 800442e:	4b76      	ldr	r3, [pc, #472]	@ (8004608 <_dtoa_r+0x2e0>)
 8004430:	f7fb fe9a 	bl	8000168 <__aeabi_dsub>
 8004434:	a368      	add	r3, pc, #416	@ (adr r3, 80045d8 <_dtoa_r+0x2b0>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fc f84d 	bl	80004d8 <__aeabi_dmul>
 800443e:	a368      	add	r3, pc, #416	@ (adr r3, 80045e0 <_dtoa_r+0x2b8>)
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f7fb fe92 	bl	800016c <__adddf3>
 8004448:	4604      	mov	r4, r0
 800444a:	4630      	mov	r0, r6
 800444c:	460d      	mov	r5, r1
 800444e:	f7fb ffd9 	bl	8000404 <__aeabi_i2d>
 8004452:	a365      	add	r3, pc, #404	@ (adr r3, 80045e8 <_dtoa_r+0x2c0>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f7fc f83e 	bl	80004d8 <__aeabi_dmul>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4620      	mov	r0, r4
 8004462:	4629      	mov	r1, r5
 8004464:	f7fb fe82 	bl	800016c <__adddf3>
 8004468:	4604      	mov	r4, r0
 800446a:	460d      	mov	r5, r1
 800446c:	f7fc fae4 	bl	8000a38 <__aeabi_d2iz>
 8004470:	2200      	movs	r2, #0
 8004472:	4607      	mov	r7, r0
 8004474:	2300      	movs	r3, #0
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f7fc fa9f 	bl	80009bc <__aeabi_dcmplt>
 800447e:	b140      	cbz	r0, 8004492 <_dtoa_r+0x16a>
 8004480:	4638      	mov	r0, r7
 8004482:	f7fb ffbf 	bl	8000404 <__aeabi_i2d>
 8004486:	4622      	mov	r2, r4
 8004488:	462b      	mov	r3, r5
 800448a:	f7fc fa8d 	bl	80009a8 <__aeabi_dcmpeq>
 800448e:	b900      	cbnz	r0, 8004492 <_dtoa_r+0x16a>
 8004490:	3f01      	subs	r7, #1
 8004492:	2f16      	cmp	r7, #22
 8004494:	d853      	bhi.n	800453e <_dtoa_r+0x216>
 8004496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800449a:	4b5c      	ldr	r3, [pc, #368]	@ (800460c <_dtoa_r+0x2e4>)
 800449c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fc fa8a 	bl	80009bc <__aeabi_dcmplt>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d04a      	beq.n	8004542 <_dtoa_r+0x21a>
 80044ac:	2300      	movs	r3, #0
 80044ae:	3f01      	subs	r7, #1
 80044b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80044b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80044b4:	1b9b      	subs	r3, r3, r6
 80044b6:	1e5a      	subs	r2, r3, #1
 80044b8:	bf46      	itte	mi
 80044ba:	f1c3 0801 	rsbmi	r8, r3, #1
 80044be:	2300      	movmi	r3, #0
 80044c0:	f04f 0800 	movpl.w	r8, #0
 80044c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80044c6:	bf48      	it	mi
 80044c8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80044ca:	2f00      	cmp	r7, #0
 80044cc:	db3b      	blt.n	8004546 <_dtoa_r+0x21e>
 80044ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d0:	970e      	str	r7, [sp, #56]	@ 0x38
 80044d2:	443b      	add	r3, r7
 80044d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044d6:	2300      	movs	r3, #0
 80044d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80044da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044dc:	2b09      	cmp	r3, #9
 80044de:	d866      	bhi.n	80045ae <_dtoa_r+0x286>
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	bfc4      	itt	gt
 80044e4:	3b04      	subgt	r3, #4
 80044e6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80044e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044ea:	bfc8      	it	gt
 80044ec:	2400      	movgt	r4, #0
 80044ee:	f1a3 0302 	sub.w	r3, r3, #2
 80044f2:	bfd8      	it	le
 80044f4:	2401      	movle	r4, #1
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d864      	bhi.n	80045c4 <_dtoa_r+0x29c>
 80044fa:	e8df f003 	tbb	[pc, r3]
 80044fe:	382b      	.short	0x382b
 8004500:	5636      	.short	0x5636
 8004502:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004506:	441e      	add	r6, r3
 8004508:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800450c:	2b20      	cmp	r3, #32
 800450e:	bfc1      	itttt	gt
 8004510:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004514:	fa08 f803 	lslgt.w	r8, r8, r3
 8004518:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800451c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004520:	bfd6      	itet	le
 8004522:	f1c3 0320 	rsble	r3, r3, #32
 8004526:	ea48 0003 	orrgt.w	r0, r8, r3
 800452a:	fa04 f003 	lslle.w	r0, r4, r3
 800452e:	f7fb ff59 	bl	80003e4 <__aeabi_ui2d>
 8004532:	2201      	movs	r2, #1
 8004534:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004538:	3e01      	subs	r6, #1
 800453a:	9212      	str	r2, [sp, #72]	@ 0x48
 800453c:	e775      	b.n	800442a <_dtoa_r+0x102>
 800453e:	2301      	movs	r3, #1
 8004540:	e7b6      	b.n	80044b0 <_dtoa_r+0x188>
 8004542:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004544:	e7b5      	b.n	80044b2 <_dtoa_r+0x18a>
 8004546:	427b      	negs	r3, r7
 8004548:	930a      	str	r3, [sp, #40]	@ 0x28
 800454a:	2300      	movs	r3, #0
 800454c:	eba8 0807 	sub.w	r8, r8, r7
 8004550:	930e      	str	r3, [sp, #56]	@ 0x38
 8004552:	e7c2      	b.n	80044da <_dtoa_r+0x1b2>
 8004554:	2300      	movs	r3, #0
 8004556:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004558:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800455a:	2b00      	cmp	r3, #0
 800455c:	dc35      	bgt.n	80045ca <_dtoa_r+0x2a2>
 800455e:	2301      	movs	r3, #1
 8004560:	461a      	mov	r2, r3
 8004562:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004566:	9221      	str	r2, [sp, #132]	@ 0x84
 8004568:	e00b      	b.n	8004582 <_dtoa_r+0x25a>
 800456a:	2301      	movs	r3, #1
 800456c:	e7f3      	b.n	8004556 <_dtoa_r+0x22e>
 800456e:	2300      	movs	r3, #0
 8004570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004572:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	9308      	str	r3, [sp, #32]
 8004578:	3301      	adds	r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	9307      	str	r3, [sp, #28]
 800457e:	bfb8      	it	lt
 8004580:	2301      	movlt	r3, #1
 8004582:	2100      	movs	r1, #0
 8004584:	2204      	movs	r2, #4
 8004586:	f8db 001c 	ldr.w	r0, [fp, #28]
 800458a:	f102 0514 	add.w	r5, r2, #20
 800458e:	429d      	cmp	r5, r3
 8004590:	d91f      	bls.n	80045d2 <_dtoa_r+0x2aa>
 8004592:	6041      	str	r1, [r0, #4]
 8004594:	4658      	mov	r0, fp
 8004596:	f000 fd8d 	bl	80050b4 <_Balloc>
 800459a:	4682      	mov	sl, r0
 800459c:	2800      	cmp	r0, #0
 800459e:	d139      	bne.n	8004614 <_dtoa_r+0x2ec>
 80045a0:	4602      	mov	r2, r0
 80045a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80045a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <_dtoa_r+0x2e8>)
 80045a8:	e6d2      	b.n	8004350 <_dtoa_r+0x28>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e7e0      	b.n	8004570 <_dtoa_r+0x248>
 80045ae:	2401      	movs	r4, #1
 80045b0:	2300      	movs	r3, #0
 80045b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80045b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	2200      	movs	r2, #0
 80045bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045c0:	2312      	movs	r3, #18
 80045c2:	e7d0      	b.n	8004566 <_dtoa_r+0x23e>
 80045c4:	2301      	movs	r3, #1
 80045c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045c8:	e7f5      	b.n	80045b6 <_dtoa_r+0x28e>
 80045ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80045d0:	e7d7      	b.n	8004582 <_dtoa_r+0x25a>
 80045d2:	3101      	adds	r1, #1
 80045d4:	0052      	lsls	r2, r2, #1
 80045d6:	e7d8      	b.n	800458a <_dtoa_r+0x262>
 80045d8:	636f4361 	.word	0x636f4361
 80045dc:	3fd287a7 	.word	0x3fd287a7
 80045e0:	8b60c8b3 	.word	0x8b60c8b3
 80045e4:	3fc68a28 	.word	0x3fc68a28
 80045e8:	509f79fb 	.word	0x509f79fb
 80045ec:	3fd34413 	.word	0x3fd34413
 80045f0:	08007968 	.word	0x08007968
 80045f4:	0800797f 	.word	0x0800797f
 80045f8:	7ff00000 	.word	0x7ff00000
 80045fc:	08007964 	.word	0x08007964
 8004600:	08007933 	.word	0x08007933
 8004604:	08007932 	.word	0x08007932
 8004608:	3ff80000 	.word	0x3ff80000
 800460c:	08007a78 	.word	0x08007a78
 8004610:	080079d7 	.word	0x080079d7
 8004614:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004618:	6018      	str	r0, [r3, #0]
 800461a:	9b07      	ldr	r3, [sp, #28]
 800461c:	2b0e      	cmp	r3, #14
 800461e:	f200 80a4 	bhi.w	800476a <_dtoa_r+0x442>
 8004622:	2c00      	cmp	r4, #0
 8004624:	f000 80a1 	beq.w	800476a <_dtoa_r+0x442>
 8004628:	2f00      	cmp	r7, #0
 800462a:	dd33      	ble.n	8004694 <_dtoa_r+0x36c>
 800462c:	4b86      	ldr	r3, [pc, #536]	@ (8004848 <_dtoa_r+0x520>)
 800462e:	f007 020f 	and.w	r2, r7, #15
 8004632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004636:	05f8      	lsls	r0, r7, #23
 8004638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800463c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004640:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004644:	d516      	bpl.n	8004674 <_dtoa_r+0x34c>
 8004646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800464a:	4b80      	ldr	r3, [pc, #512]	@ (800484c <_dtoa_r+0x524>)
 800464c:	2603      	movs	r6, #3
 800464e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004652:	f7fc f86b 	bl	800072c <__aeabi_ddiv>
 8004656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800465a:	f004 040f 	and.w	r4, r4, #15
 800465e:	4d7b      	ldr	r5, [pc, #492]	@ (800484c <_dtoa_r+0x524>)
 8004660:	b954      	cbnz	r4, 8004678 <_dtoa_r+0x350>
 8004662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800466a:	f7fc f85f 	bl	800072c <__aeabi_ddiv>
 800466e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004672:	e028      	b.n	80046c6 <_dtoa_r+0x39e>
 8004674:	2602      	movs	r6, #2
 8004676:	e7f2      	b.n	800465e <_dtoa_r+0x336>
 8004678:	07e1      	lsls	r1, r4, #31
 800467a:	d508      	bpl.n	800468e <_dtoa_r+0x366>
 800467c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004680:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004684:	f7fb ff28 	bl	80004d8 <__aeabi_dmul>
 8004688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800468c:	3601      	adds	r6, #1
 800468e:	1064      	asrs	r4, r4, #1
 8004690:	3508      	adds	r5, #8
 8004692:	e7e5      	b.n	8004660 <_dtoa_r+0x338>
 8004694:	f000 80d2 	beq.w	800483c <_dtoa_r+0x514>
 8004698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800469c:	427c      	negs	r4, r7
 800469e:	4b6a      	ldr	r3, [pc, #424]	@ (8004848 <_dtoa_r+0x520>)
 80046a0:	f004 020f 	and.w	r2, r4, #15
 80046a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb ff14 	bl	80004d8 <__aeabi_dmul>
 80046b0:	2602      	movs	r6, #2
 80046b2:	2300      	movs	r3, #0
 80046b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046b8:	4d64      	ldr	r5, [pc, #400]	@ (800484c <_dtoa_r+0x524>)
 80046ba:	1124      	asrs	r4, r4, #4
 80046bc:	2c00      	cmp	r4, #0
 80046be:	f040 80b2 	bne.w	8004826 <_dtoa_r+0x4fe>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1d3      	bne.n	800466e <_dtoa_r+0x346>
 80046c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80046ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80b7 	beq.w	8004840 <_dtoa_r+0x518>
 80046d2:	2200      	movs	r2, #0
 80046d4:	4620      	mov	r0, r4
 80046d6:	4629      	mov	r1, r5
 80046d8:	4b5d      	ldr	r3, [pc, #372]	@ (8004850 <_dtoa_r+0x528>)
 80046da:	f7fc f96f 	bl	80009bc <__aeabi_dcmplt>
 80046de:	2800      	cmp	r0, #0
 80046e0:	f000 80ae 	beq.w	8004840 <_dtoa_r+0x518>
 80046e4:	9b07      	ldr	r3, [sp, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80aa 	beq.w	8004840 <_dtoa_r+0x518>
 80046ec:	9b08      	ldr	r3, [sp, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dd37      	ble.n	8004762 <_dtoa_r+0x43a>
 80046f2:	1e7b      	subs	r3, r7, #1
 80046f4:	4620      	mov	r0, r4
 80046f6:	9304      	str	r3, [sp, #16]
 80046f8:	2200      	movs	r2, #0
 80046fa:	4629      	mov	r1, r5
 80046fc:	4b55      	ldr	r3, [pc, #340]	@ (8004854 <_dtoa_r+0x52c>)
 80046fe:	f7fb feeb 	bl	80004d8 <__aeabi_dmul>
 8004702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004706:	9c08      	ldr	r4, [sp, #32]
 8004708:	3601      	adds	r6, #1
 800470a:	4630      	mov	r0, r6
 800470c:	f7fb fe7a 	bl	8000404 <__aeabi_i2d>
 8004710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004714:	f7fb fee0 	bl	80004d8 <__aeabi_dmul>
 8004718:	2200      	movs	r2, #0
 800471a:	4b4f      	ldr	r3, [pc, #316]	@ (8004858 <_dtoa_r+0x530>)
 800471c:	f7fb fd26 	bl	800016c <__adddf3>
 8004720:	4605      	mov	r5, r0
 8004722:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004726:	2c00      	cmp	r4, #0
 8004728:	f040 809a 	bne.w	8004860 <_dtoa_r+0x538>
 800472c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004730:	2200      	movs	r2, #0
 8004732:	4b4a      	ldr	r3, [pc, #296]	@ (800485c <_dtoa_r+0x534>)
 8004734:	f7fb fd18 	bl	8000168 <__aeabi_dsub>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004740:	462a      	mov	r2, r5
 8004742:	4633      	mov	r3, r6
 8004744:	f7fc f958 	bl	80009f8 <__aeabi_dcmpgt>
 8004748:	2800      	cmp	r0, #0
 800474a:	f040 828e 	bne.w	8004c6a <_dtoa_r+0x942>
 800474e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004752:	462a      	mov	r2, r5
 8004754:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004758:	f7fc f930 	bl	80009bc <__aeabi_dcmplt>
 800475c:	2800      	cmp	r0, #0
 800475e:	f040 8127 	bne.w	80049b0 <_dtoa_r+0x688>
 8004762:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004766:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800476a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800476c:	2b00      	cmp	r3, #0
 800476e:	f2c0 8163 	blt.w	8004a38 <_dtoa_r+0x710>
 8004772:	2f0e      	cmp	r7, #14
 8004774:	f300 8160 	bgt.w	8004a38 <_dtoa_r+0x710>
 8004778:	4b33      	ldr	r3, [pc, #204]	@ (8004848 <_dtoa_r+0x520>)
 800477a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800477e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004782:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004786:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004788:	2b00      	cmp	r3, #0
 800478a:	da03      	bge.n	8004794 <_dtoa_r+0x46c>
 800478c:	9b07      	ldr	r3, [sp, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f340 8100 	ble.w	8004994 <_dtoa_r+0x66c>
 8004794:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004798:	4656      	mov	r6, sl
 800479a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800479e:	4620      	mov	r0, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fb ffc3 	bl	800072c <__aeabi_ddiv>
 80047a6:	f7fc f947 	bl	8000a38 <__aeabi_d2iz>
 80047aa:	4680      	mov	r8, r0
 80047ac:	f7fb fe2a 	bl	8000404 <__aeabi_i2d>
 80047b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b4:	f7fb fe90 	bl	80004d8 <__aeabi_dmul>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4620      	mov	r0, r4
 80047be:	4629      	mov	r1, r5
 80047c0:	f7fb fcd2 	bl	8000168 <__aeabi_dsub>
 80047c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80047c8:	9d07      	ldr	r5, [sp, #28]
 80047ca:	f806 4b01 	strb.w	r4, [r6], #1
 80047ce:	eba6 040a 	sub.w	r4, r6, sl
 80047d2:	42a5      	cmp	r5, r4
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	f040 8116 	bne.w	8004a08 <_dtoa_r+0x6e0>
 80047dc:	f7fb fcc6 	bl	800016c <__adddf3>
 80047e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e4:	4604      	mov	r4, r0
 80047e6:	460d      	mov	r5, r1
 80047e8:	f7fc f906 	bl	80009f8 <__aeabi_dcmpgt>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	f040 80f8 	bne.w	80049e2 <_dtoa_r+0x6ba>
 80047f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f6:	4620      	mov	r0, r4
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fc f8d5 	bl	80009a8 <__aeabi_dcmpeq>
 80047fe:	b118      	cbz	r0, 8004808 <_dtoa_r+0x4e0>
 8004800:	f018 0f01 	tst.w	r8, #1
 8004804:	f040 80ed 	bne.w	80049e2 <_dtoa_r+0x6ba>
 8004808:	4649      	mov	r1, r9
 800480a:	4658      	mov	r0, fp
 800480c:	f000 fc92 	bl	8005134 <_Bfree>
 8004810:	2300      	movs	r3, #0
 8004812:	7033      	strb	r3, [r6, #0]
 8004814:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004816:	3701      	adds	r7, #1
 8004818:	601f      	str	r7, [r3, #0]
 800481a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8320 	beq.w	8004e62 <_dtoa_r+0xb3a>
 8004822:	601e      	str	r6, [r3, #0]
 8004824:	e31d      	b.n	8004e62 <_dtoa_r+0xb3a>
 8004826:	07e2      	lsls	r2, r4, #31
 8004828:	d505      	bpl.n	8004836 <_dtoa_r+0x50e>
 800482a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800482e:	f7fb fe53 	bl	80004d8 <__aeabi_dmul>
 8004832:	2301      	movs	r3, #1
 8004834:	3601      	adds	r6, #1
 8004836:	1064      	asrs	r4, r4, #1
 8004838:	3508      	adds	r5, #8
 800483a:	e73f      	b.n	80046bc <_dtoa_r+0x394>
 800483c:	2602      	movs	r6, #2
 800483e:	e742      	b.n	80046c6 <_dtoa_r+0x39e>
 8004840:	9c07      	ldr	r4, [sp, #28]
 8004842:	9704      	str	r7, [sp, #16]
 8004844:	e761      	b.n	800470a <_dtoa_r+0x3e2>
 8004846:	bf00      	nop
 8004848:	08007a78 	.word	0x08007a78
 800484c:	08007a50 	.word	0x08007a50
 8004850:	3ff00000 	.word	0x3ff00000
 8004854:	40240000 	.word	0x40240000
 8004858:	401c0000 	.word	0x401c0000
 800485c:	40140000 	.word	0x40140000
 8004860:	4b70      	ldr	r3, [pc, #448]	@ (8004a24 <_dtoa_r+0x6fc>)
 8004862:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004868:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800486c:	4454      	add	r4, sl
 800486e:	2900      	cmp	r1, #0
 8004870:	d045      	beq.n	80048fe <_dtoa_r+0x5d6>
 8004872:	2000      	movs	r0, #0
 8004874:	496c      	ldr	r1, [pc, #432]	@ (8004a28 <_dtoa_r+0x700>)
 8004876:	f7fb ff59 	bl	800072c <__aeabi_ddiv>
 800487a:	4633      	mov	r3, r6
 800487c:	462a      	mov	r2, r5
 800487e:	f7fb fc73 	bl	8000168 <__aeabi_dsub>
 8004882:	4656      	mov	r6, sl
 8004884:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800488c:	f7fc f8d4 	bl	8000a38 <__aeabi_d2iz>
 8004890:	4605      	mov	r5, r0
 8004892:	f7fb fdb7 	bl	8000404 <__aeabi_i2d>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800489e:	f7fb fc63 	bl	8000168 <__aeabi_dsub>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	3530      	adds	r5, #48	@ 0x30
 80048a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048b0:	f806 5b01 	strb.w	r5, [r6], #1
 80048b4:	f7fc f882 	bl	80009bc <__aeabi_dcmplt>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d163      	bne.n	8004984 <_dtoa_r+0x65c>
 80048bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048c0:	2000      	movs	r0, #0
 80048c2:	495a      	ldr	r1, [pc, #360]	@ (8004a2c <_dtoa_r+0x704>)
 80048c4:	f7fb fc50 	bl	8000168 <__aeabi_dsub>
 80048c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048cc:	f7fc f876 	bl	80009bc <__aeabi_dcmplt>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	f040 8087 	bne.w	80049e4 <_dtoa_r+0x6bc>
 80048d6:	42a6      	cmp	r6, r4
 80048d8:	f43f af43 	beq.w	8004762 <_dtoa_r+0x43a>
 80048dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80048e0:	2200      	movs	r2, #0
 80048e2:	4b53      	ldr	r3, [pc, #332]	@ (8004a30 <_dtoa_r+0x708>)
 80048e4:	f7fb fdf8 	bl	80004d8 <__aeabi_dmul>
 80048e8:	2200      	movs	r2, #0
 80048ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80048ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004a30 <_dtoa_r+0x708>)
 80048f4:	f7fb fdf0 	bl	80004d8 <__aeabi_dmul>
 80048f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048fc:	e7c4      	b.n	8004888 <_dtoa_r+0x560>
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	f7fb fde9 	bl	80004d8 <__aeabi_dmul>
 8004906:	4656      	mov	r6, sl
 8004908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800490c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800490e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004912:	f7fc f891 	bl	8000a38 <__aeabi_d2iz>
 8004916:	4605      	mov	r5, r0
 8004918:	f7fb fd74 	bl	8000404 <__aeabi_i2d>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004924:	f7fb fc20 	bl	8000168 <__aeabi_dsub>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	3530      	adds	r5, #48	@ 0x30
 800492e:	f806 5b01 	strb.w	r5, [r6], #1
 8004932:	42a6      	cmp	r6, r4
 8004934:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	d124      	bne.n	8004988 <_dtoa_r+0x660>
 800493e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004942:	4b39      	ldr	r3, [pc, #228]	@ (8004a28 <_dtoa_r+0x700>)
 8004944:	f7fb fc12 	bl	800016c <__adddf3>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004950:	f7fc f852 	bl	80009f8 <__aeabi_dcmpgt>
 8004954:	2800      	cmp	r0, #0
 8004956:	d145      	bne.n	80049e4 <_dtoa_r+0x6bc>
 8004958:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800495c:	2000      	movs	r0, #0
 800495e:	4932      	ldr	r1, [pc, #200]	@ (8004a28 <_dtoa_r+0x700>)
 8004960:	f7fb fc02 	bl	8000168 <__aeabi_dsub>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800496c:	f7fc f826 	bl	80009bc <__aeabi_dcmplt>
 8004970:	2800      	cmp	r0, #0
 8004972:	f43f aef6 	beq.w	8004762 <_dtoa_r+0x43a>
 8004976:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004978:	1e73      	subs	r3, r6, #1
 800497a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800497c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004980:	2b30      	cmp	r3, #48	@ 0x30
 8004982:	d0f8      	beq.n	8004976 <_dtoa_r+0x64e>
 8004984:	9f04      	ldr	r7, [sp, #16]
 8004986:	e73f      	b.n	8004808 <_dtoa_r+0x4e0>
 8004988:	4b29      	ldr	r3, [pc, #164]	@ (8004a30 <_dtoa_r+0x708>)
 800498a:	f7fb fda5 	bl	80004d8 <__aeabi_dmul>
 800498e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004992:	e7bc      	b.n	800490e <_dtoa_r+0x5e6>
 8004994:	d10c      	bne.n	80049b0 <_dtoa_r+0x688>
 8004996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800499a:	2200      	movs	r2, #0
 800499c:	4b25      	ldr	r3, [pc, #148]	@ (8004a34 <_dtoa_r+0x70c>)
 800499e:	f7fb fd9b 	bl	80004d8 <__aeabi_dmul>
 80049a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049a6:	f7fc f81d 	bl	80009e4 <__aeabi_dcmpge>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	f000 815b 	beq.w	8004c66 <_dtoa_r+0x93e>
 80049b0:	2400      	movs	r4, #0
 80049b2:	4625      	mov	r5, r4
 80049b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049b6:	4656      	mov	r6, sl
 80049b8:	43db      	mvns	r3, r3
 80049ba:	9304      	str	r3, [sp, #16]
 80049bc:	2700      	movs	r7, #0
 80049be:	4621      	mov	r1, r4
 80049c0:	4658      	mov	r0, fp
 80049c2:	f000 fbb7 	bl	8005134 <_Bfree>
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	d0dc      	beq.n	8004984 <_dtoa_r+0x65c>
 80049ca:	b12f      	cbz	r7, 80049d8 <_dtoa_r+0x6b0>
 80049cc:	42af      	cmp	r7, r5
 80049ce:	d003      	beq.n	80049d8 <_dtoa_r+0x6b0>
 80049d0:	4639      	mov	r1, r7
 80049d2:	4658      	mov	r0, fp
 80049d4:	f000 fbae 	bl	8005134 <_Bfree>
 80049d8:	4629      	mov	r1, r5
 80049da:	4658      	mov	r0, fp
 80049dc:	f000 fbaa 	bl	8005134 <_Bfree>
 80049e0:	e7d0      	b.n	8004984 <_dtoa_r+0x65c>
 80049e2:	9704      	str	r7, [sp, #16]
 80049e4:	4633      	mov	r3, r6
 80049e6:	461e      	mov	r6, r3
 80049e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049ec:	2a39      	cmp	r2, #57	@ 0x39
 80049ee:	d107      	bne.n	8004a00 <_dtoa_r+0x6d8>
 80049f0:	459a      	cmp	sl, r3
 80049f2:	d1f8      	bne.n	80049e6 <_dtoa_r+0x6be>
 80049f4:	9a04      	ldr	r2, [sp, #16]
 80049f6:	3201      	adds	r2, #1
 80049f8:	9204      	str	r2, [sp, #16]
 80049fa:	2230      	movs	r2, #48	@ 0x30
 80049fc:	f88a 2000 	strb.w	r2, [sl]
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	3201      	adds	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e7bd      	b.n	8004984 <_dtoa_r+0x65c>
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <_dtoa_r+0x708>)
 8004a0c:	f7fb fd64 	bl	80004d8 <__aeabi_dmul>
 8004a10:	2200      	movs	r2, #0
 8004a12:	2300      	movs	r3, #0
 8004a14:	4604      	mov	r4, r0
 8004a16:	460d      	mov	r5, r1
 8004a18:	f7fb ffc6 	bl	80009a8 <__aeabi_dcmpeq>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	f43f aebc 	beq.w	800479a <_dtoa_r+0x472>
 8004a22:	e6f1      	b.n	8004808 <_dtoa_r+0x4e0>
 8004a24:	08007a78 	.word	0x08007a78
 8004a28:	3fe00000 	.word	0x3fe00000
 8004a2c:	3ff00000 	.word	0x3ff00000
 8004a30:	40240000 	.word	0x40240000
 8004a34:	40140000 	.word	0x40140000
 8004a38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	f000 80db 	beq.w	8004bf6 <_dtoa_r+0x8ce>
 8004a40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a42:	2a01      	cmp	r2, #1
 8004a44:	f300 80bf 	bgt.w	8004bc6 <_dtoa_r+0x89e>
 8004a48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	f000 80b7 	beq.w	8004bbe <_dtoa_r+0x896>
 8004a50:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004a54:	4646      	mov	r6, r8
 8004a56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	441a      	add	r2, r3
 8004a5e:	4658      	mov	r0, fp
 8004a60:	4498      	add	r8, r3
 8004a62:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a64:	f000 fc64 	bl	8005330 <__i2b>
 8004a68:	4605      	mov	r5, r0
 8004a6a:	b15e      	cbz	r6, 8004a84 <_dtoa_r+0x75c>
 8004a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	dd08      	ble.n	8004a84 <_dtoa_r+0x75c>
 8004a72:	42b3      	cmp	r3, r6
 8004a74:	bfa8      	it	ge
 8004a76:	4633      	movge	r3, r6
 8004a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a7a:	eba8 0803 	sub.w	r8, r8, r3
 8004a7e:	1af6      	subs	r6, r6, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a86:	b1f3      	cbz	r3, 8004ac6 <_dtoa_r+0x79e>
 8004a88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 80b7 	beq.w	8004bfe <_dtoa_r+0x8d6>
 8004a90:	b18c      	cbz	r4, 8004ab6 <_dtoa_r+0x78e>
 8004a92:	4629      	mov	r1, r5
 8004a94:	4622      	mov	r2, r4
 8004a96:	4658      	mov	r0, fp
 8004a98:	f000 fd08 	bl	80054ac <__pow5mult>
 8004a9c:	464a      	mov	r2, r9
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	4658      	mov	r0, fp
 8004aa4:	f000 fc5a 	bl	800535c <__multiply>
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	9004      	str	r0, [sp, #16]
 8004aac:	4658      	mov	r0, fp
 8004aae:	f000 fb41 	bl	8005134 <_Bfree>
 8004ab2:	9b04      	ldr	r3, [sp, #16]
 8004ab4:	4699      	mov	r9, r3
 8004ab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ab8:	1b1a      	subs	r2, r3, r4
 8004aba:	d004      	beq.n	8004ac6 <_dtoa_r+0x79e>
 8004abc:	4649      	mov	r1, r9
 8004abe:	4658      	mov	r0, fp
 8004ac0:	f000 fcf4 	bl	80054ac <__pow5mult>
 8004ac4:	4681      	mov	r9, r0
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4658      	mov	r0, fp
 8004aca:	f000 fc31 	bl	8005330 <__i2b>
 8004ace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 81c9 	beq.w	8004e6a <_dtoa_r+0xb42>
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4601      	mov	r1, r0
 8004adc:	4658      	mov	r0, fp
 8004ade:	f000 fce5 	bl	80054ac <__pow5mult>
 8004ae2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	f300 808f 	bgt.w	8004c0a <_dtoa_r+0x8e2>
 8004aec:	9b02      	ldr	r3, [sp, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 8087 	bne.w	8004c02 <_dtoa_r+0x8da>
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 8083 	bne.w	8004c06 <_dtoa_r+0x8de>
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b06:	0d1b      	lsrs	r3, r3, #20
 8004b08:	051b      	lsls	r3, r3, #20
 8004b0a:	b12b      	cbz	r3, 8004b18 <_dtoa_r+0x7f0>
 8004b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b0e:	f108 0801 	add.w	r8, r8, #1
 8004b12:	3301      	adds	r3, #1
 8004b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b16:	2301      	movs	r3, #1
 8004b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 81aa 	beq.w	8004e76 <_dtoa_r+0xb4e>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b28:	6918      	ldr	r0, [r3, #16]
 8004b2a:	f000 fbb5 	bl	8005298 <__hi0bits>
 8004b2e:	f1c0 0020 	rsb	r0, r0, #32
 8004b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b34:	4418      	add	r0, r3
 8004b36:	f010 001f 	ands.w	r0, r0, #31
 8004b3a:	d071      	beq.n	8004c20 <_dtoa_r+0x8f8>
 8004b3c:	f1c0 0320 	rsb	r3, r0, #32
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	dd65      	ble.n	8004c10 <_dtoa_r+0x8e8>
 8004b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b46:	f1c0 001c 	rsb	r0, r0, #28
 8004b4a:	4403      	add	r3, r0
 8004b4c:	4480      	add	r8, r0
 8004b4e:	4406      	add	r6, r0
 8004b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b52:	f1b8 0f00 	cmp.w	r8, #0
 8004b56:	dd05      	ble.n	8004b64 <_dtoa_r+0x83c>
 8004b58:	4649      	mov	r1, r9
 8004b5a:	4642      	mov	r2, r8
 8004b5c:	4658      	mov	r0, fp
 8004b5e:	f000 fcff 	bl	8005560 <__lshift>
 8004b62:	4681      	mov	r9, r0
 8004b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	dd05      	ble.n	8004b76 <_dtoa_r+0x84e>
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4658      	mov	r0, fp
 8004b70:	f000 fcf6 	bl	8005560 <__lshift>
 8004b74:	4604      	mov	r4, r0
 8004b76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d053      	beq.n	8004c24 <_dtoa_r+0x8fc>
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	4648      	mov	r0, r9
 8004b80:	f000 fd5a 	bl	8005638 <__mcmp>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	da4d      	bge.n	8004c24 <_dtoa_r+0x8fc>
 8004b88:	1e7b      	subs	r3, r7, #1
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	220a      	movs	r2, #10
 8004b90:	2300      	movs	r3, #0
 8004b92:	4658      	mov	r0, fp
 8004b94:	f000 faf0 	bl	8005178 <__multadd>
 8004b98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b9a:	4681      	mov	r9, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 816c 	beq.w	8004e7a <_dtoa_r+0xb52>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	220a      	movs	r2, #10
 8004ba8:	4658      	mov	r0, fp
 8004baa:	f000 fae5 	bl	8005178 <__multadd>
 8004bae:	9b08      	ldr	r3, [sp, #32]
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dc61      	bgt.n	8004c7a <_dtoa_r+0x952>
 8004bb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	dc3b      	bgt.n	8004c34 <_dtoa_r+0x90c>
 8004bbc:	e05d      	b.n	8004c7a <_dtoa_r+0x952>
 8004bbe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004bc0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004bc4:	e746      	b.n	8004a54 <_dtoa_r+0x72c>
 8004bc6:	9b07      	ldr	r3, [sp, #28]
 8004bc8:	1e5c      	subs	r4, r3, #1
 8004bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	bfbf      	itttt	lt
 8004bd0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004bd2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004bd4:	1ae3      	sublt	r3, r4, r3
 8004bd6:	18d2      	addlt	r2, r2, r3
 8004bd8:	bfa8      	it	ge
 8004bda:	1b1c      	subge	r4, r3, r4
 8004bdc:	9b07      	ldr	r3, [sp, #28]
 8004bde:	bfbe      	ittt	lt
 8004be0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004be2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004be4:	2400      	movlt	r4, #0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bfb5      	itete	lt
 8004bea:	eba8 0603 	sublt.w	r6, r8, r3
 8004bee:	4646      	movge	r6, r8
 8004bf0:	2300      	movlt	r3, #0
 8004bf2:	9b07      	ldrge	r3, [sp, #28]
 8004bf4:	e730      	b.n	8004a58 <_dtoa_r+0x730>
 8004bf6:	4646      	mov	r6, r8
 8004bf8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004bfa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004bfc:	e735      	b.n	8004a6a <_dtoa_r+0x742>
 8004bfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c00:	e75c      	b.n	8004abc <_dtoa_r+0x794>
 8004c02:	2300      	movs	r3, #0
 8004c04:	e788      	b.n	8004b18 <_dtoa_r+0x7f0>
 8004c06:	9b02      	ldr	r3, [sp, #8]
 8004c08:	e786      	b.n	8004b18 <_dtoa_r+0x7f0>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c0e:	e788      	b.n	8004b22 <_dtoa_r+0x7fa>
 8004c10:	d09f      	beq.n	8004b52 <_dtoa_r+0x82a>
 8004c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c14:	331c      	adds	r3, #28
 8004c16:	441a      	add	r2, r3
 8004c18:	4498      	add	r8, r3
 8004c1a:	441e      	add	r6, r3
 8004c1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c1e:	e798      	b.n	8004b52 <_dtoa_r+0x82a>
 8004c20:	4603      	mov	r3, r0
 8004c22:	e7f6      	b.n	8004c12 <_dtoa_r+0x8ea>
 8004c24:	9b07      	ldr	r3, [sp, #28]
 8004c26:	9704      	str	r7, [sp, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	dc20      	bgt.n	8004c6e <_dtoa_r+0x946>
 8004c2c:	9308      	str	r3, [sp, #32]
 8004c2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	dd1e      	ble.n	8004c72 <_dtoa_r+0x94a>
 8004c34:	9b08      	ldr	r3, [sp, #32]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f47f aebc 	bne.w	80049b4 <_dtoa_r+0x68c>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	2205      	movs	r2, #5
 8004c40:	4658      	mov	r0, fp
 8004c42:	f000 fa99 	bl	8005178 <__multadd>
 8004c46:	4601      	mov	r1, r0
 8004c48:	4604      	mov	r4, r0
 8004c4a:	4648      	mov	r0, r9
 8004c4c:	f000 fcf4 	bl	8005638 <__mcmp>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	f77f aeaf 	ble.w	80049b4 <_dtoa_r+0x68c>
 8004c56:	2331      	movs	r3, #49	@ 0x31
 8004c58:	4656      	mov	r6, sl
 8004c5a:	f806 3b01 	strb.w	r3, [r6], #1
 8004c5e:	9b04      	ldr	r3, [sp, #16]
 8004c60:	3301      	adds	r3, #1
 8004c62:	9304      	str	r3, [sp, #16]
 8004c64:	e6aa      	b.n	80049bc <_dtoa_r+0x694>
 8004c66:	9c07      	ldr	r4, [sp, #28]
 8004c68:	9704      	str	r7, [sp, #16]
 8004c6a:	4625      	mov	r5, r4
 8004c6c:	e7f3      	b.n	8004c56 <_dtoa_r+0x92e>
 8004c6e:	9b07      	ldr	r3, [sp, #28]
 8004c70:	9308      	str	r3, [sp, #32]
 8004c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8104 	beq.w	8004e82 <_dtoa_r+0xb5a>
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	dd05      	ble.n	8004c8a <_dtoa_r+0x962>
 8004c7e:	4629      	mov	r1, r5
 8004c80:	4632      	mov	r2, r6
 8004c82:	4658      	mov	r0, fp
 8004c84:	f000 fc6c 	bl	8005560 <__lshift>
 8004c88:	4605      	mov	r5, r0
 8004c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d05a      	beq.n	8004d46 <_dtoa_r+0xa1e>
 8004c90:	4658      	mov	r0, fp
 8004c92:	6869      	ldr	r1, [r5, #4]
 8004c94:	f000 fa0e 	bl	80050b4 <_Balloc>
 8004c98:	4606      	mov	r6, r0
 8004c9a:	b928      	cbnz	r0, 8004ca8 <_dtoa_r+0x980>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004ca2:	4b83      	ldr	r3, [pc, #524]	@ (8004eb0 <_dtoa_r+0xb88>)
 8004ca4:	f7ff bb54 	b.w	8004350 <_dtoa_r+0x28>
 8004ca8:	692a      	ldr	r2, [r5, #16]
 8004caa:	f105 010c 	add.w	r1, r5, #12
 8004cae:	3202      	adds	r2, #2
 8004cb0:	0092      	lsls	r2, r2, #2
 8004cb2:	300c      	adds	r0, #12
 8004cb4:	f001 ff5e 	bl	8006b74 <memcpy>
 8004cb8:	2201      	movs	r2, #1
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4658      	mov	r0, fp
 8004cbe:	f000 fc4f 	bl	8005560 <__lshift>
 8004cc2:	462f      	mov	r7, r5
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	f10a 0301 	add.w	r3, sl, #1
 8004cca:	9307      	str	r3, [sp, #28]
 8004ccc:	9b08      	ldr	r3, [sp, #32]
 8004cce:	4453      	add	r3, sl
 8004cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cd2:	9b02      	ldr	r3, [sp, #8]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cda:	9b07      	ldr	r3, [sp, #28]
 8004cdc:	4621      	mov	r1, r4
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	4648      	mov	r0, r9
 8004ce2:	9302      	str	r3, [sp, #8]
 8004ce4:	f7ff fa96 	bl	8004214 <quorem>
 8004ce8:	4639      	mov	r1, r7
 8004cea:	9008      	str	r0, [sp, #32]
 8004cec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004cf0:	4648      	mov	r0, r9
 8004cf2:	f000 fca1 	bl	8005638 <__mcmp>
 8004cf6:	462a      	mov	r2, r5
 8004cf8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4658      	mov	r0, fp
 8004cfe:	f000 fcb7 	bl	8005670 <__mdiff>
 8004d02:	68c2      	ldr	r2, [r0, #12]
 8004d04:	4606      	mov	r6, r0
 8004d06:	bb02      	cbnz	r2, 8004d4a <_dtoa_r+0xa22>
 8004d08:	4601      	mov	r1, r0
 8004d0a:	4648      	mov	r0, r9
 8004d0c:	f000 fc94 	bl	8005638 <__mcmp>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4631      	mov	r1, r6
 8004d14:	4658      	mov	r0, fp
 8004d16:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d18:	f000 fa0c 	bl	8005134 <_Bfree>
 8004d1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004d20:	9e07      	ldr	r6, [sp, #28]
 8004d22:	ea43 0102 	orr.w	r1, r3, r2
 8004d26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d28:	4319      	orrs	r1, r3
 8004d2a:	d110      	bne.n	8004d4e <_dtoa_r+0xa26>
 8004d2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d30:	d029      	beq.n	8004d86 <_dtoa_r+0xa5e>
 8004d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	dd02      	ble.n	8004d3e <_dtoa_r+0xa16>
 8004d38:	9b08      	ldr	r3, [sp, #32]
 8004d3a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004d3e:	9b02      	ldr	r3, [sp, #8]
 8004d40:	f883 8000 	strb.w	r8, [r3]
 8004d44:	e63b      	b.n	80049be <_dtoa_r+0x696>
 8004d46:	4628      	mov	r0, r5
 8004d48:	e7bb      	b.n	8004cc2 <_dtoa_r+0x99a>
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	e7e1      	b.n	8004d12 <_dtoa_r+0x9ea>
 8004d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	db04      	blt.n	8004d5e <_dtoa_r+0xa36>
 8004d54:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004d56:	430b      	orrs	r3, r1
 8004d58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	d120      	bne.n	8004da0 <_dtoa_r+0xa78>
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	dded      	ble.n	8004d3e <_dtoa_r+0xa16>
 8004d62:	4649      	mov	r1, r9
 8004d64:	2201      	movs	r2, #1
 8004d66:	4658      	mov	r0, fp
 8004d68:	f000 fbfa 	bl	8005560 <__lshift>
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4681      	mov	r9, r0
 8004d70:	f000 fc62 	bl	8005638 <__mcmp>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	dc03      	bgt.n	8004d80 <_dtoa_r+0xa58>
 8004d78:	d1e1      	bne.n	8004d3e <_dtoa_r+0xa16>
 8004d7a:	f018 0f01 	tst.w	r8, #1
 8004d7e:	d0de      	beq.n	8004d3e <_dtoa_r+0xa16>
 8004d80:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d84:	d1d8      	bne.n	8004d38 <_dtoa_r+0xa10>
 8004d86:	2339      	movs	r3, #57	@ 0x39
 8004d88:	9a02      	ldr	r2, [sp, #8]
 8004d8a:	7013      	strb	r3, [r2, #0]
 8004d8c:	4633      	mov	r3, r6
 8004d8e:	461e      	mov	r6, r3
 8004d90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	2a39      	cmp	r2, #57	@ 0x39
 8004d98:	d052      	beq.n	8004e40 <_dtoa_r+0xb18>
 8004d9a:	3201      	adds	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e60e      	b.n	80049be <_dtoa_r+0x696>
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	dd07      	ble.n	8004db4 <_dtoa_r+0xa8c>
 8004da4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004da8:	d0ed      	beq.n	8004d86 <_dtoa_r+0xa5e>
 8004daa:	9a02      	ldr	r2, [sp, #8]
 8004dac:	f108 0301 	add.w	r3, r8, #1
 8004db0:	7013      	strb	r3, [r2, #0]
 8004db2:	e604      	b.n	80049be <_dtoa_r+0x696>
 8004db4:	9b07      	ldr	r3, [sp, #28]
 8004db6:	9a07      	ldr	r2, [sp, #28]
 8004db8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004dbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d028      	beq.n	8004e14 <_dtoa_r+0xaec>
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	220a      	movs	r2, #10
 8004dc8:	4658      	mov	r0, fp
 8004dca:	f000 f9d5 	bl	8005178 <__multadd>
 8004dce:	42af      	cmp	r7, r5
 8004dd0:	4681      	mov	r9, r0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	f04f 020a 	mov.w	r2, #10
 8004dda:	4639      	mov	r1, r7
 8004ddc:	4658      	mov	r0, fp
 8004dde:	d107      	bne.n	8004df0 <_dtoa_r+0xac8>
 8004de0:	f000 f9ca 	bl	8005178 <__multadd>
 8004de4:	4607      	mov	r7, r0
 8004de6:	4605      	mov	r5, r0
 8004de8:	9b07      	ldr	r3, [sp, #28]
 8004dea:	3301      	adds	r3, #1
 8004dec:	9307      	str	r3, [sp, #28]
 8004dee:	e774      	b.n	8004cda <_dtoa_r+0x9b2>
 8004df0:	f000 f9c2 	bl	8005178 <__multadd>
 8004df4:	4629      	mov	r1, r5
 8004df6:	4607      	mov	r7, r0
 8004df8:	2300      	movs	r3, #0
 8004dfa:	220a      	movs	r2, #10
 8004dfc:	4658      	mov	r0, fp
 8004dfe:	f000 f9bb 	bl	8005178 <__multadd>
 8004e02:	4605      	mov	r5, r0
 8004e04:	e7f0      	b.n	8004de8 <_dtoa_r+0xac0>
 8004e06:	9b08      	ldr	r3, [sp, #32]
 8004e08:	2700      	movs	r7, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bfcc      	ite	gt
 8004e0e:	461e      	movgt	r6, r3
 8004e10:	2601      	movle	r6, #1
 8004e12:	4456      	add	r6, sl
 8004e14:	4649      	mov	r1, r9
 8004e16:	2201      	movs	r2, #1
 8004e18:	4658      	mov	r0, fp
 8004e1a:	f000 fba1 	bl	8005560 <__lshift>
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4681      	mov	r9, r0
 8004e22:	f000 fc09 	bl	8005638 <__mcmp>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	dcb0      	bgt.n	8004d8c <_dtoa_r+0xa64>
 8004e2a:	d102      	bne.n	8004e32 <_dtoa_r+0xb0a>
 8004e2c:	f018 0f01 	tst.w	r8, #1
 8004e30:	d1ac      	bne.n	8004d8c <_dtoa_r+0xa64>
 8004e32:	4633      	mov	r3, r6
 8004e34:	461e      	mov	r6, r3
 8004e36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e3a:	2a30      	cmp	r2, #48	@ 0x30
 8004e3c:	d0fa      	beq.n	8004e34 <_dtoa_r+0xb0c>
 8004e3e:	e5be      	b.n	80049be <_dtoa_r+0x696>
 8004e40:	459a      	cmp	sl, r3
 8004e42:	d1a4      	bne.n	8004d8e <_dtoa_r+0xa66>
 8004e44:	9b04      	ldr	r3, [sp, #16]
 8004e46:	3301      	adds	r3, #1
 8004e48:	9304      	str	r3, [sp, #16]
 8004e4a:	2331      	movs	r3, #49	@ 0x31
 8004e4c:	f88a 3000 	strb.w	r3, [sl]
 8004e50:	e5b5      	b.n	80049be <_dtoa_r+0x696>
 8004e52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e54:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004eb4 <_dtoa_r+0xb8c>
 8004e58:	b11b      	cbz	r3, 8004e62 <_dtoa_r+0xb3a>
 8004e5a:	f10a 0308 	add.w	r3, sl, #8
 8004e5e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	4650      	mov	r0, sl
 8004e64:	b017      	add	sp, #92	@ 0x5c
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	f77f ae3d 	ble.w	8004aec <_dtoa_r+0x7c4>
 8004e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e74:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e76:	2001      	movs	r0, #1
 8004e78:	e65b      	b.n	8004b32 <_dtoa_r+0x80a>
 8004e7a:	9b08      	ldr	r3, [sp, #32]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f77f aed6 	ble.w	8004c2e <_dtoa_r+0x906>
 8004e82:	4656      	mov	r6, sl
 8004e84:	4621      	mov	r1, r4
 8004e86:	4648      	mov	r0, r9
 8004e88:	f7ff f9c4 	bl	8004214 <quorem>
 8004e8c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e90:	9b08      	ldr	r3, [sp, #32]
 8004e92:	f806 8b01 	strb.w	r8, [r6], #1
 8004e96:	eba6 020a 	sub.w	r2, r6, sl
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	ddb3      	ble.n	8004e06 <_dtoa_r+0xade>
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	220a      	movs	r2, #10
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	f000 f967 	bl	8005178 <__multadd>
 8004eaa:	4681      	mov	r9, r0
 8004eac:	e7ea      	b.n	8004e84 <_dtoa_r+0xb5c>
 8004eae:	bf00      	nop
 8004eb0:	080079d7 	.word	0x080079d7
 8004eb4:	0800795b 	.word	0x0800795b

08004eb8 <_free_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4605      	mov	r5, r0
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	d040      	beq.n	8004f42 <_free_r+0x8a>
 8004ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec4:	1f0c      	subs	r4, r1, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bfb8      	it	lt
 8004eca:	18e4      	addlt	r4, r4, r3
 8004ecc:	f000 f8e6 	bl	800509c <__malloc_lock>
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8004f44 <_free_r+0x8c>)
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	b933      	cbnz	r3, 8004ee4 <_free_r+0x2c>
 8004ed6:	6063      	str	r3, [r4, #4]
 8004ed8:	6014      	str	r4, [r2, #0]
 8004eda:	4628      	mov	r0, r5
 8004edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee0:	f000 b8e2 	b.w	80050a8 <__malloc_unlock>
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	d908      	bls.n	8004efa <_free_r+0x42>
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	1821      	adds	r1, r4, r0
 8004eec:	428b      	cmp	r3, r1
 8004eee:	bf01      	itttt	eq
 8004ef0:	6819      	ldreq	r1, [r3, #0]
 8004ef2:	685b      	ldreq	r3, [r3, #4]
 8004ef4:	1809      	addeq	r1, r1, r0
 8004ef6:	6021      	streq	r1, [r4, #0]
 8004ef8:	e7ed      	b.n	8004ed6 <_free_r+0x1e>
 8004efa:	461a      	mov	r2, r3
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b10b      	cbz	r3, 8004f04 <_free_r+0x4c>
 8004f00:	42a3      	cmp	r3, r4
 8004f02:	d9fa      	bls.n	8004efa <_free_r+0x42>
 8004f04:	6811      	ldr	r1, [r2, #0]
 8004f06:	1850      	adds	r0, r2, r1
 8004f08:	42a0      	cmp	r0, r4
 8004f0a:	d10b      	bne.n	8004f24 <_free_r+0x6c>
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	4401      	add	r1, r0
 8004f10:	1850      	adds	r0, r2, r1
 8004f12:	4283      	cmp	r3, r0
 8004f14:	6011      	str	r1, [r2, #0]
 8004f16:	d1e0      	bne.n	8004eda <_free_r+0x22>
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4408      	add	r0, r1
 8004f1e:	6010      	str	r0, [r2, #0]
 8004f20:	6053      	str	r3, [r2, #4]
 8004f22:	e7da      	b.n	8004eda <_free_r+0x22>
 8004f24:	d902      	bls.n	8004f2c <_free_r+0x74>
 8004f26:	230c      	movs	r3, #12
 8004f28:	602b      	str	r3, [r5, #0]
 8004f2a:	e7d6      	b.n	8004eda <_free_r+0x22>
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	1821      	adds	r1, r4, r0
 8004f30:	428b      	cmp	r3, r1
 8004f32:	bf01      	itttt	eq
 8004f34:	6819      	ldreq	r1, [r3, #0]
 8004f36:	685b      	ldreq	r3, [r3, #4]
 8004f38:	1809      	addeq	r1, r1, r0
 8004f3a:	6021      	streq	r1, [r4, #0]
 8004f3c:	6063      	str	r3, [r4, #4]
 8004f3e:	6054      	str	r4, [r2, #4]
 8004f40:	e7cb      	b.n	8004eda <_free_r+0x22>
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000420 	.word	0x20000420

08004f48 <malloc>:
 8004f48:	4b02      	ldr	r3, [pc, #8]	@ (8004f54 <malloc+0xc>)
 8004f4a:	4601      	mov	r1, r0
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	f000 b825 	b.w	8004f9c <_malloc_r>
 8004f52:	bf00      	nop
 8004f54:	20000018 	.word	0x20000018

08004f58 <sbrk_aligned>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004f98 <sbrk_aligned+0x40>)
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	6831      	ldr	r1, [r6, #0]
 8004f60:	4605      	mov	r5, r0
 8004f62:	b911      	cbnz	r1, 8004f6a <sbrk_aligned+0x12>
 8004f64:	f001 fdf6 	bl	8006b54 <_sbrk_r>
 8004f68:	6030      	str	r0, [r6, #0]
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f001 fdf1 	bl	8006b54 <_sbrk_r>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	d103      	bne.n	8004f7e <sbrk_aligned+0x26>
 8004f76:	f04f 34ff 	mov.w	r4, #4294967295
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	1cc4      	adds	r4, r0, #3
 8004f80:	f024 0403 	bic.w	r4, r4, #3
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	d0f8      	beq.n	8004f7a <sbrk_aligned+0x22>
 8004f88:	1a21      	subs	r1, r4, r0
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f001 fde2 	bl	8006b54 <_sbrk_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d1f2      	bne.n	8004f7a <sbrk_aligned+0x22>
 8004f94:	e7ef      	b.n	8004f76 <sbrk_aligned+0x1e>
 8004f96:	bf00      	nop
 8004f98:	2000041c 	.word	0x2000041c

08004f9c <_malloc_r>:
 8004f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa0:	1ccd      	adds	r5, r1, #3
 8004fa2:	f025 0503 	bic.w	r5, r5, #3
 8004fa6:	3508      	adds	r5, #8
 8004fa8:	2d0c      	cmp	r5, #12
 8004faa:	bf38      	it	cc
 8004fac:	250c      	movcc	r5, #12
 8004fae:	2d00      	cmp	r5, #0
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	db01      	blt.n	8004fb8 <_malloc_r+0x1c>
 8004fb4:	42a9      	cmp	r1, r5
 8004fb6:	d904      	bls.n	8004fc2 <_malloc_r+0x26>
 8004fb8:	230c      	movs	r3, #12
 8004fba:	6033      	str	r3, [r6, #0]
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005098 <_malloc_r+0xfc>
 8004fc6:	f000 f869 	bl	800509c <__malloc_lock>
 8004fca:	f8d8 3000 	ldr.w	r3, [r8]
 8004fce:	461c      	mov	r4, r3
 8004fd0:	bb44      	cbnz	r4, 8005024 <_malloc_r+0x88>
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7ff ffbf 	bl	8004f58 <sbrk_aligned>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	4604      	mov	r4, r0
 8004fde:	d158      	bne.n	8005092 <_malloc_r+0xf6>
 8004fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8004fe4:	4627      	mov	r7, r4
 8004fe6:	2f00      	cmp	r7, #0
 8004fe8:	d143      	bne.n	8005072 <_malloc_r+0xd6>
 8004fea:	2c00      	cmp	r4, #0
 8004fec:	d04b      	beq.n	8005086 <_malloc_r+0xea>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	eb04 0903 	add.w	r9, r4, r3
 8004ff8:	f001 fdac 	bl	8006b54 <_sbrk_r>
 8004ffc:	4581      	cmp	r9, r0
 8004ffe:	d142      	bne.n	8005086 <_malloc_r+0xea>
 8005000:	6821      	ldr	r1, [r4, #0]
 8005002:	4630      	mov	r0, r6
 8005004:	1a6d      	subs	r5, r5, r1
 8005006:	4629      	mov	r1, r5
 8005008:	f7ff ffa6 	bl	8004f58 <sbrk_aligned>
 800500c:	3001      	adds	r0, #1
 800500e:	d03a      	beq.n	8005086 <_malloc_r+0xea>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	442b      	add	r3, r5
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	f8d8 3000 	ldr.w	r3, [r8]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	bb62      	cbnz	r2, 8005078 <_malloc_r+0xdc>
 800501e:	f8c8 7000 	str.w	r7, [r8]
 8005022:	e00f      	b.n	8005044 <_malloc_r+0xa8>
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	1b52      	subs	r2, r2, r5
 8005028:	d420      	bmi.n	800506c <_malloc_r+0xd0>
 800502a:	2a0b      	cmp	r2, #11
 800502c:	d917      	bls.n	800505e <_malloc_r+0xc2>
 800502e:	1961      	adds	r1, r4, r5
 8005030:	42a3      	cmp	r3, r4
 8005032:	6025      	str	r5, [r4, #0]
 8005034:	bf18      	it	ne
 8005036:	6059      	strne	r1, [r3, #4]
 8005038:	6863      	ldr	r3, [r4, #4]
 800503a:	bf08      	it	eq
 800503c:	f8c8 1000 	streq.w	r1, [r8]
 8005040:	5162      	str	r2, [r4, r5]
 8005042:	604b      	str	r3, [r1, #4]
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f82f 	bl	80050a8 <__malloc_unlock>
 800504a:	f104 000b 	add.w	r0, r4, #11
 800504e:	1d23      	adds	r3, r4, #4
 8005050:	f020 0007 	bic.w	r0, r0, #7
 8005054:	1ac2      	subs	r2, r0, r3
 8005056:	bf1c      	itt	ne
 8005058:	1a1b      	subne	r3, r3, r0
 800505a:	50a3      	strne	r3, [r4, r2]
 800505c:	e7af      	b.n	8004fbe <_malloc_r+0x22>
 800505e:	6862      	ldr	r2, [r4, #4]
 8005060:	42a3      	cmp	r3, r4
 8005062:	bf0c      	ite	eq
 8005064:	f8c8 2000 	streq.w	r2, [r8]
 8005068:	605a      	strne	r2, [r3, #4]
 800506a:	e7eb      	b.n	8005044 <_malloc_r+0xa8>
 800506c:	4623      	mov	r3, r4
 800506e:	6864      	ldr	r4, [r4, #4]
 8005070:	e7ae      	b.n	8004fd0 <_malloc_r+0x34>
 8005072:	463c      	mov	r4, r7
 8005074:	687f      	ldr	r7, [r7, #4]
 8005076:	e7b6      	b.n	8004fe6 <_malloc_r+0x4a>
 8005078:	461a      	mov	r2, r3
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	42a3      	cmp	r3, r4
 800507e:	d1fb      	bne.n	8005078 <_malloc_r+0xdc>
 8005080:	2300      	movs	r3, #0
 8005082:	6053      	str	r3, [r2, #4]
 8005084:	e7de      	b.n	8005044 <_malloc_r+0xa8>
 8005086:	230c      	movs	r3, #12
 8005088:	4630      	mov	r0, r6
 800508a:	6033      	str	r3, [r6, #0]
 800508c:	f000 f80c 	bl	80050a8 <__malloc_unlock>
 8005090:	e794      	b.n	8004fbc <_malloc_r+0x20>
 8005092:	6005      	str	r5, [r0, #0]
 8005094:	e7d6      	b.n	8005044 <_malloc_r+0xa8>
 8005096:	bf00      	nop
 8005098:	20000420 	.word	0x20000420

0800509c <__malloc_lock>:
 800509c:	4801      	ldr	r0, [pc, #4]	@ (80050a4 <__malloc_lock+0x8>)
 800509e:	f7ff b8a4 	b.w	80041ea <__retarget_lock_acquire_recursive>
 80050a2:	bf00      	nop
 80050a4:	20000418 	.word	0x20000418

080050a8 <__malloc_unlock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	@ (80050b0 <__malloc_unlock+0x8>)
 80050aa:	f7ff b89f 	b.w	80041ec <__retarget_lock_release_recursive>
 80050ae:	bf00      	nop
 80050b0:	20000418 	.word	0x20000418

080050b4 <_Balloc>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	69c6      	ldr	r6, [r0, #28]
 80050b8:	4604      	mov	r4, r0
 80050ba:	460d      	mov	r5, r1
 80050bc:	b976      	cbnz	r6, 80050dc <_Balloc+0x28>
 80050be:	2010      	movs	r0, #16
 80050c0:	f7ff ff42 	bl	8004f48 <malloc>
 80050c4:	4602      	mov	r2, r0
 80050c6:	61e0      	str	r0, [r4, #28]
 80050c8:	b920      	cbnz	r0, 80050d4 <_Balloc+0x20>
 80050ca:	216b      	movs	r1, #107	@ 0x6b
 80050cc:	4b17      	ldr	r3, [pc, #92]	@ (800512c <_Balloc+0x78>)
 80050ce:	4818      	ldr	r0, [pc, #96]	@ (8005130 <_Balloc+0x7c>)
 80050d0:	f001 fd64 	bl	8006b9c <__assert_func>
 80050d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050d8:	6006      	str	r6, [r0, #0]
 80050da:	60c6      	str	r6, [r0, #12]
 80050dc:	69e6      	ldr	r6, [r4, #28]
 80050de:	68f3      	ldr	r3, [r6, #12]
 80050e0:	b183      	cbz	r3, 8005104 <_Balloc+0x50>
 80050e2:	69e3      	ldr	r3, [r4, #28]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050ea:	b9b8      	cbnz	r0, 800511c <_Balloc+0x68>
 80050ec:	2101      	movs	r1, #1
 80050ee:	fa01 f605 	lsl.w	r6, r1, r5
 80050f2:	1d72      	adds	r2, r6, #5
 80050f4:	4620      	mov	r0, r4
 80050f6:	0092      	lsls	r2, r2, #2
 80050f8:	f001 fd6e 	bl	8006bd8 <_calloc_r>
 80050fc:	b160      	cbz	r0, 8005118 <_Balloc+0x64>
 80050fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005102:	e00e      	b.n	8005122 <_Balloc+0x6e>
 8005104:	2221      	movs	r2, #33	@ 0x21
 8005106:	2104      	movs	r1, #4
 8005108:	4620      	mov	r0, r4
 800510a:	f001 fd65 	bl	8006bd8 <_calloc_r>
 800510e:	69e3      	ldr	r3, [r4, #28]
 8005110:	60f0      	str	r0, [r6, #12]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e4      	bne.n	80050e2 <_Balloc+0x2e>
 8005118:	2000      	movs	r0, #0
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	6802      	ldr	r2, [r0, #0]
 800511e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005122:	2300      	movs	r3, #0
 8005124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005128:	e7f7      	b.n	800511a <_Balloc+0x66>
 800512a:	bf00      	nop
 800512c:	08007968 	.word	0x08007968
 8005130:	080079e8 	.word	0x080079e8

08005134 <_Bfree>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	69c6      	ldr	r6, [r0, #28]
 8005138:	4605      	mov	r5, r0
 800513a:	460c      	mov	r4, r1
 800513c:	b976      	cbnz	r6, 800515c <_Bfree+0x28>
 800513e:	2010      	movs	r0, #16
 8005140:	f7ff ff02 	bl	8004f48 <malloc>
 8005144:	4602      	mov	r2, r0
 8005146:	61e8      	str	r0, [r5, #28]
 8005148:	b920      	cbnz	r0, 8005154 <_Bfree+0x20>
 800514a:	218f      	movs	r1, #143	@ 0x8f
 800514c:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <_Bfree+0x3c>)
 800514e:	4809      	ldr	r0, [pc, #36]	@ (8005174 <_Bfree+0x40>)
 8005150:	f001 fd24 	bl	8006b9c <__assert_func>
 8005154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005158:	6006      	str	r6, [r0, #0]
 800515a:	60c6      	str	r6, [r0, #12]
 800515c:	b13c      	cbz	r4, 800516e <_Bfree+0x3a>
 800515e:	69eb      	ldr	r3, [r5, #28]
 8005160:	6862      	ldr	r2, [r4, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005168:	6021      	str	r1, [r4, #0]
 800516a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	08007968 	.word	0x08007968
 8005174:	080079e8 	.word	0x080079e8

08005178 <__multadd>:
 8005178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517c:	4607      	mov	r7, r0
 800517e:	460c      	mov	r4, r1
 8005180:	461e      	mov	r6, r3
 8005182:	2000      	movs	r0, #0
 8005184:	690d      	ldr	r5, [r1, #16]
 8005186:	f101 0c14 	add.w	ip, r1, #20
 800518a:	f8dc 3000 	ldr.w	r3, [ip]
 800518e:	3001      	adds	r0, #1
 8005190:	b299      	uxth	r1, r3
 8005192:	fb02 6101 	mla	r1, r2, r1, r6
 8005196:	0c1e      	lsrs	r6, r3, #16
 8005198:	0c0b      	lsrs	r3, r1, #16
 800519a:	fb02 3306 	mla	r3, r2, r6, r3
 800519e:	b289      	uxth	r1, r1
 80051a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051a4:	4285      	cmp	r5, r0
 80051a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80051aa:	f84c 1b04 	str.w	r1, [ip], #4
 80051ae:	dcec      	bgt.n	800518a <__multadd+0x12>
 80051b0:	b30e      	cbz	r6, 80051f6 <__multadd+0x7e>
 80051b2:	68a3      	ldr	r3, [r4, #8]
 80051b4:	42ab      	cmp	r3, r5
 80051b6:	dc19      	bgt.n	80051ec <__multadd+0x74>
 80051b8:	6861      	ldr	r1, [r4, #4]
 80051ba:	4638      	mov	r0, r7
 80051bc:	3101      	adds	r1, #1
 80051be:	f7ff ff79 	bl	80050b4 <_Balloc>
 80051c2:	4680      	mov	r8, r0
 80051c4:	b928      	cbnz	r0, 80051d2 <__multadd+0x5a>
 80051c6:	4602      	mov	r2, r0
 80051c8:	21ba      	movs	r1, #186	@ 0xba
 80051ca:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <__multadd+0x84>)
 80051cc:	480c      	ldr	r0, [pc, #48]	@ (8005200 <__multadd+0x88>)
 80051ce:	f001 fce5 	bl	8006b9c <__assert_func>
 80051d2:	6922      	ldr	r2, [r4, #16]
 80051d4:	f104 010c 	add.w	r1, r4, #12
 80051d8:	3202      	adds	r2, #2
 80051da:	0092      	lsls	r2, r2, #2
 80051dc:	300c      	adds	r0, #12
 80051de:	f001 fcc9 	bl	8006b74 <memcpy>
 80051e2:	4621      	mov	r1, r4
 80051e4:	4638      	mov	r0, r7
 80051e6:	f7ff ffa5 	bl	8005134 <_Bfree>
 80051ea:	4644      	mov	r4, r8
 80051ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051f0:	3501      	adds	r5, #1
 80051f2:	615e      	str	r6, [r3, #20]
 80051f4:	6125      	str	r5, [r4, #16]
 80051f6:	4620      	mov	r0, r4
 80051f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051fc:	080079d7 	.word	0x080079d7
 8005200:	080079e8 	.word	0x080079e8

08005204 <__s2b>:
 8005204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005208:	4615      	mov	r5, r2
 800520a:	2209      	movs	r2, #9
 800520c:	461f      	mov	r7, r3
 800520e:	3308      	adds	r3, #8
 8005210:	460c      	mov	r4, r1
 8005212:	fb93 f3f2 	sdiv	r3, r3, r2
 8005216:	4606      	mov	r6, r0
 8005218:	2201      	movs	r2, #1
 800521a:	2100      	movs	r1, #0
 800521c:	429a      	cmp	r2, r3
 800521e:	db09      	blt.n	8005234 <__s2b+0x30>
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff ff47 	bl	80050b4 <_Balloc>
 8005226:	b940      	cbnz	r0, 800523a <__s2b+0x36>
 8005228:	4602      	mov	r2, r0
 800522a:	21d3      	movs	r1, #211	@ 0xd3
 800522c:	4b18      	ldr	r3, [pc, #96]	@ (8005290 <__s2b+0x8c>)
 800522e:	4819      	ldr	r0, [pc, #100]	@ (8005294 <__s2b+0x90>)
 8005230:	f001 fcb4 	bl	8006b9c <__assert_func>
 8005234:	0052      	lsls	r2, r2, #1
 8005236:	3101      	adds	r1, #1
 8005238:	e7f0      	b.n	800521c <__s2b+0x18>
 800523a:	9b08      	ldr	r3, [sp, #32]
 800523c:	2d09      	cmp	r5, #9
 800523e:	6143      	str	r3, [r0, #20]
 8005240:	f04f 0301 	mov.w	r3, #1
 8005244:	6103      	str	r3, [r0, #16]
 8005246:	dd16      	ble.n	8005276 <__s2b+0x72>
 8005248:	f104 0909 	add.w	r9, r4, #9
 800524c:	46c8      	mov	r8, r9
 800524e:	442c      	add	r4, r5
 8005250:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005254:	4601      	mov	r1, r0
 8005256:	220a      	movs	r2, #10
 8005258:	4630      	mov	r0, r6
 800525a:	3b30      	subs	r3, #48	@ 0x30
 800525c:	f7ff ff8c 	bl	8005178 <__multadd>
 8005260:	45a0      	cmp	r8, r4
 8005262:	d1f5      	bne.n	8005250 <__s2b+0x4c>
 8005264:	f1a5 0408 	sub.w	r4, r5, #8
 8005268:	444c      	add	r4, r9
 800526a:	1b2d      	subs	r5, r5, r4
 800526c:	1963      	adds	r3, r4, r5
 800526e:	42bb      	cmp	r3, r7
 8005270:	db04      	blt.n	800527c <__s2b+0x78>
 8005272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005276:	2509      	movs	r5, #9
 8005278:	340a      	adds	r4, #10
 800527a:	e7f6      	b.n	800526a <__s2b+0x66>
 800527c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005280:	4601      	mov	r1, r0
 8005282:	220a      	movs	r2, #10
 8005284:	4630      	mov	r0, r6
 8005286:	3b30      	subs	r3, #48	@ 0x30
 8005288:	f7ff ff76 	bl	8005178 <__multadd>
 800528c:	e7ee      	b.n	800526c <__s2b+0x68>
 800528e:	bf00      	nop
 8005290:	080079d7 	.word	0x080079d7
 8005294:	080079e8 	.word	0x080079e8

08005298 <__hi0bits>:
 8005298:	4603      	mov	r3, r0
 800529a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800529e:	bf3a      	itte	cc
 80052a0:	0403      	lslcc	r3, r0, #16
 80052a2:	2010      	movcc	r0, #16
 80052a4:	2000      	movcs	r0, #0
 80052a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052aa:	bf3c      	itt	cc
 80052ac:	021b      	lslcc	r3, r3, #8
 80052ae:	3008      	addcc	r0, #8
 80052b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b4:	bf3c      	itt	cc
 80052b6:	011b      	lslcc	r3, r3, #4
 80052b8:	3004      	addcc	r0, #4
 80052ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052be:	bf3c      	itt	cc
 80052c0:	009b      	lslcc	r3, r3, #2
 80052c2:	3002      	addcc	r0, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	db05      	blt.n	80052d4 <__hi0bits+0x3c>
 80052c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80052cc:	f100 0001 	add.w	r0, r0, #1
 80052d0:	bf08      	it	eq
 80052d2:	2020      	moveq	r0, #32
 80052d4:	4770      	bx	lr

080052d6 <__lo0bits>:
 80052d6:	6803      	ldr	r3, [r0, #0]
 80052d8:	4602      	mov	r2, r0
 80052da:	f013 0007 	ands.w	r0, r3, #7
 80052de:	d00b      	beq.n	80052f8 <__lo0bits+0x22>
 80052e0:	07d9      	lsls	r1, r3, #31
 80052e2:	d421      	bmi.n	8005328 <__lo0bits+0x52>
 80052e4:	0798      	lsls	r0, r3, #30
 80052e6:	bf49      	itett	mi
 80052e8:	085b      	lsrmi	r3, r3, #1
 80052ea:	089b      	lsrpl	r3, r3, #2
 80052ec:	2001      	movmi	r0, #1
 80052ee:	6013      	strmi	r3, [r2, #0]
 80052f0:	bf5c      	itt	pl
 80052f2:	2002      	movpl	r0, #2
 80052f4:	6013      	strpl	r3, [r2, #0]
 80052f6:	4770      	bx	lr
 80052f8:	b299      	uxth	r1, r3
 80052fa:	b909      	cbnz	r1, 8005300 <__lo0bits+0x2a>
 80052fc:	2010      	movs	r0, #16
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	b2d9      	uxtb	r1, r3
 8005302:	b909      	cbnz	r1, 8005308 <__lo0bits+0x32>
 8005304:	3008      	adds	r0, #8
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	0719      	lsls	r1, r3, #28
 800530a:	bf04      	itt	eq
 800530c:	091b      	lsreq	r3, r3, #4
 800530e:	3004      	addeq	r0, #4
 8005310:	0799      	lsls	r1, r3, #30
 8005312:	bf04      	itt	eq
 8005314:	089b      	lsreq	r3, r3, #2
 8005316:	3002      	addeq	r0, #2
 8005318:	07d9      	lsls	r1, r3, #31
 800531a:	d403      	bmi.n	8005324 <__lo0bits+0x4e>
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	f100 0001 	add.w	r0, r0, #1
 8005322:	d003      	beq.n	800532c <__lo0bits+0x56>
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	4770      	bx	lr
 8005328:	2000      	movs	r0, #0
 800532a:	4770      	bx	lr
 800532c:	2020      	movs	r0, #32
 800532e:	4770      	bx	lr

08005330 <__i2b>:
 8005330:	b510      	push	{r4, lr}
 8005332:	460c      	mov	r4, r1
 8005334:	2101      	movs	r1, #1
 8005336:	f7ff febd 	bl	80050b4 <_Balloc>
 800533a:	4602      	mov	r2, r0
 800533c:	b928      	cbnz	r0, 800534a <__i2b+0x1a>
 800533e:	f240 1145 	movw	r1, #325	@ 0x145
 8005342:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <__i2b+0x24>)
 8005344:	4804      	ldr	r0, [pc, #16]	@ (8005358 <__i2b+0x28>)
 8005346:	f001 fc29 	bl	8006b9c <__assert_func>
 800534a:	2301      	movs	r3, #1
 800534c:	6144      	str	r4, [r0, #20]
 800534e:	6103      	str	r3, [r0, #16]
 8005350:	bd10      	pop	{r4, pc}
 8005352:	bf00      	nop
 8005354:	080079d7 	.word	0x080079d7
 8005358:	080079e8 	.word	0x080079e8

0800535c <__multiply>:
 800535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005360:	4614      	mov	r4, r2
 8005362:	690a      	ldr	r2, [r1, #16]
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	460f      	mov	r7, r1
 8005368:	429a      	cmp	r2, r3
 800536a:	bfa2      	ittt	ge
 800536c:	4623      	movge	r3, r4
 800536e:	460c      	movge	r4, r1
 8005370:	461f      	movge	r7, r3
 8005372:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005376:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	6861      	ldr	r1, [r4, #4]
 800537e:	eb0a 0609 	add.w	r6, sl, r9
 8005382:	42b3      	cmp	r3, r6
 8005384:	b085      	sub	sp, #20
 8005386:	bfb8      	it	lt
 8005388:	3101      	addlt	r1, #1
 800538a:	f7ff fe93 	bl	80050b4 <_Balloc>
 800538e:	b930      	cbnz	r0, 800539e <__multiply+0x42>
 8005390:	4602      	mov	r2, r0
 8005392:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005396:	4b43      	ldr	r3, [pc, #268]	@ (80054a4 <__multiply+0x148>)
 8005398:	4843      	ldr	r0, [pc, #268]	@ (80054a8 <__multiply+0x14c>)
 800539a:	f001 fbff 	bl	8006b9c <__assert_func>
 800539e:	f100 0514 	add.w	r5, r0, #20
 80053a2:	462b      	mov	r3, r5
 80053a4:	2200      	movs	r2, #0
 80053a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053aa:	4543      	cmp	r3, r8
 80053ac:	d321      	bcc.n	80053f2 <__multiply+0x96>
 80053ae:	f107 0114 	add.w	r1, r7, #20
 80053b2:	f104 0214 	add.w	r2, r4, #20
 80053b6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80053ba:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80053be:	9302      	str	r3, [sp, #8]
 80053c0:	1b13      	subs	r3, r2, r4
 80053c2:	3b15      	subs	r3, #21
 80053c4:	f023 0303 	bic.w	r3, r3, #3
 80053c8:	3304      	adds	r3, #4
 80053ca:	f104 0715 	add.w	r7, r4, #21
 80053ce:	42ba      	cmp	r2, r7
 80053d0:	bf38      	it	cc
 80053d2:	2304      	movcc	r3, #4
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	9103      	str	r1, [sp, #12]
 80053da:	428b      	cmp	r3, r1
 80053dc:	d80c      	bhi.n	80053f8 <__multiply+0x9c>
 80053de:	2e00      	cmp	r6, #0
 80053e0:	dd03      	ble.n	80053ea <__multiply+0x8e>
 80053e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d05a      	beq.n	80054a0 <__multiply+0x144>
 80053ea:	6106      	str	r6, [r0, #16]
 80053ec:	b005      	add	sp, #20
 80053ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f2:	f843 2b04 	str.w	r2, [r3], #4
 80053f6:	e7d8      	b.n	80053aa <__multiply+0x4e>
 80053f8:	f8b1 a000 	ldrh.w	sl, [r1]
 80053fc:	f1ba 0f00 	cmp.w	sl, #0
 8005400:	d023      	beq.n	800544a <__multiply+0xee>
 8005402:	46a9      	mov	r9, r5
 8005404:	f04f 0c00 	mov.w	ip, #0
 8005408:	f104 0e14 	add.w	lr, r4, #20
 800540c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005410:	f8d9 3000 	ldr.w	r3, [r9]
 8005414:	fa1f fb87 	uxth.w	fp, r7
 8005418:	b29b      	uxth	r3, r3
 800541a:	fb0a 330b 	mla	r3, sl, fp, r3
 800541e:	4463      	add	r3, ip
 8005420:	f8d9 c000 	ldr.w	ip, [r9]
 8005424:	0c3f      	lsrs	r7, r7, #16
 8005426:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800542a:	fb0a c707 	mla	r7, sl, r7, ip
 800542e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005432:	b29b      	uxth	r3, r3
 8005434:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005438:	4572      	cmp	r2, lr
 800543a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800543e:	f849 3b04 	str.w	r3, [r9], #4
 8005442:	d8e3      	bhi.n	800540c <__multiply+0xb0>
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	f845 c003 	str.w	ip, [r5, r3]
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	3104      	adds	r1, #4
 800544e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005452:	f1b9 0f00 	cmp.w	r9, #0
 8005456:	d021      	beq.n	800549c <__multiply+0x140>
 8005458:	46ae      	mov	lr, r5
 800545a:	f04f 0a00 	mov.w	sl, #0
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	f104 0c14 	add.w	ip, r4, #20
 8005464:	f8bc b000 	ldrh.w	fp, [ip]
 8005468:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800546c:	b29b      	uxth	r3, r3
 800546e:	fb09 770b 	mla	r7, r9, fp, r7
 8005472:	4457      	add	r7, sl
 8005474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005478:	f84e 3b04 	str.w	r3, [lr], #4
 800547c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005484:	f8be 3000 	ldrh.w	r3, [lr]
 8005488:	4562      	cmp	r2, ip
 800548a:	fb09 330a 	mla	r3, r9, sl, r3
 800548e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005492:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005496:	d8e5      	bhi.n	8005464 <__multiply+0x108>
 8005498:	9f01      	ldr	r7, [sp, #4]
 800549a:	51eb      	str	r3, [r5, r7]
 800549c:	3504      	adds	r5, #4
 800549e:	e79a      	b.n	80053d6 <__multiply+0x7a>
 80054a0:	3e01      	subs	r6, #1
 80054a2:	e79c      	b.n	80053de <__multiply+0x82>
 80054a4:	080079d7 	.word	0x080079d7
 80054a8:	080079e8 	.word	0x080079e8

080054ac <__pow5mult>:
 80054ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b0:	4615      	mov	r5, r2
 80054b2:	f012 0203 	ands.w	r2, r2, #3
 80054b6:	4607      	mov	r7, r0
 80054b8:	460e      	mov	r6, r1
 80054ba:	d007      	beq.n	80054cc <__pow5mult+0x20>
 80054bc:	4c25      	ldr	r4, [pc, #148]	@ (8005554 <__pow5mult+0xa8>)
 80054be:	3a01      	subs	r2, #1
 80054c0:	2300      	movs	r3, #0
 80054c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054c6:	f7ff fe57 	bl	8005178 <__multadd>
 80054ca:	4606      	mov	r6, r0
 80054cc:	10ad      	asrs	r5, r5, #2
 80054ce:	d03d      	beq.n	800554c <__pow5mult+0xa0>
 80054d0:	69fc      	ldr	r4, [r7, #28]
 80054d2:	b97c      	cbnz	r4, 80054f4 <__pow5mult+0x48>
 80054d4:	2010      	movs	r0, #16
 80054d6:	f7ff fd37 	bl	8004f48 <malloc>
 80054da:	4602      	mov	r2, r0
 80054dc:	61f8      	str	r0, [r7, #28]
 80054de:	b928      	cbnz	r0, 80054ec <__pow5mult+0x40>
 80054e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80054e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005558 <__pow5mult+0xac>)
 80054e6:	481d      	ldr	r0, [pc, #116]	@ (800555c <__pow5mult+0xb0>)
 80054e8:	f001 fb58 	bl	8006b9c <__assert_func>
 80054ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054f0:	6004      	str	r4, [r0, #0]
 80054f2:	60c4      	str	r4, [r0, #12]
 80054f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80054f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054fc:	b94c      	cbnz	r4, 8005512 <__pow5mult+0x66>
 80054fe:	f240 2171 	movw	r1, #625	@ 0x271
 8005502:	4638      	mov	r0, r7
 8005504:	f7ff ff14 	bl	8005330 <__i2b>
 8005508:	2300      	movs	r3, #0
 800550a:	4604      	mov	r4, r0
 800550c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005510:	6003      	str	r3, [r0, #0]
 8005512:	f04f 0900 	mov.w	r9, #0
 8005516:	07eb      	lsls	r3, r5, #31
 8005518:	d50a      	bpl.n	8005530 <__pow5mult+0x84>
 800551a:	4631      	mov	r1, r6
 800551c:	4622      	mov	r2, r4
 800551e:	4638      	mov	r0, r7
 8005520:	f7ff ff1c 	bl	800535c <__multiply>
 8005524:	4680      	mov	r8, r0
 8005526:	4631      	mov	r1, r6
 8005528:	4638      	mov	r0, r7
 800552a:	f7ff fe03 	bl	8005134 <_Bfree>
 800552e:	4646      	mov	r6, r8
 8005530:	106d      	asrs	r5, r5, #1
 8005532:	d00b      	beq.n	800554c <__pow5mult+0xa0>
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	b938      	cbnz	r0, 8005548 <__pow5mult+0x9c>
 8005538:	4622      	mov	r2, r4
 800553a:	4621      	mov	r1, r4
 800553c:	4638      	mov	r0, r7
 800553e:	f7ff ff0d 	bl	800535c <__multiply>
 8005542:	6020      	str	r0, [r4, #0]
 8005544:	f8c0 9000 	str.w	r9, [r0]
 8005548:	4604      	mov	r4, r0
 800554a:	e7e4      	b.n	8005516 <__pow5mult+0x6a>
 800554c:	4630      	mov	r0, r6
 800554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005552:	bf00      	nop
 8005554:	08007a44 	.word	0x08007a44
 8005558:	08007968 	.word	0x08007968
 800555c:	080079e8 	.word	0x080079e8

08005560 <__lshift>:
 8005560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	460c      	mov	r4, r1
 8005566:	4607      	mov	r7, r0
 8005568:	4691      	mov	r9, r2
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	6849      	ldr	r1, [r1, #4]
 800556e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005572:	68a3      	ldr	r3, [r4, #8]
 8005574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005578:	f108 0601 	add.w	r6, r8, #1
 800557c:	42b3      	cmp	r3, r6
 800557e:	db0b      	blt.n	8005598 <__lshift+0x38>
 8005580:	4638      	mov	r0, r7
 8005582:	f7ff fd97 	bl	80050b4 <_Balloc>
 8005586:	4605      	mov	r5, r0
 8005588:	b948      	cbnz	r0, 800559e <__lshift+0x3e>
 800558a:	4602      	mov	r2, r0
 800558c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005590:	4b27      	ldr	r3, [pc, #156]	@ (8005630 <__lshift+0xd0>)
 8005592:	4828      	ldr	r0, [pc, #160]	@ (8005634 <__lshift+0xd4>)
 8005594:	f001 fb02 	bl	8006b9c <__assert_func>
 8005598:	3101      	adds	r1, #1
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	e7ee      	b.n	800557c <__lshift+0x1c>
 800559e:	2300      	movs	r3, #0
 80055a0:	f100 0114 	add.w	r1, r0, #20
 80055a4:	f100 0210 	add.w	r2, r0, #16
 80055a8:	4618      	mov	r0, r3
 80055aa:	4553      	cmp	r3, sl
 80055ac:	db33      	blt.n	8005616 <__lshift+0xb6>
 80055ae:	6920      	ldr	r0, [r4, #16]
 80055b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055b4:	f104 0314 	add.w	r3, r4, #20
 80055b8:	f019 091f 	ands.w	r9, r9, #31
 80055bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055c4:	d02b      	beq.n	800561e <__lshift+0xbe>
 80055c6:	468a      	mov	sl, r1
 80055c8:	2200      	movs	r2, #0
 80055ca:	f1c9 0e20 	rsb	lr, r9, #32
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	fa00 f009 	lsl.w	r0, r0, r9
 80055d4:	4310      	orrs	r0, r2
 80055d6:	f84a 0b04 	str.w	r0, [sl], #4
 80055da:	f853 2b04 	ldr.w	r2, [r3], #4
 80055de:	459c      	cmp	ip, r3
 80055e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80055e4:	d8f3      	bhi.n	80055ce <__lshift+0x6e>
 80055e6:	ebac 0304 	sub.w	r3, ip, r4
 80055ea:	3b15      	subs	r3, #21
 80055ec:	f023 0303 	bic.w	r3, r3, #3
 80055f0:	3304      	adds	r3, #4
 80055f2:	f104 0015 	add.w	r0, r4, #21
 80055f6:	4584      	cmp	ip, r0
 80055f8:	bf38      	it	cc
 80055fa:	2304      	movcc	r3, #4
 80055fc:	50ca      	str	r2, [r1, r3]
 80055fe:	b10a      	cbz	r2, 8005604 <__lshift+0xa4>
 8005600:	f108 0602 	add.w	r6, r8, #2
 8005604:	3e01      	subs	r6, #1
 8005606:	4638      	mov	r0, r7
 8005608:	4621      	mov	r1, r4
 800560a:	612e      	str	r6, [r5, #16]
 800560c:	f7ff fd92 	bl	8005134 <_Bfree>
 8005610:	4628      	mov	r0, r5
 8005612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005616:	f842 0f04 	str.w	r0, [r2, #4]!
 800561a:	3301      	adds	r3, #1
 800561c:	e7c5      	b.n	80055aa <__lshift+0x4a>
 800561e:	3904      	subs	r1, #4
 8005620:	f853 2b04 	ldr.w	r2, [r3], #4
 8005624:	459c      	cmp	ip, r3
 8005626:	f841 2f04 	str.w	r2, [r1, #4]!
 800562a:	d8f9      	bhi.n	8005620 <__lshift+0xc0>
 800562c:	e7ea      	b.n	8005604 <__lshift+0xa4>
 800562e:	bf00      	nop
 8005630:	080079d7 	.word	0x080079d7
 8005634:	080079e8 	.word	0x080079e8

08005638 <__mcmp>:
 8005638:	4603      	mov	r3, r0
 800563a:	690a      	ldr	r2, [r1, #16]
 800563c:	6900      	ldr	r0, [r0, #16]
 800563e:	b530      	push	{r4, r5, lr}
 8005640:	1a80      	subs	r0, r0, r2
 8005642:	d10e      	bne.n	8005662 <__mcmp+0x2a>
 8005644:	3314      	adds	r3, #20
 8005646:	3114      	adds	r1, #20
 8005648:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800564c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005650:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005654:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005658:	4295      	cmp	r5, r2
 800565a:	d003      	beq.n	8005664 <__mcmp+0x2c>
 800565c:	d205      	bcs.n	800566a <__mcmp+0x32>
 800565e:	f04f 30ff 	mov.w	r0, #4294967295
 8005662:	bd30      	pop	{r4, r5, pc}
 8005664:	42a3      	cmp	r3, r4
 8005666:	d3f3      	bcc.n	8005650 <__mcmp+0x18>
 8005668:	e7fb      	b.n	8005662 <__mcmp+0x2a>
 800566a:	2001      	movs	r0, #1
 800566c:	e7f9      	b.n	8005662 <__mcmp+0x2a>
	...

08005670 <__mdiff>:
 8005670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	4689      	mov	r9, r1
 8005676:	4606      	mov	r6, r0
 8005678:	4611      	mov	r1, r2
 800567a:	4648      	mov	r0, r9
 800567c:	4614      	mov	r4, r2
 800567e:	f7ff ffdb 	bl	8005638 <__mcmp>
 8005682:	1e05      	subs	r5, r0, #0
 8005684:	d112      	bne.n	80056ac <__mdiff+0x3c>
 8005686:	4629      	mov	r1, r5
 8005688:	4630      	mov	r0, r6
 800568a:	f7ff fd13 	bl	80050b4 <_Balloc>
 800568e:	4602      	mov	r2, r0
 8005690:	b928      	cbnz	r0, 800569e <__mdiff+0x2e>
 8005692:	f240 2137 	movw	r1, #567	@ 0x237
 8005696:	4b3e      	ldr	r3, [pc, #248]	@ (8005790 <__mdiff+0x120>)
 8005698:	483e      	ldr	r0, [pc, #248]	@ (8005794 <__mdiff+0x124>)
 800569a:	f001 fa7f 	bl	8006b9c <__assert_func>
 800569e:	2301      	movs	r3, #1
 80056a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056a4:	4610      	mov	r0, r2
 80056a6:	b003      	add	sp, #12
 80056a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ac:	bfbc      	itt	lt
 80056ae:	464b      	movlt	r3, r9
 80056b0:	46a1      	movlt	r9, r4
 80056b2:	4630      	mov	r0, r6
 80056b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80056b8:	bfba      	itte	lt
 80056ba:	461c      	movlt	r4, r3
 80056bc:	2501      	movlt	r5, #1
 80056be:	2500      	movge	r5, #0
 80056c0:	f7ff fcf8 	bl	80050b4 <_Balloc>
 80056c4:	4602      	mov	r2, r0
 80056c6:	b918      	cbnz	r0, 80056d0 <__mdiff+0x60>
 80056c8:	f240 2145 	movw	r1, #581	@ 0x245
 80056cc:	4b30      	ldr	r3, [pc, #192]	@ (8005790 <__mdiff+0x120>)
 80056ce:	e7e3      	b.n	8005698 <__mdiff+0x28>
 80056d0:	f100 0b14 	add.w	fp, r0, #20
 80056d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80056d8:	f109 0310 	add.w	r3, r9, #16
 80056dc:	60c5      	str	r5, [r0, #12]
 80056de:	f04f 0c00 	mov.w	ip, #0
 80056e2:	f109 0514 	add.w	r5, r9, #20
 80056e6:	46d9      	mov	r9, fp
 80056e8:	6926      	ldr	r6, [r4, #16]
 80056ea:	f104 0e14 	add.w	lr, r4, #20
 80056ee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80056f2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	9b01      	ldr	r3, [sp, #4]
 80056fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80056fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005702:	b281      	uxth	r1, r0
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	fa1f f38a 	uxth.w	r3, sl
 800570a:	1a5b      	subs	r3, r3, r1
 800570c:	0c00      	lsrs	r0, r0, #16
 800570e:	4463      	add	r3, ip
 8005710:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005714:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005718:	b29b      	uxth	r3, r3
 800571a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800571e:	4576      	cmp	r6, lr
 8005720:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005724:	f849 3b04 	str.w	r3, [r9], #4
 8005728:	d8e6      	bhi.n	80056f8 <__mdiff+0x88>
 800572a:	1b33      	subs	r3, r6, r4
 800572c:	3b15      	subs	r3, #21
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	3415      	adds	r4, #21
 8005734:	3304      	adds	r3, #4
 8005736:	42a6      	cmp	r6, r4
 8005738:	bf38      	it	cc
 800573a:	2304      	movcc	r3, #4
 800573c:	441d      	add	r5, r3
 800573e:	445b      	add	r3, fp
 8005740:	461e      	mov	r6, r3
 8005742:	462c      	mov	r4, r5
 8005744:	4544      	cmp	r4, r8
 8005746:	d30e      	bcc.n	8005766 <__mdiff+0xf6>
 8005748:	f108 0103 	add.w	r1, r8, #3
 800574c:	1b49      	subs	r1, r1, r5
 800574e:	f021 0103 	bic.w	r1, r1, #3
 8005752:	3d03      	subs	r5, #3
 8005754:	45a8      	cmp	r8, r5
 8005756:	bf38      	it	cc
 8005758:	2100      	movcc	r1, #0
 800575a:	440b      	add	r3, r1
 800575c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005760:	b199      	cbz	r1, 800578a <__mdiff+0x11a>
 8005762:	6117      	str	r7, [r2, #16]
 8005764:	e79e      	b.n	80056a4 <__mdiff+0x34>
 8005766:	46e6      	mov	lr, ip
 8005768:	f854 1b04 	ldr.w	r1, [r4], #4
 800576c:	fa1f fc81 	uxth.w	ip, r1
 8005770:	44f4      	add	ip, lr
 8005772:	0c08      	lsrs	r0, r1, #16
 8005774:	4471      	add	r1, lr
 8005776:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800577a:	b289      	uxth	r1, r1
 800577c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005780:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005784:	f846 1b04 	str.w	r1, [r6], #4
 8005788:	e7dc      	b.n	8005744 <__mdiff+0xd4>
 800578a:	3f01      	subs	r7, #1
 800578c:	e7e6      	b.n	800575c <__mdiff+0xec>
 800578e:	bf00      	nop
 8005790:	080079d7 	.word	0x080079d7
 8005794:	080079e8 	.word	0x080079e8

08005798 <__ulp>:
 8005798:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <__ulp+0x3c>)
 800579a:	400b      	ands	r3, r1
 800579c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	dc08      	bgt.n	80057b6 <__ulp+0x1e>
 80057a4:	425b      	negs	r3, r3
 80057a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80057aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80057ae:	da04      	bge.n	80057ba <__ulp+0x22>
 80057b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80057b4:	4113      	asrs	r3, r2
 80057b6:	2200      	movs	r2, #0
 80057b8:	e008      	b.n	80057cc <__ulp+0x34>
 80057ba:	f1a2 0314 	sub.w	r3, r2, #20
 80057be:	2b1e      	cmp	r3, #30
 80057c0:	bfd6      	itet	le
 80057c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80057c6:	2201      	movgt	r2, #1
 80057c8:	40da      	lsrle	r2, r3
 80057ca:	2300      	movs	r3, #0
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	7ff00000 	.word	0x7ff00000

080057d8 <__b2d>:
 80057d8:	6902      	ldr	r2, [r0, #16]
 80057da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057dc:	f100 0614 	add.w	r6, r0, #20
 80057e0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80057e4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80057e8:	4f1e      	ldr	r7, [pc, #120]	@ (8005864 <__b2d+0x8c>)
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff fd54 	bl	8005298 <__hi0bits>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f1c0 0020 	rsb	r0, r0, #32
 80057f6:	2b0a      	cmp	r3, #10
 80057f8:	f1a2 0504 	sub.w	r5, r2, #4
 80057fc:	6008      	str	r0, [r1, #0]
 80057fe:	dc12      	bgt.n	8005826 <__b2d+0x4e>
 8005800:	42ae      	cmp	r6, r5
 8005802:	bf2c      	ite	cs
 8005804:	2200      	movcs	r2, #0
 8005806:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800580a:	f1c3 0c0b 	rsb	ip, r3, #11
 800580e:	3315      	adds	r3, #21
 8005810:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005814:	fa04 f303 	lsl.w	r3, r4, r3
 8005818:	fa22 f20c 	lsr.w	r2, r2, ip
 800581c:	ea4e 0107 	orr.w	r1, lr, r7
 8005820:	431a      	orrs	r2, r3
 8005822:	4610      	mov	r0, r2
 8005824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005826:	42ae      	cmp	r6, r5
 8005828:	bf36      	itet	cc
 800582a:	f1a2 0508 	subcc.w	r5, r2, #8
 800582e:	2200      	movcs	r2, #0
 8005830:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005834:	3b0b      	subs	r3, #11
 8005836:	d012      	beq.n	800585e <__b2d+0x86>
 8005838:	f1c3 0720 	rsb	r7, r3, #32
 800583c:	fa22 f107 	lsr.w	r1, r2, r7
 8005840:	409c      	lsls	r4, r3
 8005842:	430c      	orrs	r4, r1
 8005844:	42b5      	cmp	r5, r6
 8005846:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800584a:	bf94      	ite	ls
 800584c:	2400      	movls	r4, #0
 800584e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005852:	409a      	lsls	r2, r3
 8005854:	40fc      	lsrs	r4, r7
 8005856:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800585a:	4322      	orrs	r2, r4
 800585c:	e7e1      	b.n	8005822 <__b2d+0x4a>
 800585e:	ea44 0107 	orr.w	r1, r4, r7
 8005862:	e7de      	b.n	8005822 <__b2d+0x4a>
 8005864:	3ff00000 	.word	0x3ff00000

08005868 <__d2b>:
 8005868:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800586c:	2101      	movs	r1, #1
 800586e:	4690      	mov	r8, r2
 8005870:	4699      	mov	r9, r3
 8005872:	9e08      	ldr	r6, [sp, #32]
 8005874:	f7ff fc1e 	bl	80050b4 <_Balloc>
 8005878:	4604      	mov	r4, r0
 800587a:	b930      	cbnz	r0, 800588a <__d2b+0x22>
 800587c:	4602      	mov	r2, r0
 800587e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005882:	4b23      	ldr	r3, [pc, #140]	@ (8005910 <__d2b+0xa8>)
 8005884:	4823      	ldr	r0, [pc, #140]	@ (8005914 <__d2b+0xac>)
 8005886:	f001 f989 	bl	8006b9c <__assert_func>
 800588a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800588e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005892:	b10d      	cbz	r5, 8005898 <__d2b+0x30>
 8005894:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	f1b8 0300 	subs.w	r3, r8, #0
 800589e:	d024      	beq.n	80058ea <__d2b+0x82>
 80058a0:	4668      	mov	r0, sp
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	f7ff fd17 	bl	80052d6 <__lo0bits>
 80058a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058ac:	b1d8      	cbz	r0, 80058e6 <__d2b+0x7e>
 80058ae:	f1c0 0320 	rsb	r3, r0, #32
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	430b      	orrs	r3, r1
 80058b8:	40c2      	lsrs	r2, r0
 80058ba:	6163      	str	r3, [r4, #20]
 80058bc:	9201      	str	r2, [sp, #4]
 80058be:	9b01      	ldr	r3, [sp, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf0c      	ite	eq
 80058c4:	2201      	moveq	r2, #1
 80058c6:	2202      	movne	r2, #2
 80058c8:	61a3      	str	r3, [r4, #24]
 80058ca:	6122      	str	r2, [r4, #16]
 80058cc:	b1ad      	cbz	r5, 80058fa <__d2b+0x92>
 80058ce:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80058d2:	4405      	add	r5, r0
 80058d4:	6035      	str	r5, [r6, #0]
 80058d6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80058da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058dc:	6018      	str	r0, [r3, #0]
 80058de:	4620      	mov	r0, r4
 80058e0:	b002      	add	sp, #8
 80058e2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80058e6:	6161      	str	r1, [r4, #20]
 80058e8:	e7e9      	b.n	80058be <__d2b+0x56>
 80058ea:	a801      	add	r0, sp, #4
 80058ec:	f7ff fcf3 	bl	80052d6 <__lo0bits>
 80058f0:	9b01      	ldr	r3, [sp, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	6163      	str	r3, [r4, #20]
 80058f6:	3020      	adds	r0, #32
 80058f8:	e7e7      	b.n	80058ca <__d2b+0x62>
 80058fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80058fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005902:	6030      	str	r0, [r6, #0]
 8005904:	6918      	ldr	r0, [r3, #16]
 8005906:	f7ff fcc7 	bl	8005298 <__hi0bits>
 800590a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800590e:	e7e4      	b.n	80058da <__d2b+0x72>
 8005910:	080079d7 	.word	0x080079d7
 8005914:	080079e8 	.word	0x080079e8

08005918 <__ratio>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	b085      	sub	sp, #20
 800591e:	e9cd 1000 	strd	r1, r0, [sp]
 8005922:	a902      	add	r1, sp, #8
 8005924:	f7ff ff58 	bl	80057d8 <__b2d>
 8005928:	468b      	mov	fp, r1
 800592a:	4606      	mov	r6, r0
 800592c:	460f      	mov	r7, r1
 800592e:	9800      	ldr	r0, [sp, #0]
 8005930:	a903      	add	r1, sp, #12
 8005932:	f7ff ff51 	bl	80057d8 <__b2d>
 8005936:	460d      	mov	r5, r1
 8005938:	9b01      	ldr	r3, [sp, #4]
 800593a:	4689      	mov	r9, r1
 800593c:	6919      	ldr	r1, [r3, #16]
 800593e:	9b00      	ldr	r3, [sp, #0]
 8005940:	4604      	mov	r4, r0
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	4630      	mov	r0, r6
 8005946:	1ac9      	subs	r1, r1, r3
 8005948:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfcd      	iteet	gt
 8005956:	463a      	movgt	r2, r7
 8005958:	462a      	movle	r2, r5
 800595a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800595e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005962:	bfd8      	it	le
 8005964:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005968:	464b      	mov	r3, r9
 800596a:	4622      	mov	r2, r4
 800596c:	4659      	mov	r1, fp
 800596e:	f7fa fedd 	bl	800072c <__aeabi_ddiv>
 8005972:	b005      	add	sp, #20
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005978 <__copybits>:
 8005978:	3901      	subs	r1, #1
 800597a:	b570      	push	{r4, r5, r6, lr}
 800597c:	1149      	asrs	r1, r1, #5
 800597e:	6914      	ldr	r4, [r2, #16]
 8005980:	3101      	adds	r1, #1
 8005982:	f102 0314 	add.w	r3, r2, #20
 8005986:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800598a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800598e:	1f05      	subs	r5, r0, #4
 8005990:	42a3      	cmp	r3, r4
 8005992:	d30c      	bcc.n	80059ae <__copybits+0x36>
 8005994:	1aa3      	subs	r3, r4, r2
 8005996:	3b11      	subs	r3, #17
 8005998:	f023 0303 	bic.w	r3, r3, #3
 800599c:	3211      	adds	r2, #17
 800599e:	42a2      	cmp	r2, r4
 80059a0:	bf88      	it	hi
 80059a2:	2300      	movhi	r3, #0
 80059a4:	4418      	add	r0, r3
 80059a6:	2300      	movs	r3, #0
 80059a8:	4288      	cmp	r0, r1
 80059aa:	d305      	bcc.n	80059b8 <__copybits+0x40>
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80059b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80059b6:	e7eb      	b.n	8005990 <__copybits+0x18>
 80059b8:	f840 3b04 	str.w	r3, [r0], #4
 80059bc:	e7f4      	b.n	80059a8 <__copybits+0x30>

080059be <__any_on>:
 80059be:	f100 0214 	add.w	r2, r0, #20
 80059c2:	6900      	ldr	r0, [r0, #16]
 80059c4:	114b      	asrs	r3, r1, #5
 80059c6:	4298      	cmp	r0, r3
 80059c8:	b510      	push	{r4, lr}
 80059ca:	db11      	blt.n	80059f0 <__any_on+0x32>
 80059cc:	dd0a      	ble.n	80059e4 <__any_on+0x26>
 80059ce:	f011 011f 	ands.w	r1, r1, #31
 80059d2:	d007      	beq.n	80059e4 <__any_on+0x26>
 80059d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80059d8:	fa24 f001 	lsr.w	r0, r4, r1
 80059dc:	fa00 f101 	lsl.w	r1, r0, r1
 80059e0:	428c      	cmp	r4, r1
 80059e2:	d10b      	bne.n	80059fc <__any_on+0x3e>
 80059e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d803      	bhi.n	80059f4 <__any_on+0x36>
 80059ec:	2000      	movs	r0, #0
 80059ee:	bd10      	pop	{r4, pc}
 80059f0:	4603      	mov	r3, r0
 80059f2:	e7f7      	b.n	80059e4 <__any_on+0x26>
 80059f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059f8:	2900      	cmp	r1, #0
 80059fa:	d0f5      	beq.n	80059e8 <__any_on+0x2a>
 80059fc:	2001      	movs	r0, #1
 80059fe:	e7f6      	b.n	80059ee <__any_on+0x30>

08005a00 <sulp>:
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	460f      	mov	r7, r1
 8005a06:	4690      	mov	r8, r2
 8005a08:	f7ff fec6 	bl	8005798 <__ulp>
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	460d      	mov	r5, r1
 8005a10:	f1b8 0f00 	cmp.w	r8, #0
 8005a14:	d011      	beq.n	8005a3a <sulp+0x3a>
 8005a16:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a1a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dd0b      	ble.n	8005a3a <sulp+0x3a>
 8005a22:	2400      	movs	r4, #0
 8005a24:	051b      	lsls	r3, r3, #20
 8005a26:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a2a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a2e:	4622      	mov	r2, r4
 8005a30:	462b      	mov	r3, r5
 8005a32:	f7fa fd51 	bl	80004d8 <__aeabi_dmul>
 8005a36:	4604      	mov	r4, r0
 8005a38:	460d      	mov	r5, r1
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a42:	0000      	movs	r0, r0
 8005a44:	0000      	movs	r0, r0
	...

08005a48 <_strtod_l>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	b09f      	sub	sp, #124	@ 0x7c
 8005a4e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005a50:	2200      	movs	r2, #0
 8005a52:	460c      	mov	r4, r1
 8005a54:	921a      	str	r2, [sp, #104]	@ 0x68
 8005a56:	f04f 0a00 	mov.w	sl, #0
 8005a5a:	f04f 0b00 	mov.w	fp, #0
 8005a5e:	460a      	mov	r2, r1
 8005a60:	9005      	str	r0, [sp, #20]
 8005a62:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a64:	7811      	ldrb	r1, [r2, #0]
 8005a66:	292b      	cmp	r1, #43	@ 0x2b
 8005a68:	d048      	beq.n	8005afc <_strtod_l+0xb4>
 8005a6a:	d836      	bhi.n	8005ada <_strtod_l+0x92>
 8005a6c:	290d      	cmp	r1, #13
 8005a6e:	d830      	bhi.n	8005ad2 <_strtod_l+0x8a>
 8005a70:	2908      	cmp	r1, #8
 8005a72:	d830      	bhi.n	8005ad6 <_strtod_l+0x8e>
 8005a74:	2900      	cmp	r1, #0
 8005a76:	d039      	beq.n	8005aec <_strtod_l+0xa4>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005a7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005a7e:	782a      	ldrb	r2, [r5, #0]
 8005a80:	2a30      	cmp	r2, #48	@ 0x30
 8005a82:	f040 80b1 	bne.w	8005be8 <_strtod_l+0x1a0>
 8005a86:	786a      	ldrb	r2, [r5, #1]
 8005a88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a8c:	2a58      	cmp	r2, #88	@ 0x58
 8005a8e:	d16c      	bne.n	8005b6a <_strtod_l+0x122>
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a94:	4a8e      	ldr	r2, [pc, #568]	@ (8005cd0 <_strtod_l+0x288>)
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	ab1a      	add	r3, sp, #104	@ 0x68
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	9805      	ldr	r0, [sp, #20]
 8005a9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005aa0:	a919      	add	r1, sp, #100	@ 0x64
 8005aa2:	f001 f915 	bl	8006cd0 <__gethex>
 8005aa6:	f010 060f 	ands.w	r6, r0, #15
 8005aaa:	4604      	mov	r4, r0
 8005aac:	d005      	beq.n	8005aba <_strtod_l+0x72>
 8005aae:	2e06      	cmp	r6, #6
 8005ab0:	d126      	bne.n	8005b00 <_strtod_l+0xb8>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	9519      	str	r5, [sp, #100]	@ 0x64
 8005ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 8584 	bne.w	80065ca <_strtod_l+0xb82>
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ac4:	b1bb      	cbz	r3, 8005af6 <_strtod_l+0xae>
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005acc:	b01f      	add	sp, #124	@ 0x7c
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad2:	2920      	cmp	r1, #32
 8005ad4:	d1d0      	bne.n	8005a78 <_strtod_l+0x30>
 8005ad6:	3201      	adds	r2, #1
 8005ad8:	e7c3      	b.n	8005a62 <_strtod_l+0x1a>
 8005ada:	292d      	cmp	r1, #45	@ 0x2d
 8005adc:	d1cc      	bne.n	8005a78 <_strtod_l+0x30>
 8005ade:	2101      	movs	r1, #1
 8005ae0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005ae2:	1c51      	adds	r1, r2, #1
 8005ae4:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ae6:	7852      	ldrb	r2, [r2, #1]
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	d1c7      	bne.n	8005a7c <_strtod_l+0x34>
 8005aec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005aee:	9419      	str	r4, [sp, #100]	@ 0x64
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 8568 	bne.w	80065c6 <_strtod_l+0xb7e>
 8005af6:	4650      	mov	r0, sl
 8005af8:	4659      	mov	r1, fp
 8005afa:	e7e7      	b.n	8005acc <_strtod_l+0x84>
 8005afc:	2100      	movs	r1, #0
 8005afe:	e7ef      	b.n	8005ae0 <_strtod_l+0x98>
 8005b00:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005b02:	b13a      	cbz	r2, 8005b14 <_strtod_l+0xcc>
 8005b04:	2135      	movs	r1, #53	@ 0x35
 8005b06:	a81c      	add	r0, sp, #112	@ 0x70
 8005b08:	f7ff ff36 	bl	8005978 <__copybits>
 8005b0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b0e:	9805      	ldr	r0, [sp, #20]
 8005b10:	f7ff fb10 	bl	8005134 <_Bfree>
 8005b14:	3e01      	subs	r6, #1
 8005b16:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005b18:	2e04      	cmp	r6, #4
 8005b1a:	d806      	bhi.n	8005b2a <_strtod_l+0xe2>
 8005b1c:	e8df f006 	tbb	[pc, r6]
 8005b20:	201d0314 	.word	0x201d0314
 8005b24:	14          	.byte	0x14
 8005b25:	00          	.byte	0x00
 8005b26:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005b2a:	05e1      	lsls	r1, r4, #23
 8005b2c:	bf48      	it	mi
 8005b2e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005b32:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b36:	0d1b      	lsrs	r3, r3, #20
 8005b38:	051b      	lsls	r3, r3, #20
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1bd      	bne.n	8005aba <_strtod_l+0x72>
 8005b3e:	f7fe fb29 	bl	8004194 <__errno>
 8005b42:	2322      	movs	r3, #34	@ 0x22
 8005b44:	6003      	str	r3, [r0, #0]
 8005b46:	e7b8      	b.n	8005aba <_strtod_l+0x72>
 8005b48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005b4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005b50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b54:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005b58:	e7e7      	b.n	8005b2a <_strtod_l+0xe2>
 8005b5a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005cd4 <_strtod_l+0x28c>
 8005b5e:	e7e4      	b.n	8005b2a <_strtod_l+0xe2>
 8005b60:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005b64:	f04f 3aff 	mov.w	sl, #4294967295
 8005b68:	e7df      	b.n	8005b2a <_strtod_l+0xe2>
 8005b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b30      	cmp	r3, #48	@ 0x30
 8005b74:	d0f9      	beq.n	8005b6a <_strtod_l+0x122>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d09f      	beq.n	8005aba <_strtod_l+0x72>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b80:	220a      	movs	r2, #10
 8005b82:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b84:	2300      	movs	r3, #0
 8005b86:	461f      	mov	r7, r3
 8005b88:	9308      	str	r3, [sp, #32]
 8005b8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b8c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005b8e:	7805      	ldrb	r5, [r0, #0]
 8005b90:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005b94:	b2d9      	uxtb	r1, r3
 8005b96:	2909      	cmp	r1, #9
 8005b98:	d928      	bls.n	8005bec <_strtod_l+0x1a4>
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	494e      	ldr	r1, [pc, #312]	@ (8005cd8 <_strtod_l+0x290>)
 8005b9e:	f000 ffc7 	bl	8006b30 <strncmp>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d032      	beq.n	8005c0c <_strtod_l+0x1c4>
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	462a      	mov	r2, r5
 8005baa:	4681      	mov	r9, r0
 8005bac:	463d      	mov	r5, r7
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2a65      	cmp	r2, #101	@ 0x65
 8005bb2:	d001      	beq.n	8005bb8 <_strtod_l+0x170>
 8005bb4:	2a45      	cmp	r2, #69	@ 0x45
 8005bb6:	d114      	bne.n	8005be2 <_strtod_l+0x19a>
 8005bb8:	b91d      	cbnz	r5, 8005bc2 <_strtod_l+0x17a>
 8005bba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bbc:	4302      	orrs	r2, r0
 8005bbe:	d095      	beq.n	8005aec <_strtod_l+0xa4>
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005bc4:	1c62      	adds	r2, r4, #1
 8005bc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bc8:	7862      	ldrb	r2, [r4, #1]
 8005bca:	2a2b      	cmp	r2, #43	@ 0x2b
 8005bcc:	d077      	beq.n	8005cbe <_strtod_l+0x276>
 8005bce:	2a2d      	cmp	r2, #45	@ 0x2d
 8005bd0:	d07b      	beq.n	8005cca <_strtod_l+0x282>
 8005bd2:	f04f 0c00 	mov.w	ip, #0
 8005bd6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005bda:	2909      	cmp	r1, #9
 8005bdc:	f240 8082 	bls.w	8005ce4 <_strtod_l+0x29c>
 8005be0:	9419      	str	r4, [sp, #100]	@ 0x64
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	e0a2      	b.n	8005d2e <_strtod_l+0x2e6>
 8005be8:	2300      	movs	r3, #0
 8005bea:	e7c7      	b.n	8005b7c <_strtod_l+0x134>
 8005bec:	2f08      	cmp	r7, #8
 8005bee:	bfd5      	itete	le
 8005bf0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005bf2:	9908      	ldrgt	r1, [sp, #32]
 8005bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bf8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005bfc:	f100 0001 	add.w	r0, r0, #1
 8005c00:	bfd4      	ite	le
 8005c02:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005c04:	9308      	strgt	r3, [sp, #32]
 8005c06:	3701      	adds	r7, #1
 8005c08:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c0a:	e7bf      	b.n	8005b8c <_strtod_l+0x144>
 8005c0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c12:	785a      	ldrb	r2, [r3, #1]
 8005c14:	b37f      	cbz	r7, 8005c76 <_strtod_l+0x22e>
 8005c16:	4681      	mov	r9, r0
 8005c18:	463d      	mov	r5, r7
 8005c1a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005c1e:	2b09      	cmp	r3, #9
 8005c20:	d912      	bls.n	8005c48 <_strtod_l+0x200>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7c4      	b.n	8005bb0 <_strtod_l+0x168>
 8005c26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c28:	3001      	adds	r0, #1
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c2e:	785a      	ldrb	r2, [r3, #1]
 8005c30:	2a30      	cmp	r2, #48	@ 0x30
 8005c32:	d0f8      	beq.n	8005c26 <_strtod_l+0x1de>
 8005c34:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	f200 84cb 	bhi.w	80065d4 <_strtod_l+0xb8c>
 8005c3e:	4681      	mov	r9, r0
 8005c40:	2000      	movs	r0, #0
 8005c42:	4605      	mov	r5, r0
 8005c44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c46:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c48:	3a30      	subs	r2, #48	@ 0x30
 8005c4a:	f100 0301 	add.w	r3, r0, #1
 8005c4e:	d02a      	beq.n	8005ca6 <_strtod_l+0x25e>
 8005c50:	4499      	add	r9, r3
 8005c52:	210a      	movs	r1, #10
 8005c54:	462b      	mov	r3, r5
 8005c56:	eb00 0c05 	add.w	ip, r0, r5
 8005c5a:	4563      	cmp	r3, ip
 8005c5c:	d10d      	bne.n	8005c7a <_strtod_l+0x232>
 8005c5e:	1c69      	adds	r1, r5, #1
 8005c60:	4401      	add	r1, r0
 8005c62:	4428      	add	r0, r5
 8005c64:	2808      	cmp	r0, #8
 8005c66:	dc16      	bgt.n	8005c96 <_strtod_l+0x24e>
 8005c68:	230a      	movs	r3, #10
 8005c6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c6c:	fb03 2300 	mla	r3, r3, r0, r2
 8005c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c72:	2300      	movs	r3, #0
 8005c74:	e018      	b.n	8005ca8 <_strtod_l+0x260>
 8005c76:	4638      	mov	r0, r7
 8005c78:	e7da      	b.n	8005c30 <_strtod_l+0x1e8>
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	f103 0301 	add.w	r3, r3, #1
 8005c80:	dc03      	bgt.n	8005c8a <_strtod_l+0x242>
 8005c82:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005c84:	434e      	muls	r6, r1
 8005c86:	960a      	str	r6, [sp, #40]	@ 0x28
 8005c88:	e7e7      	b.n	8005c5a <_strtod_l+0x212>
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	bfde      	ittt	le
 8005c8e:	9e08      	ldrle	r6, [sp, #32]
 8005c90:	434e      	mulle	r6, r1
 8005c92:	9608      	strle	r6, [sp, #32]
 8005c94:	e7e1      	b.n	8005c5a <_strtod_l+0x212>
 8005c96:	280f      	cmp	r0, #15
 8005c98:	dceb      	bgt.n	8005c72 <_strtod_l+0x22a>
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	9808      	ldr	r0, [sp, #32]
 8005c9e:	fb03 2300 	mla	r3, r3, r0, r2
 8005ca2:	9308      	str	r3, [sp, #32]
 8005ca4:	e7e5      	b.n	8005c72 <_strtod_l+0x22a>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005caa:	460d      	mov	r5, r1
 8005cac:	1c50      	adds	r0, r2, #1
 8005cae:	9019      	str	r0, [sp, #100]	@ 0x64
 8005cb0:	7852      	ldrb	r2, [r2, #1]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	e7b1      	b.n	8005c1a <_strtod_l+0x1d2>
 8005cb6:	f04f 0900 	mov.w	r9, #0
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e77d      	b.n	8005bba <_strtod_l+0x172>
 8005cbe:	f04f 0c00 	mov.w	ip, #0
 8005cc2:	1ca2      	adds	r2, r4, #2
 8005cc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005cc6:	78a2      	ldrb	r2, [r4, #2]
 8005cc8:	e785      	b.n	8005bd6 <_strtod_l+0x18e>
 8005cca:	f04f 0c01 	mov.w	ip, #1
 8005cce:	e7f8      	b.n	8005cc2 <_strtod_l+0x27a>
 8005cd0:	08007b58 	.word	0x08007b58
 8005cd4:	7ff00000 	.word	0x7ff00000
 8005cd8:	08007b40 	.word	0x08007b40
 8005cdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cde:	1c51      	adds	r1, r2, #1
 8005ce0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ce2:	7852      	ldrb	r2, [r2, #1]
 8005ce4:	2a30      	cmp	r2, #48	@ 0x30
 8005ce6:	d0f9      	beq.n	8005cdc <_strtod_l+0x294>
 8005ce8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005cec:	2908      	cmp	r1, #8
 8005cee:	f63f af78 	bhi.w	8005be2 <_strtod_l+0x19a>
 8005cf2:	f04f 080a 	mov.w	r8, #10
 8005cf6:	3a30      	subs	r2, #48	@ 0x30
 8005cf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cfc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005cfe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d00:	1c56      	adds	r6, r2, #1
 8005d02:	9619      	str	r6, [sp, #100]	@ 0x64
 8005d04:	7852      	ldrb	r2, [r2, #1]
 8005d06:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005d0a:	f1be 0f09 	cmp.w	lr, #9
 8005d0e:	d939      	bls.n	8005d84 <_strtod_l+0x33c>
 8005d10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005d16:	1a76      	subs	r6, r6, r1
 8005d18:	2e08      	cmp	r6, #8
 8005d1a:	dc03      	bgt.n	8005d24 <_strtod_l+0x2dc>
 8005d1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d1e:	4588      	cmp	r8, r1
 8005d20:	bfa8      	it	ge
 8005d22:	4688      	movge	r8, r1
 8005d24:	f1bc 0f00 	cmp.w	ip, #0
 8005d28:	d001      	beq.n	8005d2e <_strtod_l+0x2e6>
 8005d2a:	f1c8 0800 	rsb	r8, r8, #0
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	d14e      	bne.n	8005dd0 <_strtod_l+0x388>
 8005d32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d34:	4308      	orrs	r0, r1
 8005d36:	f47f aec0 	bne.w	8005aba <_strtod_l+0x72>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f47f aed6 	bne.w	8005aec <_strtod_l+0xa4>
 8005d40:	2a69      	cmp	r2, #105	@ 0x69
 8005d42:	d028      	beq.n	8005d96 <_strtod_l+0x34e>
 8005d44:	dc25      	bgt.n	8005d92 <_strtod_l+0x34a>
 8005d46:	2a49      	cmp	r2, #73	@ 0x49
 8005d48:	d025      	beq.n	8005d96 <_strtod_l+0x34e>
 8005d4a:	2a4e      	cmp	r2, #78	@ 0x4e
 8005d4c:	f47f aece 	bne.w	8005aec <_strtod_l+0xa4>
 8005d50:	499a      	ldr	r1, [pc, #616]	@ (8005fbc <_strtod_l+0x574>)
 8005d52:	a819      	add	r0, sp, #100	@ 0x64
 8005d54:	f001 f9de 	bl	8007114 <__match>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f43f aec7 	beq.w	8005aec <_strtod_l+0xa4>
 8005d5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b28      	cmp	r3, #40	@ 0x28
 8005d64:	d12e      	bne.n	8005dc4 <_strtod_l+0x37c>
 8005d66:	4996      	ldr	r1, [pc, #600]	@ (8005fc0 <_strtod_l+0x578>)
 8005d68:	aa1c      	add	r2, sp, #112	@ 0x70
 8005d6a:	a819      	add	r0, sp, #100	@ 0x64
 8005d6c:	f001 f9e6 	bl	800713c <__hexnan>
 8005d70:	2805      	cmp	r0, #5
 8005d72:	d127      	bne.n	8005dc4 <_strtod_l+0x37c>
 8005d74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005d76:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005d7a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005d7e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005d82:	e69a      	b.n	8005aba <_strtod_l+0x72>
 8005d84:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d86:	fb08 2101 	mla	r1, r8, r1, r2
 8005d8a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005d8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d90:	e7b5      	b.n	8005cfe <_strtod_l+0x2b6>
 8005d92:	2a6e      	cmp	r2, #110	@ 0x6e
 8005d94:	e7da      	b.n	8005d4c <_strtod_l+0x304>
 8005d96:	498b      	ldr	r1, [pc, #556]	@ (8005fc4 <_strtod_l+0x57c>)
 8005d98:	a819      	add	r0, sp, #100	@ 0x64
 8005d9a:	f001 f9bb 	bl	8007114 <__match>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f43f aea4 	beq.w	8005aec <_strtod_l+0xa4>
 8005da4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005da6:	4988      	ldr	r1, [pc, #544]	@ (8005fc8 <_strtod_l+0x580>)
 8005da8:	3b01      	subs	r3, #1
 8005daa:	a819      	add	r0, sp, #100	@ 0x64
 8005dac:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dae:	f001 f9b1 	bl	8007114 <__match>
 8005db2:	b910      	cbnz	r0, 8005dba <_strtod_l+0x372>
 8005db4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005db6:	3301      	adds	r3, #1
 8005db8:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dba:	f04f 0a00 	mov.w	sl, #0
 8005dbe:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005fcc <_strtod_l+0x584>
 8005dc2:	e67a      	b.n	8005aba <_strtod_l+0x72>
 8005dc4:	4882      	ldr	r0, [pc, #520]	@ (8005fd0 <_strtod_l+0x588>)
 8005dc6:	f000 fee3 	bl	8006b90 <nan>
 8005dca:	4682      	mov	sl, r0
 8005dcc:	468b      	mov	fp, r1
 8005dce:	e674      	b.n	8005aba <_strtod_l+0x72>
 8005dd0:	eba8 0309 	sub.w	r3, r8, r9
 8005dd4:	2f00      	cmp	r7, #0
 8005dd6:	bf08      	it	eq
 8005dd8:	462f      	moveq	r7, r5
 8005dda:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ddc:	2d10      	cmp	r5, #16
 8005dde:	462c      	mov	r4, r5
 8005de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de2:	bfa8      	it	ge
 8005de4:	2410      	movge	r4, #16
 8005de6:	f7fa fafd 	bl	80003e4 <__aeabi_ui2d>
 8005dea:	2d09      	cmp	r5, #9
 8005dec:	4682      	mov	sl, r0
 8005dee:	468b      	mov	fp, r1
 8005df0:	dc11      	bgt.n	8005e16 <_strtod_l+0x3ce>
 8005df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f43f ae60 	beq.w	8005aba <_strtod_l+0x72>
 8005dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfc:	dd76      	ble.n	8005eec <_strtod_l+0x4a4>
 8005dfe:	2b16      	cmp	r3, #22
 8005e00:	dc5d      	bgt.n	8005ebe <_strtod_l+0x476>
 8005e02:	4974      	ldr	r1, [pc, #464]	@ (8005fd4 <_strtod_l+0x58c>)
 8005e04:	4652      	mov	r2, sl
 8005e06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e10:	f7fa fb62 	bl	80004d8 <__aeabi_dmul>
 8005e14:	e7d9      	b.n	8005dca <_strtod_l+0x382>
 8005e16:	4b6f      	ldr	r3, [pc, #444]	@ (8005fd4 <_strtod_l+0x58c>)
 8005e18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005e20:	f7fa fb5a 	bl	80004d8 <__aeabi_dmul>
 8005e24:	4682      	mov	sl, r0
 8005e26:	9808      	ldr	r0, [sp, #32]
 8005e28:	468b      	mov	fp, r1
 8005e2a:	f7fa fadb 	bl	80003e4 <__aeabi_ui2d>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4650      	mov	r0, sl
 8005e34:	4659      	mov	r1, fp
 8005e36:	f7fa f999 	bl	800016c <__adddf3>
 8005e3a:	2d0f      	cmp	r5, #15
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	468b      	mov	fp, r1
 8005e40:	ddd7      	ble.n	8005df2 <_strtod_l+0x3aa>
 8005e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e44:	1b2c      	subs	r4, r5, r4
 8005e46:	441c      	add	r4, r3
 8005e48:	2c00      	cmp	r4, #0
 8005e4a:	f340 8096 	ble.w	8005f7a <_strtod_l+0x532>
 8005e4e:	f014 030f 	ands.w	r3, r4, #15
 8005e52:	d00a      	beq.n	8005e6a <_strtod_l+0x422>
 8005e54:	495f      	ldr	r1, [pc, #380]	@ (8005fd4 <_strtod_l+0x58c>)
 8005e56:	4652      	mov	r2, sl
 8005e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e60:	465b      	mov	r3, fp
 8005e62:	f7fa fb39 	bl	80004d8 <__aeabi_dmul>
 8005e66:	4682      	mov	sl, r0
 8005e68:	468b      	mov	fp, r1
 8005e6a:	f034 040f 	bics.w	r4, r4, #15
 8005e6e:	d073      	beq.n	8005f58 <_strtod_l+0x510>
 8005e70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005e74:	dd48      	ble.n	8005f08 <_strtod_l+0x4c0>
 8005e76:	2400      	movs	r4, #0
 8005e78:	46a0      	mov	r8, r4
 8005e7a:	46a1      	mov	r9, r4
 8005e7c:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e7e:	2322      	movs	r3, #34	@ 0x22
 8005e80:	f04f 0a00 	mov.w	sl, #0
 8005e84:	9a05      	ldr	r2, [sp, #20]
 8005e86:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005fcc <_strtod_l+0x584>
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f43f ae13 	beq.w	8005aba <_strtod_l+0x72>
 8005e94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e96:	9805      	ldr	r0, [sp, #20]
 8005e98:	f7ff f94c 	bl	8005134 <_Bfree>
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	9805      	ldr	r0, [sp, #20]
 8005ea0:	f7ff f948 	bl	8005134 <_Bfree>
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	9805      	ldr	r0, [sp, #20]
 8005ea8:	f7ff f944 	bl	8005134 <_Bfree>
 8005eac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005eae:	9805      	ldr	r0, [sp, #20]
 8005eb0:	f7ff f940 	bl	8005134 <_Bfree>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	9805      	ldr	r0, [sp, #20]
 8005eb8:	f7ff f93c 	bl	8005134 <_Bfree>
 8005ebc:	e5fd      	b.n	8005aba <_strtod_l+0x72>
 8005ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ec0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	dbbc      	blt.n	8005e42 <_strtod_l+0x3fa>
 8005ec8:	4c42      	ldr	r4, [pc, #264]	@ (8005fd4 <_strtod_l+0x58c>)
 8005eca:	f1c5 050f 	rsb	r5, r5, #15
 8005ece:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005ed2:	4652      	mov	r2, sl
 8005ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ed8:	465b      	mov	r3, fp
 8005eda:	f7fa fafd 	bl	80004d8 <__aeabi_dmul>
 8005ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee0:	1b5d      	subs	r5, r3, r5
 8005ee2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005ee6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005eea:	e791      	b.n	8005e10 <_strtod_l+0x3c8>
 8005eec:	3316      	adds	r3, #22
 8005eee:	dba8      	blt.n	8005e42 <_strtod_l+0x3fa>
 8005ef0:	4b38      	ldr	r3, [pc, #224]	@ (8005fd4 <_strtod_l+0x58c>)
 8005ef2:	eba9 0808 	sub.w	r8, r9, r8
 8005ef6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005efa:	4650      	mov	r0, sl
 8005efc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005f00:	4659      	mov	r1, fp
 8005f02:	f7fa fc13 	bl	800072c <__aeabi_ddiv>
 8005f06:	e760      	b.n	8005dca <_strtod_l+0x382>
 8005f08:	4b33      	ldr	r3, [pc, #204]	@ (8005fd8 <_strtod_l+0x590>)
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	9308      	str	r3, [sp, #32]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	4659      	mov	r1, fp
 8005f12:	461e      	mov	r6, r3
 8005f14:	1124      	asrs	r4, r4, #4
 8005f16:	2c01      	cmp	r4, #1
 8005f18:	dc21      	bgt.n	8005f5e <_strtod_l+0x516>
 8005f1a:	b10b      	cbz	r3, 8005f20 <_strtod_l+0x4d8>
 8005f1c:	4682      	mov	sl, r0
 8005f1e:	468b      	mov	fp, r1
 8005f20:	492d      	ldr	r1, [pc, #180]	@ (8005fd8 <_strtod_l+0x590>)
 8005f22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005f26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f2a:	4652      	mov	r2, sl
 8005f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f30:	465b      	mov	r3, fp
 8005f32:	f7fa fad1 	bl	80004d8 <__aeabi_dmul>
 8005f36:	4b25      	ldr	r3, [pc, #148]	@ (8005fcc <_strtod_l+0x584>)
 8005f38:	460a      	mov	r2, r1
 8005f3a:	400b      	ands	r3, r1
 8005f3c:	4927      	ldr	r1, [pc, #156]	@ (8005fdc <_strtod_l+0x594>)
 8005f3e:	4682      	mov	sl, r0
 8005f40:	428b      	cmp	r3, r1
 8005f42:	d898      	bhi.n	8005e76 <_strtod_l+0x42e>
 8005f44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	bf86      	itte	hi
 8005f4c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f50:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005fe0 <_strtod_l+0x598>
 8005f54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9308      	str	r3, [sp, #32]
 8005f5c:	e07a      	b.n	8006054 <_strtod_l+0x60c>
 8005f5e:	07e2      	lsls	r2, r4, #31
 8005f60:	d505      	bpl.n	8005f6e <_strtod_l+0x526>
 8005f62:	9b08      	ldr	r3, [sp, #32]
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa fab6 	bl	80004d8 <__aeabi_dmul>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	9a08      	ldr	r2, [sp, #32]
 8005f70:	3601      	adds	r6, #1
 8005f72:	3208      	adds	r2, #8
 8005f74:	1064      	asrs	r4, r4, #1
 8005f76:	9208      	str	r2, [sp, #32]
 8005f78:	e7cd      	b.n	8005f16 <_strtod_l+0x4ce>
 8005f7a:	d0ed      	beq.n	8005f58 <_strtod_l+0x510>
 8005f7c:	4264      	negs	r4, r4
 8005f7e:	f014 020f 	ands.w	r2, r4, #15
 8005f82:	d00a      	beq.n	8005f9a <_strtod_l+0x552>
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <_strtod_l+0x58c>)
 8005f86:	4650      	mov	r0, sl
 8005f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f7fa fbcb 	bl	800072c <__aeabi_ddiv>
 8005f96:	4682      	mov	sl, r0
 8005f98:	468b      	mov	fp, r1
 8005f9a:	1124      	asrs	r4, r4, #4
 8005f9c:	d0dc      	beq.n	8005f58 <_strtod_l+0x510>
 8005f9e:	2c1f      	cmp	r4, #31
 8005fa0:	dd20      	ble.n	8005fe4 <_strtod_l+0x59c>
 8005fa2:	2400      	movs	r4, #0
 8005fa4:	46a0      	mov	r8, r4
 8005fa6:	46a1      	mov	r9, r4
 8005fa8:	940a      	str	r4, [sp, #40]	@ 0x28
 8005faa:	2322      	movs	r3, #34	@ 0x22
 8005fac:	9a05      	ldr	r2, [sp, #20]
 8005fae:	f04f 0a00 	mov.w	sl, #0
 8005fb2:	f04f 0b00 	mov.w	fp, #0
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	e768      	b.n	8005e8c <_strtod_l+0x444>
 8005fba:	bf00      	nop
 8005fbc:	0800792f 	.word	0x0800792f
 8005fc0:	08007b44 	.word	0x08007b44
 8005fc4:	08007927 	.word	0x08007927
 8005fc8:	0800795e 	.word	0x0800795e
 8005fcc:	7ff00000 	.word	0x7ff00000
 8005fd0:	08007ced 	.word	0x08007ced
 8005fd4:	08007a78 	.word	0x08007a78
 8005fd8:	08007a50 	.word	0x08007a50
 8005fdc:	7ca00000 	.word	0x7ca00000
 8005fe0:	7fefffff 	.word	0x7fefffff
 8005fe4:	f014 0310 	ands.w	r3, r4, #16
 8005fe8:	bf18      	it	ne
 8005fea:	236a      	movne	r3, #106	@ 0x6a
 8005fec:	4650      	mov	r0, sl
 8005fee:	9308      	str	r3, [sp, #32]
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4ea9      	ldr	r6, [pc, #676]	@ (800629c <_strtod_l+0x854>)
 8005ff6:	07e2      	lsls	r2, r4, #31
 8005ff8:	d504      	bpl.n	8006004 <_strtod_l+0x5bc>
 8005ffa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ffe:	f7fa fa6b 	bl	80004d8 <__aeabi_dmul>
 8006002:	2301      	movs	r3, #1
 8006004:	1064      	asrs	r4, r4, #1
 8006006:	f106 0608 	add.w	r6, r6, #8
 800600a:	d1f4      	bne.n	8005ff6 <_strtod_l+0x5ae>
 800600c:	b10b      	cbz	r3, 8006012 <_strtod_l+0x5ca>
 800600e:	4682      	mov	sl, r0
 8006010:	468b      	mov	fp, r1
 8006012:	9b08      	ldr	r3, [sp, #32]
 8006014:	b1b3      	cbz	r3, 8006044 <_strtod_l+0x5fc>
 8006016:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800601a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800601e:	2b00      	cmp	r3, #0
 8006020:	4659      	mov	r1, fp
 8006022:	dd0f      	ble.n	8006044 <_strtod_l+0x5fc>
 8006024:	2b1f      	cmp	r3, #31
 8006026:	dd57      	ble.n	80060d8 <_strtod_l+0x690>
 8006028:	2b34      	cmp	r3, #52	@ 0x34
 800602a:	bfd8      	it	le
 800602c:	f04f 33ff 	movle.w	r3, #4294967295
 8006030:	f04f 0a00 	mov.w	sl, #0
 8006034:	bfcf      	iteee	gt
 8006036:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800603a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800603e:	4093      	lslle	r3, r2
 8006040:	ea03 0b01 	andle.w	fp, r3, r1
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	4650      	mov	r0, sl
 800604a:	4659      	mov	r1, fp
 800604c:	f7fa fcac 	bl	80009a8 <__aeabi_dcmpeq>
 8006050:	2800      	cmp	r0, #0
 8006052:	d1a6      	bne.n	8005fa2 <_strtod_l+0x55a>
 8006054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006056:	463a      	mov	r2, r7
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800605c:	462b      	mov	r3, r5
 800605e:	9805      	ldr	r0, [sp, #20]
 8006060:	f7ff f8d0 	bl	8005204 <__s2b>
 8006064:	900a      	str	r0, [sp, #40]	@ 0x28
 8006066:	2800      	cmp	r0, #0
 8006068:	f43f af05 	beq.w	8005e76 <_strtod_l+0x42e>
 800606c:	2400      	movs	r4, #0
 800606e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006070:	eba9 0308 	sub.w	r3, r9, r8
 8006074:	2a00      	cmp	r2, #0
 8006076:	bfa8      	it	ge
 8006078:	2300      	movge	r3, #0
 800607a:	46a0      	mov	r8, r4
 800607c:	9312      	str	r3, [sp, #72]	@ 0x48
 800607e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006082:	9316      	str	r3, [sp, #88]	@ 0x58
 8006084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006086:	9805      	ldr	r0, [sp, #20]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	f7ff f813 	bl	80050b4 <_Balloc>
 800608e:	4681      	mov	r9, r0
 8006090:	2800      	cmp	r0, #0
 8006092:	f43f aef4 	beq.w	8005e7e <_strtod_l+0x436>
 8006096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006098:	300c      	adds	r0, #12
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	f103 010c 	add.w	r1, r3, #12
 80060a0:	3202      	adds	r2, #2
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	f000 fd66 	bl	8006b74 <memcpy>
 80060a8:	ab1c      	add	r3, sp, #112	@ 0x70
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	ab1b      	add	r3, sp, #108	@ 0x6c
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4652      	mov	r2, sl
 80060b2:	465b      	mov	r3, fp
 80060b4:	9805      	ldr	r0, [sp, #20]
 80060b6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80060ba:	f7ff fbd5 	bl	8005868 <__d2b>
 80060be:	901a      	str	r0, [sp, #104]	@ 0x68
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f43f aedc 	beq.w	8005e7e <_strtod_l+0x436>
 80060c6:	2101      	movs	r1, #1
 80060c8:	9805      	ldr	r0, [sp, #20]
 80060ca:	f7ff f931 	bl	8005330 <__i2b>
 80060ce:	4680      	mov	r8, r0
 80060d0:	b948      	cbnz	r0, 80060e6 <_strtod_l+0x69e>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	e6d2      	b.n	8005e7e <_strtod_l+0x436>
 80060d8:	f04f 32ff 	mov.w	r2, #4294967295
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	ea03 0a0a 	and.w	sl, r3, sl
 80060e4:	e7ae      	b.n	8006044 <_strtod_l+0x5fc>
 80060e6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80060e8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	bfab      	itete	ge
 80060ee:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80060f0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80060f2:	18ef      	addge	r7, r5, r3
 80060f4:	1b5e      	sublt	r6, r3, r5
 80060f6:	9b08      	ldr	r3, [sp, #32]
 80060f8:	bfa8      	it	ge
 80060fa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80060fc:	eba5 0503 	sub.w	r5, r5, r3
 8006100:	4415      	add	r5, r2
 8006102:	4b67      	ldr	r3, [pc, #412]	@ (80062a0 <_strtod_l+0x858>)
 8006104:	f105 35ff 	add.w	r5, r5, #4294967295
 8006108:	bfb8      	it	lt
 800610a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800610c:	429d      	cmp	r5, r3
 800610e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006112:	da50      	bge.n	80061b6 <_strtod_l+0x76e>
 8006114:	1b5b      	subs	r3, r3, r5
 8006116:	2b1f      	cmp	r3, #31
 8006118:	f04f 0101 	mov.w	r1, #1
 800611c:	eba2 0203 	sub.w	r2, r2, r3
 8006120:	dc3d      	bgt.n	800619e <_strtod_l+0x756>
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006128:	2300      	movs	r3, #0
 800612a:	9310      	str	r3, [sp, #64]	@ 0x40
 800612c:	18bd      	adds	r5, r7, r2
 800612e:	9b08      	ldr	r3, [sp, #32]
 8006130:	42af      	cmp	r7, r5
 8006132:	4416      	add	r6, r2
 8006134:	441e      	add	r6, r3
 8006136:	463b      	mov	r3, r7
 8006138:	bfa8      	it	ge
 800613a:	462b      	movge	r3, r5
 800613c:	42b3      	cmp	r3, r6
 800613e:	bfa8      	it	ge
 8006140:	4633      	movge	r3, r6
 8006142:	2b00      	cmp	r3, #0
 8006144:	bfc2      	ittt	gt
 8006146:	1aed      	subgt	r5, r5, r3
 8006148:	1af6      	subgt	r6, r6, r3
 800614a:	1aff      	subgt	r7, r7, r3
 800614c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800614e:	2b00      	cmp	r3, #0
 8006150:	dd16      	ble.n	8006180 <_strtod_l+0x738>
 8006152:	4641      	mov	r1, r8
 8006154:	461a      	mov	r2, r3
 8006156:	9805      	ldr	r0, [sp, #20]
 8006158:	f7ff f9a8 	bl	80054ac <__pow5mult>
 800615c:	4680      	mov	r8, r0
 800615e:	2800      	cmp	r0, #0
 8006160:	d0b7      	beq.n	80060d2 <_strtod_l+0x68a>
 8006162:	4601      	mov	r1, r0
 8006164:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006166:	9805      	ldr	r0, [sp, #20]
 8006168:	f7ff f8f8 	bl	800535c <__multiply>
 800616c:	900e      	str	r0, [sp, #56]	@ 0x38
 800616e:	2800      	cmp	r0, #0
 8006170:	f43f ae85 	beq.w	8005e7e <_strtod_l+0x436>
 8006174:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006176:	9805      	ldr	r0, [sp, #20]
 8006178:	f7fe ffdc 	bl	8005134 <_Bfree>
 800617c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800617e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006180:	2d00      	cmp	r5, #0
 8006182:	dc1d      	bgt.n	80061c0 <_strtod_l+0x778>
 8006184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	dd23      	ble.n	80061d2 <_strtod_l+0x78a>
 800618a:	4649      	mov	r1, r9
 800618c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800618e:	9805      	ldr	r0, [sp, #20]
 8006190:	f7ff f98c 	bl	80054ac <__pow5mult>
 8006194:	4681      	mov	r9, r0
 8006196:	b9e0      	cbnz	r0, 80061d2 <_strtod_l+0x78a>
 8006198:	f04f 0900 	mov.w	r9, #0
 800619c:	e66f      	b.n	8005e7e <_strtod_l+0x436>
 800619e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80061a2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80061a6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80061aa:	35e2      	adds	r5, #226	@ 0xe2
 80061ac:	fa01 f305 	lsl.w	r3, r1, r5
 80061b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80061b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80061b4:	e7ba      	b.n	800612c <_strtod_l+0x6e4>
 80061b6:	2300      	movs	r3, #0
 80061b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80061ba:	2301      	movs	r3, #1
 80061bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061be:	e7b5      	b.n	800612c <_strtod_l+0x6e4>
 80061c0:	462a      	mov	r2, r5
 80061c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061c4:	9805      	ldr	r0, [sp, #20]
 80061c6:	f7ff f9cb 	bl	8005560 <__lshift>
 80061ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d1d9      	bne.n	8006184 <_strtod_l+0x73c>
 80061d0:	e655      	b.n	8005e7e <_strtod_l+0x436>
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	dd07      	ble.n	80061e6 <_strtod_l+0x79e>
 80061d6:	4649      	mov	r1, r9
 80061d8:	4632      	mov	r2, r6
 80061da:	9805      	ldr	r0, [sp, #20]
 80061dc:	f7ff f9c0 	bl	8005560 <__lshift>
 80061e0:	4681      	mov	r9, r0
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d0d8      	beq.n	8006198 <_strtod_l+0x750>
 80061e6:	2f00      	cmp	r7, #0
 80061e8:	dd08      	ble.n	80061fc <_strtod_l+0x7b4>
 80061ea:	4641      	mov	r1, r8
 80061ec:	463a      	mov	r2, r7
 80061ee:	9805      	ldr	r0, [sp, #20]
 80061f0:	f7ff f9b6 	bl	8005560 <__lshift>
 80061f4:	4680      	mov	r8, r0
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f43f ae41 	beq.w	8005e7e <_strtod_l+0x436>
 80061fc:	464a      	mov	r2, r9
 80061fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006200:	9805      	ldr	r0, [sp, #20]
 8006202:	f7ff fa35 	bl	8005670 <__mdiff>
 8006206:	4604      	mov	r4, r0
 8006208:	2800      	cmp	r0, #0
 800620a:	f43f ae38 	beq.w	8005e7e <_strtod_l+0x436>
 800620e:	68c3      	ldr	r3, [r0, #12]
 8006210:	4641      	mov	r1, r8
 8006212:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006214:	2300      	movs	r3, #0
 8006216:	60c3      	str	r3, [r0, #12]
 8006218:	f7ff fa0e 	bl	8005638 <__mcmp>
 800621c:	2800      	cmp	r0, #0
 800621e:	da45      	bge.n	80062ac <_strtod_l+0x864>
 8006220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006222:	ea53 030a 	orrs.w	r3, r3, sl
 8006226:	d16b      	bne.n	8006300 <_strtod_l+0x8b8>
 8006228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800622c:	2b00      	cmp	r3, #0
 800622e:	d167      	bne.n	8006300 <_strtod_l+0x8b8>
 8006230:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006234:	0d1b      	lsrs	r3, r3, #20
 8006236:	051b      	lsls	r3, r3, #20
 8006238:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800623c:	d960      	bls.n	8006300 <_strtod_l+0x8b8>
 800623e:	6963      	ldr	r3, [r4, #20]
 8006240:	b913      	cbnz	r3, 8006248 <_strtod_l+0x800>
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	2b01      	cmp	r3, #1
 8006246:	dd5b      	ble.n	8006300 <_strtod_l+0x8b8>
 8006248:	4621      	mov	r1, r4
 800624a:	2201      	movs	r2, #1
 800624c:	9805      	ldr	r0, [sp, #20]
 800624e:	f7ff f987 	bl	8005560 <__lshift>
 8006252:	4641      	mov	r1, r8
 8006254:	4604      	mov	r4, r0
 8006256:	f7ff f9ef 	bl	8005638 <__mcmp>
 800625a:	2800      	cmp	r0, #0
 800625c:	dd50      	ble.n	8006300 <_strtod_l+0x8b8>
 800625e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006262:	9a08      	ldr	r2, [sp, #32]
 8006264:	0d1b      	lsrs	r3, r3, #20
 8006266:	051b      	lsls	r3, r3, #20
 8006268:	2a00      	cmp	r2, #0
 800626a:	d06a      	beq.n	8006342 <_strtod_l+0x8fa>
 800626c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006270:	d867      	bhi.n	8006342 <_strtod_l+0x8fa>
 8006272:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006276:	f67f ae98 	bls.w	8005faa <_strtod_l+0x562>
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	4b09      	ldr	r3, [pc, #36]	@ (80062a4 <_strtod_l+0x85c>)
 8006280:	2200      	movs	r2, #0
 8006282:	f7fa f929 	bl	80004d8 <__aeabi_dmul>
 8006286:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <_strtod_l+0x860>)
 8006288:	4682      	mov	sl, r0
 800628a:	400b      	ands	r3, r1
 800628c:	468b      	mov	fp, r1
 800628e:	2b00      	cmp	r3, #0
 8006290:	f47f ae00 	bne.w	8005e94 <_strtod_l+0x44c>
 8006294:	2322      	movs	r3, #34	@ 0x22
 8006296:	9a05      	ldr	r2, [sp, #20]
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e5fb      	b.n	8005e94 <_strtod_l+0x44c>
 800629c:	08007b70 	.word	0x08007b70
 80062a0:	fffffc02 	.word	0xfffffc02
 80062a4:	39500000 	.word	0x39500000
 80062a8:	7ff00000 	.word	0x7ff00000
 80062ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80062b0:	d165      	bne.n	800637e <_strtod_l+0x936>
 80062b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80062b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062b8:	b35a      	cbz	r2, 8006312 <_strtod_l+0x8ca>
 80062ba:	4a99      	ldr	r2, [pc, #612]	@ (8006520 <_strtod_l+0xad8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d12b      	bne.n	8006318 <_strtod_l+0x8d0>
 80062c0:	9b08      	ldr	r3, [sp, #32]
 80062c2:	4651      	mov	r1, sl
 80062c4:	b303      	cbz	r3, 8006308 <_strtod_l+0x8c0>
 80062c6:	465a      	mov	r2, fp
 80062c8:	4b96      	ldr	r3, [pc, #600]	@ (8006524 <_strtod_l+0xadc>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80062d0:	f04f 32ff 	mov.w	r2, #4294967295
 80062d4:	d81b      	bhi.n	800630e <_strtod_l+0x8c6>
 80062d6:	0d1b      	lsrs	r3, r3, #20
 80062d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	4299      	cmp	r1, r3
 80062e2:	d119      	bne.n	8006318 <_strtod_l+0x8d0>
 80062e4:	4b90      	ldr	r3, [pc, #576]	@ (8006528 <_strtod_l+0xae0>)
 80062e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d102      	bne.n	80062f2 <_strtod_l+0x8aa>
 80062ec:	3101      	adds	r1, #1
 80062ee:	f43f adc6 	beq.w	8005e7e <_strtod_l+0x436>
 80062f2:	f04f 0a00 	mov.w	sl, #0
 80062f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006524 <_strtod_l+0xadc>)
 80062f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062fa:	401a      	ands	r2, r3
 80062fc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006300:	9b08      	ldr	r3, [sp, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1b9      	bne.n	800627a <_strtod_l+0x832>
 8006306:	e5c5      	b.n	8005e94 <_strtod_l+0x44c>
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	e7e8      	b.n	80062e0 <_strtod_l+0x898>
 800630e:	4613      	mov	r3, r2
 8006310:	e7e6      	b.n	80062e0 <_strtod_l+0x898>
 8006312:	ea53 030a 	orrs.w	r3, r3, sl
 8006316:	d0a2      	beq.n	800625e <_strtod_l+0x816>
 8006318:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800631a:	b1db      	cbz	r3, 8006354 <_strtod_l+0x90c>
 800631c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800631e:	4213      	tst	r3, r2
 8006320:	d0ee      	beq.n	8006300 <_strtod_l+0x8b8>
 8006322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006324:	4650      	mov	r0, sl
 8006326:	4659      	mov	r1, fp
 8006328:	9a08      	ldr	r2, [sp, #32]
 800632a:	b1bb      	cbz	r3, 800635c <_strtod_l+0x914>
 800632c:	f7ff fb68 	bl	8005a00 <sulp>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006338:	f7f9 ff18 	bl	800016c <__adddf3>
 800633c:	4682      	mov	sl, r0
 800633e:	468b      	mov	fp, r1
 8006340:	e7de      	b.n	8006300 <_strtod_l+0x8b8>
 8006342:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006346:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800634a:	f04f 3aff 	mov.w	sl, #4294967295
 800634e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006352:	e7d5      	b.n	8006300 <_strtod_l+0x8b8>
 8006354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006356:	ea13 0f0a 	tst.w	r3, sl
 800635a:	e7e1      	b.n	8006320 <_strtod_l+0x8d8>
 800635c:	f7ff fb50 	bl	8005a00 <sulp>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006368:	f7f9 fefe 	bl	8000168 <__aeabi_dsub>
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	4682      	mov	sl, r0
 8006372:	468b      	mov	fp, r1
 8006374:	f7fa fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8006378:	2800      	cmp	r0, #0
 800637a:	d0c1      	beq.n	8006300 <_strtod_l+0x8b8>
 800637c:	e615      	b.n	8005faa <_strtod_l+0x562>
 800637e:	4641      	mov	r1, r8
 8006380:	4620      	mov	r0, r4
 8006382:	f7ff fac9 	bl	8005918 <__ratio>
 8006386:	2200      	movs	r2, #0
 8006388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800638c:	4606      	mov	r6, r0
 800638e:	460f      	mov	r7, r1
 8006390:	f7fa fb1e 	bl	80009d0 <__aeabi_dcmple>
 8006394:	2800      	cmp	r0, #0
 8006396:	d06d      	beq.n	8006474 <_strtod_l+0xa2c>
 8006398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d178      	bne.n	8006490 <_strtod_l+0xa48>
 800639e:	f1ba 0f00 	cmp.w	sl, #0
 80063a2:	d156      	bne.n	8006452 <_strtod_l+0xa0a>
 80063a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d158      	bne.n	8006460 <_strtod_l+0xa18>
 80063ae:	2200      	movs	r2, #0
 80063b0:	4630      	mov	r0, r6
 80063b2:	4639      	mov	r1, r7
 80063b4:	4b5d      	ldr	r3, [pc, #372]	@ (800652c <_strtod_l+0xae4>)
 80063b6:	f7fa fb01 	bl	80009bc <__aeabi_dcmplt>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d157      	bne.n	800646e <_strtod_l+0xa26>
 80063be:	4630      	mov	r0, r6
 80063c0:	4639      	mov	r1, r7
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006530 <_strtod_l+0xae8>)
 80063c6:	f7fa f887 	bl	80004d8 <__aeabi_dmul>
 80063ca:	4606      	mov	r6, r0
 80063cc:	460f      	mov	r7, r1
 80063ce:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80063d2:	9606      	str	r6, [sp, #24]
 80063d4:	9307      	str	r3, [sp, #28]
 80063d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063da:	4d52      	ldr	r5, [pc, #328]	@ (8006524 <_strtod_l+0xadc>)
 80063dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80063e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063e2:	401d      	ands	r5, r3
 80063e4:	4b53      	ldr	r3, [pc, #332]	@ (8006534 <_strtod_l+0xaec>)
 80063e6:	429d      	cmp	r5, r3
 80063e8:	f040 80aa 	bne.w	8006540 <_strtod_l+0xaf8>
 80063ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063ee:	4650      	mov	r0, sl
 80063f0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80063f4:	4659      	mov	r1, fp
 80063f6:	f7ff f9cf 	bl	8005798 <__ulp>
 80063fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063fe:	f7fa f86b 	bl	80004d8 <__aeabi_dmul>
 8006402:	4652      	mov	r2, sl
 8006404:	465b      	mov	r3, fp
 8006406:	f7f9 feb1 	bl	800016c <__adddf3>
 800640a:	460b      	mov	r3, r1
 800640c:	4945      	ldr	r1, [pc, #276]	@ (8006524 <_strtod_l+0xadc>)
 800640e:	4a4a      	ldr	r2, [pc, #296]	@ (8006538 <_strtod_l+0xaf0>)
 8006410:	4019      	ands	r1, r3
 8006412:	4291      	cmp	r1, r2
 8006414:	4682      	mov	sl, r0
 8006416:	d942      	bls.n	800649e <_strtod_l+0xa56>
 8006418:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800641a:	4b43      	ldr	r3, [pc, #268]	@ (8006528 <_strtod_l+0xae0>)
 800641c:	429a      	cmp	r2, r3
 800641e:	d103      	bne.n	8006428 <_strtod_l+0x9e0>
 8006420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006422:	3301      	adds	r3, #1
 8006424:	f43f ad2b 	beq.w	8005e7e <_strtod_l+0x436>
 8006428:	f04f 3aff 	mov.w	sl, #4294967295
 800642c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006528 <_strtod_l+0xae0>
 8006430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006432:	9805      	ldr	r0, [sp, #20]
 8006434:	f7fe fe7e 	bl	8005134 <_Bfree>
 8006438:	4649      	mov	r1, r9
 800643a:	9805      	ldr	r0, [sp, #20]
 800643c:	f7fe fe7a 	bl	8005134 <_Bfree>
 8006440:	4641      	mov	r1, r8
 8006442:	9805      	ldr	r0, [sp, #20]
 8006444:	f7fe fe76 	bl	8005134 <_Bfree>
 8006448:	4621      	mov	r1, r4
 800644a:	9805      	ldr	r0, [sp, #20]
 800644c:	f7fe fe72 	bl	8005134 <_Bfree>
 8006450:	e618      	b.n	8006084 <_strtod_l+0x63c>
 8006452:	f1ba 0f01 	cmp.w	sl, #1
 8006456:	d103      	bne.n	8006460 <_strtod_l+0xa18>
 8006458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800645a:	2b00      	cmp	r3, #0
 800645c:	f43f ada5 	beq.w	8005faa <_strtod_l+0x562>
 8006460:	2200      	movs	r2, #0
 8006462:	4b36      	ldr	r3, [pc, #216]	@ (800653c <_strtod_l+0xaf4>)
 8006464:	2600      	movs	r6, #0
 8006466:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800646a:	4f30      	ldr	r7, [pc, #192]	@ (800652c <_strtod_l+0xae4>)
 800646c:	e7b3      	b.n	80063d6 <_strtod_l+0x98e>
 800646e:	2600      	movs	r6, #0
 8006470:	4f2f      	ldr	r7, [pc, #188]	@ (8006530 <_strtod_l+0xae8>)
 8006472:	e7ac      	b.n	80063ce <_strtod_l+0x986>
 8006474:	4630      	mov	r0, r6
 8006476:	4639      	mov	r1, r7
 8006478:	4b2d      	ldr	r3, [pc, #180]	@ (8006530 <_strtod_l+0xae8>)
 800647a:	2200      	movs	r2, #0
 800647c:	f7fa f82c 	bl	80004d8 <__aeabi_dmul>
 8006480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006482:	4606      	mov	r6, r0
 8006484:	460f      	mov	r7, r1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0a1      	beq.n	80063ce <_strtod_l+0x986>
 800648a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800648e:	e7a2      	b.n	80063d6 <_strtod_l+0x98e>
 8006490:	2200      	movs	r2, #0
 8006492:	4b26      	ldr	r3, [pc, #152]	@ (800652c <_strtod_l+0xae4>)
 8006494:	4616      	mov	r6, r2
 8006496:	461f      	mov	r7, r3
 8006498:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800649c:	e79b      	b.n	80063d6 <_strtod_l+0x98e>
 800649e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80064a2:	9b08      	ldr	r3, [sp, #32]
 80064a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1c1      	bne.n	8006430 <_strtod_l+0x9e8>
 80064ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80064b0:	0d1b      	lsrs	r3, r3, #20
 80064b2:	051b      	lsls	r3, r3, #20
 80064b4:	429d      	cmp	r5, r3
 80064b6:	d1bb      	bne.n	8006430 <_strtod_l+0x9e8>
 80064b8:	4630      	mov	r0, r6
 80064ba:	4639      	mov	r1, r7
 80064bc:	f7fa fdb2 	bl	8001024 <__aeabi_d2lz>
 80064c0:	f7f9 ffdc 	bl	800047c <__aeabi_l2d>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7f9 fe4c 	bl	8000168 <__aeabi_dsub>
 80064d0:	460b      	mov	r3, r1
 80064d2:	4602      	mov	r2, r0
 80064d4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80064d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80064dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064de:	ea46 060a 	orr.w	r6, r6, sl
 80064e2:	431e      	orrs	r6, r3
 80064e4:	d069      	beq.n	80065ba <_strtod_l+0xb72>
 80064e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8006510 <_strtod_l+0xac8>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f7fa fa66 	bl	80009bc <__aeabi_dcmplt>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f47f accf 	bne.w	8005e94 <_strtod_l+0x44c>
 80064f6:	a308      	add	r3, pc, #32	@ (adr r3, 8006518 <_strtod_l+0xad0>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006500:	f7fa fa7a 	bl	80009f8 <__aeabi_dcmpgt>
 8006504:	2800      	cmp	r0, #0
 8006506:	d093      	beq.n	8006430 <_strtod_l+0x9e8>
 8006508:	e4c4      	b.n	8005e94 <_strtod_l+0x44c>
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	94a03595 	.word	0x94a03595
 8006514:	3fdfffff 	.word	0x3fdfffff
 8006518:	35afe535 	.word	0x35afe535
 800651c:	3fe00000 	.word	0x3fe00000
 8006520:	000fffff 	.word	0x000fffff
 8006524:	7ff00000 	.word	0x7ff00000
 8006528:	7fefffff 	.word	0x7fefffff
 800652c:	3ff00000 	.word	0x3ff00000
 8006530:	3fe00000 	.word	0x3fe00000
 8006534:	7fe00000 	.word	0x7fe00000
 8006538:	7c9fffff 	.word	0x7c9fffff
 800653c:	bff00000 	.word	0xbff00000
 8006540:	9b08      	ldr	r3, [sp, #32]
 8006542:	b323      	cbz	r3, 800658e <_strtod_l+0xb46>
 8006544:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006548:	d821      	bhi.n	800658e <_strtod_l+0xb46>
 800654a:	a327      	add	r3, pc, #156	@ (adr r3, 80065e8 <_strtod_l+0xba0>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7fa fa3c 	bl	80009d0 <__aeabi_dcmple>
 8006558:	b1a0      	cbz	r0, 8006584 <_strtod_l+0xb3c>
 800655a:	4639      	mov	r1, r7
 800655c:	4630      	mov	r0, r6
 800655e:	f7fa fa93 	bl	8000a88 <__aeabi_d2uiz>
 8006562:	2801      	cmp	r0, #1
 8006564:	bf38      	it	cc
 8006566:	2001      	movcc	r0, #1
 8006568:	f7f9 ff3c 	bl	80003e4 <__aeabi_ui2d>
 800656c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800656e:	4606      	mov	r6, r0
 8006570:	460f      	mov	r7, r1
 8006572:	b9fb      	cbnz	r3, 80065b4 <_strtod_l+0xb6c>
 8006574:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006578:	9014      	str	r0, [sp, #80]	@ 0x50
 800657a:	9315      	str	r3, [sp, #84]	@ 0x54
 800657c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006580:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006584:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006586:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800658a:	1b5b      	subs	r3, r3, r5
 800658c:	9311      	str	r3, [sp, #68]	@ 0x44
 800658e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006592:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006596:	f7ff f8ff 	bl	8005798 <__ulp>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4650      	mov	r0, sl
 80065a0:	4659      	mov	r1, fp
 80065a2:	f7f9 ff99 	bl	80004d8 <__aeabi_dmul>
 80065a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80065aa:	f7f9 fddf 	bl	800016c <__adddf3>
 80065ae:	4682      	mov	sl, r0
 80065b0:	468b      	mov	fp, r1
 80065b2:	e776      	b.n	80064a2 <_strtod_l+0xa5a>
 80065b4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80065b8:	e7e0      	b.n	800657c <_strtod_l+0xb34>
 80065ba:	a30d      	add	r3, pc, #52	@ (adr r3, 80065f0 <_strtod_l+0xba8>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f7fa f9fc 	bl	80009bc <__aeabi_dcmplt>
 80065c4:	e79e      	b.n	8006504 <_strtod_l+0xabc>
 80065c6:	2300      	movs	r3, #0
 80065c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065cc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	f7ff ba77 	b.w	8005ac2 <_strtod_l+0x7a>
 80065d4:	2a65      	cmp	r2, #101	@ 0x65
 80065d6:	f43f ab6e 	beq.w	8005cb6 <_strtod_l+0x26e>
 80065da:	2a45      	cmp	r2, #69	@ 0x45
 80065dc:	f43f ab6b 	beq.w	8005cb6 <_strtod_l+0x26e>
 80065e0:	2301      	movs	r3, #1
 80065e2:	f7ff bba6 	b.w	8005d32 <_strtod_l+0x2ea>
 80065e6:	bf00      	nop
 80065e8:	ffc00000 	.word	0xffc00000
 80065ec:	41dfffff 	.word	0x41dfffff
 80065f0:	94a03595 	.word	0x94a03595
 80065f4:	3fcfffff 	.word	0x3fcfffff

080065f8 <_strtod_r>:
 80065f8:	4b01      	ldr	r3, [pc, #4]	@ (8006600 <_strtod_r+0x8>)
 80065fa:	f7ff ba25 	b.w	8005a48 <_strtod_l>
 80065fe:	bf00      	nop
 8006600:	20000068 	.word	0x20000068

08006604 <_strtol_l.constprop.0>:
 8006604:	2b24      	cmp	r3, #36	@ 0x24
 8006606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660a:	4686      	mov	lr, r0
 800660c:	4690      	mov	r8, r2
 800660e:	d801      	bhi.n	8006614 <_strtol_l.constprop.0+0x10>
 8006610:	2b01      	cmp	r3, #1
 8006612:	d106      	bne.n	8006622 <_strtol_l.constprop.0+0x1e>
 8006614:	f7fd fdbe 	bl	8004194 <__errno>
 8006618:	2316      	movs	r3, #22
 800661a:	6003      	str	r3, [r0, #0]
 800661c:	2000      	movs	r0, #0
 800661e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006622:	460d      	mov	r5, r1
 8006624:	4833      	ldr	r0, [pc, #204]	@ (80066f4 <_strtol_l.constprop.0+0xf0>)
 8006626:	462a      	mov	r2, r5
 8006628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800662c:	5d06      	ldrb	r6, [r0, r4]
 800662e:	f016 0608 	ands.w	r6, r6, #8
 8006632:	d1f8      	bne.n	8006626 <_strtol_l.constprop.0+0x22>
 8006634:	2c2d      	cmp	r4, #45	@ 0x2d
 8006636:	d12d      	bne.n	8006694 <_strtol_l.constprop.0+0x90>
 8006638:	2601      	movs	r6, #1
 800663a:	782c      	ldrb	r4, [r5, #0]
 800663c:	1c95      	adds	r5, r2, #2
 800663e:	f033 0210 	bics.w	r2, r3, #16
 8006642:	d109      	bne.n	8006658 <_strtol_l.constprop.0+0x54>
 8006644:	2c30      	cmp	r4, #48	@ 0x30
 8006646:	d12a      	bne.n	800669e <_strtol_l.constprop.0+0x9a>
 8006648:	782a      	ldrb	r2, [r5, #0]
 800664a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800664e:	2a58      	cmp	r2, #88	@ 0x58
 8006650:	d125      	bne.n	800669e <_strtol_l.constprop.0+0x9a>
 8006652:	2310      	movs	r3, #16
 8006654:	786c      	ldrb	r4, [r5, #1]
 8006656:	3502      	adds	r5, #2
 8006658:	2200      	movs	r2, #0
 800665a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800665e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006662:	fbbc f9f3 	udiv	r9, ip, r3
 8006666:	4610      	mov	r0, r2
 8006668:	fb03 ca19 	mls	sl, r3, r9, ip
 800666c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006670:	2f09      	cmp	r7, #9
 8006672:	d81b      	bhi.n	80066ac <_strtol_l.constprop.0+0xa8>
 8006674:	463c      	mov	r4, r7
 8006676:	42a3      	cmp	r3, r4
 8006678:	dd27      	ble.n	80066ca <_strtol_l.constprop.0+0xc6>
 800667a:	1c57      	adds	r7, r2, #1
 800667c:	d007      	beq.n	800668e <_strtol_l.constprop.0+0x8a>
 800667e:	4581      	cmp	r9, r0
 8006680:	d320      	bcc.n	80066c4 <_strtol_l.constprop.0+0xc0>
 8006682:	d101      	bne.n	8006688 <_strtol_l.constprop.0+0x84>
 8006684:	45a2      	cmp	sl, r4
 8006686:	db1d      	blt.n	80066c4 <_strtol_l.constprop.0+0xc0>
 8006688:	2201      	movs	r2, #1
 800668a:	fb00 4003 	mla	r0, r0, r3, r4
 800668e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006692:	e7eb      	b.n	800666c <_strtol_l.constprop.0+0x68>
 8006694:	2c2b      	cmp	r4, #43	@ 0x2b
 8006696:	bf04      	itt	eq
 8006698:	782c      	ldrbeq	r4, [r5, #0]
 800669a:	1c95      	addeq	r5, r2, #2
 800669c:	e7cf      	b.n	800663e <_strtol_l.constprop.0+0x3a>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1da      	bne.n	8006658 <_strtol_l.constprop.0+0x54>
 80066a2:	2c30      	cmp	r4, #48	@ 0x30
 80066a4:	bf0c      	ite	eq
 80066a6:	2308      	moveq	r3, #8
 80066a8:	230a      	movne	r3, #10
 80066aa:	e7d5      	b.n	8006658 <_strtol_l.constprop.0+0x54>
 80066ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80066b0:	2f19      	cmp	r7, #25
 80066b2:	d801      	bhi.n	80066b8 <_strtol_l.constprop.0+0xb4>
 80066b4:	3c37      	subs	r4, #55	@ 0x37
 80066b6:	e7de      	b.n	8006676 <_strtol_l.constprop.0+0x72>
 80066b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80066bc:	2f19      	cmp	r7, #25
 80066be:	d804      	bhi.n	80066ca <_strtol_l.constprop.0+0xc6>
 80066c0:	3c57      	subs	r4, #87	@ 0x57
 80066c2:	e7d8      	b.n	8006676 <_strtol_l.constprop.0+0x72>
 80066c4:	f04f 32ff 	mov.w	r2, #4294967295
 80066c8:	e7e1      	b.n	800668e <_strtol_l.constprop.0+0x8a>
 80066ca:	1c53      	adds	r3, r2, #1
 80066cc:	d108      	bne.n	80066e0 <_strtol_l.constprop.0+0xdc>
 80066ce:	2322      	movs	r3, #34	@ 0x22
 80066d0:	4660      	mov	r0, ip
 80066d2:	f8ce 3000 	str.w	r3, [lr]
 80066d6:	f1b8 0f00 	cmp.w	r8, #0
 80066da:	d0a0      	beq.n	800661e <_strtol_l.constprop.0+0x1a>
 80066dc:	1e69      	subs	r1, r5, #1
 80066de:	e006      	b.n	80066ee <_strtol_l.constprop.0+0xea>
 80066e0:	b106      	cbz	r6, 80066e4 <_strtol_l.constprop.0+0xe0>
 80066e2:	4240      	negs	r0, r0
 80066e4:	f1b8 0f00 	cmp.w	r8, #0
 80066e8:	d099      	beq.n	800661e <_strtol_l.constprop.0+0x1a>
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	d1f6      	bne.n	80066dc <_strtol_l.constprop.0+0xd8>
 80066ee:	f8c8 1000 	str.w	r1, [r8]
 80066f2:	e794      	b.n	800661e <_strtol_l.constprop.0+0x1a>
 80066f4:	08007b99 	.word	0x08007b99

080066f8 <_strtol_r>:
 80066f8:	f7ff bf84 	b.w	8006604 <_strtol_l.constprop.0>

080066fc <__ssputs_r>:
 80066fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	461f      	mov	r7, r3
 8006702:	688e      	ldr	r6, [r1, #8]
 8006704:	4682      	mov	sl, r0
 8006706:	42be      	cmp	r6, r7
 8006708:	460c      	mov	r4, r1
 800670a:	4690      	mov	r8, r2
 800670c:	680b      	ldr	r3, [r1, #0]
 800670e:	d82d      	bhi.n	800676c <__ssputs_r+0x70>
 8006710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006714:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006718:	d026      	beq.n	8006768 <__ssputs_r+0x6c>
 800671a:	6965      	ldr	r5, [r4, #20]
 800671c:	6909      	ldr	r1, [r1, #16]
 800671e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006722:	eba3 0901 	sub.w	r9, r3, r1
 8006726:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800672a:	1c7b      	adds	r3, r7, #1
 800672c:	444b      	add	r3, r9
 800672e:	106d      	asrs	r5, r5, #1
 8006730:	429d      	cmp	r5, r3
 8006732:	bf38      	it	cc
 8006734:	461d      	movcc	r5, r3
 8006736:	0553      	lsls	r3, r2, #21
 8006738:	d527      	bpl.n	800678a <__ssputs_r+0x8e>
 800673a:	4629      	mov	r1, r5
 800673c:	f7fe fc2e 	bl	8004f9c <_malloc_r>
 8006740:	4606      	mov	r6, r0
 8006742:	b360      	cbz	r0, 800679e <__ssputs_r+0xa2>
 8006744:	464a      	mov	r2, r9
 8006746:	6921      	ldr	r1, [r4, #16]
 8006748:	f000 fa14 	bl	8006b74 <memcpy>
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	6126      	str	r6, [r4, #16]
 800675a:	444e      	add	r6, r9
 800675c:	6026      	str	r6, [r4, #0]
 800675e:	463e      	mov	r6, r7
 8006760:	6165      	str	r5, [r4, #20]
 8006762:	eba5 0509 	sub.w	r5, r5, r9
 8006766:	60a5      	str	r5, [r4, #8]
 8006768:	42be      	cmp	r6, r7
 800676a:	d900      	bls.n	800676e <__ssputs_r+0x72>
 800676c:	463e      	mov	r6, r7
 800676e:	4632      	mov	r2, r6
 8006770:	4641      	mov	r1, r8
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	f000 f9c2 	bl	8006afc <memmove>
 8006778:	2000      	movs	r0, #0
 800677a:	68a3      	ldr	r3, [r4, #8]
 800677c:	1b9b      	subs	r3, r3, r6
 800677e:	60a3      	str	r3, [r4, #8]
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	4433      	add	r3, r6
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678a:	462a      	mov	r2, r5
 800678c:	f000 fd83 	bl	8007296 <_realloc_r>
 8006790:	4606      	mov	r6, r0
 8006792:	2800      	cmp	r0, #0
 8006794:	d1e0      	bne.n	8006758 <__ssputs_r+0x5c>
 8006796:	4650      	mov	r0, sl
 8006798:	6921      	ldr	r1, [r4, #16]
 800679a:	f7fe fb8d 	bl	8004eb8 <_free_r>
 800679e:	230c      	movs	r3, #12
 80067a0:	f8ca 3000 	str.w	r3, [sl]
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295
 80067aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	e7e9      	b.n	8006786 <__ssputs_r+0x8a>
	...

080067b4 <_svfiprintf_r>:
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	4698      	mov	r8, r3
 80067ba:	898b      	ldrh	r3, [r1, #12]
 80067bc:	4607      	mov	r7, r0
 80067be:	061b      	lsls	r3, r3, #24
 80067c0:	460d      	mov	r5, r1
 80067c2:	4614      	mov	r4, r2
 80067c4:	b09d      	sub	sp, #116	@ 0x74
 80067c6:	d510      	bpl.n	80067ea <_svfiprintf_r+0x36>
 80067c8:	690b      	ldr	r3, [r1, #16]
 80067ca:	b973      	cbnz	r3, 80067ea <_svfiprintf_r+0x36>
 80067cc:	2140      	movs	r1, #64	@ 0x40
 80067ce:	f7fe fbe5 	bl	8004f9c <_malloc_r>
 80067d2:	6028      	str	r0, [r5, #0]
 80067d4:	6128      	str	r0, [r5, #16]
 80067d6:	b930      	cbnz	r0, 80067e6 <_svfiprintf_r+0x32>
 80067d8:	230c      	movs	r3, #12
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	b01d      	add	sp, #116	@ 0x74
 80067e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e6:	2340      	movs	r3, #64	@ 0x40
 80067e8:	616b      	str	r3, [r5, #20]
 80067ea:	2300      	movs	r3, #0
 80067ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ee:	2320      	movs	r3, #32
 80067f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067f4:	2330      	movs	r3, #48	@ 0x30
 80067f6:	f04f 0901 	mov.w	r9, #1
 80067fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80067fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006998 <_svfiprintf_r+0x1e4>
 8006802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006806:	4623      	mov	r3, r4
 8006808:	469a      	mov	sl, r3
 800680a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800680e:	b10a      	cbz	r2, 8006814 <_svfiprintf_r+0x60>
 8006810:	2a25      	cmp	r2, #37	@ 0x25
 8006812:	d1f9      	bne.n	8006808 <_svfiprintf_r+0x54>
 8006814:	ebba 0b04 	subs.w	fp, sl, r4
 8006818:	d00b      	beq.n	8006832 <_svfiprintf_r+0x7e>
 800681a:	465b      	mov	r3, fp
 800681c:	4622      	mov	r2, r4
 800681e:	4629      	mov	r1, r5
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff ff6b 	bl	80066fc <__ssputs_r>
 8006826:	3001      	adds	r0, #1
 8006828:	f000 80a7 	beq.w	800697a <_svfiprintf_r+0x1c6>
 800682c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800682e:	445a      	add	r2, fp
 8006830:	9209      	str	r2, [sp, #36]	@ 0x24
 8006832:	f89a 3000 	ldrb.w	r3, [sl]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 809f 	beq.w	800697a <_svfiprintf_r+0x1c6>
 800683c:	2300      	movs	r3, #0
 800683e:	f04f 32ff 	mov.w	r2, #4294967295
 8006842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006846:	f10a 0a01 	add.w	sl, sl, #1
 800684a:	9304      	str	r3, [sp, #16]
 800684c:	9307      	str	r3, [sp, #28]
 800684e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006852:	931a      	str	r3, [sp, #104]	@ 0x68
 8006854:	4654      	mov	r4, sl
 8006856:	2205      	movs	r2, #5
 8006858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800685c:	484e      	ldr	r0, [pc, #312]	@ (8006998 <_svfiprintf_r+0x1e4>)
 800685e:	f7fd fcc6 	bl	80041ee <memchr>
 8006862:	9a04      	ldr	r2, [sp, #16]
 8006864:	b9d8      	cbnz	r0, 800689e <_svfiprintf_r+0xea>
 8006866:	06d0      	lsls	r0, r2, #27
 8006868:	bf44      	itt	mi
 800686a:	2320      	movmi	r3, #32
 800686c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006870:	0711      	lsls	r1, r2, #28
 8006872:	bf44      	itt	mi
 8006874:	232b      	movmi	r3, #43	@ 0x2b
 8006876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800687a:	f89a 3000 	ldrb.w	r3, [sl]
 800687e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006880:	d015      	beq.n	80068ae <_svfiprintf_r+0xfa>
 8006882:	4654      	mov	r4, sl
 8006884:	2000      	movs	r0, #0
 8006886:	f04f 0c0a 	mov.w	ip, #10
 800688a:	9a07      	ldr	r2, [sp, #28]
 800688c:	4621      	mov	r1, r4
 800688e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006892:	3b30      	subs	r3, #48	@ 0x30
 8006894:	2b09      	cmp	r3, #9
 8006896:	d94b      	bls.n	8006930 <_svfiprintf_r+0x17c>
 8006898:	b1b0      	cbz	r0, 80068c8 <_svfiprintf_r+0x114>
 800689a:	9207      	str	r2, [sp, #28]
 800689c:	e014      	b.n	80068c8 <_svfiprintf_r+0x114>
 800689e:	eba0 0308 	sub.w	r3, r0, r8
 80068a2:	fa09 f303 	lsl.w	r3, r9, r3
 80068a6:	4313      	orrs	r3, r2
 80068a8:	46a2      	mov	sl, r4
 80068aa:	9304      	str	r3, [sp, #16]
 80068ac:	e7d2      	b.n	8006854 <_svfiprintf_r+0xa0>
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	1d19      	adds	r1, r3, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	9103      	str	r1, [sp, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bfbb      	ittet	lt
 80068ba:	425b      	neglt	r3, r3
 80068bc:	f042 0202 	orrlt.w	r2, r2, #2
 80068c0:	9307      	strge	r3, [sp, #28]
 80068c2:	9307      	strlt	r3, [sp, #28]
 80068c4:	bfb8      	it	lt
 80068c6:	9204      	strlt	r2, [sp, #16]
 80068c8:	7823      	ldrb	r3, [r4, #0]
 80068ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80068cc:	d10a      	bne.n	80068e4 <_svfiprintf_r+0x130>
 80068ce:	7863      	ldrb	r3, [r4, #1]
 80068d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d2:	d132      	bne.n	800693a <_svfiprintf_r+0x186>
 80068d4:	9b03      	ldr	r3, [sp, #12]
 80068d6:	3402      	adds	r4, #2
 80068d8:	1d1a      	adds	r2, r3, #4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	9203      	str	r2, [sp, #12]
 80068de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068e2:	9305      	str	r3, [sp, #20]
 80068e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800699c <_svfiprintf_r+0x1e8>
 80068e8:	2203      	movs	r2, #3
 80068ea:	4650      	mov	r0, sl
 80068ec:	7821      	ldrb	r1, [r4, #0]
 80068ee:	f7fd fc7e 	bl	80041ee <memchr>
 80068f2:	b138      	cbz	r0, 8006904 <_svfiprintf_r+0x150>
 80068f4:	2240      	movs	r2, #64	@ 0x40
 80068f6:	9b04      	ldr	r3, [sp, #16]
 80068f8:	eba0 000a 	sub.w	r0, r0, sl
 80068fc:	4082      	lsls	r2, r0
 80068fe:	4313      	orrs	r3, r2
 8006900:	3401      	adds	r4, #1
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006908:	2206      	movs	r2, #6
 800690a:	4825      	ldr	r0, [pc, #148]	@ (80069a0 <_svfiprintf_r+0x1ec>)
 800690c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006910:	f7fd fc6d 	bl	80041ee <memchr>
 8006914:	2800      	cmp	r0, #0
 8006916:	d036      	beq.n	8006986 <_svfiprintf_r+0x1d2>
 8006918:	4b22      	ldr	r3, [pc, #136]	@ (80069a4 <_svfiprintf_r+0x1f0>)
 800691a:	bb1b      	cbnz	r3, 8006964 <_svfiprintf_r+0x1b0>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	3307      	adds	r3, #7
 8006920:	f023 0307 	bic.w	r3, r3, #7
 8006924:	3308      	adds	r3, #8
 8006926:	9303      	str	r3, [sp, #12]
 8006928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800692a:	4433      	add	r3, r6
 800692c:	9309      	str	r3, [sp, #36]	@ 0x24
 800692e:	e76a      	b.n	8006806 <_svfiprintf_r+0x52>
 8006930:	460c      	mov	r4, r1
 8006932:	2001      	movs	r0, #1
 8006934:	fb0c 3202 	mla	r2, ip, r2, r3
 8006938:	e7a8      	b.n	800688c <_svfiprintf_r+0xd8>
 800693a:	2300      	movs	r3, #0
 800693c:	f04f 0c0a 	mov.w	ip, #10
 8006940:	4619      	mov	r1, r3
 8006942:	3401      	adds	r4, #1
 8006944:	9305      	str	r3, [sp, #20]
 8006946:	4620      	mov	r0, r4
 8006948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800694c:	3a30      	subs	r2, #48	@ 0x30
 800694e:	2a09      	cmp	r2, #9
 8006950:	d903      	bls.n	800695a <_svfiprintf_r+0x1a6>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0c6      	beq.n	80068e4 <_svfiprintf_r+0x130>
 8006956:	9105      	str	r1, [sp, #20]
 8006958:	e7c4      	b.n	80068e4 <_svfiprintf_r+0x130>
 800695a:	4604      	mov	r4, r0
 800695c:	2301      	movs	r3, #1
 800695e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006962:	e7f0      	b.n	8006946 <_svfiprintf_r+0x192>
 8006964:	ab03      	add	r3, sp, #12
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	462a      	mov	r2, r5
 800696a:	4638      	mov	r0, r7
 800696c:	4b0e      	ldr	r3, [pc, #56]	@ (80069a8 <_svfiprintf_r+0x1f4>)
 800696e:	a904      	add	r1, sp, #16
 8006970:	f7fc fcca 	bl	8003308 <_printf_float>
 8006974:	1c42      	adds	r2, r0, #1
 8006976:	4606      	mov	r6, r0
 8006978:	d1d6      	bne.n	8006928 <_svfiprintf_r+0x174>
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	065b      	lsls	r3, r3, #25
 800697e:	f53f af2d 	bmi.w	80067dc <_svfiprintf_r+0x28>
 8006982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006984:	e72c      	b.n	80067e0 <_svfiprintf_r+0x2c>
 8006986:	ab03      	add	r3, sp, #12
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	462a      	mov	r2, r5
 800698c:	4638      	mov	r0, r7
 800698e:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <_svfiprintf_r+0x1f4>)
 8006990:	a904      	add	r1, sp, #16
 8006992:	f7fc ff57 	bl	8003844 <_printf_i>
 8006996:	e7ed      	b.n	8006974 <_svfiprintf_r+0x1c0>
 8006998:	08007c99 	.word	0x08007c99
 800699c:	08007c9f 	.word	0x08007c9f
 80069a0:	08007ca3 	.word	0x08007ca3
 80069a4:	08003309 	.word	0x08003309
 80069a8:	080066fd 	.word	0x080066fd

080069ac <__sflush_r>:
 80069ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	0716      	lsls	r6, r2, #28
 80069b4:	4605      	mov	r5, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	d454      	bmi.n	8006a64 <__sflush_r+0xb8>
 80069ba:	684b      	ldr	r3, [r1, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc02      	bgt.n	80069c6 <__sflush_r+0x1a>
 80069c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dd48      	ble.n	8006a58 <__sflush_r+0xac>
 80069c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069c8:	2e00      	cmp	r6, #0
 80069ca:	d045      	beq.n	8006a58 <__sflush_r+0xac>
 80069cc:	2300      	movs	r3, #0
 80069ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069d2:	682f      	ldr	r7, [r5, #0]
 80069d4:	6a21      	ldr	r1, [r4, #32]
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	d030      	beq.n	8006a3c <__sflush_r+0x90>
 80069da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	0759      	lsls	r1, r3, #29
 80069e0:	d505      	bpl.n	80069ee <__sflush_r+0x42>
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	1ad2      	subs	r2, r2, r3
 80069e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069e8:	b10b      	cbz	r3, 80069ee <__sflush_r+0x42>
 80069ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069ec:	1ad2      	subs	r2, r2, r3
 80069ee:	2300      	movs	r3, #0
 80069f0:	4628      	mov	r0, r5
 80069f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069f4:	6a21      	ldr	r1, [r4, #32]
 80069f6:	47b0      	blx	r6
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	d106      	bne.n	8006a0c <__sflush_r+0x60>
 80069fe:	6829      	ldr	r1, [r5, #0]
 8006a00:	291d      	cmp	r1, #29
 8006a02:	d82b      	bhi.n	8006a5c <__sflush_r+0xb0>
 8006a04:	4a28      	ldr	r2, [pc, #160]	@ (8006aa8 <__sflush_r+0xfc>)
 8006a06:	410a      	asrs	r2, r1
 8006a08:	07d6      	lsls	r6, r2, #31
 8006a0a:	d427      	bmi.n	8006a5c <__sflush_r+0xb0>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	6062      	str	r2, [r4, #4]
 8006a10:	6922      	ldr	r2, [r4, #16]
 8006a12:	04d9      	lsls	r1, r3, #19
 8006a14:	6022      	str	r2, [r4, #0]
 8006a16:	d504      	bpl.n	8006a22 <__sflush_r+0x76>
 8006a18:	1c42      	adds	r2, r0, #1
 8006a1a:	d101      	bne.n	8006a20 <__sflush_r+0x74>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	b903      	cbnz	r3, 8006a22 <__sflush_r+0x76>
 8006a20:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a24:	602f      	str	r7, [r5, #0]
 8006a26:	b1b9      	cbz	r1, 8006a58 <__sflush_r+0xac>
 8006a28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a2c:	4299      	cmp	r1, r3
 8006a2e:	d002      	beq.n	8006a36 <__sflush_r+0x8a>
 8006a30:	4628      	mov	r0, r5
 8006a32:	f7fe fa41 	bl	8004eb8 <_free_r>
 8006a36:	2300      	movs	r3, #0
 8006a38:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a3a:	e00d      	b.n	8006a58 <__sflush_r+0xac>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b0      	blx	r6
 8006a42:	4602      	mov	r2, r0
 8006a44:	1c50      	adds	r0, r2, #1
 8006a46:	d1c9      	bne.n	80069dc <__sflush_r+0x30>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0c6      	beq.n	80069dc <__sflush_r+0x30>
 8006a4e:	2b1d      	cmp	r3, #29
 8006a50:	d001      	beq.n	8006a56 <__sflush_r+0xaa>
 8006a52:	2b16      	cmp	r3, #22
 8006a54:	d11d      	bne.n	8006a92 <__sflush_r+0xe6>
 8006a56:	602f      	str	r7, [r5, #0]
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e021      	b.n	8006aa0 <__sflush_r+0xf4>
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a60:	b21b      	sxth	r3, r3
 8006a62:	e01a      	b.n	8006a9a <__sflush_r+0xee>
 8006a64:	690f      	ldr	r7, [r1, #16]
 8006a66:	2f00      	cmp	r7, #0
 8006a68:	d0f6      	beq.n	8006a58 <__sflush_r+0xac>
 8006a6a:	0793      	lsls	r3, r2, #30
 8006a6c:	bf18      	it	ne
 8006a6e:	2300      	movne	r3, #0
 8006a70:	680e      	ldr	r6, [r1, #0]
 8006a72:	bf08      	it	eq
 8006a74:	694b      	ldreq	r3, [r1, #20]
 8006a76:	1bf6      	subs	r6, r6, r7
 8006a78:	600f      	str	r7, [r1, #0]
 8006a7a:	608b      	str	r3, [r1, #8]
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	ddeb      	ble.n	8006a58 <__sflush_r+0xac>
 8006a80:	4633      	mov	r3, r6
 8006a82:	463a      	mov	r2, r7
 8006a84:	4628      	mov	r0, r5
 8006a86:	6a21      	ldr	r1, [r4, #32]
 8006a88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006a8c:	47e0      	blx	ip
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	dc07      	bgt.n	8006aa2 <__sflush_r+0xf6>
 8006a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa2:	4407      	add	r7, r0
 8006aa4:	1a36      	subs	r6, r6, r0
 8006aa6:	e7e9      	b.n	8006a7c <__sflush_r+0xd0>
 8006aa8:	dfbffffe 	.word	0xdfbffffe

08006aac <_fflush_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	690b      	ldr	r3, [r1, #16]
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	b913      	cbnz	r3, 8006abc <_fflush_r+0x10>
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	4628      	mov	r0, r5
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	b118      	cbz	r0, 8006ac6 <_fflush_r+0x1a>
 8006abe:	6a03      	ldr	r3, [r0, #32]
 8006ac0:	b90b      	cbnz	r3, 8006ac6 <_fflush_r+0x1a>
 8006ac2:	f7fd fa7b 	bl	8003fbc <__sinit>
 8006ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f3      	beq.n	8006ab6 <_fflush_r+0xa>
 8006ace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ad0:	07d0      	lsls	r0, r2, #31
 8006ad2:	d404      	bmi.n	8006ade <_fflush_r+0x32>
 8006ad4:	0599      	lsls	r1, r3, #22
 8006ad6:	d402      	bmi.n	8006ade <_fflush_r+0x32>
 8006ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ada:	f7fd fb86 	bl	80041ea <__retarget_lock_acquire_recursive>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	f7ff ff63 	bl	80069ac <__sflush_r>
 8006ae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ae8:	4605      	mov	r5, r0
 8006aea:	07da      	lsls	r2, r3, #31
 8006aec:	d4e4      	bmi.n	8006ab8 <_fflush_r+0xc>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	059b      	lsls	r3, r3, #22
 8006af2:	d4e1      	bmi.n	8006ab8 <_fflush_r+0xc>
 8006af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006af6:	f7fd fb79 	bl	80041ec <__retarget_lock_release_recursive>
 8006afa:	e7dd      	b.n	8006ab8 <_fflush_r+0xc>

08006afc <memmove>:
 8006afc:	4288      	cmp	r0, r1
 8006afe:	b510      	push	{r4, lr}
 8006b00:	eb01 0402 	add.w	r4, r1, r2
 8006b04:	d902      	bls.n	8006b0c <memmove+0x10>
 8006b06:	4284      	cmp	r4, r0
 8006b08:	4623      	mov	r3, r4
 8006b0a:	d807      	bhi.n	8006b1c <memmove+0x20>
 8006b0c:	1e43      	subs	r3, r0, #1
 8006b0e:	42a1      	cmp	r1, r4
 8006b10:	d008      	beq.n	8006b24 <memmove+0x28>
 8006b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b1a:	e7f8      	b.n	8006b0e <memmove+0x12>
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	4402      	add	r2, r0
 8006b20:	428a      	cmp	r2, r1
 8006b22:	d100      	bne.n	8006b26 <memmove+0x2a>
 8006b24:	bd10      	pop	{r4, pc}
 8006b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b2e:	e7f7      	b.n	8006b20 <memmove+0x24>

08006b30 <strncmp>:
 8006b30:	b510      	push	{r4, lr}
 8006b32:	b16a      	cbz	r2, 8006b50 <strncmp+0x20>
 8006b34:	3901      	subs	r1, #1
 8006b36:	1884      	adds	r4, r0, r2
 8006b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d103      	bne.n	8006b4c <strncmp+0x1c>
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	d001      	beq.n	8006b4c <strncmp+0x1c>
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	d1f5      	bne.n	8006b38 <strncmp+0x8>
 8006b4c:	1ad0      	subs	r0, r2, r3
 8006b4e:	bd10      	pop	{r4, pc}
 8006b50:	4610      	mov	r0, r2
 8006b52:	e7fc      	b.n	8006b4e <strncmp+0x1e>

08006b54 <_sbrk_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	2300      	movs	r3, #0
 8006b58:	4d05      	ldr	r5, [pc, #20]	@ (8006b70 <_sbrk_r+0x1c>)
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	f7fa ff1c 	bl	800199c <_sbrk>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_sbrk_r+0x1a>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_sbrk_r+0x1a>
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	20000414 	.word	0x20000414

08006b74 <memcpy>:
 8006b74:	440a      	add	r2, r1
 8006b76:	4291      	cmp	r1, r2
 8006b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b7c:	d100      	bne.n	8006b80 <memcpy+0xc>
 8006b7e:	4770      	bx	lr
 8006b80:	b510      	push	{r4, lr}
 8006b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b86:	4291      	cmp	r1, r2
 8006b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b8c:	d1f9      	bne.n	8006b82 <memcpy+0xe>
 8006b8e:	bd10      	pop	{r4, pc}

08006b90 <nan>:
 8006b90:	2000      	movs	r0, #0
 8006b92:	4901      	ldr	r1, [pc, #4]	@ (8006b98 <nan+0x8>)
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	7ff80000 	.word	0x7ff80000

08006b9c <__assert_func>:
 8006b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4b09      	ldr	r3, [pc, #36]	@ (8006bc8 <__assert_func+0x2c>)
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68d8      	ldr	r0, [r3, #12]
 8006baa:	b954      	cbnz	r4, 8006bc2 <__assert_func+0x26>
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <__assert_func+0x30>)
 8006bae:	461c      	mov	r4, r3
 8006bb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bb4:	9100      	str	r1, [sp, #0]
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	4905      	ldr	r1, [pc, #20]	@ (8006bd0 <__assert_func+0x34>)
 8006bba:	f000 fba7 	bl	800730c <fiprintf>
 8006bbe:	f000 fbb7 	bl	8007330 <abort>
 8006bc2:	4b04      	ldr	r3, [pc, #16]	@ (8006bd4 <__assert_func+0x38>)
 8006bc4:	e7f4      	b.n	8006bb0 <__assert_func+0x14>
 8006bc6:	bf00      	nop
 8006bc8:	20000018 	.word	0x20000018
 8006bcc:	08007ced 	.word	0x08007ced
 8006bd0:	08007cbf 	.word	0x08007cbf
 8006bd4:	08007cb2 	.word	0x08007cb2

08006bd8 <_calloc_r>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	fba1 5402 	umull	r5, r4, r1, r2
 8006bde:	b93c      	cbnz	r4, 8006bf0 <_calloc_r+0x18>
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7fe f9db 	bl	8004f9c <_malloc_r>
 8006be6:	4606      	mov	r6, r0
 8006be8:	b928      	cbnz	r0, 8006bf6 <_calloc_r+0x1e>
 8006bea:	2600      	movs	r6, #0
 8006bec:	4630      	mov	r0, r6
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	220c      	movs	r2, #12
 8006bf2:	6002      	str	r2, [r0, #0]
 8006bf4:	e7f9      	b.n	8006bea <_calloc_r+0x12>
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	f7fd fa78 	bl	80040ee <memset>
 8006bfe:	e7f5      	b.n	8006bec <_calloc_r+0x14>

08006c00 <rshift>:
 8006c00:	6903      	ldr	r3, [r0, #16]
 8006c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c0a:	f100 0414 	add.w	r4, r0, #20
 8006c0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c12:	dd46      	ble.n	8006ca2 <rshift+0xa2>
 8006c14:	f011 011f 	ands.w	r1, r1, #31
 8006c18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c20:	d10c      	bne.n	8006c3c <rshift+0x3c>
 8006c22:	4629      	mov	r1, r5
 8006c24:	f100 0710 	add.w	r7, r0, #16
 8006c28:	42b1      	cmp	r1, r6
 8006c2a:	d335      	bcc.n	8006c98 <rshift+0x98>
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	1eea      	subs	r2, r5, #3
 8006c32:	4296      	cmp	r6, r2
 8006c34:	bf38      	it	cc
 8006c36:	2300      	movcc	r3, #0
 8006c38:	4423      	add	r3, r4
 8006c3a:	e015      	b.n	8006c68 <rshift+0x68>
 8006c3c:	46a1      	mov	r9, r4
 8006c3e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c42:	f1c1 0820 	rsb	r8, r1, #32
 8006c46:	40cf      	lsrs	r7, r1
 8006c48:	f105 0e04 	add.w	lr, r5, #4
 8006c4c:	4576      	cmp	r6, lr
 8006c4e:	46f4      	mov	ip, lr
 8006c50:	d816      	bhi.n	8006c80 <rshift+0x80>
 8006c52:	1a9a      	subs	r2, r3, r2
 8006c54:	0092      	lsls	r2, r2, #2
 8006c56:	3a04      	subs	r2, #4
 8006c58:	3501      	adds	r5, #1
 8006c5a:	42ae      	cmp	r6, r5
 8006c5c:	bf38      	it	cc
 8006c5e:	2200      	movcc	r2, #0
 8006c60:	18a3      	adds	r3, r4, r2
 8006c62:	50a7      	str	r7, [r4, r2]
 8006c64:	b107      	cbz	r7, 8006c68 <rshift+0x68>
 8006c66:	3304      	adds	r3, #4
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	eba3 0204 	sub.w	r2, r3, r4
 8006c6e:	bf08      	it	eq
 8006c70:	2300      	moveq	r3, #0
 8006c72:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c76:	6102      	str	r2, [r0, #16]
 8006c78:	bf08      	it	eq
 8006c7a:	6143      	streq	r3, [r0, #20]
 8006c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c80:	f8dc c000 	ldr.w	ip, [ip]
 8006c84:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c88:	ea4c 0707 	orr.w	r7, ip, r7
 8006c8c:	f849 7b04 	str.w	r7, [r9], #4
 8006c90:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c94:	40cf      	lsrs	r7, r1
 8006c96:	e7d9      	b.n	8006c4c <rshift+0x4c>
 8006c98:	f851 cb04 	ldr.w	ip, [r1], #4
 8006c9c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ca0:	e7c2      	b.n	8006c28 <rshift+0x28>
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	e7e0      	b.n	8006c68 <rshift+0x68>

08006ca6 <__hexdig_fun>:
 8006ca6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d802      	bhi.n	8006cb4 <__hexdig_fun+0xe>
 8006cae:	3820      	subs	r0, #32
 8006cb0:	b2c0      	uxtb	r0, r0
 8006cb2:	4770      	bx	lr
 8006cb4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006cb8:	2b05      	cmp	r3, #5
 8006cba:	d801      	bhi.n	8006cc0 <__hexdig_fun+0x1a>
 8006cbc:	3847      	subs	r0, #71	@ 0x47
 8006cbe:	e7f7      	b.n	8006cb0 <__hexdig_fun+0xa>
 8006cc0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006cc4:	2b05      	cmp	r3, #5
 8006cc6:	d801      	bhi.n	8006ccc <__hexdig_fun+0x26>
 8006cc8:	3827      	subs	r0, #39	@ 0x27
 8006cca:	e7f1      	b.n	8006cb0 <__hexdig_fun+0xa>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	4770      	bx	lr

08006cd0 <__gethex>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	468a      	mov	sl, r1
 8006cd6:	4690      	mov	r8, r2
 8006cd8:	b085      	sub	sp, #20
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	680b      	ldr	r3, [r1, #0]
 8006cde:	9001      	str	r0, [sp, #4]
 8006ce0:	1c9c      	adds	r4, r3, #2
 8006ce2:	46a1      	mov	r9, r4
 8006ce4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006ce8:	2830      	cmp	r0, #48	@ 0x30
 8006cea:	d0fa      	beq.n	8006ce2 <__gethex+0x12>
 8006cec:	eba9 0303 	sub.w	r3, r9, r3
 8006cf0:	f1a3 0b02 	sub.w	fp, r3, #2
 8006cf4:	f7ff ffd7 	bl	8006ca6 <__hexdig_fun>
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d168      	bne.n	8006dd0 <__gethex+0x100>
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4648      	mov	r0, r9
 8006d02:	499f      	ldr	r1, [pc, #636]	@ (8006f80 <__gethex+0x2b0>)
 8006d04:	f7ff ff14 	bl	8006b30 <strncmp>
 8006d08:	4607      	mov	r7, r0
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d167      	bne.n	8006dde <__gethex+0x10e>
 8006d0e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006d12:	4626      	mov	r6, r4
 8006d14:	f7ff ffc7 	bl	8006ca6 <__hexdig_fun>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d062      	beq.n	8006de2 <__gethex+0x112>
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	7818      	ldrb	r0, [r3, #0]
 8006d20:	4699      	mov	r9, r3
 8006d22:	2830      	cmp	r0, #48	@ 0x30
 8006d24:	f103 0301 	add.w	r3, r3, #1
 8006d28:	d0f9      	beq.n	8006d1e <__gethex+0x4e>
 8006d2a:	f7ff ffbc 	bl	8006ca6 <__hexdig_fun>
 8006d2e:	fab0 f580 	clz	r5, r0
 8006d32:	f04f 0b01 	mov.w	fp, #1
 8006d36:	096d      	lsrs	r5, r5, #5
 8006d38:	464a      	mov	r2, r9
 8006d3a:	4616      	mov	r6, r2
 8006d3c:	7830      	ldrb	r0, [r6, #0]
 8006d3e:	3201      	adds	r2, #1
 8006d40:	f7ff ffb1 	bl	8006ca6 <__hexdig_fun>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d1f8      	bne.n	8006d3a <__gethex+0x6a>
 8006d48:	2201      	movs	r2, #1
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	498c      	ldr	r1, [pc, #560]	@ (8006f80 <__gethex+0x2b0>)
 8006d4e:	f7ff feef 	bl	8006b30 <strncmp>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d13f      	bne.n	8006dd6 <__gethex+0x106>
 8006d56:	b944      	cbnz	r4, 8006d6a <__gethex+0x9a>
 8006d58:	1c74      	adds	r4, r6, #1
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	7830      	ldrb	r0, [r6, #0]
 8006d60:	3201      	adds	r2, #1
 8006d62:	f7ff ffa0 	bl	8006ca6 <__hexdig_fun>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d1f8      	bne.n	8006d5c <__gethex+0x8c>
 8006d6a:	1ba4      	subs	r4, r4, r6
 8006d6c:	00a7      	lsls	r7, r4, #2
 8006d6e:	7833      	ldrb	r3, [r6, #0]
 8006d70:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006d74:	2b50      	cmp	r3, #80	@ 0x50
 8006d76:	d13e      	bne.n	8006df6 <__gethex+0x126>
 8006d78:	7873      	ldrb	r3, [r6, #1]
 8006d7a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006d7c:	d033      	beq.n	8006de6 <__gethex+0x116>
 8006d7e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006d80:	d034      	beq.n	8006dec <__gethex+0x11c>
 8006d82:	2400      	movs	r4, #0
 8006d84:	1c71      	adds	r1, r6, #1
 8006d86:	7808      	ldrb	r0, [r1, #0]
 8006d88:	f7ff ff8d 	bl	8006ca6 <__hexdig_fun>
 8006d8c:	1e43      	subs	r3, r0, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b18      	cmp	r3, #24
 8006d92:	d830      	bhi.n	8006df6 <__gethex+0x126>
 8006d94:	f1a0 0210 	sub.w	r2, r0, #16
 8006d98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d9c:	f7ff ff83 	bl	8006ca6 <__hexdig_fun>
 8006da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8006da4:	fa5f fc8c 	uxtb.w	ip, ip
 8006da8:	f1bc 0f18 	cmp.w	ip, #24
 8006dac:	f04f 030a 	mov.w	r3, #10
 8006db0:	d91e      	bls.n	8006df0 <__gethex+0x120>
 8006db2:	b104      	cbz	r4, 8006db6 <__gethex+0xe6>
 8006db4:	4252      	negs	r2, r2
 8006db6:	4417      	add	r7, r2
 8006db8:	f8ca 1000 	str.w	r1, [sl]
 8006dbc:	b1ed      	cbz	r5, 8006dfa <__gethex+0x12a>
 8006dbe:	f1bb 0f00 	cmp.w	fp, #0
 8006dc2:	bf0c      	ite	eq
 8006dc4:	2506      	moveq	r5, #6
 8006dc6:	2500      	movne	r5, #0
 8006dc8:	4628      	mov	r0, r5
 8006dca:	b005      	add	sp, #20
 8006dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd0:	2500      	movs	r5, #0
 8006dd2:	462c      	mov	r4, r5
 8006dd4:	e7b0      	b.n	8006d38 <__gethex+0x68>
 8006dd6:	2c00      	cmp	r4, #0
 8006dd8:	d1c7      	bne.n	8006d6a <__gethex+0x9a>
 8006dda:	4627      	mov	r7, r4
 8006ddc:	e7c7      	b.n	8006d6e <__gethex+0x9e>
 8006dde:	464e      	mov	r6, r9
 8006de0:	462f      	mov	r7, r5
 8006de2:	2501      	movs	r5, #1
 8006de4:	e7c3      	b.n	8006d6e <__gethex+0x9e>
 8006de6:	2400      	movs	r4, #0
 8006de8:	1cb1      	adds	r1, r6, #2
 8006dea:	e7cc      	b.n	8006d86 <__gethex+0xb6>
 8006dec:	2401      	movs	r4, #1
 8006dee:	e7fb      	b.n	8006de8 <__gethex+0x118>
 8006df0:	fb03 0002 	mla	r0, r3, r2, r0
 8006df4:	e7ce      	b.n	8006d94 <__gethex+0xc4>
 8006df6:	4631      	mov	r1, r6
 8006df8:	e7de      	b.n	8006db8 <__gethex+0xe8>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	eba6 0309 	sub.w	r3, r6, r9
 8006e00:	3b01      	subs	r3, #1
 8006e02:	2b07      	cmp	r3, #7
 8006e04:	dc0a      	bgt.n	8006e1c <__gethex+0x14c>
 8006e06:	9801      	ldr	r0, [sp, #4]
 8006e08:	f7fe f954 	bl	80050b4 <_Balloc>
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	b940      	cbnz	r0, 8006e22 <__gethex+0x152>
 8006e10:	4602      	mov	r2, r0
 8006e12:	21e4      	movs	r1, #228	@ 0xe4
 8006e14:	4b5b      	ldr	r3, [pc, #364]	@ (8006f84 <__gethex+0x2b4>)
 8006e16:	485c      	ldr	r0, [pc, #368]	@ (8006f88 <__gethex+0x2b8>)
 8006e18:	f7ff fec0 	bl	8006b9c <__assert_func>
 8006e1c:	3101      	adds	r1, #1
 8006e1e:	105b      	asrs	r3, r3, #1
 8006e20:	e7ef      	b.n	8006e02 <__gethex+0x132>
 8006e22:	2300      	movs	r3, #0
 8006e24:	f100 0a14 	add.w	sl, r0, #20
 8006e28:	4655      	mov	r5, sl
 8006e2a:	469b      	mov	fp, r3
 8006e2c:	45b1      	cmp	r9, r6
 8006e2e:	d337      	bcc.n	8006ea0 <__gethex+0x1d0>
 8006e30:	f845 bb04 	str.w	fp, [r5], #4
 8006e34:	eba5 050a 	sub.w	r5, r5, sl
 8006e38:	10ad      	asrs	r5, r5, #2
 8006e3a:	6125      	str	r5, [r4, #16]
 8006e3c:	4658      	mov	r0, fp
 8006e3e:	f7fe fa2b 	bl	8005298 <__hi0bits>
 8006e42:	016d      	lsls	r5, r5, #5
 8006e44:	f8d8 6000 	ldr.w	r6, [r8]
 8006e48:	1a2d      	subs	r5, r5, r0
 8006e4a:	42b5      	cmp	r5, r6
 8006e4c:	dd54      	ble.n	8006ef8 <__gethex+0x228>
 8006e4e:	1bad      	subs	r5, r5, r6
 8006e50:	4629      	mov	r1, r5
 8006e52:	4620      	mov	r0, r4
 8006e54:	f7fe fdb3 	bl	80059be <__any_on>
 8006e58:	4681      	mov	r9, r0
 8006e5a:	b178      	cbz	r0, 8006e7c <__gethex+0x1ac>
 8006e5c:	f04f 0901 	mov.w	r9, #1
 8006e60:	1e6b      	subs	r3, r5, #1
 8006e62:	1159      	asrs	r1, r3, #5
 8006e64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006e68:	f003 021f 	and.w	r2, r3, #31
 8006e6c:	fa09 f202 	lsl.w	r2, r9, r2
 8006e70:	420a      	tst	r2, r1
 8006e72:	d003      	beq.n	8006e7c <__gethex+0x1ac>
 8006e74:	454b      	cmp	r3, r9
 8006e76:	dc36      	bgt.n	8006ee6 <__gethex+0x216>
 8006e78:	f04f 0902 	mov.w	r9, #2
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7ff febe 	bl	8006c00 <rshift>
 8006e84:	442f      	add	r7, r5
 8006e86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e8a:	42bb      	cmp	r3, r7
 8006e8c:	da42      	bge.n	8006f14 <__gethex+0x244>
 8006e8e:	4621      	mov	r1, r4
 8006e90:	9801      	ldr	r0, [sp, #4]
 8006e92:	f7fe f94f 	bl	8005134 <_Bfree>
 8006e96:	2300      	movs	r3, #0
 8006e98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e9a:	25a3      	movs	r5, #163	@ 0xa3
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e793      	b.n	8006dc8 <__gethex+0xf8>
 8006ea0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006ea4:	2a2e      	cmp	r2, #46	@ 0x2e
 8006ea6:	d012      	beq.n	8006ece <__gethex+0x1fe>
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d104      	bne.n	8006eb6 <__gethex+0x1e6>
 8006eac:	f845 bb04 	str.w	fp, [r5], #4
 8006eb0:	f04f 0b00 	mov.w	fp, #0
 8006eb4:	465b      	mov	r3, fp
 8006eb6:	7830      	ldrb	r0, [r6, #0]
 8006eb8:	9303      	str	r3, [sp, #12]
 8006eba:	f7ff fef4 	bl	8006ca6 <__hexdig_fun>
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	f000 000f 	and.w	r0, r0, #15
 8006ec4:	4098      	lsls	r0, r3
 8006ec6:	ea4b 0b00 	orr.w	fp, fp, r0
 8006eca:	3304      	adds	r3, #4
 8006ecc:	e7ae      	b.n	8006e2c <__gethex+0x15c>
 8006ece:	45b1      	cmp	r9, r6
 8006ed0:	d8ea      	bhi.n	8006ea8 <__gethex+0x1d8>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	492a      	ldr	r1, [pc, #168]	@ (8006f80 <__gethex+0x2b0>)
 8006ed8:	9303      	str	r3, [sp, #12]
 8006eda:	f7ff fe29 	bl	8006b30 <strncmp>
 8006ede:	9b03      	ldr	r3, [sp, #12]
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d1e1      	bne.n	8006ea8 <__gethex+0x1d8>
 8006ee4:	e7a2      	b.n	8006e2c <__gethex+0x15c>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	1ea9      	subs	r1, r5, #2
 8006eea:	f7fe fd68 	bl	80059be <__any_on>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d0c2      	beq.n	8006e78 <__gethex+0x1a8>
 8006ef2:	f04f 0903 	mov.w	r9, #3
 8006ef6:	e7c1      	b.n	8006e7c <__gethex+0x1ac>
 8006ef8:	da09      	bge.n	8006f0e <__gethex+0x23e>
 8006efa:	1b75      	subs	r5, r6, r5
 8006efc:	4621      	mov	r1, r4
 8006efe:	462a      	mov	r2, r5
 8006f00:	9801      	ldr	r0, [sp, #4]
 8006f02:	f7fe fb2d 	bl	8005560 <__lshift>
 8006f06:	4604      	mov	r4, r0
 8006f08:	1b7f      	subs	r7, r7, r5
 8006f0a:	f100 0a14 	add.w	sl, r0, #20
 8006f0e:	f04f 0900 	mov.w	r9, #0
 8006f12:	e7b8      	b.n	8006e86 <__gethex+0x1b6>
 8006f14:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f18:	42bd      	cmp	r5, r7
 8006f1a:	dd6f      	ble.n	8006ffc <__gethex+0x32c>
 8006f1c:	1bed      	subs	r5, r5, r7
 8006f1e:	42ae      	cmp	r6, r5
 8006f20:	dc34      	bgt.n	8006f8c <__gethex+0x2bc>
 8006f22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d022      	beq.n	8006f70 <__gethex+0x2a0>
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d024      	beq.n	8006f78 <__gethex+0x2a8>
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d115      	bne.n	8006f5e <__gethex+0x28e>
 8006f32:	42ae      	cmp	r6, r5
 8006f34:	d113      	bne.n	8006f5e <__gethex+0x28e>
 8006f36:	2e01      	cmp	r6, #1
 8006f38:	d10b      	bne.n	8006f52 <__gethex+0x282>
 8006f3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f3e:	9a02      	ldr	r2, [sp, #8]
 8006f40:	2562      	movs	r5, #98	@ 0x62
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	2301      	movs	r3, #1
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	f8ca 3000 	str.w	r3, [sl]
 8006f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f4e:	601c      	str	r4, [r3, #0]
 8006f50:	e73a      	b.n	8006dc8 <__gethex+0xf8>
 8006f52:	4620      	mov	r0, r4
 8006f54:	1e71      	subs	r1, r6, #1
 8006f56:	f7fe fd32 	bl	80059be <__any_on>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d1ed      	bne.n	8006f3a <__gethex+0x26a>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	9801      	ldr	r0, [sp, #4]
 8006f62:	f7fe f8e7 	bl	8005134 <_Bfree>
 8006f66:	2300      	movs	r3, #0
 8006f68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f6a:	2550      	movs	r5, #80	@ 0x50
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	e72b      	b.n	8006dc8 <__gethex+0xf8>
 8006f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f3      	bne.n	8006f5e <__gethex+0x28e>
 8006f76:	e7e0      	b.n	8006f3a <__gethex+0x26a>
 8006f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1dd      	bne.n	8006f3a <__gethex+0x26a>
 8006f7e:	e7ee      	b.n	8006f5e <__gethex+0x28e>
 8006f80:	08007b40 	.word	0x08007b40
 8006f84:	080079d7 	.word	0x080079d7
 8006f88:	08007cee 	.word	0x08007cee
 8006f8c:	1e6f      	subs	r7, r5, #1
 8006f8e:	f1b9 0f00 	cmp.w	r9, #0
 8006f92:	d130      	bne.n	8006ff6 <__gethex+0x326>
 8006f94:	b127      	cbz	r7, 8006fa0 <__gethex+0x2d0>
 8006f96:	4639      	mov	r1, r7
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f7fe fd10 	bl	80059be <__any_on>
 8006f9e:	4681      	mov	r9, r0
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	1b76      	subs	r6, r6, r5
 8006fa6:	2502      	movs	r5, #2
 8006fa8:	117a      	asrs	r2, r7, #5
 8006faa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006fae:	f007 071f 	and.w	r7, r7, #31
 8006fb2:	40bb      	lsls	r3, r7
 8006fb4:	4213      	tst	r3, r2
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	bf18      	it	ne
 8006fba:	f049 0902 	orrne.w	r9, r9, #2
 8006fbe:	f7ff fe1f 	bl	8006c00 <rshift>
 8006fc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006fc6:	f1b9 0f00 	cmp.w	r9, #0
 8006fca:	d047      	beq.n	800705c <__gethex+0x38c>
 8006fcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d015      	beq.n	8007000 <__gethex+0x330>
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d017      	beq.n	8007008 <__gethex+0x338>
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d109      	bne.n	8006ff0 <__gethex+0x320>
 8006fdc:	f019 0f02 	tst.w	r9, #2
 8006fe0:	d006      	beq.n	8006ff0 <__gethex+0x320>
 8006fe2:	f8da 3000 	ldr.w	r3, [sl]
 8006fe6:	ea49 0903 	orr.w	r9, r9, r3
 8006fea:	f019 0f01 	tst.w	r9, #1
 8006fee:	d10e      	bne.n	800700e <__gethex+0x33e>
 8006ff0:	f045 0510 	orr.w	r5, r5, #16
 8006ff4:	e032      	b.n	800705c <__gethex+0x38c>
 8006ff6:	f04f 0901 	mov.w	r9, #1
 8006ffa:	e7d1      	b.n	8006fa0 <__gethex+0x2d0>
 8006ffc:	2501      	movs	r5, #1
 8006ffe:	e7e2      	b.n	8006fc6 <__gethex+0x2f6>
 8007000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007002:	f1c3 0301 	rsb	r3, r3, #1
 8007006:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f0      	beq.n	8006ff0 <__gethex+0x320>
 800700e:	f04f 0c00 	mov.w	ip, #0
 8007012:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007016:	f104 0314 	add.w	r3, r4, #20
 800701a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800701e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007022:	4618      	mov	r0, r3
 8007024:	f853 2b04 	ldr.w	r2, [r3], #4
 8007028:	f1b2 3fff 	cmp.w	r2, #4294967295
 800702c:	d01b      	beq.n	8007066 <__gethex+0x396>
 800702e:	3201      	adds	r2, #1
 8007030:	6002      	str	r2, [r0, #0]
 8007032:	2d02      	cmp	r5, #2
 8007034:	f104 0314 	add.w	r3, r4, #20
 8007038:	d13c      	bne.n	80070b4 <__gethex+0x3e4>
 800703a:	f8d8 2000 	ldr.w	r2, [r8]
 800703e:	3a01      	subs	r2, #1
 8007040:	42b2      	cmp	r2, r6
 8007042:	d109      	bne.n	8007058 <__gethex+0x388>
 8007044:	2201      	movs	r2, #1
 8007046:	1171      	asrs	r1, r6, #5
 8007048:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800704c:	f006 061f 	and.w	r6, r6, #31
 8007050:	fa02 f606 	lsl.w	r6, r2, r6
 8007054:	421e      	tst	r6, r3
 8007056:	d13a      	bne.n	80070ce <__gethex+0x3fe>
 8007058:	f045 0520 	orr.w	r5, r5, #32
 800705c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800705e:	601c      	str	r4, [r3, #0]
 8007060:	9b02      	ldr	r3, [sp, #8]
 8007062:	601f      	str	r7, [r3, #0]
 8007064:	e6b0      	b.n	8006dc8 <__gethex+0xf8>
 8007066:	4299      	cmp	r1, r3
 8007068:	f843 cc04 	str.w	ip, [r3, #-4]
 800706c:	d8d9      	bhi.n	8007022 <__gethex+0x352>
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	459b      	cmp	fp, r3
 8007072:	db17      	blt.n	80070a4 <__gethex+0x3d4>
 8007074:	6861      	ldr	r1, [r4, #4]
 8007076:	9801      	ldr	r0, [sp, #4]
 8007078:	3101      	adds	r1, #1
 800707a:	f7fe f81b 	bl	80050b4 <_Balloc>
 800707e:	4681      	mov	r9, r0
 8007080:	b918      	cbnz	r0, 800708a <__gethex+0x3ba>
 8007082:	4602      	mov	r2, r0
 8007084:	2184      	movs	r1, #132	@ 0x84
 8007086:	4b19      	ldr	r3, [pc, #100]	@ (80070ec <__gethex+0x41c>)
 8007088:	e6c5      	b.n	8006e16 <__gethex+0x146>
 800708a:	6922      	ldr	r2, [r4, #16]
 800708c:	f104 010c 	add.w	r1, r4, #12
 8007090:	3202      	adds	r2, #2
 8007092:	0092      	lsls	r2, r2, #2
 8007094:	300c      	adds	r0, #12
 8007096:	f7ff fd6d 	bl	8006b74 <memcpy>
 800709a:	4621      	mov	r1, r4
 800709c:	9801      	ldr	r0, [sp, #4]
 800709e:	f7fe f849 	bl	8005134 <_Bfree>
 80070a2:	464c      	mov	r4, r9
 80070a4:	6923      	ldr	r3, [r4, #16]
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	6122      	str	r2, [r4, #16]
 80070aa:	2201      	movs	r2, #1
 80070ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070b0:	615a      	str	r2, [r3, #20]
 80070b2:	e7be      	b.n	8007032 <__gethex+0x362>
 80070b4:	6922      	ldr	r2, [r4, #16]
 80070b6:	455a      	cmp	r2, fp
 80070b8:	dd0b      	ble.n	80070d2 <__gethex+0x402>
 80070ba:	2101      	movs	r1, #1
 80070bc:	4620      	mov	r0, r4
 80070be:	f7ff fd9f 	bl	8006c00 <rshift>
 80070c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070c6:	3701      	adds	r7, #1
 80070c8:	42bb      	cmp	r3, r7
 80070ca:	f6ff aee0 	blt.w	8006e8e <__gethex+0x1be>
 80070ce:	2501      	movs	r5, #1
 80070d0:	e7c2      	b.n	8007058 <__gethex+0x388>
 80070d2:	f016 061f 	ands.w	r6, r6, #31
 80070d6:	d0fa      	beq.n	80070ce <__gethex+0x3fe>
 80070d8:	4453      	add	r3, sl
 80070da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80070de:	f7fe f8db 	bl	8005298 <__hi0bits>
 80070e2:	f1c6 0620 	rsb	r6, r6, #32
 80070e6:	42b0      	cmp	r0, r6
 80070e8:	dbe7      	blt.n	80070ba <__gethex+0x3ea>
 80070ea:	e7f0      	b.n	80070ce <__gethex+0x3fe>
 80070ec:	080079d7 	.word	0x080079d7

080070f0 <L_shift>:
 80070f0:	f1c2 0208 	rsb	r2, r2, #8
 80070f4:	0092      	lsls	r2, r2, #2
 80070f6:	b570      	push	{r4, r5, r6, lr}
 80070f8:	f1c2 0620 	rsb	r6, r2, #32
 80070fc:	6843      	ldr	r3, [r0, #4]
 80070fe:	6804      	ldr	r4, [r0, #0]
 8007100:	fa03 f506 	lsl.w	r5, r3, r6
 8007104:	432c      	orrs	r4, r5
 8007106:	40d3      	lsrs	r3, r2
 8007108:	6004      	str	r4, [r0, #0]
 800710a:	f840 3f04 	str.w	r3, [r0, #4]!
 800710e:	4288      	cmp	r0, r1
 8007110:	d3f4      	bcc.n	80070fc <L_shift+0xc>
 8007112:	bd70      	pop	{r4, r5, r6, pc}

08007114 <__match>:
 8007114:	b530      	push	{r4, r5, lr}
 8007116:	6803      	ldr	r3, [r0, #0]
 8007118:	3301      	adds	r3, #1
 800711a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800711e:	b914      	cbnz	r4, 8007126 <__match+0x12>
 8007120:	6003      	str	r3, [r0, #0]
 8007122:	2001      	movs	r0, #1
 8007124:	bd30      	pop	{r4, r5, pc}
 8007126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800712a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800712e:	2d19      	cmp	r5, #25
 8007130:	bf98      	it	ls
 8007132:	3220      	addls	r2, #32
 8007134:	42a2      	cmp	r2, r4
 8007136:	d0f0      	beq.n	800711a <__match+0x6>
 8007138:	2000      	movs	r0, #0
 800713a:	e7f3      	b.n	8007124 <__match+0x10>

0800713c <__hexnan>:
 800713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	2500      	movs	r5, #0
 8007142:	680b      	ldr	r3, [r1, #0]
 8007144:	4682      	mov	sl, r0
 8007146:	115e      	asrs	r6, r3, #5
 8007148:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800714c:	f013 031f 	ands.w	r3, r3, #31
 8007150:	bf18      	it	ne
 8007152:	3604      	addne	r6, #4
 8007154:	1f37      	subs	r7, r6, #4
 8007156:	4690      	mov	r8, r2
 8007158:	46b9      	mov	r9, r7
 800715a:	463c      	mov	r4, r7
 800715c:	46ab      	mov	fp, r5
 800715e:	b087      	sub	sp, #28
 8007160:	6801      	ldr	r1, [r0, #0]
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	f846 5c04 	str.w	r5, [r6, #-4]
 8007168:	9502      	str	r5, [sp, #8]
 800716a:	784a      	ldrb	r2, [r1, #1]
 800716c:	1c4b      	adds	r3, r1, #1
 800716e:	9303      	str	r3, [sp, #12]
 8007170:	b342      	cbz	r2, 80071c4 <__hexnan+0x88>
 8007172:	4610      	mov	r0, r2
 8007174:	9105      	str	r1, [sp, #20]
 8007176:	9204      	str	r2, [sp, #16]
 8007178:	f7ff fd95 	bl	8006ca6 <__hexdig_fun>
 800717c:	2800      	cmp	r0, #0
 800717e:	d151      	bne.n	8007224 <__hexnan+0xe8>
 8007180:	9a04      	ldr	r2, [sp, #16]
 8007182:	9905      	ldr	r1, [sp, #20]
 8007184:	2a20      	cmp	r2, #32
 8007186:	d818      	bhi.n	80071ba <__hexnan+0x7e>
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	459b      	cmp	fp, r3
 800718c:	dd13      	ble.n	80071b6 <__hexnan+0x7a>
 800718e:	454c      	cmp	r4, r9
 8007190:	d206      	bcs.n	80071a0 <__hexnan+0x64>
 8007192:	2d07      	cmp	r5, #7
 8007194:	dc04      	bgt.n	80071a0 <__hexnan+0x64>
 8007196:	462a      	mov	r2, r5
 8007198:	4649      	mov	r1, r9
 800719a:	4620      	mov	r0, r4
 800719c:	f7ff ffa8 	bl	80070f0 <L_shift>
 80071a0:	4544      	cmp	r4, r8
 80071a2:	d952      	bls.n	800724a <__hexnan+0x10e>
 80071a4:	2300      	movs	r3, #0
 80071a6:	f1a4 0904 	sub.w	r9, r4, #4
 80071aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80071ae:	461d      	mov	r5, r3
 80071b0:	464c      	mov	r4, r9
 80071b2:	f8cd b008 	str.w	fp, [sp, #8]
 80071b6:	9903      	ldr	r1, [sp, #12]
 80071b8:	e7d7      	b.n	800716a <__hexnan+0x2e>
 80071ba:	2a29      	cmp	r2, #41	@ 0x29
 80071bc:	d157      	bne.n	800726e <__hexnan+0x132>
 80071be:	3102      	adds	r1, #2
 80071c0:	f8ca 1000 	str.w	r1, [sl]
 80071c4:	f1bb 0f00 	cmp.w	fp, #0
 80071c8:	d051      	beq.n	800726e <__hexnan+0x132>
 80071ca:	454c      	cmp	r4, r9
 80071cc:	d206      	bcs.n	80071dc <__hexnan+0xa0>
 80071ce:	2d07      	cmp	r5, #7
 80071d0:	dc04      	bgt.n	80071dc <__hexnan+0xa0>
 80071d2:	462a      	mov	r2, r5
 80071d4:	4649      	mov	r1, r9
 80071d6:	4620      	mov	r0, r4
 80071d8:	f7ff ff8a 	bl	80070f0 <L_shift>
 80071dc:	4544      	cmp	r4, r8
 80071de:	d936      	bls.n	800724e <__hexnan+0x112>
 80071e0:	4623      	mov	r3, r4
 80071e2:	f1a8 0204 	sub.w	r2, r8, #4
 80071e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80071ea:	429f      	cmp	r7, r3
 80071ec:	f842 1f04 	str.w	r1, [r2, #4]!
 80071f0:	d2f9      	bcs.n	80071e6 <__hexnan+0xaa>
 80071f2:	1b3b      	subs	r3, r7, r4
 80071f4:	f023 0303 	bic.w	r3, r3, #3
 80071f8:	3304      	adds	r3, #4
 80071fa:	3401      	adds	r4, #1
 80071fc:	3e03      	subs	r6, #3
 80071fe:	42b4      	cmp	r4, r6
 8007200:	bf88      	it	hi
 8007202:	2304      	movhi	r3, #4
 8007204:	2200      	movs	r2, #0
 8007206:	4443      	add	r3, r8
 8007208:	f843 2b04 	str.w	r2, [r3], #4
 800720c:	429f      	cmp	r7, r3
 800720e:	d2fb      	bcs.n	8007208 <__hexnan+0xcc>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	b91b      	cbnz	r3, 800721c <__hexnan+0xe0>
 8007214:	4547      	cmp	r7, r8
 8007216:	d128      	bne.n	800726a <__hexnan+0x12e>
 8007218:	2301      	movs	r3, #1
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	2005      	movs	r0, #5
 800721e:	b007      	add	sp, #28
 8007220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007224:	3501      	adds	r5, #1
 8007226:	2d08      	cmp	r5, #8
 8007228:	f10b 0b01 	add.w	fp, fp, #1
 800722c:	dd06      	ble.n	800723c <__hexnan+0x100>
 800722e:	4544      	cmp	r4, r8
 8007230:	d9c1      	bls.n	80071b6 <__hexnan+0x7a>
 8007232:	2300      	movs	r3, #0
 8007234:	2501      	movs	r5, #1
 8007236:	f844 3c04 	str.w	r3, [r4, #-4]
 800723a:	3c04      	subs	r4, #4
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	f000 000f 	and.w	r0, r0, #15
 8007242:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007246:	6020      	str	r0, [r4, #0]
 8007248:	e7b5      	b.n	80071b6 <__hexnan+0x7a>
 800724a:	2508      	movs	r5, #8
 800724c:	e7b3      	b.n	80071b6 <__hexnan+0x7a>
 800724e:	9b01      	ldr	r3, [sp, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0dd      	beq.n	8007210 <__hexnan+0xd4>
 8007254:	f04f 32ff 	mov.w	r2, #4294967295
 8007258:	f1c3 0320 	rsb	r3, r3, #32
 800725c:	40da      	lsrs	r2, r3
 800725e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007262:	4013      	ands	r3, r2
 8007264:	f846 3c04 	str.w	r3, [r6, #-4]
 8007268:	e7d2      	b.n	8007210 <__hexnan+0xd4>
 800726a:	3f04      	subs	r7, #4
 800726c:	e7d0      	b.n	8007210 <__hexnan+0xd4>
 800726e:	2004      	movs	r0, #4
 8007270:	e7d5      	b.n	800721e <__hexnan+0xe2>

08007272 <__ascii_mbtowc>:
 8007272:	b082      	sub	sp, #8
 8007274:	b901      	cbnz	r1, 8007278 <__ascii_mbtowc+0x6>
 8007276:	a901      	add	r1, sp, #4
 8007278:	b142      	cbz	r2, 800728c <__ascii_mbtowc+0x1a>
 800727a:	b14b      	cbz	r3, 8007290 <__ascii_mbtowc+0x1e>
 800727c:	7813      	ldrb	r3, [r2, #0]
 800727e:	600b      	str	r3, [r1, #0]
 8007280:	7812      	ldrb	r2, [r2, #0]
 8007282:	1e10      	subs	r0, r2, #0
 8007284:	bf18      	it	ne
 8007286:	2001      	movne	r0, #1
 8007288:	b002      	add	sp, #8
 800728a:	4770      	bx	lr
 800728c:	4610      	mov	r0, r2
 800728e:	e7fb      	b.n	8007288 <__ascii_mbtowc+0x16>
 8007290:	f06f 0001 	mvn.w	r0, #1
 8007294:	e7f8      	b.n	8007288 <__ascii_mbtowc+0x16>

08007296 <_realloc_r>:
 8007296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729a:	4680      	mov	r8, r0
 800729c:	4615      	mov	r5, r2
 800729e:	460c      	mov	r4, r1
 80072a0:	b921      	cbnz	r1, 80072ac <_realloc_r+0x16>
 80072a2:	4611      	mov	r1, r2
 80072a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072a8:	f7fd be78 	b.w	8004f9c <_malloc_r>
 80072ac:	b92a      	cbnz	r2, 80072ba <_realloc_r+0x24>
 80072ae:	f7fd fe03 	bl	8004eb8 <_free_r>
 80072b2:	2400      	movs	r4, #0
 80072b4:	4620      	mov	r0, r4
 80072b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ba:	f000 f840 	bl	800733e <_malloc_usable_size_r>
 80072be:	4285      	cmp	r5, r0
 80072c0:	4606      	mov	r6, r0
 80072c2:	d802      	bhi.n	80072ca <_realloc_r+0x34>
 80072c4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80072c8:	d8f4      	bhi.n	80072b4 <_realloc_r+0x1e>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4640      	mov	r0, r8
 80072ce:	f7fd fe65 	bl	8004f9c <_malloc_r>
 80072d2:	4607      	mov	r7, r0
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d0ec      	beq.n	80072b2 <_realloc_r+0x1c>
 80072d8:	42b5      	cmp	r5, r6
 80072da:	462a      	mov	r2, r5
 80072dc:	4621      	mov	r1, r4
 80072de:	bf28      	it	cs
 80072e0:	4632      	movcs	r2, r6
 80072e2:	f7ff fc47 	bl	8006b74 <memcpy>
 80072e6:	4621      	mov	r1, r4
 80072e8:	4640      	mov	r0, r8
 80072ea:	f7fd fde5 	bl	8004eb8 <_free_r>
 80072ee:	463c      	mov	r4, r7
 80072f0:	e7e0      	b.n	80072b4 <_realloc_r+0x1e>

080072f2 <__ascii_wctomb>:
 80072f2:	4603      	mov	r3, r0
 80072f4:	4608      	mov	r0, r1
 80072f6:	b141      	cbz	r1, 800730a <__ascii_wctomb+0x18>
 80072f8:	2aff      	cmp	r2, #255	@ 0xff
 80072fa:	d904      	bls.n	8007306 <__ascii_wctomb+0x14>
 80072fc:	228a      	movs	r2, #138	@ 0x8a
 80072fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	4770      	bx	lr
 8007306:	2001      	movs	r0, #1
 8007308:	700a      	strb	r2, [r1, #0]
 800730a:	4770      	bx	lr

0800730c <fiprintf>:
 800730c:	b40e      	push	{r1, r2, r3}
 800730e:	b503      	push	{r0, r1, lr}
 8007310:	4601      	mov	r1, r0
 8007312:	ab03      	add	r3, sp, #12
 8007314:	4805      	ldr	r0, [pc, #20]	@ (800732c <fiprintf+0x20>)
 8007316:	f853 2b04 	ldr.w	r2, [r3], #4
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	f000 f83d 	bl	800739c <_vfiprintf_r>
 8007322:	b002      	add	sp, #8
 8007324:	f85d eb04 	ldr.w	lr, [sp], #4
 8007328:	b003      	add	sp, #12
 800732a:	4770      	bx	lr
 800732c:	20000018 	.word	0x20000018

08007330 <abort>:
 8007330:	2006      	movs	r0, #6
 8007332:	b508      	push	{r3, lr}
 8007334:	f000 fa06 	bl	8007744 <raise>
 8007338:	2001      	movs	r0, #1
 800733a:	f7fa faba 	bl	80018b2 <_exit>

0800733e <_malloc_usable_size_r>:
 800733e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007342:	1f18      	subs	r0, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfbc      	itt	lt
 8007348:	580b      	ldrlt	r3, [r1, r0]
 800734a:	18c0      	addlt	r0, r0, r3
 800734c:	4770      	bx	lr

0800734e <__sfputc_r>:
 800734e:	6893      	ldr	r3, [r2, #8]
 8007350:	b410      	push	{r4}
 8007352:	3b01      	subs	r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	6093      	str	r3, [r2, #8]
 8007358:	da07      	bge.n	800736a <__sfputc_r+0x1c>
 800735a:	6994      	ldr	r4, [r2, #24]
 800735c:	42a3      	cmp	r3, r4
 800735e:	db01      	blt.n	8007364 <__sfputc_r+0x16>
 8007360:	290a      	cmp	r1, #10
 8007362:	d102      	bne.n	800736a <__sfputc_r+0x1c>
 8007364:	bc10      	pop	{r4}
 8007366:	f000 b931 	b.w	80075cc <__swbuf_r>
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	1c58      	adds	r0, r3, #1
 800736e:	6010      	str	r0, [r2, #0]
 8007370:	7019      	strb	r1, [r3, #0]
 8007372:	4608      	mov	r0, r1
 8007374:	bc10      	pop	{r4}
 8007376:	4770      	bx	lr

08007378 <__sfputs_r>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	4606      	mov	r6, r0
 800737c:	460f      	mov	r7, r1
 800737e:	4614      	mov	r4, r2
 8007380:	18d5      	adds	r5, r2, r3
 8007382:	42ac      	cmp	r4, r5
 8007384:	d101      	bne.n	800738a <__sfputs_r+0x12>
 8007386:	2000      	movs	r0, #0
 8007388:	e007      	b.n	800739a <__sfputs_r+0x22>
 800738a:	463a      	mov	r2, r7
 800738c:	4630      	mov	r0, r6
 800738e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007392:	f7ff ffdc 	bl	800734e <__sfputc_r>
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	d1f3      	bne.n	8007382 <__sfputs_r+0xa>
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800739c <_vfiprintf_r>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	460d      	mov	r5, r1
 80073a2:	4614      	mov	r4, r2
 80073a4:	4698      	mov	r8, r3
 80073a6:	4606      	mov	r6, r0
 80073a8:	b09d      	sub	sp, #116	@ 0x74
 80073aa:	b118      	cbz	r0, 80073b4 <_vfiprintf_r+0x18>
 80073ac:	6a03      	ldr	r3, [r0, #32]
 80073ae:	b90b      	cbnz	r3, 80073b4 <_vfiprintf_r+0x18>
 80073b0:	f7fc fe04 	bl	8003fbc <__sinit>
 80073b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073b6:	07d9      	lsls	r1, r3, #31
 80073b8:	d405      	bmi.n	80073c6 <_vfiprintf_r+0x2a>
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	059a      	lsls	r2, r3, #22
 80073be:	d402      	bmi.n	80073c6 <_vfiprintf_r+0x2a>
 80073c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073c2:	f7fc ff12 	bl	80041ea <__retarget_lock_acquire_recursive>
 80073c6:	89ab      	ldrh	r3, [r5, #12]
 80073c8:	071b      	lsls	r3, r3, #28
 80073ca:	d501      	bpl.n	80073d0 <_vfiprintf_r+0x34>
 80073cc:	692b      	ldr	r3, [r5, #16]
 80073ce:	b99b      	cbnz	r3, 80073f8 <_vfiprintf_r+0x5c>
 80073d0:	4629      	mov	r1, r5
 80073d2:	4630      	mov	r0, r6
 80073d4:	f000 f938 	bl	8007648 <__swsetup_r>
 80073d8:	b170      	cbz	r0, 80073f8 <_vfiprintf_r+0x5c>
 80073da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073dc:	07dc      	lsls	r4, r3, #31
 80073de:	d504      	bpl.n	80073ea <_vfiprintf_r+0x4e>
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	b01d      	add	sp, #116	@ 0x74
 80073e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	0598      	lsls	r0, r3, #22
 80073ee:	d4f7      	bmi.n	80073e0 <_vfiprintf_r+0x44>
 80073f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073f2:	f7fc fefb 	bl	80041ec <__retarget_lock_release_recursive>
 80073f6:	e7f3      	b.n	80073e0 <_vfiprintf_r+0x44>
 80073f8:	2300      	movs	r3, #0
 80073fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fc:	2320      	movs	r3, #32
 80073fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007402:	2330      	movs	r3, #48	@ 0x30
 8007404:	f04f 0901 	mov.w	r9, #1
 8007408:	f8cd 800c 	str.w	r8, [sp, #12]
 800740c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80075b8 <_vfiprintf_r+0x21c>
 8007410:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007414:	4623      	mov	r3, r4
 8007416:	469a      	mov	sl, r3
 8007418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800741c:	b10a      	cbz	r2, 8007422 <_vfiprintf_r+0x86>
 800741e:	2a25      	cmp	r2, #37	@ 0x25
 8007420:	d1f9      	bne.n	8007416 <_vfiprintf_r+0x7a>
 8007422:	ebba 0b04 	subs.w	fp, sl, r4
 8007426:	d00b      	beq.n	8007440 <_vfiprintf_r+0xa4>
 8007428:	465b      	mov	r3, fp
 800742a:	4622      	mov	r2, r4
 800742c:	4629      	mov	r1, r5
 800742e:	4630      	mov	r0, r6
 8007430:	f7ff ffa2 	bl	8007378 <__sfputs_r>
 8007434:	3001      	adds	r0, #1
 8007436:	f000 80a7 	beq.w	8007588 <_vfiprintf_r+0x1ec>
 800743a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800743c:	445a      	add	r2, fp
 800743e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007440:	f89a 3000 	ldrb.w	r3, [sl]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 809f 	beq.w	8007588 <_vfiprintf_r+0x1ec>
 800744a:	2300      	movs	r3, #0
 800744c:	f04f 32ff 	mov.w	r2, #4294967295
 8007450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007454:	f10a 0a01 	add.w	sl, sl, #1
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	9307      	str	r3, [sp, #28]
 800745c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007460:	931a      	str	r3, [sp, #104]	@ 0x68
 8007462:	4654      	mov	r4, sl
 8007464:	2205      	movs	r2, #5
 8007466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746a:	4853      	ldr	r0, [pc, #332]	@ (80075b8 <_vfiprintf_r+0x21c>)
 800746c:	f7fc febf 	bl	80041ee <memchr>
 8007470:	9a04      	ldr	r2, [sp, #16]
 8007472:	b9d8      	cbnz	r0, 80074ac <_vfiprintf_r+0x110>
 8007474:	06d1      	lsls	r1, r2, #27
 8007476:	bf44      	itt	mi
 8007478:	2320      	movmi	r3, #32
 800747a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800747e:	0713      	lsls	r3, r2, #28
 8007480:	bf44      	itt	mi
 8007482:	232b      	movmi	r3, #43	@ 0x2b
 8007484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007488:	f89a 3000 	ldrb.w	r3, [sl]
 800748c:	2b2a      	cmp	r3, #42	@ 0x2a
 800748e:	d015      	beq.n	80074bc <_vfiprintf_r+0x120>
 8007490:	4654      	mov	r4, sl
 8007492:	2000      	movs	r0, #0
 8007494:	f04f 0c0a 	mov.w	ip, #10
 8007498:	9a07      	ldr	r2, [sp, #28]
 800749a:	4621      	mov	r1, r4
 800749c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a0:	3b30      	subs	r3, #48	@ 0x30
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d94b      	bls.n	800753e <_vfiprintf_r+0x1a2>
 80074a6:	b1b0      	cbz	r0, 80074d6 <_vfiprintf_r+0x13a>
 80074a8:	9207      	str	r2, [sp, #28]
 80074aa:	e014      	b.n	80074d6 <_vfiprintf_r+0x13a>
 80074ac:	eba0 0308 	sub.w	r3, r0, r8
 80074b0:	fa09 f303 	lsl.w	r3, r9, r3
 80074b4:	4313      	orrs	r3, r2
 80074b6:	46a2      	mov	sl, r4
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	e7d2      	b.n	8007462 <_vfiprintf_r+0xc6>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	1d19      	adds	r1, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	9103      	str	r1, [sp, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bfbb      	ittet	lt
 80074c8:	425b      	neglt	r3, r3
 80074ca:	f042 0202 	orrlt.w	r2, r2, #2
 80074ce:	9307      	strge	r3, [sp, #28]
 80074d0:	9307      	strlt	r3, [sp, #28]
 80074d2:	bfb8      	it	lt
 80074d4:	9204      	strlt	r2, [sp, #16]
 80074d6:	7823      	ldrb	r3, [r4, #0]
 80074d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074da:	d10a      	bne.n	80074f2 <_vfiprintf_r+0x156>
 80074dc:	7863      	ldrb	r3, [r4, #1]
 80074de:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e0:	d132      	bne.n	8007548 <_vfiprintf_r+0x1ac>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	3402      	adds	r4, #2
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	9203      	str	r2, [sp, #12]
 80074ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074f0:	9305      	str	r3, [sp, #20]
 80074f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80075bc <_vfiprintf_r+0x220>
 80074f6:	2203      	movs	r2, #3
 80074f8:	4650      	mov	r0, sl
 80074fa:	7821      	ldrb	r1, [r4, #0]
 80074fc:	f7fc fe77 	bl	80041ee <memchr>
 8007500:	b138      	cbz	r0, 8007512 <_vfiprintf_r+0x176>
 8007502:	2240      	movs	r2, #64	@ 0x40
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	eba0 000a 	sub.w	r0, r0, sl
 800750a:	4082      	lsls	r2, r0
 800750c:	4313      	orrs	r3, r2
 800750e:	3401      	adds	r4, #1
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007516:	2206      	movs	r2, #6
 8007518:	4829      	ldr	r0, [pc, #164]	@ (80075c0 <_vfiprintf_r+0x224>)
 800751a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800751e:	f7fc fe66 	bl	80041ee <memchr>
 8007522:	2800      	cmp	r0, #0
 8007524:	d03f      	beq.n	80075a6 <_vfiprintf_r+0x20a>
 8007526:	4b27      	ldr	r3, [pc, #156]	@ (80075c4 <_vfiprintf_r+0x228>)
 8007528:	bb1b      	cbnz	r3, 8007572 <_vfiprintf_r+0x1d6>
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	3307      	adds	r3, #7
 800752e:	f023 0307 	bic.w	r3, r3, #7
 8007532:	3308      	adds	r3, #8
 8007534:	9303      	str	r3, [sp, #12]
 8007536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007538:	443b      	add	r3, r7
 800753a:	9309      	str	r3, [sp, #36]	@ 0x24
 800753c:	e76a      	b.n	8007414 <_vfiprintf_r+0x78>
 800753e:	460c      	mov	r4, r1
 8007540:	2001      	movs	r0, #1
 8007542:	fb0c 3202 	mla	r2, ip, r2, r3
 8007546:	e7a8      	b.n	800749a <_vfiprintf_r+0xfe>
 8007548:	2300      	movs	r3, #0
 800754a:	f04f 0c0a 	mov.w	ip, #10
 800754e:	4619      	mov	r1, r3
 8007550:	3401      	adds	r4, #1
 8007552:	9305      	str	r3, [sp, #20]
 8007554:	4620      	mov	r0, r4
 8007556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800755a:	3a30      	subs	r2, #48	@ 0x30
 800755c:	2a09      	cmp	r2, #9
 800755e:	d903      	bls.n	8007568 <_vfiprintf_r+0x1cc>
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0c6      	beq.n	80074f2 <_vfiprintf_r+0x156>
 8007564:	9105      	str	r1, [sp, #20]
 8007566:	e7c4      	b.n	80074f2 <_vfiprintf_r+0x156>
 8007568:	4604      	mov	r4, r0
 800756a:	2301      	movs	r3, #1
 800756c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007570:	e7f0      	b.n	8007554 <_vfiprintf_r+0x1b8>
 8007572:	ab03      	add	r3, sp, #12
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	462a      	mov	r2, r5
 8007578:	4630      	mov	r0, r6
 800757a:	4b13      	ldr	r3, [pc, #76]	@ (80075c8 <_vfiprintf_r+0x22c>)
 800757c:	a904      	add	r1, sp, #16
 800757e:	f7fb fec3 	bl	8003308 <_printf_float>
 8007582:	4607      	mov	r7, r0
 8007584:	1c78      	adds	r0, r7, #1
 8007586:	d1d6      	bne.n	8007536 <_vfiprintf_r+0x19a>
 8007588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800758a:	07d9      	lsls	r1, r3, #31
 800758c:	d405      	bmi.n	800759a <_vfiprintf_r+0x1fe>
 800758e:	89ab      	ldrh	r3, [r5, #12]
 8007590:	059a      	lsls	r2, r3, #22
 8007592:	d402      	bmi.n	800759a <_vfiprintf_r+0x1fe>
 8007594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007596:	f7fc fe29 	bl	80041ec <__retarget_lock_release_recursive>
 800759a:	89ab      	ldrh	r3, [r5, #12]
 800759c:	065b      	lsls	r3, r3, #25
 800759e:	f53f af1f 	bmi.w	80073e0 <_vfiprintf_r+0x44>
 80075a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075a4:	e71e      	b.n	80073e4 <_vfiprintf_r+0x48>
 80075a6:	ab03      	add	r3, sp, #12
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	462a      	mov	r2, r5
 80075ac:	4630      	mov	r0, r6
 80075ae:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <_vfiprintf_r+0x22c>)
 80075b0:	a904      	add	r1, sp, #16
 80075b2:	f7fc f947 	bl	8003844 <_printf_i>
 80075b6:	e7e4      	b.n	8007582 <_vfiprintf_r+0x1e6>
 80075b8:	08007c99 	.word	0x08007c99
 80075bc:	08007c9f 	.word	0x08007c9f
 80075c0:	08007ca3 	.word	0x08007ca3
 80075c4:	08003309 	.word	0x08003309
 80075c8:	08007379 	.word	0x08007379

080075cc <__swbuf_r>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	460e      	mov	r6, r1
 80075d0:	4614      	mov	r4, r2
 80075d2:	4605      	mov	r5, r0
 80075d4:	b118      	cbz	r0, 80075de <__swbuf_r+0x12>
 80075d6:	6a03      	ldr	r3, [r0, #32]
 80075d8:	b90b      	cbnz	r3, 80075de <__swbuf_r+0x12>
 80075da:	f7fc fcef 	bl	8003fbc <__sinit>
 80075de:	69a3      	ldr	r3, [r4, #24]
 80075e0:	60a3      	str	r3, [r4, #8]
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	071a      	lsls	r2, r3, #28
 80075e6:	d501      	bpl.n	80075ec <__swbuf_r+0x20>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	b943      	cbnz	r3, 80075fe <__swbuf_r+0x32>
 80075ec:	4621      	mov	r1, r4
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 f82a 	bl	8007648 <__swsetup_r>
 80075f4:	b118      	cbz	r0, 80075fe <__swbuf_r+0x32>
 80075f6:	f04f 37ff 	mov.w	r7, #4294967295
 80075fa:	4638      	mov	r0, r7
 80075fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	6922      	ldr	r2, [r4, #16]
 8007602:	b2f6      	uxtb	r6, r6
 8007604:	1a98      	subs	r0, r3, r2
 8007606:	6963      	ldr	r3, [r4, #20]
 8007608:	4637      	mov	r7, r6
 800760a:	4283      	cmp	r3, r0
 800760c:	dc05      	bgt.n	800761a <__swbuf_r+0x4e>
 800760e:	4621      	mov	r1, r4
 8007610:	4628      	mov	r0, r5
 8007612:	f7ff fa4b 	bl	8006aac <_fflush_r>
 8007616:	2800      	cmp	r0, #0
 8007618:	d1ed      	bne.n	80075f6 <__swbuf_r+0x2a>
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	3b01      	subs	r3, #1
 800761e:	60a3      	str	r3, [r4, #8]
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	6022      	str	r2, [r4, #0]
 8007626:	701e      	strb	r6, [r3, #0]
 8007628:	6962      	ldr	r2, [r4, #20]
 800762a:	1c43      	adds	r3, r0, #1
 800762c:	429a      	cmp	r2, r3
 800762e:	d004      	beq.n	800763a <__swbuf_r+0x6e>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	07db      	lsls	r3, r3, #31
 8007634:	d5e1      	bpl.n	80075fa <__swbuf_r+0x2e>
 8007636:	2e0a      	cmp	r6, #10
 8007638:	d1df      	bne.n	80075fa <__swbuf_r+0x2e>
 800763a:	4621      	mov	r1, r4
 800763c:	4628      	mov	r0, r5
 800763e:	f7ff fa35 	bl	8006aac <_fflush_r>
 8007642:	2800      	cmp	r0, #0
 8007644:	d0d9      	beq.n	80075fa <__swbuf_r+0x2e>
 8007646:	e7d6      	b.n	80075f6 <__swbuf_r+0x2a>

08007648 <__swsetup_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4b29      	ldr	r3, [pc, #164]	@ (80076f0 <__swsetup_r+0xa8>)
 800764c:	4605      	mov	r5, r0
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	460c      	mov	r4, r1
 8007652:	b118      	cbz	r0, 800765c <__swsetup_r+0x14>
 8007654:	6a03      	ldr	r3, [r0, #32]
 8007656:	b90b      	cbnz	r3, 800765c <__swsetup_r+0x14>
 8007658:	f7fc fcb0 	bl	8003fbc <__sinit>
 800765c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007660:	0719      	lsls	r1, r3, #28
 8007662:	d422      	bmi.n	80076aa <__swsetup_r+0x62>
 8007664:	06da      	lsls	r2, r3, #27
 8007666:	d407      	bmi.n	8007678 <__swsetup_r+0x30>
 8007668:	2209      	movs	r2, #9
 800766a:	602a      	str	r2, [r5, #0]
 800766c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	e033      	b.n	80076e0 <__swsetup_r+0x98>
 8007678:	0758      	lsls	r0, r3, #29
 800767a:	d512      	bpl.n	80076a2 <__swsetup_r+0x5a>
 800767c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800767e:	b141      	cbz	r1, 8007692 <__swsetup_r+0x4a>
 8007680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007684:	4299      	cmp	r1, r3
 8007686:	d002      	beq.n	800768e <__swsetup_r+0x46>
 8007688:	4628      	mov	r0, r5
 800768a:	f7fd fc15 	bl	8004eb8 <_free_r>
 800768e:	2300      	movs	r3, #0
 8007690:	6363      	str	r3, [r4, #52]	@ 0x34
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007698:	81a3      	strh	r3, [r4, #12]
 800769a:	2300      	movs	r3, #0
 800769c:	6063      	str	r3, [r4, #4]
 800769e:	6923      	ldr	r3, [r4, #16]
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f043 0308 	orr.w	r3, r3, #8
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	b94b      	cbnz	r3, 80076c2 <__swsetup_r+0x7a>
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076b8:	d003      	beq.n	80076c2 <__swsetup_r+0x7a>
 80076ba:	4621      	mov	r1, r4
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 f882 	bl	80077c6 <__smakebuf_r>
 80076c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c6:	f013 0201 	ands.w	r2, r3, #1
 80076ca:	d00a      	beq.n	80076e2 <__swsetup_r+0x9a>
 80076cc:	2200      	movs	r2, #0
 80076ce:	60a2      	str	r2, [r4, #8]
 80076d0:	6962      	ldr	r2, [r4, #20]
 80076d2:	4252      	negs	r2, r2
 80076d4:	61a2      	str	r2, [r4, #24]
 80076d6:	6922      	ldr	r2, [r4, #16]
 80076d8:	b942      	cbnz	r2, 80076ec <__swsetup_r+0xa4>
 80076da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076de:	d1c5      	bne.n	800766c <__swsetup_r+0x24>
 80076e0:	bd38      	pop	{r3, r4, r5, pc}
 80076e2:	0799      	lsls	r1, r3, #30
 80076e4:	bf58      	it	pl
 80076e6:	6962      	ldrpl	r2, [r4, #20]
 80076e8:	60a2      	str	r2, [r4, #8]
 80076ea:	e7f4      	b.n	80076d6 <__swsetup_r+0x8e>
 80076ec:	2000      	movs	r0, #0
 80076ee:	e7f7      	b.n	80076e0 <__swsetup_r+0x98>
 80076f0:	20000018 	.word	0x20000018

080076f4 <_raise_r>:
 80076f4:	291f      	cmp	r1, #31
 80076f6:	b538      	push	{r3, r4, r5, lr}
 80076f8:	4605      	mov	r5, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	d904      	bls.n	8007708 <_raise_r+0x14>
 80076fe:	2316      	movs	r3, #22
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	f04f 30ff 	mov.w	r0, #4294967295
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800770a:	b112      	cbz	r2, 8007712 <_raise_r+0x1e>
 800770c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007710:	b94b      	cbnz	r3, 8007726 <_raise_r+0x32>
 8007712:	4628      	mov	r0, r5
 8007714:	f000 f830 	bl	8007778 <_getpid_r>
 8007718:	4622      	mov	r2, r4
 800771a:	4601      	mov	r1, r0
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	f000 b817 	b.w	8007754 <_kill_r>
 8007726:	2b01      	cmp	r3, #1
 8007728:	d00a      	beq.n	8007740 <_raise_r+0x4c>
 800772a:	1c59      	adds	r1, r3, #1
 800772c:	d103      	bne.n	8007736 <_raise_r+0x42>
 800772e:	2316      	movs	r3, #22
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	2001      	movs	r0, #1
 8007734:	e7e7      	b.n	8007706 <_raise_r+0x12>
 8007736:	2100      	movs	r1, #0
 8007738:	4620      	mov	r0, r4
 800773a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800773e:	4798      	blx	r3
 8007740:	2000      	movs	r0, #0
 8007742:	e7e0      	b.n	8007706 <_raise_r+0x12>

08007744 <raise>:
 8007744:	4b02      	ldr	r3, [pc, #8]	@ (8007750 <raise+0xc>)
 8007746:	4601      	mov	r1, r0
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	f7ff bfd3 	b.w	80076f4 <_raise_r>
 800774e:	bf00      	nop
 8007750:	20000018 	.word	0x20000018

08007754 <_kill_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	2300      	movs	r3, #0
 8007758:	4d06      	ldr	r5, [pc, #24]	@ (8007774 <_kill_r+0x20>)
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	f7fa f896 	bl	8001892 <_kill>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	d102      	bne.n	8007770 <_kill_r+0x1c>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	b103      	cbz	r3, 8007770 <_kill_r+0x1c>
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	bd38      	pop	{r3, r4, r5, pc}
 8007772:	bf00      	nop
 8007774:	20000414 	.word	0x20000414

08007778 <_getpid_r>:
 8007778:	f7fa b884 	b.w	8001884 <_getpid>

0800777c <__swhatbuf_r>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	460c      	mov	r4, r1
 8007780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007784:	4615      	mov	r5, r2
 8007786:	2900      	cmp	r1, #0
 8007788:	461e      	mov	r6, r3
 800778a:	b096      	sub	sp, #88	@ 0x58
 800778c:	da0c      	bge.n	80077a8 <__swhatbuf_r+0x2c>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	2100      	movs	r1, #0
 8007792:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007796:	bf14      	ite	ne
 8007798:	2340      	movne	r3, #64	@ 0x40
 800779a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800779e:	2000      	movs	r0, #0
 80077a0:	6031      	str	r1, [r6, #0]
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	b016      	add	sp, #88	@ 0x58
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	466a      	mov	r2, sp
 80077aa:	f000 f849 	bl	8007840 <_fstat_r>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	dbed      	blt.n	800778e <__swhatbuf_r+0x12>
 80077b2:	9901      	ldr	r1, [sp, #4]
 80077b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077bc:	4259      	negs	r1, r3
 80077be:	4159      	adcs	r1, r3
 80077c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077c4:	e7eb      	b.n	800779e <__swhatbuf_r+0x22>

080077c6 <__smakebuf_r>:
 80077c6:	898b      	ldrh	r3, [r1, #12]
 80077c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ca:	079d      	lsls	r5, r3, #30
 80077cc:	4606      	mov	r6, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	d507      	bpl.n	80077e2 <__smakebuf_r+0x1c>
 80077d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	2301      	movs	r3, #1
 80077dc:	6163      	str	r3, [r4, #20]
 80077de:	b003      	add	sp, #12
 80077e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e2:	466a      	mov	r2, sp
 80077e4:	ab01      	add	r3, sp, #4
 80077e6:	f7ff ffc9 	bl	800777c <__swhatbuf_r>
 80077ea:	9f00      	ldr	r7, [sp, #0]
 80077ec:	4605      	mov	r5, r0
 80077ee:	4639      	mov	r1, r7
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7fd fbd3 	bl	8004f9c <_malloc_r>
 80077f6:	b948      	cbnz	r0, 800780c <__smakebuf_r+0x46>
 80077f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077fc:	059a      	lsls	r2, r3, #22
 80077fe:	d4ee      	bmi.n	80077de <__smakebuf_r+0x18>
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	f043 0302 	orr.w	r3, r3, #2
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	e7e2      	b.n	80077d2 <__smakebuf_r+0xc>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007816:	81a3      	strh	r3, [r4, #12]
 8007818:	9b01      	ldr	r3, [sp, #4]
 800781a:	6020      	str	r0, [r4, #0]
 800781c:	b15b      	cbz	r3, 8007836 <__smakebuf_r+0x70>
 800781e:	4630      	mov	r0, r6
 8007820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007824:	f000 f81e 	bl	8007864 <_isatty_r>
 8007828:	b128      	cbz	r0, 8007836 <__smakebuf_r+0x70>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f023 0303 	bic.w	r3, r3, #3
 8007830:	f043 0301 	orr.w	r3, r3, #1
 8007834:	81a3      	strh	r3, [r4, #12]
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	431d      	orrs	r5, r3
 800783a:	81a5      	strh	r5, [r4, #12]
 800783c:	e7cf      	b.n	80077de <__smakebuf_r+0x18>
	...

08007840 <_fstat_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	2300      	movs	r3, #0
 8007844:	4d06      	ldr	r5, [pc, #24]	@ (8007860 <_fstat_r+0x20>)
 8007846:	4604      	mov	r4, r0
 8007848:	4608      	mov	r0, r1
 800784a:	4611      	mov	r1, r2
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	f7fa f87f 	bl	8001950 <_fstat>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	d102      	bne.n	800785c <_fstat_r+0x1c>
 8007856:	682b      	ldr	r3, [r5, #0]
 8007858:	b103      	cbz	r3, 800785c <_fstat_r+0x1c>
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	bf00      	nop
 8007860:	20000414 	.word	0x20000414

08007864 <_isatty_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	2300      	movs	r3, #0
 8007868:	4d05      	ldr	r5, [pc, #20]	@ (8007880 <_isatty_r+0x1c>)
 800786a:	4604      	mov	r4, r0
 800786c:	4608      	mov	r0, r1
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	f7fa f87d 	bl	800196e <_isatty>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d102      	bne.n	800787e <_isatty_r+0x1a>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	b103      	cbz	r3, 800787e <_isatty_r+0x1a>
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	20000414 	.word	0x20000414

08007884 <_init>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr

08007890 <_fini>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	bf00      	nop
 8007894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007896:	bc08      	pop	{r3}
 8007898:	469e      	mov	lr, r3
 800789a:	4770      	bx	lr
