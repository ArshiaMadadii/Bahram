
DHT22_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007704  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08007818  08007818  00008818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d18  08007d18  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d18  08007d18  00008d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d20  08007d20  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d20  08007d20  00008d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d24  08007d24  00008d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001d4  08007efc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08007efc  000093dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c515  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e79  00000000  00000000  00015712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00017590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c4  00000000  00000000  00018220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032cb  00000000  00000000  00018be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e698  00000000  00000000  0001beaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf7d  00000000  00000000  0002a547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b64c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000496c  00000000  00000000  000b6508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000bae74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080077fc 	.word	0x080077fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080077fc 	.word	0x080077fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <uartx_write>:
#include "stdio.h"
#include "string.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 800109c:	1cf9      	adds	r1, r7, #3
 800109e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a2:	2201      	movs	r2, #1
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f001 fecd 	bl	8002e44 <HAL_UART_Transmit>

}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 80010bc:	e007      	b.n	80010ce <uartx_write_text+0x1c>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	603a      	str	r2, [r7, #0]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffe1 	bl	8001090 <uartx_write>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f3      	bne.n	80010be <uartx_write_text+0xc>

}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <DHT22_Init>:
extern TIM_HandleTypeDef htim1;

/**
 * @brief Initializes the GPIO and Timer for the DHT22 sensor.
 */
void DHT22_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    // Initialize the Timer
    HAL_TIM_Base_Start(&htim1);
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <DHT22_Init+0x14>)
 80010e6:	f001 fbf5 	bl	80028d4 <HAL_TIM_Base_Start>
    DHT22_SendDebug("DHT22 Initialization Complete\n\r");
 80010ea:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <DHT22_Init+0x18>)
 80010ec:	f000 f934 	bl	8001358 <DHT22_SendDebug>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200001f0 	.word	0x200001f0
 80010f8:	08007818 	.word	0x08007818

080010fc <DHT22_StartSignal>:

/**
 * @brief Sends the start signal to the DHT22 sensor.
 */
void DHT22_StartSignal(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]

    // Configure GPIO as Output
    GPIO_InitStruct.Pin = DHT22_Pin;
 800110e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001112:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2302      	movs	r3, #2
 800111e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001120:	463b      	mov	r3, r7
 8001122:	4619      	mov	r1, r3
 8001124:	480f      	ldr	r0, [pc, #60]	@ (8001164 <DHT22_StartSignal+0x68>)
 8001126:	f000 fdc1 	bl	8001cac <HAL_GPIO_Init>

    // Send Start Signal
    HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <DHT22_StartSignal+0x68>)
 8001132:	f000 ff56 	bl	8001fe2 <HAL_GPIO_WritePin>
    HAL_Delay(18); // Hold low for at least 18ms
 8001136:	2012      	movs	r0, #18
 8001138:	f000 fcb0 	bl	8001a9c <HAL_Delay>
    HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001142:	4808      	ldr	r0, [pc, #32]	@ (8001164 <DHT22_StartSignal+0x68>)
 8001144:	f000 ff4d 	bl	8001fe2 <HAL_GPIO_WritePin>
    DHT22_DelayUs(40); // Wait 40μs (recommended timing)
 8001148:	2028      	movs	r0, #40	@ 0x28
 800114a:	f000 f91b 	bl	8001384 <DHT22_DelayUs>

    // Reconfigure GPIO as Input (for receiving response)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001152:	463b      	mov	r3, r7
 8001154:	4619      	mov	r1, r3
 8001156:	4803      	ldr	r0, [pc, #12]	@ (8001164 <DHT22_StartSignal+0x68>)
 8001158:	f000 fda8 	bl	8001cac <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010c00 	.word	0x40010c00

08001168 <DHT22_CheckResponse>:

/**
 * @brief Checks for the response from the DHT22 sensor.
 * @return 1 if response is valid, 0 otherwise.
 */
uint8_t DHT22_CheckResponse(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <DHT22_CheckResponse+0x5c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24

    // Wait for LOW signal from sensor
    while (!HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)) {
 8001174:	e006      	b.n	8001184 <DHT22_CheckResponse+0x1c>
        if (__HAL_TIM_GET_COUNTER(&htim1) > 100) {
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <DHT22_CheckResponse+0x5c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117c:	2b64      	cmp	r3, #100	@ 0x64
 800117e:	d901      	bls.n	8001184 <DHT22_CheckResponse+0x1c>
            return 0; // Timeout: No response
 8001180:	2300      	movs	r3, #0
 8001182:	e01c      	b.n	80011be <DHT22_CheckResponse+0x56>
    while (!HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)) {
 8001184:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001188:	480f      	ldr	r0, [pc, #60]	@ (80011c8 <DHT22_CheckResponse+0x60>)
 800118a:	f000 ff13 	bl	8001fb4 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <DHT22_CheckResponse+0xe>
        }
    }

    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <DHT22_CheckResponse+0x5c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2200      	movs	r2, #0
 800119a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Wait for HIGH signal from sensor
    while (HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)) {
 800119c:	e006      	b.n	80011ac <DHT22_CheckResponse+0x44>
        if (__HAL_TIM_GET_COUNTER(&htim1) > 100) {
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <DHT22_CheckResponse+0x5c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a4:	2b64      	cmp	r3, #100	@ 0x64
 80011a6:	d901      	bls.n	80011ac <DHT22_CheckResponse+0x44>
            return 0; // Timeout: No response
 80011a8:	2300      	movs	r3, #0
 80011aa:	e008      	b.n	80011be <DHT22_CheckResponse+0x56>
    while (HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)) {
 80011ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <DHT22_CheckResponse+0x60>)
 80011b2:	f000 feff 	bl	8001fb4 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <DHT22_CheckResponse+0x36>
        }
    }

    return 1; // Response is valid
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200001f0 	.word	0x200001f0
 80011c8:	40010c00 	.word	0x40010c00

080011cc <DHT22_ReadByte>:

/**
 * @brief Reads a single byte from the DHT22 sensor.
 * @return The byte read from the sensor.
 */
uint8_t DHT22_ReadByte(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < 8; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	71bb      	strb	r3, [r7, #6]
 80011da:	e029      	b.n	8001230 <DHT22_ReadByte+0x64>
        // Wait for LOW signal
        while (!HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)) {}
 80011dc:	bf00      	nop
 80011de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e2:	4817      	ldr	r0, [pc, #92]	@ (8001240 <DHT22_ReadByte+0x74>)
 80011e4:	f000 fee6 	bl	8001fb4 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f7      	beq.n	80011de <DHT22_ReadByte+0x12>

        // Measure HIGH duration
        __HAL_TIM_SET_COUNTER(&htim1, 0);
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <DHT22_ReadByte+0x78>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
        while (HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)) {}
 80011f6:	bf00      	nop
 80011f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fc:	4810      	ldr	r0, [pc, #64]	@ (8001240 <DHT22_ReadByte+0x74>)
 80011fe:	f000 fed9 	bl	8001fb4 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f7      	bne.n	80011f8 <DHT22_ReadByte+0x2c>

        // If HIGH duration > 40μs, it's a 1
        if (__HAL_TIM_GET_COUNTER(&htim1) > 40) {
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <DHT22_ReadByte+0x78>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120e:	2b28      	cmp	r3, #40	@ 0x28
 8001210:	d90b      	bls.n	800122a <DHT22_ReadByte+0x5e>
            data |= (1 << (7 - i));
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	f1c3 0307 	rsb	r3, r3, #7
 8001218:	2201      	movs	r2, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	b25a      	sxtb	r2, r3
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4313      	orrs	r3, r2
 8001226:	b25b      	sxtb	r3, r3
 8001228:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	3301      	adds	r3, #1
 800122e:	71bb      	strb	r3, [r7, #6]
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	2b07      	cmp	r3, #7
 8001234:	d9d2      	bls.n	80011dc <DHT22_ReadByte+0x10>
        }
    }

    return data;
 8001236:	79fb      	ldrb	r3, [r7, #7]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40010c00 	.word	0x40010c00
 8001244:	200001f0 	.word	0x200001f0

08001248 <DHT22_ReadData>:
 * @brief Reads temperature and humidity from the DHT22 sensor.
 * @param[out] temperature Pointer to store the temperature value.
 * @param[out] humidity Pointer to store the humidity value.
 * @return 1 if successful, 0 otherwise.
 */
uint8_t DHT22_ReadData(float *temperature, float *humidity) {
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    uint8_t rh_integral, rh_decimal;
    uint8_t temp_integral, temp_decimal;
    uint8_t checksum;

    // Start communication
    DHT22_StartSignal();
 8001252:	f7ff ff53 	bl	80010fc <DHT22_StartSignal>
    if (!DHT22_CheckResponse()) {
 8001256:	f7ff ff87 	bl	8001168 <DHT22_CheckResponse>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d104      	bne.n	800126a <DHT22_ReadData+0x22>
        DHT22_SendDebug("DHT22: No response from sensor\n\r");
 8001260:	483a      	ldr	r0, [pc, #232]	@ (800134c <DHT22_ReadData+0x104>)
 8001262:	f000 f879 	bl	8001358 <DHT22_SendDebug>
        return 0; // No response
 8001266:	2300      	movs	r3, #0
 8001268:	e06c      	b.n	8001344 <DHT22_ReadData+0xfc>
    }

    // Read 5 bytes: RH integral, RH decimal, Temp integral, Temp decimal, Checksum
    rh_integral = DHT22_ReadByte();
 800126a:	f7ff ffaf 	bl	80011cc <DHT22_ReadByte>
 800126e:	4603      	mov	r3, r0
 8001270:	75fb      	strb	r3, [r7, #23]
    rh_decimal = DHT22_ReadByte();
 8001272:	f7ff ffab 	bl	80011cc <DHT22_ReadByte>
 8001276:	4603      	mov	r3, r0
 8001278:	75bb      	strb	r3, [r7, #22]
    temp_integral = DHT22_ReadByte();
 800127a:	f7ff ffa7 	bl	80011cc <DHT22_ReadByte>
 800127e:	4603      	mov	r3, r0
 8001280:	757b      	strb	r3, [r7, #21]
    temp_decimal = DHT22_ReadByte();
 8001282:	f7ff ffa3 	bl	80011cc <DHT22_ReadByte>
 8001286:	4603      	mov	r3, r0
 8001288:	753b      	strb	r3, [r7, #20]
    checksum = DHT22_ReadByte();
 800128a:	f7ff ff9f 	bl	80011cc <DHT22_ReadByte>
 800128e:	4603      	mov	r3, r0
 8001290:	74fb      	strb	r3, [r7, #19]

    // Verify checksum
    uint8_t calculated_checksum = rh_integral + rh_decimal + temp_integral + temp_decimal;
 8001292:	7dfa      	ldrb	r2, [r7, #23]
 8001294:	7dbb      	ldrb	r3, [r7, #22]
 8001296:	4413      	add	r3, r2
 8001298:	b2da      	uxtb	r2, r3
 800129a:	7d7b      	ldrb	r3, [r7, #21]
 800129c:	4413      	add	r3, r2
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	7d3b      	ldrb	r3, [r7, #20]
 80012a2:	4413      	add	r3, r2
 80012a4:	74bb      	strb	r3, [r7, #18]
    if (checksum != calculated_checksum) {
 80012a6:	7cfa      	ldrb	r2, [r7, #19]
 80012a8:	7cbb      	ldrb	r3, [r7, #18]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d004      	beq.n	80012b8 <DHT22_ReadData+0x70>
        DHT22_SendDebug("DHT22: Checksum mismatch\n\r");
 80012ae:	4828      	ldr	r0, [pc, #160]	@ (8001350 <DHT22_ReadData+0x108>)
 80012b0:	f000 f852 	bl	8001358 <DHT22_SendDebug>
        return 0; // Invalid data
 80012b4:	2300      	movs	r3, #0
 80012b6:	e045      	b.n	8001344 <DHT22_ReadData+0xfc>
    }

    // Calculate actual values
    *humidity = rh_integral + (rh_decimal / 10.0f);
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fd0e 	bl	8000cdc <__aeabi_i2f>
 80012c0:	4604      	mov	r4, r0
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd09 	bl	8000cdc <__aeabi_i2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4921      	ldr	r1, [pc, #132]	@ (8001354 <DHT22_ReadData+0x10c>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe0c 	bl	8000eec <__aeabi_fdiv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4620      	mov	r0, r4
 80012da:	f7ff fc4b 	bl	8000b74 <__addsf3>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	601a      	str	r2, [r3, #0]
    *temperature = temp_integral + (temp_decimal / 10.0f);
 80012e6:	7d7b      	ldrb	r3, [r7, #21]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fcf7 	bl	8000cdc <__aeabi_i2f>
 80012ee:	4604      	mov	r4, r0
 80012f0:	7d3b      	ldrb	r3, [r7, #20]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fcf2 	bl	8000cdc <__aeabi_i2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4916      	ldr	r1, [pc, #88]	@ (8001354 <DHT22_ReadData+0x10c>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fdf5 	bl	8000eec <__aeabi_fdiv>
 8001302:	4603      	mov	r3, r0
 8001304:	4619      	mov	r1, r3
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff fc34 	bl	8000b74 <__addsf3>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
    if (temp_integral & 0x80) { // Negative temperature
 8001314:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001318:	2b00      	cmp	r3, #0
 800131a:	da05      	bge.n	8001328 <DHT22_ReadData+0xe0>
        *temperature *= -1;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	601a      	str	r2, [r3, #0]
    }

    // Apply calibration for humidity (for example, adding an offset)
    float humidity_offset = -2.0f; // Example calibration offset (adjust as needed)
 8001328:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800132c:	60fb      	str	r3, [r7, #12]
    *humidity += humidity_offset;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fc1d 	bl	8000b74 <__addsf3>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	601a      	str	r2, [r3, #0]

    return 1; // Success
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	08007838 	.word	0x08007838
 8001350:	0800785c 	.word	0x0800785c
 8001354:	41200000 	.word	0x41200000

08001358 <DHT22_SendDebug>:

/**
 * @brief Sends a string via UART for debugging.
 * @param[in] string The string to send.
 */
void DHT22_SendDebug(char *string) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7fe fef5 	bl	8000150 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <DHT22_SendDebug+0x28>)
 8001372:	f001 fd67 	bl	8002e44 <HAL_UART_Transmit>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000238 	.word	0x20000238

08001384 <DHT22_DelayUs>:

/**
 * @brief Microsecond delay implementation using TIM1.
 * @param[in] us Delay duration in microseconds.
 */
void DHT22_DelayUs(uint16_t us) {
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <DHT22_DelayUs+0x2c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < us) {}
 8001396:	bf00      	nop
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <DHT22_DelayUs+0x2c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3f9      	bcc.n	8001398 <DHT22_DelayUs+0x14>
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	200001f0 	.word	0x200001f0

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b090      	sub	sp, #64	@ 0x40
 80013b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f000 fb0d 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f843 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f000 f901 	bl	80015c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80013c6:	f000 f885 	bl	80014d4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013ca:	f000 f8d3 	bl	8001574 <MX_USART1_UART_Init>
    //DHT22_Init(&htim1);

    // Define sensorData of type DHT22_Data
    //DHT22_Data sensorData;
	//HAL_TIM_Base_Start(&htim1);
	DHT22_Init();
 80013ce:	f7ff fe87 	bl	80010e0 <DHT22_Init>
	//send_uart("Initialization complete\n\r");
	uartx_write_text(&huart1, "Start...\r\n");
 80013d2:	4917      	ldr	r1, [pc, #92]	@ (8001430 <main+0x7c>)
 80013d4:	4817      	ldr	r0, [pc, #92]	@ (8001434 <main+0x80>)
 80013d6:	f7ff fe6c 	bl	80010b2 <uartx_write_text>
	              }
	          }
*/


	  if (DHT22_ReadData(&temperature, &humidity)) {
 80013da:	4917      	ldr	r1, [pc, #92]	@ (8001438 <main+0x84>)
 80013dc:	4817      	ldr	r0, [pc, #92]	@ (800143c <main+0x88>)
 80013de:	f7ff ff33 	bl	8001248 <DHT22_ReadData>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d01a      	beq.n	800141e <main+0x6a>
	             char buffer[50];
	             sprintf(buffer, "Temp: %.1f C, Hum: %.1f %%\n\r", temperature, humidity);
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <main+0x88>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f81b 	bl	8000428 <__aeabi_f2d>
 80013f2:	4604      	mov	r4, r0
 80013f4:	460d      	mov	r5, r1
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <main+0x84>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f814 	bl	8000428 <__aeabi_f2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	1d38      	adds	r0, r7, #4
 8001406:	e9cd 2300 	strd	r2, r3, [sp]
 800140a:	4622      	mov	r2, r4
 800140c:	462b      	mov	r3, r5
 800140e:	490c      	ldr	r1, [pc, #48]	@ (8001440 <main+0x8c>)
 8001410:	f002 fdc6 	bl	8003fa0 <siprintf>
	             DHT22_SendDebug(buffer);
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff9e 	bl	8001358 <DHT22_SendDebug>
 800141c:	e002      	b.n	8001424 <main+0x70>
	         } else {
	             DHT22_SendDebug("Failed to read from DHT22\n\r");
 800141e:	4809      	ldr	r0, [pc, #36]	@ (8001444 <main+0x90>)
 8001420:	f7ff ff9a 	bl	8001358 <DHT22_SendDebug>
	         }

	         HAL_Delay(2000); // Wait 2 seconds between reads
 8001424:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001428:	f000 fb38 	bl	8001a9c <HAL_Delay>
	  if (DHT22_ReadData(&temperature, &humidity)) {
 800142c:	e7d5      	b.n	80013da <main+0x26>
 800142e:	bf00      	nop
 8001430:	08007878 	.word	0x08007878
 8001434:	20000238 	.word	0x20000238
 8001438:	20000284 	.word	0x20000284
 800143c:	20000280 	.word	0x20000280
 8001440:	08007884 	.word	0x08007884
 8001444:	080078a4 	.word	0x080078a4

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b090      	sub	sp, #64	@ 0x40
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	2228      	movs	r2, #40	@ 0x28
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fe05 	bl	8004066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800146e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001472:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001478:	2301      	movs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2302      	movs	r3, #2
 800147e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001486:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fdbf 	bl	8002014 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800149c:	f000 f8e0 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	2302      	movs	r3, #2
 80014a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2102      	movs	r1, #2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 f82c 	bl	8002518 <HAL_RCC_ClockConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014c6:	f000 f8cb 	bl	8001660 <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3740      	adds	r7, #64	@ 0x40
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <MX_TIM1_Init+0x98>)
 80014f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001570 <MX_TIM1_Init+0x9c>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <MX_TIM1_Init+0x98>)
 80014f8:	2247      	movs	r2, #71	@ 0x47
 80014fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <MX_TIM1_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_TIM1_Init+0x98>)
 8001504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001508:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_TIM1_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_TIM1_Init+0x98>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_TIM1_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800151c:	4813      	ldr	r0, [pc, #76]	@ (800156c <MX_TIM1_Init+0x98>)
 800151e:	f001 f989 	bl	8002834 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001528:	f000 f89a 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <MX_TIM1_Init+0x98>)
 800153a:	f001 fa15 	bl	8002968 <HAL_TIM_ConfigClockSource>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001544:	f000 f88c 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_TIM1_Init+0x98>)
 8001556:	f001 fbc7 	bl	8002ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001560:	f000 f87e 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200001f0 	.word	0x200001f0
 8001570:	40012c00 	.word	0x40012c00

08001574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 800157a:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <MX_USART1_UART_Init+0x50>)
 800157c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001580:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015ac:	f001 fbfa 	bl	8002da4 <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015b6:	f000 f853 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000238 	.word	0x20000238
 80015c4:	40013800 	.word	0x40013800

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <MX_GPIO_Init+0x90>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <MX_GPIO_Init+0x90>)
 80015e2:	f043 0320 	orr.w	r3, r3, #32
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <MX_GPIO_Init+0x90>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_GPIO_Init+0x90>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <MX_GPIO_Init+0x90>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_GPIO_Init+0x90>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_GPIO_Init+0x90>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <MX_GPIO_Init+0x90>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_GPIO_Init+0x90>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800162a:	480c      	ldr	r0, [pc, #48]	@ (800165c <MX_GPIO_Init+0x94>)
 800162c:	f000 fcd9 	bl	8001fe2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001630:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2302      	movs	r3, #2
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4619      	mov	r1, r3
 8001648:	4804      	ldr	r0, [pc, #16]	@ (800165c <MX_GPIO_Init+0x94>)
 800164a:	f000 fb2f 	bl	8001cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40010c00 	.word	0x40010c00

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <Error_Handler+0x8>

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_MspInit+0x5c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a0e      	ldr	r2, [pc, #56]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <HAL_MspInit+0x5c>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_MspInit+0x60>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <HAL_MspInit+0x60>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000

080016d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <HAL_TIM_Base_MspInit+0x34>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10b      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_TIM_Base_MspInit+0x38>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_TIM_Base_MspInit+0x38>)
 80016e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_TIM_Base_MspInit+0x38>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40012c00 	.word	0x40012c00
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <HAL_UART_MspInit+0x8c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d131      	bne.n	8001790 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_UART_MspInit+0x90>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a1a      	ldr	r2, [pc, #104]	@ (800179c <HAL_UART_MspInit+0x90>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <HAL_UART_MspInit+0x90>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_UART_MspInit+0x90>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <HAL_UART_MspInit+0x90>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_UART_MspInit+0x90>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800175c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <HAL_UART_MspInit+0x94>)
 8001772:	f000 fa9b 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <HAL_UART_MspInit+0x94>)
 800178c:	f000 fa8e 	bl	8001cac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40013800 	.word	0x40013800
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <NMI_Handler+0x4>

080017ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <MemManage_Handler+0x4>

080017bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <UsageFault_Handler+0x4>

080017cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f936 	bl	8001a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <_kill>:

int _kill(int pid, int sig)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001814:	f002 fc7a 	bl	800410c <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	2216      	movs	r2, #22
 800181c:	601a      	str	r2, [r3, #0]
  return -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_exit>:

void _exit (int status)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001832:	f04f 31ff 	mov.w	r1, #4294967295
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffe7 	bl	800180a <_kill>
  while (1) {}    /* Make sure we hang here */
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <_exit+0x12>

08001840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00a      	b.n	8001868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001852:	f3af 8000 	nop.w
 8001856:	4601      	mov	r1, r0
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	b2ca      	uxtb	r2, r1
 8001860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbf0      	blt.n	8001852 <_read+0x12>
  }

  return len;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e009      	b.n	80018a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf1      	blt.n	800188c <_write+0x12>
  }
  return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_close>:

int _close(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d8:	605a      	str	r2, [r3, #4]
  return 0;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <_isatty>:

int _isatty(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
	...

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	@ (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d207      	bcs.n	8001954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001944:	f002 fbe2 	bl	800410c <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	e009      	b.n	8001968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <_sbrk+0x64>)
 8001964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20005000 	.word	0x20005000
 8001974:	00000400 	.word	0x00000400
 8001978:	20000288 	.word	0x20000288
 800197c:	200003e0 	.word	0x200003e0

08001980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800198c:	f7ff fff8 	bl	8001980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001992:	490c      	ldr	r1, [pc, #48]	@ (80019c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001994:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a09      	ldr	r2, [pc, #36]	@ (80019cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019a8:	4c09      	ldr	r4, [pc, #36]	@ (80019d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f002 fbaf 	bl	8004118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ba:	f7ff fcfb 	bl	80013b4 <main>
  bx lr
 80019be:	4770      	bx	lr
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019c8:	08007d28 	.word	0x08007d28
  ldr r2, =_sbss
 80019cc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019d0:	200003dc 	.word	0x200003dc

080019d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC1_2_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <HAL_Init+0x28>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <HAL_Init+0x28>)
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e8:	2003      	movs	r0, #3
 80019ea:	f000 f92b 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ee:	200f      	movs	r0, #15
 80019f0:	f000 f808 	bl	8001a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f4:	f7ff fe3a 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_InitTick+0x54>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_InitTick+0x58>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f935 	bl	8001c92 <HAL_SYSTICK_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00e      	b.n	8001a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d80a      	bhi.n	8001a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f000 f90b 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a44:	4a06      	ldr	r2, [pc, #24]	@ (8001a60 <HAL_InitTick+0x5c>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_IncTick+0x1c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_IncTick+0x20>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a03      	ldr	r2, [pc, #12]	@ (8001a84 <HAL_IncTick+0x20>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	20000008 	.word	0x20000008
 8001a84:	2000028c 	.word	0x2000028c

08001a88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	@ (8001a98 <HAL_GetTick+0x10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	2000028c 	.word	0x2000028c

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffe0 	bl	8001a88 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	@ (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	@ (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff90 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff49 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff5e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff90 	bl	8001b9c <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5f 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffb0 	bl	8001c00 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b08b      	sub	sp, #44	@ 0x2c
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e169      	b.n	8001f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 8158 	bne.w	8001f8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4a9a      	ldr	r2, [pc, #616]	@ (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d05e      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a98      	ldr	r2, [pc, #608]	@ (8001f4c <HAL_GPIO_Init+0x2a0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d875      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cee:	4a98      	ldr	r2, [pc, #608]	@ (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d058      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a96      	ldr	r2, [pc, #600]	@ (8001f50 <HAL_GPIO_Init+0x2a4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d86f      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001cfa:	4a96      	ldr	r2, [pc, #600]	@ (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d052      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d00:	4a94      	ldr	r2, [pc, #592]	@ (8001f54 <HAL_GPIO_Init+0x2a8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d869      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d06:	4a94      	ldr	r2, [pc, #592]	@ (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d04c      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d0c:	4a92      	ldr	r2, [pc, #584]	@ (8001f58 <HAL_GPIO_Init+0x2ac>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d863      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d12:	4a92      	ldr	r2, [pc, #584]	@ (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d046      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a90      	ldr	r2, [pc, #576]	@ (8001f5c <HAL_GPIO_Init+0x2b0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d85d      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d1e:	2b12      	cmp	r3, #18
 8001d20:	d82a      	bhi.n	8001d78 <HAL_GPIO_Init+0xcc>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d859      	bhi.n	8001dda <HAL_GPIO_Init+0x12e>
 8001d26:	a201      	add	r2, pc, #4	@ (adr r2, 8001d2c <HAL_GPIO_Init+0x80>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d93 	.word	0x08001d93
 8001d38:	08001dd5 	.word	0x08001dd5
 8001d3c:	08001ddb 	.word	0x08001ddb
 8001d40:	08001ddb 	.word	0x08001ddb
 8001d44:	08001ddb 	.word	0x08001ddb
 8001d48:	08001ddb 	.word	0x08001ddb
 8001d4c:	08001ddb 	.word	0x08001ddb
 8001d50:	08001ddb 	.word	0x08001ddb
 8001d54:	08001ddb 	.word	0x08001ddb
 8001d58:	08001ddb 	.word	0x08001ddb
 8001d5c:	08001ddb 	.word	0x08001ddb
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001ddb 	.word	0x08001ddb
 8001d68:	08001ddb 	.word	0x08001ddb
 8001d6c:	08001ddb 	.word	0x08001ddb
 8001d70:	08001d89 	.word	0x08001d89
 8001d74:	08001d9d 	.word	0x08001d9d
 8001d78:	4a79      	ldr	r2, [pc, #484]	@ (8001f60 <HAL_GPIO_Init+0x2b4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d7e:	e02c      	b.n	8001dda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e029      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	623b      	str	r3, [r7, #32]
          break;
 8001d90:	e024      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	3308      	adds	r3, #8
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e01f      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	330c      	adds	r3, #12
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e01a      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dae:	2304      	movs	r3, #4
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e013      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	611a      	str	r2, [r3, #16]
          break;
 8001dc6:	e009      	b.n	8001ddc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	615a      	str	r2, [r3, #20]
          break;
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x130>
          break;
 8001dda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2bff      	cmp	r3, #255	@ 0xff
 8001de0:	d801      	bhi.n	8001de6 <HAL_GPIO_Init+0x13a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_Init+0x13e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2bff      	cmp	r3, #255	@ 0xff
 8001df0:	d802      	bhi.n	8001df8 <HAL_GPIO_Init+0x14c>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x152>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	210f      	movs	r1, #15
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80b1 	beq.w	8001f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	@ (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b4a      	ldr	r3, [pc, #296]	@ (8001f64 <HAL_GPIO_Init+0x2b8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e44:	4a48      	ldr	r2, [pc, #288]	@ (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a40      	ldr	r2, [pc, #256]	@ (8001f6c <HAL_GPIO_Init+0x2c0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a3f      	ldr	r2, [pc, #252]	@ (8001f70 <HAL_GPIO_Init+0x2c4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00d      	beq.n	8001e94 <HAL_GPIO_Init+0x1e8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f74 <HAL_GPIO_Init+0x2c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x1e4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	@ (8001f78 <HAL_GPIO_Init+0x2cc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_GPIO_Init+0x1e0>
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e006      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	e004      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_GPIO_Init+0x1ee>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eaa:	492f      	ldr	r1, [pc, #188]	@ (8001f68 <HAL_GPIO_Init+0x2bc>)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	492c      	ldr	r1, [pc, #176]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	4928      	ldr	r1, [pc, #160]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eec:	4b23      	ldr	r3, [pc, #140]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4922      	ldr	r1, [pc, #136]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60cb      	str	r3, [r1, #12]
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001efa:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	491e      	ldr	r1, [pc, #120]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4918      	ldr	r1, [pc, #96]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4914      	ldr	r1, [pc, #80]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d021      	beq.n	8001f80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	490e      	ldr	r1, [pc, #56]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e021      	b.n	8001f8e <HAL_GPIO_Init+0x2e2>
 8001f4a:	bf00      	nop
 8001f4c:	10320000 	.word	0x10320000
 8001f50:	10310000 	.word	0x10310000
 8001f54:	10220000 	.word	0x10220000
 8001f58:	10210000 	.word	0x10210000
 8001f5c:	10120000 	.word	0x10120000
 8001f60:	10110000 	.word	0x10110000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40010c00 	.word	0x40010c00
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40011400 	.word	0x40011400
 8001f7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	4909      	ldr	r1, [pc, #36]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	3301      	adds	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f47f ae8e 	bne.w	8001cc0 <HAL_GPIO_Init+0x14>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	372c      	adds	r7, #44	@ 0x2c
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e001      	b.n	8001fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	807b      	strh	r3, [r7, #2]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff2:	787b      	ldrb	r3, [r7, #1]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff8:	887a      	ldrh	r2, [r7, #2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ffe:	e003      	b.n	8002008 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002000:	887b      	ldrh	r3, [r7, #2]
 8002002:	041a      	lsls	r2, r3, #16
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	611a      	str	r2, [r3, #16]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
	...

08002014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e272      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8087 	beq.w	8002142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002034:	4b92      	ldr	r3, [pc, #584]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b04      	cmp	r3, #4
 800203e:	d00c      	beq.n	800205a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002040:	4b8f      	ldr	r3, [pc, #572]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d112      	bne.n	8002072 <HAL_RCC_OscConfig+0x5e>
 800204c:	4b8c      	ldr	r3, [pc, #560]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002058:	d10b      	bne.n	8002072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205a:	4b89      	ldr	r3, [pc, #548]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d06c      	beq.n	8002140 <HAL_RCC_OscConfig+0x12c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d168      	bne.n	8002140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e24c      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x76>
 800207c:	4b80      	ldr	r3, [pc, #512]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a7f      	ldr	r2, [pc, #508]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e02e      	b.n	80020e8 <HAL_RCC_OscConfig+0xd4>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x98>
 8002092:	4b7b      	ldr	r3, [pc, #492]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7a      	ldr	r2, [pc, #488]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b78      	ldr	r3, [pc, #480]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a77      	ldr	r2, [pc, #476]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xd4>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0xbc>
 80020b6:	4b72      	ldr	r3, [pc, #456]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a71      	ldr	r2, [pc, #452]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xd4>
 80020d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b68      	ldr	r3, [pc, #416]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a67      	ldr	r2, [pc, #412]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fcca 	bl	8001a88 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff fcc6 	bl	8001a88 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	@ 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e200      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b5d      	ldr	r3, [pc, #372]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xe4>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fcb6 	bl	8001a88 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fcb2 	bl	8001a88 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	@ 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1ec      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b53      	ldr	r3, [pc, #332]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x10c>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214e:	4b4c      	ldr	r3, [pc, #304]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800215a:	4b49      	ldr	r3, [pc, #292]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x18c>
 8002166:	4b46      	ldr	r3, [pc, #280]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b43      	ldr	r3, [pc, #268]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x176>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1c0      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b3d      	ldr	r3, [pc, #244]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4939      	ldr	r1, [pc, #228]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e03a      	b.n	8002216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <HAL_RCC_OscConfig+0x270>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff fc6b 	bl	8001a88 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff fc67 	bl	8001a88 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1a1      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4927      	ldr	r1, [pc, #156]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <HAL_RCC_OscConfig+0x270>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fc4a 	bl	8001a88 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f8:	f7ff fc46 	bl	8001a88 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e180      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	4b1d      	ldr	r3, [pc, #116]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03a      	beq.n	8002298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d019      	beq.n	800225e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7ff fc2a 	bl	8001a88 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002238:	f7ff fc26 	bl	8001a88 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e160      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <HAL_RCC_OscConfig+0x26c>)
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002256:	2001      	movs	r0, #1
 8002258:	f000 face 	bl	80027f8 <RCC_Delay>
 800225c:	e01c      	b.n	8002298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_RCC_OscConfig+0x274>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002264:	f7ff fc10 	bl	8001a88 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226a:	e00f      	b.n	800228c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226c:	f7ff fc0c 	bl	8001a88 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d908      	bls.n	800228c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e146      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	42420000 	.word	0x42420000
 8002288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	4b92      	ldr	r3, [pc, #584]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e9      	bne.n	800226c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a6 	beq.w	80023f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022aa:	4b8b      	ldr	r3, [pc, #556]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b88      	ldr	r3, [pc, #544]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a87      	ldr	r2, [pc, #540]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	61d3      	str	r3, [r2, #28]
 80022c2:	4b85      	ldr	r3, [pc, #532]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b82      	ldr	r3, [pc, #520]	@ (80024dc <HAL_RCC_OscConfig+0x4c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4b7f      	ldr	r3, [pc, #508]	@ (80024dc <HAL_RCC_OscConfig+0x4c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a7e      	ldr	r2, [pc, #504]	@ (80024dc <HAL_RCC_OscConfig+0x4c8>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7ff fbcd 	bl	8001a88 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7ff fbc9 	bl	8001a88 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b64      	cmp	r3, #100	@ 0x64
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e103      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b75      	ldr	r3, [pc, #468]	@ (80024dc <HAL_RCC_OscConfig+0x4c8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x312>
 8002318:	4b6f      	ldr	r3, [pc, #444]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a6e      	ldr	r2, [pc, #440]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	e02d      	b.n	8002382 <HAL_RCC_OscConfig+0x36e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x334>
 800232e:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a69      	ldr	r2, [pc, #420]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	4b67      	ldr	r3, [pc, #412]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a66      	ldr	r2, [pc, #408]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	e01c      	b.n	8002382 <HAL_RCC_OscConfig+0x36e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b05      	cmp	r3, #5
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0x356>
 8002350:	4b61      	ldr	r3, [pc, #388]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a60      	ldr	r2, [pc, #384]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	4b5e      	ldr	r3, [pc, #376]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a5d      	ldr	r2, [pc, #372]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	e00b      	b.n	8002382 <HAL_RCC_OscConfig+0x36e>
 800236a:	4b5b      	ldr	r3, [pc, #364]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a5a      	ldr	r2, [pc, #360]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4b58      	ldr	r3, [pc, #352]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a57      	ldr	r2, [pc, #348]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d015      	beq.n	80023b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff fb7d 	bl	8001a88 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff fb79 	bl	8001a88 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0b1      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	4b4b      	ldr	r3, [pc, #300]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ee      	beq.n	8002392 <HAL_RCC_OscConfig+0x37e>
 80023b4:	e014      	b.n	80023e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fb67 	bl	8001a88 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7ff fb63 	bl	8001a88 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e09b      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	4b40      	ldr	r3, [pc, #256]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ee      	bne.n	80023be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e6:	4b3c      	ldr	r3, [pc, #240]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a3b      	ldr	r2, [pc, #236]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8087 	beq.w	800250a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fc:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d061      	beq.n	80024cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d146      	bne.n	800249e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <HAL_RCC_OscConfig+0x4cc>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff fb37 	bl	8001a88 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff fb33 	bl	8001a88 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e06d      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002430:	4b29      	ldr	r3, [pc, #164]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002444:	d108      	bne.n	8002458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002446:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4921      	ldr	r1, [pc, #132]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002458:	4b1f      	ldr	r3, [pc, #124]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a19      	ldr	r1, [r3, #32]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	430b      	orrs	r3, r1
 800246a:	491b      	ldr	r1, [pc, #108]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002470:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <HAL_RCC_OscConfig+0x4cc>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7ff fb07 	bl	8001a88 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247e:	f7ff fb03 	bl	8001a88 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e03d      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x46a>
 800249c:	e035      	b.n	800250a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_RCC_OscConfig+0x4cc>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff faf0 	bl	8001a88 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff faec 	bl	8001a88 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e026      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x498>
 80024ca:	e01e      	b.n	800250a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e019      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
 80024e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_OscConfig+0x500>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0d0      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b6a      	ldr	r3, [pc, #424]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d910      	bls.n	800255c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b67      	ldr	r3, [pc, #412]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 0207 	bic.w	r2, r3, #7
 8002542:	4965      	ldr	r1, [pc, #404]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b63      	ldr	r3, [pc, #396]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0b8      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002574:	4b59      	ldr	r3, [pc, #356]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a58      	ldr	r2, [pc, #352]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800257e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800258c:	4b53      	ldr	r3, [pc, #332]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b50      	ldr	r3, [pc, #320]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	494d      	ldr	r1, [pc, #308]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d040      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b47      	ldr	r3, [pc, #284]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d115      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e073      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b39      	ldr	r3, [pc, #228]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4936      	ldr	r1, [pc, #216]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7ff fa3e 	bl	8001a88 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7ff fa3a 	bl	8001a88 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e053      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d210      	bcs.n	8002668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 0207 	bic.w	r2, r3, #7
 800264e:	4922      	ldr	r1, [pc, #136]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e032      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002674:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4916      	ldr	r1, [pc, #88]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002692:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	490e      	ldr	r1, [pc, #56]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026a6:	f000 f821 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	490a      	ldr	r1, [pc, #40]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b8:	5ccb      	ldrb	r3, [r1, r3]
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <HAL_RCC_ClockConfig+0x1cc>)
 80026c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1d0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f99c 	bl	8001a04 <HAL_InitTick>

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40021000 	.word	0x40021000
 80026e0:	080078c0 	.word	0x080078c0
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002706:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x94>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d002      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x30>
 8002716:	2b08      	cmp	r3, #8
 8002718:	d003      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x36>
 800271a:	e027      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271c:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x98>)
 800271e:	613b      	str	r3, [r7, #16]
      break;
 8002720:	e027      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800272c:	5cd3      	ldrb	r3, [r2, r3]
 800272e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800273a:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x94>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	0c5b      	lsrs	r3, r3, #17
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	4a11      	ldr	r2, [pc, #68]	@ (800278c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a0d      	ldr	r2, [pc, #52]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x98>)
 800274e:	fb03 f202 	mul.w	r2, r3, r2
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e004      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a0c      	ldr	r2, [pc, #48]	@ (8002790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	613b      	str	r3, [r7, #16]
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x98>)
 800276e:	613b      	str	r3, [r7, #16]
      break;
 8002770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002772:	693b      	ldr	r3, [r7, #16]
}
 8002774:	4618      	mov	r0, r3
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	007a1200 	.word	0x007a1200
 8002788:	080078d8 	.word	0x080078d8
 800278c:	080078e8 	.word	0x080078e8
 8002790:	003d0900 	.word	0x003d0900

08002794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002798:	4b02      	ldr	r3, [pc, #8]	@ (80027a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	20000000 	.word	0x20000000

080027a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027ac:	f7ff fff2 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	080078d0 	.word	0x080078d0

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d4:	f7ff ffde 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0adb      	lsrs	r3, r3, #11
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4903      	ldr	r1, [pc, #12]	@ (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	080078d0 	.word	0x080078d0

080027f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002800:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <RCC_Delay+0x34>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <RCC_Delay+0x38>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0a5b      	lsrs	r3, r3, #9
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002814:	bf00      	nop
  }
  while (Delay --);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1e5a      	subs	r2, r3, #1
 800281a:	60fa      	str	r2, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f9      	bne.n	8002814 <RCC_Delay+0x1c>
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	20000000 	.word	0x20000000
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e041      	b.n	80028ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe ff38 	bl	80016d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3304      	adds	r3, #4
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f000 f940 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d001      	beq.n	80028ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e032      	b.n	8002952 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a18      	ldr	r2, [pc, #96]	@ (800295c <HAL_TIM_Base_Start+0x88>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00e      	beq.n	800291c <HAL_TIM_Base_Start+0x48>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002906:	d009      	beq.n	800291c <HAL_TIM_Base_Start+0x48>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a14      	ldr	r2, [pc, #80]	@ (8002960 <HAL_TIM_Base_Start+0x8c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_TIM_Base_Start+0x48>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a13      	ldr	r2, [pc, #76]	@ (8002964 <HAL_TIM_Base_Start+0x90>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d010      	beq.n	8002950 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293e:	e007      	b.n	8002950 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800

08002968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_TIM_ConfigClockSource+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e0b4      	b.n	8002aee <HAL_TIM_ConfigClockSource+0x186>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029bc:	d03e      	beq.n	8002a3c <HAL_TIM_ConfigClockSource+0xd4>
 80029be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c2:	f200 8087 	bhi.w	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ca:	f000 8086 	beq.w	8002ada <HAL_TIM_ConfigClockSource+0x172>
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d2:	d87f      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b70      	cmp	r3, #112	@ 0x70
 80029d6:	d01a      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xa6>
 80029d8:	2b70      	cmp	r3, #112	@ 0x70
 80029da:	d87b      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029dc:	2b60      	cmp	r3, #96	@ 0x60
 80029de:	d050      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x11a>
 80029e0:	2b60      	cmp	r3, #96	@ 0x60
 80029e2:	d877      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b50      	cmp	r3, #80	@ 0x50
 80029e6:	d03c      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0xfa>
 80029e8:	2b50      	cmp	r3, #80	@ 0x50
 80029ea:	d873      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b40      	cmp	r3, #64	@ 0x40
 80029ee:	d058      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80029f0:	2b40      	cmp	r3, #64	@ 0x40
 80029f2:	d86f      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029f4:	2b30      	cmp	r3, #48	@ 0x30
 80029f6:	d064      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80029f8:	2b30      	cmp	r3, #48	@ 0x30
 80029fa:	d86b      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d060      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d867      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d05c      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a08:	2b10      	cmp	r3, #16
 8002a0a:	d05a      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a0c:	e062      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a1e:	f000 f944 	bl	8002caa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	609a      	str	r2, [r3, #8]
      break;
 8002a3a:	e04f      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a4c:	f000 f92d 	bl	8002caa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a5e:	609a      	str	r2, [r3, #8]
      break;
 8002a60:	e03c      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f000 f8a4 	bl	8002bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2150      	movs	r1, #80	@ 0x50
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f8fb 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002a80:	e02c      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f000 f8c2 	bl	8002c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2160      	movs	r1, #96	@ 0x60
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f8eb 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002aa0:	e01c      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f000 f884 	bl	8002bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2140      	movs	r1, #64	@ 0x40
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f8db 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002ac0:	e00c      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f000 f8d2 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002ad2:	e003      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e000      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a29      	ldr	r2, [pc, #164]	@ (8002bb0 <TIM_Base_SetConfig+0xb8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00b      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b16:	d007      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a26      	ldr	r2, [pc, #152]	@ (8002bb4 <TIM_Base_SetConfig+0xbc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a25      	ldr	r2, [pc, #148]	@ (8002bb8 <TIM_Base_SetConfig+0xc0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <TIM_Base_SetConfig+0xb8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00b      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b48:	d007      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	@ (8002bb4 <TIM_Base_SetConfig+0xbc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d003      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a18      	ldr	r2, [pc, #96]	@ (8002bb8 <TIM_Base_SetConfig+0xc0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d108      	bne.n	8002b6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a07      	ldr	r2, [pc, #28]	@ (8002bb0 <TIM_Base_SetConfig+0xb8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800

08002bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0201 	bic.w	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 030a 	bic.w	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0210 	bic.w	r2, r3, #16
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	031b      	lsls	r3, r3, #12
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f043 0307 	orr.w	r3, r3, #7
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	609a      	str	r2, [r3, #8]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e046      	b.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a16      	ldr	r2, [pc, #88]	@ (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00e      	beq.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4c:	d009      	beq.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a12      	ldr	r2, [pc, #72]	@ (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a10      	ldr	r2, [pc, #64]	@ (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10c      	bne.n	8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800

08002da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e042      	b.n	8002e3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe fc9e 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	@ 0x24
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f91d 	bl	8003028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	@ 0x28
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d16d      	bne.n	8002f40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_UART_Transmit+0x2c>
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e066      	b.n	8002f42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2221      	movs	r2, #33	@ 0x21
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e82:	f7fe fe01 	bl	8001a88 <HAL_GetTick>
 8002e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	88fa      	ldrh	r2, [r7, #6]
 8002e92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e9c:	d108      	bne.n	8002eb0 <HAL_UART_Transmit+0x6c>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	e003      	b.n	8002eb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eb8:	e02a      	b.n	8002f10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2180      	movs	r1, #128	@ 0x80
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f840 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e036      	b.n	8002f42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	3302      	adds	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	e007      	b.n	8002f02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	3301      	adds	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1cf      	bne.n	8002eba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2140      	movs	r1, #64	@ 0x40
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f810 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e006      	b.n	8002f42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b090      	sub	sp, #64	@ 0x40
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5a:	e050      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d04c      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f6a:	f7fe fd8d 	bl	8001a88 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d241      	bcs.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f9a:	637a      	str	r2, [r7, #52]	@ 0x34
 8002f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fce:	623a      	str	r2, [r7, #32]
 8002fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	69f9      	ldr	r1, [r7, #28]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e5      	bne.n	8002fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e00f      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	429a      	cmp	r2, r3
 800301a:	d09f      	beq.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3740      	adds	r7, #64	@ 0x40
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003062:	f023 030c 	bic.w	r3, r3, #12
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	430b      	orrs	r3, r1
 800306e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2c      	ldr	r2, [pc, #176]	@ (800313c <UART_SetConfig+0x114>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d103      	bne.n	8003098 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff fb9e 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	e002      	b.n	800309e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003098:	f7ff fb86 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 800309c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <UART_SetConfig+0x118>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	0119      	lsls	r1, r3, #4
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <UART_SetConfig+0x118>)
 80030d6:	fba3 0302 	umull	r0, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2064      	movs	r0, #100	@ 0x64
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	3332      	adds	r3, #50	@ 0x32
 80030e8:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <UART_SetConfig+0x118>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f4:	4419      	add	r1, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <UART_SetConfig+0x118>)
 800310e:	fba3 0302 	umull	r0, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2064      	movs	r0, #100	@ 0x64
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3332      	adds	r3, #50	@ 0x32
 8003120:	4a07      	ldr	r2, [pc, #28]	@ (8003140 <UART_SetConfig+0x118>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	440a      	add	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40013800 	.word	0x40013800
 8003140:	51eb851f 	.word	0x51eb851f

08003144 <__cvt>:
 8003144:	2b00      	cmp	r3, #0
 8003146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800314a:	461d      	mov	r5, r3
 800314c:	bfbb      	ittet	lt
 800314e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003152:	461d      	movlt	r5, r3
 8003154:	2300      	movge	r3, #0
 8003156:	232d      	movlt	r3, #45	@ 0x2d
 8003158:	b088      	sub	sp, #32
 800315a:	4614      	mov	r4, r2
 800315c:	bfb8      	it	lt
 800315e:	4614      	movlt	r4, r2
 8003160:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003162:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003164:	7013      	strb	r3, [r2, #0]
 8003166:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003168:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800316c:	f023 0820 	bic.w	r8, r3, #32
 8003170:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003174:	d005      	beq.n	8003182 <__cvt+0x3e>
 8003176:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800317a:	d100      	bne.n	800317e <__cvt+0x3a>
 800317c:	3601      	adds	r6, #1
 800317e:	2302      	movs	r3, #2
 8003180:	e000      	b.n	8003184 <__cvt+0x40>
 8003182:	2303      	movs	r3, #3
 8003184:	aa07      	add	r2, sp, #28
 8003186:	9204      	str	r2, [sp, #16]
 8003188:	aa06      	add	r2, sp, #24
 800318a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800318e:	e9cd 3600 	strd	r3, r6, [sp]
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	f001 f883 	bl	80042a0 <_dtoa_r>
 800319a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800319e:	4607      	mov	r7, r0
 80031a0:	d119      	bne.n	80031d6 <__cvt+0x92>
 80031a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80031a4:	07db      	lsls	r3, r3, #31
 80031a6:	d50e      	bpl.n	80031c6 <__cvt+0x82>
 80031a8:	eb00 0906 	add.w	r9, r0, r6
 80031ac:	2200      	movs	r2, #0
 80031ae:	2300      	movs	r3, #0
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80031b8:	b108      	cbz	r0, 80031be <__cvt+0x7a>
 80031ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80031be:	2230      	movs	r2, #48	@ 0x30
 80031c0:	9b07      	ldr	r3, [sp, #28]
 80031c2:	454b      	cmp	r3, r9
 80031c4:	d31e      	bcc.n	8003204 <__cvt+0xc0>
 80031c6:	4638      	mov	r0, r7
 80031c8:	9b07      	ldr	r3, [sp, #28]
 80031ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80031cc:	1bdb      	subs	r3, r3, r7
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	b008      	add	sp, #32
 80031d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031da:	eb00 0906 	add.w	r9, r0, r6
 80031de:	d1e5      	bne.n	80031ac <__cvt+0x68>
 80031e0:	7803      	ldrb	r3, [r0, #0]
 80031e2:	2b30      	cmp	r3, #48	@ 0x30
 80031e4:	d10a      	bne.n	80031fc <__cvt+0xb8>
 80031e6:	2200      	movs	r2, #0
 80031e8:	2300      	movs	r3, #0
 80031ea:	4620      	mov	r0, r4
 80031ec:	4629      	mov	r1, r5
 80031ee:	f7fd fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80031f2:	b918      	cbnz	r0, 80031fc <__cvt+0xb8>
 80031f4:	f1c6 0601 	rsb	r6, r6, #1
 80031f8:	f8ca 6000 	str.w	r6, [sl]
 80031fc:	f8da 3000 	ldr.w	r3, [sl]
 8003200:	4499      	add	r9, r3
 8003202:	e7d3      	b.n	80031ac <__cvt+0x68>
 8003204:	1c59      	adds	r1, r3, #1
 8003206:	9107      	str	r1, [sp, #28]
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e7d9      	b.n	80031c0 <__cvt+0x7c>

0800320c <__exponent>:
 800320c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800320e:	2900      	cmp	r1, #0
 8003210:	bfb6      	itet	lt
 8003212:	232d      	movlt	r3, #45	@ 0x2d
 8003214:	232b      	movge	r3, #43	@ 0x2b
 8003216:	4249      	neglt	r1, r1
 8003218:	2909      	cmp	r1, #9
 800321a:	7002      	strb	r2, [r0, #0]
 800321c:	7043      	strb	r3, [r0, #1]
 800321e:	dd29      	ble.n	8003274 <__exponent+0x68>
 8003220:	f10d 0307 	add.w	r3, sp, #7
 8003224:	461d      	mov	r5, r3
 8003226:	270a      	movs	r7, #10
 8003228:	fbb1 f6f7 	udiv	r6, r1, r7
 800322c:	461a      	mov	r2, r3
 800322e:	fb07 1416 	mls	r4, r7, r6, r1
 8003232:	3430      	adds	r4, #48	@ 0x30
 8003234:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003238:	460c      	mov	r4, r1
 800323a:	2c63      	cmp	r4, #99	@ 0x63
 800323c:	4631      	mov	r1, r6
 800323e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003242:	dcf1      	bgt.n	8003228 <__exponent+0x1c>
 8003244:	3130      	adds	r1, #48	@ 0x30
 8003246:	1e94      	subs	r4, r2, #2
 8003248:	f803 1c01 	strb.w	r1, [r3, #-1]
 800324c:	4623      	mov	r3, r4
 800324e:	1c41      	adds	r1, r0, #1
 8003250:	42ab      	cmp	r3, r5
 8003252:	d30a      	bcc.n	800326a <__exponent+0x5e>
 8003254:	f10d 0309 	add.w	r3, sp, #9
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	42ac      	cmp	r4, r5
 800325c:	bf88      	it	hi
 800325e:	2300      	movhi	r3, #0
 8003260:	3302      	adds	r3, #2
 8003262:	4403      	add	r3, r0
 8003264:	1a18      	subs	r0, r3, r0
 8003266:	b003      	add	sp, #12
 8003268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800326a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800326e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003272:	e7ed      	b.n	8003250 <__exponent+0x44>
 8003274:	2330      	movs	r3, #48	@ 0x30
 8003276:	3130      	adds	r1, #48	@ 0x30
 8003278:	7083      	strb	r3, [r0, #2]
 800327a:	70c1      	strb	r1, [r0, #3]
 800327c:	1d03      	adds	r3, r0, #4
 800327e:	e7f1      	b.n	8003264 <__exponent+0x58>

08003280 <_printf_float>:
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	b091      	sub	sp, #68	@ 0x44
 8003286:	460c      	mov	r4, r1
 8003288:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800328c:	4616      	mov	r6, r2
 800328e:	461f      	mov	r7, r3
 8003290:	4605      	mov	r5, r0
 8003292:	f000 fef1 	bl	8004078 <_localeconv_r>
 8003296:	6803      	ldr	r3, [r0, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	9308      	str	r3, [sp, #32]
 800329c:	f7fc ff58 	bl	8000150 <strlen>
 80032a0:	2300      	movs	r3, #0
 80032a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80032a4:	f8d8 3000 	ldr.w	r3, [r8]
 80032a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80032aa:	3307      	adds	r3, #7
 80032ac:	f023 0307 	bic.w	r3, r3, #7
 80032b0:	f103 0208 	add.w	r2, r3, #8
 80032b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80032b8:	f8d4 b000 	ldr.w	fp, [r4]
 80032bc:	f8c8 2000 	str.w	r2, [r8]
 80032c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80032c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032ca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80032ce:	f04f 32ff 	mov.w	r2, #4294967295
 80032d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80032da:	4b9c      	ldr	r3, [pc, #624]	@ (800354c <_printf_float+0x2cc>)
 80032dc:	f7fd fb96 	bl	8000a0c <__aeabi_dcmpun>
 80032e0:	bb70      	cbnz	r0, 8003340 <_printf_float+0xc0>
 80032e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80032e6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ea:	4b98      	ldr	r3, [pc, #608]	@ (800354c <_printf_float+0x2cc>)
 80032ec:	f7fd fb70 	bl	80009d0 <__aeabi_dcmple>
 80032f0:	bb30      	cbnz	r0, 8003340 <_printf_float+0xc0>
 80032f2:	2200      	movs	r2, #0
 80032f4:	2300      	movs	r3, #0
 80032f6:	4640      	mov	r0, r8
 80032f8:	4649      	mov	r1, r9
 80032fa:	f7fd fb5f 	bl	80009bc <__aeabi_dcmplt>
 80032fe:	b110      	cbz	r0, 8003306 <_printf_float+0x86>
 8003300:	232d      	movs	r3, #45	@ 0x2d
 8003302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003306:	4a92      	ldr	r2, [pc, #584]	@ (8003550 <_printf_float+0x2d0>)
 8003308:	4b92      	ldr	r3, [pc, #584]	@ (8003554 <_printf_float+0x2d4>)
 800330a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800330e:	bf94      	ite	ls
 8003310:	4690      	movls	r8, r2
 8003312:	4698      	movhi	r8, r3
 8003314:	2303      	movs	r3, #3
 8003316:	f04f 0900 	mov.w	r9, #0
 800331a:	6123      	str	r3, [r4, #16]
 800331c:	f02b 0304 	bic.w	r3, fp, #4
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	4633      	mov	r3, r6
 8003324:	4621      	mov	r1, r4
 8003326:	4628      	mov	r0, r5
 8003328:	9700      	str	r7, [sp, #0]
 800332a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800332c:	f000 f9d4 	bl	80036d8 <_printf_common>
 8003330:	3001      	adds	r0, #1
 8003332:	f040 8090 	bne.w	8003456 <_printf_float+0x1d6>
 8003336:	f04f 30ff 	mov.w	r0, #4294967295
 800333a:	b011      	add	sp, #68	@ 0x44
 800333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	4640      	mov	r0, r8
 8003346:	4649      	mov	r1, r9
 8003348:	f7fd fb60 	bl	8000a0c <__aeabi_dcmpun>
 800334c:	b148      	cbz	r0, 8003362 <_printf_float+0xe2>
 800334e:	464b      	mov	r3, r9
 8003350:	2b00      	cmp	r3, #0
 8003352:	bfb8      	it	lt
 8003354:	232d      	movlt	r3, #45	@ 0x2d
 8003356:	4a80      	ldr	r2, [pc, #512]	@ (8003558 <_printf_float+0x2d8>)
 8003358:	bfb8      	it	lt
 800335a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800335e:	4b7f      	ldr	r3, [pc, #508]	@ (800355c <_printf_float+0x2dc>)
 8003360:	e7d3      	b.n	800330a <_printf_float+0x8a>
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	d13f      	bne.n	80033ec <_printf_float+0x16c>
 800336c:	2306      	movs	r3, #6
 800336e:	6063      	str	r3, [r4, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	9206      	str	r2, [sp, #24]
 800337a:	aa0e      	add	r2, sp, #56	@ 0x38
 800337c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003380:	aa0d      	add	r2, sp, #52	@ 0x34
 8003382:	9203      	str	r2, [sp, #12]
 8003384:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003388:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	4642      	mov	r2, r8
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	4628      	mov	r0, r5
 8003394:	464b      	mov	r3, r9
 8003396:	910a      	str	r1, [sp, #40]	@ 0x28
 8003398:	f7ff fed4 	bl	8003144 <__cvt>
 800339c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800339e:	4680      	mov	r8, r0
 80033a0:	2947      	cmp	r1, #71	@ 0x47
 80033a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80033a4:	d128      	bne.n	80033f8 <_printf_float+0x178>
 80033a6:	1cc8      	adds	r0, r1, #3
 80033a8:	db02      	blt.n	80033b0 <_printf_float+0x130>
 80033aa:	6863      	ldr	r3, [r4, #4]
 80033ac:	4299      	cmp	r1, r3
 80033ae:	dd40      	ble.n	8003432 <_printf_float+0x1b2>
 80033b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80033b4:	fa5f fa8a 	uxtb.w	sl, sl
 80033b8:	4652      	mov	r2, sl
 80033ba:	3901      	subs	r1, #1
 80033bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80033c0:	910d      	str	r1, [sp, #52]	@ 0x34
 80033c2:	f7ff ff23 	bl	800320c <__exponent>
 80033c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033c8:	4681      	mov	r9, r0
 80033ca:	1813      	adds	r3, r2, r0
 80033cc:	2a01      	cmp	r2, #1
 80033ce:	6123      	str	r3, [r4, #16]
 80033d0:	dc02      	bgt.n	80033d8 <_printf_float+0x158>
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	07d2      	lsls	r2, r2, #31
 80033d6:	d501      	bpl.n	80033dc <_printf_float+0x15c>
 80033d8:	3301      	adds	r3, #1
 80033da:	6123      	str	r3, [r4, #16]
 80033dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d09e      	beq.n	8003322 <_printf_float+0xa2>
 80033e4:	232d      	movs	r3, #45	@ 0x2d
 80033e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033ea:	e79a      	b.n	8003322 <_printf_float+0xa2>
 80033ec:	2947      	cmp	r1, #71	@ 0x47
 80033ee:	d1bf      	bne.n	8003370 <_printf_float+0xf0>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1bd      	bne.n	8003370 <_printf_float+0xf0>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e7ba      	b.n	800336e <_printf_float+0xee>
 80033f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80033fc:	d9dc      	bls.n	80033b8 <_printf_float+0x138>
 80033fe:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003402:	d118      	bne.n	8003436 <_printf_float+0x1b6>
 8003404:	2900      	cmp	r1, #0
 8003406:	6863      	ldr	r3, [r4, #4]
 8003408:	dd0b      	ble.n	8003422 <_printf_float+0x1a2>
 800340a:	6121      	str	r1, [r4, #16]
 800340c:	b913      	cbnz	r3, 8003414 <_printf_float+0x194>
 800340e:	6822      	ldr	r2, [r4, #0]
 8003410:	07d0      	lsls	r0, r2, #31
 8003412:	d502      	bpl.n	800341a <_printf_float+0x19a>
 8003414:	3301      	adds	r3, #1
 8003416:	440b      	add	r3, r1
 8003418:	6123      	str	r3, [r4, #16]
 800341a:	f04f 0900 	mov.w	r9, #0
 800341e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003420:	e7dc      	b.n	80033dc <_printf_float+0x15c>
 8003422:	b913      	cbnz	r3, 800342a <_printf_float+0x1aa>
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	07d2      	lsls	r2, r2, #31
 8003428:	d501      	bpl.n	800342e <_printf_float+0x1ae>
 800342a:	3302      	adds	r3, #2
 800342c:	e7f4      	b.n	8003418 <_printf_float+0x198>
 800342e:	2301      	movs	r3, #1
 8003430:	e7f2      	b.n	8003418 <_printf_float+0x198>
 8003432:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003438:	4299      	cmp	r1, r3
 800343a:	db05      	blt.n	8003448 <_printf_float+0x1c8>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	6121      	str	r1, [r4, #16]
 8003440:	07d8      	lsls	r0, r3, #31
 8003442:	d5ea      	bpl.n	800341a <_printf_float+0x19a>
 8003444:	1c4b      	adds	r3, r1, #1
 8003446:	e7e7      	b.n	8003418 <_printf_float+0x198>
 8003448:	2900      	cmp	r1, #0
 800344a:	bfcc      	ite	gt
 800344c:	2201      	movgt	r2, #1
 800344e:	f1c1 0202 	rsble	r2, r1, #2
 8003452:	4413      	add	r3, r2
 8003454:	e7e0      	b.n	8003418 <_printf_float+0x198>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	055a      	lsls	r2, r3, #21
 800345a:	d407      	bmi.n	800346c <_printf_float+0x1ec>
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	4642      	mov	r2, r8
 8003460:	4631      	mov	r1, r6
 8003462:	4628      	mov	r0, r5
 8003464:	47b8      	blx	r7
 8003466:	3001      	adds	r0, #1
 8003468:	d12b      	bne.n	80034c2 <_printf_float+0x242>
 800346a:	e764      	b.n	8003336 <_printf_float+0xb6>
 800346c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003470:	f240 80dc 	bls.w	800362c <_printf_float+0x3ac>
 8003474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003478:	2200      	movs	r2, #0
 800347a:	2300      	movs	r3, #0
 800347c:	f7fd fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8003480:	2800      	cmp	r0, #0
 8003482:	d033      	beq.n	80034ec <_printf_float+0x26c>
 8003484:	2301      	movs	r3, #1
 8003486:	4631      	mov	r1, r6
 8003488:	4628      	mov	r0, r5
 800348a:	4a35      	ldr	r2, [pc, #212]	@ (8003560 <_printf_float+0x2e0>)
 800348c:	47b8      	blx	r7
 800348e:	3001      	adds	r0, #1
 8003490:	f43f af51 	beq.w	8003336 <_printf_float+0xb6>
 8003494:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003498:	4543      	cmp	r3, r8
 800349a:	db02      	blt.n	80034a2 <_printf_float+0x222>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	07d8      	lsls	r0, r3, #31
 80034a0:	d50f      	bpl.n	80034c2 <_printf_float+0x242>
 80034a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034a6:	4631      	mov	r1, r6
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b8      	blx	r7
 80034ac:	3001      	adds	r0, #1
 80034ae:	f43f af42 	beq.w	8003336 <_printf_float+0xb6>
 80034b2:	f04f 0900 	mov.w	r9, #0
 80034b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80034ba:	f104 0a1a 	add.w	sl, r4, #26
 80034be:	45c8      	cmp	r8, r9
 80034c0:	dc09      	bgt.n	80034d6 <_printf_float+0x256>
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	079b      	lsls	r3, r3, #30
 80034c6:	f100 8102 	bmi.w	80036ce <_printf_float+0x44e>
 80034ca:	68e0      	ldr	r0, [r4, #12]
 80034cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80034ce:	4298      	cmp	r0, r3
 80034d0:	bfb8      	it	lt
 80034d2:	4618      	movlt	r0, r3
 80034d4:	e731      	b.n	800333a <_printf_float+0xba>
 80034d6:	2301      	movs	r3, #1
 80034d8:	4652      	mov	r2, sl
 80034da:	4631      	mov	r1, r6
 80034dc:	4628      	mov	r0, r5
 80034de:	47b8      	blx	r7
 80034e0:	3001      	adds	r0, #1
 80034e2:	f43f af28 	beq.w	8003336 <_printf_float+0xb6>
 80034e6:	f109 0901 	add.w	r9, r9, #1
 80034ea:	e7e8      	b.n	80034be <_printf_float+0x23e>
 80034ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dc38      	bgt.n	8003564 <_printf_float+0x2e4>
 80034f2:	2301      	movs	r3, #1
 80034f4:	4631      	mov	r1, r6
 80034f6:	4628      	mov	r0, r5
 80034f8:	4a19      	ldr	r2, [pc, #100]	@ (8003560 <_printf_float+0x2e0>)
 80034fa:	47b8      	blx	r7
 80034fc:	3001      	adds	r0, #1
 80034fe:	f43f af1a 	beq.w	8003336 <_printf_float+0xb6>
 8003502:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003506:	ea59 0303 	orrs.w	r3, r9, r3
 800350a:	d102      	bne.n	8003512 <_printf_float+0x292>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	07d9      	lsls	r1, r3, #31
 8003510:	d5d7      	bpl.n	80034c2 <_printf_float+0x242>
 8003512:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003516:	4631      	mov	r1, r6
 8003518:	4628      	mov	r0, r5
 800351a:	47b8      	blx	r7
 800351c:	3001      	adds	r0, #1
 800351e:	f43f af0a 	beq.w	8003336 <_printf_float+0xb6>
 8003522:	f04f 0a00 	mov.w	sl, #0
 8003526:	f104 0b1a 	add.w	fp, r4, #26
 800352a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800352c:	425b      	negs	r3, r3
 800352e:	4553      	cmp	r3, sl
 8003530:	dc01      	bgt.n	8003536 <_printf_float+0x2b6>
 8003532:	464b      	mov	r3, r9
 8003534:	e793      	b.n	800345e <_printf_float+0x1de>
 8003536:	2301      	movs	r3, #1
 8003538:	465a      	mov	r2, fp
 800353a:	4631      	mov	r1, r6
 800353c:	4628      	mov	r0, r5
 800353e:	47b8      	blx	r7
 8003540:	3001      	adds	r0, #1
 8003542:	f43f aef8 	beq.w	8003336 <_printf_float+0xb6>
 8003546:	f10a 0a01 	add.w	sl, sl, #1
 800354a:	e7ee      	b.n	800352a <_printf_float+0x2aa>
 800354c:	7fefffff 	.word	0x7fefffff
 8003550:	080078ea 	.word	0x080078ea
 8003554:	080078ee 	.word	0x080078ee
 8003558:	080078f2 	.word	0x080078f2
 800355c:	080078f6 	.word	0x080078f6
 8003560:	080078fa 	.word	0x080078fa
 8003564:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003566:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800356a:	4553      	cmp	r3, sl
 800356c:	bfa8      	it	ge
 800356e:	4653      	movge	r3, sl
 8003570:	2b00      	cmp	r3, #0
 8003572:	4699      	mov	r9, r3
 8003574:	dc36      	bgt.n	80035e4 <_printf_float+0x364>
 8003576:	f04f 0b00 	mov.w	fp, #0
 800357a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800357e:	f104 021a 	add.w	r2, r4, #26
 8003582:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003584:	930a      	str	r3, [sp, #40]	@ 0x28
 8003586:	eba3 0309 	sub.w	r3, r3, r9
 800358a:	455b      	cmp	r3, fp
 800358c:	dc31      	bgt.n	80035f2 <_printf_float+0x372>
 800358e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003590:	459a      	cmp	sl, r3
 8003592:	dc3a      	bgt.n	800360a <_printf_float+0x38a>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	07da      	lsls	r2, r3, #31
 8003598:	d437      	bmi.n	800360a <_printf_float+0x38a>
 800359a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800359c:	ebaa 0903 	sub.w	r9, sl, r3
 80035a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80035a2:	ebaa 0303 	sub.w	r3, sl, r3
 80035a6:	4599      	cmp	r9, r3
 80035a8:	bfa8      	it	ge
 80035aa:	4699      	movge	r9, r3
 80035ac:	f1b9 0f00 	cmp.w	r9, #0
 80035b0:	dc33      	bgt.n	800361a <_printf_float+0x39a>
 80035b2:	f04f 0800 	mov.w	r8, #0
 80035b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035ba:	f104 0b1a 	add.w	fp, r4, #26
 80035be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035c0:	ebaa 0303 	sub.w	r3, sl, r3
 80035c4:	eba3 0309 	sub.w	r3, r3, r9
 80035c8:	4543      	cmp	r3, r8
 80035ca:	f77f af7a 	ble.w	80034c2 <_printf_float+0x242>
 80035ce:	2301      	movs	r3, #1
 80035d0:	465a      	mov	r2, fp
 80035d2:	4631      	mov	r1, r6
 80035d4:	4628      	mov	r0, r5
 80035d6:	47b8      	blx	r7
 80035d8:	3001      	adds	r0, #1
 80035da:	f43f aeac 	beq.w	8003336 <_printf_float+0xb6>
 80035de:	f108 0801 	add.w	r8, r8, #1
 80035e2:	e7ec      	b.n	80035be <_printf_float+0x33e>
 80035e4:	4642      	mov	r2, r8
 80035e6:	4631      	mov	r1, r6
 80035e8:	4628      	mov	r0, r5
 80035ea:	47b8      	blx	r7
 80035ec:	3001      	adds	r0, #1
 80035ee:	d1c2      	bne.n	8003576 <_printf_float+0x2f6>
 80035f0:	e6a1      	b.n	8003336 <_printf_float+0xb6>
 80035f2:	2301      	movs	r3, #1
 80035f4:	4631      	mov	r1, r6
 80035f6:	4628      	mov	r0, r5
 80035f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80035fa:	47b8      	blx	r7
 80035fc:	3001      	adds	r0, #1
 80035fe:	f43f ae9a 	beq.w	8003336 <_printf_float+0xb6>
 8003602:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003604:	f10b 0b01 	add.w	fp, fp, #1
 8003608:	e7bb      	b.n	8003582 <_printf_float+0x302>
 800360a:	4631      	mov	r1, r6
 800360c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003610:	4628      	mov	r0, r5
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	d1c0      	bne.n	800359a <_printf_float+0x31a>
 8003618:	e68d      	b.n	8003336 <_printf_float+0xb6>
 800361a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800361c:	464b      	mov	r3, r9
 800361e:	4631      	mov	r1, r6
 8003620:	4628      	mov	r0, r5
 8003622:	4442      	add	r2, r8
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	d1c3      	bne.n	80035b2 <_printf_float+0x332>
 800362a:	e684      	b.n	8003336 <_printf_float+0xb6>
 800362c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003630:	f1ba 0f01 	cmp.w	sl, #1
 8003634:	dc01      	bgt.n	800363a <_printf_float+0x3ba>
 8003636:	07db      	lsls	r3, r3, #31
 8003638:	d536      	bpl.n	80036a8 <_printf_float+0x428>
 800363a:	2301      	movs	r3, #1
 800363c:	4642      	mov	r2, r8
 800363e:	4631      	mov	r1, r6
 8003640:	4628      	mov	r0, r5
 8003642:	47b8      	blx	r7
 8003644:	3001      	adds	r0, #1
 8003646:	f43f ae76 	beq.w	8003336 <_printf_float+0xb6>
 800364a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	47b8      	blx	r7
 8003654:	3001      	adds	r0, #1
 8003656:	f43f ae6e 	beq.w	8003336 <_printf_float+0xb6>
 800365a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800365e:	2200      	movs	r2, #0
 8003660:	2300      	movs	r3, #0
 8003662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003666:	f7fd f99f 	bl	80009a8 <__aeabi_dcmpeq>
 800366a:	b9c0      	cbnz	r0, 800369e <_printf_float+0x41e>
 800366c:	4653      	mov	r3, sl
 800366e:	f108 0201 	add.w	r2, r8, #1
 8003672:	4631      	mov	r1, r6
 8003674:	4628      	mov	r0, r5
 8003676:	47b8      	blx	r7
 8003678:	3001      	adds	r0, #1
 800367a:	d10c      	bne.n	8003696 <_printf_float+0x416>
 800367c:	e65b      	b.n	8003336 <_printf_float+0xb6>
 800367e:	2301      	movs	r3, #1
 8003680:	465a      	mov	r2, fp
 8003682:	4631      	mov	r1, r6
 8003684:	4628      	mov	r0, r5
 8003686:	47b8      	blx	r7
 8003688:	3001      	adds	r0, #1
 800368a:	f43f ae54 	beq.w	8003336 <_printf_float+0xb6>
 800368e:	f108 0801 	add.w	r8, r8, #1
 8003692:	45d0      	cmp	r8, sl
 8003694:	dbf3      	blt.n	800367e <_printf_float+0x3fe>
 8003696:	464b      	mov	r3, r9
 8003698:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800369c:	e6e0      	b.n	8003460 <_printf_float+0x1e0>
 800369e:	f04f 0800 	mov.w	r8, #0
 80036a2:	f104 0b1a 	add.w	fp, r4, #26
 80036a6:	e7f4      	b.n	8003692 <_printf_float+0x412>
 80036a8:	2301      	movs	r3, #1
 80036aa:	4642      	mov	r2, r8
 80036ac:	e7e1      	b.n	8003672 <_printf_float+0x3f2>
 80036ae:	2301      	movs	r3, #1
 80036b0:	464a      	mov	r2, r9
 80036b2:	4631      	mov	r1, r6
 80036b4:	4628      	mov	r0, r5
 80036b6:	47b8      	blx	r7
 80036b8:	3001      	adds	r0, #1
 80036ba:	f43f ae3c 	beq.w	8003336 <_printf_float+0xb6>
 80036be:	f108 0801 	add.w	r8, r8, #1
 80036c2:	68e3      	ldr	r3, [r4, #12]
 80036c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80036c6:	1a5b      	subs	r3, r3, r1
 80036c8:	4543      	cmp	r3, r8
 80036ca:	dcf0      	bgt.n	80036ae <_printf_float+0x42e>
 80036cc:	e6fd      	b.n	80034ca <_printf_float+0x24a>
 80036ce:	f04f 0800 	mov.w	r8, #0
 80036d2:	f104 0919 	add.w	r9, r4, #25
 80036d6:	e7f4      	b.n	80036c2 <_printf_float+0x442>

080036d8 <_printf_common>:
 80036d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036dc:	4616      	mov	r6, r2
 80036de:	4698      	mov	r8, r3
 80036e0:	688a      	ldr	r2, [r1, #8]
 80036e2:	690b      	ldr	r3, [r1, #16]
 80036e4:	4607      	mov	r7, r0
 80036e6:	4293      	cmp	r3, r2
 80036e8:	bfb8      	it	lt
 80036ea:	4613      	movlt	r3, r2
 80036ec:	6033      	str	r3, [r6, #0]
 80036ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036f2:	460c      	mov	r4, r1
 80036f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036f8:	b10a      	cbz	r2, 80036fe <_printf_common+0x26>
 80036fa:	3301      	adds	r3, #1
 80036fc:	6033      	str	r3, [r6, #0]
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	0699      	lsls	r1, r3, #26
 8003702:	bf42      	ittt	mi
 8003704:	6833      	ldrmi	r3, [r6, #0]
 8003706:	3302      	addmi	r3, #2
 8003708:	6033      	strmi	r3, [r6, #0]
 800370a:	6825      	ldr	r5, [r4, #0]
 800370c:	f015 0506 	ands.w	r5, r5, #6
 8003710:	d106      	bne.n	8003720 <_printf_common+0x48>
 8003712:	f104 0a19 	add.w	sl, r4, #25
 8003716:	68e3      	ldr	r3, [r4, #12]
 8003718:	6832      	ldr	r2, [r6, #0]
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	42ab      	cmp	r3, r5
 800371e:	dc2b      	bgt.n	8003778 <_printf_common+0xa0>
 8003720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	3b00      	subs	r3, #0
 8003728:	bf18      	it	ne
 800372a:	2301      	movne	r3, #1
 800372c:	0692      	lsls	r2, r2, #26
 800372e:	d430      	bmi.n	8003792 <_printf_common+0xba>
 8003730:	4641      	mov	r1, r8
 8003732:	4638      	mov	r0, r7
 8003734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003738:	47c8      	blx	r9
 800373a:	3001      	adds	r0, #1
 800373c:	d023      	beq.n	8003786 <_printf_common+0xae>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	6922      	ldr	r2, [r4, #16]
 8003742:	f003 0306 	and.w	r3, r3, #6
 8003746:	2b04      	cmp	r3, #4
 8003748:	bf14      	ite	ne
 800374a:	2500      	movne	r5, #0
 800374c:	6833      	ldreq	r3, [r6, #0]
 800374e:	f04f 0600 	mov.w	r6, #0
 8003752:	bf08      	it	eq
 8003754:	68e5      	ldreq	r5, [r4, #12]
 8003756:	f104 041a 	add.w	r4, r4, #26
 800375a:	bf08      	it	eq
 800375c:	1aed      	subeq	r5, r5, r3
 800375e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003762:	bf08      	it	eq
 8003764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003768:	4293      	cmp	r3, r2
 800376a:	bfc4      	itt	gt
 800376c:	1a9b      	subgt	r3, r3, r2
 800376e:	18ed      	addgt	r5, r5, r3
 8003770:	42b5      	cmp	r5, r6
 8003772:	d11a      	bne.n	80037aa <_printf_common+0xd2>
 8003774:	2000      	movs	r0, #0
 8003776:	e008      	b.n	800378a <_printf_common+0xb2>
 8003778:	2301      	movs	r3, #1
 800377a:	4652      	mov	r2, sl
 800377c:	4641      	mov	r1, r8
 800377e:	4638      	mov	r0, r7
 8003780:	47c8      	blx	r9
 8003782:	3001      	adds	r0, #1
 8003784:	d103      	bne.n	800378e <_printf_common+0xb6>
 8003786:	f04f 30ff 	mov.w	r0, #4294967295
 800378a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378e:	3501      	adds	r5, #1
 8003790:	e7c1      	b.n	8003716 <_printf_common+0x3e>
 8003792:	2030      	movs	r0, #48	@ 0x30
 8003794:	18e1      	adds	r1, r4, r3
 8003796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037a0:	4422      	add	r2, r4
 80037a2:	3302      	adds	r3, #2
 80037a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037a8:	e7c2      	b.n	8003730 <_printf_common+0x58>
 80037aa:	2301      	movs	r3, #1
 80037ac:	4622      	mov	r2, r4
 80037ae:	4641      	mov	r1, r8
 80037b0:	4638      	mov	r0, r7
 80037b2:	47c8      	blx	r9
 80037b4:	3001      	adds	r0, #1
 80037b6:	d0e6      	beq.n	8003786 <_printf_common+0xae>
 80037b8:	3601      	adds	r6, #1
 80037ba:	e7d9      	b.n	8003770 <_printf_common+0x98>

080037bc <_printf_i>:
 80037bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	7e0f      	ldrb	r7, [r1, #24]
 80037c2:	4691      	mov	r9, r2
 80037c4:	2f78      	cmp	r7, #120	@ 0x78
 80037c6:	4680      	mov	r8, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	469a      	mov	sl, r3
 80037cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037d2:	d807      	bhi.n	80037e4 <_printf_i+0x28>
 80037d4:	2f62      	cmp	r7, #98	@ 0x62
 80037d6:	d80a      	bhi.n	80037ee <_printf_i+0x32>
 80037d8:	2f00      	cmp	r7, #0
 80037da:	f000 80d3 	beq.w	8003984 <_printf_i+0x1c8>
 80037de:	2f58      	cmp	r7, #88	@ 0x58
 80037e0:	f000 80ba 	beq.w	8003958 <_printf_i+0x19c>
 80037e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037ec:	e03a      	b.n	8003864 <_printf_i+0xa8>
 80037ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037f2:	2b15      	cmp	r3, #21
 80037f4:	d8f6      	bhi.n	80037e4 <_printf_i+0x28>
 80037f6:	a101      	add	r1, pc, #4	@ (adr r1, 80037fc <_printf_i+0x40>)
 80037f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037fc:	08003855 	.word	0x08003855
 8003800:	08003869 	.word	0x08003869
 8003804:	080037e5 	.word	0x080037e5
 8003808:	080037e5 	.word	0x080037e5
 800380c:	080037e5 	.word	0x080037e5
 8003810:	080037e5 	.word	0x080037e5
 8003814:	08003869 	.word	0x08003869
 8003818:	080037e5 	.word	0x080037e5
 800381c:	080037e5 	.word	0x080037e5
 8003820:	080037e5 	.word	0x080037e5
 8003824:	080037e5 	.word	0x080037e5
 8003828:	0800396b 	.word	0x0800396b
 800382c:	08003893 	.word	0x08003893
 8003830:	08003925 	.word	0x08003925
 8003834:	080037e5 	.word	0x080037e5
 8003838:	080037e5 	.word	0x080037e5
 800383c:	0800398d 	.word	0x0800398d
 8003840:	080037e5 	.word	0x080037e5
 8003844:	08003893 	.word	0x08003893
 8003848:	080037e5 	.word	0x080037e5
 800384c:	080037e5 	.word	0x080037e5
 8003850:	0800392d 	.word	0x0800392d
 8003854:	6833      	ldr	r3, [r6, #0]
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6032      	str	r2, [r6, #0]
 800385c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003864:	2301      	movs	r3, #1
 8003866:	e09e      	b.n	80039a6 <_printf_i+0x1ea>
 8003868:	6833      	ldr	r3, [r6, #0]
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	1d19      	adds	r1, r3, #4
 800386e:	6031      	str	r1, [r6, #0]
 8003870:	0606      	lsls	r6, r0, #24
 8003872:	d501      	bpl.n	8003878 <_printf_i+0xbc>
 8003874:	681d      	ldr	r5, [r3, #0]
 8003876:	e003      	b.n	8003880 <_printf_i+0xc4>
 8003878:	0645      	lsls	r5, r0, #25
 800387a:	d5fb      	bpl.n	8003874 <_printf_i+0xb8>
 800387c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003880:	2d00      	cmp	r5, #0
 8003882:	da03      	bge.n	800388c <_printf_i+0xd0>
 8003884:	232d      	movs	r3, #45	@ 0x2d
 8003886:	426d      	negs	r5, r5
 8003888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800388c:	230a      	movs	r3, #10
 800388e:	4859      	ldr	r0, [pc, #356]	@ (80039f4 <_printf_i+0x238>)
 8003890:	e011      	b.n	80038b6 <_printf_i+0xfa>
 8003892:	6821      	ldr	r1, [r4, #0]
 8003894:	6833      	ldr	r3, [r6, #0]
 8003896:	0608      	lsls	r0, r1, #24
 8003898:	f853 5b04 	ldr.w	r5, [r3], #4
 800389c:	d402      	bmi.n	80038a4 <_printf_i+0xe8>
 800389e:	0649      	lsls	r1, r1, #25
 80038a0:	bf48      	it	mi
 80038a2:	b2ad      	uxthmi	r5, r5
 80038a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80038a6:	6033      	str	r3, [r6, #0]
 80038a8:	bf14      	ite	ne
 80038aa:	230a      	movne	r3, #10
 80038ac:	2308      	moveq	r3, #8
 80038ae:	4851      	ldr	r0, [pc, #324]	@ (80039f4 <_printf_i+0x238>)
 80038b0:	2100      	movs	r1, #0
 80038b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038b6:	6866      	ldr	r6, [r4, #4]
 80038b8:	2e00      	cmp	r6, #0
 80038ba:	bfa8      	it	ge
 80038bc:	6821      	ldrge	r1, [r4, #0]
 80038be:	60a6      	str	r6, [r4, #8]
 80038c0:	bfa4      	itt	ge
 80038c2:	f021 0104 	bicge.w	r1, r1, #4
 80038c6:	6021      	strge	r1, [r4, #0]
 80038c8:	b90d      	cbnz	r5, 80038ce <_printf_i+0x112>
 80038ca:	2e00      	cmp	r6, #0
 80038cc:	d04b      	beq.n	8003966 <_printf_i+0x1aa>
 80038ce:	4616      	mov	r6, r2
 80038d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80038d4:	fb03 5711 	mls	r7, r3, r1, r5
 80038d8:	5dc7      	ldrb	r7, [r0, r7]
 80038da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038de:	462f      	mov	r7, r5
 80038e0:	42bb      	cmp	r3, r7
 80038e2:	460d      	mov	r5, r1
 80038e4:	d9f4      	bls.n	80038d0 <_printf_i+0x114>
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d10b      	bne.n	8003902 <_printf_i+0x146>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	07df      	lsls	r7, r3, #31
 80038ee:	d508      	bpl.n	8003902 <_printf_i+0x146>
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	6861      	ldr	r1, [r4, #4]
 80038f4:	4299      	cmp	r1, r3
 80038f6:	bfde      	ittt	le
 80038f8:	2330      	movle	r3, #48	@ 0x30
 80038fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003902:	1b92      	subs	r2, r2, r6
 8003904:	6122      	str	r2, [r4, #16]
 8003906:	464b      	mov	r3, r9
 8003908:	4621      	mov	r1, r4
 800390a:	4640      	mov	r0, r8
 800390c:	f8cd a000 	str.w	sl, [sp]
 8003910:	aa03      	add	r2, sp, #12
 8003912:	f7ff fee1 	bl	80036d8 <_printf_common>
 8003916:	3001      	adds	r0, #1
 8003918:	d14a      	bne.n	80039b0 <_printf_i+0x1f4>
 800391a:	f04f 30ff 	mov.w	r0, #4294967295
 800391e:	b004      	add	sp, #16
 8003920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	f043 0320 	orr.w	r3, r3, #32
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	2778      	movs	r7, #120	@ 0x78
 800392e:	4832      	ldr	r0, [pc, #200]	@ (80039f8 <_printf_i+0x23c>)
 8003930:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	6831      	ldr	r1, [r6, #0]
 8003938:	061f      	lsls	r7, r3, #24
 800393a:	f851 5b04 	ldr.w	r5, [r1], #4
 800393e:	d402      	bmi.n	8003946 <_printf_i+0x18a>
 8003940:	065f      	lsls	r7, r3, #25
 8003942:	bf48      	it	mi
 8003944:	b2ad      	uxthmi	r5, r5
 8003946:	6031      	str	r1, [r6, #0]
 8003948:	07d9      	lsls	r1, r3, #31
 800394a:	bf44      	itt	mi
 800394c:	f043 0320 	orrmi.w	r3, r3, #32
 8003950:	6023      	strmi	r3, [r4, #0]
 8003952:	b11d      	cbz	r5, 800395c <_printf_i+0x1a0>
 8003954:	2310      	movs	r3, #16
 8003956:	e7ab      	b.n	80038b0 <_printf_i+0xf4>
 8003958:	4826      	ldr	r0, [pc, #152]	@ (80039f4 <_printf_i+0x238>)
 800395a:	e7e9      	b.n	8003930 <_printf_i+0x174>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	f023 0320 	bic.w	r3, r3, #32
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	e7f6      	b.n	8003954 <_printf_i+0x198>
 8003966:	4616      	mov	r6, r2
 8003968:	e7bd      	b.n	80038e6 <_printf_i+0x12a>
 800396a:	6833      	ldr	r3, [r6, #0]
 800396c:	6825      	ldr	r5, [r4, #0]
 800396e:	1d18      	adds	r0, r3, #4
 8003970:	6961      	ldr	r1, [r4, #20]
 8003972:	6030      	str	r0, [r6, #0]
 8003974:	062e      	lsls	r6, r5, #24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	d501      	bpl.n	800397e <_printf_i+0x1c2>
 800397a:	6019      	str	r1, [r3, #0]
 800397c:	e002      	b.n	8003984 <_printf_i+0x1c8>
 800397e:	0668      	lsls	r0, r5, #25
 8003980:	d5fb      	bpl.n	800397a <_printf_i+0x1be>
 8003982:	8019      	strh	r1, [r3, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	4616      	mov	r6, r2
 8003988:	6123      	str	r3, [r4, #16]
 800398a:	e7bc      	b.n	8003906 <_printf_i+0x14a>
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	2100      	movs	r1, #0
 8003990:	1d1a      	adds	r2, r3, #4
 8003992:	6032      	str	r2, [r6, #0]
 8003994:	681e      	ldr	r6, [r3, #0]
 8003996:	6862      	ldr	r2, [r4, #4]
 8003998:	4630      	mov	r0, r6
 800399a:	f000 fbe4 	bl	8004166 <memchr>
 800399e:	b108      	cbz	r0, 80039a4 <_printf_i+0x1e8>
 80039a0:	1b80      	subs	r0, r0, r6
 80039a2:	6060      	str	r0, [r4, #4]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	6123      	str	r3, [r4, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039ae:	e7aa      	b.n	8003906 <_printf_i+0x14a>
 80039b0:	4632      	mov	r2, r6
 80039b2:	4649      	mov	r1, r9
 80039b4:	4640      	mov	r0, r8
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	47d0      	blx	sl
 80039ba:	3001      	adds	r0, #1
 80039bc:	d0ad      	beq.n	800391a <_printf_i+0x15e>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	079b      	lsls	r3, r3, #30
 80039c2:	d413      	bmi.n	80039ec <_printf_i+0x230>
 80039c4:	68e0      	ldr	r0, [r4, #12]
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	4298      	cmp	r0, r3
 80039ca:	bfb8      	it	lt
 80039cc:	4618      	movlt	r0, r3
 80039ce:	e7a6      	b.n	800391e <_printf_i+0x162>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4632      	mov	r2, r6
 80039d4:	4649      	mov	r1, r9
 80039d6:	4640      	mov	r0, r8
 80039d8:	47d0      	blx	sl
 80039da:	3001      	adds	r0, #1
 80039dc:	d09d      	beq.n	800391a <_printf_i+0x15e>
 80039de:	3501      	adds	r5, #1
 80039e0:	68e3      	ldr	r3, [r4, #12]
 80039e2:	9903      	ldr	r1, [sp, #12]
 80039e4:	1a5b      	subs	r3, r3, r1
 80039e6:	42ab      	cmp	r3, r5
 80039e8:	dcf2      	bgt.n	80039d0 <_printf_i+0x214>
 80039ea:	e7eb      	b.n	80039c4 <_printf_i+0x208>
 80039ec:	2500      	movs	r5, #0
 80039ee:	f104 0619 	add.w	r6, r4, #25
 80039f2:	e7f5      	b.n	80039e0 <_printf_i+0x224>
 80039f4:	080078fc 	.word	0x080078fc
 80039f8:	0800790d 	.word	0x0800790d

080039fc <_scanf_float>:
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	b087      	sub	sp, #28
 8003a02:	9303      	str	r3, [sp, #12]
 8003a04:	688b      	ldr	r3, [r1, #8]
 8003a06:	4617      	mov	r7, r2
 8003a08:	1e5a      	subs	r2, r3, #1
 8003a0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003a0e:	bf82      	ittt	hi
 8003a10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003a14:	eb03 0b05 	addhi.w	fp, r3, r5
 8003a18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	f04f 0500 	mov.w	r5, #0
 8003a22:	bf88      	it	hi
 8003a24:	608b      	strhi	r3, [r1, #8]
 8003a26:	680b      	ldr	r3, [r1, #0]
 8003a28:	4680      	mov	r8, r0
 8003a2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003a2e:	f842 3b1c 	str.w	r3, [r2], #28
 8003a32:	460c      	mov	r4, r1
 8003a34:	bf98      	it	ls
 8003a36:	f04f 0b00 	movls.w	fp, #0
 8003a3a:	4616      	mov	r6, r2
 8003a3c:	46aa      	mov	sl, r5
 8003a3e:	46a9      	mov	r9, r5
 8003a40:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a44:	9201      	str	r2, [sp, #4]
 8003a46:	9502      	str	r5, [sp, #8]
 8003a48:	68a2      	ldr	r2, [r4, #8]
 8003a4a:	b152      	cbz	r2, 8003a62 <_scanf_float+0x66>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a52:	d865      	bhi.n	8003b20 <_scanf_float+0x124>
 8003a54:	2b40      	cmp	r3, #64	@ 0x40
 8003a56:	d83d      	bhi.n	8003ad4 <_scanf_float+0xd8>
 8003a58:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003a5c:	b2c8      	uxtb	r0, r1
 8003a5e:	280e      	cmp	r0, #14
 8003a60:	d93b      	bls.n	8003ada <_scanf_float+0xde>
 8003a62:	f1b9 0f00 	cmp.w	r9, #0
 8003a66:	d003      	beq.n	8003a70 <_scanf_float+0x74>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a6e:	6023      	str	r3, [r4, #0]
 8003a70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a74:	f1ba 0f01 	cmp.w	sl, #1
 8003a78:	f200 8118 	bhi.w	8003cac <_scanf_float+0x2b0>
 8003a7c:	9b01      	ldr	r3, [sp, #4]
 8003a7e:	429e      	cmp	r6, r3
 8003a80:	f200 8109 	bhi.w	8003c96 <_scanf_float+0x29a>
 8003a84:	2001      	movs	r0, #1
 8003a86:	b007      	add	sp, #28
 8003a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003a90:	2a0d      	cmp	r2, #13
 8003a92:	d8e6      	bhi.n	8003a62 <_scanf_float+0x66>
 8003a94:	a101      	add	r1, pc, #4	@ (adr r1, 8003a9c <_scanf_float+0xa0>)
 8003a96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003be3 	.word	0x08003be3
 8003aa0:	08003a63 	.word	0x08003a63
 8003aa4:	08003a63 	.word	0x08003a63
 8003aa8:	08003a63 	.word	0x08003a63
 8003aac:	08003c43 	.word	0x08003c43
 8003ab0:	08003c1b 	.word	0x08003c1b
 8003ab4:	08003a63 	.word	0x08003a63
 8003ab8:	08003a63 	.word	0x08003a63
 8003abc:	08003bf1 	.word	0x08003bf1
 8003ac0:	08003a63 	.word	0x08003a63
 8003ac4:	08003a63 	.word	0x08003a63
 8003ac8:	08003a63 	.word	0x08003a63
 8003acc:	08003a63 	.word	0x08003a63
 8003ad0:	08003ba9 	.word	0x08003ba9
 8003ad4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003ad8:	e7da      	b.n	8003a90 <_scanf_float+0x94>
 8003ada:	290e      	cmp	r1, #14
 8003adc:	d8c1      	bhi.n	8003a62 <_scanf_float+0x66>
 8003ade:	a001      	add	r0, pc, #4	@ (adr r0, 8003ae4 <_scanf_float+0xe8>)
 8003ae0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003ae4:	08003b99 	.word	0x08003b99
 8003ae8:	08003a63 	.word	0x08003a63
 8003aec:	08003b99 	.word	0x08003b99
 8003af0:	08003c2f 	.word	0x08003c2f
 8003af4:	08003a63 	.word	0x08003a63
 8003af8:	08003b41 	.word	0x08003b41
 8003afc:	08003b7f 	.word	0x08003b7f
 8003b00:	08003b7f 	.word	0x08003b7f
 8003b04:	08003b7f 	.word	0x08003b7f
 8003b08:	08003b7f 	.word	0x08003b7f
 8003b0c:	08003b7f 	.word	0x08003b7f
 8003b10:	08003b7f 	.word	0x08003b7f
 8003b14:	08003b7f 	.word	0x08003b7f
 8003b18:	08003b7f 	.word	0x08003b7f
 8003b1c:	08003b7f 	.word	0x08003b7f
 8003b20:	2b6e      	cmp	r3, #110	@ 0x6e
 8003b22:	d809      	bhi.n	8003b38 <_scanf_float+0x13c>
 8003b24:	2b60      	cmp	r3, #96	@ 0x60
 8003b26:	d8b1      	bhi.n	8003a8c <_scanf_float+0x90>
 8003b28:	2b54      	cmp	r3, #84	@ 0x54
 8003b2a:	d07b      	beq.n	8003c24 <_scanf_float+0x228>
 8003b2c:	2b59      	cmp	r3, #89	@ 0x59
 8003b2e:	d198      	bne.n	8003a62 <_scanf_float+0x66>
 8003b30:	2d07      	cmp	r5, #7
 8003b32:	d196      	bne.n	8003a62 <_scanf_float+0x66>
 8003b34:	2508      	movs	r5, #8
 8003b36:	e02c      	b.n	8003b92 <_scanf_float+0x196>
 8003b38:	2b74      	cmp	r3, #116	@ 0x74
 8003b3a:	d073      	beq.n	8003c24 <_scanf_float+0x228>
 8003b3c:	2b79      	cmp	r3, #121	@ 0x79
 8003b3e:	e7f6      	b.n	8003b2e <_scanf_float+0x132>
 8003b40:	6821      	ldr	r1, [r4, #0]
 8003b42:	05c8      	lsls	r0, r1, #23
 8003b44:	d51b      	bpl.n	8003b7e <_scanf_float+0x182>
 8003b46:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003b4a:	6021      	str	r1, [r4, #0]
 8003b4c:	f109 0901 	add.w	r9, r9, #1
 8003b50:	f1bb 0f00 	cmp.w	fp, #0
 8003b54:	d003      	beq.n	8003b5e <_scanf_float+0x162>
 8003b56:	3201      	adds	r2, #1
 8003b58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003b5c:	60a2      	str	r2, [r4, #8]
 8003b5e:	68a3      	ldr	r3, [r4, #8]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	60a3      	str	r3, [r4, #8]
 8003b64:	6923      	ldr	r3, [r4, #16]
 8003b66:	3301      	adds	r3, #1
 8003b68:	6123      	str	r3, [r4, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	f340 8087 	ble.w	8003c84 <_scanf_float+0x288>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	e764      	b.n	8003a48 <_scanf_float+0x4c>
 8003b7e:	eb1a 0105 	adds.w	r1, sl, r5
 8003b82:	f47f af6e 	bne.w	8003a62 <_scanf_float+0x66>
 8003b86:	460d      	mov	r5, r1
 8003b88:	468a      	mov	sl, r1
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003b90:	6022      	str	r2, [r4, #0]
 8003b92:	f806 3b01 	strb.w	r3, [r6], #1
 8003b96:	e7e2      	b.n	8003b5e <_scanf_float+0x162>
 8003b98:	6822      	ldr	r2, [r4, #0]
 8003b9a:	0610      	lsls	r0, r2, #24
 8003b9c:	f57f af61 	bpl.w	8003a62 <_scanf_float+0x66>
 8003ba0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ba4:	6022      	str	r2, [r4, #0]
 8003ba6:	e7f4      	b.n	8003b92 <_scanf_float+0x196>
 8003ba8:	f1ba 0f00 	cmp.w	sl, #0
 8003bac:	d10e      	bne.n	8003bcc <_scanf_float+0x1d0>
 8003bae:	f1b9 0f00 	cmp.w	r9, #0
 8003bb2:	d10e      	bne.n	8003bd2 <_scanf_float+0x1d6>
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003bba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003bbe:	d108      	bne.n	8003bd2 <_scanf_float+0x1d6>
 8003bc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003bc4:	f04f 0a01 	mov.w	sl, #1
 8003bc8:	6022      	str	r2, [r4, #0]
 8003bca:	e7e2      	b.n	8003b92 <_scanf_float+0x196>
 8003bcc:	f1ba 0f02 	cmp.w	sl, #2
 8003bd0:	d055      	beq.n	8003c7e <_scanf_float+0x282>
 8003bd2:	2d01      	cmp	r5, #1
 8003bd4:	d002      	beq.n	8003bdc <_scanf_float+0x1e0>
 8003bd6:	2d04      	cmp	r5, #4
 8003bd8:	f47f af43 	bne.w	8003a62 <_scanf_float+0x66>
 8003bdc:	3501      	adds	r5, #1
 8003bde:	b2ed      	uxtb	r5, r5
 8003be0:	e7d7      	b.n	8003b92 <_scanf_float+0x196>
 8003be2:	f1ba 0f01 	cmp.w	sl, #1
 8003be6:	f47f af3c 	bne.w	8003a62 <_scanf_float+0x66>
 8003bea:	f04f 0a02 	mov.w	sl, #2
 8003bee:	e7d0      	b.n	8003b92 <_scanf_float+0x196>
 8003bf0:	b97d      	cbnz	r5, 8003c12 <_scanf_float+0x216>
 8003bf2:	f1b9 0f00 	cmp.w	r9, #0
 8003bf6:	f47f af37 	bne.w	8003a68 <_scanf_float+0x6c>
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003c00:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003c04:	f040 8103 	bne.w	8003e0e <_scanf_float+0x412>
 8003c08:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c0c:	2501      	movs	r5, #1
 8003c0e:	6022      	str	r2, [r4, #0]
 8003c10:	e7bf      	b.n	8003b92 <_scanf_float+0x196>
 8003c12:	2d03      	cmp	r5, #3
 8003c14:	d0e2      	beq.n	8003bdc <_scanf_float+0x1e0>
 8003c16:	2d05      	cmp	r5, #5
 8003c18:	e7de      	b.n	8003bd8 <_scanf_float+0x1dc>
 8003c1a:	2d02      	cmp	r5, #2
 8003c1c:	f47f af21 	bne.w	8003a62 <_scanf_float+0x66>
 8003c20:	2503      	movs	r5, #3
 8003c22:	e7b6      	b.n	8003b92 <_scanf_float+0x196>
 8003c24:	2d06      	cmp	r5, #6
 8003c26:	f47f af1c 	bne.w	8003a62 <_scanf_float+0x66>
 8003c2a:	2507      	movs	r5, #7
 8003c2c:	e7b1      	b.n	8003b92 <_scanf_float+0x196>
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	0591      	lsls	r1, r2, #22
 8003c32:	f57f af16 	bpl.w	8003a62 <_scanf_float+0x66>
 8003c36:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003c3a:	6022      	str	r2, [r4, #0]
 8003c3c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003c40:	e7a7      	b.n	8003b92 <_scanf_float+0x196>
 8003c42:	6822      	ldr	r2, [r4, #0]
 8003c44:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003c48:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003c4c:	d006      	beq.n	8003c5c <_scanf_float+0x260>
 8003c4e:	0550      	lsls	r0, r2, #21
 8003c50:	f57f af07 	bpl.w	8003a62 <_scanf_float+0x66>
 8003c54:	f1b9 0f00 	cmp.w	r9, #0
 8003c58:	f000 80d9 	beq.w	8003e0e <_scanf_float+0x412>
 8003c5c:	0591      	lsls	r1, r2, #22
 8003c5e:	bf58      	it	pl
 8003c60:	9902      	ldrpl	r1, [sp, #8]
 8003c62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003c66:	bf58      	it	pl
 8003c68:	eba9 0101 	subpl.w	r1, r9, r1
 8003c6c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003c70:	f04f 0900 	mov.w	r9, #0
 8003c74:	bf58      	it	pl
 8003c76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c7a:	6022      	str	r2, [r4, #0]
 8003c7c:	e789      	b.n	8003b92 <_scanf_float+0x196>
 8003c7e:	f04f 0a03 	mov.w	sl, #3
 8003c82:	e786      	b.n	8003b92 <_scanf_float+0x196>
 8003c84:	4639      	mov	r1, r7
 8003c86:	4640      	mov	r0, r8
 8003c88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003c8c:	4798      	blx	r3
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	f43f aeda 	beq.w	8003a48 <_scanf_float+0x4c>
 8003c94:	e6e5      	b.n	8003a62 <_scanf_float+0x66>
 8003c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003c9a:	463a      	mov	r2, r7
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ca2:	4798      	blx	r3
 8003ca4:	6923      	ldr	r3, [r4, #16]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	6123      	str	r3, [r4, #16]
 8003caa:	e6e7      	b.n	8003a7c <_scanf_float+0x80>
 8003cac:	1e6b      	subs	r3, r5, #1
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d824      	bhi.n	8003cfc <_scanf_float+0x300>
 8003cb2:	2d02      	cmp	r5, #2
 8003cb4:	d836      	bhi.n	8003d24 <_scanf_float+0x328>
 8003cb6:	9b01      	ldr	r3, [sp, #4]
 8003cb8:	429e      	cmp	r6, r3
 8003cba:	f67f aee3 	bls.w	8003a84 <_scanf_float+0x88>
 8003cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cc2:	463a      	mov	r2, r7
 8003cc4:	4640      	mov	r0, r8
 8003cc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cca:	4798      	blx	r3
 8003ccc:	6923      	ldr	r3, [r4, #16]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	6123      	str	r3, [r4, #16]
 8003cd2:	e7f0      	b.n	8003cb6 <_scanf_float+0x2ba>
 8003cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003cd8:	463a      	mov	r2, r7
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003ce0:	4798      	blx	r3
 8003ce2:	6923      	ldr	r3, [r4, #16]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cec:	fa5f fa8a 	uxtb.w	sl, sl
 8003cf0:	f1ba 0f02 	cmp.w	sl, #2
 8003cf4:	d1ee      	bne.n	8003cd4 <_scanf_float+0x2d8>
 8003cf6:	3d03      	subs	r5, #3
 8003cf8:	b2ed      	uxtb	r5, r5
 8003cfa:	1b76      	subs	r6, r6, r5
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	05da      	lsls	r2, r3, #23
 8003d00:	d530      	bpl.n	8003d64 <_scanf_float+0x368>
 8003d02:	055b      	lsls	r3, r3, #21
 8003d04:	d511      	bpl.n	8003d2a <_scanf_float+0x32e>
 8003d06:	9b01      	ldr	r3, [sp, #4]
 8003d08:	429e      	cmp	r6, r3
 8003d0a:	f67f aebb 	bls.w	8003a84 <_scanf_float+0x88>
 8003d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d12:	463a      	mov	r2, r7
 8003d14:	4640      	mov	r0, r8
 8003d16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d1a:	4798      	blx	r3
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	6123      	str	r3, [r4, #16]
 8003d22:	e7f0      	b.n	8003d06 <_scanf_float+0x30a>
 8003d24:	46aa      	mov	sl, r5
 8003d26:	46b3      	mov	fp, r6
 8003d28:	e7de      	b.n	8003ce8 <_scanf_float+0x2ec>
 8003d2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d2e:	6923      	ldr	r3, [r4, #16]
 8003d30:	2965      	cmp	r1, #101	@ 0x65
 8003d32:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d36:	f106 35ff 	add.w	r5, r6, #4294967295
 8003d3a:	6123      	str	r3, [r4, #16]
 8003d3c:	d00c      	beq.n	8003d58 <_scanf_float+0x35c>
 8003d3e:	2945      	cmp	r1, #69	@ 0x45
 8003d40:	d00a      	beq.n	8003d58 <_scanf_float+0x35c>
 8003d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d46:	463a      	mov	r2, r7
 8003d48:	4640      	mov	r0, r8
 8003d4a:	4798      	blx	r3
 8003d4c:	6923      	ldr	r3, [r4, #16]
 8003d4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	1eb5      	subs	r5, r6, #2
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	463a      	mov	r2, r7
 8003d5a:	4640      	mov	r0, r8
 8003d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003d60:	4798      	blx	r3
 8003d62:	462e      	mov	r6, r5
 8003d64:	6822      	ldr	r2, [r4, #0]
 8003d66:	f012 0210 	ands.w	r2, r2, #16
 8003d6a:	d001      	beq.n	8003d70 <_scanf_float+0x374>
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e68a      	b.n	8003a86 <_scanf_float+0x8a>
 8003d70:	7032      	strb	r2, [r6, #0]
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d7c:	d11c      	bne.n	8003db8 <_scanf_float+0x3bc>
 8003d7e:	9b02      	ldr	r3, [sp, #8]
 8003d80:	454b      	cmp	r3, r9
 8003d82:	eba3 0209 	sub.w	r2, r3, r9
 8003d86:	d123      	bne.n	8003dd0 <_scanf_float+0x3d4>
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	9901      	ldr	r1, [sp, #4]
 8003d8e:	f002 fbef 	bl	8006570 <_strtod_r>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	6825      	ldr	r5, [r4, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f015 0f02 	tst.w	r5, #2
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	460f      	mov	r7, r1
 8003da0:	f103 0204 	add.w	r2, r3, #4
 8003da4:	d01f      	beq.n	8003de6 <_scanf_float+0x3ea>
 8003da6:	9903      	ldr	r1, [sp, #12]
 8003da8:	600a      	str	r2, [r1, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	e9c3 6700 	strd	r6, r7, [r3]
 8003db0:	68e3      	ldr	r3, [r4, #12]
 8003db2:	3301      	adds	r3, #1
 8003db4:	60e3      	str	r3, [r4, #12]
 8003db6:	e7d9      	b.n	8003d6c <_scanf_float+0x370>
 8003db8:	9b04      	ldr	r3, [sp, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0e4      	beq.n	8003d88 <_scanf_float+0x38c>
 8003dbe:	9905      	ldr	r1, [sp, #20]
 8003dc0:	230a      	movs	r3, #10
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	3101      	adds	r1, #1
 8003dc6:	f002 fc53 	bl	8006670 <_strtol_r>
 8003dca:	9b04      	ldr	r3, [sp, #16]
 8003dcc:	9e05      	ldr	r6, [sp, #20]
 8003dce:	1ac2      	subs	r2, r0, r3
 8003dd0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003dd4:	429e      	cmp	r6, r3
 8003dd6:	bf28      	it	cs
 8003dd8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003ddc:	4630      	mov	r0, r6
 8003dde:	490d      	ldr	r1, [pc, #52]	@ (8003e14 <_scanf_float+0x418>)
 8003de0:	f000 f8de 	bl	8003fa0 <siprintf>
 8003de4:	e7d0      	b.n	8003d88 <_scanf_float+0x38c>
 8003de6:	076d      	lsls	r5, r5, #29
 8003de8:	d4dd      	bmi.n	8003da6 <_scanf_float+0x3aa>
 8003dea:	9d03      	ldr	r5, [sp, #12]
 8003dec:	602a      	str	r2, [r5, #0]
 8003dee:	681d      	ldr	r5, [r3, #0]
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	f7fc fe0a 	bl	8000a0c <__aeabi_dcmpun>
 8003df8:	b120      	cbz	r0, 8003e04 <_scanf_float+0x408>
 8003dfa:	4807      	ldr	r0, [pc, #28]	@ (8003e18 <_scanf_float+0x41c>)
 8003dfc:	f000 f9c2 	bl	8004184 <nanf>
 8003e00:	6028      	str	r0, [r5, #0]
 8003e02:	e7d5      	b.n	8003db0 <_scanf_float+0x3b4>
 8003e04:	4630      	mov	r0, r6
 8003e06:	4639      	mov	r1, r7
 8003e08:	f7fc fe5e 	bl	8000ac8 <__aeabi_d2f>
 8003e0c:	e7f8      	b.n	8003e00 <_scanf_float+0x404>
 8003e0e:	f04f 0900 	mov.w	r9, #0
 8003e12:	e62d      	b.n	8003a70 <_scanf_float+0x74>
 8003e14:	0800791e 	.word	0x0800791e
 8003e18:	08007cb5 	.word	0x08007cb5

08003e1c <std>:
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	b510      	push	{r4, lr}
 8003e20:	4604      	mov	r4, r0
 8003e22:	e9c0 3300 	strd	r3, r3, [r0]
 8003e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e2a:	6083      	str	r3, [r0, #8]
 8003e2c:	8181      	strh	r1, [r0, #12]
 8003e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e30:	81c2      	strh	r2, [r0, #14]
 8003e32:	6183      	str	r3, [r0, #24]
 8003e34:	4619      	mov	r1, r3
 8003e36:	2208      	movs	r2, #8
 8003e38:	305c      	adds	r0, #92	@ 0x5c
 8003e3a:	f000 f914 	bl	8004066 <memset>
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <std+0x58>)
 8003e40:	6224      	str	r4, [r4, #32]
 8003e42:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <std+0x5c>)
 8003e46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e48:	4b0c      	ldr	r3, [pc, #48]	@ (8003e7c <std+0x60>)
 8003e4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <std+0x64>)
 8003e4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e50:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <std+0x68>)
 8003e52:	429c      	cmp	r4, r3
 8003e54:	d006      	beq.n	8003e64 <std+0x48>
 8003e56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e5a:	4294      	cmp	r4, r2
 8003e5c:	d002      	beq.n	8003e64 <std+0x48>
 8003e5e:	33d0      	adds	r3, #208	@ 0xd0
 8003e60:	429c      	cmp	r4, r3
 8003e62:	d105      	bne.n	8003e70 <std+0x54>
 8003e64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e6c:	f000 b978 	b.w	8004160 <__retarget_lock_init_recursive>
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	bf00      	nop
 8003e74:	08003fe1 	.word	0x08003fe1
 8003e78:	08004003 	.word	0x08004003
 8003e7c:	0800403b 	.word	0x0800403b
 8003e80:	0800405f 	.word	0x0800405f
 8003e84:	20000290 	.word	0x20000290

08003e88 <stdio_exit_handler>:
 8003e88:	4a02      	ldr	r2, [pc, #8]	@ (8003e94 <stdio_exit_handler+0xc>)
 8003e8a:	4903      	ldr	r1, [pc, #12]	@ (8003e98 <stdio_exit_handler+0x10>)
 8003e8c:	4803      	ldr	r0, [pc, #12]	@ (8003e9c <stdio_exit_handler+0x14>)
 8003e8e:	f000 b869 	b.w	8003f64 <_fwalk_sglue>
 8003e92:	bf00      	nop
 8003e94:	2000000c 	.word	0x2000000c
 8003e98:	08006a25 	.word	0x08006a25
 8003e9c:	2000001c 	.word	0x2000001c

08003ea0 <cleanup_stdio>:
 8003ea0:	6841      	ldr	r1, [r0, #4]
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <cleanup_stdio+0x34>)
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	d001      	beq.n	8003eb0 <cleanup_stdio+0x10>
 8003eac:	f002 fdba 	bl	8006a24 <_fflush_r>
 8003eb0:	68a1      	ldr	r1, [r4, #8]
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <cleanup_stdio+0x38>)
 8003eb4:	4299      	cmp	r1, r3
 8003eb6:	d002      	beq.n	8003ebe <cleanup_stdio+0x1e>
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f002 fdb3 	bl	8006a24 <_fflush_r>
 8003ebe:	68e1      	ldr	r1, [r4, #12]
 8003ec0:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <cleanup_stdio+0x3c>)
 8003ec2:	4299      	cmp	r1, r3
 8003ec4:	d004      	beq.n	8003ed0 <cleanup_stdio+0x30>
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ecc:	f002 bdaa 	b.w	8006a24 <_fflush_r>
 8003ed0:	bd10      	pop	{r4, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000290 	.word	0x20000290
 8003ed8:	200002f8 	.word	0x200002f8
 8003edc:	20000360 	.word	0x20000360

08003ee0 <global_stdio_init.part.0>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <global_stdio_init.part.0+0x30>)
 8003ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8003f14 <global_stdio_init.part.0+0x34>)
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <global_stdio_init.part.0+0x38>)
 8003ee8:	4620      	mov	r0, r4
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	2104      	movs	r1, #4
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f7ff ff94 	bl	8003e1c <std>
 8003ef4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2109      	movs	r1, #9
 8003efc:	f7ff ff8e 	bl	8003e1c <std>
 8003f00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f04:	2202      	movs	r2, #2
 8003f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f0a:	2112      	movs	r1, #18
 8003f0c:	f7ff bf86 	b.w	8003e1c <std>
 8003f10:	200003c8 	.word	0x200003c8
 8003f14:	20000290 	.word	0x20000290
 8003f18:	08003e89 	.word	0x08003e89

08003f1c <__sfp_lock_acquire>:
 8003f1c:	4801      	ldr	r0, [pc, #4]	@ (8003f24 <__sfp_lock_acquire+0x8>)
 8003f1e:	f000 b920 	b.w	8004162 <__retarget_lock_acquire_recursive>
 8003f22:	bf00      	nop
 8003f24:	200003d1 	.word	0x200003d1

08003f28 <__sfp_lock_release>:
 8003f28:	4801      	ldr	r0, [pc, #4]	@ (8003f30 <__sfp_lock_release+0x8>)
 8003f2a:	f000 b91b 	b.w	8004164 <__retarget_lock_release_recursive>
 8003f2e:	bf00      	nop
 8003f30:	200003d1 	.word	0x200003d1

08003f34 <__sinit>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	f7ff fff0 	bl	8003f1c <__sfp_lock_acquire>
 8003f3c:	6a23      	ldr	r3, [r4, #32]
 8003f3e:	b11b      	cbz	r3, 8003f48 <__sinit+0x14>
 8003f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f44:	f7ff bff0 	b.w	8003f28 <__sfp_lock_release>
 8003f48:	4b04      	ldr	r3, [pc, #16]	@ (8003f5c <__sinit+0x28>)
 8003f4a:	6223      	str	r3, [r4, #32]
 8003f4c:	4b04      	ldr	r3, [pc, #16]	@ (8003f60 <__sinit+0x2c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f5      	bne.n	8003f40 <__sinit+0xc>
 8003f54:	f7ff ffc4 	bl	8003ee0 <global_stdio_init.part.0>
 8003f58:	e7f2      	b.n	8003f40 <__sinit+0xc>
 8003f5a:	bf00      	nop
 8003f5c:	08003ea1 	.word	0x08003ea1
 8003f60:	200003c8 	.word	0x200003c8

08003f64 <_fwalk_sglue>:
 8003f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f68:	4607      	mov	r7, r0
 8003f6a:	4688      	mov	r8, r1
 8003f6c:	4614      	mov	r4, r2
 8003f6e:	2600      	movs	r6, #0
 8003f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f74:	f1b9 0901 	subs.w	r9, r9, #1
 8003f78:	d505      	bpl.n	8003f86 <_fwalk_sglue+0x22>
 8003f7a:	6824      	ldr	r4, [r4, #0]
 8003f7c:	2c00      	cmp	r4, #0
 8003f7e:	d1f7      	bne.n	8003f70 <_fwalk_sglue+0xc>
 8003f80:	4630      	mov	r0, r6
 8003f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f86:	89ab      	ldrh	r3, [r5, #12]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d907      	bls.n	8003f9c <_fwalk_sglue+0x38>
 8003f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f90:	3301      	adds	r3, #1
 8003f92:	d003      	beq.n	8003f9c <_fwalk_sglue+0x38>
 8003f94:	4629      	mov	r1, r5
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c0      	blx	r8
 8003f9a:	4306      	orrs	r6, r0
 8003f9c:	3568      	adds	r5, #104	@ 0x68
 8003f9e:	e7e9      	b.n	8003f74 <_fwalk_sglue+0x10>

08003fa0 <siprintf>:
 8003fa0:	b40e      	push	{r1, r2, r3}
 8003fa2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fa6:	b500      	push	{lr}
 8003fa8:	b09c      	sub	sp, #112	@ 0x70
 8003faa:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fac:	9002      	str	r0, [sp, #8]
 8003fae:	9006      	str	r0, [sp, #24]
 8003fb0:	9107      	str	r1, [sp, #28]
 8003fb2:	9104      	str	r1, [sp, #16]
 8003fb4:	4808      	ldr	r0, [pc, #32]	@ (8003fd8 <siprintf+0x38>)
 8003fb6:	4909      	ldr	r1, [pc, #36]	@ (8003fdc <siprintf+0x3c>)
 8003fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fbc:	9105      	str	r1, [sp, #20]
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	a902      	add	r1, sp, #8
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	f002 fbb2 	bl	800672c <_svfiprintf_r>
 8003fc8:	2200      	movs	r2, #0
 8003fca:	9b02      	ldr	r3, [sp, #8]
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	b01c      	add	sp, #112	@ 0x70
 8003fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fd4:	b003      	add	sp, #12
 8003fd6:	4770      	bx	lr
 8003fd8:	20000018 	.word	0x20000018
 8003fdc:	ffff0208 	.word	0xffff0208

08003fe0 <__sread>:
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe8:	f000 f86c 	bl	80040c4 <_read_r>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	bfab      	itete	ge
 8003ff0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ff4:	181b      	addge	r3, r3, r0
 8003ff6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ffa:	bfac      	ite	ge
 8003ffc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ffe:	81a3      	strhlt	r3, [r4, #12]
 8004000:	bd10      	pop	{r4, pc}

08004002 <__swrite>:
 8004002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004006:	461f      	mov	r7, r3
 8004008:	898b      	ldrh	r3, [r1, #12]
 800400a:	4605      	mov	r5, r0
 800400c:	05db      	lsls	r3, r3, #23
 800400e:	460c      	mov	r4, r1
 8004010:	4616      	mov	r6, r2
 8004012:	d505      	bpl.n	8004020 <__swrite+0x1e>
 8004014:	2302      	movs	r3, #2
 8004016:	2200      	movs	r2, #0
 8004018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401c:	f000 f840 	bl	80040a0 <_lseek_r>
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	4632      	mov	r2, r6
 8004024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004028:	81a3      	strh	r3, [r4, #12]
 800402a:	4628      	mov	r0, r5
 800402c:	463b      	mov	r3, r7
 800402e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004036:	f000 b857 	b.w	80040e8 <_write_r>

0800403a <__sseek>:
 800403a:	b510      	push	{r4, lr}
 800403c:	460c      	mov	r4, r1
 800403e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004042:	f000 f82d 	bl	80040a0 <_lseek_r>
 8004046:	1c43      	adds	r3, r0, #1
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	bf15      	itete	ne
 800404c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800404e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004052:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004056:	81a3      	strheq	r3, [r4, #12]
 8004058:	bf18      	it	ne
 800405a:	81a3      	strhne	r3, [r4, #12]
 800405c:	bd10      	pop	{r4, pc}

0800405e <__sclose>:
 800405e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004062:	f000 b80d 	b.w	8004080 <_close_r>

08004066 <memset>:
 8004066:	4603      	mov	r3, r0
 8004068:	4402      	add	r2, r0
 800406a:	4293      	cmp	r3, r2
 800406c:	d100      	bne.n	8004070 <memset+0xa>
 800406e:	4770      	bx	lr
 8004070:	f803 1b01 	strb.w	r1, [r3], #1
 8004074:	e7f9      	b.n	800406a <memset+0x4>
	...

08004078 <_localeconv_r>:
 8004078:	4800      	ldr	r0, [pc, #0]	@ (800407c <_localeconv_r+0x4>)
 800407a:	4770      	bx	lr
 800407c:	20000158 	.word	0x20000158

08004080 <_close_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	2300      	movs	r3, #0
 8004084:	4d05      	ldr	r5, [pc, #20]	@ (800409c <_close_r+0x1c>)
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fd fc11 	bl	80018b2 <_close>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_close_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_close_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200003cc 	.word	0x200003cc

080040a0 <_lseek_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	2200      	movs	r2, #0
 80040aa:	4d05      	ldr	r5, [pc, #20]	@ (80040c0 <_lseek_r+0x20>)
 80040ac:	602a      	str	r2, [r5, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f7fd fc23 	bl	80018fa <_lseek>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_lseek_r+0x1e>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	b103      	cbz	r3, 80040be <_lseek_r+0x1e>
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	200003cc 	.word	0x200003cc

080040c4 <_read_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	2200      	movs	r2, #0
 80040ce:	4d05      	ldr	r5, [pc, #20]	@ (80040e4 <_read_r+0x20>)
 80040d0:	602a      	str	r2, [r5, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	f7fd fbb4 	bl	8001840 <_read>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d102      	bne.n	80040e2 <_read_r+0x1e>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	b103      	cbz	r3, 80040e2 <_read_r+0x1e>
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	200003cc 	.word	0x200003cc

080040e8 <_write_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	2200      	movs	r2, #0
 80040f2:	4d05      	ldr	r5, [pc, #20]	@ (8004108 <_write_r+0x20>)
 80040f4:	602a      	str	r2, [r5, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7fd fbbf 	bl	800187a <_write>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_write_r+0x1e>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_write_r+0x1e>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	200003cc 	.word	0x200003cc

0800410c <__errno>:
 800410c:	4b01      	ldr	r3, [pc, #4]	@ (8004114 <__errno+0x8>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000018 	.word	0x20000018

08004118 <__libc_init_array>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	2600      	movs	r6, #0
 800411c:	4d0c      	ldr	r5, [pc, #48]	@ (8004150 <__libc_init_array+0x38>)
 800411e:	4c0d      	ldr	r4, [pc, #52]	@ (8004154 <__libc_init_array+0x3c>)
 8004120:	1b64      	subs	r4, r4, r5
 8004122:	10a4      	asrs	r4, r4, #2
 8004124:	42a6      	cmp	r6, r4
 8004126:	d109      	bne.n	800413c <__libc_init_array+0x24>
 8004128:	f003 fb68 	bl	80077fc <_init>
 800412c:	2600      	movs	r6, #0
 800412e:	4d0a      	ldr	r5, [pc, #40]	@ (8004158 <__libc_init_array+0x40>)
 8004130:	4c0a      	ldr	r4, [pc, #40]	@ (800415c <__libc_init_array+0x44>)
 8004132:	1b64      	subs	r4, r4, r5
 8004134:	10a4      	asrs	r4, r4, #2
 8004136:	42a6      	cmp	r6, r4
 8004138:	d105      	bne.n	8004146 <__libc_init_array+0x2e>
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004140:	4798      	blx	r3
 8004142:	3601      	adds	r6, #1
 8004144:	e7ee      	b.n	8004124 <__libc_init_array+0xc>
 8004146:	f855 3b04 	ldr.w	r3, [r5], #4
 800414a:	4798      	blx	r3
 800414c:	3601      	adds	r6, #1
 800414e:	e7f2      	b.n	8004136 <__libc_init_array+0x1e>
 8004150:	08007d20 	.word	0x08007d20
 8004154:	08007d20 	.word	0x08007d20
 8004158:	08007d20 	.word	0x08007d20
 800415c:	08007d24 	.word	0x08007d24

08004160 <__retarget_lock_init_recursive>:
 8004160:	4770      	bx	lr

08004162 <__retarget_lock_acquire_recursive>:
 8004162:	4770      	bx	lr

08004164 <__retarget_lock_release_recursive>:
 8004164:	4770      	bx	lr

08004166 <memchr>:
 8004166:	4603      	mov	r3, r0
 8004168:	b510      	push	{r4, lr}
 800416a:	b2c9      	uxtb	r1, r1
 800416c:	4402      	add	r2, r0
 800416e:	4293      	cmp	r3, r2
 8004170:	4618      	mov	r0, r3
 8004172:	d101      	bne.n	8004178 <memchr+0x12>
 8004174:	2000      	movs	r0, #0
 8004176:	e003      	b.n	8004180 <memchr+0x1a>
 8004178:	7804      	ldrb	r4, [r0, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	428c      	cmp	r4, r1
 800417e:	d1f6      	bne.n	800416e <memchr+0x8>
 8004180:	bd10      	pop	{r4, pc}
	...

08004184 <nanf>:
 8004184:	4800      	ldr	r0, [pc, #0]	@ (8004188 <nanf+0x4>)
 8004186:	4770      	bx	lr
 8004188:	7fc00000 	.word	0x7fc00000

0800418c <quorem>:
 800418c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004190:	6903      	ldr	r3, [r0, #16]
 8004192:	690c      	ldr	r4, [r1, #16]
 8004194:	4607      	mov	r7, r0
 8004196:	42a3      	cmp	r3, r4
 8004198:	db7e      	blt.n	8004298 <quorem+0x10c>
 800419a:	3c01      	subs	r4, #1
 800419c:	00a3      	lsls	r3, r4, #2
 800419e:	f100 0514 	add.w	r5, r0, #20
 80041a2:	f101 0814 	add.w	r8, r1, #20
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041b6:	3301      	adds	r3, #1
 80041b8:	429a      	cmp	r2, r3
 80041ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80041be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80041c2:	d32e      	bcc.n	8004222 <quorem+0x96>
 80041c4:	f04f 0a00 	mov.w	sl, #0
 80041c8:	46c4      	mov	ip, r8
 80041ca:	46ae      	mov	lr, r5
 80041cc:	46d3      	mov	fp, sl
 80041ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80041d2:	b298      	uxth	r0, r3
 80041d4:	fb06 a000 	mla	r0, r6, r0, sl
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	0c02      	lsrs	r2, r0, #16
 80041dc:	fb06 2303 	mla	r3, r6, r3, r2
 80041e0:	f8de 2000 	ldr.w	r2, [lr]
 80041e4:	b280      	uxth	r0, r0
 80041e6:	b292      	uxth	r2, r2
 80041e8:	1a12      	subs	r2, r2, r0
 80041ea:	445a      	add	r2, fp
 80041ec:	f8de 0000 	ldr.w	r0, [lr]
 80041f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80041fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80041fe:	b292      	uxth	r2, r2
 8004200:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004204:	45e1      	cmp	r9, ip
 8004206:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800420a:	f84e 2b04 	str.w	r2, [lr], #4
 800420e:	d2de      	bcs.n	80041ce <quorem+0x42>
 8004210:	9b00      	ldr	r3, [sp, #0]
 8004212:	58eb      	ldr	r3, [r5, r3]
 8004214:	b92b      	cbnz	r3, 8004222 <quorem+0x96>
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	3b04      	subs	r3, #4
 800421a:	429d      	cmp	r5, r3
 800421c:	461a      	mov	r2, r3
 800421e:	d32f      	bcc.n	8004280 <quorem+0xf4>
 8004220:	613c      	str	r4, [r7, #16]
 8004222:	4638      	mov	r0, r7
 8004224:	f001 f9c4 	bl	80055b0 <__mcmp>
 8004228:	2800      	cmp	r0, #0
 800422a:	db25      	blt.n	8004278 <quorem+0xec>
 800422c:	4629      	mov	r1, r5
 800422e:	2000      	movs	r0, #0
 8004230:	f858 2b04 	ldr.w	r2, [r8], #4
 8004234:	f8d1 c000 	ldr.w	ip, [r1]
 8004238:	fa1f fe82 	uxth.w	lr, r2
 800423c:	fa1f f38c 	uxth.w	r3, ip
 8004240:	eba3 030e 	sub.w	r3, r3, lr
 8004244:	4403      	add	r3, r0
 8004246:	0c12      	lsrs	r2, r2, #16
 8004248:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800424c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004250:	b29b      	uxth	r3, r3
 8004252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004256:	45c1      	cmp	r9, r8
 8004258:	ea4f 4022 	mov.w	r0, r2, asr #16
 800425c:	f841 3b04 	str.w	r3, [r1], #4
 8004260:	d2e6      	bcs.n	8004230 <quorem+0xa4>
 8004262:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800426a:	b922      	cbnz	r2, 8004276 <quorem+0xea>
 800426c:	3b04      	subs	r3, #4
 800426e:	429d      	cmp	r5, r3
 8004270:	461a      	mov	r2, r3
 8004272:	d30b      	bcc.n	800428c <quorem+0x100>
 8004274:	613c      	str	r4, [r7, #16]
 8004276:	3601      	adds	r6, #1
 8004278:	4630      	mov	r0, r6
 800427a:	b003      	add	sp, #12
 800427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	3b04      	subs	r3, #4
 8004284:	2a00      	cmp	r2, #0
 8004286:	d1cb      	bne.n	8004220 <quorem+0x94>
 8004288:	3c01      	subs	r4, #1
 800428a:	e7c6      	b.n	800421a <quorem+0x8e>
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	3b04      	subs	r3, #4
 8004290:	2a00      	cmp	r2, #0
 8004292:	d1ef      	bne.n	8004274 <quorem+0xe8>
 8004294:	3c01      	subs	r4, #1
 8004296:	e7ea      	b.n	800426e <quorem+0xe2>
 8004298:	2000      	movs	r0, #0
 800429a:	e7ee      	b.n	800427a <quorem+0xee>
 800429c:	0000      	movs	r0, r0
	...

080042a0 <_dtoa_r>:
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	4614      	mov	r4, r2
 80042a6:	461d      	mov	r5, r3
 80042a8:	69c7      	ldr	r7, [r0, #28]
 80042aa:	b097      	sub	sp, #92	@ 0x5c
 80042ac:	4683      	mov	fp, r0
 80042ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80042b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80042b4:	b97f      	cbnz	r7, 80042d6 <_dtoa_r+0x36>
 80042b6:	2010      	movs	r0, #16
 80042b8:	f000 fe02 	bl	8004ec0 <malloc>
 80042bc:	4602      	mov	r2, r0
 80042be:	f8cb 001c 	str.w	r0, [fp, #28]
 80042c2:	b920      	cbnz	r0, 80042ce <_dtoa_r+0x2e>
 80042c4:	21ef      	movs	r1, #239	@ 0xef
 80042c6:	4ba8      	ldr	r3, [pc, #672]	@ (8004568 <_dtoa_r+0x2c8>)
 80042c8:	48a8      	ldr	r0, [pc, #672]	@ (800456c <_dtoa_r+0x2cc>)
 80042ca:	f002 fc23 	bl	8006b14 <__assert_func>
 80042ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80042d2:	6007      	str	r7, [r0, #0]
 80042d4:	60c7      	str	r7, [r0, #12]
 80042d6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80042da:	6819      	ldr	r1, [r3, #0]
 80042dc:	b159      	cbz	r1, 80042f6 <_dtoa_r+0x56>
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	2301      	movs	r3, #1
 80042e2:	4093      	lsls	r3, r2
 80042e4:	604a      	str	r2, [r1, #4]
 80042e6:	608b      	str	r3, [r1, #8]
 80042e8:	4658      	mov	r0, fp
 80042ea:	f000 fedf 	bl	80050ac <_Bfree>
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	1e2b      	subs	r3, r5, #0
 80042f8:	bfaf      	iteee	ge
 80042fa:	2300      	movge	r3, #0
 80042fc:	2201      	movlt	r2, #1
 80042fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004302:	9303      	strlt	r3, [sp, #12]
 8004304:	bfa8      	it	ge
 8004306:	6033      	strge	r3, [r6, #0]
 8004308:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800430c:	4b98      	ldr	r3, [pc, #608]	@ (8004570 <_dtoa_r+0x2d0>)
 800430e:	bfb8      	it	lt
 8004310:	6032      	strlt	r2, [r6, #0]
 8004312:	ea33 0308 	bics.w	r3, r3, r8
 8004316:	d112      	bne.n	800433e <_dtoa_r+0x9e>
 8004318:	f242 730f 	movw	r3, #9999	@ 0x270f
 800431c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004324:	4323      	orrs	r3, r4
 8004326:	f000 8550 	beq.w	8004dca <_dtoa_r+0xb2a>
 800432a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800432c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004574 <_dtoa_r+0x2d4>
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8552 	beq.w	8004dda <_dtoa_r+0xb3a>
 8004336:	f10a 0303 	add.w	r3, sl, #3
 800433a:	f000 bd4c 	b.w	8004dd6 <_dtoa_r+0xb36>
 800433e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004342:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	2300      	movs	r3, #0
 800434e:	f7fc fb2b 	bl	80009a8 <__aeabi_dcmpeq>
 8004352:	4607      	mov	r7, r0
 8004354:	b158      	cbz	r0, 800436e <_dtoa_r+0xce>
 8004356:	2301      	movs	r3, #1
 8004358:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800435e:	b113      	cbz	r3, 8004366 <_dtoa_r+0xc6>
 8004360:	4b85      	ldr	r3, [pc, #532]	@ (8004578 <_dtoa_r+0x2d8>)
 8004362:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800457c <_dtoa_r+0x2dc>
 800436a:	f000 bd36 	b.w	8004dda <_dtoa_r+0xb3a>
 800436e:	ab14      	add	r3, sp, #80	@ 0x50
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	ab15      	add	r3, sp, #84	@ 0x54
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	4658      	mov	r0, fp
 8004378:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800437c:	f001 fa30 	bl	80057e0 <__d2b>
 8004380:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004384:	4681      	mov	r9, r0
 8004386:	2e00      	cmp	r6, #0
 8004388:	d077      	beq.n	800447a <_dtoa_r+0x1da>
 800438a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800438e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004390:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004398:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800439c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80043a0:	9712      	str	r7, [sp, #72]	@ 0x48
 80043a2:	4619      	mov	r1, r3
 80043a4:	2200      	movs	r2, #0
 80043a6:	4b76      	ldr	r3, [pc, #472]	@ (8004580 <_dtoa_r+0x2e0>)
 80043a8:	f7fb fede 	bl	8000168 <__aeabi_dsub>
 80043ac:	a368      	add	r3, pc, #416	@ (adr r3, 8004550 <_dtoa_r+0x2b0>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fc f891 	bl	80004d8 <__aeabi_dmul>
 80043b6:	a368      	add	r3, pc, #416	@ (adr r3, 8004558 <_dtoa_r+0x2b8>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fb fed6 	bl	800016c <__adddf3>
 80043c0:	4604      	mov	r4, r0
 80043c2:	4630      	mov	r0, r6
 80043c4:	460d      	mov	r5, r1
 80043c6:	f7fc f81d 	bl	8000404 <__aeabi_i2d>
 80043ca:	a365      	add	r3, pc, #404	@ (adr r3, 8004560 <_dtoa_r+0x2c0>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f7fc f882 	bl	80004d8 <__aeabi_dmul>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4620      	mov	r0, r4
 80043da:	4629      	mov	r1, r5
 80043dc:	f7fb fec6 	bl	800016c <__adddf3>
 80043e0:	4604      	mov	r4, r0
 80043e2:	460d      	mov	r5, r1
 80043e4:	f7fc fb28 	bl	8000a38 <__aeabi_d2iz>
 80043e8:	2200      	movs	r2, #0
 80043ea:	4607      	mov	r7, r0
 80043ec:	2300      	movs	r3, #0
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fc fae3 	bl	80009bc <__aeabi_dcmplt>
 80043f6:	b140      	cbz	r0, 800440a <_dtoa_r+0x16a>
 80043f8:	4638      	mov	r0, r7
 80043fa:	f7fc f803 	bl	8000404 <__aeabi_i2d>
 80043fe:	4622      	mov	r2, r4
 8004400:	462b      	mov	r3, r5
 8004402:	f7fc fad1 	bl	80009a8 <__aeabi_dcmpeq>
 8004406:	b900      	cbnz	r0, 800440a <_dtoa_r+0x16a>
 8004408:	3f01      	subs	r7, #1
 800440a:	2f16      	cmp	r7, #22
 800440c:	d853      	bhi.n	80044b6 <_dtoa_r+0x216>
 800440e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004412:	4b5c      	ldr	r3, [pc, #368]	@ (8004584 <_dtoa_r+0x2e4>)
 8004414:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc face 	bl	80009bc <__aeabi_dcmplt>
 8004420:	2800      	cmp	r0, #0
 8004422:	d04a      	beq.n	80044ba <_dtoa_r+0x21a>
 8004424:	2300      	movs	r3, #0
 8004426:	3f01      	subs	r7, #1
 8004428:	930f      	str	r3, [sp, #60]	@ 0x3c
 800442a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800442c:	1b9b      	subs	r3, r3, r6
 800442e:	1e5a      	subs	r2, r3, #1
 8004430:	bf46      	itte	mi
 8004432:	f1c3 0801 	rsbmi	r8, r3, #1
 8004436:	2300      	movmi	r3, #0
 8004438:	f04f 0800 	movpl.w	r8, #0
 800443c:	9209      	str	r2, [sp, #36]	@ 0x24
 800443e:	bf48      	it	mi
 8004440:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004442:	2f00      	cmp	r7, #0
 8004444:	db3b      	blt.n	80044be <_dtoa_r+0x21e>
 8004446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004448:	970e      	str	r7, [sp, #56]	@ 0x38
 800444a:	443b      	add	r3, r7
 800444c:	9309      	str	r3, [sp, #36]	@ 0x24
 800444e:	2300      	movs	r3, #0
 8004450:	930a      	str	r3, [sp, #40]	@ 0x28
 8004452:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004454:	2b09      	cmp	r3, #9
 8004456:	d866      	bhi.n	8004526 <_dtoa_r+0x286>
 8004458:	2b05      	cmp	r3, #5
 800445a:	bfc4      	itt	gt
 800445c:	3b04      	subgt	r3, #4
 800445e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004460:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004462:	bfc8      	it	gt
 8004464:	2400      	movgt	r4, #0
 8004466:	f1a3 0302 	sub.w	r3, r3, #2
 800446a:	bfd8      	it	le
 800446c:	2401      	movle	r4, #1
 800446e:	2b03      	cmp	r3, #3
 8004470:	d864      	bhi.n	800453c <_dtoa_r+0x29c>
 8004472:	e8df f003 	tbb	[pc, r3]
 8004476:	382b      	.short	0x382b
 8004478:	5636      	.short	0x5636
 800447a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800447e:	441e      	add	r6, r3
 8004480:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004484:	2b20      	cmp	r3, #32
 8004486:	bfc1      	itttt	gt
 8004488:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800448c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004490:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004494:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004498:	bfd6      	itet	le
 800449a:	f1c3 0320 	rsble	r3, r3, #32
 800449e:	ea48 0003 	orrgt.w	r0, r8, r3
 80044a2:	fa04 f003 	lslle.w	r0, r4, r3
 80044a6:	f7fb ff9d 	bl	80003e4 <__aeabi_ui2d>
 80044aa:	2201      	movs	r2, #1
 80044ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80044b0:	3e01      	subs	r6, #1
 80044b2:	9212      	str	r2, [sp, #72]	@ 0x48
 80044b4:	e775      	b.n	80043a2 <_dtoa_r+0x102>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e7b6      	b.n	8004428 <_dtoa_r+0x188>
 80044ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80044bc:	e7b5      	b.n	800442a <_dtoa_r+0x18a>
 80044be:	427b      	negs	r3, r7
 80044c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80044c2:	2300      	movs	r3, #0
 80044c4:	eba8 0807 	sub.w	r8, r8, r7
 80044c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80044ca:	e7c2      	b.n	8004452 <_dtoa_r+0x1b2>
 80044cc:	2300      	movs	r3, #0
 80044ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	dc35      	bgt.n	8004542 <_dtoa_r+0x2a2>
 80044d6:	2301      	movs	r3, #1
 80044d8:	461a      	mov	r2, r3
 80044da:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80044de:	9221      	str	r2, [sp, #132]	@ 0x84
 80044e0:	e00b      	b.n	80044fa <_dtoa_r+0x25a>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e7f3      	b.n	80044ce <_dtoa_r+0x22e>
 80044e6:	2300      	movs	r3, #0
 80044e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	9308      	str	r3, [sp, #32]
 80044f0:	3301      	adds	r3, #1
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	9307      	str	r3, [sp, #28]
 80044f6:	bfb8      	it	lt
 80044f8:	2301      	movlt	r3, #1
 80044fa:	2100      	movs	r1, #0
 80044fc:	2204      	movs	r2, #4
 80044fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004502:	f102 0514 	add.w	r5, r2, #20
 8004506:	429d      	cmp	r5, r3
 8004508:	d91f      	bls.n	800454a <_dtoa_r+0x2aa>
 800450a:	6041      	str	r1, [r0, #4]
 800450c:	4658      	mov	r0, fp
 800450e:	f000 fd8d 	bl	800502c <_Balloc>
 8004512:	4682      	mov	sl, r0
 8004514:	2800      	cmp	r0, #0
 8004516:	d139      	bne.n	800458c <_dtoa_r+0x2ec>
 8004518:	4602      	mov	r2, r0
 800451a:	f240 11af 	movw	r1, #431	@ 0x1af
 800451e:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <_dtoa_r+0x2e8>)
 8004520:	e6d2      	b.n	80042c8 <_dtoa_r+0x28>
 8004522:	2301      	movs	r3, #1
 8004524:	e7e0      	b.n	80044e8 <_dtoa_r+0x248>
 8004526:	2401      	movs	r4, #1
 8004528:	2300      	movs	r3, #0
 800452a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800452c:	9320      	str	r3, [sp, #128]	@ 0x80
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	2200      	movs	r2, #0
 8004534:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004538:	2312      	movs	r3, #18
 800453a:	e7d0      	b.n	80044de <_dtoa_r+0x23e>
 800453c:	2301      	movs	r3, #1
 800453e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004540:	e7f5      	b.n	800452e <_dtoa_r+0x28e>
 8004542:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004544:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004548:	e7d7      	b.n	80044fa <_dtoa_r+0x25a>
 800454a:	3101      	adds	r1, #1
 800454c:	0052      	lsls	r2, r2, #1
 800454e:	e7d8      	b.n	8004502 <_dtoa_r+0x262>
 8004550:	636f4361 	.word	0x636f4361
 8004554:	3fd287a7 	.word	0x3fd287a7
 8004558:	8b60c8b3 	.word	0x8b60c8b3
 800455c:	3fc68a28 	.word	0x3fc68a28
 8004560:	509f79fb 	.word	0x509f79fb
 8004564:	3fd34413 	.word	0x3fd34413
 8004568:	08007930 	.word	0x08007930
 800456c:	08007947 	.word	0x08007947
 8004570:	7ff00000 	.word	0x7ff00000
 8004574:	0800792c 	.word	0x0800792c
 8004578:	080078fb 	.word	0x080078fb
 800457c:	080078fa 	.word	0x080078fa
 8004580:	3ff80000 	.word	0x3ff80000
 8004584:	08007a40 	.word	0x08007a40
 8004588:	0800799f 	.word	0x0800799f
 800458c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004590:	6018      	str	r0, [r3, #0]
 8004592:	9b07      	ldr	r3, [sp, #28]
 8004594:	2b0e      	cmp	r3, #14
 8004596:	f200 80a4 	bhi.w	80046e2 <_dtoa_r+0x442>
 800459a:	2c00      	cmp	r4, #0
 800459c:	f000 80a1 	beq.w	80046e2 <_dtoa_r+0x442>
 80045a0:	2f00      	cmp	r7, #0
 80045a2:	dd33      	ble.n	800460c <_dtoa_r+0x36c>
 80045a4:	4b86      	ldr	r3, [pc, #536]	@ (80047c0 <_dtoa_r+0x520>)
 80045a6:	f007 020f 	and.w	r2, r7, #15
 80045aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045ae:	05f8      	lsls	r0, r7, #23
 80045b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80045b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80045bc:	d516      	bpl.n	80045ec <_dtoa_r+0x34c>
 80045be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045c2:	4b80      	ldr	r3, [pc, #512]	@ (80047c4 <_dtoa_r+0x524>)
 80045c4:	2603      	movs	r6, #3
 80045c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045ca:	f7fc f8af 	bl	800072c <__aeabi_ddiv>
 80045ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d2:	f004 040f 	and.w	r4, r4, #15
 80045d6:	4d7b      	ldr	r5, [pc, #492]	@ (80047c4 <_dtoa_r+0x524>)
 80045d8:	b954      	cbnz	r4, 80045f0 <_dtoa_r+0x350>
 80045da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045e2:	f7fc f8a3 	bl	800072c <__aeabi_ddiv>
 80045e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ea:	e028      	b.n	800463e <_dtoa_r+0x39e>
 80045ec:	2602      	movs	r6, #2
 80045ee:	e7f2      	b.n	80045d6 <_dtoa_r+0x336>
 80045f0:	07e1      	lsls	r1, r4, #31
 80045f2:	d508      	bpl.n	8004606 <_dtoa_r+0x366>
 80045f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80045fc:	f7fb ff6c 	bl	80004d8 <__aeabi_dmul>
 8004600:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004604:	3601      	adds	r6, #1
 8004606:	1064      	asrs	r4, r4, #1
 8004608:	3508      	adds	r5, #8
 800460a:	e7e5      	b.n	80045d8 <_dtoa_r+0x338>
 800460c:	f000 80d2 	beq.w	80047b4 <_dtoa_r+0x514>
 8004610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004614:	427c      	negs	r4, r7
 8004616:	4b6a      	ldr	r3, [pc, #424]	@ (80047c0 <_dtoa_r+0x520>)
 8004618:	f004 020f 	and.w	r2, r4, #15
 800461c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f7fb ff58 	bl	80004d8 <__aeabi_dmul>
 8004628:	2602      	movs	r6, #2
 800462a:	2300      	movs	r3, #0
 800462c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004630:	4d64      	ldr	r5, [pc, #400]	@ (80047c4 <_dtoa_r+0x524>)
 8004632:	1124      	asrs	r4, r4, #4
 8004634:	2c00      	cmp	r4, #0
 8004636:	f040 80b2 	bne.w	800479e <_dtoa_r+0x4fe>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1d3      	bne.n	80045e6 <_dtoa_r+0x346>
 800463e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004642:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80b7 	beq.w	80047b8 <_dtoa_r+0x518>
 800464a:	2200      	movs	r2, #0
 800464c:	4620      	mov	r0, r4
 800464e:	4629      	mov	r1, r5
 8004650:	4b5d      	ldr	r3, [pc, #372]	@ (80047c8 <_dtoa_r+0x528>)
 8004652:	f7fc f9b3 	bl	80009bc <__aeabi_dcmplt>
 8004656:	2800      	cmp	r0, #0
 8004658:	f000 80ae 	beq.w	80047b8 <_dtoa_r+0x518>
 800465c:	9b07      	ldr	r3, [sp, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80aa 	beq.w	80047b8 <_dtoa_r+0x518>
 8004664:	9b08      	ldr	r3, [sp, #32]
 8004666:	2b00      	cmp	r3, #0
 8004668:	dd37      	ble.n	80046da <_dtoa_r+0x43a>
 800466a:	1e7b      	subs	r3, r7, #1
 800466c:	4620      	mov	r0, r4
 800466e:	9304      	str	r3, [sp, #16]
 8004670:	2200      	movs	r2, #0
 8004672:	4629      	mov	r1, r5
 8004674:	4b55      	ldr	r3, [pc, #340]	@ (80047cc <_dtoa_r+0x52c>)
 8004676:	f7fb ff2f 	bl	80004d8 <__aeabi_dmul>
 800467a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800467e:	9c08      	ldr	r4, [sp, #32]
 8004680:	3601      	adds	r6, #1
 8004682:	4630      	mov	r0, r6
 8004684:	f7fb febe 	bl	8000404 <__aeabi_i2d>
 8004688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800468c:	f7fb ff24 	bl	80004d8 <__aeabi_dmul>
 8004690:	2200      	movs	r2, #0
 8004692:	4b4f      	ldr	r3, [pc, #316]	@ (80047d0 <_dtoa_r+0x530>)
 8004694:	f7fb fd6a 	bl	800016c <__adddf3>
 8004698:	4605      	mov	r5, r0
 800469a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800469e:	2c00      	cmp	r4, #0
 80046a0:	f040 809a 	bne.w	80047d8 <_dtoa_r+0x538>
 80046a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046a8:	2200      	movs	r2, #0
 80046aa:	4b4a      	ldr	r3, [pc, #296]	@ (80047d4 <_dtoa_r+0x534>)
 80046ac:	f7fb fd5c 	bl	8000168 <__aeabi_dsub>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046b8:	462a      	mov	r2, r5
 80046ba:	4633      	mov	r3, r6
 80046bc:	f7fc f99c 	bl	80009f8 <__aeabi_dcmpgt>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	f040 828e 	bne.w	8004be2 <_dtoa_r+0x942>
 80046c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046ca:	462a      	mov	r2, r5
 80046cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80046d0:	f7fc f974 	bl	80009bc <__aeabi_dcmplt>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	f040 8127 	bne.w	8004928 <_dtoa_r+0x688>
 80046da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80046de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80046e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f2c0 8163 	blt.w	80049b0 <_dtoa_r+0x710>
 80046ea:	2f0e      	cmp	r7, #14
 80046ec:	f300 8160 	bgt.w	80049b0 <_dtoa_r+0x710>
 80046f0:	4b33      	ldr	r3, [pc, #204]	@ (80047c0 <_dtoa_r+0x520>)
 80046f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004700:	2b00      	cmp	r3, #0
 8004702:	da03      	bge.n	800470c <_dtoa_r+0x46c>
 8004704:	9b07      	ldr	r3, [sp, #28]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f340 8100 	ble.w	800490c <_dtoa_r+0x66c>
 800470c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004710:	4656      	mov	r6, sl
 8004712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004716:	4620      	mov	r0, r4
 8004718:	4629      	mov	r1, r5
 800471a:	f7fc f807 	bl	800072c <__aeabi_ddiv>
 800471e:	f7fc f98b 	bl	8000a38 <__aeabi_d2iz>
 8004722:	4680      	mov	r8, r0
 8004724:	f7fb fe6e 	bl	8000404 <__aeabi_i2d>
 8004728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800472c:	f7fb fed4 	bl	80004d8 <__aeabi_dmul>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4620      	mov	r0, r4
 8004736:	4629      	mov	r1, r5
 8004738:	f7fb fd16 	bl	8000168 <__aeabi_dsub>
 800473c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004740:	9d07      	ldr	r5, [sp, #28]
 8004742:	f806 4b01 	strb.w	r4, [r6], #1
 8004746:	eba6 040a 	sub.w	r4, r6, sl
 800474a:	42a5      	cmp	r5, r4
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	f040 8116 	bne.w	8004980 <_dtoa_r+0x6e0>
 8004754:	f7fb fd0a 	bl	800016c <__adddf3>
 8004758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800475c:	4604      	mov	r4, r0
 800475e:	460d      	mov	r5, r1
 8004760:	f7fc f94a 	bl	80009f8 <__aeabi_dcmpgt>
 8004764:	2800      	cmp	r0, #0
 8004766:	f040 80f8 	bne.w	800495a <_dtoa_r+0x6ba>
 800476a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800476e:	4620      	mov	r0, r4
 8004770:	4629      	mov	r1, r5
 8004772:	f7fc f919 	bl	80009a8 <__aeabi_dcmpeq>
 8004776:	b118      	cbz	r0, 8004780 <_dtoa_r+0x4e0>
 8004778:	f018 0f01 	tst.w	r8, #1
 800477c:	f040 80ed 	bne.w	800495a <_dtoa_r+0x6ba>
 8004780:	4649      	mov	r1, r9
 8004782:	4658      	mov	r0, fp
 8004784:	f000 fc92 	bl	80050ac <_Bfree>
 8004788:	2300      	movs	r3, #0
 800478a:	7033      	strb	r3, [r6, #0]
 800478c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800478e:	3701      	adds	r7, #1
 8004790:	601f      	str	r7, [r3, #0]
 8004792:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8320 	beq.w	8004dda <_dtoa_r+0xb3a>
 800479a:	601e      	str	r6, [r3, #0]
 800479c:	e31d      	b.n	8004dda <_dtoa_r+0xb3a>
 800479e:	07e2      	lsls	r2, r4, #31
 80047a0:	d505      	bpl.n	80047ae <_dtoa_r+0x50e>
 80047a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047a6:	f7fb fe97 	bl	80004d8 <__aeabi_dmul>
 80047aa:	2301      	movs	r3, #1
 80047ac:	3601      	adds	r6, #1
 80047ae:	1064      	asrs	r4, r4, #1
 80047b0:	3508      	adds	r5, #8
 80047b2:	e73f      	b.n	8004634 <_dtoa_r+0x394>
 80047b4:	2602      	movs	r6, #2
 80047b6:	e742      	b.n	800463e <_dtoa_r+0x39e>
 80047b8:	9c07      	ldr	r4, [sp, #28]
 80047ba:	9704      	str	r7, [sp, #16]
 80047bc:	e761      	b.n	8004682 <_dtoa_r+0x3e2>
 80047be:	bf00      	nop
 80047c0:	08007a40 	.word	0x08007a40
 80047c4:	08007a18 	.word	0x08007a18
 80047c8:	3ff00000 	.word	0x3ff00000
 80047cc:	40240000 	.word	0x40240000
 80047d0:	401c0000 	.word	0x401c0000
 80047d4:	40140000 	.word	0x40140000
 80047d8:	4b70      	ldr	r3, [pc, #448]	@ (800499c <_dtoa_r+0x6fc>)
 80047da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80047dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80047e4:	4454      	add	r4, sl
 80047e6:	2900      	cmp	r1, #0
 80047e8:	d045      	beq.n	8004876 <_dtoa_r+0x5d6>
 80047ea:	2000      	movs	r0, #0
 80047ec:	496c      	ldr	r1, [pc, #432]	@ (80049a0 <_dtoa_r+0x700>)
 80047ee:	f7fb ff9d 	bl	800072c <__aeabi_ddiv>
 80047f2:	4633      	mov	r3, r6
 80047f4:	462a      	mov	r2, r5
 80047f6:	f7fb fcb7 	bl	8000168 <__aeabi_dsub>
 80047fa:	4656      	mov	r6, sl
 80047fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004804:	f7fc f918 	bl	8000a38 <__aeabi_d2iz>
 8004808:	4605      	mov	r5, r0
 800480a:	f7fb fdfb 	bl	8000404 <__aeabi_i2d>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004816:	f7fb fca7 	bl	8000168 <__aeabi_dsub>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	3530      	adds	r5, #48	@ 0x30
 8004820:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004824:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004828:	f806 5b01 	strb.w	r5, [r6], #1
 800482c:	f7fc f8c6 	bl	80009bc <__aeabi_dcmplt>
 8004830:	2800      	cmp	r0, #0
 8004832:	d163      	bne.n	80048fc <_dtoa_r+0x65c>
 8004834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004838:	2000      	movs	r0, #0
 800483a:	495a      	ldr	r1, [pc, #360]	@ (80049a4 <_dtoa_r+0x704>)
 800483c:	f7fb fc94 	bl	8000168 <__aeabi_dsub>
 8004840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004844:	f7fc f8ba 	bl	80009bc <__aeabi_dcmplt>
 8004848:	2800      	cmp	r0, #0
 800484a:	f040 8087 	bne.w	800495c <_dtoa_r+0x6bc>
 800484e:	42a6      	cmp	r6, r4
 8004850:	f43f af43 	beq.w	80046da <_dtoa_r+0x43a>
 8004854:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004858:	2200      	movs	r2, #0
 800485a:	4b53      	ldr	r3, [pc, #332]	@ (80049a8 <_dtoa_r+0x708>)
 800485c:	f7fb fe3c 	bl	80004d8 <__aeabi_dmul>
 8004860:	2200      	movs	r2, #0
 8004862:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800486a:	4b4f      	ldr	r3, [pc, #316]	@ (80049a8 <_dtoa_r+0x708>)
 800486c:	f7fb fe34 	bl	80004d8 <__aeabi_dmul>
 8004870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004874:	e7c4      	b.n	8004800 <_dtoa_r+0x560>
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	f7fb fe2d 	bl	80004d8 <__aeabi_dmul>
 800487e:	4656      	mov	r6, sl
 8004880:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004884:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800488a:	f7fc f8d5 	bl	8000a38 <__aeabi_d2iz>
 800488e:	4605      	mov	r5, r0
 8004890:	f7fb fdb8 	bl	8000404 <__aeabi_i2d>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800489c:	f7fb fc64 	bl	8000168 <__aeabi_dsub>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	3530      	adds	r5, #48	@ 0x30
 80048a6:	f806 5b01 	strb.w	r5, [r6], #1
 80048aa:	42a6      	cmp	r6, r4
 80048ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	d124      	bne.n	8004900 <_dtoa_r+0x660>
 80048b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80048ba:	4b39      	ldr	r3, [pc, #228]	@ (80049a0 <_dtoa_r+0x700>)
 80048bc:	f7fb fc56 	bl	800016c <__adddf3>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048c8:	f7fc f896 	bl	80009f8 <__aeabi_dcmpgt>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d145      	bne.n	800495c <_dtoa_r+0x6bc>
 80048d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80048d4:	2000      	movs	r0, #0
 80048d6:	4932      	ldr	r1, [pc, #200]	@ (80049a0 <_dtoa_r+0x700>)
 80048d8:	f7fb fc46 	bl	8000168 <__aeabi_dsub>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e4:	f7fc f86a 	bl	80009bc <__aeabi_dcmplt>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f43f aef6 	beq.w	80046da <_dtoa_r+0x43a>
 80048ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80048f0:	1e73      	subs	r3, r6, #1
 80048f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80048f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80048f8:	2b30      	cmp	r3, #48	@ 0x30
 80048fa:	d0f8      	beq.n	80048ee <_dtoa_r+0x64e>
 80048fc:	9f04      	ldr	r7, [sp, #16]
 80048fe:	e73f      	b.n	8004780 <_dtoa_r+0x4e0>
 8004900:	4b29      	ldr	r3, [pc, #164]	@ (80049a8 <_dtoa_r+0x708>)
 8004902:	f7fb fde9 	bl	80004d8 <__aeabi_dmul>
 8004906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800490a:	e7bc      	b.n	8004886 <_dtoa_r+0x5e6>
 800490c:	d10c      	bne.n	8004928 <_dtoa_r+0x688>
 800490e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004912:	2200      	movs	r2, #0
 8004914:	4b25      	ldr	r3, [pc, #148]	@ (80049ac <_dtoa_r+0x70c>)
 8004916:	f7fb fddf 	bl	80004d8 <__aeabi_dmul>
 800491a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800491e:	f7fc f861 	bl	80009e4 <__aeabi_dcmpge>
 8004922:	2800      	cmp	r0, #0
 8004924:	f000 815b 	beq.w	8004bde <_dtoa_r+0x93e>
 8004928:	2400      	movs	r4, #0
 800492a:	4625      	mov	r5, r4
 800492c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800492e:	4656      	mov	r6, sl
 8004930:	43db      	mvns	r3, r3
 8004932:	9304      	str	r3, [sp, #16]
 8004934:	2700      	movs	r7, #0
 8004936:	4621      	mov	r1, r4
 8004938:	4658      	mov	r0, fp
 800493a:	f000 fbb7 	bl	80050ac <_Bfree>
 800493e:	2d00      	cmp	r5, #0
 8004940:	d0dc      	beq.n	80048fc <_dtoa_r+0x65c>
 8004942:	b12f      	cbz	r7, 8004950 <_dtoa_r+0x6b0>
 8004944:	42af      	cmp	r7, r5
 8004946:	d003      	beq.n	8004950 <_dtoa_r+0x6b0>
 8004948:	4639      	mov	r1, r7
 800494a:	4658      	mov	r0, fp
 800494c:	f000 fbae 	bl	80050ac <_Bfree>
 8004950:	4629      	mov	r1, r5
 8004952:	4658      	mov	r0, fp
 8004954:	f000 fbaa 	bl	80050ac <_Bfree>
 8004958:	e7d0      	b.n	80048fc <_dtoa_r+0x65c>
 800495a:	9704      	str	r7, [sp, #16]
 800495c:	4633      	mov	r3, r6
 800495e:	461e      	mov	r6, r3
 8004960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004964:	2a39      	cmp	r2, #57	@ 0x39
 8004966:	d107      	bne.n	8004978 <_dtoa_r+0x6d8>
 8004968:	459a      	cmp	sl, r3
 800496a:	d1f8      	bne.n	800495e <_dtoa_r+0x6be>
 800496c:	9a04      	ldr	r2, [sp, #16]
 800496e:	3201      	adds	r2, #1
 8004970:	9204      	str	r2, [sp, #16]
 8004972:	2230      	movs	r2, #48	@ 0x30
 8004974:	f88a 2000 	strb.w	r2, [sl]
 8004978:	781a      	ldrb	r2, [r3, #0]
 800497a:	3201      	adds	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e7bd      	b.n	80048fc <_dtoa_r+0x65c>
 8004980:	2200      	movs	r2, #0
 8004982:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <_dtoa_r+0x708>)
 8004984:	f7fb fda8 	bl	80004d8 <__aeabi_dmul>
 8004988:	2200      	movs	r2, #0
 800498a:	2300      	movs	r3, #0
 800498c:	4604      	mov	r4, r0
 800498e:	460d      	mov	r5, r1
 8004990:	f7fc f80a 	bl	80009a8 <__aeabi_dcmpeq>
 8004994:	2800      	cmp	r0, #0
 8004996:	f43f aebc 	beq.w	8004712 <_dtoa_r+0x472>
 800499a:	e6f1      	b.n	8004780 <_dtoa_r+0x4e0>
 800499c:	08007a40 	.word	0x08007a40
 80049a0:	3fe00000 	.word	0x3fe00000
 80049a4:	3ff00000 	.word	0x3ff00000
 80049a8:	40240000 	.word	0x40240000
 80049ac:	40140000 	.word	0x40140000
 80049b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	f000 80db 	beq.w	8004b6e <_dtoa_r+0x8ce>
 80049b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80049ba:	2a01      	cmp	r2, #1
 80049bc:	f300 80bf 	bgt.w	8004b3e <_dtoa_r+0x89e>
 80049c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	f000 80b7 	beq.w	8004b36 <_dtoa_r+0x896>
 80049c8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80049cc:	4646      	mov	r6, r8
 80049ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80049d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049d2:	2101      	movs	r1, #1
 80049d4:	441a      	add	r2, r3
 80049d6:	4658      	mov	r0, fp
 80049d8:	4498      	add	r8, r3
 80049da:	9209      	str	r2, [sp, #36]	@ 0x24
 80049dc:	f000 fc64 	bl	80052a8 <__i2b>
 80049e0:	4605      	mov	r5, r0
 80049e2:	b15e      	cbz	r6, 80049fc <_dtoa_r+0x75c>
 80049e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	dd08      	ble.n	80049fc <_dtoa_r+0x75c>
 80049ea:	42b3      	cmp	r3, r6
 80049ec:	bfa8      	it	ge
 80049ee:	4633      	movge	r3, r6
 80049f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049f2:	eba8 0803 	sub.w	r8, r8, r3
 80049f6:	1af6      	subs	r6, r6, r3
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80049fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049fe:	b1f3      	cbz	r3, 8004a3e <_dtoa_r+0x79e>
 8004a00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80b7 	beq.w	8004b76 <_dtoa_r+0x8d6>
 8004a08:	b18c      	cbz	r4, 8004a2e <_dtoa_r+0x78e>
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	4658      	mov	r0, fp
 8004a10:	f000 fd08 	bl	8005424 <__pow5mult>
 8004a14:	464a      	mov	r2, r9
 8004a16:	4601      	mov	r1, r0
 8004a18:	4605      	mov	r5, r0
 8004a1a:	4658      	mov	r0, fp
 8004a1c:	f000 fc5a 	bl	80052d4 <__multiply>
 8004a20:	4649      	mov	r1, r9
 8004a22:	9004      	str	r0, [sp, #16]
 8004a24:	4658      	mov	r0, fp
 8004a26:	f000 fb41 	bl	80050ac <_Bfree>
 8004a2a:	9b04      	ldr	r3, [sp, #16]
 8004a2c:	4699      	mov	r9, r3
 8004a2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a30:	1b1a      	subs	r2, r3, r4
 8004a32:	d004      	beq.n	8004a3e <_dtoa_r+0x79e>
 8004a34:	4649      	mov	r1, r9
 8004a36:	4658      	mov	r0, fp
 8004a38:	f000 fcf4 	bl	8005424 <__pow5mult>
 8004a3c:	4681      	mov	r9, r0
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4658      	mov	r0, fp
 8004a42:	f000 fc31 	bl	80052a8 <__i2b>
 8004a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a48:	4604      	mov	r4, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 81c9 	beq.w	8004de2 <_dtoa_r+0xb42>
 8004a50:	461a      	mov	r2, r3
 8004a52:	4601      	mov	r1, r0
 8004a54:	4658      	mov	r0, fp
 8004a56:	f000 fce5 	bl	8005424 <__pow5mult>
 8004a5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	f300 808f 	bgt.w	8004b82 <_dtoa_r+0x8e2>
 8004a64:	9b02      	ldr	r3, [sp, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 8087 	bne.w	8004b7a <_dtoa_r+0x8da>
 8004a6c:	9b03      	ldr	r3, [sp, #12]
 8004a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 8083 	bne.w	8004b7e <_dtoa_r+0x8de>
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a7e:	0d1b      	lsrs	r3, r3, #20
 8004a80:	051b      	lsls	r3, r3, #20
 8004a82:	b12b      	cbz	r3, 8004a90 <_dtoa_r+0x7f0>
 8004a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a86:	f108 0801 	add.w	r8, r8, #1
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a8e:	2301      	movs	r3, #1
 8004a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 81aa 	beq.w	8004dee <_dtoa_r+0xb4e>
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004aa0:	6918      	ldr	r0, [r3, #16]
 8004aa2:	f000 fbb5 	bl	8005210 <__hi0bits>
 8004aa6:	f1c0 0020 	rsb	r0, r0, #32
 8004aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aac:	4418      	add	r0, r3
 8004aae:	f010 001f 	ands.w	r0, r0, #31
 8004ab2:	d071      	beq.n	8004b98 <_dtoa_r+0x8f8>
 8004ab4:	f1c0 0320 	rsb	r3, r0, #32
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	dd65      	ble.n	8004b88 <_dtoa_r+0x8e8>
 8004abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004abe:	f1c0 001c 	rsb	r0, r0, #28
 8004ac2:	4403      	add	r3, r0
 8004ac4:	4480      	add	r8, r0
 8004ac6:	4406      	add	r6, r0
 8004ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aca:	f1b8 0f00 	cmp.w	r8, #0
 8004ace:	dd05      	ble.n	8004adc <_dtoa_r+0x83c>
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4642      	mov	r2, r8
 8004ad4:	4658      	mov	r0, fp
 8004ad6:	f000 fcff 	bl	80054d8 <__lshift>
 8004ada:	4681      	mov	r9, r0
 8004adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	dd05      	ble.n	8004aee <_dtoa_r+0x84e>
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4658      	mov	r0, fp
 8004ae8:	f000 fcf6 	bl	80054d8 <__lshift>
 8004aec:	4604      	mov	r4, r0
 8004aee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d053      	beq.n	8004b9c <_dtoa_r+0x8fc>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4648      	mov	r0, r9
 8004af8:	f000 fd5a 	bl	80055b0 <__mcmp>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	da4d      	bge.n	8004b9c <_dtoa_r+0x8fc>
 8004b00:	1e7b      	subs	r3, r7, #1
 8004b02:	4649      	mov	r1, r9
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	220a      	movs	r2, #10
 8004b08:	2300      	movs	r3, #0
 8004b0a:	4658      	mov	r0, fp
 8004b0c:	f000 faf0 	bl	80050f0 <__multadd>
 8004b10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b12:	4681      	mov	r9, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 816c 	beq.w	8004df2 <_dtoa_r+0xb52>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	220a      	movs	r2, #10
 8004b20:	4658      	mov	r0, fp
 8004b22:	f000 fae5 	bl	80050f0 <__multadd>
 8004b26:	9b08      	ldr	r3, [sp, #32]
 8004b28:	4605      	mov	r5, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	dc61      	bgt.n	8004bf2 <_dtoa_r+0x952>
 8004b2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	dc3b      	bgt.n	8004bac <_dtoa_r+0x90c>
 8004b34:	e05d      	b.n	8004bf2 <_dtoa_r+0x952>
 8004b36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004b38:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004b3c:	e746      	b.n	80049cc <_dtoa_r+0x72c>
 8004b3e:	9b07      	ldr	r3, [sp, #28]
 8004b40:	1e5c      	subs	r4, r3, #1
 8004b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b44:	42a3      	cmp	r3, r4
 8004b46:	bfbf      	itttt	lt
 8004b48:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004b4a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004b4c:	1ae3      	sublt	r3, r4, r3
 8004b4e:	18d2      	addlt	r2, r2, r3
 8004b50:	bfa8      	it	ge
 8004b52:	1b1c      	subge	r4, r3, r4
 8004b54:	9b07      	ldr	r3, [sp, #28]
 8004b56:	bfbe      	ittt	lt
 8004b58:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004b5a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004b5c:	2400      	movlt	r4, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bfb5      	itete	lt
 8004b62:	eba8 0603 	sublt.w	r6, r8, r3
 8004b66:	4646      	movge	r6, r8
 8004b68:	2300      	movlt	r3, #0
 8004b6a:	9b07      	ldrge	r3, [sp, #28]
 8004b6c:	e730      	b.n	80049d0 <_dtoa_r+0x730>
 8004b6e:	4646      	mov	r6, r8
 8004b70:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004b72:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004b74:	e735      	b.n	80049e2 <_dtoa_r+0x742>
 8004b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b78:	e75c      	b.n	8004a34 <_dtoa_r+0x794>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e788      	b.n	8004a90 <_dtoa_r+0x7f0>
 8004b7e:	9b02      	ldr	r3, [sp, #8]
 8004b80:	e786      	b.n	8004a90 <_dtoa_r+0x7f0>
 8004b82:	2300      	movs	r3, #0
 8004b84:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b86:	e788      	b.n	8004a9a <_dtoa_r+0x7fa>
 8004b88:	d09f      	beq.n	8004aca <_dtoa_r+0x82a>
 8004b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b8c:	331c      	adds	r3, #28
 8004b8e:	441a      	add	r2, r3
 8004b90:	4498      	add	r8, r3
 8004b92:	441e      	add	r6, r3
 8004b94:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b96:	e798      	b.n	8004aca <_dtoa_r+0x82a>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	e7f6      	b.n	8004b8a <_dtoa_r+0x8ea>
 8004b9c:	9b07      	ldr	r3, [sp, #28]
 8004b9e:	9704      	str	r7, [sp, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dc20      	bgt.n	8004be6 <_dtoa_r+0x946>
 8004ba4:	9308      	str	r3, [sp, #32]
 8004ba6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	dd1e      	ble.n	8004bea <_dtoa_r+0x94a>
 8004bac:	9b08      	ldr	r3, [sp, #32]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f47f aebc 	bne.w	800492c <_dtoa_r+0x68c>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	4658      	mov	r0, fp
 8004bba:	f000 fa99 	bl	80050f0 <__multadd>
 8004bbe:	4601      	mov	r1, r0
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	4648      	mov	r0, r9
 8004bc4:	f000 fcf4 	bl	80055b0 <__mcmp>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	f77f aeaf 	ble.w	800492c <_dtoa_r+0x68c>
 8004bce:	2331      	movs	r3, #49	@ 0x31
 8004bd0:	4656      	mov	r6, sl
 8004bd2:	f806 3b01 	strb.w	r3, [r6], #1
 8004bd6:	9b04      	ldr	r3, [sp, #16]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	9304      	str	r3, [sp, #16]
 8004bdc:	e6aa      	b.n	8004934 <_dtoa_r+0x694>
 8004bde:	9c07      	ldr	r4, [sp, #28]
 8004be0:	9704      	str	r7, [sp, #16]
 8004be2:	4625      	mov	r5, r4
 8004be4:	e7f3      	b.n	8004bce <_dtoa_r+0x92e>
 8004be6:	9b07      	ldr	r3, [sp, #28]
 8004be8:	9308      	str	r3, [sp, #32]
 8004bea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8104 	beq.w	8004dfa <_dtoa_r+0xb5a>
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	dd05      	ble.n	8004c02 <_dtoa_r+0x962>
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	4658      	mov	r0, fp
 8004bfc:	f000 fc6c 	bl	80054d8 <__lshift>
 8004c00:	4605      	mov	r5, r0
 8004c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05a      	beq.n	8004cbe <_dtoa_r+0xa1e>
 8004c08:	4658      	mov	r0, fp
 8004c0a:	6869      	ldr	r1, [r5, #4]
 8004c0c:	f000 fa0e 	bl	800502c <_Balloc>
 8004c10:	4606      	mov	r6, r0
 8004c12:	b928      	cbnz	r0, 8004c20 <_dtoa_r+0x980>
 8004c14:	4602      	mov	r2, r0
 8004c16:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004c1a:	4b83      	ldr	r3, [pc, #524]	@ (8004e28 <_dtoa_r+0xb88>)
 8004c1c:	f7ff bb54 	b.w	80042c8 <_dtoa_r+0x28>
 8004c20:	692a      	ldr	r2, [r5, #16]
 8004c22:	f105 010c 	add.w	r1, r5, #12
 8004c26:	3202      	adds	r2, #2
 8004c28:	0092      	lsls	r2, r2, #2
 8004c2a:	300c      	adds	r0, #12
 8004c2c:	f001 ff5e 	bl	8006aec <memcpy>
 8004c30:	2201      	movs	r2, #1
 8004c32:	4631      	mov	r1, r6
 8004c34:	4658      	mov	r0, fp
 8004c36:	f000 fc4f 	bl	80054d8 <__lshift>
 8004c3a:	462f      	mov	r7, r5
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	f10a 0301 	add.w	r3, sl, #1
 8004c42:	9307      	str	r3, [sp, #28]
 8004c44:	9b08      	ldr	r3, [sp, #32]
 8004c46:	4453      	add	r3, sl
 8004c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c4a:	9b02      	ldr	r3, [sp, #8]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c52:	9b07      	ldr	r3, [sp, #28]
 8004c54:	4621      	mov	r1, r4
 8004c56:	3b01      	subs	r3, #1
 8004c58:	4648      	mov	r0, r9
 8004c5a:	9302      	str	r3, [sp, #8]
 8004c5c:	f7ff fa96 	bl	800418c <quorem>
 8004c60:	4639      	mov	r1, r7
 8004c62:	9008      	str	r0, [sp, #32]
 8004c64:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004c68:	4648      	mov	r0, r9
 8004c6a:	f000 fca1 	bl	80055b0 <__mcmp>
 8004c6e:	462a      	mov	r2, r5
 8004c70:	9009      	str	r0, [sp, #36]	@ 0x24
 8004c72:	4621      	mov	r1, r4
 8004c74:	4658      	mov	r0, fp
 8004c76:	f000 fcb7 	bl	80055e8 <__mdiff>
 8004c7a:	68c2      	ldr	r2, [r0, #12]
 8004c7c:	4606      	mov	r6, r0
 8004c7e:	bb02      	cbnz	r2, 8004cc2 <_dtoa_r+0xa22>
 8004c80:	4601      	mov	r1, r0
 8004c82:	4648      	mov	r0, r9
 8004c84:	f000 fc94 	bl	80055b0 <__mcmp>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4658      	mov	r0, fp
 8004c8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004c90:	f000 fa0c 	bl	80050ac <_Bfree>
 8004c94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004c98:	9e07      	ldr	r6, [sp, #28]
 8004c9a:	ea43 0102 	orr.w	r1, r3, r2
 8004c9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ca0:	4319      	orrs	r1, r3
 8004ca2:	d110      	bne.n	8004cc6 <_dtoa_r+0xa26>
 8004ca4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ca8:	d029      	beq.n	8004cfe <_dtoa_r+0xa5e>
 8004caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dd02      	ble.n	8004cb6 <_dtoa_r+0xa16>
 8004cb0:	9b08      	ldr	r3, [sp, #32]
 8004cb2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004cb6:	9b02      	ldr	r3, [sp, #8]
 8004cb8:	f883 8000 	strb.w	r8, [r3]
 8004cbc:	e63b      	b.n	8004936 <_dtoa_r+0x696>
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	e7bb      	b.n	8004c3a <_dtoa_r+0x99a>
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	e7e1      	b.n	8004c8a <_dtoa_r+0x9ea>
 8004cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db04      	blt.n	8004cd6 <_dtoa_r+0xa36>
 8004ccc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	d120      	bne.n	8004d18 <_dtoa_r+0xa78>
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	dded      	ble.n	8004cb6 <_dtoa_r+0xa16>
 8004cda:	4649      	mov	r1, r9
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4658      	mov	r0, fp
 8004ce0:	f000 fbfa 	bl	80054d8 <__lshift>
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	4681      	mov	r9, r0
 8004ce8:	f000 fc62 	bl	80055b0 <__mcmp>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	dc03      	bgt.n	8004cf8 <_dtoa_r+0xa58>
 8004cf0:	d1e1      	bne.n	8004cb6 <_dtoa_r+0xa16>
 8004cf2:	f018 0f01 	tst.w	r8, #1
 8004cf6:	d0de      	beq.n	8004cb6 <_dtoa_r+0xa16>
 8004cf8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004cfc:	d1d8      	bne.n	8004cb0 <_dtoa_r+0xa10>
 8004cfe:	2339      	movs	r3, #57	@ 0x39
 8004d00:	9a02      	ldr	r2, [sp, #8]
 8004d02:	7013      	strb	r3, [r2, #0]
 8004d04:	4633      	mov	r3, r6
 8004d06:	461e      	mov	r6, r3
 8004d08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	2a39      	cmp	r2, #57	@ 0x39
 8004d10:	d052      	beq.n	8004db8 <_dtoa_r+0xb18>
 8004d12:	3201      	adds	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e60e      	b.n	8004936 <_dtoa_r+0x696>
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	dd07      	ble.n	8004d2c <_dtoa_r+0xa8c>
 8004d1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004d20:	d0ed      	beq.n	8004cfe <_dtoa_r+0xa5e>
 8004d22:	9a02      	ldr	r2, [sp, #8]
 8004d24:	f108 0301 	add.w	r3, r8, #1
 8004d28:	7013      	strb	r3, [r2, #0]
 8004d2a:	e604      	b.n	8004936 <_dtoa_r+0x696>
 8004d2c:	9b07      	ldr	r3, [sp, #28]
 8004d2e:	9a07      	ldr	r2, [sp, #28]
 8004d30:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004d34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d028      	beq.n	8004d8c <_dtoa_r+0xaec>
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	220a      	movs	r2, #10
 8004d40:	4658      	mov	r0, fp
 8004d42:	f000 f9d5 	bl	80050f0 <__multadd>
 8004d46:	42af      	cmp	r7, r5
 8004d48:	4681      	mov	r9, r0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	f04f 020a 	mov.w	r2, #10
 8004d52:	4639      	mov	r1, r7
 8004d54:	4658      	mov	r0, fp
 8004d56:	d107      	bne.n	8004d68 <_dtoa_r+0xac8>
 8004d58:	f000 f9ca 	bl	80050f0 <__multadd>
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	4605      	mov	r5, r0
 8004d60:	9b07      	ldr	r3, [sp, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	9307      	str	r3, [sp, #28]
 8004d66:	e774      	b.n	8004c52 <_dtoa_r+0x9b2>
 8004d68:	f000 f9c2 	bl	80050f0 <__multadd>
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4607      	mov	r7, r0
 8004d70:	2300      	movs	r3, #0
 8004d72:	220a      	movs	r2, #10
 8004d74:	4658      	mov	r0, fp
 8004d76:	f000 f9bb 	bl	80050f0 <__multadd>
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	e7f0      	b.n	8004d60 <_dtoa_r+0xac0>
 8004d7e:	9b08      	ldr	r3, [sp, #32]
 8004d80:	2700      	movs	r7, #0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bfcc      	ite	gt
 8004d86:	461e      	movgt	r6, r3
 8004d88:	2601      	movle	r6, #1
 8004d8a:	4456      	add	r6, sl
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4658      	mov	r0, fp
 8004d92:	f000 fba1 	bl	80054d8 <__lshift>
 8004d96:	4621      	mov	r1, r4
 8004d98:	4681      	mov	r9, r0
 8004d9a:	f000 fc09 	bl	80055b0 <__mcmp>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	dcb0      	bgt.n	8004d04 <_dtoa_r+0xa64>
 8004da2:	d102      	bne.n	8004daa <_dtoa_r+0xb0a>
 8004da4:	f018 0f01 	tst.w	r8, #1
 8004da8:	d1ac      	bne.n	8004d04 <_dtoa_r+0xa64>
 8004daa:	4633      	mov	r3, r6
 8004dac:	461e      	mov	r6, r3
 8004dae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004db2:	2a30      	cmp	r2, #48	@ 0x30
 8004db4:	d0fa      	beq.n	8004dac <_dtoa_r+0xb0c>
 8004db6:	e5be      	b.n	8004936 <_dtoa_r+0x696>
 8004db8:	459a      	cmp	sl, r3
 8004dba:	d1a4      	bne.n	8004d06 <_dtoa_r+0xa66>
 8004dbc:	9b04      	ldr	r3, [sp, #16]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	9304      	str	r3, [sp, #16]
 8004dc2:	2331      	movs	r3, #49	@ 0x31
 8004dc4:	f88a 3000 	strb.w	r3, [sl]
 8004dc8:	e5b5      	b.n	8004936 <_dtoa_r+0x696>
 8004dca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004dcc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004e2c <_dtoa_r+0xb8c>
 8004dd0:	b11b      	cbz	r3, 8004dda <_dtoa_r+0xb3a>
 8004dd2:	f10a 0308 	add.w	r3, sl, #8
 8004dd6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	4650      	mov	r0, sl
 8004ddc:	b017      	add	sp, #92	@ 0x5c
 8004dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	f77f ae3d 	ble.w	8004a64 <_dtoa_r+0x7c4>
 8004dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004dec:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dee:	2001      	movs	r0, #1
 8004df0:	e65b      	b.n	8004aaa <_dtoa_r+0x80a>
 8004df2:	9b08      	ldr	r3, [sp, #32]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f77f aed6 	ble.w	8004ba6 <_dtoa_r+0x906>
 8004dfa:	4656      	mov	r6, sl
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4648      	mov	r0, r9
 8004e00:	f7ff f9c4 	bl	800418c <quorem>
 8004e04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e08:	9b08      	ldr	r3, [sp, #32]
 8004e0a:	f806 8b01 	strb.w	r8, [r6], #1
 8004e0e:	eba6 020a 	sub.w	r2, r6, sl
 8004e12:	4293      	cmp	r3, r2
 8004e14:	ddb3      	ble.n	8004d7e <_dtoa_r+0xade>
 8004e16:	4649      	mov	r1, r9
 8004e18:	2300      	movs	r3, #0
 8004e1a:	220a      	movs	r2, #10
 8004e1c:	4658      	mov	r0, fp
 8004e1e:	f000 f967 	bl	80050f0 <__multadd>
 8004e22:	4681      	mov	r9, r0
 8004e24:	e7ea      	b.n	8004dfc <_dtoa_r+0xb5c>
 8004e26:	bf00      	nop
 8004e28:	0800799f 	.word	0x0800799f
 8004e2c:	08007923 	.word	0x08007923

08004e30 <_free_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4605      	mov	r5, r0
 8004e34:	2900      	cmp	r1, #0
 8004e36:	d040      	beq.n	8004eba <_free_r+0x8a>
 8004e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e3c:	1f0c      	subs	r4, r1, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfb8      	it	lt
 8004e42:	18e4      	addlt	r4, r4, r3
 8004e44:	f000 f8e6 	bl	8005014 <__malloc_lock>
 8004e48:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <_free_r+0x8c>)
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	b933      	cbnz	r3, 8004e5c <_free_r+0x2c>
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	6014      	str	r4, [r2, #0]
 8004e52:	4628      	mov	r0, r5
 8004e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e58:	f000 b8e2 	b.w	8005020 <__malloc_unlock>
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d908      	bls.n	8004e72 <_free_r+0x42>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	1821      	adds	r1, r4, r0
 8004e64:	428b      	cmp	r3, r1
 8004e66:	bf01      	itttt	eq
 8004e68:	6819      	ldreq	r1, [r3, #0]
 8004e6a:	685b      	ldreq	r3, [r3, #4]
 8004e6c:	1809      	addeq	r1, r1, r0
 8004e6e:	6021      	streq	r1, [r4, #0]
 8004e70:	e7ed      	b.n	8004e4e <_free_r+0x1e>
 8004e72:	461a      	mov	r2, r3
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	b10b      	cbz	r3, 8004e7c <_free_r+0x4c>
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d9fa      	bls.n	8004e72 <_free_r+0x42>
 8004e7c:	6811      	ldr	r1, [r2, #0]
 8004e7e:	1850      	adds	r0, r2, r1
 8004e80:	42a0      	cmp	r0, r4
 8004e82:	d10b      	bne.n	8004e9c <_free_r+0x6c>
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	4401      	add	r1, r0
 8004e88:	1850      	adds	r0, r2, r1
 8004e8a:	4283      	cmp	r3, r0
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	d1e0      	bne.n	8004e52 <_free_r+0x22>
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4408      	add	r0, r1
 8004e96:	6010      	str	r0, [r2, #0]
 8004e98:	6053      	str	r3, [r2, #4]
 8004e9a:	e7da      	b.n	8004e52 <_free_r+0x22>
 8004e9c:	d902      	bls.n	8004ea4 <_free_r+0x74>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	e7d6      	b.n	8004e52 <_free_r+0x22>
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	1821      	adds	r1, r4, r0
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	bf01      	itttt	eq
 8004eac:	6819      	ldreq	r1, [r3, #0]
 8004eae:	685b      	ldreq	r3, [r3, #4]
 8004eb0:	1809      	addeq	r1, r1, r0
 8004eb2:	6021      	streq	r1, [r4, #0]
 8004eb4:	6063      	str	r3, [r4, #4]
 8004eb6:	6054      	str	r4, [r2, #4]
 8004eb8:	e7cb      	b.n	8004e52 <_free_r+0x22>
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	200003d8 	.word	0x200003d8

08004ec0 <malloc>:
 8004ec0:	4b02      	ldr	r3, [pc, #8]	@ (8004ecc <malloc+0xc>)
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	f000 b825 	b.w	8004f14 <_malloc_r>
 8004eca:	bf00      	nop
 8004ecc:	20000018 	.word	0x20000018

08004ed0 <sbrk_aligned>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8004f10 <sbrk_aligned+0x40>)
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	6831      	ldr	r1, [r6, #0]
 8004ed8:	4605      	mov	r5, r0
 8004eda:	b911      	cbnz	r1, 8004ee2 <sbrk_aligned+0x12>
 8004edc:	f001 fdf6 	bl	8006acc <_sbrk_r>
 8004ee0:	6030      	str	r0, [r6, #0]
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f001 fdf1 	bl	8006acc <_sbrk_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d103      	bne.n	8004ef6 <sbrk_aligned+0x26>
 8004eee:	f04f 34ff 	mov.w	r4, #4294967295
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	bd70      	pop	{r4, r5, r6, pc}
 8004ef6:	1cc4      	adds	r4, r0, #3
 8004ef8:	f024 0403 	bic.w	r4, r4, #3
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d0f8      	beq.n	8004ef2 <sbrk_aligned+0x22>
 8004f00:	1a21      	subs	r1, r4, r0
 8004f02:	4628      	mov	r0, r5
 8004f04:	f001 fde2 	bl	8006acc <_sbrk_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d1f2      	bne.n	8004ef2 <sbrk_aligned+0x22>
 8004f0c:	e7ef      	b.n	8004eee <sbrk_aligned+0x1e>
 8004f0e:	bf00      	nop
 8004f10:	200003d4 	.word	0x200003d4

08004f14 <_malloc_r>:
 8004f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f18:	1ccd      	adds	r5, r1, #3
 8004f1a:	f025 0503 	bic.w	r5, r5, #3
 8004f1e:	3508      	adds	r5, #8
 8004f20:	2d0c      	cmp	r5, #12
 8004f22:	bf38      	it	cc
 8004f24:	250c      	movcc	r5, #12
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	4606      	mov	r6, r0
 8004f2a:	db01      	blt.n	8004f30 <_malloc_r+0x1c>
 8004f2c:	42a9      	cmp	r1, r5
 8004f2e:	d904      	bls.n	8004f3a <_malloc_r+0x26>
 8004f30:	230c      	movs	r3, #12
 8004f32:	6033      	str	r3, [r6, #0]
 8004f34:	2000      	movs	r0, #0
 8004f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005010 <_malloc_r+0xfc>
 8004f3e:	f000 f869 	bl	8005014 <__malloc_lock>
 8004f42:	f8d8 3000 	ldr.w	r3, [r8]
 8004f46:	461c      	mov	r4, r3
 8004f48:	bb44      	cbnz	r4, 8004f9c <_malloc_r+0x88>
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7ff ffbf 	bl	8004ed0 <sbrk_aligned>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	4604      	mov	r4, r0
 8004f56:	d158      	bne.n	800500a <_malloc_r+0xf6>
 8004f58:	f8d8 4000 	ldr.w	r4, [r8]
 8004f5c:	4627      	mov	r7, r4
 8004f5e:	2f00      	cmp	r7, #0
 8004f60:	d143      	bne.n	8004fea <_malloc_r+0xd6>
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	d04b      	beq.n	8004ffe <_malloc_r+0xea>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	4639      	mov	r1, r7
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	eb04 0903 	add.w	r9, r4, r3
 8004f70:	f001 fdac 	bl	8006acc <_sbrk_r>
 8004f74:	4581      	cmp	r9, r0
 8004f76:	d142      	bne.n	8004ffe <_malloc_r+0xea>
 8004f78:	6821      	ldr	r1, [r4, #0]
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	1a6d      	subs	r5, r5, r1
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7ff ffa6 	bl	8004ed0 <sbrk_aligned>
 8004f84:	3001      	adds	r0, #1
 8004f86:	d03a      	beq.n	8004ffe <_malloc_r+0xea>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	442b      	add	r3, r5
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	bb62      	cbnz	r2, 8004ff0 <_malloc_r+0xdc>
 8004f96:	f8c8 7000 	str.w	r7, [r8]
 8004f9a:	e00f      	b.n	8004fbc <_malloc_r+0xa8>
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	1b52      	subs	r2, r2, r5
 8004fa0:	d420      	bmi.n	8004fe4 <_malloc_r+0xd0>
 8004fa2:	2a0b      	cmp	r2, #11
 8004fa4:	d917      	bls.n	8004fd6 <_malloc_r+0xc2>
 8004fa6:	1961      	adds	r1, r4, r5
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	6025      	str	r5, [r4, #0]
 8004fac:	bf18      	it	ne
 8004fae:	6059      	strne	r1, [r3, #4]
 8004fb0:	6863      	ldr	r3, [r4, #4]
 8004fb2:	bf08      	it	eq
 8004fb4:	f8c8 1000 	streq.w	r1, [r8]
 8004fb8:	5162      	str	r2, [r4, r5]
 8004fba:	604b      	str	r3, [r1, #4]
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f000 f82f 	bl	8005020 <__malloc_unlock>
 8004fc2:	f104 000b 	add.w	r0, r4, #11
 8004fc6:	1d23      	adds	r3, r4, #4
 8004fc8:	f020 0007 	bic.w	r0, r0, #7
 8004fcc:	1ac2      	subs	r2, r0, r3
 8004fce:	bf1c      	itt	ne
 8004fd0:	1a1b      	subne	r3, r3, r0
 8004fd2:	50a3      	strne	r3, [r4, r2]
 8004fd4:	e7af      	b.n	8004f36 <_malloc_r+0x22>
 8004fd6:	6862      	ldr	r2, [r4, #4]
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	bf0c      	ite	eq
 8004fdc:	f8c8 2000 	streq.w	r2, [r8]
 8004fe0:	605a      	strne	r2, [r3, #4]
 8004fe2:	e7eb      	b.n	8004fbc <_malloc_r+0xa8>
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	6864      	ldr	r4, [r4, #4]
 8004fe8:	e7ae      	b.n	8004f48 <_malloc_r+0x34>
 8004fea:	463c      	mov	r4, r7
 8004fec:	687f      	ldr	r7, [r7, #4]
 8004fee:	e7b6      	b.n	8004f5e <_malloc_r+0x4a>
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	d1fb      	bne.n	8004ff0 <_malloc_r+0xdc>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6053      	str	r3, [r2, #4]
 8004ffc:	e7de      	b.n	8004fbc <_malloc_r+0xa8>
 8004ffe:	230c      	movs	r3, #12
 8005000:	4630      	mov	r0, r6
 8005002:	6033      	str	r3, [r6, #0]
 8005004:	f000 f80c 	bl	8005020 <__malloc_unlock>
 8005008:	e794      	b.n	8004f34 <_malloc_r+0x20>
 800500a:	6005      	str	r5, [r0, #0]
 800500c:	e7d6      	b.n	8004fbc <_malloc_r+0xa8>
 800500e:	bf00      	nop
 8005010:	200003d8 	.word	0x200003d8

08005014 <__malloc_lock>:
 8005014:	4801      	ldr	r0, [pc, #4]	@ (800501c <__malloc_lock+0x8>)
 8005016:	f7ff b8a4 	b.w	8004162 <__retarget_lock_acquire_recursive>
 800501a:	bf00      	nop
 800501c:	200003d0 	.word	0x200003d0

08005020 <__malloc_unlock>:
 8005020:	4801      	ldr	r0, [pc, #4]	@ (8005028 <__malloc_unlock+0x8>)
 8005022:	f7ff b89f 	b.w	8004164 <__retarget_lock_release_recursive>
 8005026:	bf00      	nop
 8005028:	200003d0 	.word	0x200003d0

0800502c <_Balloc>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	69c6      	ldr	r6, [r0, #28]
 8005030:	4604      	mov	r4, r0
 8005032:	460d      	mov	r5, r1
 8005034:	b976      	cbnz	r6, 8005054 <_Balloc+0x28>
 8005036:	2010      	movs	r0, #16
 8005038:	f7ff ff42 	bl	8004ec0 <malloc>
 800503c:	4602      	mov	r2, r0
 800503e:	61e0      	str	r0, [r4, #28]
 8005040:	b920      	cbnz	r0, 800504c <_Balloc+0x20>
 8005042:	216b      	movs	r1, #107	@ 0x6b
 8005044:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <_Balloc+0x78>)
 8005046:	4818      	ldr	r0, [pc, #96]	@ (80050a8 <_Balloc+0x7c>)
 8005048:	f001 fd64 	bl	8006b14 <__assert_func>
 800504c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005050:	6006      	str	r6, [r0, #0]
 8005052:	60c6      	str	r6, [r0, #12]
 8005054:	69e6      	ldr	r6, [r4, #28]
 8005056:	68f3      	ldr	r3, [r6, #12]
 8005058:	b183      	cbz	r3, 800507c <_Balloc+0x50>
 800505a:	69e3      	ldr	r3, [r4, #28]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005062:	b9b8      	cbnz	r0, 8005094 <_Balloc+0x68>
 8005064:	2101      	movs	r1, #1
 8005066:	fa01 f605 	lsl.w	r6, r1, r5
 800506a:	1d72      	adds	r2, r6, #5
 800506c:	4620      	mov	r0, r4
 800506e:	0092      	lsls	r2, r2, #2
 8005070:	f001 fd6e 	bl	8006b50 <_calloc_r>
 8005074:	b160      	cbz	r0, 8005090 <_Balloc+0x64>
 8005076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800507a:	e00e      	b.n	800509a <_Balloc+0x6e>
 800507c:	2221      	movs	r2, #33	@ 0x21
 800507e:	2104      	movs	r1, #4
 8005080:	4620      	mov	r0, r4
 8005082:	f001 fd65 	bl	8006b50 <_calloc_r>
 8005086:	69e3      	ldr	r3, [r4, #28]
 8005088:	60f0      	str	r0, [r6, #12]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e4      	bne.n	800505a <_Balloc+0x2e>
 8005090:	2000      	movs	r0, #0
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	6802      	ldr	r2, [r0, #0]
 8005096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800509a:	2300      	movs	r3, #0
 800509c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050a0:	e7f7      	b.n	8005092 <_Balloc+0x66>
 80050a2:	bf00      	nop
 80050a4:	08007930 	.word	0x08007930
 80050a8:	080079b0 	.word	0x080079b0

080050ac <_Bfree>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	69c6      	ldr	r6, [r0, #28]
 80050b0:	4605      	mov	r5, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	b976      	cbnz	r6, 80050d4 <_Bfree+0x28>
 80050b6:	2010      	movs	r0, #16
 80050b8:	f7ff ff02 	bl	8004ec0 <malloc>
 80050bc:	4602      	mov	r2, r0
 80050be:	61e8      	str	r0, [r5, #28]
 80050c0:	b920      	cbnz	r0, 80050cc <_Bfree+0x20>
 80050c2:	218f      	movs	r1, #143	@ 0x8f
 80050c4:	4b08      	ldr	r3, [pc, #32]	@ (80050e8 <_Bfree+0x3c>)
 80050c6:	4809      	ldr	r0, [pc, #36]	@ (80050ec <_Bfree+0x40>)
 80050c8:	f001 fd24 	bl	8006b14 <__assert_func>
 80050cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050d0:	6006      	str	r6, [r0, #0]
 80050d2:	60c6      	str	r6, [r0, #12]
 80050d4:	b13c      	cbz	r4, 80050e6 <_Bfree+0x3a>
 80050d6:	69eb      	ldr	r3, [r5, #28]
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050e0:	6021      	str	r1, [r4, #0]
 80050e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	08007930 	.word	0x08007930
 80050ec:	080079b0 	.word	0x080079b0

080050f0 <__multadd>:
 80050f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f4:	4607      	mov	r7, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	461e      	mov	r6, r3
 80050fa:	2000      	movs	r0, #0
 80050fc:	690d      	ldr	r5, [r1, #16]
 80050fe:	f101 0c14 	add.w	ip, r1, #20
 8005102:	f8dc 3000 	ldr.w	r3, [ip]
 8005106:	3001      	adds	r0, #1
 8005108:	b299      	uxth	r1, r3
 800510a:	fb02 6101 	mla	r1, r2, r1, r6
 800510e:	0c1e      	lsrs	r6, r3, #16
 8005110:	0c0b      	lsrs	r3, r1, #16
 8005112:	fb02 3306 	mla	r3, r2, r6, r3
 8005116:	b289      	uxth	r1, r1
 8005118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800511c:	4285      	cmp	r5, r0
 800511e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005122:	f84c 1b04 	str.w	r1, [ip], #4
 8005126:	dcec      	bgt.n	8005102 <__multadd+0x12>
 8005128:	b30e      	cbz	r6, 800516e <__multadd+0x7e>
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	42ab      	cmp	r3, r5
 800512e:	dc19      	bgt.n	8005164 <__multadd+0x74>
 8005130:	6861      	ldr	r1, [r4, #4]
 8005132:	4638      	mov	r0, r7
 8005134:	3101      	adds	r1, #1
 8005136:	f7ff ff79 	bl	800502c <_Balloc>
 800513a:	4680      	mov	r8, r0
 800513c:	b928      	cbnz	r0, 800514a <__multadd+0x5a>
 800513e:	4602      	mov	r2, r0
 8005140:	21ba      	movs	r1, #186	@ 0xba
 8005142:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <__multadd+0x84>)
 8005144:	480c      	ldr	r0, [pc, #48]	@ (8005178 <__multadd+0x88>)
 8005146:	f001 fce5 	bl	8006b14 <__assert_func>
 800514a:	6922      	ldr	r2, [r4, #16]
 800514c:	f104 010c 	add.w	r1, r4, #12
 8005150:	3202      	adds	r2, #2
 8005152:	0092      	lsls	r2, r2, #2
 8005154:	300c      	adds	r0, #12
 8005156:	f001 fcc9 	bl	8006aec <memcpy>
 800515a:	4621      	mov	r1, r4
 800515c:	4638      	mov	r0, r7
 800515e:	f7ff ffa5 	bl	80050ac <_Bfree>
 8005162:	4644      	mov	r4, r8
 8005164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005168:	3501      	adds	r5, #1
 800516a:	615e      	str	r6, [r3, #20]
 800516c:	6125      	str	r5, [r4, #16]
 800516e:	4620      	mov	r0, r4
 8005170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005174:	0800799f 	.word	0x0800799f
 8005178:	080079b0 	.word	0x080079b0

0800517c <__s2b>:
 800517c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005180:	4615      	mov	r5, r2
 8005182:	2209      	movs	r2, #9
 8005184:	461f      	mov	r7, r3
 8005186:	3308      	adds	r3, #8
 8005188:	460c      	mov	r4, r1
 800518a:	fb93 f3f2 	sdiv	r3, r3, r2
 800518e:	4606      	mov	r6, r0
 8005190:	2201      	movs	r2, #1
 8005192:	2100      	movs	r1, #0
 8005194:	429a      	cmp	r2, r3
 8005196:	db09      	blt.n	80051ac <__s2b+0x30>
 8005198:	4630      	mov	r0, r6
 800519a:	f7ff ff47 	bl	800502c <_Balloc>
 800519e:	b940      	cbnz	r0, 80051b2 <__s2b+0x36>
 80051a0:	4602      	mov	r2, r0
 80051a2:	21d3      	movs	r1, #211	@ 0xd3
 80051a4:	4b18      	ldr	r3, [pc, #96]	@ (8005208 <__s2b+0x8c>)
 80051a6:	4819      	ldr	r0, [pc, #100]	@ (800520c <__s2b+0x90>)
 80051a8:	f001 fcb4 	bl	8006b14 <__assert_func>
 80051ac:	0052      	lsls	r2, r2, #1
 80051ae:	3101      	adds	r1, #1
 80051b0:	e7f0      	b.n	8005194 <__s2b+0x18>
 80051b2:	9b08      	ldr	r3, [sp, #32]
 80051b4:	2d09      	cmp	r5, #9
 80051b6:	6143      	str	r3, [r0, #20]
 80051b8:	f04f 0301 	mov.w	r3, #1
 80051bc:	6103      	str	r3, [r0, #16]
 80051be:	dd16      	ble.n	80051ee <__s2b+0x72>
 80051c0:	f104 0909 	add.w	r9, r4, #9
 80051c4:	46c8      	mov	r8, r9
 80051c6:	442c      	add	r4, r5
 80051c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80051cc:	4601      	mov	r1, r0
 80051ce:	220a      	movs	r2, #10
 80051d0:	4630      	mov	r0, r6
 80051d2:	3b30      	subs	r3, #48	@ 0x30
 80051d4:	f7ff ff8c 	bl	80050f0 <__multadd>
 80051d8:	45a0      	cmp	r8, r4
 80051da:	d1f5      	bne.n	80051c8 <__s2b+0x4c>
 80051dc:	f1a5 0408 	sub.w	r4, r5, #8
 80051e0:	444c      	add	r4, r9
 80051e2:	1b2d      	subs	r5, r5, r4
 80051e4:	1963      	adds	r3, r4, r5
 80051e6:	42bb      	cmp	r3, r7
 80051e8:	db04      	blt.n	80051f4 <__s2b+0x78>
 80051ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ee:	2509      	movs	r5, #9
 80051f0:	340a      	adds	r4, #10
 80051f2:	e7f6      	b.n	80051e2 <__s2b+0x66>
 80051f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80051f8:	4601      	mov	r1, r0
 80051fa:	220a      	movs	r2, #10
 80051fc:	4630      	mov	r0, r6
 80051fe:	3b30      	subs	r3, #48	@ 0x30
 8005200:	f7ff ff76 	bl	80050f0 <__multadd>
 8005204:	e7ee      	b.n	80051e4 <__s2b+0x68>
 8005206:	bf00      	nop
 8005208:	0800799f 	.word	0x0800799f
 800520c:	080079b0 	.word	0x080079b0

08005210 <__hi0bits>:
 8005210:	4603      	mov	r3, r0
 8005212:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005216:	bf3a      	itte	cc
 8005218:	0403      	lslcc	r3, r0, #16
 800521a:	2010      	movcc	r0, #16
 800521c:	2000      	movcs	r0, #0
 800521e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005222:	bf3c      	itt	cc
 8005224:	021b      	lslcc	r3, r3, #8
 8005226:	3008      	addcc	r0, #8
 8005228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522c:	bf3c      	itt	cc
 800522e:	011b      	lslcc	r3, r3, #4
 8005230:	3004      	addcc	r0, #4
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005236:	bf3c      	itt	cc
 8005238:	009b      	lslcc	r3, r3, #2
 800523a:	3002      	addcc	r0, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	db05      	blt.n	800524c <__hi0bits+0x3c>
 8005240:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005244:	f100 0001 	add.w	r0, r0, #1
 8005248:	bf08      	it	eq
 800524a:	2020      	moveq	r0, #32
 800524c:	4770      	bx	lr

0800524e <__lo0bits>:
 800524e:	6803      	ldr	r3, [r0, #0]
 8005250:	4602      	mov	r2, r0
 8005252:	f013 0007 	ands.w	r0, r3, #7
 8005256:	d00b      	beq.n	8005270 <__lo0bits+0x22>
 8005258:	07d9      	lsls	r1, r3, #31
 800525a:	d421      	bmi.n	80052a0 <__lo0bits+0x52>
 800525c:	0798      	lsls	r0, r3, #30
 800525e:	bf49      	itett	mi
 8005260:	085b      	lsrmi	r3, r3, #1
 8005262:	089b      	lsrpl	r3, r3, #2
 8005264:	2001      	movmi	r0, #1
 8005266:	6013      	strmi	r3, [r2, #0]
 8005268:	bf5c      	itt	pl
 800526a:	2002      	movpl	r0, #2
 800526c:	6013      	strpl	r3, [r2, #0]
 800526e:	4770      	bx	lr
 8005270:	b299      	uxth	r1, r3
 8005272:	b909      	cbnz	r1, 8005278 <__lo0bits+0x2a>
 8005274:	2010      	movs	r0, #16
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	b2d9      	uxtb	r1, r3
 800527a:	b909      	cbnz	r1, 8005280 <__lo0bits+0x32>
 800527c:	3008      	adds	r0, #8
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	0719      	lsls	r1, r3, #28
 8005282:	bf04      	itt	eq
 8005284:	091b      	lsreq	r3, r3, #4
 8005286:	3004      	addeq	r0, #4
 8005288:	0799      	lsls	r1, r3, #30
 800528a:	bf04      	itt	eq
 800528c:	089b      	lsreq	r3, r3, #2
 800528e:	3002      	addeq	r0, #2
 8005290:	07d9      	lsls	r1, r3, #31
 8005292:	d403      	bmi.n	800529c <__lo0bits+0x4e>
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	f100 0001 	add.w	r0, r0, #1
 800529a:	d003      	beq.n	80052a4 <__lo0bits+0x56>
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4770      	bx	lr
 80052a0:	2000      	movs	r0, #0
 80052a2:	4770      	bx	lr
 80052a4:	2020      	movs	r0, #32
 80052a6:	4770      	bx	lr

080052a8 <__i2b>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	460c      	mov	r4, r1
 80052ac:	2101      	movs	r1, #1
 80052ae:	f7ff febd 	bl	800502c <_Balloc>
 80052b2:	4602      	mov	r2, r0
 80052b4:	b928      	cbnz	r0, 80052c2 <__i2b+0x1a>
 80052b6:	f240 1145 	movw	r1, #325	@ 0x145
 80052ba:	4b04      	ldr	r3, [pc, #16]	@ (80052cc <__i2b+0x24>)
 80052bc:	4804      	ldr	r0, [pc, #16]	@ (80052d0 <__i2b+0x28>)
 80052be:	f001 fc29 	bl	8006b14 <__assert_func>
 80052c2:	2301      	movs	r3, #1
 80052c4:	6144      	str	r4, [r0, #20]
 80052c6:	6103      	str	r3, [r0, #16]
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	bf00      	nop
 80052cc:	0800799f 	.word	0x0800799f
 80052d0:	080079b0 	.word	0x080079b0

080052d4 <__multiply>:
 80052d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	4614      	mov	r4, r2
 80052da:	690a      	ldr	r2, [r1, #16]
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	460f      	mov	r7, r1
 80052e0:	429a      	cmp	r2, r3
 80052e2:	bfa2      	ittt	ge
 80052e4:	4623      	movge	r3, r4
 80052e6:	460c      	movge	r4, r1
 80052e8:	461f      	movge	r7, r3
 80052ea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80052ee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80052f2:	68a3      	ldr	r3, [r4, #8]
 80052f4:	6861      	ldr	r1, [r4, #4]
 80052f6:	eb0a 0609 	add.w	r6, sl, r9
 80052fa:	42b3      	cmp	r3, r6
 80052fc:	b085      	sub	sp, #20
 80052fe:	bfb8      	it	lt
 8005300:	3101      	addlt	r1, #1
 8005302:	f7ff fe93 	bl	800502c <_Balloc>
 8005306:	b930      	cbnz	r0, 8005316 <__multiply+0x42>
 8005308:	4602      	mov	r2, r0
 800530a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800530e:	4b43      	ldr	r3, [pc, #268]	@ (800541c <__multiply+0x148>)
 8005310:	4843      	ldr	r0, [pc, #268]	@ (8005420 <__multiply+0x14c>)
 8005312:	f001 fbff 	bl	8006b14 <__assert_func>
 8005316:	f100 0514 	add.w	r5, r0, #20
 800531a:	462b      	mov	r3, r5
 800531c:	2200      	movs	r2, #0
 800531e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005322:	4543      	cmp	r3, r8
 8005324:	d321      	bcc.n	800536a <__multiply+0x96>
 8005326:	f107 0114 	add.w	r1, r7, #20
 800532a:	f104 0214 	add.w	r2, r4, #20
 800532e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005332:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005336:	9302      	str	r3, [sp, #8]
 8005338:	1b13      	subs	r3, r2, r4
 800533a:	3b15      	subs	r3, #21
 800533c:	f023 0303 	bic.w	r3, r3, #3
 8005340:	3304      	adds	r3, #4
 8005342:	f104 0715 	add.w	r7, r4, #21
 8005346:	42ba      	cmp	r2, r7
 8005348:	bf38      	it	cc
 800534a:	2304      	movcc	r3, #4
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	9103      	str	r1, [sp, #12]
 8005352:	428b      	cmp	r3, r1
 8005354:	d80c      	bhi.n	8005370 <__multiply+0x9c>
 8005356:	2e00      	cmp	r6, #0
 8005358:	dd03      	ble.n	8005362 <__multiply+0x8e>
 800535a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800535e:	2b00      	cmp	r3, #0
 8005360:	d05a      	beq.n	8005418 <__multiply+0x144>
 8005362:	6106      	str	r6, [r0, #16]
 8005364:	b005      	add	sp, #20
 8005366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536a:	f843 2b04 	str.w	r2, [r3], #4
 800536e:	e7d8      	b.n	8005322 <__multiply+0x4e>
 8005370:	f8b1 a000 	ldrh.w	sl, [r1]
 8005374:	f1ba 0f00 	cmp.w	sl, #0
 8005378:	d023      	beq.n	80053c2 <__multiply+0xee>
 800537a:	46a9      	mov	r9, r5
 800537c:	f04f 0c00 	mov.w	ip, #0
 8005380:	f104 0e14 	add.w	lr, r4, #20
 8005384:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005388:	f8d9 3000 	ldr.w	r3, [r9]
 800538c:	fa1f fb87 	uxth.w	fp, r7
 8005390:	b29b      	uxth	r3, r3
 8005392:	fb0a 330b 	mla	r3, sl, fp, r3
 8005396:	4463      	add	r3, ip
 8005398:	f8d9 c000 	ldr.w	ip, [r9]
 800539c:	0c3f      	lsrs	r7, r7, #16
 800539e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80053a2:	fb0a c707 	mla	r7, sl, r7, ip
 80053a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80053b0:	4572      	cmp	r2, lr
 80053b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80053b6:	f849 3b04 	str.w	r3, [r9], #4
 80053ba:	d8e3      	bhi.n	8005384 <__multiply+0xb0>
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	f845 c003 	str.w	ip, [r5, r3]
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	3104      	adds	r1, #4
 80053c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80053ca:	f1b9 0f00 	cmp.w	r9, #0
 80053ce:	d021      	beq.n	8005414 <__multiply+0x140>
 80053d0:	46ae      	mov	lr, r5
 80053d2:	f04f 0a00 	mov.w	sl, #0
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	f104 0c14 	add.w	ip, r4, #20
 80053dc:	f8bc b000 	ldrh.w	fp, [ip]
 80053e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	fb09 770b 	mla	r7, r9, fp, r7
 80053ea:	4457      	add	r7, sl
 80053ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80053f0:	f84e 3b04 	str.w	r3, [lr], #4
 80053f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80053f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053fc:	f8be 3000 	ldrh.w	r3, [lr]
 8005400:	4562      	cmp	r2, ip
 8005402:	fb09 330a 	mla	r3, r9, sl, r3
 8005406:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800540a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800540e:	d8e5      	bhi.n	80053dc <__multiply+0x108>
 8005410:	9f01      	ldr	r7, [sp, #4]
 8005412:	51eb      	str	r3, [r5, r7]
 8005414:	3504      	adds	r5, #4
 8005416:	e79a      	b.n	800534e <__multiply+0x7a>
 8005418:	3e01      	subs	r6, #1
 800541a:	e79c      	b.n	8005356 <__multiply+0x82>
 800541c:	0800799f 	.word	0x0800799f
 8005420:	080079b0 	.word	0x080079b0

08005424 <__pow5mult>:
 8005424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005428:	4615      	mov	r5, r2
 800542a:	f012 0203 	ands.w	r2, r2, #3
 800542e:	4607      	mov	r7, r0
 8005430:	460e      	mov	r6, r1
 8005432:	d007      	beq.n	8005444 <__pow5mult+0x20>
 8005434:	4c25      	ldr	r4, [pc, #148]	@ (80054cc <__pow5mult+0xa8>)
 8005436:	3a01      	subs	r2, #1
 8005438:	2300      	movs	r3, #0
 800543a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800543e:	f7ff fe57 	bl	80050f0 <__multadd>
 8005442:	4606      	mov	r6, r0
 8005444:	10ad      	asrs	r5, r5, #2
 8005446:	d03d      	beq.n	80054c4 <__pow5mult+0xa0>
 8005448:	69fc      	ldr	r4, [r7, #28]
 800544a:	b97c      	cbnz	r4, 800546c <__pow5mult+0x48>
 800544c:	2010      	movs	r0, #16
 800544e:	f7ff fd37 	bl	8004ec0 <malloc>
 8005452:	4602      	mov	r2, r0
 8005454:	61f8      	str	r0, [r7, #28]
 8005456:	b928      	cbnz	r0, 8005464 <__pow5mult+0x40>
 8005458:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800545c:	4b1c      	ldr	r3, [pc, #112]	@ (80054d0 <__pow5mult+0xac>)
 800545e:	481d      	ldr	r0, [pc, #116]	@ (80054d4 <__pow5mult+0xb0>)
 8005460:	f001 fb58 	bl	8006b14 <__assert_func>
 8005464:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005468:	6004      	str	r4, [r0, #0]
 800546a:	60c4      	str	r4, [r0, #12]
 800546c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005470:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005474:	b94c      	cbnz	r4, 800548a <__pow5mult+0x66>
 8005476:	f240 2171 	movw	r1, #625	@ 0x271
 800547a:	4638      	mov	r0, r7
 800547c:	f7ff ff14 	bl	80052a8 <__i2b>
 8005480:	2300      	movs	r3, #0
 8005482:	4604      	mov	r4, r0
 8005484:	f8c8 0008 	str.w	r0, [r8, #8]
 8005488:	6003      	str	r3, [r0, #0]
 800548a:	f04f 0900 	mov.w	r9, #0
 800548e:	07eb      	lsls	r3, r5, #31
 8005490:	d50a      	bpl.n	80054a8 <__pow5mult+0x84>
 8005492:	4631      	mov	r1, r6
 8005494:	4622      	mov	r2, r4
 8005496:	4638      	mov	r0, r7
 8005498:	f7ff ff1c 	bl	80052d4 <__multiply>
 800549c:	4680      	mov	r8, r0
 800549e:	4631      	mov	r1, r6
 80054a0:	4638      	mov	r0, r7
 80054a2:	f7ff fe03 	bl	80050ac <_Bfree>
 80054a6:	4646      	mov	r6, r8
 80054a8:	106d      	asrs	r5, r5, #1
 80054aa:	d00b      	beq.n	80054c4 <__pow5mult+0xa0>
 80054ac:	6820      	ldr	r0, [r4, #0]
 80054ae:	b938      	cbnz	r0, 80054c0 <__pow5mult+0x9c>
 80054b0:	4622      	mov	r2, r4
 80054b2:	4621      	mov	r1, r4
 80054b4:	4638      	mov	r0, r7
 80054b6:	f7ff ff0d 	bl	80052d4 <__multiply>
 80054ba:	6020      	str	r0, [r4, #0]
 80054bc:	f8c0 9000 	str.w	r9, [r0]
 80054c0:	4604      	mov	r4, r0
 80054c2:	e7e4      	b.n	800548e <__pow5mult+0x6a>
 80054c4:	4630      	mov	r0, r6
 80054c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ca:	bf00      	nop
 80054cc:	08007a0c 	.word	0x08007a0c
 80054d0:	08007930 	.word	0x08007930
 80054d4:	080079b0 	.word	0x080079b0

080054d8 <__lshift>:
 80054d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	460c      	mov	r4, r1
 80054de:	4607      	mov	r7, r0
 80054e0:	4691      	mov	r9, r2
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6849      	ldr	r1, [r1, #4]
 80054e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054ea:	68a3      	ldr	r3, [r4, #8]
 80054ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054f0:	f108 0601 	add.w	r6, r8, #1
 80054f4:	42b3      	cmp	r3, r6
 80054f6:	db0b      	blt.n	8005510 <__lshift+0x38>
 80054f8:	4638      	mov	r0, r7
 80054fa:	f7ff fd97 	bl	800502c <_Balloc>
 80054fe:	4605      	mov	r5, r0
 8005500:	b948      	cbnz	r0, 8005516 <__lshift+0x3e>
 8005502:	4602      	mov	r2, r0
 8005504:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005508:	4b27      	ldr	r3, [pc, #156]	@ (80055a8 <__lshift+0xd0>)
 800550a:	4828      	ldr	r0, [pc, #160]	@ (80055ac <__lshift+0xd4>)
 800550c:	f001 fb02 	bl	8006b14 <__assert_func>
 8005510:	3101      	adds	r1, #1
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	e7ee      	b.n	80054f4 <__lshift+0x1c>
 8005516:	2300      	movs	r3, #0
 8005518:	f100 0114 	add.w	r1, r0, #20
 800551c:	f100 0210 	add.w	r2, r0, #16
 8005520:	4618      	mov	r0, r3
 8005522:	4553      	cmp	r3, sl
 8005524:	db33      	blt.n	800558e <__lshift+0xb6>
 8005526:	6920      	ldr	r0, [r4, #16]
 8005528:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800552c:	f104 0314 	add.w	r3, r4, #20
 8005530:	f019 091f 	ands.w	r9, r9, #31
 8005534:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005538:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800553c:	d02b      	beq.n	8005596 <__lshift+0xbe>
 800553e:	468a      	mov	sl, r1
 8005540:	2200      	movs	r2, #0
 8005542:	f1c9 0e20 	rsb	lr, r9, #32
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	fa00 f009 	lsl.w	r0, r0, r9
 800554c:	4310      	orrs	r0, r2
 800554e:	f84a 0b04 	str.w	r0, [sl], #4
 8005552:	f853 2b04 	ldr.w	r2, [r3], #4
 8005556:	459c      	cmp	ip, r3
 8005558:	fa22 f20e 	lsr.w	r2, r2, lr
 800555c:	d8f3      	bhi.n	8005546 <__lshift+0x6e>
 800555e:	ebac 0304 	sub.w	r3, ip, r4
 8005562:	3b15      	subs	r3, #21
 8005564:	f023 0303 	bic.w	r3, r3, #3
 8005568:	3304      	adds	r3, #4
 800556a:	f104 0015 	add.w	r0, r4, #21
 800556e:	4584      	cmp	ip, r0
 8005570:	bf38      	it	cc
 8005572:	2304      	movcc	r3, #4
 8005574:	50ca      	str	r2, [r1, r3]
 8005576:	b10a      	cbz	r2, 800557c <__lshift+0xa4>
 8005578:	f108 0602 	add.w	r6, r8, #2
 800557c:	3e01      	subs	r6, #1
 800557e:	4638      	mov	r0, r7
 8005580:	4621      	mov	r1, r4
 8005582:	612e      	str	r6, [r5, #16]
 8005584:	f7ff fd92 	bl	80050ac <_Bfree>
 8005588:	4628      	mov	r0, r5
 800558a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005592:	3301      	adds	r3, #1
 8005594:	e7c5      	b.n	8005522 <__lshift+0x4a>
 8005596:	3904      	subs	r1, #4
 8005598:	f853 2b04 	ldr.w	r2, [r3], #4
 800559c:	459c      	cmp	ip, r3
 800559e:	f841 2f04 	str.w	r2, [r1, #4]!
 80055a2:	d8f9      	bhi.n	8005598 <__lshift+0xc0>
 80055a4:	e7ea      	b.n	800557c <__lshift+0xa4>
 80055a6:	bf00      	nop
 80055a8:	0800799f 	.word	0x0800799f
 80055ac:	080079b0 	.word	0x080079b0

080055b0 <__mcmp>:
 80055b0:	4603      	mov	r3, r0
 80055b2:	690a      	ldr	r2, [r1, #16]
 80055b4:	6900      	ldr	r0, [r0, #16]
 80055b6:	b530      	push	{r4, r5, lr}
 80055b8:	1a80      	subs	r0, r0, r2
 80055ba:	d10e      	bne.n	80055da <__mcmp+0x2a>
 80055bc:	3314      	adds	r3, #20
 80055be:	3114      	adds	r1, #20
 80055c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80055c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80055c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80055cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80055d0:	4295      	cmp	r5, r2
 80055d2:	d003      	beq.n	80055dc <__mcmp+0x2c>
 80055d4:	d205      	bcs.n	80055e2 <__mcmp+0x32>
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295
 80055da:	bd30      	pop	{r4, r5, pc}
 80055dc:	42a3      	cmp	r3, r4
 80055de:	d3f3      	bcc.n	80055c8 <__mcmp+0x18>
 80055e0:	e7fb      	b.n	80055da <__mcmp+0x2a>
 80055e2:	2001      	movs	r0, #1
 80055e4:	e7f9      	b.n	80055da <__mcmp+0x2a>
	...

080055e8 <__mdiff>:
 80055e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	4689      	mov	r9, r1
 80055ee:	4606      	mov	r6, r0
 80055f0:	4611      	mov	r1, r2
 80055f2:	4648      	mov	r0, r9
 80055f4:	4614      	mov	r4, r2
 80055f6:	f7ff ffdb 	bl	80055b0 <__mcmp>
 80055fa:	1e05      	subs	r5, r0, #0
 80055fc:	d112      	bne.n	8005624 <__mdiff+0x3c>
 80055fe:	4629      	mov	r1, r5
 8005600:	4630      	mov	r0, r6
 8005602:	f7ff fd13 	bl	800502c <_Balloc>
 8005606:	4602      	mov	r2, r0
 8005608:	b928      	cbnz	r0, 8005616 <__mdiff+0x2e>
 800560a:	f240 2137 	movw	r1, #567	@ 0x237
 800560e:	4b3e      	ldr	r3, [pc, #248]	@ (8005708 <__mdiff+0x120>)
 8005610:	483e      	ldr	r0, [pc, #248]	@ (800570c <__mdiff+0x124>)
 8005612:	f001 fa7f 	bl	8006b14 <__assert_func>
 8005616:	2301      	movs	r3, #1
 8005618:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800561c:	4610      	mov	r0, r2
 800561e:	b003      	add	sp, #12
 8005620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	bfbc      	itt	lt
 8005626:	464b      	movlt	r3, r9
 8005628:	46a1      	movlt	r9, r4
 800562a:	4630      	mov	r0, r6
 800562c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005630:	bfba      	itte	lt
 8005632:	461c      	movlt	r4, r3
 8005634:	2501      	movlt	r5, #1
 8005636:	2500      	movge	r5, #0
 8005638:	f7ff fcf8 	bl	800502c <_Balloc>
 800563c:	4602      	mov	r2, r0
 800563e:	b918      	cbnz	r0, 8005648 <__mdiff+0x60>
 8005640:	f240 2145 	movw	r1, #581	@ 0x245
 8005644:	4b30      	ldr	r3, [pc, #192]	@ (8005708 <__mdiff+0x120>)
 8005646:	e7e3      	b.n	8005610 <__mdiff+0x28>
 8005648:	f100 0b14 	add.w	fp, r0, #20
 800564c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005650:	f109 0310 	add.w	r3, r9, #16
 8005654:	60c5      	str	r5, [r0, #12]
 8005656:	f04f 0c00 	mov.w	ip, #0
 800565a:	f109 0514 	add.w	r5, r9, #20
 800565e:	46d9      	mov	r9, fp
 8005660:	6926      	ldr	r6, [r4, #16]
 8005662:	f104 0e14 	add.w	lr, r4, #20
 8005666:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800566a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	9b01      	ldr	r3, [sp, #4]
 8005672:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005676:	f853 af04 	ldr.w	sl, [r3, #4]!
 800567a:	b281      	uxth	r1, r0
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	fa1f f38a 	uxth.w	r3, sl
 8005682:	1a5b      	subs	r3, r3, r1
 8005684:	0c00      	lsrs	r0, r0, #16
 8005686:	4463      	add	r3, ip
 8005688:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800568c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005690:	b29b      	uxth	r3, r3
 8005692:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005696:	4576      	cmp	r6, lr
 8005698:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800569c:	f849 3b04 	str.w	r3, [r9], #4
 80056a0:	d8e6      	bhi.n	8005670 <__mdiff+0x88>
 80056a2:	1b33      	subs	r3, r6, r4
 80056a4:	3b15      	subs	r3, #21
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	3415      	adds	r4, #21
 80056ac:	3304      	adds	r3, #4
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	bf38      	it	cc
 80056b2:	2304      	movcc	r3, #4
 80056b4:	441d      	add	r5, r3
 80056b6:	445b      	add	r3, fp
 80056b8:	461e      	mov	r6, r3
 80056ba:	462c      	mov	r4, r5
 80056bc:	4544      	cmp	r4, r8
 80056be:	d30e      	bcc.n	80056de <__mdiff+0xf6>
 80056c0:	f108 0103 	add.w	r1, r8, #3
 80056c4:	1b49      	subs	r1, r1, r5
 80056c6:	f021 0103 	bic.w	r1, r1, #3
 80056ca:	3d03      	subs	r5, #3
 80056cc:	45a8      	cmp	r8, r5
 80056ce:	bf38      	it	cc
 80056d0:	2100      	movcc	r1, #0
 80056d2:	440b      	add	r3, r1
 80056d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80056d8:	b199      	cbz	r1, 8005702 <__mdiff+0x11a>
 80056da:	6117      	str	r7, [r2, #16]
 80056dc:	e79e      	b.n	800561c <__mdiff+0x34>
 80056de:	46e6      	mov	lr, ip
 80056e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80056e4:	fa1f fc81 	uxth.w	ip, r1
 80056e8:	44f4      	add	ip, lr
 80056ea:	0c08      	lsrs	r0, r1, #16
 80056ec:	4471      	add	r1, lr
 80056ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80056f2:	b289      	uxth	r1, r1
 80056f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80056f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80056fc:	f846 1b04 	str.w	r1, [r6], #4
 8005700:	e7dc      	b.n	80056bc <__mdiff+0xd4>
 8005702:	3f01      	subs	r7, #1
 8005704:	e7e6      	b.n	80056d4 <__mdiff+0xec>
 8005706:	bf00      	nop
 8005708:	0800799f 	.word	0x0800799f
 800570c:	080079b0 	.word	0x080079b0

08005710 <__ulp>:
 8005710:	4b0e      	ldr	r3, [pc, #56]	@ (800574c <__ulp+0x3c>)
 8005712:	400b      	ands	r3, r1
 8005714:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005718:	2b00      	cmp	r3, #0
 800571a:	dc08      	bgt.n	800572e <__ulp+0x1e>
 800571c:	425b      	negs	r3, r3
 800571e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005722:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005726:	da04      	bge.n	8005732 <__ulp+0x22>
 8005728:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800572c:	4113      	asrs	r3, r2
 800572e:	2200      	movs	r2, #0
 8005730:	e008      	b.n	8005744 <__ulp+0x34>
 8005732:	f1a2 0314 	sub.w	r3, r2, #20
 8005736:	2b1e      	cmp	r3, #30
 8005738:	bfd6      	itet	le
 800573a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800573e:	2201      	movgt	r2, #1
 8005740:	40da      	lsrle	r2, r3
 8005742:	2300      	movs	r3, #0
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	7ff00000 	.word	0x7ff00000

08005750 <__b2d>:
 8005750:	6902      	ldr	r2, [r0, #16]
 8005752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005754:	f100 0614 	add.w	r6, r0, #20
 8005758:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800575c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005760:	4f1e      	ldr	r7, [pc, #120]	@ (80057dc <__b2d+0x8c>)
 8005762:	4620      	mov	r0, r4
 8005764:	f7ff fd54 	bl	8005210 <__hi0bits>
 8005768:	4603      	mov	r3, r0
 800576a:	f1c0 0020 	rsb	r0, r0, #32
 800576e:	2b0a      	cmp	r3, #10
 8005770:	f1a2 0504 	sub.w	r5, r2, #4
 8005774:	6008      	str	r0, [r1, #0]
 8005776:	dc12      	bgt.n	800579e <__b2d+0x4e>
 8005778:	42ae      	cmp	r6, r5
 800577a:	bf2c      	ite	cs
 800577c:	2200      	movcs	r2, #0
 800577e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005782:	f1c3 0c0b 	rsb	ip, r3, #11
 8005786:	3315      	adds	r3, #21
 8005788:	fa24 fe0c 	lsr.w	lr, r4, ip
 800578c:	fa04 f303 	lsl.w	r3, r4, r3
 8005790:	fa22 f20c 	lsr.w	r2, r2, ip
 8005794:	ea4e 0107 	orr.w	r1, lr, r7
 8005798:	431a      	orrs	r2, r3
 800579a:	4610      	mov	r0, r2
 800579c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800579e:	42ae      	cmp	r6, r5
 80057a0:	bf36      	itet	cc
 80057a2:	f1a2 0508 	subcc.w	r5, r2, #8
 80057a6:	2200      	movcs	r2, #0
 80057a8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80057ac:	3b0b      	subs	r3, #11
 80057ae:	d012      	beq.n	80057d6 <__b2d+0x86>
 80057b0:	f1c3 0720 	rsb	r7, r3, #32
 80057b4:	fa22 f107 	lsr.w	r1, r2, r7
 80057b8:	409c      	lsls	r4, r3
 80057ba:	430c      	orrs	r4, r1
 80057bc:	42b5      	cmp	r5, r6
 80057be:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80057c2:	bf94      	ite	ls
 80057c4:	2400      	movls	r4, #0
 80057c6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80057ca:	409a      	lsls	r2, r3
 80057cc:	40fc      	lsrs	r4, r7
 80057ce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80057d2:	4322      	orrs	r2, r4
 80057d4:	e7e1      	b.n	800579a <__b2d+0x4a>
 80057d6:	ea44 0107 	orr.w	r1, r4, r7
 80057da:	e7de      	b.n	800579a <__b2d+0x4a>
 80057dc:	3ff00000 	.word	0x3ff00000

080057e0 <__d2b>:
 80057e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80057e4:	2101      	movs	r1, #1
 80057e6:	4690      	mov	r8, r2
 80057e8:	4699      	mov	r9, r3
 80057ea:	9e08      	ldr	r6, [sp, #32]
 80057ec:	f7ff fc1e 	bl	800502c <_Balloc>
 80057f0:	4604      	mov	r4, r0
 80057f2:	b930      	cbnz	r0, 8005802 <__d2b+0x22>
 80057f4:	4602      	mov	r2, r0
 80057f6:	f240 310f 	movw	r1, #783	@ 0x30f
 80057fa:	4b23      	ldr	r3, [pc, #140]	@ (8005888 <__d2b+0xa8>)
 80057fc:	4823      	ldr	r0, [pc, #140]	@ (800588c <__d2b+0xac>)
 80057fe:	f001 f989 	bl	8006b14 <__assert_func>
 8005802:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005806:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800580a:	b10d      	cbz	r5, 8005810 <__d2b+0x30>
 800580c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	f1b8 0300 	subs.w	r3, r8, #0
 8005816:	d024      	beq.n	8005862 <__d2b+0x82>
 8005818:	4668      	mov	r0, sp
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	f7ff fd17 	bl	800524e <__lo0bits>
 8005820:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005824:	b1d8      	cbz	r0, 800585e <__d2b+0x7e>
 8005826:	f1c0 0320 	rsb	r3, r0, #32
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	430b      	orrs	r3, r1
 8005830:	40c2      	lsrs	r2, r0
 8005832:	6163      	str	r3, [r4, #20]
 8005834:	9201      	str	r2, [sp, #4]
 8005836:	9b01      	ldr	r3, [sp, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	bf0c      	ite	eq
 800583c:	2201      	moveq	r2, #1
 800583e:	2202      	movne	r2, #2
 8005840:	61a3      	str	r3, [r4, #24]
 8005842:	6122      	str	r2, [r4, #16]
 8005844:	b1ad      	cbz	r5, 8005872 <__d2b+0x92>
 8005846:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800584a:	4405      	add	r5, r0
 800584c:	6035      	str	r5, [r6, #0]
 800584e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005854:	6018      	str	r0, [r3, #0]
 8005856:	4620      	mov	r0, r4
 8005858:	b002      	add	sp, #8
 800585a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800585e:	6161      	str	r1, [r4, #20]
 8005860:	e7e9      	b.n	8005836 <__d2b+0x56>
 8005862:	a801      	add	r0, sp, #4
 8005864:	f7ff fcf3 	bl	800524e <__lo0bits>
 8005868:	9b01      	ldr	r3, [sp, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	6163      	str	r3, [r4, #20]
 800586e:	3020      	adds	r0, #32
 8005870:	e7e7      	b.n	8005842 <__d2b+0x62>
 8005872:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005876:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800587a:	6030      	str	r0, [r6, #0]
 800587c:	6918      	ldr	r0, [r3, #16]
 800587e:	f7ff fcc7 	bl	8005210 <__hi0bits>
 8005882:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005886:	e7e4      	b.n	8005852 <__d2b+0x72>
 8005888:	0800799f 	.word	0x0800799f
 800588c:	080079b0 	.word	0x080079b0

08005890 <__ratio>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	b085      	sub	sp, #20
 8005896:	e9cd 1000 	strd	r1, r0, [sp]
 800589a:	a902      	add	r1, sp, #8
 800589c:	f7ff ff58 	bl	8005750 <__b2d>
 80058a0:	468b      	mov	fp, r1
 80058a2:	4606      	mov	r6, r0
 80058a4:	460f      	mov	r7, r1
 80058a6:	9800      	ldr	r0, [sp, #0]
 80058a8:	a903      	add	r1, sp, #12
 80058aa:	f7ff ff51 	bl	8005750 <__b2d>
 80058ae:	460d      	mov	r5, r1
 80058b0:	9b01      	ldr	r3, [sp, #4]
 80058b2:	4689      	mov	r9, r1
 80058b4:	6919      	ldr	r1, [r3, #16]
 80058b6:	9b00      	ldr	r3, [sp, #0]
 80058b8:	4604      	mov	r4, r0
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	4630      	mov	r0, r6
 80058be:	1ac9      	subs	r1, r1, r3
 80058c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bfcd      	iteet	gt
 80058ce:	463a      	movgt	r2, r7
 80058d0:	462a      	movle	r2, r5
 80058d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80058d6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80058da:	bfd8      	it	le
 80058dc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80058e0:	464b      	mov	r3, r9
 80058e2:	4622      	mov	r2, r4
 80058e4:	4659      	mov	r1, fp
 80058e6:	f7fa ff21 	bl	800072c <__aeabi_ddiv>
 80058ea:	b005      	add	sp, #20
 80058ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058f0 <__copybits>:
 80058f0:	3901      	subs	r1, #1
 80058f2:	b570      	push	{r4, r5, r6, lr}
 80058f4:	1149      	asrs	r1, r1, #5
 80058f6:	6914      	ldr	r4, [r2, #16]
 80058f8:	3101      	adds	r1, #1
 80058fa:	f102 0314 	add.w	r3, r2, #20
 80058fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005902:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005906:	1f05      	subs	r5, r0, #4
 8005908:	42a3      	cmp	r3, r4
 800590a:	d30c      	bcc.n	8005926 <__copybits+0x36>
 800590c:	1aa3      	subs	r3, r4, r2
 800590e:	3b11      	subs	r3, #17
 8005910:	f023 0303 	bic.w	r3, r3, #3
 8005914:	3211      	adds	r2, #17
 8005916:	42a2      	cmp	r2, r4
 8005918:	bf88      	it	hi
 800591a:	2300      	movhi	r3, #0
 800591c:	4418      	add	r0, r3
 800591e:	2300      	movs	r3, #0
 8005920:	4288      	cmp	r0, r1
 8005922:	d305      	bcc.n	8005930 <__copybits+0x40>
 8005924:	bd70      	pop	{r4, r5, r6, pc}
 8005926:	f853 6b04 	ldr.w	r6, [r3], #4
 800592a:	f845 6f04 	str.w	r6, [r5, #4]!
 800592e:	e7eb      	b.n	8005908 <__copybits+0x18>
 8005930:	f840 3b04 	str.w	r3, [r0], #4
 8005934:	e7f4      	b.n	8005920 <__copybits+0x30>

08005936 <__any_on>:
 8005936:	f100 0214 	add.w	r2, r0, #20
 800593a:	6900      	ldr	r0, [r0, #16]
 800593c:	114b      	asrs	r3, r1, #5
 800593e:	4298      	cmp	r0, r3
 8005940:	b510      	push	{r4, lr}
 8005942:	db11      	blt.n	8005968 <__any_on+0x32>
 8005944:	dd0a      	ble.n	800595c <__any_on+0x26>
 8005946:	f011 011f 	ands.w	r1, r1, #31
 800594a:	d007      	beq.n	800595c <__any_on+0x26>
 800594c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005950:	fa24 f001 	lsr.w	r0, r4, r1
 8005954:	fa00 f101 	lsl.w	r1, r0, r1
 8005958:	428c      	cmp	r4, r1
 800595a:	d10b      	bne.n	8005974 <__any_on+0x3e>
 800595c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005960:	4293      	cmp	r3, r2
 8005962:	d803      	bhi.n	800596c <__any_on+0x36>
 8005964:	2000      	movs	r0, #0
 8005966:	bd10      	pop	{r4, pc}
 8005968:	4603      	mov	r3, r0
 800596a:	e7f7      	b.n	800595c <__any_on+0x26>
 800596c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005970:	2900      	cmp	r1, #0
 8005972:	d0f5      	beq.n	8005960 <__any_on+0x2a>
 8005974:	2001      	movs	r0, #1
 8005976:	e7f6      	b.n	8005966 <__any_on+0x30>

08005978 <sulp>:
 8005978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800597c:	460f      	mov	r7, r1
 800597e:	4690      	mov	r8, r2
 8005980:	f7ff fec6 	bl	8005710 <__ulp>
 8005984:	4604      	mov	r4, r0
 8005986:	460d      	mov	r5, r1
 8005988:	f1b8 0f00 	cmp.w	r8, #0
 800598c:	d011      	beq.n	80059b2 <sulp+0x3a>
 800598e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005992:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005996:	2b00      	cmp	r3, #0
 8005998:	dd0b      	ble.n	80059b2 <sulp+0x3a>
 800599a:	2400      	movs	r4, #0
 800599c:	051b      	lsls	r3, r3, #20
 800599e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80059a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80059a6:	4622      	mov	r2, r4
 80059a8:	462b      	mov	r3, r5
 80059aa:	f7fa fd95 	bl	80004d8 <__aeabi_dmul>
 80059ae:	4604      	mov	r4, r0
 80059b0:	460d      	mov	r5, r1
 80059b2:	4620      	mov	r0, r4
 80059b4:	4629      	mov	r1, r5
 80059b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ba:	0000      	movs	r0, r0
 80059bc:	0000      	movs	r0, r0
	...

080059c0 <_strtod_l>:
 80059c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c4:	b09f      	sub	sp, #124	@ 0x7c
 80059c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80059c8:	2200      	movs	r2, #0
 80059ca:	460c      	mov	r4, r1
 80059cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80059ce:	f04f 0a00 	mov.w	sl, #0
 80059d2:	f04f 0b00 	mov.w	fp, #0
 80059d6:	460a      	mov	r2, r1
 80059d8:	9005      	str	r0, [sp, #20]
 80059da:	9219      	str	r2, [sp, #100]	@ 0x64
 80059dc:	7811      	ldrb	r1, [r2, #0]
 80059de:	292b      	cmp	r1, #43	@ 0x2b
 80059e0:	d048      	beq.n	8005a74 <_strtod_l+0xb4>
 80059e2:	d836      	bhi.n	8005a52 <_strtod_l+0x92>
 80059e4:	290d      	cmp	r1, #13
 80059e6:	d830      	bhi.n	8005a4a <_strtod_l+0x8a>
 80059e8:	2908      	cmp	r1, #8
 80059ea:	d830      	bhi.n	8005a4e <_strtod_l+0x8e>
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d039      	beq.n	8005a64 <_strtod_l+0xa4>
 80059f0:	2200      	movs	r2, #0
 80059f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80059f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80059f6:	782a      	ldrb	r2, [r5, #0]
 80059f8:	2a30      	cmp	r2, #48	@ 0x30
 80059fa:	f040 80b1 	bne.w	8005b60 <_strtod_l+0x1a0>
 80059fe:	786a      	ldrb	r2, [r5, #1]
 8005a00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a04:	2a58      	cmp	r2, #88	@ 0x58
 8005a06:	d16c      	bne.n	8005ae2 <_strtod_l+0x122>
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a0c:	4a8e      	ldr	r2, [pc, #568]	@ (8005c48 <_strtod_l+0x288>)
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	ab1a      	add	r3, sp, #104	@ 0x68
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	9805      	ldr	r0, [sp, #20]
 8005a16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005a18:	a919      	add	r1, sp, #100	@ 0x64
 8005a1a:	f001 f915 	bl	8006c48 <__gethex>
 8005a1e:	f010 060f 	ands.w	r6, r0, #15
 8005a22:	4604      	mov	r4, r0
 8005a24:	d005      	beq.n	8005a32 <_strtod_l+0x72>
 8005a26:	2e06      	cmp	r6, #6
 8005a28:	d126      	bne.n	8005a78 <_strtod_l+0xb8>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f040 8584 	bne.w	8006542 <_strtod_l+0xb82>
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a3c:	b1bb      	cbz	r3, 8005a6e <_strtod_l+0xae>
 8005a3e:	4650      	mov	r0, sl
 8005a40:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005a44:	b01f      	add	sp, #124	@ 0x7c
 8005a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4a:	2920      	cmp	r1, #32
 8005a4c:	d1d0      	bne.n	80059f0 <_strtod_l+0x30>
 8005a4e:	3201      	adds	r2, #1
 8005a50:	e7c3      	b.n	80059da <_strtod_l+0x1a>
 8005a52:	292d      	cmp	r1, #45	@ 0x2d
 8005a54:	d1cc      	bne.n	80059f0 <_strtod_l+0x30>
 8005a56:	2101      	movs	r1, #1
 8005a58:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005a5a:	1c51      	adds	r1, r2, #1
 8005a5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a5e:	7852      	ldrb	r2, [r2, #1]
 8005a60:	2a00      	cmp	r2, #0
 8005a62:	d1c7      	bne.n	80059f4 <_strtod_l+0x34>
 8005a64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a66:	9419      	str	r4, [sp, #100]	@ 0x64
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f040 8568 	bne.w	800653e <_strtod_l+0xb7e>
 8005a6e:	4650      	mov	r0, sl
 8005a70:	4659      	mov	r1, fp
 8005a72:	e7e7      	b.n	8005a44 <_strtod_l+0x84>
 8005a74:	2100      	movs	r1, #0
 8005a76:	e7ef      	b.n	8005a58 <_strtod_l+0x98>
 8005a78:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a7a:	b13a      	cbz	r2, 8005a8c <_strtod_l+0xcc>
 8005a7c:	2135      	movs	r1, #53	@ 0x35
 8005a7e:	a81c      	add	r0, sp, #112	@ 0x70
 8005a80:	f7ff ff36 	bl	80058f0 <__copybits>
 8005a84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a86:	9805      	ldr	r0, [sp, #20]
 8005a88:	f7ff fb10 	bl	80050ac <_Bfree>
 8005a8c:	3e01      	subs	r6, #1
 8005a8e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005a90:	2e04      	cmp	r6, #4
 8005a92:	d806      	bhi.n	8005aa2 <_strtod_l+0xe2>
 8005a94:	e8df f006 	tbb	[pc, r6]
 8005a98:	201d0314 	.word	0x201d0314
 8005a9c:	14          	.byte	0x14
 8005a9d:	00          	.byte	0x00
 8005a9e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005aa2:	05e1      	lsls	r1, r4, #23
 8005aa4:	bf48      	it	mi
 8005aa6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005aaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005aae:	0d1b      	lsrs	r3, r3, #20
 8005ab0:	051b      	lsls	r3, r3, #20
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1bd      	bne.n	8005a32 <_strtod_l+0x72>
 8005ab6:	f7fe fb29 	bl	800410c <__errno>
 8005aba:	2322      	movs	r3, #34	@ 0x22
 8005abc:	6003      	str	r3, [r0, #0]
 8005abe:	e7b8      	b.n	8005a32 <_strtod_l+0x72>
 8005ac0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005ac4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005ac8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005acc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ad0:	e7e7      	b.n	8005aa2 <_strtod_l+0xe2>
 8005ad2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005c4c <_strtod_l+0x28c>
 8005ad6:	e7e4      	b.n	8005aa2 <_strtod_l+0xe2>
 8005ad8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005adc:	f04f 3aff 	mov.w	sl, #4294967295
 8005ae0:	e7df      	b.n	8005aa2 <_strtod_l+0xe2>
 8005ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	2b30      	cmp	r3, #48	@ 0x30
 8005aec:	d0f9      	beq.n	8005ae2 <_strtod_l+0x122>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d09f      	beq.n	8005a32 <_strtod_l+0x72>
 8005af2:	2301      	movs	r3, #1
 8005af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005af8:	220a      	movs	r2, #10
 8005afa:	930c      	str	r3, [sp, #48]	@ 0x30
 8005afc:	2300      	movs	r3, #0
 8005afe:	461f      	mov	r7, r3
 8005b00:	9308      	str	r3, [sp, #32]
 8005b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b04:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005b06:	7805      	ldrb	r5, [r0, #0]
 8005b08:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005b0c:	b2d9      	uxtb	r1, r3
 8005b0e:	2909      	cmp	r1, #9
 8005b10:	d928      	bls.n	8005b64 <_strtod_l+0x1a4>
 8005b12:	2201      	movs	r2, #1
 8005b14:	494e      	ldr	r1, [pc, #312]	@ (8005c50 <_strtod_l+0x290>)
 8005b16:	f000 ffc7 	bl	8006aa8 <strncmp>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d032      	beq.n	8005b84 <_strtod_l+0x1c4>
 8005b1e:	2000      	movs	r0, #0
 8005b20:	462a      	mov	r2, r5
 8005b22:	4681      	mov	r9, r0
 8005b24:	463d      	mov	r5, r7
 8005b26:	4603      	mov	r3, r0
 8005b28:	2a65      	cmp	r2, #101	@ 0x65
 8005b2a:	d001      	beq.n	8005b30 <_strtod_l+0x170>
 8005b2c:	2a45      	cmp	r2, #69	@ 0x45
 8005b2e:	d114      	bne.n	8005b5a <_strtod_l+0x19a>
 8005b30:	b91d      	cbnz	r5, 8005b3a <_strtod_l+0x17a>
 8005b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b34:	4302      	orrs	r2, r0
 8005b36:	d095      	beq.n	8005a64 <_strtod_l+0xa4>
 8005b38:	2500      	movs	r5, #0
 8005b3a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005b3c:	1c62      	adds	r2, r4, #1
 8005b3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b40:	7862      	ldrb	r2, [r4, #1]
 8005b42:	2a2b      	cmp	r2, #43	@ 0x2b
 8005b44:	d077      	beq.n	8005c36 <_strtod_l+0x276>
 8005b46:	2a2d      	cmp	r2, #45	@ 0x2d
 8005b48:	d07b      	beq.n	8005c42 <_strtod_l+0x282>
 8005b4a:	f04f 0c00 	mov.w	ip, #0
 8005b4e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005b52:	2909      	cmp	r1, #9
 8005b54:	f240 8082 	bls.w	8005c5c <_strtod_l+0x29c>
 8005b58:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	e0a2      	b.n	8005ca6 <_strtod_l+0x2e6>
 8005b60:	2300      	movs	r3, #0
 8005b62:	e7c7      	b.n	8005af4 <_strtod_l+0x134>
 8005b64:	2f08      	cmp	r7, #8
 8005b66:	bfd5      	itete	le
 8005b68:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005b6a:	9908      	ldrgt	r1, [sp, #32]
 8005b6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b70:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005b74:	f100 0001 	add.w	r0, r0, #1
 8005b78:	bfd4      	ite	le
 8005b7a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005b7c:	9308      	strgt	r3, [sp, #32]
 8005b7e:	3701      	adds	r7, #1
 8005b80:	9019      	str	r0, [sp, #100]	@ 0x64
 8005b82:	e7bf      	b.n	8005b04 <_strtod_l+0x144>
 8005b84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b8a:	785a      	ldrb	r2, [r3, #1]
 8005b8c:	b37f      	cbz	r7, 8005bee <_strtod_l+0x22e>
 8005b8e:	4681      	mov	r9, r0
 8005b90:	463d      	mov	r5, r7
 8005b92:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005b96:	2b09      	cmp	r3, #9
 8005b98:	d912      	bls.n	8005bc0 <_strtod_l+0x200>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e7c4      	b.n	8005b28 <_strtod_l+0x168>
 8005b9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ba6:	785a      	ldrb	r2, [r3, #1]
 8005ba8:	2a30      	cmp	r2, #48	@ 0x30
 8005baa:	d0f8      	beq.n	8005b9e <_strtod_l+0x1de>
 8005bac:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	f200 84cb 	bhi.w	800654c <_strtod_l+0xb8c>
 8005bb6:	4681      	mov	r9, r0
 8005bb8:	2000      	movs	r0, #0
 8005bba:	4605      	mov	r5, r0
 8005bbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bbe:	930c      	str	r3, [sp, #48]	@ 0x30
 8005bc0:	3a30      	subs	r2, #48	@ 0x30
 8005bc2:	f100 0301 	add.w	r3, r0, #1
 8005bc6:	d02a      	beq.n	8005c1e <_strtod_l+0x25e>
 8005bc8:	4499      	add	r9, r3
 8005bca:	210a      	movs	r1, #10
 8005bcc:	462b      	mov	r3, r5
 8005bce:	eb00 0c05 	add.w	ip, r0, r5
 8005bd2:	4563      	cmp	r3, ip
 8005bd4:	d10d      	bne.n	8005bf2 <_strtod_l+0x232>
 8005bd6:	1c69      	adds	r1, r5, #1
 8005bd8:	4401      	add	r1, r0
 8005bda:	4428      	add	r0, r5
 8005bdc:	2808      	cmp	r0, #8
 8005bde:	dc16      	bgt.n	8005c0e <_strtod_l+0x24e>
 8005be0:	230a      	movs	r3, #10
 8005be2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005be4:	fb03 2300 	mla	r3, r3, r0, r2
 8005be8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bea:	2300      	movs	r3, #0
 8005bec:	e018      	b.n	8005c20 <_strtod_l+0x260>
 8005bee:	4638      	mov	r0, r7
 8005bf0:	e7da      	b.n	8005ba8 <_strtod_l+0x1e8>
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	f103 0301 	add.w	r3, r3, #1
 8005bf8:	dc03      	bgt.n	8005c02 <_strtod_l+0x242>
 8005bfa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005bfc:	434e      	muls	r6, r1
 8005bfe:	960a      	str	r6, [sp, #40]	@ 0x28
 8005c00:	e7e7      	b.n	8005bd2 <_strtod_l+0x212>
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	bfde      	ittt	le
 8005c06:	9e08      	ldrle	r6, [sp, #32]
 8005c08:	434e      	mulle	r6, r1
 8005c0a:	9608      	strle	r6, [sp, #32]
 8005c0c:	e7e1      	b.n	8005bd2 <_strtod_l+0x212>
 8005c0e:	280f      	cmp	r0, #15
 8005c10:	dceb      	bgt.n	8005bea <_strtod_l+0x22a>
 8005c12:	230a      	movs	r3, #10
 8005c14:	9808      	ldr	r0, [sp, #32]
 8005c16:	fb03 2300 	mla	r3, r3, r0, r2
 8005c1a:	9308      	str	r3, [sp, #32]
 8005c1c:	e7e5      	b.n	8005bea <_strtod_l+0x22a>
 8005c1e:	4629      	mov	r1, r5
 8005c20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c22:	460d      	mov	r5, r1
 8005c24:	1c50      	adds	r0, r2, #1
 8005c26:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c28:	7852      	ldrb	r2, [r2, #1]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	e7b1      	b.n	8005b92 <_strtod_l+0x1d2>
 8005c2e:	f04f 0900 	mov.w	r9, #0
 8005c32:	2301      	movs	r3, #1
 8005c34:	e77d      	b.n	8005b32 <_strtod_l+0x172>
 8005c36:	f04f 0c00 	mov.w	ip, #0
 8005c3a:	1ca2      	adds	r2, r4, #2
 8005c3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c3e:	78a2      	ldrb	r2, [r4, #2]
 8005c40:	e785      	b.n	8005b4e <_strtod_l+0x18e>
 8005c42:	f04f 0c01 	mov.w	ip, #1
 8005c46:	e7f8      	b.n	8005c3a <_strtod_l+0x27a>
 8005c48:	08007b20 	.word	0x08007b20
 8005c4c:	7ff00000 	.word	0x7ff00000
 8005c50:	08007b08 	.word	0x08007b08
 8005c54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c56:	1c51      	adds	r1, r2, #1
 8005c58:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c5a:	7852      	ldrb	r2, [r2, #1]
 8005c5c:	2a30      	cmp	r2, #48	@ 0x30
 8005c5e:	d0f9      	beq.n	8005c54 <_strtod_l+0x294>
 8005c60:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005c64:	2908      	cmp	r1, #8
 8005c66:	f63f af78 	bhi.w	8005b5a <_strtod_l+0x19a>
 8005c6a:	f04f 080a 	mov.w	r8, #10
 8005c6e:	3a30      	subs	r2, #48	@ 0x30
 8005c70:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c74:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005c76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c78:	1c56      	adds	r6, r2, #1
 8005c7a:	9619      	str	r6, [sp, #100]	@ 0x64
 8005c7c:	7852      	ldrb	r2, [r2, #1]
 8005c7e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005c82:	f1be 0f09 	cmp.w	lr, #9
 8005c86:	d939      	bls.n	8005cfc <_strtod_l+0x33c>
 8005c88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005c8e:	1a76      	subs	r6, r6, r1
 8005c90:	2e08      	cmp	r6, #8
 8005c92:	dc03      	bgt.n	8005c9c <_strtod_l+0x2dc>
 8005c94:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005c96:	4588      	cmp	r8, r1
 8005c98:	bfa8      	it	ge
 8005c9a:	4688      	movge	r8, r1
 8005c9c:	f1bc 0f00 	cmp.w	ip, #0
 8005ca0:	d001      	beq.n	8005ca6 <_strtod_l+0x2e6>
 8005ca2:	f1c8 0800 	rsb	r8, r8, #0
 8005ca6:	2d00      	cmp	r5, #0
 8005ca8:	d14e      	bne.n	8005d48 <_strtod_l+0x388>
 8005caa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005cac:	4308      	orrs	r0, r1
 8005cae:	f47f aec0 	bne.w	8005a32 <_strtod_l+0x72>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f47f aed6 	bne.w	8005a64 <_strtod_l+0xa4>
 8005cb8:	2a69      	cmp	r2, #105	@ 0x69
 8005cba:	d028      	beq.n	8005d0e <_strtod_l+0x34e>
 8005cbc:	dc25      	bgt.n	8005d0a <_strtod_l+0x34a>
 8005cbe:	2a49      	cmp	r2, #73	@ 0x49
 8005cc0:	d025      	beq.n	8005d0e <_strtod_l+0x34e>
 8005cc2:	2a4e      	cmp	r2, #78	@ 0x4e
 8005cc4:	f47f aece 	bne.w	8005a64 <_strtod_l+0xa4>
 8005cc8:	499a      	ldr	r1, [pc, #616]	@ (8005f34 <_strtod_l+0x574>)
 8005cca:	a819      	add	r0, sp, #100	@ 0x64
 8005ccc:	f001 f9de 	bl	800708c <__match>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	f43f aec7 	beq.w	8005a64 <_strtod_l+0xa4>
 8005cd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b28      	cmp	r3, #40	@ 0x28
 8005cdc:	d12e      	bne.n	8005d3c <_strtod_l+0x37c>
 8005cde:	4996      	ldr	r1, [pc, #600]	@ (8005f38 <_strtod_l+0x578>)
 8005ce0:	aa1c      	add	r2, sp, #112	@ 0x70
 8005ce2:	a819      	add	r0, sp, #100	@ 0x64
 8005ce4:	f001 f9e6 	bl	80070b4 <__hexnan>
 8005ce8:	2805      	cmp	r0, #5
 8005cea:	d127      	bne.n	8005d3c <_strtod_l+0x37c>
 8005cec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005cee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005cf2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005cf6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005cfa:	e69a      	b.n	8005a32 <_strtod_l+0x72>
 8005cfc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005cfe:	fb08 2101 	mla	r1, r8, r1, r2
 8005d02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005d06:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d08:	e7b5      	b.n	8005c76 <_strtod_l+0x2b6>
 8005d0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8005d0c:	e7da      	b.n	8005cc4 <_strtod_l+0x304>
 8005d0e:	498b      	ldr	r1, [pc, #556]	@ (8005f3c <_strtod_l+0x57c>)
 8005d10:	a819      	add	r0, sp, #100	@ 0x64
 8005d12:	f001 f9bb 	bl	800708c <__match>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	f43f aea4 	beq.w	8005a64 <_strtod_l+0xa4>
 8005d1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d1e:	4988      	ldr	r1, [pc, #544]	@ (8005f40 <_strtod_l+0x580>)
 8005d20:	3b01      	subs	r3, #1
 8005d22:	a819      	add	r0, sp, #100	@ 0x64
 8005d24:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d26:	f001 f9b1 	bl	800708c <__match>
 8005d2a:	b910      	cbnz	r0, 8005d32 <_strtod_l+0x372>
 8005d2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d2e:	3301      	adds	r3, #1
 8005d30:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d32:	f04f 0a00 	mov.w	sl, #0
 8005d36:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005f44 <_strtod_l+0x584>
 8005d3a:	e67a      	b.n	8005a32 <_strtod_l+0x72>
 8005d3c:	4882      	ldr	r0, [pc, #520]	@ (8005f48 <_strtod_l+0x588>)
 8005d3e:	f000 fee3 	bl	8006b08 <nan>
 8005d42:	4682      	mov	sl, r0
 8005d44:	468b      	mov	fp, r1
 8005d46:	e674      	b.n	8005a32 <_strtod_l+0x72>
 8005d48:	eba8 0309 	sub.w	r3, r8, r9
 8005d4c:	2f00      	cmp	r7, #0
 8005d4e:	bf08      	it	eq
 8005d50:	462f      	moveq	r7, r5
 8005d52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d54:	2d10      	cmp	r5, #16
 8005d56:	462c      	mov	r4, r5
 8005d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d5a:	bfa8      	it	ge
 8005d5c:	2410      	movge	r4, #16
 8005d5e:	f7fa fb41 	bl	80003e4 <__aeabi_ui2d>
 8005d62:	2d09      	cmp	r5, #9
 8005d64:	4682      	mov	sl, r0
 8005d66:	468b      	mov	fp, r1
 8005d68:	dc11      	bgt.n	8005d8e <_strtod_l+0x3ce>
 8005d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f43f ae60 	beq.w	8005a32 <_strtod_l+0x72>
 8005d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d74:	dd76      	ble.n	8005e64 <_strtod_l+0x4a4>
 8005d76:	2b16      	cmp	r3, #22
 8005d78:	dc5d      	bgt.n	8005e36 <_strtod_l+0x476>
 8005d7a:	4974      	ldr	r1, [pc, #464]	@ (8005f4c <_strtod_l+0x58c>)
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d82:	465b      	mov	r3, fp
 8005d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d88:	f7fa fba6 	bl	80004d8 <__aeabi_dmul>
 8005d8c:	e7d9      	b.n	8005d42 <_strtod_l+0x382>
 8005d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8005f4c <_strtod_l+0x58c>)
 8005d90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005d98:	f7fa fb9e 	bl	80004d8 <__aeabi_dmul>
 8005d9c:	4682      	mov	sl, r0
 8005d9e:	9808      	ldr	r0, [sp, #32]
 8005da0:	468b      	mov	fp, r1
 8005da2:	f7fa fb1f 	bl	80003e4 <__aeabi_ui2d>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4650      	mov	r0, sl
 8005dac:	4659      	mov	r1, fp
 8005dae:	f7fa f9dd 	bl	800016c <__adddf3>
 8005db2:	2d0f      	cmp	r5, #15
 8005db4:	4682      	mov	sl, r0
 8005db6:	468b      	mov	fp, r1
 8005db8:	ddd7      	ble.n	8005d6a <_strtod_l+0x3aa>
 8005dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbc:	1b2c      	subs	r4, r5, r4
 8005dbe:	441c      	add	r4, r3
 8005dc0:	2c00      	cmp	r4, #0
 8005dc2:	f340 8096 	ble.w	8005ef2 <_strtod_l+0x532>
 8005dc6:	f014 030f 	ands.w	r3, r4, #15
 8005dca:	d00a      	beq.n	8005de2 <_strtod_l+0x422>
 8005dcc:	495f      	ldr	r1, [pc, #380]	@ (8005f4c <_strtod_l+0x58c>)
 8005dce:	4652      	mov	r2, sl
 8005dd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dd8:	465b      	mov	r3, fp
 8005dda:	f7fa fb7d 	bl	80004d8 <__aeabi_dmul>
 8005dde:	4682      	mov	sl, r0
 8005de0:	468b      	mov	fp, r1
 8005de2:	f034 040f 	bics.w	r4, r4, #15
 8005de6:	d073      	beq.n	8005ed0 <_strtod_l+0x510>
 8005de8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005dec:	dd48      	ble.n	8005e80 <_strtod_l+0x4c0>
 8005dee:	2400      	movs	r4, #0
 8005df0:	46a0      	mov	r8, r4
 8005df2:	46a1      	mov	r9, r4
 8005df4:	940a      	str	r4, [sp, #40]	@ 0x28
 8005df6:	2322      	movs	r3, #34	@ 0x22
 8005df8:	f04f 0a00 	mov.w	sl, #0
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005f44 <_strtod_l+0x584>
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f43f ae13 	beq.w	8005a32 <_strtod_l+0x72>
 8005e0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e0e:	9805      	ldr	r0, [sp, #20]
 8005e10:	f7ff f94c 	bl	80050ac <_Bfree>
 8005e14:	4649      	mov	r1, r9
 8005e16:	9805      	ldr	r0, [sp, #20]
 8005e18:	f7ff f948 	bl	80050ac <_Bfree>
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	9805      	ldr	r0, [sp, #20]
 8005e20:	f7ff f944 	bl	80050ac <_Bfree>
 8005e24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e26:	9805      	ldr	r0, [sp, #20]
 8005e28:	f7ff f940 	bl	80050ac <_Bfree>
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	9805      	ldr	r0, [sp, #20]
 8005e30:	f7ff f93c 	bl	80050ac <_Bfree>
 8005e34:	e5fd      	b.n	8005a32 <_strtod_l+0x72>
 8005e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	dbbc      	blt.n	8005dba <_strtod_l+0x3fa>
 8005e40:	4c42      	ldr	r4, [pc, #264]	@ (8005f4c <_strtod_l+0x58c>)
 8005e42:	f1c5 050f 	rsb	r5, r5, #15
 8005e46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005e4a:	4652      	mov	r2, sl
 8005e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e50:	465b      	mov	r3, fp
 8005e52:	f7fa fb41 	bl	80004d8 <__aeabi_dmul>
 8005e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e58:	1b5d      	subs	r5, r3, r5
 8005e5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005e5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e62:	e791      	b.n	8005d88 <_strtod_l+0x3c8>
 8005e64:	3316      	adds	r3, #22
 8005e66:	dba8      	blt.n	8005dba <_strtod_l+0x3fa>
 8005e68:	4b38      	ldr	r3, [pc, #224]	@ (8005f4c <_strtod_l+0x58c>)
 8005e6a:	eba9 0808 	sub.w	r8, r9, r8
 8005e6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005e72:	4650      	mov	r0, sl
 8005e74:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005e78:	4659      	mov	r1, fp
 8005e7a:	f7fa fc57 	bl	800072c <__aeabi_ddiv>
 8005e7e:	e760      	b.n	8005d42 <_strtod_l+0x382>
 8005e80:	4b33      	ldr	r3, [pc, #204]	@ (8005f50 <_strtod_l+0x590>)
 8005e82:	4650      	mov	r0, sl
 8005e84:	9308      	str	r3, [sp, #32]
 8005e86:	2300      	movs	r3, #0
 8005e88:	4659      	mov	r1, fp
 8005e8a:	461e      	mov	r6, r3
 8005e8c:	1124      	asrs	r4, r4, #4
 8005e8e:	2c01      	cmp	r4, #1
 8005e90:	dc21      	bgt.n	8005ed6 <_strtod_l+0x516>
 8005e92:	b10b      	cbz	r3, 8005e98 <_strtod_l+0x4d8>
 8005e94:	4682      	mov	sl, r0
 8005e96:	468b      	mov	fp, r1
 8005e98:	492d      	ldr	r1, [pc, #180]	@ (8005f50 <_strtod_l+0x590>)
 8005e9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005e9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005ea2:	4652      	mov	r2, sl
 8005ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ea8:	465b      	mov	r3, fp
 8005eaa:	f7fa fb15 	bl	80004d8 <__aeabi_dmul>
 8005eae:	4b25      	ldr	r3, [pc, #148]	@ (8005f44 <_strtod_l+0x584>)
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	400b      	ands	r3, r1
 8005eb4:	4927      	ldr	r1, [pc, #156]	@ (8005f54 <_strtod_l+0x594>)
 8005eb6:	4682      	mov	sl, r0
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	d898      	bhi.n	8005dee <_strtod_l+0x42e>
 8005ebc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	bf86      	itte	hi
 8005ec4:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ec8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005f58 <_strtod_l+0x598>
 8005ecc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9308      	str	r3, [sp, #32]
 8005ed4:	e07a      	b.n	8005fcc <_strtod_l+0x60c>
 8005ed6:	07e2      	lsls	r2, r4, #31
 8005ed8:	d505      	bpl.n	8005ee6 <_strtod_l+0x526>
 8005eda:	9b08      	ldr	r3, [sp, #32]
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f7fa fafa 	bl	80004d8 <__aeabi_dmul>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	9a08      	ldr	r2, [sp, #32]
 8005ee8:	3601      	adds	r6, #1
 8005eea:	3208      	adds	r2, #8
 8005eec:	1064      	asrs	r4, r4, #1
 8005eee:	9208      	str	r2, [sp, #32]
 8005ef0:	e7cd      	b.n	8005e8e <_strtod_l+0x4ce>
 8005ef2:	d0ed      	beq.n	8005ed0 <_strtod_l+0x510>
 8005ef4:	4264      	negs	r4, r4
 8005ef6:	f014 020f 	ands.w	r2, r4, #15
 8005efa:	d00a      	beq.n	8005f12 <_strtod_l+0x552>
 8005efc:	4b13      	ldr	r3, [pc, #76]	@ (8005f4c <_strtod_l+0x58c>)
 8005efe:	4650      	mov	r0, sl
 8005f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f04:	4659      	mov	r1, fp
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f7fa fc0f 	bl	800072c <__aeabi_ddiv>
 8005f0e:	4682      	mov	sl, r0
 8005f10:	468b      	mov	fp, r1
 8005f12:	1124      	asrs	r4, r4, #4
 8005f14:	d0dc      	beq.n	8005ed0 <_strtod_l+0x510>
 8005f16:	2c1f      	cmp	r4, #31
 8005f18:	dd20      	ble.n	8005f5c <_strtod_l+0x59c>
 8005f1a:	2400      	movs	r4, #0
 8005f1c:	46a0      	mov	r8, r4
 8005f1e:	46a1      	mov	r9, r4
 8005f20:	940a      	str	r4, [sp, #40]	@ 0x28
 8005f22:	2322      	movs	r3, #34	@ 0x22
 8005f24:	9a05      	ldr	r2, [sp, #20]
 8005f26:	f04f 0a00 	mov.w	sl, #0
 8005f2a:	f04f 0b00 	mov.w	fp, #0
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e768      	b.n	8005e04 <_strtod_l+0x444>
 8005f32:	bf00      	nop
 8005f34:	080078f7 	.word	0x080078f7
 8005f38:	08007b0c 	.word	0x08007b0c
 8005f3c:	080078ef 	.word	0x080078ef
 8005f40:	08007926 	.word	0x08007926
 8005f44:	7ff00000 	.word	0x7ff00000
 8005f48:	08007cb5 	.word	0x08007cb5
 8005f4c:	08007a40 	.word	0x08007a40
 8005f50:	08007a18 	.word	0x08007a18
 8005f54:	7ca00000 	.word	0x7ca00000
 8005f58:	7fefffff 	.word	0x7fefffff
 8005f5c:	f014 0310 	ands.w	r3, r4, #16
 8005f60:	bf18      	it	ne
 8005f62:	236a      	movne	r3, #106	@ 0x6a
 8005f64:	4650      	mov	r0, sl
 8005f66:	9308      	str	r3, [sp, #32]
 8005f68:	4659      	mov	r1, fp
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4ea9      	ldr	r6, [pc, #676]	@ (8006214 <_strtod_l+0x854>)
 8005f6e:	07e2      	lsls	r2, r4, #31
 8005f70:	d504      	bpl.n	8005f7c <_strtod_l+0x5bc>
 8005f72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f76:	f7fa faaf 	bl	80004d8 <__aeabi_dmul>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	1064      	asrs	r4, r4, #1
 8005f7e:	f106 0608 	add.w	r6, r6, #8
 8005f82:	d1f4      	bne.n	8005f6e <_strtod_l+0x5ae>
 8005f84:	b10b      	cbz	r3, 8005f8a <_strtod_l+0x5ca>
 8005f86:	4682      	mov	sl, r0
 8005f88:	468b      	mov	fp, r1
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	b1b3      	cbz	r3, 8005fbc <_strtod_l+0x5fc>
 8005f8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005f92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	4659      	mov	r1, fp
 8005f9a:	dd0f      	ble.n	8005fbc <_strtod_l+0x5fc>
 8005f9c:	2b1f      	cmp	r3, #31
 8005f9e:	dd57      	ble.n	8006050 <_strtod_l+0x690>
 8005fa0:	2b34      	cmp	r3, #52	@ 0x34
 8005fa2:	bfd8      	it	le
 8005fa4:	f04f 33ff 	movle.w	r3, #4294967295
 8005fa8:	f04f 0a00 	mov.w	sl, #0
 8005fac:	bfcf      	iteee	gt
 8005fae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005fb2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005fb6:	4093      	lslle	r3, r2
 8005fb8:	ea03 0b01 	andle.w	fp, r3, r1
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fa fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d1a6      	bne.n	8005f1a <_strtod_l+0x55a>
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fce:	463a      	mov	r2, r7
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005fd4:	462b      	mov	r3, r5
 8005fd6:	9805      	ldr	r0, [sp, #20]
 8005fd8:	f7ff f8d0 	bl	800517c <__s2b>
 8005fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f43f af05 	beq.w	8005dee <_strtod_l+0x42e>
 8005fe4:	2400      	movs	r4, #0
 8005fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe8:	eba9 0308 	sub.w	r3, r9, r8
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	bfa8      	it	ge
 8005ff0:	2300      	movge	r3, #0
 8005ff2:	46a0      	mov	r8, r4
 8005ff4:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ff6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005ffa:	9316      	str	r3, [sp, #88]	@ 0x58
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ffe:	9805      	ldr	r0, [sp, #20]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	f7ff f813 	bl	800502c <_Balloc>
 8006006:	4681      	mov	r9, r0
 8006008:	2800      	cmp	r0, #0
 800600a:	f43f aef4 	beq.w	8005df6 <_strtod_l+0x436>
 800600e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006010:	300c      	adds	r0, #12
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	f103 010c 	add.w	r1, r3, #12
 8006018:	3202      	adds	r2, #2
 800601a:	0092      	lsls	r2, r2, #2
 800601c:	f000 fd66 	bl	8006aec <memcpy>
 8006020:	ab1c      	add	r3, sp, #112	@ 0x70
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4652      	mov	r2, sl
 800602a:	465b      	mov	r3, fp
 800602c:	9805      	ldr	r0, [sp, #20]
 800602e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006032:	f7ff fbd5 	bl	80057e0 <__d2b>
 8006036:	901a      	str	r0, [sp, #104]	@ 0x68
 8006038:	2800      	cmp	r0, #0
 800603a:	f43f aedc 	beq.w	8005df6 <_strtod_l+0x436>
 800603e:	2101      	movs	r1, #1
 8006040:	9805      	ldr	r0, [sp, #20]
 8006042:	f7ff f931 	bl	80052a8 <__i2b>
 8006046:	4680      	mov	r8, r0
 8006048:	b948      	cbnz	r0, 800605e <_strtod_l+0x69e>
 800604a:	f04f 0800 	mov.w	r8, #0
 800604e:	e6d2      	b.n	8005df6 <_strtod_l+0x436>
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	ea03 0a0a 	and.w	sl, r3, sl
 800605c:	e7ae      	b.n	8005fbc <_strtod_l+0x5fc>
 800605e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006060:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006062:	2d00      	cmp	r5, #0
 8006064:	bfab      	itete	ge
 8006066:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006068:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800606a:	18ef      	addge	r7, r5, r3
 800606c:	1b5e      	sublt	r6, r3, r5
 800606e:	9b08      	ldr	r3, [sp, #32]
 8006070:	bfa8      	it	ge
 8006072:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006074:	eba5 0503 	sub.w	r5, r5, r3
 8006078:	4415      	add	r5, r2
 800607a:	4b67      	ldr	r3, [pc, #412]	@ (8006218 <_strtod_l+0x858>)
 800607c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006080:	bfb8      	it	lt
 8006082:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006084:	429d      	cmp	r5, r3
 8006086:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800608a:	da50      	bge.n	800612e <_strtod_l+0x76e>
 800608c:	1b5b      	subs	r3, r3, r5
 800608e:	2b1f      	cmp	r3, #31
 8006090:	f04f 0101 	mov.w	r1, #1
 8006094:	eba2 0203 	sub.w	r2, r2, r3
 8006098:	dc3d      	bgt.n	8006116 <_strtod_l+0x756>
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060a0:	2300      	movs	r3, #0
 80060a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80060a4:	18bd      	adds	r5, r7, r2
 80060a6:	9b08      	ldr	r3, [sp, #32]
 80060a8:	42af      	cmp	r7, r5
 80060aa:	4416      	add	r6, r2
 80060ac:	441e      	add	r6, r3
 80060ae:	463b      	mov	r3, r7
 80060b0:	bfa8      	it	ge
 80060b2:	462b      	movge	r3, r5
 80060b4:	42b3      	cmp	r3, r6
 80060b6:	bfa8      	it	ge
 80060b8:	4633      	movge	r3, r6
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	bfc2      	ittt	gt
 80060be:	1aed      	subgt	r5, r5, r3
 80060c0:	1af6      	subgt	r6, r6, r3
 80060c2:	1aff      	subgt	r7, r7, r3
 80060c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	dd16      	ble.n	80060f8 <_strtod_l+0x738>
 80060ca:	4641      	mov	r1, r8
 80060cc:	461a      	mov	r2, r3
 80060ce:	9805      	ldr	r0, [sp, #20]
 80060d0:	f7ff f9a8 	bl	8005424 <__pow5mult>
 80060d4:	4680      	mov	r8, r0
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d0b7      	beq.n	800604a <_strtod_l+0x68a>
 80060da:	4601      	mov	r1, r0
 80060dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80060de:	9805      	ldr	r0, [sp, #20]
 80060e0:	f7ff f8f8 	bl	80052d4 <__multiply>
 80060e4:	900e      	str	r0, [sp, #56]	@ 0x38
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f43f ae85 	beq.w	8005df6 <_strtod_l+0x436>
 80060ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060ee:	9805      	ldr	r0, [sp, #20]
 80060f0:	f7fe ffdc 	bl	80050ac <_Bfree>
 80060f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	dc1d      	bgt.n	8006138 <_strtod_l+0x778>
 80060fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	dd23      	ble.n	800614a <_strtod_l+0x78a>
 8006102:	4649      	mov	r1, r9
 8006104:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006106:	9805      	ldr	r0, [sp, #20]
 8006108:	f7ff f98c 	bl	8005424 <__pow5mult>
 800610c:	4681      	mov	r9, r0
 800610e:	b9e0      	cbnz	r0, 800614a <_strtod_l+0x78a>
 8006110:	f04f 0900 	mov.w	r9, #0
 8006114:	e66f      	b.n	8005df6 <_strtod_l+0x436>
 8006116:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800611a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800611e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006122:	35e2      	adds	r5, #226	@ 0xe2
 8006124:	fa01 f305 	lsl.w	r3, r1, r5
 8006128:	9310      	str	r3, [sp, #64]	@ 0x40
 800612a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800612c:	e7ba      	b.n	80060a4 <_strtod_l+0x6e4>
 800612e:	2300      	movs	r3, #0
 8006130:	9310      	str	r3, [sp, #64]	@ 0x40
 8006132:	2301      	movs	r3, #1
 8006134:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006136:	e7b5      	b.n	80060a4 <_strtod_l+0x6e4>
 8006138:	462a      	mov	r2, r5
 800613a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800613c:	9805      	ldr	r0, [sp, #20]
 800613e:	f7ff f9cb 	bl	80054d8 <__lshift>
 8006142:	901a      	str	r0, [sp, #104]	@ 0x68
 8006144:	2800      	cmp	r0, #0
 8006146:	d1d9      	bne.n	80060fc <_strtod_l+0x73c>
 8006148:	e655      	b.n	8005df6 <_strtod_l+0x436>
 800614a:	2e00      	cmp	r6, #0
 800614c:	dd07      	ble.n	800615e <_strtod_l+0x79e>
 800614e:	4649      	mov	r1, r9
 8006150:	4632      	mov	r2, r6
 8006152:	9805      	ldr	r0, [sp, #20]
 8006154:	f7ff f9c0 	bl	80054d8 <__lshift>
 8006158:	4681      	mov	r9, r0
 800615a:	2800      	cmp	r0, #0
 800615c:	d0d8      	beq.n	8006110 <_strtod_l+0x750>
 800615e:	2f00      	cmp	r7, #0
 8006160:	dd08      	ble.n	8006174 <_strtod_l+0x7b4>
 8006162:	4641      	mov	r1, r8
 8006164:	463a      	mov	r2, r7
 8006166:	9805      	ldr	r0, [sp, #20]
 8006168:	f7ff f9b6 	bl	80054d8 <__lshift>
 800616c:	4680      	mov	r8, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	f43f ae41 	beq.w	8005df6 <_strtod_l+0x436>
 8006174:	464a      	mov	r2, r9
 8006176:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006178:	9805      	ldr	r0, [sp, #20]
 800617a:	f7ff fa35 	bl	80055e8 <__mdiff>
 800617e:	4604      	mov	r4, r0
 8006180:	2800      	cmp	r0, #0
 8006182:	f43f ae38 	beq.w	8005df6 <_strtod_l+0x436>
 8006186:	68c3      	ldr	r3, [r0, #12]
 8006188:	4641      	mov	r1, r8
 800618a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800618c:	2300      	movs	r3, #0
 800618e:	60c3      	str	r3, [r0, #12]
 8006190:	f7ff fa0e 	bl	80055b0 <__mcmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	da45      	bge.n	8006224 <_strtod_l+0x864>
 8006198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800619a:	ea53 030a 	orrs.w	r3, r3, sl
 800619e:	d16b      	bne.n	8006278 <_strtod_l+0x8b8>
 80061a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d167      	bne.n	8006278 <_strtod_l+0x8b8>
 80061a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061ac:	0d1b      	lsrs	r3, r3, #20
 80061ae:	051b      	lsls	r3, r3, #20
 80061b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80061b4:	d960      	bls.n	8006278 <_strtod_l+0x8b8>
 80061b6:	6963      	ldr	r3, [r4, #20]
 80061b8:	b913      	cbnz	r3, 80061c0 <_strtod_l+0x800>
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	dd5b      	ble.n	8006278 <_strtod_l+0x8b8>
 80061c0:	4621      	mov	r1, r4
 80061c2:	2201      	movs	r2, #1
 80061c4:	9805      	ldr	r0, [sp, #20]
 80061c6:	f7ff f987 	bl	80054d8 <__lshift>
 80061ca:	4641      	mov	r1, r8
 80061cc:	4604      	mov	r4, r0
 80061ce:	f7ff f9ef 	bl	80055b0 <__mcmp>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	dd50      	ble.n	8006278 <_strtod_l+0x8b8>
 80061d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061da:	9a08      	ldr	r2, [sp, #32]
 80061dc:	0d1b      	lsrs	r3, r3, #20
 80061de:	051b      	lsls	r3, r3, #20
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d06a      	beq.n	80062ba <_strtod_l+0x8fa>
 80061e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80061e8:	d867      	bhi.n	80062ba <_strtod_l+0x8fa>
 80061ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80061ee:	f67f ae98 	bls.w	8005f22 <_strtod_l+0x562>
 80061f2:	4650      	mov	r0, sl
 80061f4:	4659      	mov	r1, fp
 80061f6:	4b09      	ldr	r3, [pc, #36]	@ (800621c <_strtod_l+0x85c>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	f7fa f96d 	bl	80004d8 <__aeabi_dmul>
 80061fe:	4b08      	ldr	r3, [pc, #32]	@ (8006220 <_strtod_l+0x860>)
 8006200:	4682      	mov	sl, r0
 8006202:	400b      	ands	r3, r1
 8006204:	468b      	mov	fp, r1
 8006206:	2b00      	cmp	r3, #0
 8006208:	f47f ae00 	bne.w	8005e0c <_strtod_l+0x44c>
 800620c:	2322      	movs	r3, #34	@ 0x22
 800620e:	9a05      	ldr	r2, [sp, #20]
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e5fb      	b.n	8005e0c <_strtod_l+0x44c>
 8006214:	08007b38 	.word	0x08007b38
 8006218:	fffffc02 	.word	0xfffffc02
 800621c:	39500000 	.word	0x39500000
 8006220:	7ff00000 	.word	0x7ff00000
 8006224:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006228:	d165      	bne.n	80062f6 <_strtod_l+0x936>
 800622a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800622c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006230:	b35a      	cbz	r2, 800628a <_strtod_l+0x8ca>
 8006232:	4a99      	ldr	r2, [pc, #612]	@ (8006498 <_strtod_l+0xad8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d12b      	bne.n	8006290 <_strtod_l+0x8d0>
 8006238:	9b08      	ldr	r3, [sp, #32]
 800623a:	4651      	mov	r1, sl
 800623c:	b303      	cbz	r3, 8006280 <_strtod_l+0x8c0>
 800623e:	465a      	mov	r2, fp
 8006240:	4b96      	ldr	r3, [pc, #600]	@ (800649c <_strtod_l+0xadc>)
 8006242:	4013      	ands	r3, r2
 8006244:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006248:	f04f 32ff 	mov.w	r2, #4294967295
 800624c:	d81b      	bhi.n	8006286 <_strtod_l+0x8c6>
 800624e:	0d1b      	lsrs	r3, r3, #20
 8006250:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	4299      	cmp	r1, r3
 800625a:	d119      	bne.n	8006290 <_strtod_l+0x8d0>
 800625c:	4b90      	ldr	r3, [pc, #576]	@ (80064a0 <_strtod_l+0xae0>)
 800625e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006260:	429a      	cmp	r2, r3
 8006262:	d102      	bne.n	800626a <_strtod_l+0x8aa>
 8006264:	3101      	adds	r1, #1
 8006266:	f43f adc6 	beq.w	8005df6 <_strtod_l+0x436>
 800626a:	f04f 0a00 	mov.w	sl, #0
 800626e:	4b8b      	ldr	r3, [pc, #556]	@ (800649c <_strtod_l+0xadc>)
 8006270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006272:	401a      	ands	r2, r3
 8006274:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006278:	9b08      	ldr	r3, [sp, #32]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1b9      	bne.n	80061f2 <_strtod_l+0x832>
 800627e:	e5c5      	b.n	8005e0c <_strtod_l+0x44c>
 8006280:	f04f 33ff 	mov.w	r3, #4294967295
 8006284:	e7e8      	b.n	8006258 <_strtod_l+0x898>
 8006286:	4613      	mov	r3, r2
 8006288:	e7e6      	b.n	8006258 <_strtod_l+0x898>
 800628a:	ea53 030a 	orrs.w	r3, r3, sl
 800628e:	d0a2      	beq.n	80061d6 <_strtod_l+0x816>
 8006290:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006292:	b1db      	cbz	r3, 80062cc <_strtod_l+0x90c>
 8006294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006296:	4213      	tst	r3, r2
 8006298:	d0ee      	beq.n	8006278 <_strtod_l+0x8b8>
 800629a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800629c:	4650      	mov	r0, sl
 800629e:	4659      	mov	r1, fp
 80062a0:	9a08      	ldr	r2, [sp, #32]
 80062a2:	b1bb      	cbz	r3, 80062d4 <_strtod_l+0x914>
 80062a4:	f7ff fb68 	bl	8005978 <sulp>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062b0:	f7f9 ff5c 	bl	800016c <__adddf3>
 80062b4:	4682      	mov	sl, r0
 80062b6:	468b      	mov	fp, r1
 80062b8:	e7de      	b.n	8006278 <_strtod_l+0x8b8>
 80062ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80062be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80062c2:	f04f 3aff 	mov.w	sl, #4294967295
 80062c6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80062ca:	e7d5      	b.n	8006278 <_strtod_l+0x8b8>
 80062cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062ce:	ea13 0f0a 	tst.w	r3, sl
 80062d2:	e7e1      	b.n	8006298 <_strtod_l+0x8d8>
 80062d4:	f7ff fb50 	bl	8005978 <sulp>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062e0:	f7f9 ff42 	bl	8000168 <__aeabi_dsub>
 80062e4:	2200      	movs	r2, #0
 80062e6:	2300      	movs	r3, #0
 80062e8:	4682      	mov	sl, r0
 80062ea:	468b      	mov	fp, r1
 80062ec:	f7fa fb5c 	bl	80009a8 <__aeabi_dcmpeq>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d0c1      	beq.n	8006278 <_strtod_l+0x8b8>
 80062f4:	e615      	b.n	8005f22 <_strtod_l+0x562>
 80062f6:	4641      	mov	r1, r8
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7ff fac9 	bl	8005890 <__ratio>
 80062fe:	2200      	movs	r2, #0
 8006300:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006304:	4606      	mov	r6, r0
 8006306:	460f      	mov	r7, r1
 8006308:	f7fa fb62 	bl	80009d0 <__aeabi_dcmple>
 800630c:	2800      	cmp	r0, #0
 800630e:	d06d      	beq.n	80063ec <_strtod_l+0xa2c>
 8006310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d178      	bne.n	8006408 <_strtod_l+0xa48>
 8006316:	f1ba 0f00 	cmp.w	sl, #0
 800631a:	d156      	bne.n	80063ca <_strtod_l+0xa0a>
 800631c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800631e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006322:	2b00      	cmp	r3, #0
 8006324:	d158      	bne.n	80063d8 <_strtod_l+0xa18>
 8006326:	2200      	movs	r2, #0
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	4b5d      	ldr	r3, [pc, #372]	@ (80064a4 <_strtod_l+0xae4>)
 800632e:	f7fa fb45 	bl	80009bc <__aeabi_dcmplt>
 8006332:	2800      	cmp	r0, #0
 8006334:	d157      	bne.n	80063e6 <_strtod_l+0xa26>
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	2200      	movs	r2, #0
 800633c:	4b5a      	ldr	r3, [pc, #360]	@ (80064a8 <_strtod_l+0xae8>)
 800633e:	f7fa f8cb 	bl	80004d8 <__aeabi_dmul>
 8006342:	4606      	mov	r6, r0
 8006344:	460f      	mov	r7, r1
 8006346:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800634a:	9606      	str	r6, [sp, #24]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006352:	4d52      	ldr	r5, [pc, #328]	@ (800649c <_strtod_l+0xadc>)
 8006354:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800635a:	401d      	ands	r5, r3
 800635c:	4b53      	ldr	r3, [pc, #332]	@ (80064ac <_strtod_l+0xaec>)
 800635e:	429d      	cmp	r5, r3
 8006360:	f040 80aa 	bne.w	80064b8 <_strtod_l+0xaf8>
 8006364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006366:	4650      	mov	r0, sl
 8006368:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800636c:	4659      	mov	r1, fp
 800636e:	f7ff f9cf 	bl	8005710 <__ulp>
 8006372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006376:	f7fa f8af 	bl	80004d8 <__aeabi_dmul>
 800637a:	4652      	mov	r2, sl
 800637c:	465b      	mov	r3, fp
 800637e:	f7f9 fef5 	bl	800016c <__adddf3>
 8006382:	460b      	mov	r3, r1
 8006384:	4945      	ldr	r1, [pc, #276]	@ (800649c <_strtod_l+0xadc>)
 8006386:	4a4a      	ldr	r2, [pc, #296]	@ (80064b0 <_strtod_l+0xaf0>)
 8006388:	4019      	ands	r1, r3
 800638a:	4291      	cmp	r1, r2
 800638c:	4682      	mov	sl, r0
 800638e:	d942      	bls.n	8006416 <_strtod_l+0xa56>
 8006390:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006392:	4b43      	ldr	r3, [pc, #268]	@ (80064a0 <_strtod_l+0xae0>)
 8006394:	429a      	cmp	r2, r3
 8006396:	d103      	bne.n	80063a0 <_strtod_l+0x9e0>
 8006398:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800639a:	3301      	adds	r3, #1
 800639c:	f43f ad2b 	beq.w	8005df6 <_strtod_l+0x436>
 80063a0:	f04f 3aff 	mov.w	sl, #4294967295
 80063a4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80064a0 <_strtod_l+0xae0>
 80063a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063aa:	9805      	ldr	r0, [sp, #20]
 80063ac:	f7fe fe7e 	bl	80050ac <_Bfree>
 80063b0:	4649      	mov	r1, r9
 80063b2:	9805      	ldr	r0, [sp, #20]
 80063b4:	f7fe fe7a 	bl	80050ac <_Bfree>
 80063b8:	4641      	mov	r1, r8
 80063ba:	9805      	ldr	r0, [sp, #20]
 80063bc:	f7fe fe76 	bl	80050ac <_Bfree>
 80063c0:	4621      	mov	r1, r4
 80063c2:	9805      	ldr	r0, [sp, #20]
 80063c4:	f7fe fe72 	bl	80050ac <_Bfree>
 80063c8:	e618      	b.n	8005ffc <_strtod_l+0x63c>
 80063ca:	f1ba 0f01 	cmp.w	sl, #1
 80063ce:	d103      	bne.n	80063d8 <_strtod_l+0xa18>
 80063d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f43f ada5 	beq.w	8005f22 <_strtod_l+0x562>
 80063d8:	2200      	movs	r2, #0
 80063da:	4b36      	ldr	r3, [pc, #216]	@ (80064b4 <_strtod_l+0xaf4>)
 80063dc:	2600      	movs	r6, #0
 80063de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063e2:	4f30      	ldr	r7, [pc, #192]	@ (80064a4 <_strtod_l+0xae4>)
 80063e4:	e7b3      	b.n	800634e <_strtod_l+0x98e>
 80063e6:	2600      	movs	r6, #0
 80063e8:	4f2f      	ldr	r7, [pc, #188]	@ (80064a8 <_strtod_l+0xae8>)
 80063ea:	e7ac      	b.n	8006346 <_strtod_l+0x986>
 80063ec:	4630      	mov	r0, r6
 80063ee:	4639      	mov	r1, r7
 80063f0:	4b2d      	ldr	r3, [pc, #180]	@ (80064a8 <_strtod_l+0xae8>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	f7fa f870 	bl	80004d8 <__aeabi_dmul>
 80063f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063fa:	4606      	mov	r6, r0
 80063fc:	460f      	mov	r7, r1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0a1      	beq.n	8006346 <_strtod_l+0x986>
 8006402:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006406:	e7a2      	b.n	800634e <_strtod_l+0x98e>
 8006408:	2200      	movs	r2, #0
 800640a:	4b26      	ldr	r3, [pc, #152]	@ (80064a4 <_strtod_l+0xae4>)
 800640c:	4616      	mov	r6, r2
 800640e:	461f      	mov	r7, r3
 8006410:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006414:	e79b      	b.n	800634e <_strtod_l+0x98e>
 8006416:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800641a:	9b08      	ldr	r3, [sp, #32]
 800641c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1c1      	bne.n	80063a8 <_strtod_l+0x9e8>
 8006424:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006428:	0d1b      	lsrs	r3, r3, #20
 800642a:	051b      	lsls	r3, r3, #20
 800642c:	429d      	cmp	r5, r3
 800642e:	d1bb      	bne.n	80063a8 <_strtod_l+0x9e8>
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f7fa fdf6 	bl	8001024 <__aeabi_d2lz>
 8006438:	f7fa f820 	bl	800047c <__aeabi_l2d>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7f9 fe90 	bl	8000168 <__aeabi_dsub>
 8006448:	460b      	mov	r3, r1
 800644a:	4602      	mov	r2, r0
 800644c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006450:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006456:	ea46 060a 	orr.w	r6, r6, sl
 800645a:	431e      	orrs	r6, r3
 800645c:	d069      	beq.n	8006532 <_strtod_l+0xb72>
 800645e:	a30a      	add	r3, pc, #40	@ (adr r3, 8006488 <_strtod_l+0xac8>)
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f7fa faaa 	bl	80009bc <__aeabi_dcmplt>
 8006468:	2800      	cmp	r0, #0
 800646a:	f47f accf 	bne.w	8005e0c <_strtod_l+0x44c>
 800646e:	a308      	add	r3, pc, #32	@ (adr r3, 8006490 <_strtod_l+0xad0>)
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006478:	f7fa fabe 	bl	80009f8 <__aeabi_dcmpgt>
 800647c:	2800      	cmp	r0, #0
 800647e:	d093      	beq.n	80063a8 <_strtod_l+0x9e8>
 8006480:	e4c4      	b.n	8005e0c <_strtod_l+0x44c>
 8006482:	bf00      	nop
 8006484:	f3af 8000 	nop.w
 8006488:	94a03595 	.word	0x94a03595
 800648c:	3fdfffff 	.word	0x3fdfffff
 8006490:	35afe535 	.word	0x35afe535
 8006494:	3fe00000 	.word	0x3fe00000
 8006498:	000fffff 	.word	0x000fffff
 800649c:	7ff00000 	.word	0x7ff00000
 80064a0:	7fefffff 	.word	0x7fefffff
 80064a4:	3ff00000 	.word	0x3ff00000
 80064a8:	3fe00000 	.word	0x3fe00000
 80064ac:	7fe00000 	.word	0x7fe00000
 80064b0:	7c9fffff 	.word	0x7c9fffff
 80064b4:	bff00000 	.word	0xbff00000
 80064b8:	9b08      	ldr	r3, [sp, #32]
 80064ba:	b323      	cbz	r3, 8006506 <_strtod_l+0xb46>
 80064bc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80064c0:	d821      	bhi.n	8006506 <_strtod_l+0xb46>
 80064c2:	a327      	add	r3, pc, #156	@ (adr r3, 8006560 <_strtod_l+0xba0>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7fa fa80 	bl	80009d0 <__aeabi_dcmple>
 80064d0:	b1a0      	cbz	r0, 80064fc <_strtod_l+0xb3c>
 80064d2:	4639      	mov	r1, r7
 80064d4:	4630      	mov	r0, r6
 80064d6:	f7fa fad7 	bl	8000a88 <__aeabi_d2uiz>
 80064da:	2801      	cmp	r0, #1
 80064dc:	bf38      	it	cc
 80064de:	2001      	movcc	r0, #1
 80064e0:	f7f9 ff80 	bl	80003e4 <__aeabi_ui2d>
 80064e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064e6:	4606      	mov	r6, r0
 80064e8:	460f      	mov	r7, r1
 80064ea:	b9fb      	cbnz	r3, 800652c <_strtod_l+0xb6c>
 80064ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80064f0:	9014      	str	r0, [sp, #80]	@ 0x50
 80064f2:	9315      	str	r3, [sp, #84]	@ 0x54
 80064f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80064f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80064fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064fe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006502:	1b5b      	subs	r3, r3, r5
 8006504:	9311      	str	r3, [sp, #68]	@ 0x44
 8006506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800650a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800650e:	f7ff f8ff 	bl	8005710 <__ulp>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4650      	mov	r0, sl
 8006518:	4659      	mov	r1, fp
 800651a:	f7f9 ffdd 	bl	80004d8 <__aeabi_dmul>
 800651e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006522:	f7f9 fe23 	bl	800016c <__adddf3>
 8006526:	4682      	mov	sl, r0
 8006528:	468b      	mov	fp, r1
 800652a:	e776      	b.n	800641a <_strtod_l+0xa5a>
 800652c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006530:	e7e0      	b.n	80064f4 <_strtod_l+0xb34>
 8006532:	a30d      	add	r3, pc, #52	@ (adr r3, 8006568 <_strtod_l+0xba8>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f7fa fa40 	bl	80009bc <__aeabi_dcmplt>
 800653c:	e79e      	b.n	800647c <_strtod_l+0xabc>
 800653e:	2300      	movs	r3, #0
 8006540:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006542:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006544:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	f7ff ba77 	b.w	8005a3a <_strtod_l+0x7a>
 800654c:	2a65      	cmp	r2, #101	@ 0x65
 800654e:	f43f ab6e 	beq.w	8005c2e <_strtod_l+0x26e>
 8006552:	2a45      	cmp	r2, #69	@ 0x45
 8006554:	f43f ab6b 	beq.w	8005c2e <_strtod_l+0x26e>
 8006558:	2301      	movs	r3, #1
 800655a:	f7ff bba6 	b.w	8005caa <_strtod_l+0x2ea>
 800655e:	bf00      	nop
 8006560:	ffc00000 	.word	0xffc00000
 8006564:	41dfffff 	.word	0x41dfffff
 8006568:	94a03595 	.word	0x94a03595
 800656c:	3fcfffff 	.word	0x3fcfffff

08006570 <_strtod_r>:
 8006570:	4b01      	ldr	r3, [pc, #4]	@ (8006578 <_strtod_r+0x8>)
 8006572:	f7ff ba25 	b.w	80059c0 <_strtod_l>
 8006576:	bf00      	nop
 8006578:	20000068 	.word	0x20000068

0800657c <_strtol_l.constprop.0>:
 800657c:	2b24      	cmp	r3, #36	@ 0x24
 800657e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006582:	4686      	mov	lr, r0
 8006584:	4690      	mov	r8, r2
 8006586:	d801      	bhi.n	800658c <_strtol_l.constprop.0+0x10>
 8006588:	2b01      	cmp	r3, #1
 800658a:	d106      	bne.n	800659a <_strtol_l.constprop.0+0x1e>
 800658c:	f7fd fdbe 	bl	800410c <__errno>
 8006590:	2316      	movs	r3, #22
 8006592:	6003      	str	r3, [r0, #0]
 8006594:	2000      	movs	r0, #0
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	460d      	mov	r5, r1
 800659c:	4833      	ldr	r0, [pc, #204]	@ (800666c <_strtol_l.constprop.0+0xf0>)
 800659e:	462a      	mov	r2, r5
 80065a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065a4:	5d06      	ldrb	r6, [r0, r4]
 80065a6:	f016 0608 	ands.w	r6, r6, #8
 80065aa:	d1f8      	bne.n	800659e <_strtol_l.constprop.0+0x22>
 80065ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80065ae:	d12d      	bne.n	800660c <_strtol_l.constprop.0+0x90>
 80065b0:	2601      	movs	r6, #1
 80065b2:	782c      	ldrb	r4, [r5, #0]
 80065b4:	1c95      	adds	r5, r2, #2
 80065b6:	f033 0210 	bics.w	r2, r3, #16
 80065ba:	d109      	bne.n	80065d0 <_strtol_l.constprop.0+0x54>
 80065bc:	2c30      	cmp	r4, #48	@ 0x30
 80065be:	d12a      	bne.n	8006616 <_strtol_l.constprop.0+0x9a>
 80065c0:	782a      	ldrb	r2, [r5, #0]
 80065c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065c6:	2a58      	cmp	r2, #88	@ 0x58
 80065c8:	d125      	bne.n	8006616 <_strtol_l.constprop.0+0x9a>
 80065ca:	2310      	movs	r3, #16
 80065cc:	786c      	ldrb	r4, [r5, #1]
 80065ce:	3502      	adds	r5, #2
 80065d0:	2200      	movs	r2, #0
 80065d2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80065d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80065da:	fbbc f9f3 	udiv	r9, ip, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80065e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80065e8:	2f09      	cmp	r7, #9
 80065ea:	d81b      	bhi.n	8006624 <_strtol_l.constprop.0+0xa8>
 80065ec:	463c      	mov	r4, r7
 80065ee:	42a3      	cmp	r3, r4
 80065f0:	dd27      	ble.n	8006642 <_strtol_l.constprop.0+0xc6>
 80065f2:	1c57      	adds	r7, r2, #1
 80065f4:	d007      	beq.n	8006606 <_strtol_l.constprop.0+0x8a>
 80065f6:	4581      	cmp	r9, r0
 80065f8:	d320      	bcc.n	800663c <_strtol_l.constprop.0+0xc0>
 80065fa:	d101      	bne.n	8006600 <_strtol_l.constprop.0+0x84>
 80065fc:	45a2      	cmp	sl, r4
 80065fe:	db1d      	blt.n	800663c <_strtol_l.constprop.0+0xc0>
 8006600:	2201      	movs	r2, #1
 8006602:	fb00 4003 	mla	r0, r0, r3, r4
 8006606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800660a:	e7eb      	b.n	80065e4 <_strtol_l.constprop.0+0x68>
 800660c:	2c2b      	cmp	r4, #43	@ 0x2b
 800660e:	bf04      	itt	eq
 8006610:	782c      	ldrbeq	r4, [r5, #0]
 8006612:	1c95      	addeq	r5, r2, #2
 8006614:	e7cf      	b.n	80065b6 <_strtol_l.constprop.0+0x3a>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1da      	bne.n	80065d0 <_strtol_l.constprop.0+0x54>
 800661a:	2c30      	cmp	r4, #48	@ 0x30
 800661c:	bf0c      	ite	eq
 800661e:	2308      	moveq	r3, #8
 8006620:	230a      	movne	r3, #10
 8006622:	e7d5      	b.n	80065d0 <_strtol_l.constprop.0+0x54>
 8006624:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006628:	2f19      	cmp	r7, #25
 800662a:	d801      	bhi.n	8006630 <_strtol_l.constprop.0+0xb4>
 800662c:	3c37      	subs	r4, #55	@ 0x37
 800662e:	e7de      	b.n	80065ee <_strtol_l.constprop.0+0x72>
 8006630:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006634:	2f19      	cmp	r7, #25
 8006636:	d804      	bhi.n	8006642 <_strtol_l.constprop.0+0xc6>
 8006638:	3c57      	subs	r4, #87	@ 0x57
 800663a:	e7d8      	b.n	80065ee <_strtol_l.constprop.0+0x72>
 800663c:	f04f 32ff 	mov.w	r2, #4294967295
 8006640:	e7e1      	b.n	8006606 <_strtol_l.constprop.0+0x8a>
 8006642:	1c53      	adds	r3, r2, #1
 8006644:	d108      	bne.n	8006658 <_strtol_l.constprop.0+0xdc>
 8006646:	2322      	movs	r3, #34	@ 0x22
 8006648:	4660      	mov	r0, ip
 800664a:	f8ce 3000 	str.w	r3, [lr]
 800664e:	f1b8 0f00 	cmp.w	r8, #0
 8006652:	d0a0      	beq.n	8006596 <_strtol_l.constprop.0+0x1a>
 8006654:	1e69      	subs	r1, r5, #1
 8006656:	e006      	b.n	8006666 <_strtol_l.constprop.0+0xea>
 8006658:	b106      	cbz	r6, 800665c <_strtol_l.constprop.0+0xe0>
 800665a:	4240      	negs	r0, r0
 800665c:	f1b8 0f00 	cmp.w	r8, #0
 8006660:	d099      	beq.n	8006596 <_strtol_l.constprop.0+0x1a>
 8006662:	2a00      	cmp	r2, #0
 8006664:	d1f6      	bne.n	8006654 <_strtol_l.constprop.0+0xd8>
 8006666:	f8c8 1000 	str.w	r1, [r8]
 800666a:	e794      	b.n	8006596 <_strtol_l.constprop.0+0x1a>
 800666c:	08007b61 	.word	0x08007b61

08006670 <_strtol_r>:
 8006670:	f7ff bf84 	b.w	800657c <_strtol_l.constprop.0>

08006674 <__ssputs_r>:
 8006674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	461f      	mov	r7, r3
 800667a:	688e      	ldr	r6, [r1, #8]
 800667c:	4682      	mov	sl, r0
 800667e:	42be      	cmp	r6, r7
 8006680:	460c      	mov	r4, r1
 8006682:	4690      	mov	r8, r2
 8006684:	680b      	ldr	r3, [r1, #0]
 8006686:	d82d      	bhi.n	80066e4 <__ssputs_r+0x70>
 8006688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800668c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006690:	d026      	beq.n	80066e0 <__ssputs_r+0x6c>
 8006692:	6965      	ldr	r5, [r4, #20]
 8006694:	6909      	ldr	r1, [r1, #16]
 8006696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800669a:	eba3 0901 	sub.w	r9, r3, r1
 800669e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066a2:	1c7b      	adds	r3, r7, #1
 80066a4:	444b      	add	r3, r9
 80066a6:	106d      	asrs	r5, r5, #1
 80066a8:	429d      	cmp	r5, r3
 80066aa:	bf38      	it	cc
 80066ac:	461d      	movcc	r5, r3
 80066ae:	0553      	lsls	r3, r2, #21
 80066b0:	d527      	bpl.n	8006702 <__ssputs_r+0x8e>
 80066b2:	4629      	mov	r1, r5
 80066b4:	f7fe fc2e 	bl	8004f14 <_malloc_r>
 80066b8:	4606      	mov	r6, r0
 80066ba:	b360      	cbz	r0, 8006716 <__ssputs_r+0xa2>
 80066bc:	464a      	mov	r2, r9
 80066be:	6921      	ldr	r1, [r4, #16]
 80066c0:	f000 fa14 	bl	8006aec <memcpy>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	6126      	str	r6, [r4, #16]
 80066d2:	444e      	add	r6, r9
 80066d4:	6026      	str	r6, [r4, #0]
 80066d6:	463e      	mov	r6, r7
 80066d8:	6165      	str	r5, [r4, #20]
 80066da:	eba5 0509 	sub.w	r5, r5, r9
 80066de:	60a5      	str	r5, [r4, #8]
 80066e0:	42be      	cmp	r6, r7
 80066e2:	d900      	bls.n	80066e6 <__ssputs_r+0x72>
 80066e4:	463e      	mov	r6, r7
 80066e6:	4632      	mov	r2, r6
 80066e8:	4641      	mov	r1, r8
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	f000 f9c2 	bl	8006a74 <memmove>
 80066f0:	2000      	movs	r0, #0
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	1b9b      	subs	r3, r3, r6
 80066f6:	60a3      	str	r3, [r4, #8]
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	4433      	add	r3, r6
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006702:	462a      	mov	r2, r5
 8006704:	f000 fd83 	bl	800720e <_realloc_r>
 8006708:	4606      	mov	r6, r0
 800670a:	2800      	cmp	r0, #0
 800670c:	d1e0      	bne.n	80066d0 <__ssputs_r+0x5c>
 800670e:	4650      	mov	r0, sl
 8006710:	6921      	ldr	r1, [r4, #16]
 8006712:	f7fe fb8d 	bl	8004e30 <_free_r>
 8006716:	230c      	movs	r3, #12
 8006718:	f8ca 3000 	str.w	r3, [sl]
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f04f 30ff 	mov.w	r0, #4294967295
 8006722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	e7e9      	b.n	80066fe <__ssputs_r+0x8a>
	...

0800672c <_svfiprintf_r>:
 800672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006730:	4698      	mov	r8, r3
 8006732:	898b      	ldrh	r3, [r1, #12]
 8006734:	4607      	mov	r7, r0
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	460d      	mov	r5, r1
 800673a:	4614      	mov	r4, r2
 800673c:	b09d      	sub	sp, #116	@ 0x74
 800673e:	d510      	bpl.n	8006762 <_svfiprintf_r+0x36>
 8006740:	690b      	ldr	r3, [r1, #16]
 8006742:	b973      	cbnz	r3, 8006762 <_svfiprintf_r+0x36>
 8006744:	2140      	movs	r1, #64	@ 0x40
 8006746:	f7fe fbe5 	bl	8004f14 <_malloc_r>
 800674a:	6028      	str	r0, [r5, #0]
 800674c:	6128      	str	r0, [r5, #16]
 800674e:	b930      	cbnz	r0, 800675e <_svfiprintf_r+0x32>
 8006750:	230c      	movs	r3, #12
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	f04f 30ff 	mov.w	r0, #4294967295
 8006758:	b01d      	add	sp, #116	@ 0x74
 800675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675e:	2340      	movs	r3, #64	@ 0x40
 8006760:	616b      	str	r3, [r5, #20]
 8006762:	2300      	movs	r3, #0
 8006764:	9309      	str	r3, [sp, #36]	@ 0x24
 8006766:	2320      	movs	r3, #32
 8006768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800676c:	2330      	movs	r3, #48	@ 0x30
 800676e:	f04f 0901 	mov.w	r9, #1
 8006772:	f8cd 800c 	str.w	r8, [sp, #12]
 8006776:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006910 <_svfiprintf_r+0x1e4>
 800677a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800677e:	4623      	mov	r3, r4
 8006780:	469a      	mov	sl, r3
 8006782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006786:	b10a      	cbz	r2, 800678c <_svfiprintf_r+0x60>
 8006788:	2a25      	cmp	r2, #37	@ 0x25
 800678a:	d1f9      	bne.n	8006780 <_svfiprintf_r+0x54>
 800678c:	ebba 0b04 	subs.w	fp, sl, r4
 8006790:	d00b      	beq.n	80067aa <_svfiprintf_r+0x7e>
 8006792:	465b      	mov	r3, fp
 8006794:	4622      	mov	r2, r4
 8006796:	4629      	mov	r1, r5
 8006798:	4638      	mov	r0, r7
 800679a:	f7ff ff6b 	bl	8006674 <__ssputs_r>
 800679e:	3001      	adds	r0, #1
 80067a0:	f000 80a7 	beq.w	80068f2 <_svfiprintf_r+0x1c6>
 80067a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067a6:	445a      	add	r2, fp
 80067a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80067aa:	f89a 3000 	ldrb.w	r3, [sl]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 809f 	beq.w	80068f2 <_svfiprintf_r+0x1c6>
 80067b4:	2300      	movs	r3, #0
 80067b6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067be:	f10a 0a01 	add.w	sl, sl, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	9307      	str	r3, [sp, #28]
 80067c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80067cc:	4654      	mov	r4, sl
 80067ce:	2205      	movs	r2, #5
 80067d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d4:	484e      	ldr	r0, [pc, #312]	@ (8006910 <_svfiprintf_r+0x1e4>)
 80067d6:	f7fd fcc6 	bl	8004166 <memchr>
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	b9d8      	cbnz	r0, 8006816 <_svfiprintf_r+0xea>
 80067de:	06d0      	lsls	r0, r2, #27
 80067e0:	bf44      	itt	mi
 80067e2:	2320      	movmi	r3, #32
 80067e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067e8:	0711      	lsls	r1, r2, #28
 80067ea:	bf44      	itt	mi
 80067ec:	232b      	movmi	r3, #43	@ 0x2b
 80067ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067f2:	f89a 3000 	ldrb.w	r3, [sl]
 80067f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80067f8:	d015      	beq.n	8006826 <_svfiprintf_r+0xfa>
 80067fa:	4654      	mov	r4, sl
 80067fc:	2000      	movs	r0, #0
 80067fe:	f04f 0c0a 	mov.w	ip, #10
 8006802:	9a07      	ldr	r2, [sp, #28]
 8006804:	4621      	mov	r1, r4
 8006806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800680a:	3b30      	subs	r3, #48	@ 0x30
 800680c:	2b09      	cmp	r3, #9
 800680e:	d94b      	bls.n	80068a8 <_svfiprintf_r+0x17c>
 8006810:	b1b0      	cbz	r0, 8006840 <_svfiprintf_r+0x114>
 8006812:	9207      	str	r2, [sp, #28]
 8006814:	e014      	b.n	8006840 <_svfiprintf_r+0x114>
 8006816:	eba0 0308 	sub.w	r3, r0, r8
 800681a:	fa09 f303 	lsl.w	r3, r9, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	46a2      	mov	sl, r4
 8006822:	9304      	str	r3, [sp, #16]
 8006824:	e7d2      	b.n	80067cc <_svfiprintf_r+0xa0>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	1d19      	adds	r1, r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	9103      	str	r1, [sp, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfbb      	ittet	lt
 8006832:	425b      	neglt	r3, r3
 8006834:	f042 0202 	orrlt.w	r2, r2, #2
 8006838:	9307      	strge	r3, [sp, #28]
 800683a:	9307      	strlt	r3, [sp, #28]
 800683c:	bfb8      	it	lt
 800683e:	9204      	strlt	r2, [sp, #16]
 8006840:	7823      	ldrb	r3, [r4, #0]
 8006842:	2b2e      	cmp	r3, #46	@ 0x2e
 8006844:	d10a      	bne.n	800685c <_svfiprintf_r+0x130>
 8006846:	7863      	ldrb	r3, [r4, #1]
 8006848:	2b2a      	cmp	r3, #42	@ 0x2a
 800684a:	d132      	bne.n	80068b2 <_svfiprintf_r+0x186>
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	3402      	adds	r4, #2
 8006850:	1d1a      	adds	r2, r3, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	9203      	str	r2, [sp, #12]
 8006856:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800685a:	9305      	str	r3, [sp, #20]
 800685c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006914 <_svfiprintf_r+0x1e8>
 8006860:	2203      	movs	r2, #3
 8006862:	4650      	mov	r0, sl
 8006864:	7821      	ldrb	r1, [r4, #0]
 8006866:	f7fd fc7e 	bl	8004166 <memchr>
 800686a:	b138      	cbz	r0, 800687c <_svfiprintf_r+0x150>
 800686c:	2240      	movs	r2, #64	@ 0x40
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	eba0 000a 	sub.w	r0, r0, sl
 8006874:	4082      	lsls	r2, r0
 8006876:	4313      	orrs	r3, r2
 8006878:	3401      	adds	r4, #1
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006880:	2206      	movs	r2, #6
 8006882:	4825      	ldr	r0, [pc, #148]	@ (8006918 <_svfiprintf_r+0x1ec>)
 8006884:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006888:	f7fd fc6d 	bl	8004166 <memchr>
 800688c:	2800      	cmp	r0, #0
 800688e:	d036      	beq.n	80068fe <_svfiprintf_r+0x1d2>
 8006890:	4b22      	ldr	r3, [pc, #136]	@ (800691c <_svfiprintf_r+0x1f0>)
 8006892:	bb1b      	cbnz	r3, 80068dc <_svfiprintf_r+0x1b0>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	3307      	adds	r3, #7
 8006898:	f023 0307 	bic.w	r3, r3, #7
 800689c:	3308      	adds	r3, #8
 800689e:	9303      	str	r3, [sp, #12]
 80068a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a2:	4433      	add	r3, r6
 80068a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068a6:	e76a      	b.n	800677e <_svfiprintf_r+0x52>
 80068a8:	460c      	mov	r4, r1
 80068aa:	2001      	movs	r0, #1
 80068ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80068b0:	e7a8      	b.n	8006804 <_svfiprintf_r+0xd8>
 80068b2:	2300      	movs	r3, #0
 80068b4:	f04f 0c0a 	mov.w	ip, #10
 80068b8:	4619      	mov	r1, r3
 80068ba:	3401      	adds	r4, #1
 80068bc:	9305      	str	r3, [sp, #20]
 80068be:	4620      	mov	r0, r4
 80068c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c4:	3a30      	subs	r2, #48	@ 0x30
 80068c6:	2a09      	cmp	r2, #9
 80068c8:	d903      	bls.n	80068d2 <_svfiprintf_r+0x1a6>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0c6      	beq.n	800685c <_svfiprintf_r+0x130>
 80068ce:	9105      	str	r1, [sp, #20]
 80068d0:	e7c4      	b.n	800685c <_svfiprintf_r+0x130>
 80068d2:	4604      	mov	r4, r0
 80068d4:	2301      	movs	r3, #1
 80068d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068da:	e7f0      	b.n	80068be <_svfiprintf_r+0x192>
 80068dc:	ab03      	add	r3, sp, #12
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	462a      	mov	r2, r5
 80068e2:	4638      	mov	r0, r7
 80068e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006920 <_svfiprintf_r+0x1f4>)
 80068e6:	a904      	add	r1, sp, #16
 80068e8:	f7fc fcca 	bl	8003280 <_printf_float>
 80068ec:	1c42      	adds	r2, r0, #1
 80068ee:	4606      	mov	r6, r0
 80068f0:	d1d6      	bne.n	80068a0 <_svfiprintf_r+0x174>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	065b      	lsls	r3, r3, #25
 80068f6:	f53f af2d 	bmi.w	8006754 <_svfiprintf_r+0x28>
 80068fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068fc:	e72c      	b.n	8006758 <_svfiprintf_r+0x2c>
 80068fe:	ab03      	add	r3, sp, #12
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	462a      	mov	r2, r5
 8006904:	4638      	mov	r0, r7
 8006906:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <_svfiprintf_r+0x1f4>)
 8006908:	a904      	add	r1, sp, #16
 800690a:	f7fc ff57 	bl	80037bc <_printf_i>
 800690e:	e7ed      	b.n	80068ec <_svfiprintf_r+0x1c0>
 8006910:	08007c61 	.word	0x08007c61
 8006914:	08007c67 	.word	0x08007c67
 8006918:	08007c6b 	.word	0x08007c6b
 800691c:	08003281 	.word	0x08003281
 8006920:	08006675 	.word	0x08006675

08006924 <__sflush_r>:
 8006924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	0716      	lsls	r6, r2, #28
 800692c:	4605      	mov	r5, r0
 800692e:	460c      	mov	r4, r1
 8006930:	d454      	bmi.n	80069dc <__sflush_r+0xb8>
 8006932:	684b      	ldr	r3, [r1, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dc02      	bgt.n	800693e <__sflush_r+0x1a>
 8006938:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	dd48      	ble.n	80069d0 <__sflush_r+0xac>
 800693e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006940:	2e00      	cmp	r6, #0
 8006942:	d045      	beq.n	80069d0 <__sflush_r+0xac>
 8006944:	2300      	movs	r3, #0
 8006946:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800694a:	682f      	ldr	r7, [r5, #0]
 800694c:	6a21      	ldr	r1, [r4, #32]
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	d030      	beq.n	80069b4 <__sflush_r+0x90>
 8006952:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	0759      	lsls	r1, r3, #29
 8006958:	d505      	bpl.n	8006966 <__sflush_r+0x42>
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006960:	b10b      	cbz	r3, 8006966 <__sflush_r+0x42>
 8006962:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	2300      	movs	r3, #0
 8006968:	4628      	mov	r0, r5
 800696a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800696c:	6a21      	ldr	r1, [r4, #32]
 800696e:	47b0      	blx	r6
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	d106      	bne.n	8006984 <__sflush_r+0x60>
 8006976:	6829      	ldr	r1, [r5, #0]
 8006978:	291d      	cmp	r1, #29
 800697a:	d82b      	bhi.n	80069d4 <__sflush_r+0xb0>
 800697c:	4a28      	ldr	r2, [pc, #160]	@ (8006a20 <__sflush_r+0xfc>)
 800697e:	410a      	asrs	r2, r1
 8006980:	07d6      	lsls	r6, r2, #31
 8006982:	d427      	bmi.n	80069d4 <__sflush_r+0xb0>
 8006984:	2200      	movs	r2, #0
 8006986:	6062      	str	r2, [r4, #4]
 8006988:	6922      	ldr	r2, [r4, #16]
 800698a:	04d9      	lsls	r1, r3, #19
 800698c:	6022      	str	r2, [r4, #0]
 800698e:	d504      	bpl.n	800699a <__sflush_r+0x76>
 8006990:	1c42      	adds	r2, r0, #1
 8006992:	d101      	bne.n	8006998 <__sflush_r+0x74>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b903      	cbnz	r3, 800699a <__sflush_r+0x76>
 8006998:	6560      	str	r0, [r4, #84]	@ 0x54
 800699a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800699c:	602f      	str	r7, [r5, #0]
 800699e:	b1b9      	cbz	r1, 80069d0 <__sflush_r+0xac>
 80069a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069a4:	4299      	cmp	r1, r3
 80069a6:	d002      	beq.n	80069ae <__sflush_r+0x8a>
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7fe fa41 	bl	8004e30 <_free_r>
 80069ae:	2300      	movs	r3, #0
 80069b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80069b2:	e00d      	b.n	80069d0 <__sflush_r+0xac>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b0      	blx	r6
 80069ba:	4602      	mov	r2, r0
 80069bc:	1c50      	adds	r0, r2, #1
 80069be:	d1c9      	bne.n	8006954 <__sflush_r+0x30>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0c6      	beq.n	8006954 <__sflush_r+0x30>
 80069c6:	2b1d      	cmp	r3, #29
 80069c8:	d001      	beq.n	80069ce <__sflush_r+0xaa>
 80069ca:	2b16      	cmp	r3, #22
 80069cc:	d11d      	bne.n	8006a0a <__sflush_r+0xe6>
 80069ce:	602f      	str	r7, [r5, #0]
 80069d0:	2000      	movs	r0, #0
 80069d2:	e021      	b.n	8006a18 <__sflush_r+0xf4>
 80069d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d8:	b21b      	sxth	r3, r3
 80069da:	e01a      	b.n	8006a12 <__sflush_r+0xee>
 80069dc:	690f      	ldr	r7, [r1, #16]
 80069de:	2f00      	cmp	r7, #0
 80069e0:	d0f6      	beq.n	80069d0 <__sflush_r+0xac>
 80069e2:	0793      	lsls	r3, r2, #30
 80069e4:	bf18      	it	ne
 80069e6:	2300      	movne	r3, #0
 80069e8:	680e      	ldr	r6, [r1, #0]
 80069ea:	bf08      	it	eq
 80069ec:	694b      	ldreq	r3, [r1, #20]
 80069ee:	1bf6      	subs	r6, r6, r7
 80069f0:	600f      	str	r7, [r1, #0]
 80069f2:	608b      	str	r3, [r1, #8]
 80069f4:	2e00      	cmp	r6, #0
 80069f6:	ddeb      	ble.n	80069d0 <__sflush_r+0xac>
 80069f8:	4633      	mov	r3, r6
 80069fa:	463a      	mov	r2, r7
 80069fc:	4628      	mov	r0, r5
 80069fe:	6a21      	ldr	r1, [r4, #32]
 8006a00:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006a04:	47e0      	blx	ip
 8006a06:	2800      	cmp	r0, #0
 8006a08:	dc07      	bgt.n	8006a1a <__sflush_r+0xf6>
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a12:	f04f 30ff 	mov.w	r0, #4294967295
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a1a:	4407      	add	r7, r0
 8006a1c:	1a36      	subs	r6, r6, r0
 8006a1e:	e7e9      	b.n	80069f4 <__sflush_r+0xd0>
 8006a20:	dfbffffe 	.word	0xdfbffffe

08006a24 <_fflush_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	690b      	ldr	r3, [r1, #16]
 8006a28:	4605      	mov	r5, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	b913      	cbnz	r3, 8006a34 <_fflush_r+0x10>
 8006a2e:	2500      	movs	r5, #0
 8006a30:	4628      	mov	r0, r5
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	b118      	cbz	r0, 8006a3e <_fflush_r+0x1a>
 8006a36:	6a03      	ldr	r3, [r0, #32]
 8006a38:	b90b      	cbnz	r3, 8006a3e <_fflush_r+0x1a>
 8006a3a:	f7fd fa7b 	bl	8003f34 <__sinit>
 8006a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f3      	beq.n	8006a2e <_fflush_r+0xa>
 8006a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a48:	07d0      	lsls	r0, r2, #31
 8006a4a:	d404      	bmi.n	8006a56 <_fflush_r+0x32>
 8006a4c:	0599      	lsls	r1, r3, #22
 8006a4e:	d402      	bmi.n	8006a56 <_fflush_r+0x32>
 8006a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a52:	f7fd fb86 	bl	8004162 <__retarget_lock_acquire_recursive>
 8006a56:	4628      	mov	r0, r5
 8006a58:	4621      	mov	r1, r4
 8006a5a:	f7ff ff63 	bl	8006924 <__sflush_r>
 8006a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a60:	4605      	mov	r5, r0
 8006a62:	07da      	lsls	r2, r3, #31
 8006a64:	d4e4      	bmi.n	8006a30 <_fflush_r+0xc>
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	059b      	lsls	r3, r3, #22
 8006a6a:	d4e1      	bmi.n	8006a30 <_fflush_r+0xc>
 8006a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a6e:	f7fd fb79 	bl	8004164 <__retarget_lock_release_recursive>
 8006a72:	e7dd      	b.n	8006a30 <_fflush_r+0xc>

08006a74 <memmove>:
 8006a74:	4288      	cmp	r0, r1
 8006a76:	b510      	push	{r4, lr}
 8006a78:	eb01 0402 	add.w	r4, r1, r2
 8006a7c:	d902      	bls.n	8006a84 <memmove+0x10>
 8006a7e:	4284      	cmp	r4, r0
 8006a80:	4623      	mov	r3, r4
 8006a82:	d807      	bhi.n	8006a94 <memmove+0x20>
 8006a84:	1e43      	subs	r3, r0, #1
 8006a86:	42a1      	cmp	r1, r4
 8006a88:	d008      	beq.n	8006a9c <memmove+0x28>
 8006a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a92:	e7f8      	b.n	8006a86 <memmove+0x12>
 8006a94:	4601      	mov	r1, r0
 8006a96:	4402      	add	r2, r0
 8006a98:	428a      	cmp	r2, r1
 8006a9a:	d100      	bne.n	8006a9e <memmove+0x2a>
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aa6:	e7f7      	b.n	8006a98 <memmove+0x24>

08006aa8 <strncmp>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	b16a      	cbz	r2, 8006ac8 <strncmp+0x20>
 8006aac:	3901      	subs	r1, #1
 8006aae:	1884      	adds	r4, r0, r2
 8006ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d103      	bne.n	8006ac4 <strncmp+0x1c>
 8006abc:	42a0      	cmp	r0, r4
 8006abe:	d001      	beq.n	8006ac4 <strncmp+0x1c>
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d1f5      	bne.n	8006ab0 <strncmp+0x8>
 8006ac4:	1ad0      	subs	r0, r2, r3
 8006ac6:	bd10      	pop	{r4, pc}
 8006ac8:	4610      	mov	r0, r2
 8006aca:	e7fc      	b.n	8006ac6 <strncmp+0x1e>

08006acc <_sbrk_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4d05      	ldr	r5, [pc, #20]	@ (8006ae8 <_sbrk_r+0x1c>)
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fa ff1c 	bl	8001914 <_sbrk>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_sbrk_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_sbrk_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200003cc 	.word	0x200003cc

08006aec <memcpy>:
 8006aec:	440a      	add	r2, r1
 8006aee:	4291      	cmp	r1, r2
 8006af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006af4:	d100      	bne.n	8006af8 <memcpy+0xc>
 8006af6:	4770      	bx	lr
 8006af8:	b510      	push	{r4, lr}
 8006afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006afe:	4291      	cmp	r1, r2
 8006b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b04:	d1f9      	bne.n	8006afa <memcpy+0xe>
 8006b06:	bd10      	pop	{r4, pc}

08006b08 <nan>:
 8006b08:	2000      	movs	r0, #0
 8006b0a:	4901      	ldr	r1, [pc, #4]	@ (8006b10 <nan+0x8>)
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	7ff80000 	.word	0x7ff80000

08006b14 <__assert_func>:
 8006b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b16:	4614      	mov	r4, r2
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <__assert_func+0x2c>)
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68d8      	ldr	r0, [r3, #12]
 8006b22:	b954      	cbnz	r4, 8006b3a <__assert_func+0x26>
 8006b24:	4b07      	ldr	r3, [pc, #28]	@ (8006b44 <__assert_func+0x30>)
 8006b26:	461c      	mov	r4, r3
 8006b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b2c:	9100      	str	r1, [sp, #0]
 8006b2e:	462b      	mov	r3, r5
 8006b30:	4905      	ldr	r1, [pc, #20]	@ (8006b48 <__assert_func+0x34>)
 8006b32:	f000 fba7 	bl	8007284 <fiprintf>
 8006b36:	f000 fbb7 	bl	80072a8 <abort>
 8006b3a:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <__assert_func+0x38>)
 8006b3c:	e7f4      	b.n	8006b28 <__assert_func+0x14>
 8006b3e:	bf00      	nop
 8006b40:	20000018 	.word	0x20000018
 8006b44:	08007cb5 	.word	0x08007cb5
 8006b48:	08007c87 	.word	0x08007c87
 8006b4c:	08007c7a 	.word	0x08007c7a

08006b50 <_calloc_r>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	fba1 5402 	umull	r5, r4, r1, r2
 8006b56:	b93c      	cbnz	r4, 8006b68 <_calloc_r+0x18>
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7fe f9db 	bl	8004f14 <_malloc_r>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	b928      	cbnz	r0, 8006b6e <_calloc_r+0x1e>
 8006b62:	2600      	movs	r6, #0
 8006b64:	4630      	mov	r0, r6
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	220c      	movs	r2, #12
 8006b6a:	6002      	str	r2, [r0, #0]
 8006b6c:	e7f9      	b.n	8006b62 <_calloc_r+0x12>
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4621      	mov	r1, r4
 8006b72:	f7fd fa78 	bl	8004066 <memset>
 8006b76:	e7f5      	b.n	8006b64 <_calloc_r+0x14>

08006b78 <rshift>:
 8006b78:	6903      	ldr	r3, [r0, #16]
 8006b7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b82:	f100 0414 	add.w	r4, r0, #20
 8006b86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b8a:	dd46      	ble.n	8006c1a <rshift+0xa2>
 8006b8c:	f011 011f 	ands.w	r1, r1, #31
 8006b90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b98:	d10c      	bne.n	8006bb4 <rshift+0x3c>
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	f100 0710 	add.w	r7, r0, #16
 8006ba0:	42b1      	cmp	r1, r6
 8006ba2:	d335      	bcc.n	8006c10 <rshift+0x98>
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	1eea      	subs	r2, r5, #3
 8006baa:	4296      	cmp	r6, r2
 8006bac:	bf38      	it	cc
 8006bae:	2300      	movcc	r3, #0
 8006bb0:	4423      	add	r3, r4
 8006bb2:	e015      	b.n	8006be0 <rshift+0x68>
 8006bb4:	46a1      	mov	r9, r4
 8006bb6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006bba:	f1c1 0820 	rsb	r8, r1, #32
 8006bbe:	40cf      	lsrs	r7, r1
 8006bc0:	f105 0e04 	add.w	lr, r5, #4
 8006bc4:	4576      	cmp	r6, lr
 8006bc6:	46f4      	mov	ip, lr
 8006bc8:	d816      	bhi.n	8006bf8 <rshift+0x80>
 8006bca:	1a9a      	subs	r2, r3, r2
 8006bcc:	0092      	lsls	r2, r2, #2
 8006bce:	3a04      	subs	r2, #4
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	42ae      	cmp	r6, r5
 8006bd4:	bf38      	it	cc
 8006bd6:	2200      	movcc	r2, #0
 8006bd8:	18a3      	adds	r3, r4, r2
 8006bda:	50a7      	str	r7, [r4, r2]
 8006bdc:	b107      	cbz	r7, 8006be0 <rshift+0x68>
 8006bde:	3304      	adds	r3, #4
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	eba3 0204 	sub.w	r2, r3, r4
 8006be6:	bf08      	it	eq
 8006be8:	2300      	moveq	r3, #0
 8006bea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006bee:	6102      	str	r2, [r0, #16]
 8006bf0:	bf08      	it	eq
 8006bf2:	6143      	streq	r3, [r0, #20]
 8006bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bf8:	f8dc c000 	ldr.w	ip, [ip]
 8006bfc:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c00:	ea4c 0707 	orr.w	r7, ip, r7
 8006c04:	f849 7b04 	str.w	r7, [r9], #4
 8006c08:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c0c:	40cf      	lsrs	r7, r1
 8006c0e:	e7d9      	b.n	8006bc4 <rshift+0x4c>
 8006c10:	f851 cb04 	ldr.w	ip, [r1], #4
 8006c14:	f847 cf04 	str.w	ip, [r7, #4]!
 8006c18:	e7c2      	b.n	8006ba0 <rshift+0x28>
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	e7e0      	b.n	8006be0 <rshift+0x68>

08006c1e <__hexdig_fun>:
 8006c1e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006c22:	2b09      	cmp	r3, #9
 8006c24:	d802      	bhi.n	8006c2c <__hexdig_fun+0xe>
 8006c26:	3820      	subs	r0, #32
 8006c28:	b2c0      	uxtb	r0, r0
 8006c2a:	4770      	bx	lr
 8006c2c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006c30:	2b05      	cmp	r3, #5
 8006c32:	d801      	bhi.n	8006c38 <__hexdig_fun+0x1a>
 8006c34:	3847      	subs	r0, #71	@ 0x47
 8006c36:	e7f7      	b.n	8006c28 <__hexdig_fun+0xa>
 8006c38:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d801      	bhi.n	8006c44 <__hexdig_fun+0x26>
 8006c40:	3827      	subs	r0, #39	@ 0x27
 8006c42:	e7f1      	b.n	8006c28 <__hexdig_fun+0xa>
 8006c44:	2000      	movs	r0, #0
 8006c46:	4770      	bx	lr

08006c48 <__gethex>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	468a      	mov	sl, r1
 8006c4e:	4690      	mov	r8, r2
 8006c50:	b085      	sub	sp, #20
 8006c52:	9302      	str	r3, [sp, #8]
 8006c54:	680b      	ldr	r3, [r1, #0]
 8006c56:	9001      	str	r0, [sp, #4]
 8006c58:	1c9c      	adds	r4, r3, #2
 8006c5a:	46a1      	mov	r9, r4
 8006c5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006c60:	2830      	cmp	r0, #48	@ 0x30
 8006c62:	d0fa      	beq.n	8006c5a <__gethex+0x12>
 8006c64:	eba9 0303 	sub.w	r3, r9, r3
 8006c68:	f1a3 0b02 	sub.w	fp, r3, #2
 8006c6c:	f7ff ffd7 	bl	8006c1e <__hexdig_fun>
 8006c70:	4605      	mov	r5, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d168      	bne.n	8006d48 <__gethex+0x100>
 8006c76:	2201      	movs	r2, #1
 8006c78:	4648      	mov	r0, r9
 8006c7a:	499f      	ldr	r1, [pc, #636]	@ (8006ef8 <__gethex+0x2b0>)
 8006c7c:	f7ff ff14 	bl	8006aa8 <strncmp>
 8006c80:	4607      	mov	r7, r0
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d167      	bne.n	8006d56 <__gethex+0x10e>
 8006c86:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006c8a:	4626      	mov	r6, r4
 8006c8c:	f7ff ffc7 	bl	8006c1e <__hexdig_fun>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d062      	beq.n	8006d5a <__gethex+0x112>
 8006c94:	4623      	mov	r3, r4
 8006c96:	7818      	ldrb	r0, [r3, #0]
 8006c98:	4699      	mov	r9, r3
 8006c9a:	2830      	cmp	r0, #48	@ 0x30
 8006c9c:	f103 0301 	add.w	r3, r3, #1
 8006ca0:	d0f9      	beq.n	8006c96 <__gethex+0x4e>
 8006ca2:	f7ff ffbc 	bl	8006c1e <__hexdig_fun>
 8006ca6:	fab0 f580 	clz	r5, r0
 8006caa:	f04f 0b01 	mov.w	fp, #1
 8006cae:	096d      	lsrs	r5, r5, #5
 8006cb0:	464a      	mov	r2, r9
 8006cb2:	4616      	mov	r6, r2
 8006cb4:	7830      	ldrb	r0, [r6, #0]
 8006cb6:	3201      	adds	r2, #1
 8006cb8:	f7ff ffb1 	bl	8006c1e <__hexdig_fun>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d1f8      	bne.n	8006cb2 <__gethex+0x6a>
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	498c      	ldr	r1, [pc, #560]	@ (8006ef8 <__gethex+0x2b0>)
 8006cc6:	f7ff feef 	bl	8006aa8 <strncmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d13f      	bne.n	8006d4e <__gethex+0x106>
 8006cce:	b944      	cbnz	r4, 8006ce2 <__gethex+0x9a>
 8006cd0:	1c74      	adds	r4, r6, #1
 8006cd2:	4622      	mov	r2, r4
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	7830      	ldrb	r0, [r6, #0]
 8006cd8:	3201      	adds	r2, #1
 8006cda:	f7ff ffa0 	bl	8006c1e <__hexdig_fun>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d1f8      	bne.n	8006cd4 <__gethex+0x8c>
 8006ce2:	1ba4      	subs	r4, r4, r6
 8006ce4:	00a7      	lsls	r7, r4, #2
 8006ce6:	7833      	ldrb	r3, [r6, #0]
 8006ce8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006cec:	2b50      	cmp	r3, #80	@ 0x50
 8006cee:	d13e      	bne.n	8006d6e <__gethex+0x126>
 8006cf0:	7873      	ldrb	r3, [r6, #1]
 8006cf2:	2b2b      	cmp	r3, #43	@ 0x2b
 8006cf4:	d033      	beq.n	8006d5e <__gethex+0x116>
 8006cf6:	2b2d      	cmp	r3, #45	@ 0x2d
 8006cf8:	d034      	beq.n	8006d64 <__gethex+0x11c>
 8006cfa:	2400      	movs	r4, #0
 8006cfc:	1c71      	adds	r1, r6, #1
 8006cfe:	7808      	ldrb	r0, [r1, #0]
 8006d00:	f7ff ff8d 	bl	8006c1e <__hexdig_fun>
 8006d04:	1e43      	subs	r3, r0, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b18      	cmp	r3, #24
 8006d0a:	d830      	bhi.n	8006d6e <__gethex+0x126>
 8006d0c:	f1a0 0210 	sub.w	r2, r0, #16
 8006d10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d14:	f7ff ff83 	bl	8006c1e <__hexdig_fun>
 8006d18:	f100 3cff 	add.w	ip, r0, #4294967295
 8006d1c:	fa5f fc8c 	uxtb.w	ip, ip
 8006d20:	f1bc 0f18 	cmp.w	ip, #24
 8006d24:	f04f 030a 	mov.w	r3, #10
 8006d28:	d91e      	bls.n	8006d68 <__gethex+0x120>
 8006d2a:	b104      	cbz	r4, 8006d2e <__gethex+0xe6>
 8006d2c:	4252      	negs	r2, r2
 8006d2e:	4417      	add	r7, r2
 8006d30:	f8ca 1000 	str.w	r1, [sl]
 8006d34:	b1ed      	cbz	r5, 8006d72 <__gethex+0x12a>
 8006d36:	f1bb 0f00 	cmp.w	fp, #0
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2506      	moveq	r5, #6
 8006d3e:	2500      	movne	r5, #0
 8006d40:	4628      	mov	r0, r5
 8006d42:	b005      	add	sp, #20
 8006d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d48:	2500      	movs	r5, #0
 8006d4a:	462c      	mov	r4, r5
 8006d4c:	e7b0      	b.n	8006cb0 <__gethex+0x68>
 8006d4e:	2c00      	cmp	r4, #0
 8006d50:	d1c7      	bne.n	8006ce2 <__gethex+0x9a>
 8006d52:	4627      	mov	r7, r4
 8006d54:	e7c7      	b.n	8006ce6 <__gethex+0x9e>
 8006d56:	464e      	mov	r6, r9
 8006d58:	462f      	mov	r7, r5
 8006d5a:	2501      	movs	r5, #1
 8006d5c:	e7c3      	b.n	8006ce6 <__gethex+0x9e>
 8006d5e:	2400      	movs	r4, #0
 8006d60:	1cb1      	adds	r1, r6, #2
 8006d62:	e7cc      	b.n	8006cfe <__gethex+0xb6>
 8006d64:	2401      	movs	r4, #1
 8006d66:	e7fb      	b.n	8006d60 <__gethex+0x118>
 8006d68:	fb03 0002 	mla	r0, r3, r2, r0
 8006d6c:	e7ce      	b.n	8006d0c <__gethex+0xc4>
 8006d6e:	4631      	mov	r1, r6
 8006d70:	e7de      	b.n	8006d30 <__gethex+0xe8>
 8006d72:	4629      	mov	r1, r5
 8006d74:	eba6 0309 	sub.w	r3, r6, r9
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	2b07      	cmp	r3, #7
 8006d7c:	dc0a      	bgt.n	8006d94 <__gethex+0x14c>
 8006d7e:	9801      	ldr	r0, [sp, #4]
 8006d80:	f7fe f954 	bl	800502c <_Balloc>
 8006d84:	4604      	mov	r4, r0
 8006d86:	b940      	cbnz	r0, 8006d9a <__gethex+0x152>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	21e4      	movs	r1, #228	@ 0xe4
 8006d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8006efc <__gethex+0x2b4>)
 8006d8e:	485c      	ldr	r0, [pc, #368]	@ (8006f00 <__gethex+0x2b8>)
 8006d90:	f7ff fec0 	bl	8006b14 <__assert_func>
 8006d94:	3101      	adds	r1, #1
 8006d96:	105b      	asrs	r3, r3, #1
 8006d98:	e7ef      	b.n	8006d7a <__gethex+0x132>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f100 0a14 	add.w	sl, r0, #20
 8006da0:	4655      	mov	r5, sl
 8006da2:	469b      	mov	fp, r3
 8006da4:	45b1      	cmp	r9, r6
 8006da6:	d337      	bcc.n	8006e18 <__gethex+0x1d0>
 8006da8:	f845 bb04 	str.w	fp, [r5], #4
 8006dac:	eba5 050a 	sub.w	r5, r5, sl
 8006db0:	10ad      	asrs	r5, r5, #2
 8006db2:	6125      	str	r5, [r4, #16]
 8006db4:	4658      	mov	r0, fp
 8006db6:	f7fe fa2b 	bl	8005210 <__hi0bits>
 8006dba:	016d      	lsls	r5, r5, #5
 8006dbc:	f8d8 6000 	ldr.w	r6, [r8]
 8006dc0:	1a2d      	subs	r5, r5, r0
 8006dc2:	42b5      	cmp	r5, r6
 8006dc4:	dd54      	ble.n	8006e70 <__gethex+0x228>
 8006dc6:	1bad      	subs	r5, r5, r6
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7fe fdb3 	bl	8005936 <__any_on>
 8006dd0:	4681      	mov	r9, r0
 8006dd2:	b178      	cbz	r0, 8006df4 <__gethex+0x1ac>
 8006dd4:	f04f 0901 	mov.w	r9, #1
 8006dd8:	1e6b      	subs	r3, r5, #1
 8006dda:	1159      	asrs	r1, r3, #5
 8006ddc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006de0:	f003 021f 	and.w	r2, r3, #31
 8006de4:	fa09 f202 	lsl.w	r2, r9, r2
 8006de8:	420a      	tst	r2, r1
 8006dea:	d003      	beq.n	8006df4 <__gethex+0x1ac>
 8006dec:	454b      	cmp	r3, r9
 8006dee:	dc36      	bgt.n	8006e5e <__gethex+0x216>
 8006df0:	f04f 0902 	mov.w	r9, #2
 8006df4:	4629      	mov	r1, r5
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff febe 	bl	8006b78 <rshift>
 8006dfc:	442f      	add	r7, r5
 8006dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e02:	42bb      	cmp	r3, r7
 8006e04:	da42      	bge.n	8006e8c <__gethex+0x244>
 8006e06:	4621      	mov	r1, r4
 8006e08:	9801      	ldr	r0, [sp, #4]
 8006e0a:	f7fe f94f 	bl	80050ac <_Bfree>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e12:	25a3      	movs	r5, #163	@ 0xa3
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	e793      	b.n	8006d40 <__gethex+0xf8>
 8006e18:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006e1c:	2a2e      	cmp	r2, #46	@ 0x2e
 8006e1e:	d012      	beq.n	8006e46 <__gethex+0x1fe>
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d104      	bne.n	8006e2e <__gethex+0x1e6>
 8006e24:	f845 bb04 	str.w	fp, [r5], #4
 8006e28:	f04f 0b00 	mov.w	fp, #0
 8006e2c:	465b      	mov	r3, fp
 8006e2e:	7830      	ldrb	r0, [r6, #0]
 8006e30:	9303      	str	r3, [sp, #12]
 8006e32:	f7ff fef4 	bl	8006c1e <__hexdig_fun>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	f000 000f 	and.w	r0, r0, #15
 8006e3c:	4098      	lsls	r0, r3
 8006e3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006e42:	3304      	adds	r3, #4
 8006e44:	e7ae      	b.n	8006da4 <__gethex+0x15c>
 8006e46:	45b1      	cmp	r9, r6
 8006e48:	d8ea      	bhi.n	8006e20 <__gethex+0x1d8>
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	492a      	ldr	r1, [pc, #168]	@ (8006ef8 <__gethex+0x2b0>)
 8006e50:	9303      	str	r3, [sp, #12]
 8006e52:	f7ff fe29 	bl	8006aa8 <strncmp>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1e1      	bne.n	8006e20 <__gethex+0x1d8>
 8006e5c:	e7a2      	b.n	8006da4 <__gethex+0x15c>
 8006e5e:	4620      	mov	r0, r4
 8006e60:	1ea9      	subs	r1, r5, #2
 8006e62:	f7fe fd68 	bl	8005936 <__any_on>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d0c2      	beq.n	8006df0 <__gethex+0x1a8>
 8006e6a:	f04f 0903 	mov.w	r9, #3
 8006e6e:	e7c1      	b.n	8006df4 <__gethex+0x1ac>
 8006e70:	da09      	bge.n	8006e86 <__gethex+0x23e>
 8006e72:	1b75      	subs	r5, r6, r5
 8006e74:	4621      	mov	r1, r4
 8006e76:	462a      	mov	r2, r5
 8006e78:	9801      	ldr	r0, [sp, #4]
 8006e7a:	f7fe fb2d 	bl	80054d8 <__lshift>
 8006e7e:	4604      	mov	r4, r0
 8006e80:	1b7f      	subs	r7, r7, r5
 8006e82:	f100 0a14 	add.w	sl, r0, #20
 8006e86:	f04f 0900 	mov.w	r9, #0
 8006e8a:	e7b8      	b.n	8006dfe <__gethex+0x1b6>
 8006e8c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e90:	42bd      	cmp	r5, r7
 8006e92:	dd6f      	ble.n	8006f74 <__gethex+0x32c>
 8006e94:	1bed      	subs	r5, r5, r7
 8006e96:	42ae      	cmp	r6, r5
 8006e98:	dc34      	bgt.n	8006f04 <__gethex+0x2bc>
 8006e9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d022      	beq.n	8006ee8 <__gethex+0x2a0>
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d024      	beq.n	8006ef0 <__gethex+0x2a8>
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d115      	bne.n	8006ed6 <__gethex+0x28e>
 8006eaa:	42ae      	cmp	r6, r5
 8006eac:	d113      	bne.n	8006ed6 <__gethex+0x28e>
 8006eae:	2e01      	cmp	r6, #1
 8006eb0:	d10b      	bne.n	8006eca <__gethex+0x282>
 8006eb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006eb6:	9a02      	ldr	r2, [sp, #8]
 8006eb8:	2562      	movs	r5, #98	@ 0x62
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	f8ca 3000 	str.w	r3, [sl]
 8006ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ec6:	601c      	str	r4, [r3, #0]
 8006ec8:	e73a      	b.n	8006d40 <__gethex+0xf8>
 8006eca:	4620      	mov	r0, r4
 8006ecc:	1e71      	subs	r1, r6, #1
 8006ece:	f7fe fd32 	bl	8005936 <__any_on>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d1ed      	bne.n	8006eb2 <__gethex+0x26a>
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	9801      	ldr	r0, [sp, #4]
 8006eda:	f7fe f8e7 	bl	80050ac <_Bfree>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ee2:	2550      	movs	r5, #80	@ 0x50
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e72b      	b.n	8006d40 <__gethex+0xf8>
 8006ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f3      	bne.n	8006ed6 <__gethex+0x28e>
 8006eee:	e7e0      	b.n	8006eb2 <__gethex+0x26a>
 8006ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1dd      	bne.n	8006eb2 <__gethex+0x26a>
 8006ef6:	e7ee      	b.n	8006ed6 <__gethex+0x28e>
 8006ef8:	08007b08 	.word	0x08007b08
 8006efc:	0800799f 	.word	0x0800799f
 8006f00:	08007cb6 	.word	0x08007cb6
 8006f04:	1e6f      	subs	r7, r5, #1
 8006f06:	f1b9 0f00 	cmp.w	r9, #0
 8006f0a:	d130      	bne.n	8006f6e <__gethex+0x326>
 8006f0c:	b127      	cbz	r7, 8006f18 <__gethex+0x2d0>
 8006f0e:	4639      	mov	r1, r7
 8006f10:	4620      	mov	r0, r4
 8006f12:	f7fe fd10 	bl	8005936 <__any_on>
 8006f16:	4681      	mov	r9, r0
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	1b76      	subs	r6, r6, r5
 8006f1e:	2502      	movs	r5, #2
 8006f20:	117a      	asrs	r2, r7, #5
 8006f22:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006f26:	f007 071f 	and.w	r7, r7, #31
 8006f2a:	40bb      	lsls	r3, r7
 8006f2c:	4213      	tst	r3, r2
 8006f2e:	4620      	mov	r0, r4
 8006f30:	bf18      	it	ne
 8006f32:	f049 0902 	orrne.w	r9, r9, #2
 8006f36:	f7ff fe1f 	bl	8006b78 <rshift>
 8006f3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006f3e:	f1b9 0f00 	cmp.w	r9, #0
 8006f42:	d047      	beq.n	8006fd4 <__gethex+0x38c>
 8006f44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d015      	beq.n	8006f78 <__gethex+0x330>
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d017      	beq.n	8006f80 <__gethex+0x338>
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d109      	bne.n	8006f68 <__gethex+0x320>
 8006f54:	f019 0f02 	tst.w	r9, #2
 8006f58:	d006      	beq.n	8006f68 <__gethex+0x320>
 8006f5a:	f8da 3000 	ldr.w	r3, [sl]
 8006f5e:	ea49 0903 	orr.w	r9, r9, r3
 8006f62:	f019 0f01 	tst.w	r9, #1
 8006f66:	d10e      	bne.n	8006f86 <__gethex+0x33e>
 8006f68:	f045 0510 	orr.w	r5, r5, #16
 8006f6c:	e032      	b.n	8006fd4 <__gethex+0x38c>
 8006f6e:	f04f 0901 	mov.w	r9, #1
 8006f72:	e7d1      	b.n	8006f18 <__gethex+0x2d0>
 8006f74:	2501      	movs	r5, #1
 8006f76:	e7e2      	b.n	8006f3e <__gethex+0x2f6>
 8006f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f7a:	f1c3 0301 	rsb	r3, r3, #1
 8006f7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f0      	beq.n	8006f68 <__gethex+0x320>
 8006f86:	f04f 0c00 	mov.w	ip, #0
 8006f8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f8e:	f104 0314 	add.w	r3, r4, #20
 8006f92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006fa4:	d01b      	beq.n	8006fde <__gethex+0x396>
 8006fa6:	3201      	adds	r2, #1
 8006fa8:	6002      	str	r2, [r0, #0]
 8006faa:	2d02      	cmp	r5, #2
 8006fac:	f104 0314 	add.w	r3, r4, #20
 8006fb0:	d13c      	bne.n	800702c <__gethex+0x3e4>
 8006fb2:	f8d8 2000 	ldr.w	r2, [r8]
 8006fb6:	3a01      	subs	r2, #1
 8006fb8:	42b2      	cmp	r2, r6
 8006fba:	d109      	bne.n	8006fd0 <__gethex+0x388>
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	1171      	asrs	r1, r6, #5
 8006fc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fc4:	f006 061f 	and.w	r6, r6, #31
 8006fc8:	fa02 f606 	lsl.w	r6, r2, r6
 8006fcc:	421e      	tst	r6, r3
 8006fce:	d13a      	bne.n	8007046 <__gethex+0x3fe>
 8006fd0:	f045 0520 	orr.w	r5, r5, #32
 8006fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fd6:	601c      	str	r4, [r3, #0]
 8006fd8:	9b02      	ldr	r3, [sp, #8]
 8006fda:	601f      	str	r7, [r3, #0]
 8006fdc:	e6b0      	b.n	8006d40 <__gethex+0xf8>
 8006fde:	4299      	cmp	r1, r3
 8006fe0:	f843 cc04 	str.w	ip, [r3, #-4]
 8006fe4:	d8d9      	bhi.n	8006f9a <__gethex+0x352>
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	459b      	cmp	fp, r3
 8006fea:	db17      	blt.n	800701c <__gethex+0x3d4>
 8006fec:	6861      	ldr	r1, [r4, #4]
 8006fee:	9801      	ldr	r0, [sp, #4]
 8006ff0:	3101      	adds	r1, #1
 8006ff2:	f7fe f81b 	bl	800502c <_Balloc>
 8006ff6:	4681      	mov	r9, r0
 8006ff8:	b918      	cbnz	r0, 8007002 <__gethex+0x3ba>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	2184      	movs	r1, #132	@ 0x84
 8006ffe:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <__gethex+0x41c>)
 8007000:	e6c5      	b.n	8006d8e <__gethex+0x146>
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	f104 010c 	add.w	r1, r4, #12
 8007008:	3202      	adds	r2, #2
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	300c      	adds	r0, #12
 800700e:	f7ff fd6d 	bl	8006aec <memcpy>
 8007012:	4621      	mov	r1, r4
 8007014:	9801      	ldr	r0, [sp, #4]
 8007016:	f7fe f849 	bl	80050ac <_Bfree>
 800701a:	464c      	mov	r4, r9
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	6122      	str	r2, [r4, #16]
 8007022:	2201      	movs	r2, #1
 8007024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007028:	615a      	str	r2, [r3, #20]
 800702a:	e7be      	b.n	8006faa <__gethex+0x362>
 800702c:	6922      	ldr	r2, [r4, #16]
 800702e:	455a      	cmp	r2, fp
 8007030:	dd0b      	ble.n	800704a <__gethex+0x402>
 8007032:	2101      	movs	r1, #1
 8007034:	4620      	mov	r0, r4
 8007036:	f7ff fd9f 	bl	8006b78 <rshift>
 800703a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800703e:	3701      	adds	r7, #1
 8007040:	42bb      	cmp	r3, r7
 8007042:	f6ff aee0 	blt.w	8006e06 <__gethex+0x1be>
 8007046:	2501      	movs	r5, #1
 8007048:	e7c2      	b.n	8006fd0 <__gethex+0x388>
 800704a:	f016 061f 	ands.w	r6, r6, #31
 800704e:	d0fa      	beq.n	8007046 <__gethex+0x3fe>
 8007050:	4453      	add	r3, sl
 8007052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007056:	f7fe f8db 	bl	8005210 <__hi0bits>
 800705a:	f1c6 0620 	rsb	r6, r6, #32
 800705e:	42b0      	cmp	r0, r6
 8007060:	dbe7      	blt.n	8007032 <__gethex+0x3ea>
 8007062:	e7f0      	b.n	8007046 <__gethex+0x3fe>
 8007064:	0800799f 	.word	0x0800799f

08007068 <L_shift>:
 8007068:	f1c2 0208 	rsb	r2, r2, #8
 800706c:	0092      	lsls	r2, r2, #2
 800706e:	b570      	push	{r4, r5, r6, lr}
 8007070:	f1c2 0620 	rsb	r6, r2, #32
 8007074:	6843      	ldr	r3, [r0, #4]
 8007076:	6804      	ldr	r4, [r0, #0]
 8007078:	fa03 f506 	lsl.w	r5, r3, r6
 800707c:	432c      	orrs	r4, r5
 800707e:	40d3      	lsrs	r3, r2
 8007080:	6004      	str	r4, [r0, #0]
 8007082:	f840 3f04 	str.w	r3, [r0, #4]!
 8007086:	4288      	cmp	r0, r1
 8007088:	d3f4      	bcc.n	8007074 <L_shift+0xc>
 800708a:	bd70      	pop	{r4, r5, r6, pc}

0800708c <__match>:
 800708c:	b530      	push	{r4, r5, lr}
 800708e:	6803      	ldr	r3, [r0, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007096:	b914      	cbnz	r4, 800709e <__match+0x12>
 8007098:	6003      	str	r3, [r0, #0]
 800709a:	2001      	movs	r0, #1
 800709c:	bd30      	pop	{r4, r5, pc}
 800709e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80070a6:	2d19      	cmp	r5, #25
 80070a8:	bf98      	it	ls
 80070aa:	3220      	addls	r2, #32
 80070ac:	42a2      	cmp	r2, r4
 80070ae:	d0f0      	beq.n	8007092 <__match+0x6>
 80070b0:	2000      	movs	r0, #0
 80070b2:	e7f3      	b.n	800709c <__match+0x10>

080070b4 <__hexnan>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	2500      	movs	r5, #0
 80070ba:	680b      	ldr	r3, [r1, #0]
 80070bc:	4682      	mov	sl, r0
 80070be:	115e      	asrs	r6, r3, #5
 80070c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80070c4:	f013 031f 	ands.w	r3, r3, #31
 80070c8:	bf18      	it	ne
 80070ca:	3604      	addne	r6, #4
 80070cc:	1f37      	subs	r7, r6, #4
 80070ce:	4690      	mov	r8, r2
 80070d0:	46b9      	mov	r9, r7
 80070d2:	463c      	mov	r4, r7
 80070d4:	46ab      	mov	fp, r5
 80070d6:	b087      	sub	sp, #28
 80070d8:	6801      	ldr	r1, [r0, #0]
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80070e0:	9502      	str	r5, [sp, #8]
 80070e2:	784a      	ldrb	r2, [r1, #1]
 80070e4:	1c4b      	adds	r3, r1, #1
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	b342      	cbz	r2, 800713c <__hexnan+0x88>
 80070ea:	4610      	mov	r0, r2
 80070ec:	9105      	str	r1, [sp, #20]
 80070ee:	9204      	str	r2, [sp, #16]
 80070f0:	f7ff fd95 	bl	8006c1e <__hexdig_fun>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d151      	bne.n	800719c <__hexnan+0xe8>
 80070f8:	9a04      	ldr	r2, [sp, #16]
 80070fa:	9905      	ldr	r1, [sp, #20]
 80070fc:	2a20      	cmp	r2, #32
 80070fe:	d818      	bhi.n	8007132 <__hexnan+0x7e>
 8007100:	9b02      	ldr	r3, [sp, #8]
 8007102:	459b      	cmp	fp, r3
 8007104:	dd13      	ble.n	800712e <__hexnan+0x7a>
 8007106:	454c      	cmp	r4, r9
 8007108:	d206      	bcs.n	8007118 <__hexnan+0x64>
 800710a:	2d07      	cmp	r5, #7
 800710c:	dc04      	bgt.n	8007118 <__hexnan+0x64>
 800710e:	462a      	mov	r2, r5
 8007110:	4649      	mov	r1, r9
 8007112:	4620      	mov	r0, r4
 8007114:	f7ff ffa8 	bl	8007068 <L_shift>
 8007118:	4544      	cmp	r4, r8
 800711a:	d952      	bls.n	80071c2 <__hexnan+0x10e>
 800711c:	2300      	movs	r3, #0
 800711e:	f1a4 0904 	sub.w	r9, r4, #4
 8007122:	f844 3c04 	str.w	r3, [r4, #-4]
 8007126:	461d      	mov	r5, r3
 8007128:	464c      	mov	r4, r9
 800712a:	f8cd b008 	str.w	fp, [sp, #8]
 800712e:	9903      	ldr	r1, [sp, #12]
 8007130:	e7d7      	b.n	80070e2 <__hexnan+0x2e>
 8007132:	2a29      	cmp	r2, #41	@ 0x29
 8007134:	d157      	bne.n	80071e6 <__hexnan+0x132>
 8007136:	3102      	adds	r1, #2
 8007138:	f8ca 1000 	str.w	r1, [sl]
 800713c:	f1bb 0f00 	cmp.w	fp, #0
 8007140:	d051      	beq.n	80071e6 <__hexnan+0x132>
 8007142:	454c      	cmp	r4, r9
 8007144:	d206      	bcs.n	8007154 <__hexnan+0xa0>
 8007146:	2d07      	cmp	r5, #7
 8007148:	dc04      	bgt.n	8007154 <__hexnan+0xa0>
 800714a:	462a      	mov	r2, r5
 800714c:	4649      	mov	r1, r9
 800714e:	4620      	mov	r0, r4
 8007150:	f7ff ff8a 	bl	8007068 <L_shift>
 8007154:	4544      	cmp	r4, r8
 8007156:	d936      	bls.n	80071c6 <__hexnan+0x112>
 8007158:	4623      	mov	r3, r4
 800715a:	f1a8 0204 	sub.w	r2, r8, #4
 800715e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007162:	429f      	cmp	r7, r3
 8007164:	f842 1f04 	str.w	r1, [r2, #4]!
 8007168:	d2f9      	bcs.n	800715e <__hexnan+0xaa>
 800716a:	1b3b      	subs	r3, r7, r4
 800716c:	f023 0303 	bic.w	r3, r3, #3
 8007170:	3304      	adds	r3, #4
 8007172:	3401      	adds	r4, #1
 8007174:	3e03      	subs	r6, #3
 8007176:	42b4      	cmp	r4, r6
 8007178:	bf88      	it	hi
 800717a:	2304      	movhi	r3, #4
 800717c:	2200      	movs	r2, #0
 800717e:	4443      	add	r3, r8
 8007180:	f843 2b04 	str.w	r2, [r3], #4
 8007184:	429f      	cmp	r7, r3
 8007186:	d2fb      	bcs.n	8007180 <__hexnan+0xcc>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	b91b      	cbnz	r3, 8007194 <__hexnan+0xe0>
 800718c:	4547      	cmp	r7, r8
 800718e:	d128      	bne.n	80071e2 <__hexnan+0x12e>
 8007190:	2301      	movs	r3, #1
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	2005      	movs	r0, #5
 8007196:	b007      	add	sp, #28
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	3501      	adds	r5, #1
 800719e:	2d08      	cmp	r5, #8
 80071a0:	f10b 0b01 	add.w	fp, fp, #1
 80071a4:	dd06      	ble.n	80071b4 <__hexnan+0x100>
 80071a6:	4544      	cmp	r4, r8
 80071a8:	d9c1      	bls.n	800712e <__hexnan+0x7a>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2501      	movs	r5, #1
 80071ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80071b2:	3c04      	subs	r4, #4
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	f000 000f 	and.w	r0, r0, #15
 80071ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80071be:	6020      	str	r0, [r4, #0]
 80071c0:	e7b5      	b.n	800712e <__hexnan+0x7a>
 80071c2:	2508      	movs	r5, #8
 80071c4:	e7b3      	b.n	800712e <__hexnan+0x7a>
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0dd      	beq.n	8007188 <__hexnan+0xd4>
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	f1c3 0320 	rsb	r3, r3, #32
 80071d4:	40da      	lsrs	r2, r3
 80071d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80071da:	4013      	ands	r3, r2
 80071dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80071e0:	e7d2      	b.n	8007188 <__hexnan+0xd4>
 80071e2:	3f04      	subs	r7, #4
 80071e4:	e7d0      	b.n	8007188 <__hexnan+0xd4>
 80071e6:	2004      	movs	r0, #4
 80071e8:	e7d5      	b.n	8007196 <__hexnan+0xe2>

080071ea <__ascii_mbtowc>:
 80071ea:	b082      	sub	sp, #8
 80071ec:	b901      	cbnz	r1, 80071f0 <__ascii_mbtowc+0x6>
 80071ee:	a901      	add	r1, sp, #4
 80071f0:	b142      	cbz	r2, 8007204 <__ascii_mbtowc+0x1a>
 80071f2:	b14b      	cbz	r3, 8007208 <__ascii_mbtowc+0x1e>
 80071f4:	7813      	ldrb	r3, [r2, #0]
 80071f6:	600b      	str	r3, [r1, #0]
 80071f8:	7812      	ldrb	r2, [r2, #0]
 80071fa:	1e10      	subs	r0, r2, #0
 80071fc:	bf18      	it	ne
 80071fe:	2001      	movne	r0, #1
 8007200:	b002      	add	sp, #8
 8007202:	4770      	bx	lr
 8007204:	4610      	mov	r0, r2
 8007206:	e7fb      	b.n	8007200 <__ascii_mbtowc+0x16>
 8007208:	f06f 0001 	mvn.w	r0, #1
 800720c:	e7f8      	b.n	8007200 <__ascii_mbtowc+0x16>

0800720e <_realloc_r>:
 800720e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007212:	4680      	mov	r8, r0
 8007214:	4615      	mov	r5, r2
 8007216:	460c      	mov	r4, r1
 8007218:	b921      	cbnz	r1, 8007224 <_realloc_r+0x16>
 800721a:	4611      	mov	r1, r2
 800721c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	f7fd be78 	b.w	8004f14 <_malloc_r>
 8007224:	b92a      	cbnz	r2, 8007232 <_realloc_r+0x24>
 8007226:	f7fd fe03 	bl	8004e30 <_free_r>
 800722a:	2400      	movs	r4, #0
 800722c:	4620      	mov	r0, r4
 800722e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007232:	f000 f840 	bl	80072b6 <_malloc_usable_size_r>
 8007236:	4285      	cmp	r5, r0
 8007238:	4606      	mov	r6, r0
 800723a:	d802      	bhi.n	8007242 <_realloc_r+0x34>
 800723c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007240:	d8f4      	bhi.n	800722c <_realloc_r+0x1e>
 8007242:	4629      	mov	r1, r5
 8007244:	4640      	mov	r0, r8
 8007246:	f7fd fe65 	bl	8004f14 <_malloc_r>
 800724a:	4607      	mov	r7, r0
 800724c:	2800      	cmp	r0, #0
 800724e:	d0ec      	beq.n	800722a <_realloc_r+0x1c>
 8007250:	42b5      	cmp	r5, r6
 8007252:	462a      	mov	r2, r5
 8007254:	4621      	mov	r1, r4
 8007256:	bf28      	it	cs
 8007258:	4632      	movcs	r2, r6
 800725a:	f7ff fc47 	bl	8006aec <memcpy>
 800725e:	4621      	mov	r1, r4
 8007260:	4640      	mov	r0, r8
 8007262:	f7fd fde5 	bl	8004e30 <_free_r>
 8007266:	463c      	mov	r4, r7
 8007268:	e7e0      	b.n	800722c <_realloc_r+0x1e>

0800726a <__ascii_wctomb>:
 800726a:	4603      	mov	r3, r0
 800726c:	4608      	mov	r0, r1
 800726e:	b141      	cbz	r1, 8007282 <__ascii_wctomb+0x18>
 8007270:	2aff      	cmp	r2, #255	@ 0xff
 8007272:	d904      	bls.n	800727e <__ascii_wctomb+0x14>
 8007274:	228a      	movs	r2, #138	@ 0x8a
 8007276:	f04f 30ff 	mov.w	r0, #4294967295
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	4770      	bx	lr
 800727e:	2001      	movs	r0, #1
 8007280:	700a      	strb	r2, [r1, #0]
 8007282:	4770      	bx	lr

08007284 <fiprintf>:
 8007284:	b40e      	push	{r1, r2, r3}
 8007286:	b503      	push	{r0, r1, lr}
 8007288:	4601      	mov	r1, r0
 800728a:	ab03      	add	r3, sp, #12
 800728c:	4805      	ldr	r0, [pc, #20]	@ (80072a4 <fiprintf+0x20>)
 800728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007292:	6800      	ldr	r0, [r0, #0]
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	f000 f83d 	bl	8007314 <_vfiprintf_r>
 800729a:	b002      	add	sp, #8
 800729c:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a0:	b003      	add	sp, #12
 80072a2:	4770      	bx	lr
 80072a4:	20000018 	.word	0x20000018

080072a8 <abort>:
 80072a8:	2006      	movs	r0, #6
 80072aa:	b508      	push	{r3, lr}
 80072ac:	f000 fa06 	bl	80076bc <raise>
 80072b0:	2001      	movs	r0, #1
 80072b2:	f7fa faba 	bl	800182a <_exit>

080072b6 <_malloc_usable_size_r>:
 80072b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ba:	1f18      	subs	r0, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfbc      	itt	lt
 80072c0:	580b      	ldrlt	r3, [r1, r0]
 80072c2:	18c0      	addlt	r0, r0, r3
 80072c4:	4770      	bx	lr

080072c6 <__sfputc_r>:
 80072c6:	6893      	ldr	r3, [r2, #8]
 80072c8:	b410      	push	{r4}
 80072ca:	3b01      	subs	r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	6093      	str	r3, [r2, #8]
 80072d0:	da07      	bge.n	80072e2 <__sfputc_r+0x1c>
 80072d2:	6994      	ldr	r4, [r2, #24]
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	db01      	blt.n	80072dc <__sfputc_r+0x16>
 80072d8:	290a      	cmp	r1, #10
 80072da:	d102      	bne.n	80072e2 <__sfputc_r+0x1c>
 80072dc:	bc10      	pop	{r4}
 80072de:	f000 b931 	b.w	8007544 <__swbuf_r>
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	1c58      	adds	r0, r3, #1
 80072e6:	6010      	str	r0, [r2, #0]
 80072e8:	7019      	strb	r1, [r3, #0]
 80072ea:	4608      	mov	r0, r1
 80072ec:	bc10      	pop	{r4}
 80072ee:	4770      	bx	lr

080072f0 <__sfputs_r>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	4606      	mov	r6, r0
 80072f4:	460f      	mov	r7, r1
 80072f6:	4614      	mov	r4, r2
 80072f8:	18d5      	adds	r5, r2, r3
 80072fa:	42ac      	cmp	r4, r5
 80072fc:	d101      	bne.n	8007302 <__sfputs_r+0x12>
 80072fe:	2000      	movs	r0, #0
 8007300:	e007      	b.n	8007312 <__sfputs_r+0x22>
 8007302:	463a      	mov	r2, r7
 8007304:	4630      	mov	r0, r6
 8007306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800730a:	f7ff ffdc 	bl	80072c6 <__sfputc_r>
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	d1f3      	bne.n	80072fa <__sfputs_r+0xa>
 8007312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007314 <_vfiprintf_r>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	460d      	mov	r5, r1
 800731a:	4614      	mov	r4, r2
 800731c:	4698      	mov	r8, r3
 800731e:	4606      	mov	r6, r0
 8007320:	b09d      	sub	sp, #116	@ 0x74
 8007322:	b118      	cbz	r0, 800732c <_vfiprintf_r+0x18>
 8007324:	6a03      	ldr	r3, [r0, #32]
 8007326:	b90b      	cbnz	r3, 800732c <_vfiprintf_r+0x18>
 8007328:	f7fc fe04 	bl	8003f34 <__sinit>
 800732c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800732e:	07d9      	lsls	r1, r3, #31
 8007330:	d405      	bmi.n	800733e <_vfiprintf_r+0x2a>
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	059a      	lsls	r2, r3, #22
 8007336:	d402      	bmi.n	800733e <_vfiprintf_r+0x2a>
 8007338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800733a:	f7fc ff12 	bl	8004162 <__retarget_lock_acquire_recursive>
 800733e:	89ab      	ldrh	r3, [r5, #12]
 8007340:	071b      	lsls	r3, r3, #28
 8007342:	d501      	bpl.n	8007348 <_vfiprintf_r+0x34>
 8007344:	692b      	ldr	r3, [r5, #16]
 8007346:	b99b      	cbnz	r3, 8007370 <_vfiprintf_r+0x5c>
 8007348:	4629      	mov	r1, r5
 800734a:	4630      	mov	r0, r6
 800734c:	f000 f938 	bl	80075c0 <__swsetup_r>
 8007350:	b170      	cbz	r0, 8007370 <_vfiprintf_r+0x5c>
 8007352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007354:	07dc      	lsls	r4, r3, #31
 8007356:	d504      	bpl.n	8007362 <_vfiprintf_r+0x4e>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	b01d      	add	sp, #116	@ 0x74
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	0598      	lsls	r0, r3, #22
 8007366:	d4f7      	bmi.n	8007358 <_vfiprintf_r+0x44>
 8007368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800736a:	f7fc fefb 	bl	8004164 <__retarget_lock_release_recursive>
 800736e:	e7f3      	b.n	8007358 <_vfiprintf_r+0x44>
 8007370:	2300      	movs	r3, #0
 8007372:	9309      	str	r3, [sp, #36]	@ 0x24
 8007374:	2320      	movs	r3, #32
 8007376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800737a:	2330      	movs	r3, #48	@ 0x30
 800737c:	f04f 0901 	mov.w	r9, #1
 8007380:	f8cd 800c 	str.w	r8, [sp, #12]
 8007384:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007530 <_vfiprintf_r+0x21c>
 8007388:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800738c:	4623      	mov	r3, r4
 800738e:	469a      	mov	sl, r3
 8007390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007394:	b10a      	cbz	r2, 800739a <_vfiprintf_r+0x86>
 8007396:	2a25      	cmp	r2, #37	@ 0x25
 8007398:	d1f9      	bne.n	800738e <_vfiprintf_r+0x7a>
 800739a:	ebba 0b04 	subs.w	fp, sl, r4
 800739e:	d00b      	beq.n	80073b8 <_vfiprintf_r+0xa4>
 80073a0:	465b      	mov	r3, fp
 80073a2:	4622      	mov	r2, r4
 80073a4:	4629      	mov	r1, r5
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7ff ffa2 	bl	80072f0 <__sfputs_r>
 80073ac:	3001      	adds	r0, #1
 80073ae:	f000 80a7 	beq.w	8007500 <_vfiprintf_r+0x1ec>
 80073b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073b4:	445a      	add	r2, fp
 80073b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b8:	f89a 3000 	ldrb.w	r3, [sl]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 809f 	beq.w	8007500 <_vfiprintf_r+0x1ec>
 80073c2:	2300      	movs	r3, #0
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073cc:	f10a 0a01 	add.w	sl, sl, #1
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	9307      	str	r3, [sp, #28]
 80073d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80073da:	4654      	mov	r4, sl
 80073dc:	2205      	movs	r2, #5
 80073de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e2:	4853      	ldr	r0, [pc, #332]	@ (8007530 <_vfiprintf_r+0x21c>)
 80073e4:	f7fc febf 	bl	8004166 <memchr>
 80073e8:	9a04      	ldr	r2, [sp, #16]
 80073ea:	b9d8      	cbnz	r0, 8007424 <_vfiprintf_r+0x110>
 80073ec:	06d1      	lsls	r1, r2, #27
 80073ee:	bf44      	itt	mi
 80073f0:	2320      	movmi	r3, #32
 80073f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f6:	0713      	lsls	r3, r2, #28
 80073f8:	bf44      	itt	mi
 80073fa:	232b      	movmi	r3, #43	@ 0x2b
 80073fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007400:	f89a 3000 	ldrb.w	r3, [sl]
 8007404:	2b2a      	cmp	r3, #42	@ 0x2a
 8007406:	d015      	beq.n	8007434 <_vfiprintf_r+0x120>
 8007408:	4654      	mov	r4, sl
 800740a:	2000      	movs	r0, #0
 800740c:	f04f 0c0a 	mov.w	ip, #10
 8007410:	9a07      	ldr	r2, [sp, #28]
 8007412:	4621      	mov	r1, r4
 8007414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007418:	3b30      	subs	r3, #48	@ 0x30
 800741a:	2b09      	cmp	r3, #9
 800741c:	d94b      	bls.n	80074b6 <_vfiprintf_r+0x1a2>
 800741e:	b1b0      	cbz	r0, 800744e <_vfiprintf_r+0x13a>
 8007420:	9207      	str	r2, [sp, #28]
 8007422:	e014      	b.n	800744e <_vfiprintf_r+0x13a>
 8007424:	eba0 0308 	sub.w	r3, r0, r8
 8007428:	fa09 f303 	lsl.w	r3, r9, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	46a2      	mov	sl, r4
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	e7d2      	b.n	80073da <_vfiprintf_r+0xc6>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	1d19      	adds	r1, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	9103      	str	r1, [sp, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfbb      	ittet	lt
 8007440:	425b      	neglt	r3, r3
 8007442:	f042 0202 	orrlt.w	r2, r2, #2
 8007446:	9307      	strge	r3, [sp, #28]
 8007448:	9307      	strlt	r3, [sp, #28]
 800744a:	bfb8      	it	lt
 800744c:	9204      	strlt	r2, [sp, #16]
 800744e:	7823      	ldrb	r3, [r4, #0]
 8007450:	2b2e      	cmp	r3, #46	@ 0x2e
 8007452:	d10a      	bne.n	800746a <_vfiprintf_r+0x156>
 8007454:	7863      	ldrb	r3, [r4, #1]
 8007456:	2b2a      	cmp	r3, #42	@ 0x2a
 8007458:	d132      	bne.n	80074c0 <_vfiprintf_r+0x1ac>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	3402      	adds	r4, #2
 800745e:	1d1a      	adds	r2, r3, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	9203      	str	r2, [sp, #12]
 8007464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007534 <_vfiprintf_r+0x220>
 800746e:	2203      	movs	r2, #3
 8007470:	4650      	mov	r0, sl
 8007472:	7821      	ldrb	r1, [r4, #0]
 8007474:	f7fc fe77 	bl	8004166 <memchr>
 8007478:	b138      	cbz	r0, 800748a <_vfiprintf_r+0x176>
 800747a:	2240      	movs	r2, #64	@ 0x40
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	eba0 000a 	sub.w	r0, r0, sl
 8007482:	4082      	lsls	r2, r0
 8007484:	4313      	orrs	r3, r2
 8007486:	3401      	adds	r4, #1
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748e:	2206      	movs	r2, #6
 8007490:	4829      	ldr	r0, [pc, #164]	@ (8007538 <_vfiprintf_r+0x224>)
 8007492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007496:	f7fc fe66 	bl	8004166 <memchr>
 800749a:	2800      	cmp	r0, #0
 800749c:	d03f      	beq.n	800751e <_vfiprintf_r+0x20a>
 800749e:	4b27      	ldr	r3, [pc, #156]	@ (800753c <_vfiprintf_r+0x228>)
 80074a0:	bb1b      	cbnz	r3, 80074ea <_vfiprintf_r+0x1d6>
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	3307      	adds	r3, #7
 80074a6:	f023 0307 	bic.w	r3, r3, #7
 80074aa:	3308      	adds	r3, #8
 80074ac:	9303      	str	r3, [sp, #12]
 80074ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b0:	443b      	add	r3, r7
 80074b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b4:	e76a      	b.n	800738c <_vfiprintf_r+0x78>
 80074b6:	460c      	mov	r4, r1
 80074b8:	2001      	movs	r0, #1
 80074ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80074be:	e7a8      	b.n	8007412 <_vfiprintf_r+0xfe>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f04f 0c0a 	mov.w	ip, #10
 80074c6:	4619      	mov	r1, r3
 80074c8:	3401      	adds	r4, #1
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	4620      	mov	r0, r4
 80074ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074d2:	3a30      	subs	r2, #48	@ 0x30
 80074d4:	2a09      	cmp	r2, #9
 80074d6:	d903      	bls.n	80074e0 <_vfiprintf_r+0x1cc>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0c6      	beq.n	800746a <_vfiprintf_r+0x156>
 80074dc:	9105      	str	r1, [sp, #20]
 80074de:	e7c4      	b.n	800746a <_vfiprintf_r+0x156>
 80074e0:	4604      	mov	r4, r0
 80074e2:	2301      	movs	r3, #1
 80074e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80074e8:	e7f0      	b.n	80074cc <_vfiprintf_r+0x1b8>
 80074ea:	ab03      	add	r3, sp, #12
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	462a      	mov	r2, r5
 80074f0:	4630      	mov	r0, r6
 80074f2:	4b13      	ldr	r3, [pc, #76]	@ (8007540 <_vfiprintf_r+0x22c>)
 80074f4:	a904      	add	r1, sp, #16
 80074f6:	f7fb fec3 	bl	8003280 <_printf_float>
 80074fa:	4607      	mov	r7, r0
 80074fc:	1c78      	adds	r0, r7, #1
 80074fe:	d1d6      	bne.n	80074ae <_vfiprintf_r+0x19a>
 8007500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007502:	07d9      	lsls	r1, r3, #31
 8007504:	d405      	bmi.n	8007512 <_vfiprintf_r+0x1fe>
 8007506:	89ab      	ldrh	r3, [r5, #12]
 8007508:	059a      	lsls	r2, r3, #22
 800750a:	d402      	bmi.n	8007512 <_vfiprintf_r+0x1fe>
 800750c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800750e:	f7fc fe29 	bl	8004164 <__retarget_lock_release_recursive>
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	065b      	lsls	r3, r3, #25
 8007516:	f53f af1f 	bmi.w	8007358 <_vfiprintf_r+0x44>
 800751a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800751c:	e71e      	b.n	800735c <_vfiprintf_r+0x48>
 800751e:	ab03      	add	r3, sp, #12
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	462a      	mov	r2, r5
 8007524:	4630      	mov	r0, r6
 8007526:	4b06      	ldr	r3, [pc, #24]	@ (8007540 <_vfiprintf_r+0x22c>)
 8007528:	a904      	add	r1, sp, #16
 800752a:	f7fc f947 	bl	80037bc <_printf_i>
 800752e:	e7e4      	b.n	80074fa <_vfiprintf_r+0x1e6>
 8007530:	08007c61 	.word	0x08007c61
 8007534:	08007c67 	.word	0x08007c67
 8007538:	08007c6b 	.word	0x08007c6b
 800753c:	08003281 	.word	0x08003281
 8007540:	080072f1 	.word	0x080072f1

08007544 <__swbuf_r>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	460e      	mov	r6, r1
 8007548:	4614      	mov	r4, r2
 800754a:	4605      	mov	r5, r0
 800754c:	b118      	cbz	r0, 8007556 <__swbuf_r+0x12>
 800754e:	6a03      	ldr	r3, [r0, #32]
 8007550:	b90b      	cbnz	r3, 8007556 <__swbuf_r+0x12>
 8007552:	f7fc fcef 	bl	8003f34 <__sinit>
 8007556:	69a3      	ldr	r3, [r4, #24]
 8007558:	60a3      	str	r3, [r4, #8]
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	071a      	lsls	r2, r3, #28
 800755e:	d501      	bpl.n	8007564 <__swbuf_r+0x20>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	b943      	cbnz	r3, 8007576 <__swbuf_r+0x32>
 8007564:	4621      	mov	r1, r4
 8007566:	4628      	mov	r0, r5
 8007568:	f000 f82a 	bl	80075c0 <__swsetup_r>
 800756c:	b118      	cbz	r0, 8007576 <__swbuf_r+0x32>
 800756e:	f04f 37ff 	mov.w	r7, #4294967295
 8007572:	4638      	mov	r0, r7
 8007574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	6922      	ldr	r2, [r4, #16]
 800757a:	b2f6      	uxtb	r6, r6
 800757c:	1a98      	subs	r0, r3, r2
 800757e:	6963      	ldr	r3, [r4, #20]
 8007580:	4637      	mov	r7, r6
 8007582:	4283      	cmp	r3, r0
 8007584:	dc05      	bgt.n	8007592 <__swbuf_r+0x4e>
 8007586:	4621      	mov	r1, r4
 8007588:	4628      	mov	r0, r5
 800758a:	f7ff fa4b 	bl	8006a24 <_fflush_r>
 800758e:	2800      	cmp	r0, #0
 8007590:	d1ed      	bne.n	800756e <__swbuf_r+0x2a>
 8007592:	68a3      	ldr	r3, [r4, #8]
 8007594:	3b01      	subs	r3, #1
 8007596:	60a3      	str	r3, [r4, #8]
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	6022      	str	r2, [r4, #0]
 800759e:	701e      	strb	r6, [r3, #0]
 80075a0:	6962      	ldr	r2, [r4, #20]
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d004      	beq.n	80075b2 <__swbuf_r+0x6e>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	07db      	lsls	r3, r3, #31
 80075ac:	d5e1      	bpl.n	8007572 <__swbuf_r+0x2e>
 80075ae:	2e0a      	cmp	r6, #10
 80075b0:	d1df      	bne.n	8007572 <__swbuf_r+0x2e>
 80075b2:	4621      	mov	r1, r4
 80075b4:	4628      	mov	r0, r5
 80075b6:	f7ff fa35 	bl	8006a24 <_fflush_r>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d0d9      	beq.n	8007572 <__swbuf_r+0x2e>
 80075be:	e7d6      	b.n	800756e <__swbuf_r+0x2a>

080075c0 <__swsetup_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4b29      	ldr	r3, [pc, #164]	@ (8007668 <__swsetup_r+0xa8>)
 80075c4:	4605      	mov	r5, r0
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	460c      	mov	r4, r1
 80075ca:	b118      	cbz	r0, 80075d4 <__swsetup_r+0x14>
 80075cc:	6a03      	ldr	r3, [r0, #32]
 80075ce:	b90b      	cbnz	r3, 80075d4 <__swsetup_r+0x14>
 80075d0:	f7fc fcb0 	bl	8003f34 <__sinit>
 80075d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d8:	0719      	lsls	r1, r3, #28
 80075da:	d422      	bmi.n	8007622 <__swsetup_r+0x62>
 80075dc:	06da      	lsls	r2, r3, #27
 80075de:	d407      	bmi.n	80075f0 <__swsetup_r+0x30>
 80075e0:	2209      	movs	r2, #9
 80075e2:	602a      	str	r2, [r5, #0]
 80075e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	81a3      	strh	r3, [r4, #12]
 80075ee:	e033      	b.n	8007658 <__swsetup_r+0x98>
 80075f0:	0758      	lsls	r0, r3, #29
 80075f2:	d512      	bpl.n	800761a <__swsetup_r+0x5a>
 80075f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075f6:	b141      	cbz	r1, 800760a <__swsetup_r+0x4a>
 80075f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075fc:	4299      	cmp	r1, r3
 80075fe:	d002      	beq.n	8007606 <__swsetup_r+0x46>
 8007600:	4628      	mov	r0, r5
 8007602:	f7fd fc15 	bl	8004e30 <_free_r>
 8007606:	2300      	movs	r3, #0
 8007608:	6363      	str	r3, [r4, #52]	@ 0x34
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	2300      	movs	r3, #0
 8007614:	6063      	str	r3, [r4, #4]
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f043 0308 	orr.w	r3, r3, #8
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	b94b      	cbnz	r3, 800763a <__swsetup_r+0x7a>
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800762c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007630:	d003      	beq.n	800763a <__swsetup_r+0x7a>
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f000 f882 	bl	800773e <__smakebuf_r>
 800763a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763e:	f013 0201 	ands.w	r2, r3, #1
 8007642:	d00a      	beq.n	800765a <__swsetup_r+0x9a>
 8007644:	2200      	movs	r2, #0
 8007646:	60a2      	str	r2, [r4, #8]
 8007648:	6962      	ldr	r2, [r4, #20]
 800764a:	4252      	negs	r2, r2
 800764c:	61a2      	str	r2, [r4, #24]
 800764e:	6922      	ldr	r2, [r4, #16]
 8007650:	b942      	cbnz	r2, 8007664 <__swsetup_r+0xa4>
 8007652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007656:	d1c5      	bne.n	80075e4 <__swsetup_r+0x24>
 8007658:	bd38      	pop	{r3, r4, r5, pc}
 800765a:	0799      	lsls	r1, r3, #30
 800765c:	bf58      	it	pl
 800765e:	6962      	ldrpl	r2, [r4, #20]
 8007660:	60a2      	str	r2, [r4, #8]
 8007662:	e7f4      	b.n	800764e <__swsetup_r+0x8e>
 8007664:	2000      	movs	r0, #0
 8007666:	e7f7      	b.n	8007658 <__swsetup_r+0x98>
 8007668:	20000018 	.word	0x20000018

0800766c <_raise_r>:
 800766c:	291f      	cmp	r1, #31
 800766e:	b538      	push	{r3, r4, r5, lr}
 8007670:	4605      	mov	r5, r0
 8007672:	460c      	mov	r4, r1
 8007674:	d904      	bls.n	8007680 <_raise_r+0x14>
 8007676:	2316      	movs	r3, #22
 8007678:	6003      	str	r3, [r0, #0]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	bd38      	pop	{r3, r4, r5, pc}
 8007680:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007682:	b112      	cbz	r2, 800768a <_raise_r+0x1e>
 8007684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007688:	b94b      	cbnz	r3, 800769e <_raise_r+0x32>
 800768a:	4628      	mov	r0, r5
 800768c:	f000 f830 	bl	80076f0 <_getpid_r>
 8007690:	4622      	mov	r2, r4
 8007692:	4601      	mov	r1, r0
 8007694:	4628      	mov	r0, r5
 8007696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800769a:	f000 b817 	b.w	80076cc <_kill_r>
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d00a      	beq.n	80076b8 <_raise_r+0x4c>
 80076a2:	1c59      	adds	r1, r3, #1
 80076a4:	d103      	bne.n	80076ae <_raise_r+0x42>
 80076a6:	2316      	movs	r3, #22
 80076a8:	6003      	str	r3, [r0, #0]
 80076aa:	2001      	movs	r0, #1
 80076ac:	e7e7      	b.n	800767e <_raise_r+0x12>
 80076ae:	2100      	movs	r1, #0
 80076b0:	4620      	mov	r0, r4
 80076b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076b6:	4798      	blx	r3
 80076b8:	2000      	movs	r0, #0
 80076ba:	e7e0      	b.n	800767e <_raise_r+0x12>

080076bc <raise>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	@ (80076c8 <raise+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f7ff bfd3 	b.w	800766c <_raise_r>
 80076c6:	bf00      	nop
 80076c8:	20000018 	.word	0x20000018

080076cc <_kill_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	2300      	movs	r3, #0
 80076d0:	4d06      	ldr	r5, [pc, #24]	@ (80076ec <_kill_r+0x20>)
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	f7fa f896 	bl	800180a <_kill>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d102      	bne.n	80076e8 <_kill_r+0x1c>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	b103      	cbz	r3, 80076e8 <_kill_r+0x1c>
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	200003cc 	.word	0x200003cc

080076f0 <_getpid_r>:
 80076f0:	f7fa b884 	b.w	80017fc <_getpid>

080076f4 <__swhatbuf_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	4615      	mov	r5, r2
 80076fe:	2900      	cmp	r1, #0
 8007700:	461e      	mov	r6, r3
 8007702:	b096      	sub	sp, #88	@ 0x58
 8007704:	da0c      	bge.n	8007720 <__swhatbuf_r+0x2c>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	2100      	movs	r1, #0
 800770a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800770e:	bf14      	ite	ne
 8007710:	2340      	movne	r3, #64	@ 0x40
 8007712:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007716:	2000      	movs	r0, #0
 8007718:	6031      	str	r1, [r6, #0]
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	b016      	add	sp, #88	@ 0x58
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	466a      	mov	r2, sp
 8007722:	f000 f849 	bl	80077b8 <_fstat_r>
 8007726:	2800      	cmp	r0, #0
 8007728:	dbed      	blt.n	8007706 <__swhatbuf_r+0x12>
 800772a:	9901      	ldr	r1, [sp, #4]
 800772c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007730:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007734:	4259      	negs	r1, r3
 8007736:	4159      	adcs	r1, r3
 8007738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800773c:	e7eb      	b.n	8007716 <__swhatbuf_r+0x22>

0800773e <__smakebuf_r>:
 800773e:	898b      	ldrh	r3, [r1, #12]
 8007740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007742:	079d      	lsls	r5, r3, #30
 8007744:	4606      	mov	r6, r0
 8007746:	460c      	mov	r4, r1
 8007748:	d507      	bpl.n	800775a <__smakebuf_r+0x1c>
 800774a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	6123      	str	r3, [r4, #16]
 8007752:	2301      	movs	r3, #1
 8007754:	6163      	str	r3, [r4, #20]
 8007756:	b003      	add	sp, #12
 8007758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800775a:	466a      	mov	r2, sp
 800775c:	ab01      	add	r3, sp, #4
 800775e:	f7ff ffc9 	bl	80076f4 <__swhatbuf_r>
 8007762:	9f00      	ldr	r7, [sp, #0]
 8007764:	4605      	mov	r5, r0
 8007766:	4639      	mov	r1, r7
 8007768:	4630      	mov	r0, r6
 800776a:	f7fd fbd3 	bl	8004f14 <_malloc_r>
 800776e:	b948      	cbnz	r0, 8007784 <__smakebuf_r+0x46>
 8007770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007774:	059a      	lsls	r2, r3, #22
 8007776:	d4ee      	bmi.n	8007756 <__smakebuf_r+0x18>
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	e7e2      	b.n	800774a <__smakebuf_r+0xc>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800778a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	9b01      	ldr	r3, [sp, #4]
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	b15b      	cbz	r3, 80077ae <__smakebuf_r+0x70>
 8007796:	4630      	mov	r0, r6
 8007798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779c:	f000 f81e 	bl	80077dc <_isatty_r>
 80077a0:	b128      	cbz	r0, 80077ae <__smakebuf_r+0x70>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f023 0303 	bic.w	r3, r3, #3
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	431d      	orrs	r5, r3
 80077b2:	81a5      	strh	r5, [r4, #12]
 80077b4:	e7cf      	b.n	8007756 <__smakebuf_r+0x18>
	...

080077b8 <_fstat_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	2300      	movs	r3, #0
 80077bc:	4d06      	ldr	r5, [pc, #24]	@ (80077d8 <_fstat_r+0x20>)
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	f7fa f87f 	bl	80018c8 <_fstat>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d102      	bne.n	80077d4 <_fstat_r+0x1c>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	b103      	cbz	r3, 80077d4 <_fstat_r+0x1c>
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	bd38      	pop	{r3, r4, r5, pc}
 80077d6:	bf00      	nop
 80077d8:	200003cc 	.word	0x200003cc

080077dc <_isatty_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	2300      	movs	r3, #0
 80077e0:	4d05      	ldr	r5, [pc, #20]	@ (80077f8 <_isatty_r+0x1c>)
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	f7fa f87d 	bl	80018e6 <_isatty>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_isatty_r+0x1a>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_isatty_r+0x1a>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	200003cc 	.word	0x200003cc

080077fc <_init>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr

08007808 <_fini>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr
