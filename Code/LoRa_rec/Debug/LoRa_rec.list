
LoRa_rec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003cd0  08003cd0  00004cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d98  08003d98  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d98  08003d98  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d98  08003d98  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d98  08003d98  00004d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d9c  08003d9c  00004d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003da0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000005c  08003dfc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08003dfc  000053c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c7a  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dca  00000000  00000000  0000ecff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00010ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f3  00000000  00000000  00011400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179b5  00000000  00000000  00011af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf84  00000000  00000000  000294a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000840ad  00000000  00000000  0003542c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b94d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d8  00000000  00000000  000b951c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000bbef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cb4 	.word	0x08003cb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003cb4 	.word	0x08003cb4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000938:	b4b0      	push	{r4, r5, r7}
 800093a:	b08f      	sub	sp, #60	@ 0x3c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000940:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000946:	2307      	movs	r3, #7
 8000948:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800094c:	2307      	movs	r3, #7
 800094e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000952:	2301      	movs	r3, #1
 8000954:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000958:	23ff      	movs	r3, #255	@ 0xff
 800095a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800095e:	2364      	movs	r3, #100	@ 0x64
 8000960:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000964:	2308      	movs	r3, #8
 8000966:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	461d      	mov	r5, r3
 800096c:	f107 040c 	add.w	r4, r7, #12
 8000970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000978:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800097c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	373c      	adds	r7, #60	@ 0x3c
 8000984:	46bd      	mov	sp, r7
 8000986:	bcb0      	pop	{r4, r5, r7}
 8000988:	4770      	bx	lr

0800098a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000994:	2101      	movs	r1, #1
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 f9ff 	bl	8000d9a <LoRa_read>
 800099c:	4603      	mov	r3, r0
 800099e:	73bb      	strb	r3, [r7, #14]
	data = read;
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d107      	bne.n	80009ba <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	f023 0307 	bic.w	r3, r3, #7
 80009b0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
 80009b8:	e03e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d10c      	bne.n	80009da <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80009c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009c4:	f023 0307 	bic.w	r3, r3, #7
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	61da      	str	r2, [r3, #28]
 80009d8:	e02e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d10c      	bne.n	80009fa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80009e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009e4:	f023 0307 	bic.w	r3, r3, #7
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	f043 0303 	orr.w	r3, r3, #3
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2203      	movs	r2, #3
 80009f6:	61da      	str	r2, [r3, #28]
 80009f8:	e01e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d10c      	bne.n	8000a1a <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a04:	f023 0307 	bic.w	r3, r3, #7
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	f043 0305 	orr.w	r3, r3, #5
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2205      	movs	r2, #5
 8000a16:	61da      	str	r2, [r3, #28]
 8000a18:	e00e      	b.n	8000a38 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	2b06      	cmp	r3, #6
 8000a1e:	d10b      	bne.n	8000a38 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a24:	f023 0307 	bic.w	r3, r3, #7
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	f043 0306 	orr.w	r3, r3, #6
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2206      	movs	r2, #6
 8000a36:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 f9c5 	bl	8000dce <LoRa_write>
	//HAL_Delay(10);
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	f001 f8e8 	bl	8001c3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6998      	ldr	r0, [r3, #24]
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	f001 fd8c 	bl	8002594 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a7c:	bf00      	nop
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 f991 	bl	8002daa <HAL_SPI_GetState>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d1f7      	bne.n	8000a7e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	6998      	ldr	r0, [r3, #24]
 8000a92:	8b3a      	ldrh	r2, [r7, #24]
 8000a94:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a98:	6839      	ldr	r1, [r7, #0]
 8000a9a:	f001 febe 	bl	800281a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a9e:	bf00      	nop
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 f980 	bl	8002daa <HAL_SPI_GetState>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d1f7      	bne.n	8000aa0 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	889b      	ldrh	r3, [r3, #4]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	f001 f8be 	bl	8001c3c <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f001 f8aa 	bl	8001c3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	6998      	ldr	r0, [r3, #24]
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	f001 fd4e 	bl	8002594 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000af8:	bf00      	nop
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 f953 	bl	8002daa <HAL_SPI_GetState>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d1f7      	bne.n	8000afa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6998      	ldr	r0, [r3, #24]
 8000b0e:	8b3a      	ldrh	r2, [r7, #24]
 8000b10:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b14:	6839      	ldr	r1, [r7, #0]
 8000b16:	f001 fd3d 	bl	8002594 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b1a:	bf00      	nop
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 f942 	bl	8002daa <HAL_SPI_GetState>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d1f7      	bne.n	8000b1c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	889b      	ldrh	r3, [r3, #4]
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	f001 f880 	bl	8001c3c <HAL_GPIO_WritePin>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000b50:	2126      	movs	r1, #38	@ 0x26
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 f921 	bl	8000d9a <LoRa_read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e003      	b.n	8000b74 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	f023 0308 	bic.w	r3, r3, #8
 8000b72:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	461a      	mov	r2, r3
 8000b78:	2126      	movs	r1, #38	@ 0x26
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f927 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000b80:	200a      	movs	r0, #10
 8000b82:	f000 fdcf 	bl	8001724 <HAL_Delay>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b096      	sub	sp, #88	@ 0x58
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000b98:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <LoRa_setAutoLDO+0x68>)
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	2250      	movs	r2, #80	@ 0x50
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 fc2a 	bl	80033fc <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc1b 	bl	80003f0 <__aeabi_i2d>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	3358      	adds	r3, #88	@ 0x58
 8000bc4:	443b      	add	r3, r7
 8000bc6:	3b50      	subs	r3, #80	@ 0x50
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fda4 	bl	8000718 <__aeabi_ddiv>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f7ff fe86 	bl	80008e8 <__aeabi_d2iz>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	bfcc      	ite	gt
 8000be2:	2301      	movgt	r3, #1
 8000be4:	2300      	movle	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffaa 	bl	8000b44 <LoRa_setLowDaraRateOptimization>
}
 8000bf0:	bf00      	nop
 8000bf2:	3758      	adds	r7, #88	@ 0x58
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08003cd0 	.word	0x08003cd0

08000bfc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	04db      	lsls	r3, r3, #19
 8000c0a:	115b      	asrs	r3, r3, #5
 8000c0c:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	0c1b      	lsrs	r3, r3, #16
 8000c12:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000c14:	7afb      	ldrb	r3, [r7, #11]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2106      	movs	r1, #6
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f8d7 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c20:	2005      	movs	r0, #5
 8000c22:	f000 fd7f 	bl	8001724 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2107      	movs	r1, #7
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f8cb 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f000 fd73 	bl	8001724 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	461a      	mov	r2, r3
 8000c46:	2108      	movs	r1, #8
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f8c0 	bl	8000dce <LoRa_write>
	HAL_Delay(5);
 8000c4e:	2005      	movs	r0, #5
 8000c50:	f000 fd68 	bl	8001724 <HAL_Delay>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2b0c      	cmp	r3, #12
 8000c6a:	dd01      	ble.n	8000c70 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	dc01      	bgt.n	8000c7a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000c76:	2307      	movs	r3, #7
 8000c78:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000c7a:	211e      	movs	r1, #30
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f88c 	bl	8000d9a <LoRa_read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000c86:	200a      	movs	r0, #10
 8000c88:	f000 fd4c 	bl	8001724 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	211e      	movs	r1, #30
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f891 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000cac:	200a      	movs	r0, #10
 8000cae:	f000 fd39 	bl	8001724 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff6c 	bl	8000b90 <LoRa_setAutoLDO>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	2109      	movs	r1, #9
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f87b 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f000 fd23 	bl	8001724 <HAL_Delay>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cfc:	d801      	bhi.n	8000d02 <LoRa_setOCP+0x1a>
		current = 45;
 8000cfe:	232d      	movs	r3, #45	@ 0x2d
 8000d00:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	2bf0      	cmp	r3, #240	@ 0xf0
 8000d06:	d901      	bls.n	8000d0c <LoRa_setOCP+0x24>
		current = 240;
 8000d08:	23f0      	movs	r3, #240	@ 0xf0
 8000d0a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	2b78      	cmp	r3, #120	@ 0x78
 8000d10:	d809      	bhi.n	8000d26 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	3b2d      	subs	r3, #45	@ 0x2d
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <LoRa_setOCP+0x78>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1052      	asrs	r2, r2, #1
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e00b      	b.n	8000d3e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	2bf0      	cmp	r3, #240	@ 0xf0
 8000d2a:	d808      	bhi.n	8000d3e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	331e      	adds	r3, #30
 8000d30:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <LoRa_setOCP+0x78>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	1092      	asrs	r2, r2, #2
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3320      	adds	r3, #32
 8000d42:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	461a      	mov	r2, r3
 8000d48:	210b      	movs	r1, #11
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f83f 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000d50:	200a      	movs	r0, #10
 8000d52:	f000 fce7 	bl	8001724 <HAL_Delay>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	66666667 	.word	0x66666667

08000d64 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000d6c:	211e      	movs	r1, #30
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f813 	bl	8000d9a <LoRa_read>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	f043 0307 	orr.w	r3, r3, #7
 8000d7e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	461a      	mov	r2, r3
 8000d84:	211e      	movs	r1, #30
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f821 	bl	8000dce <LoRa_write>
	HAL_Delay(10);
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f000 fcc9 	bl	8001724 <HAL_Delay>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af02      	add	r7, sp, #8
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000db0:	f107 030f 	add.w	r3, r7, #15
 8000db4:	f107 010e 	add.w	r1, r7, #14
 8000db8:	2201      	movs	r2, #1
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fe44 	bl	8000a4c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af02      	add	r7, sp, #8
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70fb      	strb	r3, [r7, #3]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000de8:	78bb      	ldrb	r3, [r7, #2]
 8000dea:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000dec:	f107 030f 	add.w	r3, r7, #15
 8000df0:	f107 010e 	add.w	r1, r7, #14
 8000df4:	2201      	movs	r2, #1
 8000df6:	9200      	str	r2, [sp, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fe64 	bl	8000ac8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

	return 1;
 8000e10:	2301      	movs	r3, #1
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000e24:	2105      	movs	r1, #5
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fdaf 	bl	800098a <LoRa_gotoMode>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	e007      	b.n	8000e5c <LoRa_receive+0x28>
		data[i]=0;
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	4413      	add	r3, r2
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf3      	blt.n	8000e4c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000e64:	2101      	movs	r1, #1
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f7ff fd8f 	bl	800098a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000e6c:	2112      	movs	r1, #18
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff ff93 	bl	8000d9a <LoRa_read>
 8000e74:	4603      	mov	r3, r0
 8000e76:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000e78:	7cfb      	ldrb	r3, [r7, #19]
 8000e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d02f      	beq.n	8000ee2 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000e82:	22ff      	movs	r2, #255	@ 0xff
 8000e84:	2112      	movs	r1, #18
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f7ff ffa1 	bl	8000dce <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000e8c:	2113      	movs	r1, #19
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f7ff ff83 	bl	8000d9a <LoRa_read>
 8000e94:	4603      	mov	r3, r0
 8000e96:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000e98:	2110      	movs	r1, #16
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f7ff ff7d 	bl	8000d9a <LoRa_read>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ea4:	7cfb      	ldrb	r3, [r7, #19]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	210d      	movs	r1, #13
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f7ff ff8f 	bl	8000dce <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000eb0:	7cba      	ldrb	r2, [r7, #18]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	bf28      	it	cs
 8000eb8:	4613      	movcs	r3, r2
 8000eba:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e00b      	b.n	8000eda <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	18d4      	adds	r4, r2, r3
 8000ec8:	2100      	movs	r1, #0
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff ff65 	bl	8000d9a <LoRa_read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dbef      	blt.n	8000ec2 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff fd50 	bl	800098a <LoRa_gotoMode>
    return min;
 8000eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3724      	adds	r7, #36	@ 0x24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}

08000ef4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff83 	bl	8000e08 <LoRa_isvalid>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 8096 	beq.w	8001036 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff fd3c 	bl	800098a <LoRa_gotoMode>
			HAL_Delay(10);
 8000f12:	200a      	movs	r0, #10
 8000f14:	f000 fc06 	bl	8001724 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000f18:	2101      	movs	r1, #1
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ff3d 	bl	8000d9a <LoRa_read>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f000 fbfd 	bl	8001724 <HAL_Delay>
			data = read | 0x80;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f30:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	461a      	mov	r2, r3
 8000f36:	2101      	movs	r1, #1
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff48 	bl	8000dce <LoRa_write>
			HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	@ 0x64
 8000f40:	f000 fbf0 	bl	8001724 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fe56 	bl	8000bfc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff feb1 	bl	8000cc0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff febe 	bl	8000ce8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000f6c:	2223      	movs	r2, #35	@ 0x23
 8000f6e:	210c      	movs	r1, #12
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff2c 	bl	8000dce <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fef4 	bl	8000d64 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fe69 	bl	8000c5c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000f8a:	22ff      	movs	r2, #255	@ 0xff
 8000f8c:	211f      	movs	r1, #31
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff1d 	bl	8000dce <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	211d      	movs	r1, #29
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff09 	bl	8000dce <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fde7 	bl	8000b90 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2120      	movs	r1, #32
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fefc 	bl	8000dce <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2121      	movs	r1, #33	@ 0x21
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fef4 	bl	8000dce <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000fe6:	2140      	movs	r1, #64	@ 0x40
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff fed6 	bl	8000d9a <LoRa_read>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000ff8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2140      	movs	r1, #64	@ 0x40
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fee4 	bl	8000dce <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001006:	2101      	movs	r1, #1
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fcbe 	bl	800098a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001014:	200a      	movs	r0, #10
 8001016:	f000 fb85 	bl	8001724 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800101a:	2142      	movs	r1, #66	@ 0x42
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff febc 	bl	8000d9a <LoRa_read>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b12      	cmp	r3, #18
 800102a:	d101      	bne.n	8001030 <LoRa_init+0x13c>
				return LORA_OK;
 800102c:	23c8      	movs	r3, #200	@ 0xc8
 800102e:	e004      	b.n	800103a <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001030:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001034:	e001      	b.n	800103a <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001036:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001058:	4b23      	ldr	r3, [pc, #140]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a22      	ldr	r2, [pc, #136]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a1c      	ldr	r2, [pc, #112]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a16      	ldr	r2, [pc, #88]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_GPIO_Init+0xa4>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2103      	movs	r1, #3
 80010a4:	4811      	ldr	r0, [pc, #68]	@ (80010ec <MX_GPIO_Init+0xa8>)
 80010a6:	f000 fdc9 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 80010aa:	2303      	movs	r3, #3
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	480a      	ldr	r0, [pc, #40]	@ (80010ec <MX_GPIO_Init+0xa8>)
 80010c2:	f000 fc37 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIDO_Pin;
 80010c6:	2304      	movs	r3, #4
 80010c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_GPIO_Init+0xac>)
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIDO_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4619      	mov	r1, r3
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <MX_GPIO_Init+0xa8>)
 80010da:	f000 fc2b 	bl	8001934 <HAL_GPIO_Init>

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	10110000 	.word	0x10110000

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b08c      	sub	sp, #48	@ 0x30
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fa:	f000 fab1 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fe:	f000 f885 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001102:	f7ff ff9f 	bl	8001044 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001106:	f000 f8cd 	bl	80012a4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800110a:	f000 fa0d 	bl	8001528 <MX_USART1_UART_Init>

  myLoRa = newLoRa();
 800110e:	4c34      	ldr	r4, [pc, #208]	@ (80011e0 <main+0xec>)
 8001110:	463b      	mov	r3, r7
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fc10 	bl	8000938 <newLoRa>
 8001118:	4625      	mov	r5, r4
 800111a:	463c      	mov	r4, r7
 800111c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001124:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001128:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  	  myLoRa.CS_port         = NSS_GPIO_Port;
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <main+0xec>)
 800112e:	4a2d      	ldr	r2, [pc, #180]	@ (80011e4 <main+0xf0>)
 8001130:	601a      	str	r2, [r3, #0]
  	  myLoRa.CS_pin          = NSS_Pin;
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <main+0xec>)
 8001134:	2201      	movs	r2, #1
 8001136:	809a      	strh	r2, [r3, #4]
  	  myLoRa.reset_port      = RST_GPIO_Port;
 8001138:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <main+0xec>)
 800113a:	4a2a      	ldr	r2, [pc, #168]	@ (80011e4 <main+0xf0>)
 800113c:	609a      	str	r2, [r3, #8]
  	  myLoRa.reset_pin       = RST_Pin;
 800113e:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <main+0xec>)
 8001140:	2202      	movs	r2, #2
 8001142:	819a      	strh	r2, [r3, #12]
  	  myLoRa.DIO0_port       = DIDO_GPIO_Port;
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <main+0xec>)
 8001146:	4a27      	ldr	r2, [pc, #156]	@ (80011e4 <main+0xf0>)
 8001148:	611a      	str	r2, [r3, #16]
  	  myLoRa.DIO0_pin        = DIDO_Pin;
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <main+0xec>)
 800114c:	2204      	movs	r2, #4
 800114e:	829a      	strh	r2, [r3, #20]
  	  myLoRa.hSPIx           = &hspi1;
 8001150:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <main+0xec>)
 8001152:	4a25      	ldr	r2, [pc, #148]	@ (80011e8 <main+0xf4>)
 8001154:	619a      	str	r2, [r3, #24]

  	  myLoRa.frequency			   = 433000000;             // default = 433 MHz
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <main+0xec>)
 8001158:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <main+0xf8>)
 800115a:	621a      	str	r2, [r3, #32]
  	  myLoRa.spredingFactor        = SF_9;            // default = SF_7
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <main+0xec>)
 800115e:	2209      	movs	r2, #9
 8001160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  	  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <main+0xec>)
 8001166:	2207      	movs	r2, #7
 8001168:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  	  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 800116c:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <main+0xec>)
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  	  myLoRa.power                 = POWER_20db;      // default = 20db
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <main+0xec>)
 8001176:	22ff      	movs	r2, #255	@ 0xff
 8001178:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  	  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <main+0xec>)
 800117e:	2282      	movs	r2, #130	@ 0x82
 8001180:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  	  myLoRa.preamble              = 10;              // default = 8;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <main+0xec>)
 8001186:	220a      	movs	r2, #10
 8001188:	851a      	strh	r2, [r3, #40]	@ 0x28

    if(LoRa_init(&myLoRa) == LORA_OK){
 800118a:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <main+0xec>)
 800118c:	f7ff feb2 	bl	8000ef4 <LoRa_init>
 8001190:	4603      	mov	r3, r0
 8001192:	2bc8      	cmp	r3, #200	@ 0xc8
 8001194:	d107      	bne.n	80011a6 <main+0xb2>
  	  LoRa_status = 1 ;
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <main+0xfc>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
  	  uartx_write_text(&huart1, "LoRa Initialized!\r\n");
 800119c:	4915      	ldr	r1, [pc, #84]	@ (80011f4 <main+0x100>)
 800119e:	4816      	ldr	r0, [pc, #88]	@ (80011f8 <main+0x104>)
 80011a0:	f000 f9ab 	bl	80014fa <uartx_write_text>
 80011a4:	e003      	b.n	80011ae <main+0xba>
    }
    else{
      uartx_write_text(&huart1,"LoRa Initialized!\r\n");
 80011a6:	4913      	ldr	r1, [pc, #76]	@ (80011f4 <main+0x100>)
 80011a8:	4813      	ldr	r0, [pc, #76]	@ (80011f8 <main+0x104>)
 80011aa:	f000 f9a6 	bl	80014fa <uartx_write_text>
    }
  /* USER CODE BEGIN 2 */

    LoRa_startReceiving(&myLoRa);
 80011ae:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <main+0xec>)
 80011b0:	f7ff fe34 	bl	8000e1c <LoRa_startReceiving>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  packet_size = LoRa_receive(&myLoRa, received_data, 10);
 80011b4:	220a      	movs	r2, #10
 80011b6:	4911      	ldr	r1, [pc, #68]	@ (80011fc <main+0x108>)
 80011b8:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <main+0xec>)
 80011ba:	f7ff fe3b 	bl	8000e34 <LoRa_receive>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <main+0x10c>)
 80011c4:	701a      	strb	r2, [r3, #0]
	  sprintf(buffer, "%u", packet_size);
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <main+0x10c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	490d      	ldr	r1, [pc, #52]	@ (8001204 <main+0x110>)
 80011ce:	480e      	ldr	r0, [pc, #56]	@ (8001208 <main+0x114>)
 80011d0:	f002 f8c0 	bl	8003354 <siprintf>
	  uartx_write_text(&huart1,buffer);
 80011d4:	490c      	ldr	r1, [pc, #48]	@ (8001208 <main+0x114>)
 80011d6:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <main+0x104>)
 80011d8:	f000 f98f 	bl	80014fa <uartx_write_text>
	  packet_size = LoRa_receive(&myLoRa, received_data, 10);
 80011dc:	bf00      	nop
 80011de:	e7e9      	b.n	80011b4 <main+0xc0>
 80011e0:	20000078 	.word	0x20000078
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	200001d8 	.word	0x200001d8
 80011ec:	19cf0e40 	.word	0x19cf0e40
 80011f0:	200000a4 	.word	0x200000a4
 80011f4:	08003d20 	.word	0x08003d20
 80011f8:	20000234 	.word	0x20000234
 80011fc:	2000010c 	.word	0x2000010c
 8001200:	200001d4 	.word	0x200001d4
 8001204:	08003d34 	.word	0x08003d34
 8001208:	200000a8 	.word	0x200000a8

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b090      	sub	sp, #64	@ 0x40
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	2228      	movs	r2, #40	@ 0x28
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f002 f8ba 	bl	8003394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001232:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001240:	2302      	movs	r3, #2
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800124a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fd09 	bl	8001c6c <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001260:	f000 f819 	bl	8001296 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2102      	movs	r1, #2
 800127e:	4618      	mov	r0, r3
 8001280:	f000 ff76 	bl	8002170 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800128a:	f000 f804 	bl	8001296 <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3740      	adds	r7, #64	@ 0x40
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129a:	b672      	cpsid	i
}
 800129c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129e:	bf00      	nop
 80012a0:	e7fd      	b.n	800129e <Error_Handler+0x8>
	...

080012a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012aa:	4a18      	ldr	r2, [pc, #96]	@ (800130c <MX_SPI1_Init+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012d8:	2210      	movs	r2, #16
 80012da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012f0:	220a      	movs	r2, #10
 80012f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012f6:	f001 f8c9 	bl	800248c <HAL_SPI_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001300:	f7ff ffc9 	bl	8001296 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001d8 	.word	0x200001d8
 800130c:	40013000 	.word	0x40013000

08001310 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1b      	ldr	r2, [pc, #108]	@ (8001398 <HAL_SPI_MspInit+0x88>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d12f      	bne.n	8001390 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001330:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a19      	ldr	r2, [pc, #100]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b17      	ldr	r3, [pc, #92]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a13      	ldr	r2, [pc, #76]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <HAL_SPI_MspInit+0x8c>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001360:	23a0      	movs	r3, #160	@ 0xa0
 8001362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <HAL_SPI_MspInit+0x90>)
 8001374:	f000 fade 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001378:	2340      	movs	r3, #64	@ 0x40
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <HAL_SPI_MspInit+0x90>)
 800138c:	f000 fad2 	bl	8001934 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40013000 	.word	0x40013000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_MspInit+0x5c>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <HAL_MspInit+0x5c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_MspInit+0x5c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_MspInit+0x5c>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <HAL_MspInit+0x5c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_MspInit+0x5c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_MspInit+0x60>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <HAL_MspInit+0x60>)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <NMI_Handler+0x4>

08001410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <MemManage_Handler+0x4>

08001420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <UsageFault_Handler+0x4>

08001430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 f948 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	@ (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f001 ff88 	bl	80033a4 <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20005000 	.word	0x20005000
 80014c0:	00000400 	.word	0x00000400
 80014c4:	20000230 	.word	0x20000230
 80014c8:	200003c8 	.word	0x200003c8

080014cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <uartx_write>:

#include "uart.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 80014e4:	1cf9      	adds	r1, r7, #3
 80014e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ea:	2201      	movs	r2, #1
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f001 fdb1 	bl	8003054 <HAL_UART_Transmit>

}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 8001504:	e007      	b.n	8001516 <uartx_write_text+0x1c>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	603a      	str	r2, [r7, #0]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ffe1 	bl	80014d8 <uartx_write>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f3      	bne.n	8001506 <uartx_write_text+0xc>

}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <MX_USART1_UART_Init+0x50>)
 8001530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 8001534:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_USART1_UART_Init+0x4c>)
 8001560:	f001 fd28 	bl	8002fb4 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800156a:	f7ff fe94 	bl	8001296 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000234 	.word	0x20000234
 8001578:	40013800 	.word	0x40013800

0800157c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <HAL_UART_MspInit+0x8c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d131      	bne.n	8001600 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_UART_MspInit+0x90>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a1a      	ldr	r2, [pc, #104]	@ (800160c <HAL_UART_MspInit+0x90>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_UART_MspInit+0x90>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_UART_MspInit+0x90>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <HAL_UART_MspInit+0x90>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_UART_MspInit+0x90>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	480b      	ldr	r0, [pc, #44]	@ (8001610 <HAL_UART_MspInit+0x94>)
 80015e2:	f000 f9a7 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <HAL_UART_MspInit+0x94>)
 80015fc:	f000 f99a 	bl	8001934 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013800 	.word	0x40013800
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800

08001614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001614:	f7ff ff5a 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480b      	ldr	r0, [pc, #44]	@ (8001648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800161a:	490c      	ldr	r1, [pc, #48]	@ (800164c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800161c:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001630:	4c09      	ldr	r4, [pc, #36]	@ (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f001 feb7 	bl	80033b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7ff fd57 	bl	80010f4 <main>
  bx lr
 8001646:	4770      	bx	lr
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001650:	08003da0 	.word	0x08003da0
  ldr r2, =_sbss
 8001654:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001658:	200003c8 	.word	0x200003c8

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_Init+0x28>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <HAL_Init+0x28>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f92b 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	200f      	movs	r0, #15
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fe92 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f935 	bl	800191a <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f90b 	bl	80018e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_IncTick+0x1c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_IncTick+0x20>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a03      	ldr	r2, [pc, #12]	@ (800170c <HAL_IncTick+0x20>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000008 	.word	0x20000008
 800170c:	2000027c 	.word	0x2000027c

08001710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b02      	ldr	r3, [pc, #8]	@ (8001720 <HAL_GetTick+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	2000027c 	.word	0x2000027c

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff fff0 	bl	8001710 <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffe0 	bl	8001710 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001898:	d301      	bcc.n	800189e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <SysTick_Config+0x40>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a6:	210f      	movs	r1, #15
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f7ff ff90 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <SysTick_Config+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <SysTick_Config+0x40>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff49 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f4:	f7ff ff5e 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80018f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff90 	bl	8001824 <NVIC_EncodePriority>
 8001904:	4602      	mov	r2, r0
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff5f 	bl	80017d0 <__NVIC_SetPriority>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffb0 	bl	8001888 <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b08b      	sub	sp, #44	@ 0x2c
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001946:	e169      	b.n	8001c1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001948:	2201      	movs	r2, #1
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8158 	bne.w	8001c16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4a9a      	ldr	r2, [pc, #616]	@ (8001bd4 <HAL_GPIO_Init+0x2a0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d05e      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001970:	4a98      	ldr	r2, [pc, #608]	@ (8001bd4 <HAL_GPIO_Init+0x2a0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d875      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 8001976:	4a98      	ldr	r2, [pc, #608]	@ (8001bd8 <HAL_GPIO_Init+0x2a4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d058      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 800197c:	4a96      	ldr	r2, [pc, #600]	@ (8001bd8 <HAL_GPIO_Init+0x2a4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d86f      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 8001982:	4a96      	ldr	r2, [pc, #600]	@ (8001bdc <HAL_GPIO_Init+0x2a8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d052      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001988:	4a94      	ldr	r2, [pc, #592]	@ (8001bdc <HAL_GPIO_Init+0x2a8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d869      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 800198e:	4a94      	ldr	r2, [pc, #592]	@ (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d04c      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 8001994:	4a92      	ldr	r2, [pc, #584]	@ (8001be0 <HAL_GPIO_Init+0x2ac>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d863      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 800199a:	4a92      	ldr	r2, [pc, #584]	@ (8001be4 <HAL_GPIO_Init+0x2b0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d046      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
 80019a0:	4a90      	ldr	r2, [pc, #576]	@ (8001be4 <HAL_GPIO_Init+0x2b0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d85d      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d82a      	bhi.n	8001a00 <HAL_GPIO_Init+0xcc>
 80019aa:	2b12      	cmp	r3, #18
 80019ac:	d859      	bhi.n	8001a62 <HAL_GPIO_Init+0x12e>
 80019ae:	a201      	add	r2, pc, #4	@ (adr r2, 80019b4 <HAL_GPIO_Init+0x80>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	08001a2f 	.word	0x08001a2f
 80019b8:	08001a09 	.word	0x08001a09
 80019bc:	08001a1b 	.word	0x08001a1b
 80019c0:	08001a5d 	.word	0x08001a5d
 80019c4:	08001a63 	.word	0x08001a63
 80019c8:	08001a63 	.word	0x08001a63
 80019cc:	08001a63 	.word	0x08001a63
 80019d0:	08001a63 	.word	0x08001a63
 80019d4:	08001a63 	.word	0x08001a63
 80019d8:	08001a63 	.word	0x08001a63
 80019dc:	08001a63 	.word	0x08001a63
 80019e0:	08001a63 	.word	0x08001a63
 80019e4:	08001a63 	.word	0x08001a63
 80019e8:	08001a63 	.word	0x08001a63
 80019ec:	08001a63 	.word	0x08001a63
 80019f0:	08001a63 	.word	0x08001a63
 80019f4:	08001a63 	.word	0x08001a63
 80019f8:	08001a11 	.word	0x08001a11
 80019fc:	08001a25 	.word	0x08001a25
 8001a00:	4a79      	ldr	r2, [pc, #484]	@ (8001be8 <HAL_GPIO_Init+0x2b4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a06:	e02c      	b.n	8001a62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e029      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	3304      	adds	r3, #4
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e024      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	3308      	adds	r3, #8
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e01f      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	330c      	adds	r3, #12
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e01a      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a36:	2304      	movs	r3, #4
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e013      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a44:	2308      	movs	r3, #8
 8001a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	611a      	str	r2, [r3, #16]
          break;
 8001a4e:	e009      	b.n	8001a64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a50:	2308      	movs	r3, #8
 8001a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	615a      	str	r2, [r3, #20]
          break;
 8001a5a:	e003      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x130>
          break;
 8001a62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2bff      	cmp	r3, #255	@ 0xff
 8001a68:	d801      	bhi.n	8001a6e <HAL_GPIO_Init+0x13a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	e001      	b.n	8001a72 <HAL_GPIO_Init+0x13e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3304      	adds	r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2bff      	cmp	r3, #255	@ 0xff
 8001a78:	d802      	bhi.n	8001a80 <HAL_GPIO_Init+0x14c>
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x152>
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	3b08      	subs	r3, #8
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	6a39      	ldr	r1, [r7, #32]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80b1 	beq.w	8001c16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bec <HAL_GPIO_Init+0x2b8>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a4c      	ldr	r2, [pc, #304]	@ (8001bec <HAL_GPIO_Init+0x2b8>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8001bec <HAL_GPIO_Init+0x2b8>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001acc:	4a48      	ldr	r2, [pc, #288]	@ (8001bf0 <HAL_GPIO_Init+0x2bc>)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a40      	ldr	r2, [pc, #256]	@ (8001bf4 <HAL_GPIO_Init+0x2c0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_GPIO_Init+0x1ec>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf8 <HAL_GPIO_Init+0x2c4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00d      	beq.n	8001b1c <HAL_GPIO_Init+0x1e8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3e      	ldr	r2, [pc, #248]	@ (8001bfc <HAL_GPIO_Init+0x2c8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <HAL_GPIO_Init+0x1e4>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c00 <HAL_GPIO_Init+0x2cc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_GPIO_Init+0x1e0>
 8001b10:	2303      	movs	r3, #3
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b14:	2304      	movs	r3, #4
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x1ee>
 8001b20:	2300      	movs	r3, #0
 8001b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b32:	492f      	ldr	r1, [pc, #188]	@ (8001bf0 <HAL_GPIO_Init+0x2bc>)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	492c      	ldr	r1, [pc, #176]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4928      	ldr	r1, [pc, #160]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b74:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4922      	ldr	r1, [pc, #136]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	491e      	ldr	r1, [pc, #120]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4918      	ldr	r1, [pc, #96]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4914      	ldr	r1, [pc, #80]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d021      	beq.n	8001c08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	490e      	ldr	r1, [pc, #56]	@ (8001c04 <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e021      	b.n	8001c16 <HAL_GPIO_Init+0x2e2>
 8001bd2:	bf00      	nop
 8001bd4:	10320000 	.word	0x10320000
 8001bd8:	10310000 	.word	0x10310000
 8001bdc:	10220000 	.word	0x10220000
 8001be0:	10210000 	.word	0x10210000
 8001be4:	10120000 	.word	0x10120000
 8001be8:	10110000 	.word	0x10110000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40011400 	.word	0x40011400
 8001c04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	4909      	ldr	r1, [pc, #36]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	3301      	adds	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f47f ae8e 	bne.w	8001948 <HAL_GPIO_Init+0x14>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	372c      	adds	r7, #44	@ 0x2c
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	611a      	str	r2, [r3, #16]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e272      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8c:	4b92      	ldr	r3, [pc, #584]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb0:	d10b      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	4b89      	ldr	r3, [pc, #548]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d06c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x12c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d168      	bne.n	8001d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e24c      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76>
 8001cd4:	4b80      	ldr	r3, [pc, #512]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b78      	ldr	r3, [pc, #480]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a77      	ldr	r2, [pc, #476]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0xbc>
 8001d0e:	4b72      	ldr	r3, [pc, #456]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a71      	ldr	r2, [pc, #452]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d28:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b68      	ldr	r3, [pc, #416]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a67      	ldr	r2, [pc, #412]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fce2 	bl	8001710 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fcde 	bl	8001710 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	@ 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e200      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe4>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fcce 	bl	8001710 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fcca 	bl	8001710 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	@ 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1ec      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x10c>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db2:	4b49      	ldr	r3, [pc, #292]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1c0      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4939      	ldr	r1, [pc, #228]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fc83 	bl	8001710 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fc7f 	bl	8001710 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e1a1      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4927      	ldr	r1, [pc, #156]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fc62 	bl	8001710 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff fc5e 	bl	8001710 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e180      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff fc42 	bl	8001710 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff fc3e 	bl	8001710 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e160      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 face 	bl	8002450 <RCC_Delay>
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fc28 	bl	8001710 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fc24 	bl	8001710 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d908      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e146      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	42420000 	.word	0x42420000
 8001ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b92      	ldr	r3, [pc, #584]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e9      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a6 	beq.w	800204a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b8b      	ldr	r3, [pc, #556]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b88      	ldr	r3, [pc, #544]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a87      	ldr	r2, [pc, #540]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b85      	ldr	r3, [pc, #532]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b82      	ldr	r3, [pc, #520]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b7f      	ldr	r3, [pc, #508]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fbe5 	bl	8001710 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff fbe1 	bl	8001710 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	@ 0x64
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e103      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b75      	ldr	r3, [pc, #468]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x312>
 8001f70:	4b6f      	ldr	r3, [pc, #444]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a6e      	ldr	r2, [pc, #440]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e02d      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x334>
 8001f86:	4b6a      	ldr	r3, [pc, #424]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a69      	ldr	r2, [pc, #420]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b67      	ldr	r3, [pc, #412]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a66      	ldr	r2, [pc, #408]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	e01c      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x356>
 8001fa8:	4b61      	ldr	r3, [pc, #388]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a60      	ldr	r2, [pc, #384]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b58      	ldr	r3, [pc, #352]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a57      	ldr	r2, [pc, #348]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d015      	beq.n	800200e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb95 	bl	8001710 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff fb91 	bl	8001710 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0b1      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b4b      	ldr	r3, [pc, #300]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCC_OscConfig+0x37e>
 800200c:	e014      	b.n	8002038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fb7f 	bl	8001710 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff fb7b 	bl	8001710 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e09b      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	4b40      	ldr	r3, [pc, #256]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a3b      	ldr	r2, [pc, #236]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8087 	beq.w	8002162 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d061      	beq.n	8002124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d146      	bne.n	80020f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b33      	ldr	r3, [pc, #204]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff fb4f 	bl	8001710 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff fb4b 	bl	8001710 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e06d      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209e:	4b24      	ldr	r3, [pc, #144]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4921      	ldr	r1, [pc, #132]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a19      	ldr	r1, [r3, #32]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	430b      	orrs	r3, r1
 80020c2:	491b      	ldr	r1, [pc, #108]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff fb1f 	bl	8001710 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff fb1b 	bl	8001710 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e03d      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46a>
 80020f4:	e035      	b.n	8002162 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fb08 	bl	8001710 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff fb04 	bl	8001710 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e026      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x498>
 8002122:	e01e      	b.n	8002162 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e019      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
 8002138:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_OscConfig+0x500>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0d0      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b67      	ldr	r3, [pc, #412]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4965      	ldr	r1, [pc, #404]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a52      	ldr	r2, [pc, #328]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d040      	beq.n	8002290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e073      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06b      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224e:	4b39      	ldr	r3, [pc, #228]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4936      	ldr	r1, [pc, #216]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002260:	f7ff fa56 	bl	8001710 <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	e00a      	b.n	800227e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7ff fa52 	bl	8001710 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e053      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 020c 	and.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	429a      	cmp	r2, r3
 800228e:	d1eb      	bne.n	8002268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002290:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d210      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4922      	ldr	r1, [pc, #136]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f821 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002302:	4602      	mov	r2, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	490a      	ldr	r1, [pc, #40]	@ (8002338 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1cc>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1d0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f9b4 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	08003d38 	.word	0x08003d38
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b04      	cmp	r3, #4
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x30>
 800236e:	2b08      	cmp	r3, #8
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x36>
 8002372:	e027      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002374:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002376:	613b      	str	r3, [r7, #16]
      break;
 8002378:	e027      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	0c9b      	lsrs	r3, r3, #18
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002384:	5cd3      	ldrb	r3, [r2, r3]
 8002386:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d010      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0c5b      	lsrs	r3, r3, #17
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 80023a6:	fb03 f202 	mul.w	r2, r3, r2
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e004      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	613b      	str	r3, [r7, #16]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	613b      	str	r3, [r7, #16]
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	693b      	ldr	r3, [r7, #16]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	08003d50 	.word	0x08003d50
 80023e4:	08003d60 	.word	0x08003d60
 80023e8:	003d0900 	.word	0x003d0900

080023ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f0:	4b02      	ldr	r3, [pc, #8]	@ (80023fc <HAL_RCC_GetHCLKFreq+0x10>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	20000000 	.word	0x20000000

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002404:	f7ff fff2 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4903      	ldr	r1, [pc, #12]	@ (8002424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	08003d48 	.word	0x08003d48

08002428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800242c:	f7ff ffde 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	0adb      	lsrs	r3, r3, #11
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4903      	ldr	r1, [pc, #12]	@ (800244c <HAL_RCC_GetPCLK2Freq+0x24>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	08003d48 	.word	0x08003d48

08002450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002458:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <RCC_Delay+0x34>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <RCC_Delay+0x38>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	0a5b      	lsrs	r3, r3, #9
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800246c:	bf00      	nop
  }
  while (Delay --);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	60fa      	str	r2, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f9      	bne.n	800246c <RCC_Delay+0x1c>
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	20000000 	.word	0x20000000
 8002488:	10624dd3 	.word	0x10624dd3

0800248c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e076      	b.n	800258c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d108      	bne.n	80024b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024ae:	d009      	beq.n	80024c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
 80024b6:	e005      	b.n	80024c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe ff16 	bl	8001310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002548:	ea42 0103 	orr.w	r1, r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	0c1a      	lsrs	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f002 0204 	and.w	r2, r2, #4
 800256a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_SPI_Transmit+0x22>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e12d      	b.n	8002812 <HAL_SPI_Transmit+0x27e>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025be:	f7ff f8a7 	bl	8001710 <HAL_GetTick>
 80025c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d002      	beq.n	80025da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
 80025d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025d8:	e116      	b.n	8002808 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_SPI_Transmit+0x52>
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ea:	e10d      	b.n	8002808 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2203      	movs	r2, #3
 80025f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	88fa      	ldrh	r2, [r7, #6]
 8002604:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	88fa      	ldrh	r2, [r7, #6]
 800260a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002632:	d10f      	bne.n	8002654 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002642:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002652:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	d007      	beq.n	8002672 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800267a:	d14f      	bne.n	800271c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_Transmit+0xf6>
 8002684:	8afb      	ldrh	r3, [r7, #22]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d142      	bne.n	8002710 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	881a      	ldrh	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	1c9a      	adds	r2, r3, #2
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026ae:	e02f      	b.n	8002710 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d112      	bne.n	80026e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	881a      	ldrh	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	1c9a      	adds	r2, r3, #2
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026e2:	e015      	b.n	8002710 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026e4:	f7ff f814 	bl	8001710 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d803      	bhi.n	80026fc <HAL_SPI_Transmit+0x168>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d102      	bne.n	8002702 <HAL_SPI_Transmit+0x16e>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800270e:	e07b      	b.n	8002808 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ca      	bne.n	80026b0 <HAL_SPI_Transmit+0x11c>
 800271a:	e050      	b.n	80027be <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_SPI_Transmit+0x196>
 8002724:	8afb      	ldrh	r3, [r7, #22]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d144      	bne.n	80027b4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	330c      	adds	r3, #12
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002750:	e030      	b.n	80027b4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	d113      	bne.n	8002788 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002786:	e015      	b.n	80027b4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002788:	f7fe ffc2 	bl	8001710 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d803      	bhi.n	80027a0 <HAL_SPI_Transmit+0x20c>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d102      	bne.n	80027a6 <HAL_SPI_Transmit+0x212>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80027b2:	e029      	b.n	8002808 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1c9      	bne.n	8002752 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fbd8 	bl	8002f78 <SPI_EndRxTxTransaction>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	77fb      	strb	r3, [r7, #31]
 80027fe:	e003      	b.n	8002808 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002810:	7ffb      	ldrb	r3, [r7, #31]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b088      	sub	sp, #32
 800281e:	af02      	add	r7, sp, #8
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d002      	beq.n	8002840 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800283e:	e0fb      	b.n	8002a38 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002848:	d112      	bne.n	8002870 <HAL_SPI_Receive+0x56>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10e      	bne.n	8002870 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2204      	movs	r2, #4
 8002856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f8ef 	bl	8002a4a <HAL_SPI_TransmitReceive>
 800286c:	4603      	mov	r3, r0
 800286e:	e0e8      	b.n	8002a42 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_SPI_Receive+0x64>
 800287a:	2302      	movs	r3, #2
 800287c:	e0e1      	b.n	8002a42 <HAL_SPI_Receive+0x228>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002886:	f7fe ff43 	bl	8001710 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_SPI_Receive+0x7e>
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800289c:	e0cc      	b.n	8002a38 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2204      	movs	r2, #4
 80028a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028e4:	d10f      	bne.n	8002906 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002910:	2b40      	cmp	r3, #64	@ 0x40
 8002912:	d007      	beq.n	8002924 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d16a      	bne.n	8002a02 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800292c:	e032      	b.n	8002994 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f103 020c 	add.w	r2, r3, #12
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002966:	e015      	b.n	8002994 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002968:	f7fe fed2 	bl	8001710 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d803      	bhi.n	8002980 <HAL_SPI_Receive+0x166>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297e:	d102      	bne.n	8002986 <HAL_SPI_Receive+0x16c>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002992:	e051      	b.n	8002a38 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1c7      	bne.n	800292e <HAL_SPI_Receive+0x114>
 800299e:	e035      	b.n	8002a0c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d113      	bne.n	80029d6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	b292      	uxth	r2, r2
 80029ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c0:	1c9a      	adds	r2, r3, #2
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029d4:	e015      	b.n	8002a02 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029d6:	f7fe fe9b 	bl	8001710 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d803      	bhi.n	80029ee <HAL_SPI_Receive+0x1d4>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d102      	bne.n	80029f4 <HAL_SPI_Receive+0x1da>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d106      	bne.n	8002a02 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002a00:	e01a      	b.n	8002a38 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1c9      	bne.n	80029a0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	6839      	ldr	r1, [r7, #0]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fa5f 	bl	8002ed4 <SPI_EndRxTransaction>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
 8002a2e:	e003      	b.n	8002a38 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08c      	sub	sp, #48	@ 0x30
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_SPI_TransmitReceive+0x26>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e198      	b.n	8002da2 <HAL_SPI_TransmitReceive+0x358>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a78:	f7fe fe4a 	bl	8001710 <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d00f      	beq.n	8002aba <HAL_SPI_TransmitReceive+0x70>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aa0:	d107      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x68>
 8002aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d003      	beq.n	8002aba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002ab8:	e16d      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_SPI_TransmitReceive+0x82>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_SPI_TransmitReceive+0x82>
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002ad2:	e160      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d003      	beq.n	8002ae8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	887a      	ldrh	r2, [r7, #2]
 8002b0a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b28:	2b40      	cmp	r3, #64	@ 0x40
 8002b2a:	d007      	beq.n	8002b3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b44:	d17c      	bne.n	8002c40 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x10a>
 8002b4e:	8b7b      	ldrh	r3, [r7, #26]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d16a      	bne.n	8002c2a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	881a      	ldrh	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	1c9a      	adds	r2, r3, #2
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b78:	e057      	b.n	8002c2a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d11b      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x176>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x176>
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d113      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	881a      	ldrh	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	1c9a      	adds	r2, r3, #2
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d119      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0x1b8>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d014      	beq.n	8002c02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be2:	b292      	uxth	r2, r2
 8002be4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bea:	1c9a      	adds	r2, r3, #2
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c02:	f7fe fd85 	bl	8001710 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d80b      	bhi.n	8002c2a <HAL_SPI_TransmitReceive+0x1e0>
 8002c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d007      	beq.n	8002c2a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002c28:	e0b5      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1a2      	bne.n	8002b7a <HAL_SPI_TransmitReceive+0x130>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d19d      	bne.n	8002b7a <HAL_SPI_TransmitReceive+0x130>
 8002c3e:	e080      	b.n	8002d42 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x204>
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d16f      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	7812      	ldrb	r2, [r2, #0]
 8002c5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c74:	e05b      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d11c      	bne.n	8002cbe <HAL_SPI_TransmitReceive+0x274>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d017      	beq.n	8002cbe <HAL_SPI_TransmitReceive+0x274>
 8002c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d114      	bne.n	8002cbe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	7812      	ldrb	r2, [r2, #0]
 8002ca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d119      	bne.n	8002d00 <HAL_SPI_TransmitReceive+0x2b6>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d014      	beq.n	8002d00 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d00:	f7fe fd06 	bl	8001710 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d803      	bhi.n	8002d18 <HAL_SPI_TransmitReceive+0x2ce>
 8002d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d102      	bne.n	8002d1e <HAL_SPI_TransmitReceive+0x2d4>
 8002d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002d2c:	e033      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d19e      	bne.n	8002c76 <HAL_SPI_TransmitReceive+0x22c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d199      	bne.n	8002c76 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f916 	bl	8002f78 <SPI_EndRxTxTransaction>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002d5e:	e01a      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d8c:	e003      	b.n	8002d96 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3730      	adds	r7, #48	@ 0x30
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002db8:	b2db      	uxtb	r3, r3
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dd4:	f7fe fc9c 	bl	8001710 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002de4:	f7fe fc94 	bl	8001710 <HAL_GetTick>
 8002de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dea:	4b39      	ldr	r3, [pc, #228]	@ (8002ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	015b      	lsls	r3, r3, #5
 8002df0:	0d1b      	lsrs	r3, r3, #20
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dfa:	e054      	b.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d050      	beq.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e04:	f7fe fc84 	bl	8001710 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d902      	bls.n	8002e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13d      	bne.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e32:	d111      	bne.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e3c:	d004      	beq.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e46:	d107      	bne.n	8002e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e60:	d10f      	bne.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e017      	b.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d19b      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ee8:	d111      	bne.n	8002f0e <SPI_EndRxTransaction+0x3a>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef2:	d004      	beq.n	8002efe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efc:	d107      	bne.n	8002f0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f0c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f16:	d117      	bne.n	8002f48 <SPI_EndRxTransaction+0x74>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f20:	d112      	bne.n	8002f48 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff ff49 	bl	8002dc4 <SPI_WaitFlagStateUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01a      	beq.n	8002f6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e013      	b.n	8002f70 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2180      	movs	r1, #128	@ 0x80
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff ff36 	bl	8002dc4 <SPI_WaitFlagStateUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e000      	b.n	8002f70 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2180      	movs	r1, #128	@ 0x80
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff ff18 	bl	8002dc4 <SPI_WaitFlagStateUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e000      	b.n	8002fac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e042      	b.n	800304c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe face 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	@ 0x24
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f91d 	bl	8003238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800300c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800301c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800302c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	@ 0x28
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b20      	cmp	r3, #32
 8003072:	d16d      	bne.n	8003150 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Transmit+0x2c>
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e066      	b.n	8003152 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2221      	movs	r2, #33	@ 0x21
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003092:	f7fe fb3d 	bl	8001710 <HAL_GetTick>
 8003096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ac:	d108      	bne.n	80030c0 <HAL_UART_Transmit+0x6c>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	e003      	b.n	80030c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030c8:	e02a      	b.n	8003120 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	@ 0x80
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f840 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e036      	b.n	8003152 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	3302      	adds	r3, #2
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e007      	b.n	8003112 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1cf      	bne.n	80030ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	2140      	movs	r1, #64	@ 0x40
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f810 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e006      	b.n	8003152 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b090      	sub	sp, #64	@ 0x40
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316a:	e050      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d04c      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x30>
 800317a:	f7fe fac9 	bl	8001710 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003186:	429a      	cmp	r2, r3
 8003188:	d241      	bcs.n	800320e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80031a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80031ac:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80031b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e5      	bne.n	800318a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	613b      	str	r3, [r7, #16]
   return(result);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3314      	adds	r3, #20
 80031dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031de:	623a      	str	r2, [r7, #32]
 80031e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	69f9      	ldr	r1, [r7, #28]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e00f      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	429a      	cmp	r2, r3
 800322a:	d09f      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3740      	adds	r7, #64	@ 0x40
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003272:	f023 030c 	bic.w	r3, r3, #12
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	430b      	orrs	r3, r1
 800327e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2c      	ldr	r2, [pc, #176]	@ (800334c <UART_SetConfig+0x114>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d103      	bne.n	80032a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032a0:	f7ff f8c2 	bl	8002428 <HAL_RCC_GetPCLK2Freq>
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	e002      	b.n	80032ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032a8:	f7ff f8aa 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 80032ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009a      	lsls	r2, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	4a22      	ldr	r2, [pc, #136]	@ (8003350 <UART_SetConfig+0x118>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	0119      	lsls	r1, r3, #4
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009a      	lsls	r2, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003350 <UART_SetConfig+0x118>)
 80032e6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2064      	movs	r0, #100	@ 0x64
 80032ee:	fb00 f303 	mul.w	r3, r0, r3
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	@ 0x32
 80032f8:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <UART_SetConfig+0x118>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003304:	4419      	add	r1, r3
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f2f3 	udiv	r2, r2, r3
 800331c:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <UART_SetConfig+0x118>)
 800331e:	fba3 0302 	umull	r0, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2064      	movs	r0, #100	@ 0x64
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	3332      	adds	r3, #50	@ 0x32
 8003330:	4a07      	ldr	r2, [pc, #28]	@ (8003350 <UART_SetConfig+0x118>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	f003 020f 	and.w	r2, r3, #15
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	440a      	add	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40013800 	.word	0x40013800
 8003350:	51eb851f 	.word	0x51eb851f

08003354 <siprintf>:
 8003354:	b40e      	push	{r1, r2, r3}
 8003356:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800335a:	b500      	push	{lr}
 800335c:	b09c      	sub	sp, #112	@ 0x70
 800335e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003360:	9002      	str	r0, [sp, #8]
 8003362:	9006      	str	r0, [sp, #24]
 8003364:	9107      	str	r1, [sp, #28]
 8003366:	9104      	str	r1, [sp, #16]
 8003368:	4808      	ldr	r0, [pc, #32]	@ (800338c <siprintf+0x38>)
 800336a:	4909      	ldr	r1, [pc, #36]	@ (8003390 <siprintf+0x3c>)
 800336c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003370:	9105      	str	r1, [sp, #20]
 8003372:	6800      	ldr	r0, [r0, #0]
 8003374:	a902      	add	r1, sp, #8
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	f000 f9a0 	bl	80036bc <_svfiprintf_r>
 800337c:	2200      	movs	r2, #0
 800337e:	9b02      	ldr	r3, [sp, #8]
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	b01c      	add	sp, #112	@ 0x70
 8003384:	f85d eb04 	ldr.w	lr, [sp], #4
 8003388:	b003      	add	sp, #12
 800338a:	4770      	bx	lr
 800338c:	2000000c 	.word	0x2000000c
 8003390:	ffff0208 	.word	0xffff0208

08003394 <memset>:
 8003394:	4603      	mov	r3, r0
 8003396:	4402      	add	r2, r0
 8003398:	4293      	cmp	r3, r2
 800339a:	d100      	bne.n	800339e <memset+0xa>
 800339c:	4770      	bx	lr
 800339e:	f803 1b01 	strb.w	r1, [r3], #1
 80033a2:	e7f9      	b.n	8003398 <memset+0x4>

080033a4 <__errno>:
 80033a4:	4b01      	ldr	r3, [pc, #4]	@ (80033ac <__errno+0x8>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	2000000c 	.word	0x2000000c

080033b0 <__libc_init_array>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	2600      	movs	r6, #0
 80033b4:	4d0c      	ldr	r5, [pc, #48]	@ (80033e8 <__libc_init_array+0x38>)
 80033b6:	4c0d      	ldr	r4, [pc, #52]	@ (80033ec <__libc_init_array+0x3c>)
 80033b8:	1b64      	subs	r4, r4, r5
 80033ba:	10a4      	asrs	r4, r4, #2
 80033bc:	42a6      	cmp	r6, r4
 80033be:	d109      	bne.n	80033d4 <__libc_init_array+0x24>
 80033c0:	f000 fc78 	bl	8003cb4 <_init>
 80033c4:	2600      	movs	r6, #0
 80033c6:	4d0a      	ldr	r5, [pc, #40]	@ (80033f0 <__libc_init_array+0x40>)
 80033c8:	4c0a      	ldr	r4, [pc, #40]	@ (80033f4 <__libc_init_array+0x44>)
 80033ca:	1b64      	subs	r4, r4, r5
 80033cc:	10a4      	asrs	r4, r4, #2
 80033ce:	42a6      	cmp	r6, r4
 80033d0:	d105      	bne.n	80033de <__libc_init_array+0x2e>
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d8:	4798      	blx	r3
 80033da:	3601      	adds	r6, #1
 80033dc:	e7ee      	b.n	80033bc <__libc_init_array+0xc>
 80033de:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e2:	4798      	blx	r3
 80033e4:	3601      	adds	r6, #1
 80033e6:	e7f2      	b.n	80033ce <__libc_init_array+0x1e>
 80033e8:	08003d98 	.word	0x08003d98
 80033ec:	08003d98 	.word	0x08003d98
 80033f0:	08003d98 	.word	0x08003d98
 80033f4:	08003d9c 	.word	0x08003d9c

080033f8 <__retarget_lock_acquire_recursive>:
 80033f8:	4770      	bx	lr

080033fa <__retarget_lock_release_recursive>:
 80033fa:	4770      	bx	lr

080033fc <memcpy>:
 80033fc:	440a      	add	r2, r1
 80033fe:	4291      	cmp	r1, r2
 8003400:	f100 33ff 	add.w	r3, r0, #4294967295
 8003404:	d100      	bne.n	8003408 <memcpy+0xc>
 8003406:	4770      	bx	lr
 8003408:	b510      	push	{r4, lr}
 800340a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800340e:	4291      	cmp	r1, r2
 8003410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003414:	d1f9      	bne.n	800340a <memcpy+0xe>
 8003416:	bd10      	pop	{r4, pc}

08003418 <_free_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4605      	mov	r5, r0
 800341c:	2900      	cmp	r1, #0
 800341e:	d040      	beq.n	80034a2 <_free_r+0x8a>
 8003420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003424:	1f0c      	subs	r4, r1, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	bfb8      	it	lt
 800342a:	18e4      	addlt	r4, r4, r3
 800342c:	f000 f8de 	bl	80035ec <__malloc_lock>
 8003430:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <_free_r+0x8c>)
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	b933      	cbnz	r3, 8003444 <_free_r+0x2c>
 8003436:	6063      	str	r3, [r4, #4]
 8003438:	6014      	str	r4, [r2, #0]
 800343a:	4628      	mov	r0, r5
 800343c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003440:	f000 b8da 	b.w	80035f8 <__malloc_unlock>
 8003444:	42a3      	cmp	r3, r4
 8003446:	d908      	bls.n	800345a <_free_r+0x42>
 8003448:	6820      	ldr	r0, [r4, #0]
 800344a:	1821      	adds	r1, r4, r0
 800344c:	428b      	cmp	r3, r1
 800344e:	bf01      	itttt	eq
 8003450:	6819      	ldreq	r1, [r3, #0]
 8003452:	685b      	ldreq	r3, [r3, #4]
 8003454:	1809      	addeq	r1, r1, r0
 8003456:	6021      	streq	r1, [r4, #0]
 8003458:	e7ed      	b.n	8003436 <_free_r+0x1e>
 800345a:	461a      	mov	r2, r3
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b10b      	cbz	r3, 8003464 <_free_r+0x4c>
 8003460:	42a3      	cmp	r3, r4
 8003462:	d9fa      	bls.n	800345a <_free_r+0x42>
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	1850      	adds	r0, r2, r1
 8003468:	42a0      	cmp	r0, r4
 800346a:	d10b      	bne.n	8003484 <_free_r+0x6c>
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	4401      	add	r1, r0
 8003470:	1850      	adds	r0, r2, r1
 8003472:	4283      	cmp	r3, r0
 8003474:	6011      	str	r1, [r2, #0]
 8003476:	d1e0      	bne.n	800343a <_free_r+0x22>
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4408      	add	r0, r1
 800347e:	6010      	str	r0, [r2, #0]
 8003480:	6053      	str	r3, [r2, #4]
 8003482:	e7da      	b.n	800343a <_free_r+0x22>
 8003484:	d902      	bls.n	800348c <_free_r+0x74>
 8003486:	230c      	movs	r3, #12
 8003488:	602b      	str	r3, [r5, #0]
 800348a:	e7d6      	b.n	800343a <_free_r+0x22>
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	1821      	adds	r1, r4, r0
 8003490:	428b      	cmp	r3, r1
 8003492:	bf01      	itttt	eq
 8003494:	6819      	ldreq	r1, [r3, #0]
 8003496:	685b      	ldreq	r3, [r3, #4]
 8003498:	1809      	addeq	r1, r1, r0
 800349a:	6021      	streq	r1, [r4, #0]
 800349c:	6063      	str	r3, [r4, #4]
 800349e:	6054      	str	r4, [r2, #4]
 80034a0:	e7cb      	b.n	800343a <_free_r+0x22>
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	200003c4 	.word	0x200003c4

080034a8 <sbrk_aligned>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	4e0f      	ldr	r6, [pc, #60]	@ (80034e8 <sbrk_aligned+0x40>)
 80034ac:	460c      	mov	r4, r1
 80034ae:	6831      	ldr	r1, [r6, #0]
 80034b0:	4605      	mov	r5, r0
 80034b2:	b911      	cbnz	r1, 80034ba <sbrk_aligned+0x12>
 80034b4:	f000 fbaa 	bl	8003c0c <_sbrk_r>
 80034b8:	6030      	str	r0, [r6, #0]
 80034ba:	4621      	mov	r1, r4
 80034bc:	4628      	mov	r0, r5
 80034be:	f000 fba5 	bl	8003c0c <_sbrk_r>
 80034c2:	1c43      	adds	r3, r0, #1
 80034c4:	d103      	bne.n	80034ce <sbrk_aligned+0x26>
 80034c6:	f04f 34ff 	mov.w	r4, #4294967295
 80034ca:	4620      	mov	r0, r4
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
 80034ce:	1cc4      	adds	r4, r0, #3
 80034d0:	f024 0403 	bic.w	r4, r4, #3
 80034d4:	42a0      	cmp	r0, r4
 80034d6:	d0f8      	beq.n	80034ca <sbrk_aligned+0x22>
 80034d8:	1a21      	subs	r1, r4, r0
 80034da:	4628      	mov	r0, r5
 80034dc:	f000 fb96 	bl	8003c0c <_sbrk_r>
 80034e0:	3001      	adds	r0, #1
 80034e2:	d1f2      	bne.n	80034ca <sbrk_aligned+0x22>
 80034e4:	e7ef      	b.n	80034c6 <sbrk_aligned+0x1e>
 80034e6:	bf00      	nop
 80034e8:	200003c0 	.word	0x200003c0

080034ec <_malloc_r>:
 80034ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f0:	1ccd      	adds	r5, r1, #3
 80034f2:	f025 0503 	bic.w	r5, r5, #3
 80034f6:	3508      	adds	r5, #8
 80034f8:	2d0c      	cmp	r5, #12
 80034fa:	bf38      	it	cc
 80034fc:	250c      	movcc	r5, #12
 80034fe:	2d00      	cmp	r5, #0
 8003500:	4606      	mov	r6, r0
 8003502:	db01      	blt.n	8003508 <_malloc_r+0x1c>
 8003504:	42a9      	cmp	r1, r5
 8003506:	d904      	bls.n	8003512 <_malloc_r+0x26>
 8003508:	230c      	movs	r3, #12
 800350a:	6033      	str	r3, [r6, #0]
 800350c:	2000      	movs	r0, #0
 800350e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035e8 <_malloc_r+0xfc>
 8003516:	f000 f869 	bl	80035ec <__malloc_lock>
 800351a:	f8d8 3000 	ldr.w	r3, [r8]
 800351e:	461c      	mov	r4, r3
 8003520:	bb44      	cbnz	r4, 8003574 <_malloc_r+0x88>
 8003522:	4629      	mov	r1, r5
 8003524:	4630      	mov	r0, r6
 8003526:	f7ff ffbf 	bl	80034a8 <sbrk_aligned>
 800352a:	1c43      	adds	r3, r0, #1
 800352c:	4604      	mov	r4, r0
 800352e:	d158      	bne.n	80035e2 <_malloc_r+0xf6>
 8003530:	f8d8 4000 	ldr.w	r4, [r8]
 8003534:	4627      	mov	r7, r4
 8003536:	2f00      	cmp	r7, #0
 8003538:	d143      	bne.n	80035c2 <_malloc_r+0xd6>
 800353a:	2c00      	cmp	r4, #0
 800353c:	d04b      	beq.n	80035d6 <_malloc_r+0xea>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	4639      	mov	r1, r7
 8003542:	4630      	mov	r0, r6
 8003544:	eb04 0903 	add.w	r9, r4, r3
 8003548:	f000 fb60 	bl	8003c0c <_sbrk_r>
 800354c:	4581      	cmp	r9, r0
 800354e:	d142      	bne.n	80035d6 <_malloc_r+0xea>
 8003550:	6821      	ldr	r1, [r4, #0]
 8003552:	4630      	mov	r0, r6
 8003554:	1a6d      	subs	r5, r5, r1
 8003556:	4629      	mov	r1, r5
 8003558:	f7ff ffa6 	bl	80034a8 <sbrk_aligned>
 800355c:	3001      	adds	r0, #1
 800355e:	d03a      	beq.n	80035d6 <_malloc_r+0xea>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	442b      	add	r3, r5
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	f8d8 3000 	ldr.w	r3, [r8]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	bb62      	cbnz	r2, 80035c8 <_malloc_r+0xdc>
 800356e:	f8c8 7000 	str.w	r7, [r8]
 8003572:	e00f      	b.n	8003594 <_malloc_r+0xa8>
 8003574:	6822      	ldr	r2, [r4, #0]
 8003576:	1b52      	subs	r2, r2, r5
 8003578:	d420      	bmi.n	80035bc <_malloc_r+0xd0>
 800357a:	2a0b      	cmp	r2, #11
 800357c:	d917      	bls.n	80035ae <_malloc_r+0xc2>
 800357e:	1961      	adds	r1, r4, r5
 8003580:	42a3      	cmp	r3, r4
 8003582:	6025      	str	r5, [r4, #0]
 8003584:	bf18      	it	ne
 8003586:	6059      	strne	r1, [r3, #4]
 8003588:	6863      	ldr	r3, [r4, #4]
 800358a:	bf08      	it	eq
 800358c:	f8c8 1000 	streq.w	r1, [r8]
 8003590:	5162      	str	r2, [r4, r5]
 8003592:	604b      	str	r3, [r1, #4]
 8003594:	4630      	mov	r0, r6
 8003596:	f000 f82f 	bl	80035f8 <__malloc_unlock>
 800359a:	f104 000b 	add.w	r0, r4, #11
 800359e:	1d23      	adds	r3, r4, #4
 80035a0:	f020 0007 	bic.w	r0, r0, #7
 80035a4:	1ac2      	subs	r2, r0, r3
 80035a6:	bf1c      	itt	ne
 80035a8:	1a1b      	subne	r3, r3, r0
 80035aa:	50a3      	strne	r3, [r4, r2]
 80035ac:	e7af      	b.n	800350e <_malloc_r+0x22>
 80035ae:	6862      	ldr	r2, [r4, #4]
 80035b0:	42a3      	cmp	r3, r4
 80035b2:	bf0c      	ite	eq
 80035b4:	f8c8 2000 	streq.w	r2, [r8]
 80035b8:	605a      	strne	r2, [r3, #4]
 80035ba:	e7eb      	b.n	8003594 <_malloc_r+0xa8>
 80035bc:	4623      	mov	r3, r4
 80035be:	6864      	ldr	r4, [r4, #4]
 80035c0:	e7ae      	b.n	8003520 <_malloc_r+0x34>
 80035c2:	463c      	mov	r4, r7
 80035c4:	687f      	ldr	r7, [r7, #4]
 80035c6:	e7b6      	b.n	8003536 <_malloc_r+0x4a>
 80035c8:	461a      	mov	r2, r3
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	42a3      	cmp	r3, r4
 80035ce:	d1fb      	bne.n	80035c8 <_malloc_r+0xdc>
 80035d0:	2300      	movs	r3, #0
 80035d2:	6053      	str	r3, [r2, #4]
 80035d4:	e7de      	b.n	8003594 <_malloc_r+0xa8>
 80035d6:	230c      	movs	r3, #12
 80035d8:	4630      	mov	r0, r6
 80035da:	6033      	str	r3, [r6, #0]
 80035dc:	f000 f80c 	bl	80035f8 <__malloc_unlock>
 80035e0:	e794      	b.n	800350c <_malloc_r+0x20>
 80035e2:	6005      	str	r5, [r0, #0]
 80035e4:	e7d6      	b.n	8003594 <_malloc_r+0xa8>
 80035e6:	bf00      	nop
 80035e8:	200003c4 	.word	0x200003c4

080035ec <__malloc_lock>:
 80035ec:	4801      	ldr	r0, [pc, #4]	@ (80035f4 <__malloc_lock+0x8>)
 80035ee:	f7ff bf03 	b.w	80033f8 <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	200003bc 	.word	0x200003bc

080035f8 <__malloc_unlock>:
 80035f8:	4801      	ldr	r0, [pc, #4]	@ (8003600 <__malloc_unlock+0x8>)
 80035fa:	f7ff befe 	b.w	80033fa <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	200003bc 	.word	0x200003bc

08003604 <__ssputs_r>:
 8003604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003608:	461f      	mov	r7, r3
 800360a:	688e      	ldr	r6, [r1, #8]
 800360c:	4682      	mov	sl, r0
 800360e:	42be      	cmp	r6, r7
 8003610:	460c      	mov	r4, r1
 8003612:	4690      	mov	r8, r2
 8003614:	680b      	ldr	r3, [r1, #0]
 8003616:	d82d      	bhi.n	8003674 <__ssputs_r+0x70>
 8003618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800361c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003620:	d026      	beq.n	8003670 <__ssputs_r+0x6c>
 8003622:	6965      	ldr	r5, [r4, #20]
 8003624:	6909      	ldr	r1, [r1, #16]
 8003626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800362a:	eba3 0901 	sub.w	r9, r3, r1
 800362e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003632:	1c7b      	adds	r3, r7, #1
 8003634:	444b      	add	r3, r9
 8003636:	106d      	asrs	r5, r5, #1
 8003638:	429d      	cmp	r5, r3
 800363a:	bf38      	it	cc
 800363c:	461d      	movcc	r5, r3
 800363e:	0553      	lsls	r3, r2, #21
 8003640:	d527      	bpl.n	8003692 <__ssputs_r+0x8e>
 8003642:	4629      	mov	r1, r5
 8003644:	f7ff ff52 	bl	80034ec <_malloc_r>
 8003648:	4606      	mov	r6, r0
 800364a:	b360      	cbz	r0, 80036a6 <__ssputs_r+0xa2>
 800364c:	464a      	mov	r2, r9
 800364e:	6921      	ldr	r1, [r4, #16]
 8003650:	f7ff fed4 	bl	80033fc <memcpy>
 8003654:	89a3      	ldrh	r3, [r4, #12]
 8003656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800365a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800365e:	81a3      	strh	r3, [r4, #12]
 8003660:	6126      	str	r6, [r4, #16]
 8003662:	444e      	add	r6, r9
 8003664:	6026      	str	r6, [r4, #0]
 8003666:	463e      	mov	r6, r7
 8003668:	6165      	str	r5, [r4, #20]
 800366a:	eba5 0509 	sub.w	r5, r5, r9
 800366e:	60a5      	str	r5, [r4, #8]
 8003670:	42be      	cmp	r6, r7
 8003672:	d900      	bls.n	8003676 <__ssputs_r+0x72>
 8003674:	463e      	mov	r6, r7
 8003676:	4632      	mov	r2, r6
 8003678:	4641      	mov	r1, r8
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	f000 faac 	bl	8003bd8 <memmove>
 8003680:	2000      	movs	r0, #0
 8003682:	68a3      	ldr	r3, [r4, #8]
 8003684:	1b9b      	subs	r3, r3, r6
 8003686:	60a3      	str	r3, [r4, #8]
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	4433      	add	r3, r6
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003692:	462a      	mov	r2, r5
 8003694:	f000 fad8 	bl	8003c48 <_realloc_r>
 8003698:	4606      	mov	r6, r0
 800369a:	2800      	cmp	r0, #0
 800369c:	d1e0      	bne.n	8003660 <__ssputs_r+0x5c>
 800369e:	4650      	mov	r0, sl
 80036a0:	6921      	ldr	r1, [r4, #16]
 80036a2:	f7ff feb9 	bl	8003418 <_free_r>
 80036a6:	230c      	movs	r3, #12
 80036a8:	f8ca 3000 	str.w	r3, [sl]
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	f04f 30ff 	mov.w	r0, #4294967295
 80036b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b6:	81a3      	strh	r3, [r4, #12]
 80036b8:	e7e9      	b.n	800368e <__ssputs_r+0x8a>
	...

080036bc <_svfiprintf_r>:
 80036bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c0:	4698      	mov	r8, r3
 80036c2:	898b      	ldrh	r3, [r1, #12]
 80036c4:	4607      	mov	r7, r0
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	460d      	mov	r5, r1
 80036ca:	4614      	mov	r4, r2
 80036cc:	b09d      	sub	sp, #116	@ 0x74
 80036ce:	d510      	bpl.n	80036f2 <_svfiprintf_r+0x36>
 80036d0:	690b      	ldr	r3, [r1, #16]
 80036d2:	b973      	cbnz	r3, 80036f2 <_svfiprintf_r+0x36>
 80036d4:	2140      	movs	r1, #64	@ 0x40
 80036d6:	f7ff ff09 	bl	80034ec <_malloc_r>
 80036da:	6028      	str	r0, [r5, #0]
 80036dc:	6128      	str	r0, [r5, #16]
 80036de:	b930      	cbnz	r0, 80036ee <_svfiprintf_r+0x32>
 80036e0:	230c      	movs	r3, #12
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	b01d      	add	sp, #116	@ 0x74
 80036ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ee:	2340      	movs	r3, #64	@ 0x40
 80036f0:	616b      	str	r3, [r5, #20]
 80036f2:	2300      	movs	r3, #0
 80036f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80036f6:	2320      	movs	r3, #32
 80036f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036fc:	2330      	movs	r3, #48	@ 0x30
 80036fe:	f04f 0901 	mov.w	r9, #1
 8003702:	f8cd 800c 	str.w	r8, [sp, #12]
 8003706:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80038a0 <_svfiprintf_r+0x1e4>
 800370a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800370e:	4623      	mov	r3, r4
 8003710:	469a      	mov	sl, r3
 8003712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003716:	b10a      	cbz	r2, 800371c <_svfiprintf_r+0x60>
 8003718:	2a25      	cmp	r2, #37	@ 0x25
 800371a:	d1f9      	bne.n	8003710 <_svfiprintf_r+0x54>
 800371c:	ebba 0b04 	subs.w	fp, sl, r4
 8003720:	d00b      	beq.n	800373a <_svfiprintf_r+0x7e>
 8003722:	465b      	mov	r3, fp
 8003724:	4622      	mov	r2, r4
 8003726:	4629      	mov	r1, r5
 8003728:	4638      	mov	r0, r7
 800372a:	f7ff ff6b 	bl	8003604 <__ssputs_r>
 800372e:	3001      	adds	r0, #1
 8003730:	f000 80a7 	beq.w	8003882 <_svfiprintf_r+0x1c6>
 8003734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003736:	445a      	add	r2, fp
 8003738:	9209      	str	r2, [sp, #36]	@ 0x24
 800373a:	f89a 3000 	ldrb.w	r3, [sl]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 809f 	beq.w	8003882 <_svfiprintf_r+0x1c6>
 8003744:	2300      	movs	r3, #0
 8003746:	f04f 32ff 	mov.w	r2, #4294967295
 800374a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800374e:	f10a 0a01 	add.w	sl, sl, #1
 8003752:	9304      	str	r3, [sp, #16]
 8003754:	9307      	str	r3, [sp, #28]
 8003756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800375a:	931a      	str	r3, [sp, #104]	@ 0x68
 800375c:	4654      	mov	r4, sl
 800375e:	2205      	movs	r2, #5
 8003760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003764:	484e      	ldr	r0, [pc, #312]	@ (80038a0 <_svfiprintf_r+0x1e4>)
 8003766:	f000 fa61 	bl	8003c2c <memchr>
 800376a:	9a04      	ldr	r2, [sp, #16]
 800376c:	b9d8      	cbnz	r0, 80037a6 <_svfiprintf_r+0xea>
 800376e:	06d0      	lsls	r0, r2, #27
 8003770:	bf44      	itt	mi
 8003772:	2320      	movmi	r3, #32
 8003774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003778:	0711      	lsls	r1, r2, #28
 800377a:	bf44      	itt	mi
 800377c:	232b      	movmi	r3, #43	@ 0x2b
 800377e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003782:	f89a 3000 	ldrb.w	r3, [sl]
 8003786:	2b2a      	cmp	r3, #42	@ 0x2a
 8003788:	d015      	beq.n	80037b6 <_svfiprintf_r+0xfa>
 800378a:	4654      	mov	r4, sl
 800378c:	2000      	movs	r0, #0
 800378e:	f04f 0c0a 	mov.w	ip, #10
 8003792:	9a07      	ldr	r2, [sp, #28]
 8003794:	4621      	mov	r1, r4
 8003796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800379a:	3b30      	subs	r3, #48	@ 0x30
 800379c:	2b09      	cmp	r3, #9
 800379e:	d94b      	bls.n	8003838 <_svfiprintf_r+0x17c>
 80037a0:	b1b0      	cbz	r0, 80037d0 <_svfiprintf_r+0x114>
 80037a2:	9207      	str	r2, [sp, #28]
 80037a4:	e014      	b.n	80037d0 <_svfiprintf_r+0x114>
 80037a6:	eba0 0308 	sub.w	r3, r0, r8
 80037aa:	fa09 f303 	lsl.w	r3, r9, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	46a2      	mov	sl, r4
 80037b2:	9304      	str	r3, [sp, #16]
 80037b4:	e7d2      	b.n	800375c <_svfiprintf_r+0xa0>
 80037b6:	9b03      	ldr	r3, [sp, #12]
 80037b8:	1d19      	adds	r1, r3, #4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	9103      	str	r1, [sp, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bfbb      	ittet	lt
 80037c2:	425b      	neglt	r3, r3
 80037c4:	f042 0202 	orrlt.w	r2, r2, #2
 80037c8:	9307      	strge	r3, [sp, #28]
 80037ca:	9307      	strlt	r3, [sp, #28]
 80037cc:	bfb8      	it	lt
 80037ce:	9204      	strlt	r2, [sp, #16]
 80037d0:	7823      	ldrb	r3, [r4, #0]
 80037d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80037d4:	d10a      	bne.n	80037ec <_svfiprintf_r+0x130>
 80037d6:	7863      	ldrb	r3, [r4, #1]
 80037d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80037da:	d132      	bne.n	8003842 <_svfiprintf_r+0x186>
 80037dc:	9b03      	ldr	r3, [sp, #12]
 80037de:	3402      	adds	r4, #2
 80037e0:	1d1a      	adds	r2, r3, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	9203      	str	r2, [sp, #12]
 80037e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037ea:	9305      	str	r3, [sp, #20]
 80037ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80038a4 <_svfiprintf_r+0x1e8>
 80037f0:	2203      	movs	r2, #3
 80037f2:	4650      	mov	r0, sl
 80037f4:	7821      	ldrb	r1, [r4, #0]
 80037f6:	f000 fa19 	bl	8003c2c <memchr>
 80037fa:	b138      	cbz	r0, 800380c <_svfiprintf_r+0x150>
 80037fc:	2240      	movs	r2, #64	@ 0x40
 80037fe:	9b04      	ldr	r3, [sp, #16]
 8003800:	eba0 000a 	sub.w	r0, r0, sl
 8003804:	4082      	lsls	r2, r0
 8003806:	4313      	orrs	r3, r2
 8003808:	3401      	adds	r4, #1
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003810:	2206      	movs	r2, #6
 8003812:	4825      	ldr	r0, [pc, #148]	@ (80038a8 <_svfiprintf_r+0x1ec>)
 8003814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003818:	f000 fa08 	bl	8003c2c <memchr>
 800381c:	2800      	cmp	r0, #0
 800381e:	d036      	beq.n	800388e <_svfiprintf_r+0x1d2>
 8003820:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <_svfiprintf_r+0x1f0>)
 8003822:	bb1b      	cbnz	r3, 800386c <_svfiprintf_r+0x1b0>
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	3307      	adds	r3, #7
 8003828:	f023 0307 	bic.w	r3, r3, #7
 800382c:	3308      	adds	r3, #8
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003832:	4433      	add	r3, r6
 8003834:	9309      	str	r3, [sp, #36]	@ 0x24
 8003836:	e76a      	b.n	800370e <_svfiprintf_r+0x52>
 8003838:	460c      	mov	r4, r1
 800383a:	2001      	movs	r0, #1
 800383c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003840:	e7a8      	b.n	8003794 <_svfiprintf_r+0xd8>
 8003842:	2300      	movs	r3, #0
 8003844:	f04f 0c0a 	mov.w	ip, #10
 8003848:	4619      	mov	r1, r3
 800384a:	3401      	adds	r4, #1
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	4620      	mov	r0, r4
 8003850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003854:	3a30      	subs	r2, #48	@ 0x30
 8003856:	2a09      	cmp	r2, #9
 8003858:	d903      	bls.n	8003862 <_svfiprintf_r+0x1a6>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0c6      	beq.n	80037ec <_svfiprintf_r+0x130>
 800385e:	9105      	str	r1, [sp, #20]
 8003860:	e7c4      	b.n	80037ec <_svfiprintf_r+0x130>
 8003862:	4604      	mov	r4, r0
 8003864:	2301      	movs	r3, #1
 8003866:	fb0c 2101 	mla	r1, ip, r1, r2
 800386a:	e7f0      	b.n	800384e <_svfiprintf_r+0x192>
 800386c:	ab03      	add	r3, sp, #12
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	462a      	mov	r2, r5
 8003872:	4638      	mov	r0, r7
 8003874:	4b0e      	ldr	r3, [pc, #56]	@ (80038b0 <_svfiprintf_r+0x1f4>)
 8003876:	a904      	add	r1, sp, #16
 8003878:	f3af 8000 	nop.w
 800387c:	1c42      	adds	r2, r0, #1
 800387e:	4606      	mov	r6, r0
 8003880:	d1d6      	bne.n	8003830 <_svfiprintf_r+0x174>
 8003882:	89ab      	ldrh	r3, [r5, #12]
 8003884:	065b      	lsls	r3, r3, #25
 8003886:	f53f af2d 	bmi.w	80036e4 <_svfiprintf_r+0x28>
 800388a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800388c:	e72c      	b.n	80036e8 <_svfiprintf_r+0x2c>
 800388e:	ab03      	add	r3, sp, #12
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	462a      	mov	r2, r5
 8003894:	4638      	mov	r0, r7
 8003896:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <_svfiprintf_r+0x1f4>)
 8003898:	a904      	add	r1, sp, #16
 800389a:	f000 f87d 	bl	8003998 <_printf_i>
 800389e:	e7ed      	b.n	800387c <_svfiprintf_r+0x1c0>
 80038a0:	08003d62 	.word	0x08003d62
 80038a4:	08003d68 	.word	0x08003d68
 80038a8:	08003d6c 	.word	0x08003d6c
 80038ac:	00000000 	.word	0x00000000
 80038b0:	08003605 	.word	0x08003605

080038b4 <_printf_common>:
 80038b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b8:	4616      	mov	r6, r2
 80038ba:	4698      	mov	r8, r3
 80038bc:	688a      	ldr	r2, [r1, #8]
 80038be:	690b      	ldr	r3, [r1, #16]
 80038c0:	4607      	mov	r7, r0
 80038c2:	4293      	cmp	r3, r2
 80038c4:	bfb8      	it	lt
 80038c6:	4613      	movlt	r3, r2
 80038c8:	6033      	str	r3, [r6, #0]
 80038ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038ce:	460c      	mov	r4, r1
 80038d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038d4:	b10a      	cbz	r2, 80038da <_printf_common+0x26>
 80038d6:	3301      	adds	r3, #1
 80038d8:	6033      	str	r3, [r6, #0]
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	0699      	lsls	r1, r3, #26
 80038de:	bf42      	ittt	mi
 80038e0:	6833      	ldrmi	r3, [r6, #0]
 80038e2:	3302      	addmi	r3, #2
 80038e4:	6033      	strmi	r3, [r6, #0]
 80038e6:	6825      	ldr	r5, [r4, #0]
 80038e8:	f015 0506 	ands.w	r5, r5, #6
 80038ec:	d106      	bne.n	80038fc <_printf_common+0x48>
 80038ee:	f104 0a19 	add.w	sl, r4, #25
 80038f2:	68e3      	ldr	r3, [r4, #12]
 80038f4:	6832      	ldr	r2, [r6, #0]
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	42ab      	cmp	r3, r5
 80038fa:	dc2b      	bgt.n	8003954 <_printf_common+0xa0>
 80038fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	3b00      	subs	r3, #0
 8003904:	bf18      	it	ne
 8003906:	2301      	movne	r3, #1
 8003908:	0692      	lsls	r2, r2, #26
 800390a:	d430      	bmi.n	800396e <_printf_common+0xba>
 800390c:	4641      	mov	r1, r8
 800390e:	4638      	mov	r0, r7
 8003910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003914:	47c8      	blx	r9
 8003916:	3001      	adds	r0, #1
 8003918:	d023      	beq.n	8003962 <_printf_common+0xae>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	6922      	ldr	r2, [r4, #16]
 800391e:	f003 0306 	and.w	r3, r3, #6
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf14      	ite	ne
 8003926:	2500      	movne	r5, #0
 8003928:	6833      	ldreq	r3, [r6, #0]
 800392a:	f04f 0600 	mov.w	r6, #0
 800392e:	bf08      	it	eq
 8003930:	68e5      	ldreq	r5, [r4, #12]
 8003932:	f104 041a 	add.w	r4, r4, #26
 8003936:	bf08      	it	eq
 8003938:	1aed      	subeq	r5, r5, r3
 800393a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800393e:	bf08      	it	eq
 8003940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003944:	4293      	cmp	r3, r2
 8003946:	bfc4      	itt	gt
 8003948:	1a9b      	subgt	r3, r3, r2
 800394a:	18ed      	addgt	r5, r5, r3
 800394c:	42b5      	cmp	r5, r6
 800394e:	d11a      	bne.n	8003986 <_printf_common+0xd2>
 8003950:	2000      	movs	r0, #0
 8003952:	e008      	b.n	8003966 <_printf_common+0xb2>
 8003954:	2301      	movs	r3, #1
 8003956:	4652      	mov	r2, sl
 8003958:	4641      	mov	r1, r8
 800395a:	4638      	mov	r0, r7
 800395c:	47c8      	blx	r9
 800395e:	3001      	adds	r0, #1
 8003960:	d103      	bne.n	800396a <_printf_common+0xb6>
 8003962:	f04f 30ff 	mov.w	r0, #4294967295
 8003966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800396a:	3501      	adds	r5, #1
 800396c:	e7c1      	b.n	80038f2 <_printf_common+0x3e>
 800396e:	2030      	movs	r0, #48	@ 0x30
 8003970:	18e1      	adds	r1, r4, r3
 8003972:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800397c:	4422      	add	r2, r4
 800397e:	3302      	adds	r3, #2
 8003980:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003984:	e7c2      	b.n	800390c <_printf_common+0x58>
 8003986:	2301      	movs	r3, #1
 8003988:	4622      	mov	r2, r4
 800398a:	4641      	mov	r1, r8
 800398c:	4638      	mov	r0, r7
 800398e:	47c8      	blx	r9
 8003990:	3001      	adds	r0, #1
 8003992:	d0e6      	beq.n	8003962 <_printf_common+0xae>
 8003994:	3601      	adds	r6, #1
 8003996:	e7d9      	b.n	800394c <_printf_common+0x98>

08003998 <_printf_i>:
 8003998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	7e0f      	ldrb	r7, [r1, #24]
 800399e:	4691      	mov	r9, r2
 80039a0:	2f78      	cmp	r7, #120	@ 0x78
 80039a2:	4680      	mov	r8, r0
 80039a4:	460c      	mov	r4, r1
 80039a6:	469a      	mov	sl, r3
 80039a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039ae:	d807      	bhi.n	80039c0 <_printf_i+0x28>
 80039b0:	2f62      	cmp	r7, #98	@ 0x62
 80039b2:	d80a      	bhi.n	80039ca <_printf_i+0x32>
 80039b4:	2f00      	cmp	r7, #0
 80039b6:	f000 80d3 	beq.w	8003b60 <_printf_i+0x1c8>
 80039ba:	2f58      	cmp	r7, #88	@ 0x58
 80039bc:	f000 80ba 	beq.w	8003b34 <_printf_i+0x19c>
 80039c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039c8:	e03a      	b.n	8003a40 <_printf_i+0xa8>
 80039ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039ce:	2b15      	cmp	r3, #21
 80039d0:	d8f6      	bhi.n	80039c0 <_printf_i+0x28>
 80039d2:	a101      	add	r1, pc, #4	@ (adr r1, 80039d8 <_printf_i+0x40>)
 80039d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039d8:	08003a31 	.word	0x08003a31
 80039dc:	08003a45 	.word	0x08003a45
 80039e0:	080039c1 	.word	0x080039c1
 80039e4:	080039c1 	.word	0x080039c1
 80039e8:	080039c1 	.word	0x080039c1
 80039ec:	080039c1 	.word	0x080039c1
 80039f0:	08003a45 	.word	0x08003a45
 80039f4:	080039c1 	.word	0x080039c1
 80039f8:	080039c1 	.word	0x080039c1
 80039fc:	080039c1 	.word	0x080039c1
 8003a00:	080039c1 	.word	0x080039c1
 8003a04:	08003b47 	.word	0x08003b47
 8003a08:	08003a6f 	.word	0x08003a6f
 8003a0c:	08003b01 	.word	0x08003b01
 8003a10:	080039c1 	.word	0x080039c1
 8003a14:	080039c1 	.word	0x080039c1
 8003a18:	08003b69 	.word	0x08003b69
 8003a1c:	080039c1 	.word	0x080039c1
 8003a20:	08003a6f 	.word	0x08003a6f
 8003a24:	080039c1 	.word	0x080039c1
 8003a28:	080039c1 	.word	0x080039c1
 8003a2c:	08003b09 	.word	0x08003b09
 8003a30:	6833      	ldr	r3, [r6, #0]
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6032      	str	r2, [r6, #0]
 8003a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a40:	2301      	movs	r3, #1
 8003a42:	e09e      	b.n	8003b82 <_printf_i+0x1ea>
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	1d19      	adds	r1, r3, #4
 8003a4a:	6031      	str	r1, [r6, #0]
 8003a4c:	0606      	lsls	r6, r0, #24
 8003a4e:	d501      	bpl.n	8003a54 <_printf_i+0xbc>
 8003a50:	681d      	ldr	r5, [r3, #0]
 8003a52:	e003      	b.n	8003a5c <_printf_i+0xc4>
 8003a54:	0645      	lsls	r5, r0, #25
 8003a56:	d5fb      	bpl.n	8003a50 <_printf_i+0xb8>
 8003a58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a5c:	2d00      	cmp	r5, #0
 8003a5e:	da03      	bge.n	8003a68 <_printf_i+0xd0>
 8003a60:	232d      	movs	r3, #45	@ 0x2d
 8003a62:	426d      	negs	r5, r5
 8003a64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a68:	230a      	movs	r3, #10
 8003a6a:	4859      	ldr	r0, [pc, #356]	@ (8003bd0 <_printf_i+0x238>)
 8003a6c:	e011      	b.n	8003a92 <_printf_i+0xfa>
 8003a6e:	6821      	ldr	r1, [r4, #0]
 8003a70:	6833      	ldr	r3, [r6, #0]
 8003a72:	0608      	lsls	r0, r1, #24
 8003a74:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a78:	d402      	bmi.n	8003a80 <_printf_i+0xe8>
 8003a7a:	0649      	lsls	r1, r1, #25
 8003a7c:	bf48      	it	mi
 8003a7e:	b2ad      	uxthmi	r5, r5
 8003a80:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a82:	6033      	str	r3, [r6, #0]
 8003a84:	bf14      	ite	ne
 8003a86:	230a      	movne	r3, #10
 8003a88:	2308      	moveq	r3, #8
 8003a8a:	4851      	ldr	r0, [pc, #324]	@ (8003bd0 <_printf_i+0x238>)
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a92:	6866      	ldr	r6, [r4, #4]
 8003a94:	2e00      	cmp	r6, #0
 8003a96:	bfa8      	it	ge
 8003a98:	6821      	ldrge	r1, [r4, #0]
 8003a9a:	60a6      	str	r6, [r4, #8]
 8003a9c:	bfa4      	itt	ge
 8003a9e:	f021 0104 	bicge.w	r1, r1, #4
 8003aa2:	6021      	strge	r1, [r4, #0]
 8003aa4:	b90d      	cbnz	r5, 8003aaa <_printf_i+0x112>
 8003aa6:	2e00      	cmp	r6, #0
 8003aa8:	d04b      	beq.n	8003b42 <_printf_i+0x1aa>
 8003aaa:	4616      	mov	r6, r2
 8003aac:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ab0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ab4:	5dc7      	ldrb	r7, [r0, r7]
 8003ab6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003aba:	462f      	mov	r7, r5
 8003abc:	42bb      	cmp	r3, r7
 8003abe:	460d      	mov	r5, r1
 8003ac0:	d9f4      	bls.n	8003aac <_printf_i+0x114>
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d10b      	bne.n	8003ade <_printf_i+0x146>
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	07df      	lsls	r7, r3, #31
 8003aca:	d508      	bpl.n	8003ade <_printf_i+0x146>
 8003acc:	6923      	ldr	r3, [r4, #16]
 8003ace:	6861      	ldr	r1, [r4, #4]
 8003ad0:	4299      	cmp	r1, r3
 8003ad2:	bfde      	ittt	le
 8003ad4:	2330      	movle	r3, #48	@ 0x30
 8003ad6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ada:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ade:	1b92      	subs	r2, r2, r6
 8003ae0:	6122      	str	r2, [r4, #16]
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f8cd a000 	str.w	sl, [sp]
 8003aec:	aa03      	add	r2, sp, #12
 8003aee:	f7ff fee1 	bl	80038b4 <_printf_common>
 8003af2:	3001      	adds	r0, #1
 8003af4:	d14a      	bne.n	8003b8c <_printf_i+0x1f4>
 8003af6:	f04f 30ff 	mov.w	r0, #4294967295
 8003afa:	b004      	add	sp, #16
 8003afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	f043 0320 	orr.w	r3, r3, #32
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	2778      	movs	r7, #120	@ 0x78
 8003b0a:	4832      	ldr	r0, [pc, #200]	@ (8003bd4 <_printf_i+0x23c>)
 8003b0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	6831      	ldr	r1, [r6, #0]
 8003b14:	061f      	lsls	r7, r3, #24
 8003b16:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b1a:	d402      	bmi.n	8003b22 <_printf_i+0x18a>
 8003b1c:	065f      	lsls	r7, r3, #25
 8003b1e:	bf48      	it	mi
 8003b20:	b2ad      	uxthmi	r5, r5
 8003b22:	6031      	str	r1, [r6, #0]
 8003b24:	07d9      	lsls	r1, r3, #31
 8003b26:	bf44      	itt	mi
 8003b28:	f043 0320 	orrmi.w	r3, r3, #32
 8003b2c:	6023      	strmi	r3, [r4, #0]
 8003b2e:	b11d      	cbz	r5, 8003b38 <_printf_i+0x1a0>
 8003b30:	2310      	movs	r3, #16
 8003b32:	e7ab      	b.n	8003a8c <_printf_i+0xf4>
 8003b34:	4826      	ldr	r0, [pc, #152]	@ (8003bd0 <_printf_i+0x238>)
 8003b36:	e7e9      	b.n	8003b0c <_printf_i+0x174>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	f023 0320 	bic.w	r3, r3, #32
 8003b3e:	6023      	str	r3, [r4, #0]
 8003b40:	e7f6      	b.n	8003b30 <_printf_i+0x198>
 8003b42:	4616      	mov	r6, r2
 8003b44:	e7bd      	b.n	8003ac2 <_printf_i+0x12a>
 8003b46:	6833      	ldr	r3, [r6, #0]
 8003b48:	6825      	ldr	r5, [r4, #0]
 8003b4a:	1d18      	adds	r0, r3, #4
 8003b4c:	6961      	ldr	r1, [r4, #20]
 8003b4e:	6030      	str	r0, [r6, #0]
 8003b50:	062e      	lsls	r6, r5, #24
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	d501      	bpl.n	8003b5a <_printf_i+0x1c2>
 8003b56:	6019      	str	r1, [r3, #0]
 8003b58:	e002      	b.n	8003b60 <_printf_i+0x1c8>
 8003b5a:	0668      	lsls	r0, r5, #25
 8003b5c:	d5fb      	bpl.n	8003b56 <_printf_i+0x1be>
 8003b5e:	8019      	strh	r1, [r3, #0]
 8003b60:	2300      	movs	r3, #0
 8003b62:	4616      	mov	r6, r2
 8003b64:	6123      	str	r3, [r4, #16]
 8003b66:	e7bc      	b.n	8003ae2 <_printf_i+0x14a>
 8003b68:	6833      	ldr	r3, [r6, #0]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	1d1a      	adds	r2, r3, #4
 8003b6e:	6032      	str	r2, [r6, #0]
 8003b70:	681e      	ldr	r6, [r3, #0]
 8003b72:	6862      	ldr	r2, [r4, #4]
 8003b74:	4630      	mov	r0, r6
 8003b76:	f000 f859 	bl	8003c2c <memchr>
 8003b7a:	b108      	cbz	r0, 8003b80 <_printf_i+0x1e8>
 8003b7c:	1b80      	subs	r0, r0, r6
 8003b7e:	6060      	str	r0, [r4, #4]
 8003b80:	6863      	ldr	r3, [r4, #4]
 8003b82:	6123      	str	r3, [r4, #16]
 8003b84:	2300      	movs	r3, #0
 8003b86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b8a:	e7aa      	b.n	8003ae2 <_printf_i+0x14a>
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	4649      	mov	r1, r9
 8003b90:	4640      	mov	r0, r8
 8003b92:	6923      	ldr	r3, [r4, #16]
 8003b94:	47d0      	blx	sl
 8003b96:	3001      	adds	r0, #1
 8003b98:	d0ad      	beq.n	8003af6 <_printf_i+0x15e>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	079b      	lsls	r3, r3, #30
 8003b9e:	d413      	bmi.n	8003bc8 <_printf_i+0x230>
 8003ba0:	68e0      	ldr	r0, [r4, #12]
 8003ba2:	9b03      	ldr	r3, [sp, #12]
 8003ba4:	4298      	cmp	r0, r3
 8003ba6:	bfb8      	it	lt
 8003ba8:	4618      	movlt	r0, r3
 8003baa:	e7a6      	b.n	8003afa <_printf_i+0x162>
 8003bac:	2301      	movs	r3, #1
 8003bae:	4632      	mov	r2, r6
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	47d0      	blx	sl
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d09d      	beq.n	8003af6 <_printf_i+0x15e>
 8003bba:	3501      	adds	r5, #1
 8003bbc:	68e3      	ldr	r3, [r4, #12]
 8003bbe:	9903      	ldr	r1, [sp, #12]
 8003bc0:	1a5b      	subs	r3, r3, r1
 8003bc2:	42ab      	cmp	r3, r5
 8003bc4:	dcf2      	bgt.n	8003bac <_printf_i+0x214>
 8003bc6:	e7eb      	b.n	8003ba0 <_printf_i+0x208>
 8003bc8:	2500      	movs	r5, #0
 8003bca:	f104 0619 	add.w	r6, r4, #25
 8003bce:	e7f5      	b.n	8003bbc <_printf_i+0x224>
 8003bd0:	08003d73 	.word	0x08003d73
 8003bd4:	08003d84 	.word	0x08003d84

08003bd8 <memmove>:
 8003bd8:	4288      	cmp	r0, r1
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	eb01 0402 	add.w	r4, r1, r2
 8003be0:	d902      	bls.n	8003be8 <memmove+0x10>
 8003be2:	4284      	cmp	r4, r0
 8003be4:	4623      	mov	r3, r4
 8003be6:	d807      	bhi.n	8003bf8 <memmove+0x20>
 8003be8:	1e43      	subs	r3, r0, #1
 8003bea:	42a1      	cmp	r1, r4
 8003bec:	d008      	beq.n	8003c00 <memmove+0x28>
 8003bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bf6:	e7f8      	b.n	8003bea <memmove+0x12>
 8003bf8:	4601      	mov	r1, r0
 8003bfa:	4402      	add	r2, r0
 8003bfc:	428a      	cmp	r2, r1
 8003bfe:	d100      	bne.n	8003c02 <memmove+0x2a>
 8003c00:	bd10      	pop	{r4, pc}
 8003c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c0a:	e7f7      	b.n	8003bfc <memmove+0x24>

08003c0c <_sbrk_r>:
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	2300      	movs	r3, #0
 8003c10:	4d05      	ldr	r5, [pc, #20]	@ (8003c28 <_sbrk_r+0x1c>)
 8003c12:	4604      	mov	r4, r0
 8003c14:	4608      	mov	r0, r1
 8003c16:	602b      	str	r3, [r5, #0]
 8003c18:	f7fd fc22 	bl	8001460 <_sbrk>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_sbrk_r+0x1a>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_sbrk_r+0x1a>
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	200003b8 	.word	0x200003b8

08003c2c <memchr>:
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	b2c9      	uxtb	r1, r1
 8003c32:	4402      	add	r2, r0
 8003c34:	4293      	cmp	r3, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	d101      	bne.n	8003c3e <memchr+0x12>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e003      	b.n	8003c46 <memchr+0x1a>
 8003c3e:	7804      	ldrb	r4, [r0, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	428c      	cmp	r4, r1
 8003c44:	d1f6      	bne.n	8003c34 <memchr+0x8>
 8003c46:	bd10      	pop	{r4, pc}

08003c48 <_realloc_r>:
 8003c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	4615      	mov	r5, r2
 8003c50:	460c      	mov	r4, r1
 8003c52:	b921      	cbnz	r1, 8003c5e <_realloc_r+0x16>
 8003c54:	4611      	mov	r1, r2
 8003c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5a:	f7ff bc47 	b.w	80034ec <_malloc_r>
 8003c5e:	b92a      	cbnz	r2, 8003c6c <_realloc_r+0x24>
 8003c60:	f7ff fbda 	bl	8003418 <_free_r>
 8003c64:	2400      	movs	r4, #0
 8003c66:	4620      	mov	r0, r4
 8003c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6c:	f000 f81a 	bl	8003ca4 <_malloc_usable_size_r>
 8003c70:	4285      	cmp	r5, r0
 8003c72:	4606      	mov	r6, r0
 8003c74:	d802      	bhi.n	8003c7c <_realloc_r+0x34>
 8003c76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003c7a:	d8f4      	bhi.n	8003c66 <_realloc_r+0x1e>
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f7ff fc34 	bl	80034ec <_malloc_r>
 8003c84:	4607      	mov	r7, r0
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d0ec      	beq.n	8003c64 <_realloc_r+0x1c>
 8003c8a:	42b5      	cmp	r5, r6
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	4621      	mov	r1, r4
 8003c90:	bf28      	it	cs
 8003c92:	4632      	movcs	r2, r6
 8003c94:	f7ff fbb2 	bl	80033fc <memcpy>
 8003c98:	4621      	mov	r1, r4
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	f7ff fbbc 	bl	8003418 <_free_r>
 8003ca0:	463c      	mov	r4, r7
 8003ca2:	e7e0      	b.n	8003c66 <_realloc_r+0x1e>

08003ca4 <_malloc_usable_size_r>:
 8003ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca8:	1f18      	subs	r0, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfbc      	itt	lt
 8003cae:	580b      	ldrlt	r3, [r1, r0]
 8003cb0:	18c0      	addlt	r0, r0, r3
 8003cb2:	4770      	bx	lr

08003cb4 <_init>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr

08003cc0 <_fini>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr
