
SoilMoisture_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000793c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08007a50  08007a50  00008a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed8  08007ed8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed8  08007ed8  00008ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ee0  08007ee0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee0  08007ee0  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ee4  08007ee4  00008ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007ee8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200001d4  080080bc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080080bc  00009424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008749  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1d  00000000  00000000  00011946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00013368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061c  00000000  00000000  00013b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f18  00000000  00000000  0001419c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5ef  00000000  00000000  000170b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088aab  00000000  00000000  000216a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa14e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ac  00000000  00000000  000aa194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ad640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a34 	.word	0x08007a34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007a34 	.word	0x08007a34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f000 fb32 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f848 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f000 f8fe 	bl	800129c <MX_GPIO_Init>
  MX_ADC1_Init();
 80010a0:	f000 f894 	bl	80011cc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80010a4:	f000 f8d0 	bl	8001248 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80010a8:	4819      	ldr	r0, [pc, #100]	@ (8001110 <main+0x80>)
 80010aa:	f000 fc61 	bl	8001970 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		if(HAL_ADC_PollForConversion(&hadc1,100) == HAL_OK)
 80010ae:	2164      	movs	r1, #100	@ 0x64
 80010b0:	4817      	ldr	r0, [pc, #92]	@ (8001110 <main+0x80>)
 80010b2:	f000 fd0b 	bl	8001acc <HAL_ADC_PollForConversion>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d118      	bne.n	80010ee <main+0x5e>
		{
		SoilMoisture = HAL_ADC_GetValue(&hadc1);
 80010bc:	4814      	ldr	r0, [pc, #80]	@ (8001110 <main+0x80>)
 80010be:	f000 fe0b 	bl	8001cd8 <HAL_ADC_GetValue>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fe05 	bl	8000cd4 <__aeabi_ui2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a11      	ldr	r2, [pc, #68]	@ (8001114 <main+0x84>)
 80010ce:	6013      	str	r3, [r2, #0]
		SoilMoisture =( SoilMoisture * 4095)/100;
 80010d0:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <main+0x84>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4910      	ldr	r1, [pc, #64]	@ (8001118 <main+0x88>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe54 	bl	8000d84 <__aeabi_fmul>
 80010dc:	4603      	mov	r3, r0
 80010de:	490f      	ldr	r1, [pc, #60]	@ (800111c <main+0x8c>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff03 	bl	8000eec <__aeabi_fdiv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <main+0x84>)
 80010ec:	601a      	str	r2, [r3, #0]

		}
		sprintf(txt,"Soil Moisture:%2.2f\r\n",SoilMoisture);
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <main+0x84>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f998 	bl	8000428 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4908      	ldr	r1, [pc, #32]	@ (8001120 <main+0x90>)
 80010fe:	4809      	ldr	r0, [pc, #36]	@ (8001124 <main+0x94>)
 8001100:	f003 f86c 	bl	80041dc <siprintf>
		uartx_write_text(&huart1, txt);
 8001104:	4907      	ldr	r1, [pc, #28]	@ (8001124 <main+0x94>)
 8001106:	4808      	ldr	r0, [pc, #32]	@ (8001128 <main+0x98>)
 8001108:	f000 fabb 	bl	8001682 <uartx_write_text>
		if(HAL_ADC_PollForConversion(&hadc1,100) == HAL_OK)
 800110c:	e7cf      	b.n	80010ae <main+0x1e>
 800110e:	bf00      	nop
 8001110:	200001f0 	.word	0x200001f0
 8001114:	200002cc 	.word	0x200002cc
 8001118:	457ff000 	.word	0x457ff000
 800111c:	42c80000 	.word	0x42c80000
 8001120:	08007a50 	.word	0x08007a50
 8001124:	20000268 	.word	0x20000268
 8001128:	20000220 	.word	0x20000220

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	@ 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001136:	2228      	movs	r2, #40	@ 0x28
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f003 f8b1 	bl	80042a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001168:	2300      	movs	r3, #0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f9b9 	bl	80024e8 <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800117c:	f000 f8bc 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fc26 	bl	80029ec <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80011a6:	f000 f8a7 	bl	80012f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011aa:	2302      	movs	r3, #2
 80011ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fda7 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011c0:	f000 f89a 	bl	80012f8 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	@ 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_ADC1_Init+0x74>)
 80011de:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <MX_ADC1_Init+0x78>)
 80011e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <MX_ADC1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_ADC1_Init+0x74>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_ADC1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_ADC1_Init+0x74>)
 80011f6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <MX_ADC1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_ADC1_Init+0x74>)
 8001204:	2201      	movs	r2, #1
 8001206:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	@ (8001240 <MX_ADC1_Init+0x74>)
 800120a:	f000 fad9 	bl	80017c0 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 f870 	bl	80012f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001218:	2309      	movs	r3, #9
 800121a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121c:	2301      	movs	r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_ADC1_Init+0x74>)
 800122a:	f000 fd61 	bl	8001cf0 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001234:	f000 f860 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001f0 	.word	0x200001f0
 8001244:	40012400 	.word	0x40012400

08001248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_USART1_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001254:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART1_UART_Init+0x4c>)
 8001280:	f001 feae 	bl	8002fe0 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f835 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000220 	.word	0x20000220
 8001298:	40013800 	.word	0x40013800

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6193      	str	r3, [r2, #24]
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <MX_GPIO_Init+0x58>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <Error_Handler+0x8>

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_MspInit+0x5c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <HAL_MspInit+0x5c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_MspInit+0x5c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_MspInit+0x5c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <HAL_MspInit+0x5c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_MspInit+0x5c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_MspInit+0x60>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_MspInit+0x60>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000

08001368 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a14      	ldr	r2, [pc, #80]	@ (80013d4 <HAL_ADC_MspInit+0x6c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d121      	bne.n	80013cc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_ADC_MspInit+0x70>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <HAL_ADC_MspInit+0x70>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_ADC_MspInit+0x70>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_ADC_MspInit+0x70>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a0c      	ldr	r2, [pc, #48]	@ (80013d8 <HAL_ADC_MspInit+0x70>)
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_ADC_MspInit+0x70>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013bc:	2303      	movs	r3, #3
 80013be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <HAL_ADC_MspInit+0x74>)
 80013c8:	f000 ff0a 	bl	80021e0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40012400 	.word	0x40012400
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010c00 	.word	0x40010c00

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <HAL_UART_MspInit+0x8c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d131      	bne.n	8001464 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_UART_MspInit+0x90>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <HAL_UART_MspInit+0x90>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_UART_MspInit+0x90>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_UART_MspInit+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a14      	ldr	r2, [pc, #80]	@ (8001470 <HAL_UART_MspInit+0x90>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_UART_MspInit+0x90>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001430:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	480b      	ldr	r0, [pc, #44]	@ (8001474 <HAL_UART_MspInit+0x94>)
 8001446:	f000 fecb 	bl	80021e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800144a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800144e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <HAL_UART_MspInit+0x94>)
 8001460:	f000 febe 	bl	80021e0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40013800 	.word	0x40013800
 8001470:	40021000 	.word	0x40021000
 8001474:	40010800 	.word	0x40010800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <NMI_Handler+0x4>

08001480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <MemManage_Handler+0x4>

08001490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <UsageFault_Handler+0x4>

080014a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f000 f95e 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return 1;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <_kill>:

int _kill(int pid, int sig)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014e8:	f002 ff2e 	bl	8004348 <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2216      	movs	r2, #22
 80014f0:	601a      	str	r2, [r3, #0]
  return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_exit>:

void _exit (int status)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001506:	f04f 31ff 	mov.w	r1, #4294967295
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffe7 	bl	80014de <_kill>
  while (1) {}    /* Make sure we hang here */
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <_exit+0x12>

08001514 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
  }

  return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e009      	b.n	8001574 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <_write+0x12>
  }
  return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_close>:

int _close(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ac:	605a      	str	r2, [r3, #4]
  return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <_isatty>:

int _isatty(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
	...

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f002 fe96 	bl	8004348 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20005000 	.word	0x20005000
 8001648:	00000400 	.word	0x00000400
 800164c:	200002d0 	.word	0x200002d0
 8001650:	20000428 	.word	0x20000428

08001654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <uartx_write>:

#include "uart.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 800166c:	1cf9      	adds	r1, r7, #3
 800166e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001672:	2201      	movs	r2, #1
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f001 fd03 	bl	8003080 <HAL_UART_Transmit>

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 800168c:	e007      	b.n	800169e <uartx_write_text+0x1c>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	603a      	str	r2, [r7, #0]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe1 	bl	8001660 <uartx_write>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f3      	bne.n	800168e <uartx_write_text+0xc>

}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff ffd0 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016b6:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016b8:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016cc:	4c09      	ldr	r4, [pc, #36]	@ (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f002 fe3b 	bl	8004354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016de:	f7ff fcd7 	bl	8001090 <main>
  bx lr
 80016e2:	4770      	bx	lr
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016ec:	08007ee8 	.word	0x08007ee8
  ldr r2, =_sbss
 80016f0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016f4:	20000424 	.word	0x20000424

080016f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC1_2_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <HAL_Init+0x28>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <HAL_Init+0x28>)
 8001706:	f043 0310 	orr.w	r3, r3, #16
 800170a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 fd33 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fdf4 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fd3d 	bl	80021c6 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 fd13 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <HAL_IncTick+0x1c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_IncTick+0x20>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a03      	ldr	r2, [pc, #12]	@ (80017a8 <HAL_IncTick+0x20>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000008 	.word	0x20000008
 80017a8:	200002d4 	.word	0x200002d4

080017ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b02      	ldr	r3, [pc, #8]	@ (80017bc <HAL_GetTick+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	200002d4 	.word	0x200002d4

080017c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0be      	b.n	8001960 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fdb2 	bl	8001368 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fbc5 	bl	8001f94 <ADC_ConversionStop_Disable>
 800180a:	4603      	mov	r3, r0
 800180c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 8099 	bne.w	800194e <HAL_ADC_Init+0x18e>
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 8095 	bne.w	800194e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001828:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800182c:	f023 0302 	bic.w	r3, r3, #2
 8001830:	f043 0202 	orr.w	r2, r3, #2
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001840:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7b1b      	ldrb	r3, [r3, #12]
 8001846:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001848:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4313      	orrs	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001858:	d003      	beq.n	8001862 <HAL_ADC_Init+0xa2>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d102      	bne.n	8001868 <HAL_ADC_Init+0xa8>
 8001862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001866:	e000      	b.n	800186a <HAL_ADC_Init+0xaa>
 8001868:	2300      	movs	r3, #0
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7d1b      	ldrb	r3, [r3, #20]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d119      	bne.n	80018ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7b1b      	ldrb	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	3b01      	subs	r3, #1
 8001886:	035a      	lsls	r2, r3, #13
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	e00b      	b.n	80018ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	f043 0220 	orr.w	r2, r3, #32
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <HAL_ADC_Init+0x1a8>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018dc:	d003      	beq.n	80018e6 <HAL_ADC_Init+0x126>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d104      	bne.n	80018f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	051b      	lsls	r3, r3, #20
 80018ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	430a      	orrs	r2, r1
 8001902:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_ADC_Init+0x1ac>)
 800190c:	4013      	ands	r3, r2
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	429a      	cmp	r2, r3
 8001912:	d10b      	bne.n	800192c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800192a:	e018      	b.n	800195e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	f023 0312 	bic.w	r3, r3, #18
 8001934:	f043 0210 	orr.w	r2, r3, #16
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	ffe1f7fd 	.word	0xffe1f7fd
 800196c:	ff1f0efe 	.word	0xff1f0efe

08001970 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_ADC_Start+0x1a>
 8001986:	2302      	movs	r3, #2
 8001988:	e098      	b.n	8001abc <HAL_ADC_Start+0x14c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 faa4 	bl	8001ee0 <ADC_Enable>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 8087 	bne.w	8001ab2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a41      	ldr	r2, [pc, #260]	@ (8001ac4 <HAL_ADC_Start+0x154>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d105      	bne.n	80019ce <HAL_ADC_Start+0x5e>
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <HAL_ADC_Start+0x158>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d115      	bne.n	80019fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d026      	beq.n	8001a36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019f8:	e01d      	b.n	8001a36 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac8 <HAL_ADC_Start+0x158>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <HAL_ADC_Start+0xaa>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac4 <HAL_ADC_Start+0x154>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10d      	bne.n	8001a36 <HAL_ADC_Start+0xc6>
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_ADC_Start+0x158>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a2e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a46:	f023 0206 	bic.w	r2, r3, #6
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a4e:	e002      	b.n	8001a56 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f06f 0202 	mvn.w	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a72:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a76:	d113      	bne.n	8001aa0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ac4 <HAL_ADC_Start+0x154>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d105      	bne.n	8001a8e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_ADC_Start+0x158>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d108      	bne.n	8001aa0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	e00c      	b.n	8001aba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e003      	b.n	8001aba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40012800 	.word	0x40012800
 8001ac8:	40012400 	.word	0x40012400

08001acc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ae2:	f7ff fe63 	bl	80017ac <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	f043 0220 	orr.w	r2, r3, #32
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0d3      	b.n	8001cb6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d131      	bne.n	8001b80 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d12a      	bne.n	8001b80 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b2a:	e021      	b.n	8001b70 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b32:	d01d      	beq.n	8001b70 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_ADC_PollForConversion+0x7e>
 8001b3a:	f7ff fe37 	bl	80017ac <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d212      	bcs.n	8001b70 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10b      	bne.n	8001b70 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	f043 0204 	orr.w	r2, r3, #4
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0a2      	b.n	8001cb6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0d6      	beq.n	8001b2c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b7e:	e070      	b.n	8001c62 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b80:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc0 <HAL_ADC_PollForConversion+0x1f4>)
 8001b82:	681c      	ldr	r4, [r3, #0]
 8001b84:	2002      	movs	r0, #2
 8001b86:	f001 f975 	bl	8002e74 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6919      	ldr	r1, [r3, #16]
 8001b96:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc4 <HAL_ADC_PollForConversion+0x1f8>)
 8001b98:	400b      	ands	r3, r1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_ADC_PollForConversion+0x104>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
 8001ba4:	4b48      	ldr	r3, [pc, #288]	@ (8001cc8 <HAL_ADC_PollForConversion+0x1fc>)
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d111      	bne.n	8001bd0 <HAL_ADC_PollForConversion+0x104>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	4b46      	ldr	r3, [pc, #280]	@ (8001ccc <HAL_ADC_PollForConversion+0x200>)
 8001bb4:	400b      	ands	r3, r1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d108      	bne.n	8001bcc <HAL_ADC_PollForConversion+0x100>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68d9      	ldr	r1, [r3, #12]
 8001bc0:	4b43      	ldr	r3, [pc, #268]	@ (8001cd0 <HAL_ADC_PollForConversion+0x204>)
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_PollForConversion+0x100>
 8001bc8:	2314      	movs	r3, #20
 8001bca:	e020      	b.n	8001c0e <HAL_ADC_PollForConversion+0x142>
 8001bcc:	2329      	movs	r3, #41	@ 0x29
 8001bce:	e01e      	b.n	8001c0e <HAL_ADC_PollForConversion+0x142>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ccc <HAL_ADC_PollForConversion+0x200>)
 8001bd8:	400b      	ands	r3, r1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_ADC_PollForConversion+0x120>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd0 <HAL_ADC_PollForConversion+0x204>)
 8001be6:	400b      	ands	r3, r1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00d      	beq.n	8001c08 <HAL_ADC_PollForConversion+0x13c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <HAL_ADC_PollForConversion+0x208>)
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d108      	bne.n	8001c0c <HAL_ADC_PollForConversion+0x140>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68d9      	ldr	r1, [r3, #12]
 8001c00:	4b34      	ldr	r3, [pc, #208]	@ (8001cd4 <HAL_ADC_PollForConversion+0x208>)
 8001c02:	400b      	ands	r3, r1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_ADC_PollForConversion+0x140>
 8001c08:	2354      	movs	r3, #84	@ 0x54
 8001c0a:	e000      	b.n	8001c0e <HAL_ADC_PollForConversion+0x142>
 8001c0c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c14:	e021      	b.n	8001c5a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d01a      	beq.n	8001c54 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <HAL_ADC_PollForConversion+0x168>
 8001c24:	f7ff fdc2 	bl	80017ac <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d20f      	bcs.n	8001c54 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d90b      	bls.n	8001c54 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	f043 0204 	orr.w	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e030      	b.n	8001cb6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d8d9      	bhi.n	8001c16 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f06f 0212 	mvn.w	r2, #18
 8001c6a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c82:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c86:	d115      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d111      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	24924924 	.word	0x24924924
 8001cc8:	00924924 	.word	0x00924924
 8001ccc:	12492492 	.word	0x12492492
 8001cd0:	00492492 	.word	0x00492492
 8001cd4:	00249249 	.word	0x00249249

08001cd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x20>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e0dc      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1da>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b06      	cmp	r3, #6
 8001d1e:	d81c      	bhi.n	8001d5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b05      	subs	r3, #5
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b05      	subs	r3, #5
 8001d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d58:	e03c      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d81c      	bhi.n	8001d9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b23      	subs	r3, #35	@ 0x23
 8001d74:	221f      	movs	r2, #31
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4019      	ands	r1, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b23      	subs	r3, #35	@ 0x23
 8001d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d9a:	e01b      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	3b41      	subs	r3, #65	@ 0x41
 8001dae:	221f      	movs	r2, #31
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4019      	ands	r1, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b41      	subs	r3, #65	@ 0x41
 8001dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b09      	cmp	r3, #9
 8001dda:	d91c      	bls.n	8001e16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68d9      	ldr	r1, [r3, #12]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	3b1e      	subs	r3, #30
 8001dee:	2207      	movs	r2, #7
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4019      	ands	r1, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6898      	ldr	r0, [r3, #8]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	3b1e      	subs	r3, #30
 8001e08:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	e019      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6919      	ldr	r1, [r3, #16]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	2207      	movs	r2, #7
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4019      	ands	r1, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6898      	ldr	r0, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d003      	beq.n	8001e5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e56:	2b11      	cmp	r3, #17
 8001e58:	d132      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d125      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d126      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d11a      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a13      	ldr	r2, [pc, #76]	@ (8001edc <HAL_ADC_ConfigChannel+0x1ec>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	0c9a      	lsrs	r2, r3, #18
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x1b2>
 8001eae:	e007      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	f043 0220 	orr.w	r2, r3, #32
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40012400 	.word	0x40012400
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	431bde83 	.word	0x431bde83

08001ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d040      	beq.n	8001f80 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <ADC_Enable+0xac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1f      	ldr	r2, [pc, #124]	@ (8001f90 <ADC_Enable+0xb0>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	0c9b      	lsrs	r3, r3, #18
 8001f1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f1c:	e002      	b.n	8001f24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f9      	bne.n	8001f1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f2a:	f7ff fc3f 	bl	80017ac <HAL_GetTick>
 8001f2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f30:	e01f      	b.n	8001f72 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f32:	f7ff fc3b 	bl	80017ac <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d918      	bls.n	8001f72 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d011      	beq.n	8001f72 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f52:	f043 0210 	orr.w	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e007      	b.n	8001f82 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d1d8      	bne.n	8001f32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d12e      	bne.n	800200c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fbe:	f7ff fbf5 	bl	80017ac <HAL_GetTick>
 8001fc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fc4:	e01b      	b.n	8001ffe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fc6:	f7ff fbf1 	bl	80017ac <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d914      	bls.n	8001ffe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10d      	bne.n	8001ffe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	f043 0210 	orr.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e007      	b.n	800200e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d0dc      	beq.n	8001fc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	@ (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	@ (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	@ (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	@ 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	@ 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f7ff ff90 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff49 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff5e 	bl	8002060 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff90 	bl	80020d0 <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5f 	bl	800207c <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffb0 	bl	8002134 <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b08b      	sub	sp, #44	@ 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e169      	b.n	80024c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f4:	2201      	movs	r2, #1
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8158 	bne.w	80024c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a9a      	ldr	r2, [pc, #616]	@ (8002480 <HAL_GPIO_Init+0x2a0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d05e      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800221c:	4a98      	ldr	r2, [pc, #608]	@ (8002480 <HAL_GPIO_Init+0x2a0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d875      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002222:	4a98      	ldr	r2, [pc, #608]	@ (8002484 <HAL_GPIO_Init+0x2a4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d058      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002228:	4a96      	ldr	r2, [pc, #600]	@ (8002484 <HAL_GPIO_Init+0x2a4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d86f      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800222e:	4a96      	ldr	r2, [pc, #600]	@ (8002488 <HAL_GPIO_Init+0x2a8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d052      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002234:	4a94      	ldr	r2, [pc, #592]	@ (8002488 <HAL_GPIO_Init+0x2a8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d869      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800223a:	4a94      	ldr	r2, [pc, #592]	@ (800248c <HAL_GPIO_Init+0x2ac>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04c      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002240:	4a92      	ldr	r2, [pc, #584]	@ (800248c <HAL_GPIO_Init+0x2ac>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d863      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002246:	4a92      	ldr	r2, [pc, #584]	@ (8002490 <HAL_GPIO_Init+0x2b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d046      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800224c:	4a90      	ldr	r2, [pc, #576]	@ (8002490 <HAL_GPIO_Init+0x2b0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d85d      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002252:	2b12      	cmp	r3, #18
 8002254:	d82a      	bhi.n	80022ac <HAL_GPIO_Init+0xcc>
 8002256:	2b12      	cmp	r3, #18
 8002258:	d859      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800225a:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <HAL_GPIO_Init+0x80>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	080022db 	.word	0x080022db
 8002264:	080022b5 	.word	0x080022b5
 8002268:	080022c7 	.word	0x080022c7
 800226c:	08002309 	.word	0x08002309
 8002270:	0800230f 	.word	0x0800230f
 8002274:	0800230f 	.word	0x0800230f
 8002278:	0800230f 	.word	0x0800230f
 800227c:	0800230f 	.word	0x0800230f
 8002280:	0800230f 	.word	0x0800230f
 8002284:	0800230f 	.word	0x0800230f
 8002288:	0800230f 	.word	0x0800230f
 800228c:	0800230f 	.word	0x0800230f
 8002290:	0800230f 	.word	0x0800230f
 8002294:	0800230f 	.word	0x0800230f
 8002298:	0800230f 	.word	0x0800230f
 800229c:	0800230f 	.word	0x0800230f
 80022a0:	0800230f 	.word	0x0800230f
 80022a4:	080022bd 	.word	0x080022bd
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	4a79      	ldr	r2, [pc, #484]	@ (8002494 <HAL_GPIO_Init+0x2b4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022b2:	e02c      	b.n	800230e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	623b      	str	r3, [r7, #32]
          break;
 80022ba:	e029      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	3304      	adds	r3, #4
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e024      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	3308      	adds	r3, #8
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e01f      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	330c      	adds	r3, #12
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e01a      	b.n	8002310 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022e2:	2304      	movs	r3, #4
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e013      	b.n	8002310 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f0:	2308      	movs	r3, #8
 80022f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	611a      	str	r2, [r3, #16]
          break;
 80022fa:	e009      	b.n	8002310 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022fc:	2308      	movs	r3, #8
 80022fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	615a      	str	r2, [r3, #20]
          break;
 8002306:	e003      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x130>
          break;
 800230e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2bff      	cmp	r3, #255	@ 0xff
 8002314:	d801      	bhi.n	800231a <HAL_GPIO_Init+0x13a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	e001      	b.n	800231e <HAL_GPIO_Init+0x13e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	@ 0xff
 8002324:	d802      	bhi.n	800232c <HAL_GPIO_Init+0x14c>
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	e002      	b.n	8002332 <HAL_GPIO_Init+0x152>
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	3b08      	subs	r3, #8
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	210f      	movs	r1, #15
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	6a39      	ldr	r1, [r7, #32]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80b1 	beq.w	80024c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002360:	4b4d      	ldr	r3, [pc, #308]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a4c      	ldr	r2, [pc, #304]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b4a      	ldr	r3, [pc, #296]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002378:	4a48      	ldr	r2, [pc, #288]	@ (800249c <HAL_GPIO_Init+0x2bc>)
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	@ (80024a0 <HAL_GPIO_Init+0x2c0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_GPIO_Init+0x1ec>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3f      	ldr	r2, [pc, #252]	@ (80024a4 <HAL_GPIO_Init+0x2c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x1e8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3e      	ldr	r2, [pc, #248]	@ (80024a8 <HAL_GPIO_Init+0x2c8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3d      	ldr	r2, [pc, #244]	@ (80024ac <HAL_GPIO_Init+0x2cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x1e0>
 80023bc:	2303      	movs	r3, #3
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023cc:	2300      	movs	r3, #0
 80023ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023de:	492f      	ldr	r1, [pc, #188]	@ (800249c <HAL_GPIO_Init+0x2bc>)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	492c      	ldr	r1, [pc, #176]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002406:	4b2a      	ldr	r3, [pc, #168]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	43db      	mvns	r3, r3
 800240e:	4928      	ldr	r1, [pc, #160]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002410:	4013      	ands	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002420:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4922      	ldr	r1, [pc, #136]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	43db      	mvns	r3, r3
 8002436:	491e      	ldr	r1, [pc, #120]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002438:	4013      	ands	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4918      	ldr	r1, [pc, #96]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002456:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	43db      	mvns	r3, r3
 800245e:	4914      	ldr	r1, [pc, #80]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002460:	4013      	ands	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d021      	beq.n	80024b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002470:	4b0f      	ldr	r3, [pc, #60]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	490e      	ldr	r1, [pc, #56]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e021      	b.n	80024c2 <HAL_GPIO_Init+0x2e2>
 800247e:	bf00      	nop
 8002480:	10320000 	.word	0x10320000
 8002484:	10310000 	.word	0x10310000
 8002488:	10220000 	.word	0x10220000
 800248c:	10210000 	.word	0x10210000
 8002490:	10120000 	.word	0x10120000
 8002494:	10110000 	.word	0x10110000
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	40010c00 	.word	0x40010c00
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40011400 	.word	0x40011400
 80024b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_GPIO_Init+0x304>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4909      	ldr	r1, [pc, #36]	@ (80024e4 <HAL_GPIO_Init+0x304>)
 80024be:	4013      	ands	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	3301      	adds	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae8e 	bne.w	80021f4 <HAL_GPIO_Init+0x14>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	372c      	adds	r7, #44	@ 0x2c
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e272      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8087 	beq.w	8002616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002508:	4b92      	ldr	r3, [pc, #584]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00c      	beq.n	800252e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002514:	4b8f      	ldr	r3, [pc, #572]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d112      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
 8002520:	4b8c      	ldr	r3, [pc, #560]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252c:	d10b      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252e:	4b89      	ldr	r3, [pc, #548]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06c      	beq.n	8002614 <HAL_RCC_OscConfig+0x12c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d168      	bne.n	8002614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e24c      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x76>
 8002550:	4b80      	ldr	r3, [pc, #512]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a7f      	ldr	r2, [pc, #508]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e02e      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x98>
 8002566:	4b7b      	ldr	r3, [pc, #492]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7a      	ldr	r2, [pc, #488]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b78      	ldr	r3, [pc, #480]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a77      	ldr	r2, [pc, #476]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0xbc>
 800258a:	4b72      	ldr	r3, [pc, #456]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a71      	ldr	r2, [pc, #452]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b6f      	ldr	r3, [pc, #444]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6e      	ldr	r2, [pc, #440]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 80025a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b68      	ldr	r3, [pc, #416]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a67      	ldr	r2, [pc, #412]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff f8f2 	bl	80017ac <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff f8ee 	bl	80017ac <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e200      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b5d      	ldr	r3, [pc, #372]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xe4>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff f8de 	bl	80017ac <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff f8da 	bl	80017ac <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1ec      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b53      	ldr	r3, [pc, #332]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x10c>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002622:	4b4c      	ldr	r3, [pc, #304]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800262e:	4b49      	ldr	r3, [pc, #292]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
 800263a:	4b46      	ldr	r3, [pc, #280]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b43      	ldr	r3, [pc, #268]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1c0      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4939      	ldr	r1, [pc, #228]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7ff f893 	bl	80017ac <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff f88f 	bl	80017ac <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1a1      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4927      	ldr	r1, [pc, #156]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff f872 	bl	80017ac <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7ff f86e 	bl	80017ac <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e180      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03a      	beq.n	800276c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <HAL_RCC_OscConfig+0x274>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7ff f852 	bl	80017ac <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7ff f84e 	bl	80017ac <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e160      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272a:	2001      	movs	r0, #1
 800272c:	f000 face 	bl	8002ccc <RCC_Delay>
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <HAL_RCC_OscConfig+0x274>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7ff f838 	bl	80017ac <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273e:	e00f      	b.n	8002760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7ff f834 	bl	80017ac <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d908      	bls.n	8002760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e146      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	42420000 	.word	0x42420000
 800275c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b92      	ldr	r3, [pc, #584]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e9      	bne.n	8002740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a6 	beq.w	80028c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b8b      	ldr	r3, [pc, #556]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b88      	ldr	r3, [pc, #544]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a87      	ldr	r2, [pc, #540]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]
 8002796:	4b85      	ldr	r3, [pc, #532]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b82      	ldr	r3, [pc, #520]	@ (80029b0 <HAL_RCC_OscConfig+0x4c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d118      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b7f      	ldr	r3, [pc, #508]	@ (80029b0 <HAL_RCC_OscConfig+0x4c8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a7e      	ldr	r2, [pc, #504]	@ (80029b0 <HAL_RCC_OscConfig+0x4c8>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7fe fff5 	bl	80017ac <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7fe fff1 	bl	80017ac <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	@ 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e103      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b75      	ldr	r3, [pc, #468]	@ (80029b0 <HAL_RCC_OscConfig+0x4c8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x312>
 80027ec:	4b6f      	ldr	r3, [pc, #444]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6213      	str	r3, [r2, #32]
 80027f8:	e02d      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x334>
 8002802:	4b6a      	ldr	r3, [pc, #424]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a69      	ldr	r2, [pc, #420]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	4b67      	ldr	r3, [pc, #412]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a66      	ldr	r2, [pc, #408]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	e01c      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b05      	cmp	r3, #5
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0x356>
 8002824:	4b61      	ldr	r3, [pc, #388]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a60      	ldr	r2, [pc, #384]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	4b5e      	ldr	r3, [pc, #376]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a5d      	ldr	r2, [pc, #372]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e00b      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800283e:	4b5b      	ldr	r3, [pc, #364]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a5a      	ldr	r2, [pc, #360]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	4b58      	ldr	r3, [pc, #352]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a57      	ldr	r2, [pc, #348]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d015      	beq.n	800288a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7fe ffa5 	bl	80017ac <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe ffa1 	bl	80017ac <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0b1      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	4b4b      	ldr	r3, [pc, #300]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ee      	beq.n	8002866 <HAL_RCC_OscConfig+0x37e>
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288a:	f7fe ff8f 	bl	80017ac <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fe ff8b 	bl	80017ac <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e09b      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ee      	bne.n	8002892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b3c      	ldr	r3, [pc, #240]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a3b      	ldr	r2, [pc, #236]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d0:	4b36      	ldr	r3, [pc, #216]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d061      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d146      	bne.n	8002972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe ff5f 	bl	80017ac <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe ff5b 	bl	80017ac <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e06d      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002918:	d108      	bne.n	800292c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291a:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4921      	ldr	r1, [pc, #132]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292c:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a19      	ldr	r1, [r3, #32]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	430b      	orrs	r3, r1
 800293e:	491b      	ldr	r1, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x4cc>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe ff2f 	bl	80017ac <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe ff2b 	bl	80017ac <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e03d      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x46a>
 8002970:	e035      	b.n	80029de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_RCC_OscConfig+0x4cc>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe ff18 	bl	80017ac <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe ff14 	bl	80017ac <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e026      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x498>
 800299e:	e01e      	b.n	80029de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e019      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40007000 	.word	0x40007000
 80029b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <HAL_RCC_OscConfig+0x500>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d0      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b67      	ldr	r3, [pc, #412]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4965      	ldr	r1, [pc, #404]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b63      	ldr	r3, [pc, #396]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b8      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4b59      	ldr	r3, [pc, #356]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a58      	ldr	r2, [pc, #352]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a60:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a52      	ldr	r2, [pc, #328]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	494d      	ldr	r1, [pc, #308]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d040      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d115      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e073      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06b      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aca:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4936      	ldr	r1, [pc, #216]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002adc:	f7fe fe66 	bl	80017ac <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae4:	f7fe fe62 	bl	80017ac <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e053      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 020c 	and.w	r2, r3, #12
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1eb      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d210      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	4922      	ldr	r1, [pc, #136]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e032      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4916      	ldr	r1, [pc, #88]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	490e      	ldr	r1, [pc, #56]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 f821 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	490a      	ldr	r1, [pc, #40]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8c:	5ccb      	ldrb	r3, [r1, r3]
 8002b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b92:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_ClockConfig+0x1d0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fdc4 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08007a68 	.word	0x08007a68
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bda:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bee:	e027      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf2:	613b      	str	r3, [r7, #16]
      break;
 8002bf4:	e027      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0c9b      	lsrs	r3, r3, #18
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0c5b      	lsrs	r3, r3, #17
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	4a11      	ldr	r2, [pc, #68]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c22:	fb03 f202 	mul.w	r2, r3, r2
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e004      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0c      	ldr	r2, [pc, #48]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c42:	613b      	str	r3, [r7, #16]
      break;
 8002c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c46:	693b      	ldr	r3, [r7, #16]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	007a1200 	.word	0x007a1200
 8002c5c:	08007a80 	.word	0x08007a80
 8002c60:	08007a90 	.word	0x08007a90
 8002c64:	003d0900 	.word	0x003d0900

08002c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c6c:	4b02      	ldr	r3, [pc, #8]	@ (8002c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	20000000 	.word	0x20000000

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff2 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	@ (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08007a78 	.word	0x08007a78

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffde 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	0adb      	lsrs	r3, r3, #11
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	@ (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08007a78 	.word	0x08007a78

08002ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <RCC_Delay+0x34>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <RCC_Delay+0x38>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0a5b      	lsrs	r3, r3, #9
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce8:	bf00      	nop
  }
  while (Delay --);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	60fa      	str	r2, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <RCC_Delay+0x1c>
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20000000 	.word	0x20000000
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d07d      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d28:	4b4f      	ldr	r3, [pc, #316]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b4c      	ldr	r3, [pc, #304]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4a4b      	ldr	r2, [pc, #300]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	61d3      	str	r3, [r2, #28]
 8002d40:	4b49      	ldr	r3, [pc, #292]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b46      	ldr	r3, [pc, #280]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d118      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d5c:	4b43      	ldr	r3, [pc, #268]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a42      	ldr	r2, [pc, #264]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d68:	f7fe fd20 	bl	80017ac <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	e008      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fd1c 	bl	80017ac <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e06d      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b3a      	ldr	r3, [pc, #232]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d8e:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02e      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d027      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dac:	4b2e      	ldr	r3, [pc, #184]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db6:	4b2e      	ldr	r3, [pc, #184]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dc2:	4a29      	ldr	r2, [pc, #164]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d014      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fceb 	bl	80017ac <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fe fce7 	bl	80017ac <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e036      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4917      	ldr	r1, [pc, #92]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a13      	ldr	r2, [pc, #76]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	490b      	ldr	r1, [pc, #44]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4904      	ldr	r1, [pc, #16]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	42420440 	.word	0x42420440

08002e74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	f200 808a 	bhi.w	8002fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d045      	beq.n	8002f30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d075      	beq.n	8002f96 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002eaa:	e082      	b.n	8002fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002eac:	4b46      	ldr	r3, [pc, #280]	@ (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002eb2:	4b45      	ldr	r3, [pc, #276]	@ (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d07b      	beq.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	0c9b      	lsrs	r3, r3, #18
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	4a41      	ldr	r2, [pc, #260]	@ (8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d015      	beq.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0c5b      	lsrs	r3, r3, #17
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ef0:	4a38      	ldr	r2, [pc, #224]	@ (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	e004      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4a34      	ldr	r2, [pc, #208]	@ (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f18:	d102      	bne.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	61bb      	str	r3, [r7, #24]
      break;
 8002f1e:	e04a      	b.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4a2d      	ldr	r2, [pc, #180]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	61bb      	str	r3, [r7, #24]
      break;
 8002f2e:	e042      	b.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f40:	d108      	bne.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	e01f      	b.n	8002f94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f5e:	d109      	bne.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002f60:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002f6c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	e00f      	b.n	8002f94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f7e:	d11c      	bne.n	8002fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d016      	beq.n	8002fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002f8c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002f90:	61bb      	str	r3, [r7, #24]
      break;
 8002f92:	e012      	b.n	8002fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f94:	e011      	b.n	8002fba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f96:	f7ff fe85 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0b9b      	lsrs	r3, r3, #14
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	61bb      	str	r3, [r7, #24]
      break;
 8002fb0:	e004      	b.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e002      	b.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002fba:	bf00      	nop
    }
  }
  return (frequency);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08007a94 	.word	0x08007a94
 8002fd0:	08007aa4 	.word	0x08007aa4
 8002fd4:	007a1200 	.word	0x007a1200
 8002fd8:	003d0900 	.word	0x003d0900
 8002fdc:	aaaaaaab 	.word	0xaaaaaaab

08002fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e042      	b.n	8003078 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe f9ea 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	@ 0x24
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f91d 	bl	8003264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b20      	cmp	r3, #32
 800309e:	d16d      	bne.n	800317c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_UART_Transmit+0x2c>
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e066      	b.n	800317e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2221      	movs	r2, #33	@ 0x21
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030be:	f7fe fb75 	bl	80017ac <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d8:	d108      	bne.n	80030ec <HAL_UART_Transmit+0x6c>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e003      	b.n	80030f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030f4:	e02a      	b.n	800314c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2180      	movs	r1, #128	@ 0x80
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f840 	bl	8003186 <UART_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e036      	b.n	800317e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3302      	adds	r3, #2
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e007      	b.n	800313e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	3301      	adds	r3, #1
 800313c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1cf      	bne.n	80030f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	2140      	movs	r1, #64	@ 0x40
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f810 	bl	8003186 <UART_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e006      	b.n	800317e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b090      	sub	sp, #64	@ 0x40
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003196:	e050      	b.n	800323a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d04c      	beq.n	800323a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031a6:	f7fe fb01 	bl	80017ac <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d241      	bcs.n	800323a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80031cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80031d8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80031e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e5      	bne.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3314      	adds	r3, #20
 80031f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	613b      	str	r3, [r7, #16]
   return(result);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800320a:	623a      	str	r2, [r7, #32]
 800320c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	69f9      	ldr	r1, [r7, #28]
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	61bb      	str	r3, [r7, #24]
   return(result);
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e5      	bne.n	80031ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e00f      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	429a      	cmp	r2, r3
 8003256:	d09f      	beq.n	8003198 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3740      	adds	r7, #64	@ 0x40
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800329e:	f023 030c 	bic.w	r3, r3, #12
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003378 <UART_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d103      	bne.n	80032d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7ff fcea 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	e002      	b.n	80032da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7ff fcd2 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80032d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009a      	lsls	r2, r3, #2
 80032e4:	441a      	add	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	4a22      	ldr	r2, [pc, #136]	@ (800337c <UART_SetConfig+0x118>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	0119      	lsls	r1, r3, #4
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009a      	lsls	r2, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003310:	4b1a      	ldr	r3, [pc, #104]	@ (800337c <UART_SetConfig+0x118>)
 8003312:	fba3 0302 	umull	r0, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2064      	movs	r0, #100	@ 0x64
 800331a:	fb00 f303 	mul.w	r3, r0, r3
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	3332      	adds	r3, #50	@ 0x32
 8003324:	4a15      	ldr	r2, [pc, #84]	@ (800337c <UART_SetConfig+0x118>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003330:	4419      	add	r1, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009a      	lsls	r2, r3, #2
 800333c:	441a      	add	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	fbb2 f2f3 	udiv	r2, r2, r3
 8003348:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <UART_SetConfig+0x118>)
 800334a:	fba3 0302 	umull	r0, r3, r3, r2
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2064      	movs	r0, #100	@ 0x64
 8003352:	fb00 f303 	mul.w	r3, r0, r3
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	3332      	adds	r3, #50	@ 0x32
 800335c:	4a07      	ldr	r2, [pc, #28]	@ (800337c <UART_SetConfig+0x118>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	440a      	add	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40013800 	.word	0x40013800
 800337c:	51eb851f 	.word	0x51eb851f

08003380 <__cvt>:
 8003380:	2b00      	cmp	r3, #0
 8003382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003386:	461d      	mov	r5, r3
 8003388:	bfbb      	ittet	lt
 800338a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800338e:	461d      	movlt	r5, r3
 8003390:	2300      	movge	r3, #0
 8003392:	232d      	movlt	r3, #45	@ 0x2d
 8003394:	b088      	sub	sp, #32
 8003396:	4614      	mov	r4, r2
 8003398:	bfb8      	it	lt
 800339a:	4614      	movlt	r4, r2
 800339c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800339e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80033a0:	7013      	strb	r3, [r2, #0]
 80033a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80033a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80033a8:	f023 0820 	bic.w	r8, r3, #32
 80033ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033b0:	d005      	beq.n	80033be <__cvt+0x3e>
 80033b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80033b6:	d100      	bne.n	80033ba <__cvt+0x3a>
 80033b8:	3601      	adds	r6, #1
 80033ba:	2302      	movs	r3, #2
 80033bc:	e000      	b.n	80033c0 <__cvt+0x40>
 80033be:	2303      	movs	r3, #3
 80033c0:	aa07      	add	r2, sp, #28
 80033c2:	9204      	str	r2, [sp, #16]
 80033c4:	aa06      	add	r2, sp, #24
 80033c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80033ca:	e9cd 3600 	strd	r3, r6, [sp]
 80033ce:	4622      	mov	r2, r4
 80033d0:	462b      	mov	r3, r5
 80033d2:	f001 f881 	bl	80044d8 <_dtoa_r>
 80033d6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80033da:	4607      	mov	r7, r0
 80033dc:	d119      	bne.n	8003412 <__cvt+0x92>
 80033de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80033e0:	07db      	lsls	r3, r3, #31
 80033e2:	d50e      	bpl.n	8003402 <__cvt+0x82>
 80033e4:	eb00 0906 	add.w	r9, r0, r6
 80033e8:	2200      	movs	r2, #0
 80033ea:	2300      	movs	r3, #0
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fd fada 	bl	80009a8 <__aeabi_dcmpeq>
 80033f4:	b108      	cbz	r0, 80033fa <__cvt+0x7a>
 80033f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80033fa:	2230      	movs	r2, #48	@ 0x30
 80033fc:	9b07      	ldr	r3, [sp, #28]
 80033fe:	454b      	cmp	r3, r9
 8003400:	d31e      	bcc.n	8003440 <__cvt+0xc0>
 8003402:	4638      	mov	r0, r7
 8003404:	9b07      	ldr	r3, [sp, #28]
 8003406:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003408:	1bdb      	subs	r3, r3, r7
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	b008      	add	sp, #32
 800340e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003412:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003416:	eb00 0906 	add.w	r9, r0, r6
 800341a:	d1e5      	bne.n	80033e8 <__cvt+0x68>
 800341c:	7803      	ldrb	r3, [r0, #0]
 800341e:	2b30      	cmp	r3, #48	@ 0x30
 8003420:	d10a      	bne.n	8003438 <__cvt+0xb8>
 8003422:	2200      	movs	r2, #0
 8003424:	2300      	movs	r3, #0
 8003426:	4620      	mov	r0, r4
 8003428:	4629      	mov	r1, r5
 800342a:	f7fd fabd 	bl	80009a8 <__aeabi_dcmpeq>
 800342e:	b918      	cbnz	r0, 8003438 <__cvt+0xb8>
 8003430:	f1c6 0601 	rsb	r6, r6, #1
 8003434:	f8ca 6000 	str.w	r6, [sl]
 8003438:	f8da 3000 	ldr.w	r3, [sl]
 800343c:	4499      	add	r9, r3
 800343e:	e7d3      	b.n	80033e8 <__cvt+0x68>
 8003440:	1c59      	adds	r1, r3, #1
 8003442:	9107      	str	r1, [sp, #28]
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e7d9      	b.n	80033fc <__cvt+0x7c>

08003448 <__exponent>:
 8003448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800344a:	2900      	cmp	r1, #0
 800344c:	bfb6      	itet	lt
 800344e:	232d      	movlt	r3, #45	@ 0x2d
 8003450:	232b      	movge	r3, #43	@ 0x2b
 8003452:	4249      	neglt	r1, r1
 8003454:	2909      	cmp	r1, #9
 8003456:	7002      	strb	r2, [r0, #0]
 8003458:	7043      	strb	r3, [r0, #1]
 800345a:	dd29      	ble.n	80034b0 <__exponent+0x68>
 800345c:	f10d 0307 	add.w	r3, sp, #7
 8003460:	461d      	mov	r5, r3
 8003462:	270a      	movs	r7, #10
 8003464:	fbb1 f6f7 	udiv	r6, r1, r7
 8003468:	461a      	mov	r2, r3
 800346a:	fb07 1416 	mls	r4, r7, r6, r1
 800346e:	3430      	adds	r4, #48	@ 0x30
 8003470:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003474:	460c      	mov	r4, r1
 8003476:	2c63      	cmp	r4, #99	@ 0x63
 8003478:	4631      	mov	r1, r6
 800347a:	f103 33ff 	add.w	r3, r3, #4294967295
 800347e:	dcf1      	bgt.n	8003464 <__exponent+0x1c>
 8003480:	3130      	adds	r1, #48	@ 0x30
 8003482:	1e94      	subs	r4, r2, #2
 8003484:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003488:	4623      	mov	r3, r4
 800348a:	1c41      	adds	r1, r0, #1
 800348c:	42ab      	cmp	r3, r5
 800348e:	d30a      	bcc.n	80034a6 <__exponent+0x5e>
 8003490:	f10d 0309 	add.w	r3, sp, #9
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	42ac      	cmp	r4, r5
 8003498:	bf88      	it	hi
 800349a:	2300      	movhi	r3, #0
 800349c:	3302      	adds	r3, #2
 800349e:	4403      	add	r3, r0
 80034a0:	1a18      	subs	r0, r3, r0
 80034a2:	b003      	add	sp, #12
 80034a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80034aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80034ae:	e7ed      	b.n	800348c <__exponent+0x44>
 80034b0:	2330      	movs	r3, #48	@ 0x30
 80034b2:	3130      	adds	r1, #48	@ 0x30
 80034b4:	7083      	strb	r3, [r0, #2]
 80034b6:	70c1      	strb	r1, [r0, #3]
 80034b8:	1d03      	adds	r3, r0, #4
 80034ba:	e7f1      	b.n	80034a0 <__exponent+0x58>

080034bc <_printf_float>:
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	b091      	sub	sp, #68	@ 0x44
 80034c2:	460c      	mov	r4, r1
 80034c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80034c8:	4616      	mov	r6, r2
 80034ca:	461f      	mov	r7, r3
 80034cc:	4605      	mov	r5, r0
 80034ce:	f000 fef1 	bl	80042b4 <_localeconv_r>
 80034d2:	6803      	ldr	r3, [r0, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	9308      	str	r3, [sp, #32]
 80034d8:	f7fc fe3a 	bl	8000150 <strlen>
 80034dc:	2300      	movs	r3, #0
 80034de:	930e      	str	r3, [sp, #56]	@ 0x38
 80034e0:	f8d8 3000 	ldr.w	r3, [r8]
 80034e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80034e6:	3307      	adds	r3, #7
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	f103 0208 	add.w	r2, r3, #8
 80034f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80034f4:	f8d4 b000 	ldr.w	fp, [r4]
 80034f8:	f8c8 2000 	str.w	r2, [r8]
 80034fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003500:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003504:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003506:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800350a:	f04f 32ff 	mov.w	r2, #4294967295
 800350e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003512:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003516:	4b9c      	ldr	r3, [pc, #624]	@ (8003788 <_printf_float+0x2cc>)
 8003518:	f7fd fa78 	bl	8000a0c <__aeabi_dcmpun>
 800351c:	bb70      	cbnz	r0, 800357c <_printf_float+0xc0>
 800351e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003522:	f04f 32ff 	mov.w	r2, #4294967295
 8003526:	4b98      	ldr	r3, [pc, #608]	@ (8003788 <_printf_float+0x2cc>)
 8003528:	f7fd fa52 	bl	80009d0 <__aeabi_dcmple>
 800352c:	bb30      	cbnz	r0, 800357c <_printf_float+0xc0>
 800352e:	2200      	movs	r2, #0
 8003530:	2300      	movs	r3, #0
 8003532:	4640      	mov	r0, r8
 8003534:	4649      	mov	r1, r9
 8003536:	f7fd fa41 	bl	80009bc <__aeabi_dcmplt>
 800353a:	b110      	cbz	r0, 8003542 <_printf_float+0x86>
 800353c:	232d      	movs	r3, #45	@ 0x2d
 800353e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003542:	4a92      	ldr	r2, [pc, #584]	@ (800378c <_printf_float+0x2d0>)
 8003544:	4b92      	ldr	r3, [pc, #584]	@ (8003790 <_printf_float+0x2d4>)
 8003546:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800354a:	bf94      	ite	ls
 800354c:	4690      	movls	r8, r2
 800354e:	4698      	movhi	r8, r3
 8003550:	2303      	movs	r3, #3
 8003552:	f04f 0900 	mov.w	r9, #0
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	f02b 0304 	bic.w	r3, fp, #4
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	4633      	mov	r3, r6
 8003560:	4621      	mov	r1, r4
 8003562:	4628      	mov	r0, r5
 8003564:	9700      	str	r7, [sp, #0]
 8003566:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003568:	f000 f9d4 	bl	8003914 <_printf_common>
 800356c:	3001      	adds	r0, #1
 800356e:	f040 8090 	bne.w	8003692 <_printf_float+0x1d6>
 8003572:	f04f 30ff 	mov.w	r0, #4294967295
 8003576:	b011      	add	sp, #68	@ 0x44
 8003578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	4640      	mov	r0, r8
 8003582:	4649      	mov	r1, r9
 8003584:	f7fd fa42 	bl	8000a0c <__aeabi_dcmpun>
 8003588:	b148      	cbz	r0, 800359e <_printf_float+0xe2>
 800358a:	464b      	mov	r3, r9
 800358c:	2b00      	cmp	r3, #0
 800358e:	bfb8      	it	lt
 8003590:	232d      	movlt	r3, #45	@ 0x2d
 8003592:	4a80      	ldr	r2, [pc, #512]	@ (8003794 <_printf_float+0x2d8>)
 8003594:	bfb8      	it	lt
 8003596:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800359a:	4b7f      	ldr	r3, [pc, #508]	@ (8003798 <_printf_float+0x2dc>)
 800359c:	e7d3      	b.n	8003546 <_printf_float+0x8a>
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	d13f      	bne.n	8003628 <_printf_float+0x16c>
 80035a8:	2306      	movs	r3, #6
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	9206      	str	r2, [sp, #24]
 80035b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80035b8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80035bc:	aa0d      	add	r2, sp, #52	@ 0x34
 80035be:	9203      	str	r2, [sp, #12]
 80035c0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80035c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	4642      	mov	r2, r8
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	4628      	mov	r0, r5
 80035d0:	464b      	mov	r3, r9
 80035d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80035d4:	f7ff fed4 	bl	8003380 <__cvt>
 80035d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80035da:	4680      	mov	r8, r0
 80035dc:	2947      	cmp	r1, #71	@ 0x47
 80035de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80035e0:	d128      	bne.n	8003634 <_printf_float+0x178>
 80035e2:	1cc8      	adds	r0, r1, #3
 80035e4:	db02      	blt.n	80035ec <_printf_float+0x130>
 80035e6:	6863      	ldr	r3, [r4, #4]
 80035e8:	4299      	cmp	r1, r3
 80035ea:	dd40      	ble.n	800366e <_printf_float+0x1b2>
 80035ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80035f0:	fa5f fa8a 	uxtb.w	sl, sl
 80035f4:	4652      	mov	r2, sl
 80035f6:	3901      	subs	r1, #1
 80035f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80035fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80035fe:	f7ff ff23 	bl	8003448 <__exponent>
 8003602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003604:	4681      	mov	r9, r0
 8003606:	1813      	adds	r3, r2, r0
 8003608:	2a01      	cmp	r2, #1
 800360a:	6123      	str	r3, [r4, #16]
 800360c:	dc02      	bgt.n	8003614 <_printf_float+0x158>
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	07d2      	lsls	r2, r2, #31
 8003612:	d501      	bpl.n	8003618 <_printf_float+0x15c>
 8003614:	3301      	adds	r3, #1
 8003616:	6123      	str	r3, [r4, #16]
 8003618:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800361c:	2b00      	cmp	r3, #0
 800361e:	d09e      	beq.n	800355e <_printf_float+0xa2>
 8003620:	232d      	movs	r3, #45	@ 0x2d
 8003622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003626:	e79a      	b.n	800355e <_printf_float+0xa2>
 8003628:	2947      	cmp	r1, #71	@ 0x47
 800362a:	d1bf      	bne.n	80035ac <_printf_float+0xf0>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1bd      	bne.n	80035ac <_printf_float+0xf0>
 8003630:	2301      	movs	r3, #1
 8003632:	e7ba      	b.n	80035aa <_printf_float+0xee>
 8003634:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003638:	d9dc      	bls.n	80035f4 <_printf_float+0x138>
 800363a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800363e:	d118      	bne.n	8003672 <_printf_float+0x1b6>
 8003640:	2900      	cmp	r1, #0
 8003642:	6863      	ldr	r3, [r4, #4]
 8003644:	dd0b      	ble.n	800365e <_printf_float+0x1a2>
 8003646:	6121      	str	r1, [r4, #16]
 8003648:	b913      	cbnz	r3, 8003650 <_printf_float+0x194>
 800364a:	6822      	ldr	r2, [r4, #0]
 800364c:	07d0      	lsls	r0, r2, #31
 800364e:	d502      	bpl.n	8003656 <_printf_float+0x19a>
 8003650:	3301      	adds	r3, #1
 8003652:	440b      	add	r3, r1
 8003654:	6123      	str	r3, [r4, #16]
 8003656:	f04f 0900 	mov.w	r9, #0
 800365a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800365c:	e7dc      	b.n	8003618 <_printf_float+0x15c>
 800365e:	b913      	cbnz	r3, 8003666 <_printf_float+0x1aa>
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	07d2      	lsls	r2, r2, #31
 8003664:	d501      	bpl.n	800366a <_printf_float+0x1ae>
 8003666:	3302      	adds	r3, #2
 8003668:	e7f4      	b.n	8003654 <_printf_float+0x198>
 800366a:	2301      	movs	r3, #1
 800366c:	e7f2      	b.n	8003654 <_printf_float+0x198>
 800366e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003674:	4299      	cmp	r1, r3
 8003676:	db05      	blt.n	8003684 <_printf_float+0x1c8>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	6121      	str	r1, [r4, #16]
 800367c:	07d8      	lsls	r0, r3, #31
 800367e:	d5ea      	bpl.n	8003656 <_printf_float+0x19a>
 8003680:	1c4b      	adds	r3, r1, #1
 8003682:	e7e7      	b.n	8003654 <_printf_float+0x198>
 8003684:	2900      	cmp	r1, #0
 8003686:	bfcc      	ite	gt
 8003688:	2201      	movgt	r2, #1
 800368a:	f1c1 0202 	rsble	r2, r1, #2
 800368e:	4413      	add	r3, r2
 8003690:	e7e0      	b.n	8003654 <_printf_float+0x198>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	055a      	lsls	r2, r3, #21
 8003696:	d407      	bmi.n	80036a8 <_printf_float+0x1ec>
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	4642      	mov	r2, r8
 800369c:	4631      	mov	r1, r6
 800369e:	4628      	mov	r0, r5
 80036a0:	47b8      	blx	r7
 80036a2:	3001      	adds	r0, #1
 80036a4:	d12b      	bne.n	80036fe <_printf_float+0x242>
 80036a6:	e764      	b.n	8003572 <_printf_float+0xb6>
 80036a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80036ac:	f240 80dc 	bls.w	8003868 <_printf_float+0x3ac>
 80036b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036b4:	2200      	movs	r2, #0
 80036b6:	2300      	movs	r3, #0
 80036b8:	f7fd f976 	bl	80009a8 <__aeabi_dcmpeq>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d033      	beq.n	8003728 <_printf_float+0x26c>
 80036c0:	2301      	movs	r3, #1
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	4a35      	ldr	r2, [pc, #212]	@ (800379c <_printf_float+0x2e0>)
 80036c8:	47b8      	blx	r7
 80036ca:	3001      	adds	r0, #1
 80036cc:	f43f af51 	beq.w	8003572 <_printf_float+0xb6>
 80036d0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80036d4:	4543      	cmp	r3, r8
 80036d6:	db02      	blt.n	80036de <_printf_float+0x222>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	07d8      	lsls	r0, r3, #31
 80036dc:	d50f      	bpl.n	80036fe <_printf_float+0x242>
 80036de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036e2:	4631      	mov	r1, r6
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	f43f af42 	beq.w	8003572 <_printf_float+0xb6>
 80036ee:	f04f 0900 	mov.w	r9, #0
 80036f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80036f6:	f104 0a1a 	add.w	sl, r4, #26
 80036fa:	45c8      	cmp	r8, r9
 80036fc:	dc09      	bgt.n	8003712 <_printf_float+0x256>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	079b      	lsls	r3, r3, #30
 8003702:	f100 8102 	bmi.w	800390a <_printf_float+0x44e>
 8003706:	68e0      	ldr	r0, [r4, #12]
 8003708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800370a:	4298      	cmp	r0, r3
 800370c:	bfb8      	it	lt
 800370e:	4618      	movlt	r0, r3
 8003710:	e731      	b.n	8003576 <_printf_float+0xba>
 8003712:	2301      	movs	r3, #1
 8003714:	4652      	mov	r2, sl
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	f43f af28 	beq.w	8003572 <_printf_float+0xb6>
 8003722:	f109 0901 	add.w	r9, r9, #1
 8003726:	e7e8      	b.n	80036fa <_printf_float+0x23e>
 8003728:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800372a:	2b00      	cmp	r3, #0
 800372c:	dc38      	bgt.n	80037a0 <_printf_float+0x2e4>
 800372e:	2301      	movs	r3, #1
 8003730:	4631      	mov	r1, r6
 8003732:	4628      	mov	r0, r5
 8003734:	4a19      	ldr	r2, [pc, #100]	@ (800379c <_printf_float+0x2e0>)
 8003736:	47b8      	blx	r7
 8003738:	3001      	adds	r0, #1
 800373a:	f43f af1a 	beq.w	8003572 <_printf_float+0xb6>
 800373e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003742:	ea59 0303 	orrs.w	r3, r9, r3
 8003746:	d102      	bne.n	800374e <_printf_float+0x292>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	07d9      	lsls	r1, r3, #31
 800374c:	d5d7      	bpl.n	80036fe <_printf_float+0x242>
 800374e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003752:	4631      	mov	r1, r6
 8003754:	4628      	mov	r0, r5
 8003756:	47b8      	blx	r7
 8003758:	3001      	adds	r0, #1
 800375a:	f43f af0a 	beq.w	8003572 <_printf_float+0xb6>
 800375e:	f04f 0a00 	mov.w	sl, #0
 8003762:	f104 0b1a 	add.w	fp, r4, #26
 8003766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003768:	425b      	negs	r3, r3
 800376a:	4553      	cmp	r3, sl
 800376c:	dc01      	bgt.n	8003772 <_printf_float+0x2b6>
 800376e:	464b      	mov	r3, r9
 8003770:	e793      	b.n	800369a <_printf_float+0x1de>
 8003772:	2301      	movs	r3, #1
 8003774:	465a      	mov	r2, fp
 8003776:	4631      	mov	r1, r6
 8003778:	4628      	mov	r0, r5
 800377a:	47b8      	blx	r7
 800377c:	3001      	adds	r0, #1
 800377e:	f43f aef8 	beq.w	8003572 <_printf_float+0xb6>
 8003782:	f10a 0a01 	add.w	sl, sl, #1
 8003786:	e7ee      	b.n	8003766 <_printf_float+0x2aa>
 8003788:	7fefffff 	.word	0x7fefffff
 800378c:	08007aa6 	.word	0x08007aa6
 8003790:	08007aaa 	.word	0x08007aaa
 8003794:	08007aae 	.word	0x08007aae
 8003798:	08007ab2 	.word	0x08007ab2
 800379c:	08007ab6 	.word	0x08007ab6
 80037a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037a2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80037a6:	4553      	cmp	r3, sl
 80037a8:	bfa8      	it	ge
 80037aa:	4653      	movge	r3, sl
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	4699      	mov	r9, r3
 80037b0:	dc36      	bgt.n	8003820 <_printf_float+0x364>
 80037b2:	f04f 0b00 	mov.w	fp, #0
 80037b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037ba:	f104 021a 	add.w	r2, r4, #26
 80037be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80037c2:	eba3 0309 	sub.w	r3, r3, r9
 80037c6:	455b      	cmp	r3, fp
 80037c8:	dc31      	bgt.n	800382e <_printf_float+0x372>
 80037ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037cc:	459a      	cmp	sl, r3
 80037ce:	dc3a      	bgt.n	8003846 <_printf_float+0x38a>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	07da      	lsls	r2, r3, #31
 80037d4:	d437      	bmi.n	8003846 <_printf_float+0x38a>
 80037d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037d8:	ebaa 0903 	sub.w	r9, sl, r3
 80037dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037de:	ebaa 0303 	sub.w	r3, sl, r3
 80037e2:	4599      	cmp	r9, r3
 80037e4:	bfa8      	it	ge
 80037e6:	4699      	movge	r9, r3
 80037e8:	f1b9 0f00 	cmp.w	r9, #0
 80037ec:	dc33      	bgt.n	8003856 <_printf_float+0x39a>
 80037ee:	f04f 0800 	mov.w	r8, #0
 80037f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037f6:	f104 0b1a 	add.w	fp, r4, #26
 80037fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037fc:	ebaa 0303 	sub.w	r3, sl, r3
 8003800:	eba3 0309 	sub.w	r3, r3, r9
 8003804:	4543      	cmp	r3, r8
 8003806:	f77f af7a 	ble.w	80036fe <_printf_float+0x242>
 800380a:	2301      	movs	r3, #1
 800380c:	465a      	mov	r2, fp
 800380e:	4631      	mov	r1, r6
 8003810:	4628      	mov	r0, r5
 8003812:	47b8      	blx	r7
 8003814:	3001      	adds	r0, #1
 8003816:	f43f aeac 	beq.w	8003572 <_printf_float+0xb6>
 800381a:	f108 0801 	add.w	r8, r8, #1
 800381e:	e7ec      	b.n	80037fa <_printf_float+0x33e>
 8003820:	4642      	mov	r2, r8
 8003822:	4631      	mov	r1, r6
 8003824:	4628      	mov	r0, r5
 8003826:	47b8      	blx	r7
 8003828:	3001      	adds	r0, #1
 800382a:	d1c2      	bne.n	80037b2 <_printf_float+0x2f6>
 800382c:	e6a1      	b.n	8003572 <_printf_float+0xb6>
 800382e:	2301      	movs	r3, #1
 8003830:	4631      	mov	r1, r6
 8003832:	4628      	mov	r0, r5
 8003834:	920a      	str	r2, [sp, #40]	@ 0x28
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	f43f ae9a 	beq.w	8003572 <_printf_float+0xb6>
 800383e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003840:	f10b 0b01 	add.w	fp, fp, #1
 8003844:	e7bb      	b.n	80037be <_printf_float+0x302>
 8003846:	4631      	mov	r1, r6
 8003848:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800384c:	4628      	mov	r0, r5
 800384e:	47b8      	blx	r7
 8003850:	3001      	adds	r0, #1
 8003852:	d1c0      	bne.n	80037d6 <_printf_float+0x31a>
 8003854:	e68d      	b.n	8003572 <_printf_float+0xb6>
 8003856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003858:	464b      	mov	r3, r9
 800385a:	4631      	mov	r1, r6
 800385c:	4628      	mov	r0, r5
 800385e:	4442      	add	r2, r8
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	d1c3      	bne.n	80037ee <_printf_float+0x332>
 8003866:	e684      	b.n	8003572 <_printf_float+0xb6>
 8003868:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800386c:	f1ba 0f01 	cmp.w	sl, #1
 8003870:	dc01      	bgt.n	8003876 <_printf_float+0x3ba>
 8003872:	07db      	lsls	r3, r3, #31
 8003874:	d536      	bpl.n	80038e4 <_printf_float+0x428>
 8003876:	2301      	movs	r3, #1
 8003878:	4642      	mov	r2, r8
 800387a:	4631      	mov	r1, r6
 800387c:	4628      	mov	r0, r5
 800387e:	47b8      	blx	r7
 8003880:	3001      	adds	r0, #1
 8003882:	f43f ae76 	beq.w	8003572 <_printf_float+0xb6>
 8003886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800388a:	4631      	mov	r1, r6
 800388c:	4628      	mov	r0, r5
 800388e:	47b8      	blx	r7
 8003890:	3001      	adds	r0, #1
 8003892:	f43f ae6e 	beq.w	8003572 <_printf_float+0xb6>
 8003896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800389a:	2200      	movs	r2, #0
 800389c:	2300      	movs	r3, #0
 800389e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038a2:	f7fd f881 	bl	80009a8 <__aeabi_dcmpeq>
 80038a6:	b9c0      	cbnz	r0, 80038da <_printf_float+0x41e>
 80038a8:	4653      	mov	r3, sl
 80038aa:	f108 0201 	add.w	r2, r8, #1
 80038ae:	4631      	mov	r1, r6
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	d10c      	bne.n	80038d2 <_printf_float+0x416>
 80038b8:	e65b      	b.n	8003572 <_printf_float+0xb6>
 80038ba:	2301      	movs	r3, #1
 80038bc:	465a      	mov	r2, fp
 80038be:	4631      	mov	r1, r6
 80038c0:	4628      	mov	r0, r5
 80038c2:	47b8      	blx	r7
 80038c4:	3001      	adds	r0, #1
 80038c6:	f43f ae54 	beq.w	8003572 <_printf_float+0xb6>
 80038ca:	f108 0801 	add.w	r8, r8, #1
 80038ce:	45d0      	cmp	r8, sl
 80038d0:	dbf3      	blt.n	80038ba <_printf_float+0x3fe>
 80038d2:	464b      	mov	r3, r9
 80038d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80038d8:	e6e0      	b.n	800369c <_printf_float+0x1e0>
 80038da:	f04f 0800 	mov.w	r8, #0
 80038de:	f104 0b1a 	add.w	fp, r4, #26
 80038e2:	e7f4      	b.n	80038ce <_printf_float+0x412>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4642      	mov	r2, r8
 80038e8:	e7e1      	b.n	80038ae <_printf_float+0x3f2>
 80038ea:	2301      	movs	r3, #1
 80038ec:	464a      	mov	r2, r9
 80038ee:	4631      	mov	r1, r6
 80038f0:	4628      	mov	r0, r5
 80038f2:	47b8      	blx	r7
 80038f4:	3001      	adds	r0, #1
 80038f6:	f43f ae3c 	beq.w	8003572 <_printf_float+0xb6>
 80038fa:	f108 0801 	add.w	r8, r8, #1
 80038fe:	68e3      	ldr	r3, [r4, #12]
 8003900:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003902:	1a5b      	subs	r3, r3, r1
 8003904:	4543      	cmp	r3, r8
 8003906:	dcf0      	bgt.n	80038ea <_printf_float+0x42e>
 8003908:	e6fd      	b.n	8003706 <_printf_float+0x24a>
 800390a:	f04f 0800 	mov.w	r8, #0
 800390e:	f104 0919 	add.w	r9, r4, #25
 8003912:	e7f4      	b.n	80038fe <_printf_float+0x442>

08003914 <_printf_common>:
 8003914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	4616      	mov	r6, r2
 800391a:	4698      	mov	r8, r3
 800391c:	688a      	ldr	r2, [r1, #8]
 800391e:	690b      	ldr	r3, [r1, #16]
 8003920:	4607      	mov	r7, r0
 8003922:	4293      	cmp	r3, r2
 8003924:	bfb8      	it	lt
 8003926:	4613      	movlt	r3, r2
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800392e:	460c      	mov	r4, r1
 8003930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003934:	b10a      	cbz	r2, 800393a <_printf_common+0x26>
 8003936:	3301      	adds	r3, #1
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	0699      	lsls	r1, r3, #26
 800393e:	bf42      	ittt	mi
 8003940:	6833      	ldrmi	r3, [r6, #0]
 8003942:	3302      	addmi	r3, #2
 8003944:	6033      	strmi	r3, [r6, #0]
 8003946:	6825      	ldr	r5, [r4, #0]
 8003948:	f015 0506 	ands.w	r5, r5, #6
 800394c:	d106      	bne.n	800395c <_printf_common+0x48>
 800394e:	f104 0a19 	add.w	sl, r4, #25
 8003952:	68e3      	ldr	r3, [r4, #12]
 8003954:	6832      	ldr	r2, [r6, #0]
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	42ab      	cmp	r3, r5
 800395a:	dc2b      	bgt.n	80039b4 <_printf_common+0xa0>
 800395c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	3b00      	subs	r3, #0
 8003964:	bf18      	it	ne
 8003966:	2301      	movne	r3, #1
 8003968:	0692      	lsls	r2, r2, #26
 800396a:	d430      	bmi.n	80039ce <_printf_common+0xba>
 800396c:	4641      	mov	r1, r8
 800396e:	4638      	mov	r0, r7
 8003970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003974:	47c8      	blx	r9
 8003976:	3001      	adds	r0, #1
 8003978:	d023      	beq.n	80039c2 <_printf_common+0xae>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	6922      	ldr	r2, [r4, #16]
 800397e:	f003 0306 	and.w	r3, r3, #6
 8003982:	2b04      	cmp	r3, #4
 8003984:	bf14      	ite	ne
 8003986:	2500      	movne	r5, #0
 8003988:	6833      	ldreq	r3, [r6, #0]
 800398a:	f04f 0600 	mov.w	r6, #0
 800398e:	bf08      	it	eq
 8003990:	68e5      	ldreq	r5, [r4, #12]
 8003992:	f104 041a 	add.w	r4, r4, #26
 8003996:	bf08      	it	eq
 8003998:	1aed      	subeq	r5, r5, r3
 800399a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800399e:	bf08      	it	eq
 80039a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bfc4      	itt	gt
 80039a8:	1a9b      	subgt	r3, r3, r2
 80039aa:	18ed      	addgt	r5, r5, r3
 80039ac:	42b5      	cmp	r5, r6
 80039ae:	d11a      	bne.n	80039e6 <_printf_common+0xd2>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e008      	b.n	80039c6 <_printf_common+0xb2>
 80039b4:	2301      	movs	r3, #1
 80039b6:	4652      	mov	r2, sl
 80039b8:	4641      	mov	r1, r8
 80039ba:	4638      	mov	r0, r7
 80039bc:	47c8      	blx	r9
 80039be:	3001      	adds	r0, #1
 80039c0:	d103      	bne.n	80039ca <_printf_common+0xb6>
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295
 80039c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ca:	3501      	adds	r5, #1
 80039cc:	e7c1      	b.n	8003952 <_printf_common+0x3e>
 80039ce:	2030      	movs	r0, #48	@ 0x30
 80039d0:	18e1      	adds	r1, r4, r3
 80039d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039dc:	4422      	add	r2, r4
 80039de:	3302      	adds	r3, #2
 80039e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039e4:	e7c2      	b.n	800396c <_printf_common+0x58>
 80039e6:	2301      	movs	r3, #1
 80039e8:	4622      	mov	r2, r4
 80039ea:	4641      	mov	r1, r8
 80039ec:	4638      	mov	r0, r7
 80039ee:	47c8      	blx	r9
 80039f0:	3001      	adds	r0, #1
 80039f2:	d0e6      	beq.n	80039c2 <_printf_common+0xae>
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7d9      	b.n	80039ac <_printf_common+0x98>

080039f8 <_printf_i>:
 80039f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039fc:	7e0f      	ldrb	r7, [r1, #24]
 80039fe:	4691      	mov	r9, r2
 8003a00:	2f78      	cmp	r7, #120	@ 0x78
 8003a02:	4680      	mov	r8, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	469a      	mov	sl, r3
 8003a08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a0e:	d807      	bhi.n	8003a20 <_printf_i+0x28>
 8003a10:	2f62      	cmp	r7, #98	@ 0x62
 8003a12:	d80a      	bhi.n	8003a2a <_printf_i+0x32>
 8003a14:	2f00      	cmp	r7, #0
 8003a16:	f000 80d3 	beq.w	8003bc0 <_printf_i+0x1c8>
 8003a1a:	2f58      	cmp	r7, #88	@ 0x58
 8003a1c:	f000 80ba 	beq.w	8003b94 <_printf_i+0x19c>
 8003a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a28:	e03a      	b.n	8003aa0 <_printf_i+0xa8>
 8003a2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a2e:	2b15      	cmp	r3, #21
 8003a30:	d8f6      	bhi.n	8003a20 <_printf_i+0x28>
 8003a32:	a101      	add	r1, pc, #4	@ (adr r1, 8003a38 <_printf_i+0x40>)
 8003a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a38:	08003a91 	.word	0x08003a91
 8003a3c:	08003aa5 	.word	0x08003aa5
 8003a40:	08003a21 	.word	0x08003a21
 8003a44:	08003a21 	.word	0x08003a21
 8003a48:	08003a21 	.word	0x08003a21
 8003a4c:	08003a21 	.word	0x08003a21
 8003a50:	08003aa5 	.word	0x08003aa5
 8003a54:	08003a21 	.word	0x08003a21
 8003a58:	08003a21 	.word	0x08003a21
 8003a5c:	08003a21 	.word	0x08003a21
 8003a60:	08003a21 	.word	0x08003a21
 8003a64:	08003ba7 	.word	0x08003ba7
 8003a68:	08003acf 	.word	0x08003acf
 8003a6c:	08003b61 	.word	0x08003b61
 8003a70:	08003a21 	.word	0x08003a21
 8003a74:	08003a21 	.word	0x08003a21
 8003a78:	08003bc9 	.word	0x08003bc9
 8003a7c:	08003a21 	.word	0x08003a21
 8003a80:	08003acf 	.word	0x08003acf
 8003a84:	08003a21 	.word	0x08003a21
 8003a88:	08003a21 	.word	0x08003a21
 8003a8c:	08003b69 	.word	0x08003b69
 8003a90:	6833      	ldr	r3, [r6, #0]
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6032      	str	r2, [r6, #0]
 8003a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e09e      	b.n	8003be2 <_printf_i+0x1ea>
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	6820      	ldr	r0, [r4, #0]
 8003aa8:	1d19      	adds	r1, r3, #4
 8003aaa:	6031      	str	r1, [r6, #0]
 8003aac:	0606      	lsls	r6, r0, #24
 8003aae:	d501      	bpl.n	8003ab4 <_printf_i+0xbc>
 8003ab0:	681d      	ldr	r5, [r3, #0]
 8003ab2:	e003      	b.n	8003abc <_printf_i+0xc4>
 8003ab4:	0645      	lsls	r5, r0, #25
 8003ab6:	d5fb      	bpl.n	8003ab0 <_printf_i+0xb8>
 8003ab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003abc:	2d00      	cmp	r5, #0
 8003abe:	da03      	bge.n	8003ac8 <_printf_i+0xd0>
 8003ac0:	232d      	movs	r3, #45	@ 0x2d
 8003ac2:	426d      	negs	r5, r5
 8003ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ac8:	230a      	movs	r3, #10
 8003aca:	4859      	ldr	r0, [pc, #356]	@ (8003c30 <_printf_i+0x238>)
 8003acc:	e011      	b.n	8003af2 <_printf_i+0xfa>
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	6833      	ldr	r3, [r6, #0]
 8003ad2:	0608      	lsls	r0, r1, #24
 8003ad4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ad8:	d402      	bmi.n	8003ae0 <_printf_i+0xe8>
 8003ada:	0649      	lsls	r1, r1, #25
 8003adc:	bf48      	it	mi
 8003ade:	b2ad      	uxthmi	r5, r5
 8003ae0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ae2:	6033      	str	r3, [r6, #0]
 8003ae4:	bf14      	ite	ne
 8003ae6:	230a      	movne	r3, #10
 8003ae8:	2308      	moveq	r3, #8
 8003aea:	4851      	ldr	r0, [pc, #324]	@ (8003c30 <_printf_i+0x238>)
 8003aec:	2100      	movs	r1, #0
 8003aee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003af2:	6866      	ldr	r6, [r4, #4]
 8003af4:	2e00      	cmp	r6, #0
 8003af6:	bfa8      	it	ge
 8003af8:	6821      	ldrge	r1, [r4, #0]
 8003afa:	60a6      	str	r6, [r4, #8]
 8003afc:	bfa4      	itt	ge
 8003afe:	f021 0104 	bicge.w	r1, r1, #4
 8003b02:	6021      	strge	r1, [r4, #0]
 8003b04:	b90d      	cbnz	r5, 8003b0a <_printf_i+0x112>
 8003b06:	2e00      	cmp	r6, #0
 8003b08:	d04b      	beq.n	8003ba2 <_printf_i+0x1aa>
 8003b0a:	4616      	mov	r6, r2
 8003b0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b10:	fb03 5711 	mls	r7, r3, r1, r5
 8003b14:	5dc7      	ldrb	r7, [r0, r7]
 8003b16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b1a:	462f      	mov	r7, r5
 8003b1c:	42bb      	cmp	r3, r7
 8003b1e:	460d      	mov	r5, r1
 8003b20:	d9f4      	bls.n	8003b0c <_printf_i+0x114>
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d10b      	bne.n	8003b3e <_printf_i+0x146>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	07df      	lsls	r7, r3, #31
 8003b2a:	d508      	bpl.n	8003b3e <_printf_i+0x146>
 8003b2c:	6923      	ldr	r3, [r4, #16]
 8003b2e:	6861      	ldr	r1, [r4, #4]
 8003b30:	4299      	cmp	r1, r3
 8003b32:	bfde      	ittt	le
 8003b34:	2330      	movle	r3, #48	@ 0x30
 8003b36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b3e:	1b92      	subs	r2, r2, r6
 8003b40:	6122      	str	r2, [r4, #16]
 8003b42:	464b      	mov	r3, r9
 8003b44:	4621      	mov	r1, r4
 8003b46:	4640      	mov	r0, r8
 8003b48:	f8cd a000 	str.w	sl, [sp]
 8003b4c:	aa03      	add	r2, sp, #12
 8003b4e:	f7ff fee1 	bl	8003914 <_printf_common>
 8003b52:	3001      	adds	r0, #1
 8003b54:	d14a      	bne.n	8003bec <_printf_i+0x1f4>
 8003b56:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5a:	b004      	add	sp, #16
 8003b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	f043 0320 	orr.w	r3, r3, #32
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	2778      	movs	r7, #120	@ 0x78
 8003b6a:	4832      	ldr	r0, [pc, #200]	@ (8003c34 <_printf_i+0x23c>)
 8003b6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	6831      	ldr	r1, [r6, #0]
 8003b74:	061f      	lsls	r7, r3, #24
 8003b76:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b7a:	d402      	bmi.n	8003b82 <_printf_i+0x18a>
 8003b7c:	065f      	lsls	r7, r3, #25
 8003b7e:	bf48      	it	mi
 8003b80:	b2ad      	uxthmi	r5, r5
 8003b82:	6031      	str	r1, [r6, #0]
 8003b84:	07d9      	lsls	r1, r3, #31
 8003b86:	bf44      	itt	mi
 8003b88:	f043 0320 	orrmi.w	r3, r3, #32
 8003b8c:	6023      	strmi	r3, [r4, #0]
 8003b8e:	b11d      	cbz	r5, 8003b98 <_printf_i+0x1a0>
 8003b90:	2310      	movs	r3, #16
 8003b92:	e7ab      	b.n	8003aec <_printf_i+0xf4>
 8003b94:	4826      	ldr	r0, [pc, #152]	@ (8003c30 <_printf_i+0x238>)
 8003b96:	e7e9      	b.n	8003b6c <_printf_i+0x174>
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	f023 0320 	bic.w	r3, r3, #32
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	e7f6      	b.n	8003b90 <_printf_i+0x198>
 8003ba2:	4616      	mov	r6, r2
 8003ba4:	e7bd      	b.n	8003b22 <_printf_i+0x12a>
 8003ba6:	6833      	ldr	r3, [r6, #0]
 8003ba8:	6825      	ldr	r5, [r4, #0]
 8003baa:	1d18      	adds	r0, r3, #4
 8003bac:	6961      	ldr	r1, [r4, #20]
 8003bae:	6030      	str	r0, [r6, #0]
 8003bb0:	062e      	lsls	r6, r5, #24
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	d501      	bpl.n	8003bba <_printf_i+0x1c2>
 8003bb6:	6019      	str	r1, [r3, #0]
 8003bb8:	e002      	b.n	8003bc0 <_printf_i+0x1c8>
 8003bba:	0668      	lsls	r0, r5, #25
 8003bbc:	d5fb      	bpl.n	8003bb6 <_printf_i+0x1be>
 8003bbe:	8019      	strh	r1, [r3, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4616      	mov	r6, r2
 8003bc4:	6123      	str	r3, [r4, #16]
 8003bc6:	e7bc      	b.n	8003b42 <_printf_i+0x14a>
 8003bc8:	6833      	ldr	r3, [r6, #0]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	1d1a      	adds	r2, r3, #4
 8003bce:	6032      	str	r2, [r6, #0]
 8003bd0:	681e      	ldr	r6, [r3, #0]
 8003bd2:	6862      	ldr	r2, [r4, #4]
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f000 fbe4 	bl	80043a2 <memchr>
 8003bda:	b108      	cbz	r0, 8003be0 <_printf_i+0x1e8>
 8003bdc:	1b80      	subs	r0, r0, r6
 8003bde:	6060      	str	r0, [r4, #4]
 8003be0:	6863      	ldr	r3, [r4, #4]
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	2300      	movs	r3, #0
 8003be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bea:	e7aa      	b.n	8003b42 <_printf_i+0x14a>
 8003bec:	4632      	mov	r2, r6
 8003bee:	4649      	mov	r1, r9
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	47d0      	blx	sl
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d0ad      	beq.n	8003b56 <_printf_i+0x15e>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	079b      	lsls	r3, r3, #30
 8003bfe:	d413      	bmi.n	8003c28 <_printf_i+0x230>
 8003c00:	68e0      	ldr	r0, [r4, #12]
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	4298      	cmp	r0, r3
 8003c06:	bfb8      	it	lt
 8003c08:	4618      	movlt	r0, r3
 8003c0a:	e7a6      	b.n	8003b5a <_printf_i+0x162>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4632      	mov	r2, r6
 8003c10:	4649      	mov	r1, r9
 8003c12:	4640      	mov	r0, r8
 8003c14:	47d0      	blx	sl
 8003c16:	3001      	adds	r0, #1
 8003c18:	d09d      	beq.n	8003b56 <_printf_i+0x15e>
 8003c1a:	3501      	adds	r5, #1
 8003c1c:	68e3      	ldr	r3, [r4, #12]
 8003c1e:	9903      	ldr	r1, [sp, #12]
 8003c20:	1a5b      	subs	r3, r3, r1
 8003c22:	42ab      	cmp	r3, r5
 8003c24:	dcf2      	bgt.n	8003c0c <_printf_i+0x214>
 8003c26:	e7eb      	b.n	8003c00 <_printf_i+0x208>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	f104 0619 	add.w	r6, r4, #25
 8003c2e:	e7f5      	b.n	8003c1c <_printf_i+0x224>
 8003c30:	08007ab8 	.word	0x08007ab8
 8003c34:	08007ac9 	.word	0x08007ac9

08003c38 <_scanf_float>:
 8003c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	b087      	sub	sp, #28
 8003c3e:	9303      	str	r3, [sp, #12]
 8003c40:	688b      	ldr	r3, [r1, #8]
 8003c42:	4617      	mov	r7, r2
 8003c44:	1e5a      	subs	r2, r3, #1
 8003c46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003c4a:	bf82      	ittt	hi
 8003c4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003c50:	eb03 0b05 	addhi.w	fp, r3, r5
 8003c54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003c58:	460a      	mov	r2, r1
 8003c5a:	f04f 0500 	mov.w	r5, #0
 8003c5e:	bf88      	it	hi
 8003c60:	608b      	strhi	r3, [r1, #8]
 8003c62:	680b      	ldr	r3, [r1, #0]
 8003c64:	4680      	mov	r8, r0
 8003c66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003c6a:	f842 3b1c 	str.w	r3, [r2], #28
 8003c6e:	460c      	mov	r4, r1
 8003c70:	bf98      	it	ls
 8003c72:	f04f 0b00 	movls.w	fp, #0
 8003c76:	4616      	mov	r6, r2
 8003c78:	46aa      	mov	sl, r5
 8003c7a:	46a9      	mov	r9, r5
 8003c7c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003c80:	9201      	str	r2, [sp, #4]
 8003c82:	9502      	str	r5, [sp, #8]
 8003c84:	68a2      	ldr	r2, [r4, #8]
 8003c86:	b152      	cbz	r2, 8003c9e <_scanf_float+0x66>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b4e      	cmp	r3, #78	@ 0x4e
 8003c8e:	d865      	bhi.n	8003d5c <_scanf_float+0x124>
 8003c90:	2b40      	cmp	r3, #64	@ 0x40
 8003c92:	d83d      	bhi.n	8003d10 <_scanf_float+0xd8>
 8003c94:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003c98:	b2c8      	uxtb	r0, r1
 8003c9a:	280e      	cmp	r0, #14
 8003c9c:	d93b      	bls.n	8003d16 <_scanf_float+0xde>
 8003c9e:	f1b9 0f00 	cmp.w	r9, #0
 8003ca2:	d003      	beq.n	8003cac <_scanf_float+0x74>
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003caa:	6023      	str	r3, [r4, #0]
 8003cac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cb0:	f1ba 0f01 	cmp.w	sl, #1
 8003cb4:	f200 8118 	bhi.w	8003ee8 <_scanf_float+0x2b0>
 8003cb8:	9b01      	ldr	r3, [sp, #4]
 8003cba:	429e      	cmp	r6, r3
 8003cbc:	f200 8109 	bhi.w	8003ed2 <_scanf_float+0x29a>
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	b007      	add	sp, #28
 8003cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003ccc:	2a0d      	cmp	r2, #13
 8003cce:	d8e6      	bhi.n	8003c9e <_scanf_float+0x66>
 8003cd0:	a101      	add	r1, pc, #4	@ (adr r1, 8003cd8 <_scanf_float+0xa0>)
 8003cd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003e1f 	.word	0x08003e1f
 8003cdc:	08003c9f 	.word	0x08003c9f
 8003ce0:	08003c9f 	.word	0x08003c9f
 8003ce4:	08003c9f 	.word	0x08003c9f
 8003ce8:	08003e7f 	.word	0x08003e7f
 8003cec:	08003e57 	.word	0x08003e57
 8003cf0:	08003c9f 	.word	0x08003c9f
 8003cf4:	08003c9f 	.word	0x08003c9f
 8003cf8:	08003e2d 	.word	0x08003e2d
 8003cfc:	08003c9f 	.word	0x08003c9f
 8003d00:	08003c9f 	.word	0x08003c9f
 8003d04:	08003c9f 	.word	0x08003c9f
 8003d08:	08003c9f 	.word	0x08003c9f
 8003d0c:	08003de5 	.word	0x08003de5
 8003d10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003d14:	e7da      	b.n	8003ccc <_scanf_float+0x94>
 8003d16:	290e      	cmp	r1, #14
 8003d18:	d8c1      	bhi.n	8003c9e <_scanf_float+0x66>
 8003d1a:	a001      	add	r0, pc, #4	@ (adr r0, 8003d20 <_scanf_float+0xe8>)
 8003d1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003d20:	08003dd5 	.word	0x08003dd5
 8003d24:	08003c9f 	.word	0x08003c9f
 8003d28:	08003dd5 	.word	0x08003dd5
 8003d2c:	08003e6b 	.word	0x08003e6b
 8003d30:	08003c9f 	.word	0x08003c9f
 8003d34:	08003d7d 	.word	0x08003d7d
 8003d38:	08003dbb 	.word	0x08003dbb
 8003d3c:	08003dbb 	.word	0x08003dbb
 8003d40:	08003dbb 	.word	0x08003dbb
 8003d44:	08003dbb 	.word	0x08003dbb
 8003d48:	08003dbb 	.word	0x08003dbb
 8003d4c:	08003dbb 	.word	0x08003dbb
 8003d50:	08003dbb 	.word	0x08003dbb
 8003d54:	08003dbb 	.word	0x08003dbb
 8003d58:	08003dbb 	.word	0x08003dbb
 8003d5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8003d5e:	d809      	bhi.n	8003d74 <_scanf_float+0x13c>
 8003d60:	2b60      	cmp	r3, #96	@ 0x60
 8003d62:	d8b1      	bhi.n	8003cc8 <_scanf_float+0x90>
 8003d64:	2b54      	cmp	r3, #84	@ 0x54
 8003d66:	d07b      	beq.n	8003e60 <_scanf_float+0x228>
 8003d68:	2b59      	cmp	r3, #89	@ 0x59
 8003d6a:	d198      	bne.n	8003c9e <_scanf_float+0x66>
 8003d6c:	2d07      	cmp	r5, #7
 8003d6e:	d196      	bne.n	8003c9e <_scanf_float+0x66>
 8003d70:	2508      	movs	r5, #8
 8003d72:	e02c      	b.n	8003dce <_scanf_float+0x196>
 8003d74:	2b74      	cmp	r3, #116	@ 0x74
 8003d76:	d073      	beq.n	8003e60 <_scanf_float+0x228>
 8003d78:	2b79      	cmp	r3, #121	@ 0x79
 8003d7a:	e7f6      	b.n	8003d6a <_scanf_float+0x132>
 8003d7c:	6821      	ldr	r1, [r4, #0]
 8003d7e:	05c8      	lsls	r0, r1, #23
 8003d80:	d51b      	bpl.n	8003dba <_scanf_float+0x182>
 8003d82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003d86:	6021      	str	r1, [r4, #0]
 8003d88:	f109 0901 	add.w	r9, r9, #1
 8003d8c:	f1bb 0f00 	cmp.w	fp, #0
 8003d90:	d003      	beq.n	8003d9a <_scanf_float+0x162>
 8003d92:	3201      	adds	r2, #1
 8003d94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003d98:	60a2      	str	r2, [r4, #8]
 8003d9a:	68a3      	ldr	r3, [r4, #8]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	60a3      	str	r3, [r4, #8]
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	3301      	adds	r3, #1
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	f340 8087 	ble.w	8003ec0 <_scanf_float+0x288>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	e764      	b.n	8003c84 <_scanf_float+0x4c>
 8003dba:	eb1a 0105 	adds.w	r1, sl, r5
 8003dbe:	f47f af6e 	bne.w	8003c9e <_scanf_float+0x66>
 8003dc2:	460d      	mov	r5, r1
 8003dc4:	468a      	mov	sl, r1
 8003dc6:	6822      	ldr	r2, [r4, #0]
 8003dc8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003dcc:	6022      	str	r2, [r4, #0]
 8003dce:	f806 3b01 	strb.w	r3, [r6], #1
 8003dd2:	e7e2      	b.n	8003d9a <_scanf_float+0x162>
 8003dd4:	6822      	ldr	r2, [r4, #0]
 8003dd6:	0610      	lsls	r0, r2, #24
 8003dd8:	f57f af61 	bpl.w	8003c9e <_scanf_float+0x66>
 8003ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003de0:	6022      	str	r2, [r4, #0]
 8003de2:	e7f4      	b.n	8003dce <_scanf_float+0x196>
 8003de4:	f1ba 0f00 	cmp.w	sl, #0
 8003de8:	d10e      	bne.n	8003e08 <_scanf_float+0x1d0>
 8003dea:	f1b9 0f00 	cmp.w	r9, #0
 8003dee:	d10e      	bne.n	8003e0e <_scanf_float+0x1d6>
 8003df0:	6822      	ldr	r2, [r4, #0]
 8003df2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003df6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003dfa:	d108      	bne.n	8003e0e <_scanf_float+0x1d6>
 8003dfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003e00:	f04f 0a01 	mov.w	sl, #1
 8003e04:	6022      	str	r2, [r4, #0]
 8003e06:	e7e2      	b.n	8003dce <_scanf_float+0x196>
 8003e08:	f1ba 0f02 	cmp.w	sl, #2
 8003e0c:	d055      	beq.n	8003eba <_scanf_float+0x282>
 8003e0e:	2d01      	cmp	r5, #1
 8003e10:	d002      	beq.n	8003e18 <_scanf_float+0x1e0>
 8003e12:	2d04      	cmp	r5, #4
 8003e14:	f47f af43 	bne.w	8003c9e <_scanf_float+0x66>
 8003e18:	3501      	adds	r5, #1
 8003e1a:	b2ed      	uxtb	r5, r5
 8003e1c:	e7d7      	b.n	8003dce <_scanf_float+0x196>
 8003e1e:	f1ba 0f01 	cmp.w	sl, #1
 8003e22:	f47f af3c 	bne.w	8003c9e <_scanf_float+0x66>
 8003e26:	f04f 0a02 	mov.w	sl, #2
 8003e2a:	e7d0      	b.n	8003dce <_scanf_float+0x196>
 8003e2c:	b97d      	cbnz	r5, 8003e4e <_scanf_float+0x216>
 8003e2e:	f1b9 0f00 	cmp.w	r9, #0
 8003e32:	f47f af37 	bne.w	8003ca4 <_scanf_float+0x6c>
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003e3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003e40:	f040 8103 	bne.w	800404a <_scanf_float+0x412>
 8003e44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003e48:	2501      	movs	r5, #1
 8003e4a:	6022      	str	r2, [r4, #0]
 8003e4c:	e7bf      	b.n	8003dce <_scanf_float+0x196>
 8003e4e:	2d03      	cmp	r5, #3
 8003e50:	d0e2      	beq.n	8003e18 <_scanf_float+0x1e0>
 8003e52:	2d05      	cmp	r5, #5
 8003e54:	e7de      	b.n	8003e14 <_scanf_float+0x1dc>
 8003e56:	2d02      	cmp	r5, #2
 8003e58:	f47f af21 	bne.w	8003c9e <_scanf_float+0x66>
 8003e5c:	2503      	movs	r5, #3
 8003e5e:	e7b6      	b.n	8003dce <_scanf_float+0x196>
 8003e60:	2d06      	cmp	r5, #6
 8003e62:	f47f af1c 	bne.w	8003c9e <_scanf_float+0x66>
 8003e66:	2507      	movs	r5, #7
 8003e68:	e7b1      	b.n	8003dce <_scanf_float+0x196>
 8003e6a:	6822      	ldr	r2, [r4, #0]
 8003e6c:	0591      	lsls	r1, r2, #22
 8003e6e:	f57f af16 	bpl.w	8003c9e <_scanf_float+0x66>
 8003e72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003e76:	6022      	str	r2, [r4, #0]
 8003e78:	f8cd 9008 	str.w	r9, [sp, #8]
 8003e7c:	e7a7      	b.n	8003dce <_scanf_float+0x196>
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003e84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003e88:	d006      	beq.n	8003e98 <_scanf_float+0x260>
 8003e8a:	0550      	lsls	r0, r2, #21
 8003e8c:	f57f af07 	bpl.w	8003c9e <_scanf_float+0x66>
 8003e90:	f1b9 0f00 	cmp.w	r9, #0
 8003e94:	f000 80d9 	beq.w	800404a <_scanf_float+0x412>
 8003e98:	0591      	lsls	r1, r2, #22
 8003e9a:	bf58      	it	pl
 8003e9c:	9902      	ldrpl	r1, [sp, #8]
 8003e9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003ea2:	bf58      	it	pl
 8003ea4:	eba9 0101 	subpl.w	r1, r9, r1
 8003ea8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003eac:	f04f 0900 	mov.w	r9, #0
 8003eb0:	bf58      	it	pl
 8003eb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003eb6:	6022      	str	r2, [r4, #0]
 8003eb8:	e789      	b.n	8003dce <_scanf_float+0x196>
 8003eba:	f04f 0a03 	mov.w	sl, #3
 8003ebe:	e786      	b.n	8003dce <_scanf_float+0x196>
 8003ec0:	4639      	mov	r1, r7
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003ec8:	4798      	blx	r3
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	f43f aeda 	beq.w	8003c84 <_scanf_float+0x4c>
 8003ed0:	e6e5      	b.n	8003c9e <_scanf_float+0x66>
 8003ed2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003ed6:	463a      	mov	r2, r7
 8003ed8:	4640      	mov	r0, r8
 8003eda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ede:	4798      	blx	r3
 8003ee0:	6923      	ldr	r3, [r4, #16]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	6123      	str	r3, [r4, #16]
 8003ee6:	e6e7      	b.n	8003cb8 <_scanf_float+0x80>
 8003ee8:	1e6b      	subs	r3, r5, #1
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d824      	bhi.n	8003f38 <_scanf_float+0x300>
 8003eee:	2d02      	cmp	r5, #2
 8003ef0:	d836      	bhi.n	8003f60 <_scanf_float+0x328>
 8003ef2:	9b01      	ldr	r3, [sp, #4]
 8003ef4:	429e      	cmp	r6, r3
 8003ef6:	f67f aee3 	bls.w	8003cc0 <_scanf_float+0x88>
 8003efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003efe:	463a      	mov	r2, r7
 8003f00:	4640      	mov	r0, r8
 8003f02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f06:	4798      	blx	r3
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6123      	str	r3, [r4, #16]
 8003f0e:	e7f0      	b.n	8003ef2 <_scanf_float+0x2ba>
 8003f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f14:	463a      	mov	r2, r7
 8003f16:	4640      	mov	r0, r8
 8003f18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003f1c:	4798      	blx	r3
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	6123      	str	r3, [r4, #16]
 8003f24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f28:	fa5f fa8a 	uxtb.w	sl, sl
 8003f2c:	f1ba 0f02 	cmp.w	sl, #2
 8003f30:	d1ee      	bne.n	8003f10 <_scanf_float+0x2d8>
 8003f32:	3d03      	subs	r5, #3
 8003f34:	b2ed      	uxtb	r5, r5
 8003f36:	1b76      	subs	r6, r6, r5
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	05da      	lsls	r2, r3, #23
 8003f3c:	d530      	bpl.n	8003fa0 <_scanf_float+0x368>
 8003f3e:	055b      	lsls	r3, r3, #21
 8003f40:	d511      	bpl.n	8003f66 <_scanf_float+0x32e>
 8003f42:	9b01      	ldr	r3, [sp, #4]
 8003f44:	429e      	cmp	r6, r3
 8003f46:	f67f aebb 	bls.w	8003cc0 <_scanf_float+0x88>
 8003f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f4e:	463a      	mov	r2, r7
 8003f50:	4640      	mov	r0, r8
 8003f52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f56:	4798      	blx	r3
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	e7f0      	b.n	8003f42 <_scanf_float+0x30a>
 8003f60:	46aa      	mov	sl, r5
 8003f62:	46b3      	mov	fp, r6
 8003f64:	e7de      	b.n	8003f24 <_scanf_float+0x2ec>
 8003f66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003f6a:	6923      	ldr	r3, [r4, #16]
 8003f6c:	2965      	cmp	r1, #101	@ 0x65
 8003f6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f72:	f106 35ff 	add.w	r5, r6, #4294967295
 8003f76:	6123      	str	r3, [r4, #16]
 8003f78:	d00c      	beq.n	8003f94 <_scanf_float+0x35c>
 8003f7a:	2945      	cmp	r1, #69	@ 0x45
 8003f7c:	d00a      	beq.n	8003f94 <_scanf_float+0x35c>
 8003f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f82:	463a      	mov	r2, r7
 8003f84:	4640      	mov	r0, r8
 8003f86:	4798      	blx	r3
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	1eb5      	subs	r5, r6, #2
 8003f92:	6123      	str	r3, [r4, #16]
 8003f94:	463a      	mov	r2, r7
 8003f96:	4640      	mov	r0, r8
 8003f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f9c:	4798      	blx	r3
 8003f9e:	462e      	mov	r6, r5
 8003fa0:	6822      	ldr	r2, [r4, #0]
 8003fa2:	f012 0210 	ands.w	r2, r2, #16
 8003fa6:	d001      	beq.n	8003fac <_scanf_float+0x374>
 8003fa8:	2000      	movs	r0, #0
 8003faa:	e68a      	b.n	8003cc2 <_scanf_float+0x8a>
 8003fac:	7032      	strb	r2, [r6, #0]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb8:	d11c      	bne.n	8003ff4 <_scanf_float+0x3bc>
 8003fba:	9b02      	ldr	r3, [sp, #8]
 8003fbc:	454b      	cmp	r3, r9
 8003fbe:	eba3 0209 	sub.w	r2, r3, r9
 8003fc2:	d123      	bne.n	800400c <_scanf_float+0x3d4>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	9901      	ldr	r1, [sp, #4]
 8003fca:	f002 fbed 	bl	80067a8 <_strtod_r>
 8003fce:	9b03      	ldr	r3, [sp, #12]
 8003fd0:	6825      	ldr	r5, [r4, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f015 0f02 	tst.w	r5, #2
 8003fd8:	4606      	mov	r6, r0
 8003fda:	460f      	mov	r7, r1
 8003fdc:	f103 0204 	add.w	r2, r3, #4
 8003fe0:	d01f      	beq.n	8004022 <_scanf_float+0x3ea>
 8003fe2:	9903      	ldr	r1, [sp, #12]
 8003fe4:	600a      	str	r2, [r1, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	e9c3 6700 	strd	r6, r7, [r3]
 8003fec:	68e3      	ldr	r3, [r4, #12]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60e3      	str	r3, [r4, #12]
 8003ff2:	e7d9      	b.n	8003fa8 <_scanf_float+0x370>
 8003ff4:	9b04      	ldr	r3, [sp, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0e4      	beq.n	8003fc4 <_scanf_float+0x38c>
 8003ffa:	9905      	ldr	r1, [sp, #20]
 8003ffc:	230a      	movs	r3, #10
 8003ffe:	4640      	mov	r0, r8
 8004000:	3101      	adds	r1, #1
 8004002:	f002 fc51 	bl	80068a8 <_strtol_r>
 8004006:	9b04      	ldr	r3, [sp, #16]
 8004008:	9e05      	ldr	r6, [sp, #20]
 800400a:	1ac2      	subs	r2, r0, r3
 800400c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004010:	429e      	cmp	r6, r3
 8004012:	bf28      	it	cs
 8004014:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004018:	4630      	mov	r0, r6
 800401a:	490d      	ldr	r1, [pc, #52]	@ (8004050 <_scanf_float+0x418>)
 800401c:	f000 f8de 	bl	80041dc <siprintf>
 8004020:	e7d0      	b.n	8003fc4 <_scanf_float+0x38c>
 8004022:	076d      	lsls	r5, r5, #29
 8004024:	d4dd      	bmi.n	8003fe2 <_scanf_float+0x3aa>
 8004026:	9d03      	ldr	r5, [sp, #12]
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	681d      	ldr	r5, [r3, #0]
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	f7fc fcec 	bl	8000a0c <__aeabi_dcmpun>
 8004034:	b120      	cbz	r0, 8004040 <_scanf_float+0x408>
 8004036:	4807      	ldr	r0, [pc, #28]	@ (8004054 <_scanf_float+0x41c>)
 8004038:	f000 f9c2 	bl	80043c0 <nanf>
 800403c:	6028      	str	r0, [r5, #0]
 800403e:	e7d5      	b.n	8003fec <_scanf_float+0x3b4>
 8004040:	4630      	mov	r0, r6
 8004042:	4639      	mov	r1, r7
 8004044:	f7fc fd40 	bl	8000ac8 <__aeabi_d2f>
 8004048:	e7f8      	b.n	800403c <_scanf_float+0x404>
 800404a:	f04f 0900 	mov.w	r9, #0
 800404e:	e62d      	b.n	8003cac <_scanf_float+0x74>
 8004050:	08007ada 	.word	0x08007ada
 8004054:	08007e75 	.word	0x08007e75

08004058 <std>:
 8004058:	2300      	movs	r3, #0
 800405a:	b510      	push	{r4, lr}
 800405c:	4604      	mov	r4, r0
 800405e:	e9c0 3300 	strd	r3, r3, [r0]
 8004062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004066:	6083      	str	r3, [r0, #8]
 8004068:	8181      	strh	r1, [r0, #12]
 800406a:	6643      	str	r3, [r0, #100]	@ 0x64
 800406c:	81c2      	strh	r2, [r0, #14]
 800406e:	6183      	str	r3, [r0, #24]
 8004070:	4619      	mov	r1, r3
 8004072:	2208      	movs	r2, #8
 8004074:	305c      	adds	r0, #92	@ 0x5c
 8004076:	f000 f914 	bl	80042a2 <memset>
 800407a:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <std+0x58>)
 800407c:	6224      	str	r4, [r4, #32]
 800407e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004080:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <std+0x5c>)
 8004082:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004084:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <std+0x60>)
 8004086:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <std+0x64>)
 800408a:	6323      	str	r3, [r4, #48]	@ 0x30
 800408c:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <std+0x68>)
 800408e:	429c      	cmp	r4, r3
 8004090:	d006      	beq.n	80040a0 <std+0x48>
 8004092:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004096:	4294      	cmp	r4, r2
 8004098:	d002      	beq.n	80040a0 <std+0x48>
 800409a:	33d0      	adds	r3, #208	@ 0xd0
 800409c:	429c      	cmp	r4, r3
 800409e:	d105      	bne.n	80040ac <std+0x54>
 80040a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040a8:	f000 b978 	b.w	800439c <__retarget_lock_init_recursive>
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	bf00      	nop
 80040b0:	0800421d 	.word	0x0800421d
 80040b4:	0800423f 	.word	0x0800423f
 80040b8:	08004277 	.word	0x08004277
 80040bc:	0800429b 	.word	0x0800429b
 80040c0:	200002d8 	.word	0x200002d8

080040c4 <stdio_exit_handler>:
 80040c4:	4a02      	ldr	r2, [pc, #8]	@ (80040d0 <stdio_exit_handler+0xc>)
 80040c6:	4903      	ldr	r1, [pc, #12]	@ (80040d4 <stdio_exit_handler+0x10>)
 80040c8:	4803      	ldr	r0, [pc, #12]	@ (80040d8 <stdio_exit_handler+0x14>)
 80040ca:	f000 b869 	b.w	80041a0 <_fwalk_sglue>
 80040ce:	bf00      	nop
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	08006c5d 	.word	0x08006c5d
 80040d8:	2000001c 	.word	0x2000001c

080040dc <cleanup_stdio>:
 80040dc:	6841      	ldr	r1, [r0, #4]
 80040de:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <cleanup_stdio+0x34>)
 80040e0:	b510      	push	{r4, lr}
 80040e2:	4299      	cmp	r1, r3
 80040e4:	4604      	mov	r4, r0
 80040e6:	d001      	beq.n	80040ec <cleanup_stdio+0x10>
 80040e8:	f002 fdb8 	bl	8006c5c <_fflush_r>
 80040ec:	68a1      	ldr	r1, [r4, #8]
 80040ee:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <cleanup_stdio+0x38>)
 80040f0:	4299      	cmp	r1, r3
 80040f2:	d002      	beq.n	80040fa <cleanup_stdio+0x1e>
 80040f4:	4620      	mov	r0, r4
 80040f6:	f002 fdb1 	bl	8006c5c <_fflush_r>
 80040fa:	68e1      	ldr	r1, [r4, #12]
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <cleanup_stdio+0x3c>)
 80040fe:	4299      	cmp	r1, r3
 8004100:	d004      	beq.n	800410c <cleanup_stdio+0x30>
 8004102:	4620      	mov	r0, r4
 8004104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004108:	f002 bda8 	b.w	8006c5c <_fflush_r>
 800410c:	bd10      	pop	{r4, pc}
 800410e:	bf00      	nop
 8004110:	200002d8 	.word	0x200002d8
 8004114:	20000340 	.word	0x20000340
 8004118:	200003a8 	.word	0x200003a8

0800411c <global_stdio_init.part.0>:
 800411c:	b510      	push	{r4, lr}
 800411e:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <global_stdio_init.part.0+0x30>)
 8004120:	4c0b      	ldr	r4, [pc, #44]	@ (8004150 <global_stdio_init.part.0+0x34>)
 8004122:	4a0c      	ldr	r2, [pc, #48]	@ (8004154 <global_stdio_init.part.0+0x38>)
 8004124:	4620      	mov	r0, r4
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	2104      	movs	r1, #4
 800412a:	2200      	movs	r2, #0
 800412c:	f7ff ff94 	bl	8004058 <std>
 8004130:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004134:	2201      	movs	r2, #1
 8004136:	2109      	movs	r1, #9
 8004138:	f7ff ff8e 	bl	8004058 <std>
 800413c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004140:	2202      	movs	r2, #2
 8004142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004146:	2112      	movs	r1, #18
 8004148:	f7ff bf86 	b.w	8004058 <std>
 800414c:	20000410 	.word	0x20000410
 8004150:	200002d8 	.word	0x200002d8
 8004154:	080040c5 	.word	0x080040c5

08004158 <__sfp_lock_acquire>:
 8004158:	4801      	ldr	r0, [pc, #4]	@ (8004160 <__sfp_lock_acquire+0x8>)
 800415a:	f000 b920 	b.w	800439e <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	20000419 	.word	0x20000419

08004164 <__sfp_lock_release>:
 8004164:	4801      	ldr	r0, [pc, #4]	@ (800416c <__sfp_lock_release+0x8>)
 8004166:	f000 b91b 	b.w	80043a0 <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	20000419 	.word	0x20000419

08004170 <__sinit>:
 8004170:	b510      	push	{r4, lr}
 8004172:	4604      	mov	r4, r0
 8004174:	f7ff fff0 	bl	8004158 <__sfp_lock_acquire>
 8004178:	6a23      	ldr	r3, [r4, #32]
 800417a:	b11b      	cbz	r3, 8004184 <__sinit+0x14>
 800417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004180:	f7ff bff0 	b.w	8004164 <__sfp_lock_release>
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <__sinit+0x28>)
 8004186:	6223      	str	r3, [r4, #32]
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <__sinit+0x2c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f5      	bne.n	800417c <__sinit+0xc>
 8004190:	f7ff ffc4 	bl	800411c <global_stdio_init.part.0>
 8004194:	e7f2      	b.n	800417c <__sinit+0xc>
 8004196:	bf00      	nop
 8004198:	080040dd 	.word	0x080040dd
 800419c:	20000410 	.word	0x20000410

080041a0 <_fwalk_sglue>:
 80041a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a4:	4607      	mov	r7, r0
 80041a6:	4688      	mov	r8, r1
 80041a8:	4614      	mov	r4, r2
 80041aa:	2600      	movs	r6, #0
 80041ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041b0:	f1b9 0901 	subs.w	r9, r9, #1
 80041b4:	d505      	bpl.n	80041c2 <_fwalk_sglue+0x22>
 80041b6:	6824      	ldr	r4, [r4, #0]
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d1f7      	bne.n	80041ac <_fwalk_sglue+0xc>
 80041bc:	4630      	mov	r0, r6
 80041be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d907      	bls.n	80041d8 <_fwalk_sglue+0x38>
 80041c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041cc:	3301      	adds	r3, #1
 80041ce:	d003      	beq.n	80041d8 <_fwalk_sglue+0x38>
 80041d0:	4629      	mov	r1, r5
 80041d2:	4638      	mov	r0, r7
 80041d4:	47c0      	blx	r8
 80041d6:	4306      	orrs	r6, r0
 80041d8:	3568      	adds	r5, #104	@ 0x68
 80041da:	e7e9      	b.n	80041b0 <_fwalk_sglue+0x10>

080041dc <siprintf>:
 80041dc:	b40e      	push	{r1, r2, r3}
 80041de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041e2:	b500      	push	{lr}
 80041e4:	b09c      	sub	sp, #112	@ 0x70
 80041e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80041e8:	9002      	str	r0, [sp, #8]
 80041ea:	9006      	str	r0, [sp, #24]
 80041ec:	9107      	str	r1, [sp, #28]
 80041ee:	9104      	str	r1, [sp, #16]
 80041f0:	4808      	ldr	r0, [pc, #32]	@ (8004214 <siprintf+0x38>)
 80041f2:	4909      	ldr	r1, [pc, #36]	@ (8004218 <siprintf+0x3c>)
 80041f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041f8:	9105      	str	r1, [sp, #20]
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	a902      	add	r1, sp, #8
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	f002 fbb0 	bl	8006964 <_svfiprintf_r>
 8004204:	2200      	movs	r2, #0
 8004206:	9b02      	ldr	r3, [sp, #8]
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	b01c      	add	sp, #112	@ 0x70
 800420c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004210:	b003      	add	sp, #12
 8004212:	4770      	bx	lr
 8004214:	20000018 	.word	0x20000018
 8004218:	ffff0208 	.word	0xffff0208

0800421c <__sread>:
 800421c:	b510      	push	{r4, lr}
 800421e:	460c      	mov	r4, r1
 8004220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004224:	f000 f86c 	bl	8004300 <_read_r>
 8004228:	2800      	cmp	r0, #0
 800422a:	bfab      	itete	ge
 800422c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800422e:	89a3      	ldrhlt	r3, [r4, #12]
 8004230:	181b      	addge	r3, r3, r0
 8004232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004236:	bfac      	ite	ge
 8004238:	6563      	strge	r3, [r4, #84]	@ 0x54
 800423a:	81a3      	strhlt	r3, [r4, #12]
 800423c:	bd10      	pop	{r4, pc}

0800423e <__swrite>:
 800423e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004242:	461f      	mov	r7, r3
 8004244:	898b      	ldrh	r3, [r1, #12]
 8004246:	4605      	mov	r5, r0
 8004248:	05db      	lsls	r3, r3, #23
 800424a:	460c      	mov	r4, r1
 800424c:	4616      	mov	r6, r2
 800424e:	d505      	bpl.n	800425c <__swrite+0x1e>
 8004250:	2302      	movs	r3, #2
 8004252:	2200      	movs	r2, #0
 8004254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004258:	f000 f840 	bl	80042dc <_lseek_r>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	4632      	mov	r2, r6
 8004260:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004264:	81a3      	strh	r3, [r4, #12]
 8004266:	4628      	mov	r0, r5
 8004268:	463b      	mov	r3, r7
 800426a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800426e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004272:	f000 b857 	b.w	8004324 <_write_r>

08004276 <__sseek>:
 8004276:	b510      	push	{r4, lr}
 8004278:	460c      	mov	r4, r1
 800427a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800427e:	f000 f82d 	bl	80042dc <_lseek_r>
 8004282:	1c43      	adds	r3, r0, #1
 8004284:	89a3      	ldrh	r3, [r4, #12]
 8004286:	bf15      	itete	ne
 8004288:	6560      	strne	r0, [r4, #84]	@ 0x54
 800428a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800428e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004292:	81a3      	strheq	r3, [r4, #12]
 8004294:	bf18      	it	ne
 8004296:	81a3      	strhne	r3, [r4, #12]
 8004298:	bd10      	pop	{r4, pc}

0800429a <__sclose>:
 800429a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429e:	f000 b80d 	b.w	80042bc <_close_r>

080042a2 <memset>:
 80042a2:	4603      	mov	r3, r0
 80042a4:	4402      	add	r2, r0
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d100      	bne.n	80042ac <memset+0xa>
 80042aa:	4770      	bx	lr
 80042ac:	f803 1b01 	strb.w	r1, [r3], #1
 80042b0:	e7f9      	b.n	80042a6 <memset+0x4>
	...

080042b4 <_localeconv_r>:
 80042b4:	4800      	ldr	r0, [pc, #0]	@ (80042b8 <_localeconv_r+0x4>)
 80042b6:	4770      	bx	lr
 80042b8:	20000158 	.word	0x20000158

080042bc <_close_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	2300      	movs	r3, #0
 80042c0:	4d05      	ldr	r5, [pc, #20]	@ (80042d8 <_close_r+0x1c>)
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	f7fd f95d 	bl	8001586 <_close>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_close_r+0x1a>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_close_r+0x1a>
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	20000414 	.word	0x20000414

080042dc <_lseek_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4604      	mov	r4, r0
 80042e0:	4608      	mov	r0, r1
 80042e2:	4611      	mov	r1, r2
 80042e4:	2200      	movs	r2, #0
 80042e6:	4d05      	ldr	r5, [pc, #20]	@ (80042fc <_lseek_r+0x20>)
 80042e8:	602a      	str	r2, [r5, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f7fd f96f 	bl	80015ce <_lseek>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_lseek_r+0x1e>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_lseek_r+0x1e>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	20000414 	.word	0x20000414

08004300 <_read_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4604      	mov	r4, r0
 8004304:	4608      	mov	r0, r1
 8004306:	4611      	mov	r1, r2
 8004308:	2200      	movs	r2, #0
 800430a:	4d05      	ldr	r5, [pc, #20]	@ (8004320 <_read_r+0x20>)
 800430c:	602a      	str	r2, [r5, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	f7fd f900 	bl	8001514 <_read>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	d102      	bne.n	800431e <_read_r+0x1e>
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	b103      	cbz	r3, 800431e <_read_r+0x1e>
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	bd38      	pop	{r3, r4, r5, pc}
 8004320:	20000414 	.word	0x20000414

08004324 <_write_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4604      	mov	r4, r0
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	2200      	movs	r2, #0
 800432e:	4d05      	ldr	r5, [pc, #20]	@ (8004344 <_write_r+0x20>)
 8004330:	602a      	str	r2, [r5, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	f7fd f90b 	bl	800154e <_write>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	d102      	bne.n	8004342 <_write_r+0x1e>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	b103      	cbz	r3, 8004342 <_write_r+0x1e>
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	bd38      	pop	{r3, r4, r5, pc}
 8004344:	20000414 	.word	0x20000414

08004348 <__errno>:
 8004348:	4b01      	ldr	r3, [pc, #4]	@ (8004350 <__errno+0x8>)
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20000018 	.word	0x20000018

08004354 <__libc_init_array>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	2600      	movs	r6, #0
 8004358:	4d0c      	ldr	r5, [pc, #48]	@ (800438c <__libc_init_array+0x38>)
 800435a:	4c0d      	ldr	r4, [pc, #52]	@ (8004390 <__libc_init_array+0x3c>)
 800435c:	1b64      	subs	r4, r4, r5
 800435e:	10a4      	asrs	r4, r4, #2
 8004360:	42a6      	cmp	r6, r4
 8004362:	d109      	bne.n	8004378 <__libc_init_array+0x24>
 8004364:	f003 fb66 	bl	8007a34 <_init>
 8004368:	2600      	movs	r6, #0
 800436a:	4d0a      	ldr	r5, [pc, #40]	@ (8004394 <__libc_init_array+0x40>)
 800436c:	4c0a      	ldr	r4, [pc, #40]	@ (8004398 <__libc_init_array+0x44>)
 800436e:	1b64      	subs	r4, r4, r5
 8004370:	10a4      	asrs	r4, r4, #2
 8004372:	42a6      	cmp	r6, r4
 8004374:	d105      	bne.n	8004382 <__libc_init_array+0x2e>
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	f855 3b04 	ldr.w	r3, [r5], #4
 800437c:	4798      	blx	r3
 800437e:	3601      	adds	r6, #1
 8004380:	e7ee      	b.n	8004360 <__libc_init_array+0xc>
 8004382:	f855 3b04 	ldr.w	r3, [r5], #4
 8004386:	4798      	blx	r3
 8004388:	3601      	adds	r6, #1
 800438a:	e7f2      	b.n	8004372 <__libc_init_array+0x1e>
 800438c:	08007ee0 	.word	0x08007ee0
 8004390:	08007ee0 	.word	0x08007ee0
 8004394:	08007ee0 	.word	0x08007ee0
 8004398:	08007ee4 	.word	0x08007ee4

0800439c <__retarget_lock_init_recursive>:
 800439c:	4770      	bx	lr

0800439e <__retarget_lock_acquire_recursive>:
 800439e:	4770      	bx	lr

080043a0 <__retarget_lock_release_recursive>:
 80043a0:	4770      	bx	lr

080043a2 <memchr>:
 80043a2:	4603      	mov	r3, r0
 80043a4:	b510      	push	{r4, lr}
 80043a6:	b2c9      	uxtb	r1, r1
 80043a8:	4402      	add	r2, r0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	d101      	bne.n	80043b4 <memchr+0x12>
 80043b0:	2000      	movs	r0, #0
 80043b2:	e003      	b.n	80043bc <memchr+0x1a>
 80043b4:	7804      	ldrb	r4, [r0, #0]
 80043b6:	3301      	adds	r3, #1
 80043b8:	428c      	cmp	r4, r1
 80043ba:	d1f6      	bne.n	80043aa <memchr+0x8>
 80043bc:	bd10      	pop	{r4, pc}
	...

080043c0 <nanf>:
 80043c0:	4800      	ldr	r0, [pc, #0]	@ (80043c4 <nanf+0x4>)
 80043c2:	4770      	bx	lr
 80043c4:	7fc00000 	.word	0x7fc00000

080043c8 <quorem>:
 80043c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	6903      	ldr	r3, [r0, #16]
 80043ce:	690c      	ldr	r4, [r1, #16]
 80043d0:	4607      	mov	r7, r0
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	db7e      	blt.n	80044d4 <quorem+0x10c>
 80043d6:	3c01      	subs	r4, #1
 80043d8:	00a3      	lsls	r3, r4, #2
 80043da:	f100 0514 	add.w	r5, r0, #20
 80043de:	f101 0814 	add.w	r8, r1, #20
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043f2:	3301      	adds	r3, #1
 80043f4:	429a      	cmp	r2, r3
 80043f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80043fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043fe:	d32e      	bcc.n	800445e <quorem+0x96>
 8004400:	f04f 0a00 	mov.w	sl, #0
 8004404:	46c4      	mov	ip, r8
 8004406:	46ae      	mov	lr, r5
 8004408:	46d3      	mov	fp, sl
 800440a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800440e:	b298      	uxth	r0, r3
 8004410:	fb06 a000 	mla	r0, r6, r0, sl
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	0c02      	lsrs	r2, r0, #16
 8004418:	fb06 2303 	mla	r3, r6, r3, r2
 800441c:	f8de 2000 	ldr.w	r2, [lr]
 8004420:	b280      	uxth	r0, r0
 8004422:	b292      	uxth	r2, r2
 8004424:	1a12      	subs	r2, r2, r0
 8004426:	445a      	add	r2, fp
 8004428:	f8de 0000 	ldr.w	r0, [lr]
 800442c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004430:	b29b      	uxth	r3, r3
 8004432:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004436:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800443a:	b292      	uxth	r2, r2
 800443c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004440:	45e1      	cmp	r9, ip
 8004442:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004446:	f84e 2b04 	str.w	r2, [lr], #4
 800444a:	d2de      	bcs.n	800440a <quorem+0x42>
 800444c:	9b00      	ldr	r3, [sp, #0]
 800444e:	58eb      	ldr	r3, [r5, r3]
 8004450:	b92b      	cbnz	r3, 800445e <quorem+0x96>
 8004452:	9b01      	ldr	r3, [sp, #4]
 8004454:	3b04      	subs	r3, #4
 8004456:	429d      	cmp	r5, r3
 8004458:	461a      	mov	r2, r3
 800445a:	d32f      	bcc.n	80044bc <quorem+0xf4>
 800445c:	613c      	str	r4, [r7, #16]
 800445e:	4638      	mov	r0, r7
 8004460:	f001 f9c2 	bl	80057e8 <__mcmp>
 8004464:	2800      	cmp	r0, #0
 8004466:	db25      	blt.n	80044b4 <quorem+0xec>
 8004468:	4629      	mov	r1, r5
 800446a:	2000      	movs	r0, #0
 800446c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004470:	f8d1 c000 	ldr.w	ip, [r1]
 8004474:	fa1f fe82 	uxth.w	lr, r2
 8004478:	fa1f f38c 	uxth.w	r3, ip
 800447c:	eba3 030e 	sub.w	r3, r3, lr
 8004480:	4403      	add	r3, r0
 8004482:	0c12      	lsrs	r2, r2, #16
 8004484:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004488:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800448c:	b29b      	uxth	r3, r3
 800448e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004492:	45c1      	cmp	r9, r8
 8004494:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004498:	f841 3b04 	str.w	r3, [r1], #4
 800449c:	d2e6      	bcs.n	800446c <quorem+0xa4>
 800449e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044a6:	b922      	cbnz	r2, 80044b2 <quorem+0xea>
 80044a8:	3b04      	subs	r3, #4
 80044aa:	429d      	cmp	r5, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	d30b      	bcc.n	80044c8 <quorem+0x100>
 80044b0:	613c      	str	r4, [r7, #16]
 80044b2:	3601      	adds	r6, #1
 80044b4:	4630      	mov	r0, r6
 80044b6:	b003      	add	sp, #12
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	3b04      	subs	r3, #4
 80044c0:	2a00      	cmp	r2, #0
 80044c2:	d1cb      	bne.n	800445c <quorem+0x94>
 80044c4:	3c01      	subs	r4, #1
 80044c6:	e7c6      	b.n	8004456 <quorem+0x8e>
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	3b04      	subs	r3, #4
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	d1ef      	bne.n	80044b0 <quorem+0xe8>
 80044d0:	3c01      	subs	r4, #1
 80044d2:	e7ea      	b.n	80044aa <quorem+0xe2>
 80044d4:	2000      	movs	r0, #0
 80044d6:	e7ee      	b.n	80044b6 <quorem+0xee>

080044d8 <_dtoa_r>:
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	4614      	mov	r4, r2
 80044de:	461d      	mov	r5, r3
 80044e0:	69c7      	ldr	r7, [r0, #28]
 80044e2:	b097      	sub	sp, #92	@ 0x5c
 80044e4:	4683      	mov	fp, r0
 80044e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80044ec:	b97f      	cbnz	r7, 800450e <_dtoa_r+0x36>
 80044ee:	2010      	movs	r0, #16
 80044f0:	f000 fe02 	bl	80050f8 <malloc>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f8cb 001c 	str.w	r0, [fp, #28]
 80044fa:	b920      	cbnz	r0, 8004506 <_dtoa_r+0x2e>
 80044fc:	21ef      	movs	r1, #239	@ 0xef
 80044fe:	4ba8      	ldr	r3, [pc, #672]	@ (80047a0 <_dtoa_r+0x2c8>)
 8004500:	48a8      	ldr	r0, [pc, #672]	@ (80047a4 <_dtoa_r+0x2cc>)
 8004502:	f002 fc23 	bl	8006d4c <__assert_func>
 8004506:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800450a:	6007      	str	r7, [r0, #0]
 800450c:	60c7      	str	r7, [r0, #12]
 800450e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	b159      	cbz	r1, 800452e <_dtoa_r+0x56>
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	2301      	movs	r3, #1
 800451a:	4093      	lsls	r3, r2
 800451c:	604a      	str	r2, [r1, #4]
 800451e:	608b      	str	r3, [r1, #8]
 8004520:	4658      	mov	r0, fp
 8004522:	f000 fedf 	bl	80052e4 <_Bfree>
 8004526:	2200      	movs	r2, #0
 8004528:	f8db 301c 	ldr.w	r3, [fp, #28]
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	1e2b      	subs	r3, r5, #0
 8004530:	bfaf      	iteee	ge
 8004532:	2300      	movge	r3, #0
 8004534:	2201      	movlt	r2, #1
 8004536:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800453a:	9303      	strlt	r3, [sp, #12]
 800453c:	bfa8      	it	ge
 800453e:	6033      	strge	r3, [r6, #0]
 8004540:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004544:	4b98      	ldr	r3, [pc, #608]	@ (80047a8 <_dtoa_r+0x2d0>)
 8004546:	bfb8      	it	lt
 8004548:	6032      	strlt	r2, [r6, #0]
 800454a:	ea33 0308 	bics.w	r3, r3, r8
 800454e:	d112      	bne.n	8004576 <_dtoa_r+0x9e>
 8004550:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004554:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800455c:	4323      	orrs	r3, r4
 800455e:	f000 8550 	beq.w	8005002 <_dtoa_r+0xb2a>
 8004562:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004564:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80047ac <_dtoa_r+0x2d4>
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8552 	beq.w	8005012 <_dtoa_r+0xb3a>
 800456e:	f10a 0303 	add.w	r3, sl, #3
 8004572:	f000 bd4c 	b.w	800500e <_dtoa_r+0xb36>
 8004576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800457a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800457e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004582:	2200      	movs	r2, #0
 8004584:	2300      	movs	r3, #0
 8004586:	f7fc fa0f 	bl	80009a8 <__aeabi_dcmpeq>
 800458a:	4607      	mov	r7, r0
 800458c:	b158      	cbz	r0, 80045a6 <_dtoa_r+0xce>
 800458e:	2301      	movs	r3, #1
 8004590:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004596:	b113      	cbz	r3, 800459e <_dtoa_r+0xc6>
 8004598:	4b85      	ldr	r3, [pc, #532]	@ (80047b0 <_dtoa_r+0x2d8>)
 800459a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80047b4 <_dtoa_r+0x2dc>
 80045a2:	f000 bd36 	b.w	8005012 <_dtoa_r+0xb3a>
 80045a6:	ab14      	add	r3, sp, #80	@ 0x50
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	ab15      	add	r3, sp, #84	@ 0x54
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	4658      	mov	r0, fp
 80045b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80045b4:	f001 fa30 	bl	8005a18 <__d2b>
 80045b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80045bc:	4681      	mov	r9, r0
 80045be:	2e00      	cmp	r6, #0
 80045c0:	d077      	beq.n	80046b2 <_dtoa_r+0x1da>
 80045c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80045da:	4619      	mov	r1, r3
 80045dc:	2200      	movs	r2, #0
 80045de:	4b76      	ldr	r3, [pc, #472]	@ (80047b8 <_dtoa_r+0x2e0>)
 80045e0:	f7fb fdc2 	bl	8000168 <__aeabi_dsub>
 80045e4:	a368      	add	r3, pc, #416	@ (adr r3, 8004788 <_dtoa_r+0x2b0>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f7fb ff75 	bl	80004d8 <__aeabi_dmul>
 80045ee:	a368      	add	r3, pc, #416	@ (adr r3, 8004790 <_dtoa_r+0x2b8>)
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fb fdba 	bl	800016c <__adddf3>
 80045f8:	4604      	mov	r4, r0
 80045fa:	4630      	mov	r0, r6
 80045fc:	460d      	mov	r5, r1
 80045fe:	f7fb ff01 	bl	8000404 <__aeabi_i2d>
 8004602:	a365      	add	r3, pc, #404	@ (adr r3, 8004798 <_dtoa_r+0x2c0>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fb ff66 	bl	80004d8 <__aeabi_dmul>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4620      	mov	r0, r4
 8004612:	4629      	mov	r1, r5
 8004614:	f7fb fdaa 	bl	800016c <__adddf3>
 8004618:	4604      	mov	r4, r0
 800461a:	460d      	mov	r5, r1
 800461c:	f7fc fa0c 	bl	8000a38 <__aeabi_d2iz>
 8004620:	2200      	movs	r2, #0
 8004622:	4607      	mov	r7, r0
 8004624:	2300      	movs	r3, #0
 8004626:	4620      	mov	r0, r4
 8004628:	4629      	mov	r1, r5
 800462a:	f7fc f9c7 	bl	80009bc <__aeabi_dcmplt>
 800462e:	b140      	cbz	r0, 8004642 <_dtoa_r+0x16a>
 8004630:	4638      	mov	r0, r7
 8004632:	f7fb fee7 	bl	8000404 <__aeabi_i2d>
 8004636:	4622      	mov	r2, r4
 8004638:	462b      	mov	r3, r5
 800463a:	f7fc f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800463e:	b900      	cbnz	r0, 8004642 <_dtoa_r+0x16a>
 8004640:	3f01      	subs	r7, #1
 8004642:	2f16      	cmp	r7, #22
 8004644:	d853      	bhi.n	80046ee <_dtoa_r+0x216>
 8004646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800464a:	4b5c      	ldr	r3, [pc, #368]	@ (80047bc <_dtoa_r+0x2e4>)
 800464c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fc f9b2 	bl	80009bc <__aeabi_dcmplt>
 8004658:	2800      	cmp	r0, #0
 800465a:	d04a      	beq.n	80046f2 <_dtoa_r+0x21a>
 800465c:	2300      	movs	r3, #0
 800465e:	3f01      	subs	r7, #1
 8004660:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004662:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004664:	1b9b      	subs	r3, r3, r6
 8004666:	1e5a      	subs	r2, r3, #1
 8004668:	bf46      	itte	mi
 800466a:	f1c3 0801 	rsbmi	r8, r3, #1
 800466e:	2300      	movmi	r3, #0
 8004670:	f04f 0800 	movpl.w	r8, #0
 8004674:	9209      	str	r2, [sp, #36]	@ 0x24
 8004676:	bf48      	it	mi
 8004678:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800467a:	2f00      	cmp	r7, #0
 800467c:	db3b      	blt.n	80046f6 <_dtoa_r+0x21e>
 800467e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004680:	970e      	str	r7, [sp, #56]	@ 0x38
 8004682:	443b      	add	r3, r7
 8004684:	9309      	str	r3, [sp, #36]	@ 0x24
 8004686:	2300      	movs	r3, #0
 8004688:	930a      	str	r3, [sp, #40]	@ 0x28
 800468a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800468c:	2b09      	cmp	r3, #9
 800468e:	d866      	bhi.n	800475e <_dtoa_r+0x286>
 8004690:	2b05      	cmp	r3, #5
 8004692:	bfc4      	itt	gt
 8004694:	3b04      	subgt	r3, #4
 8004696:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004698:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800469a:	bfc8      	it	gt
 800469c:	2400      	movgt	r4, #0
 800469e:	f1a3 0302 	sub.w	r3, r3, #2
 80046a2:	bfd8      	it	le
 80046a4:	2401      	movle	r4, #1
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d864      	bhi.n	8004774 <_dtoa_r+0x29c>
 80046aa:	e8df f003 	tbb	[pc, r3]
 80046ae:	382b      	.short	0x382b
 80046b0:	5636      	.short	0x5636
 80046b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80046b6:	441e      	add	r6, r3
 80046b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80046bc:	2b20      	cmp	r3, #32
 80046be:	bfc1      	itttt	gt
 80046c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80046c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80046c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80046cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046d0:	bfd6      	itet	le
 80046d2:	f1c3 0320 	rsble	r3, r3, #32
 80046d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80046da:	fa04 f003 	lslle.w	r0, r4, r3
 80046de:	f7fb fe81 	bl	80003e4 <__aeabi_ui2d>
 80046e2:	2201      	movs	r2, #1
 80046e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80046e8:	3e01      	subs	r6, #1
 80046ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80046ec:	e775      	b.n	80045da <_dtoa_r+0x102>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e7b6      	b.n	8004660 <_dtoa_r+0x188>
 80046f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80046f4:	e7b5      	b.n	8004662 <_dtoa_r+0x18a>
 80046f6:	427b      	negs	r3, r7
 80046f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046fa:	2300      	movs	r3, #0
 80046fc:	eba8 0807 	sub.w	r8, r8, r7
 8004700:	930e      	str	r3, [sp, #56]	@ 0x38
 8004702:	e7c2      	b.n	800468a <_dtoa_r+0x1b2>
 8004704:	2300      	movs	r3, #0
 8004706:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004708:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800470a:	2b00      	cmp	r3, #0
 800470c:	dc35      	bgt.n	800477a <_dtoa_r+0x2a2>
 800470e:	2301      	movs	r3, #1
 8004710:	461a      	mov	r2, r3
 8004712:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004716:	9221      	str	r2, [sp, #132]	@ 0x84
 8004718:	e00b      	b.n	8004732 <_dtoa_r+0x25a>
 800471a:	2301      	movs	r3, #1
 800471c:	e7f3      	b.n	8004706 <_dtoa_r+0x22e>
 800471e:	2300      	movs	r3, #0
 8004720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004722:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	9308      	str	r3, [sp, #32]
 8004728:	3301      	adds	r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	9307      	str	r3, [sp, #28]
 800472e:	bfb8      	it	lt
 8004730:	2301      	movlt	r3, #1
 8004732:	2100      	movs	r1, #0
 8004734:	2204      	movs	r2, #4
 8004736:	f8db 001c 	ldr.w	r0, [fp, #28]
 800473a:	f102 0514 	add.w	r5, r2, #20
 800473e:	429d      	cmp	r5, r3
 8004740:	d91f      	bls.n	8004782 <_dtoa_r+0x2aa>
 8004742:	6041      	str	r1, [r0, #4]
 8004744:	4658      	mov	r0, fp
 8004746:	f000 fd8d 	bl	8005264 <_Balloc>
 800474a:	4682      	mov	sl, r0
 800474c:	2800      	cmp	r0, #0
 800474e:	d139      	bne.n	80047c4 <_dtoa_r+0x2ec>
 8004750:	4602      	mov	r2, r0
 8004752:	f240 11af 	movw	r1, #431	@ 0x1af
 8004756:	4b1a      	ldr	r3, [pc, #104]	@ (80047c0 <_dtoa_r+0x2e8>)
 8004758:	e6d2      	b.n	8004500 <_dtoa_r+0x28>
 800475a:	2301      	movs	r3, #1
 800475c:	e7e0      	b.n	8004720 <_dtoa_r+0x248>
 800475e:	2401      	movs	r4, #1
 8004760:	2300      	movs	r3, #0
 8004762:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004764:	9320      	str	r3, [sp, #128]	@ 0x80
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	2200      	movs	r2, #0
 800476c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004770:	2312      	movs	r3, #18
 8004772:	e7d0      	b.n	8004716 <_dtoa_r+0x23e>
 8004774:	2301      	movs	r3, #1
 8004776:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004778:	e7f5      	b.n	8004766 <_dtoa_r+0x28e>
 800477a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800477c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004780:	e7d7      	b.n	8004732 <_dtoa_r+0x25a>
 8004782:	3101      	adds	r1, #1
 8004784:	0052      	lsls	r2, r2, #1
 8004786:	e7d8      	b.n	800473a <_dtoa_r+0x262>
 8004788:	636f4361 	.word	0x636f4361
 800478c:	3fd287a7 	.word	0x3fd287a7
 8004790:	8b60c8b3 	.word	0x8b60c8b3
 8004794:	3fc68a28 	.word	0x3fc68a28
 8004798:	509f79fb 	.word	0x509f79fb
 800479c:	3fd34413 	.word	0x3fd34413
 80047a0:	08007aec 	.word	0x08007aec
 80047a4:	08007b03 	.word	0x08007b03
 80047a8:	7ff00000 	.word	0x7ff00000
 80047ac:	08007ae8 	.word	0x08007ae8
 80047b0:	08007ab7 	.word	0x08007ab7
 80047b4:	08007ab6 	.word	0x08007ab6
 80047b8:	3ff80000 	.word	0x3ff80000
 80047bc:	08007c00 	.word	0x08007c00
 80047c0:	08007b5b 	.word	0x08007b5b
 80047c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047c8:	6018      	str	r0, [r3, #0]
 80047ca:	9b07      	ldr	r3, [sp, #28]
 80047cc:	2b0e      	cmp	r3, #14
 80047ce:	f200 80a4 	bhi.w	800491a <_dtoa_r+0x442>
 80047d2:	2c00      	cmp	r4, #0
 80047d4:	f000 80a1 	beq.w	800491a <_dtoa_r+0x442>
 80047d8:	2f00      	cmp	r7, #0
 80047da:	dd33      	ble.n	8004844 <_dtoa_r+0x36c>
 80047dc:	4b86      	ldr	r3, [pc, #536]	@ (80049f8 <_dtoa_r+0x520>)
 80047de:	f007 020f 	and.w	r2, r7, #15
 80047e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047e6:	05f8      	lsls	r0, r7, #23
 80047e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80047f4:	d516      	bpl.n	8004824 <_dtoa_r+0x34c>
 80047f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047fa:	4b80      	ldr	r3, [pc, #512]	@ (80049fc <_dtoa_r+0x524>)
 80047fc:	2603      	movs	r6, #3
 80047fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004802:	f7fb ff93 	bl	800072c <__aeabi_ddiv>
 8004806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800480a:	f004 040f 	and.w	r4, r4, #15
 800480e:	4d7b      	ldr	r5, [pc, #492]	@ (80049fc <_dtoa_r+0x524>)
 8004810:	b954      	cbnz	r4, 8004828 <_dtoa_r+0x350>
 8004812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800481a:	f7fb ff87 	bl	800072c <__aeabi_ddiv>
 800481e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004822:	e028      	b.n	8004876 <_dtoa_r+0x39e>
 8004824:	2602      	movs	r6, #2
 8004826:	e7f2      	b.n	800480e <_dtoa_r+0x336>
 8004828:	07e1      	lsls	r1, r4, #31
 800482a:	d508      	bpl.n	800483e <_dtoa_r+0x366>
 800482c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004834:	f7fb fe50 	bl	80004d8 <__aeabi_dmul>
 8004838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800483c:	3601      	adds	r6, #1
 800483e:	1064      	asrs	r4, r4, #1
 8004840:	3508      	adds	r5, #8
 8004842:	e7e5      	b.n	8004810 <_dtoa_r+0x338>
 8004844:	f000 80d2 	beq.w	80049ec <_dtoa_r+0x514>
 8004848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800484c:	427c      	negs	r4, r7
 800484e:	4b6a      	ldr	r3, [pc, #424]	@ (80049f8 <_dtoa_r+0x520>)
 8004850:	f004 020f 	and.w	r2, r4, #15
 8004854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f7fb fe3c 	bl	80004d8 <__aeabi_dmul>
 8004860:	2602      	movs	r6, #2
 8004862:	2300      	movs	r3, #0
 8004864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004868:	4d64      	ldr	r5, [pc, #400]	@ (80049fc <_dtoa_r+0x524>)
 800486a:	1124      	asrs	r4, r4, #4
 800486c:	2c00      	cmp	r4, #0
 800486e:	f040 80b2 	bne.w	80049d6 <_dtoa_r+0x4fe>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1d3      	bne.n	800481e <_dtoa_r+0x346>
 8004876:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800487a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80b7 	beq.w	80049f0 <_dtoa_r+0x518>
 8004882:	2200      	movs	r2, #0
 8004884:	4620      	mov	r0, r4
 8004886:	4629      	mov	r1, r5
 8004888:	4b5d      	ldr	r3, [pc, #372]	@ (8004a00 <_dtoa_r+0x528>)
 800488a:	f7fc f897 	bl	80009bc <__aeabi_dcmplt>
 800488e:	2800      	cmp	r0, #0
 8004890:	f000 80ae 	beq.w	80049f0 <_dtoa_r+0x518>
 8004894:	9b07      	ldr	r3, [sp, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80aa 	beq.w	80049f0 <_dtoa_r+0x518>
 800489c:	9b08      	ldr	r3, [sp, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	dd37      	ble.n	8004912 <_dtoa_r+0x43a>
 80048a2:	1e7b      	subs	r3, r7, #1
 80048a4:	4620      	mov	r0, r4
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	2200      	movs	r2, #0
 80048aa:	4629      	mov	r1, r5
 80048ac:	4b55      	ldr	r3, [pc, #340]	@ (8004a04 <_dtoa_r+0x52c>)
 80048ae:	f7fb fe13 	bl	80004d8 <__aeabi_dmul>
 80048b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048b6:	9c08      	ldr	r4, [sp, #32]
 80048b8:	3601      	adds	r6, #1
 80048ba:	4630      	mov	r0, r6
 80048bc:	f7fb fda2 	bl	8000404 <__aeabi_i2d>
 80048c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048c4:	f7fb fe08 	bl	80004d8 <__aeabi_dmul>
 80048c8:	2200      	movs	r2, #0
 80048ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004a08 <_dtoa_r+0x530>)
 80048cc:	f7fb fc4e 	bl	800016c <__adddf3>
 80048d0:	4605      	mov	r5, r0
 80048d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048d6:	2c00      	cmp	r4, #0
 80048d8:	f040 809a 	bne.w	8004a10 <_dtoa_r+0x538>
 80048dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e0:	2200      	movs	r2, #0
 80048e2:	4b4a      	ldr	r3, [pc, #296]	@ (8004a0c <_dtoa_r+0x534>)
 80048e4:	f7fb fc40 	bl	8000168 <__aeabi_dsub>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048f0:	462a      	mov	r2, r5
 80048f2:	4633      	mov	r3, r6
 80048f4:	f7fc f880 	bl	80009f8 <__aeabi_dcmpgt>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	f040 828e 	bne.w	8004e1a <_dtoa_r+0x942>
 80048fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004902:	462a      	mov	r2, r5
 8004904:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004908:	f7fc f858 	bl	80009bc <__aeabi_dcmplt>
 800490c:	2800      	cmp	r0, #0
 800490e:	f040 8127 	bne.w	8004b60 <_dtoa_r+0x688>
 8004912:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004916:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800491a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800491c:	2b00      	cmp	r3, #0
 800491e:	f2c0 8163 	blt.w	8004be8 <_dtoa_r+0x710>
 8004922:	2f0e      	cmp	r7, #14
 8004924:	f300 8160 	bgt.w	8004be8 <_dtoa_r+0x710>
 8004928:	4b33      	ldr	r3, [pc, #204]	@ (80049f8 <_dtoa_r+0x520>)
 800492a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800492e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004932:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004936:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004938:	2b00      	cmp	r3, #0
 800493a:	da03      	bge.n	8004944 <_dtoa_r+0x46c>
 800493c:	9b07      	ldr	r3, [sp, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f340 8100 	ble.w	8004b44 <_dtoa_r+0x66c>
 8004944:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004948:	4656      	mov	r6, sl
 800494a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fb feeb 	bl	800072c <__aeabi_ddiv>
 8004956:	f7fc f86f 	bl	8000a38 <__aeabi_d2iz>
 800495a:	4680      	mov	r8, r0
 800495c:	f7fb fd52 	bl	8000404 <__aeabi_i2d>
 8004960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004964:	f7fb fdb8 	bl	80004d8 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fb fbfa 	bl	8000168 <__aeabi_dsub>
 8004974:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004978:	9d07      	ldr	r5, [sp, #28]
 800497a:	f806 4b01 	strb.w	r4, [r6], #1
 800497e:	eba6 040a 	sub.w	r4, r6, sl
 8004982:	42a5      	cmp	r5, r4
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	f040 8116 	bne.w	8004bb8 <_dtoa_r+0x6e0>
 800498c:	f7fb fbee 	bl	800016c <__adddf3>
 8004990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004994:	4604      	mov	r4, r0
 8004996:	460d      	mov	r5, r1
 8004998:	f7fc f82e 	bl	80009f8 <__aeabi_dcmpgt>
 800499c:	2800      	cmp	r0, #0
 800499e:	f040 80f8 	bne.w	8004b92 <_dtoa_r+0x6ba>
 80049a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049a6:	4620      	mov	r0, r4
 80049a8:	4629      	mov	r1, r5
 80049aa:	f7fb fffd 	bl	80009a8 <__aeabi_dcmpeq>
 80049ae:	b118      	cbz	r0, 80049b8 <_dtoa_r+0x4e0>
 80049b0:	f018 0f01 	tst.w	r8, #1
 80049b4:	f040 80ed 	bne.w	8004b92 <_dtoa_r+0x6ba>
 80049b8:	4649      	mov	r1, r9
 80049ba:	4658      	mov	r0, fp
 80049bc:	f000 fc92 	bl	80052e4 <_Bfree>
 80049c0:	2300      	movs	r3, #0
 80049c2:	7033      	strb	r3, [r6, #0]
 80049c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80049c6:	3701      	adds	r7, #1
 80049c8:	601f      	str	r7, [r3, #0]
 80049ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8320 	beq.w	8005012 <_dtoa_r+0xb3a>
 80049d2:	601e      	str	r6, [r3, #0]
 80049d4:	e31d      	b.n	8005012 <_dtoa_r+0xb3a>
 80049d6:	07e2      	lsls	r2, r4, #31
 80049d8:	d505      	bpl.n	80049e6 <_dtoa_r+0x50e>
 80049da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049de:	f7fb fd7b 	bl	80004d8 <__aeabi_dmul>
 80049e2:	2301      	movs	r3, #1
 80049e4:	3601      	adds	r6, #1
 80049e6:	1064      	asrs	r4, r4, #1
 80049e8:	3508      	adds	r5, #8
 80049ea:	e73f      	b.n	800486c <_dtoa_r+0x394>
 80049ec:	2602      	movs	r6, #2
 80049ee:	e742      	b.n	8004876 <_dtoa_r+0x39e>
 80049f0:	9c07      	ldr	r4, [sp, #28]
 80049f2:	9704      	str	r7, [sp, #16]
 80049f4:	e761      	b.n	80048ba <_dtoa_r+0x3e2>
 80049f6:	bf00      	nop
 80049f8:	08007c00 	.word	0x08007c00
 80049fc:	08007bd8 	.word	0x08007bd8
 8004a00:	3ff00000 	.word	0x3ff00000
 8004a04:	40240000 	.word	0x40240000
 8004a08:	401c0000 	.word	0x401c0000
 8004a0c:	40140000 	.word	0x40140000
 8004a10:	4b70      	ldr	r3, [pc, #448]	@ (8004bd4 <_dtoa_r+0x6fc>)
 8004a12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a1c:	4454      	add	r4, sl
 8004a1e:	2900      	cmp	r1, #0
 8004a20:	d045      	beq.n	8004aae <_dtoa_r+0x5d6>
 8004a22:	2000      	movs	r0, #0
 8004a24:	496c      	ldr	r1, [pc, #432]	@ (8004bd8 <_dtoa_r+0x700>)
 8004a26:	f7fb fe81 	bl	800072c <__aeabi_ddiv>
 8004a2a:	4633      	mov	r3, r6
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	f7fb fb9b 	bl	8000168 <__aeabi_dsub>
 8004a32:	4656      	mov	r6, sl
 8004a34:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a3c:	f7fb fffc 	bl	8000a38 <__aeabi_d2iz>
 8004a40:	4605      	mov	r5, r0
 8004a42:	f7fb fcdf 	bl	8000404 <__aeabi_i2d>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a4e:	f7fb fb8b 	bl	8000168 <__aeabi_dsub>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	3530      	adds	r5, #48	@ 0x30
 8004a58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a60:	f806 5b01 	strb.w	r5, [r6], #1
 8004a64:	f7fb ffaa 	bl	80009bc <__aeabi_dcmplt>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d163      	bne.n	8004b34 <_dtoa_r+0x65c>
 8004a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a70:	2000      	movs	r0, #0
 8004a72:	495a      	ldr	r1, [pc, #360]	@ (8004bdc <_dtoa_r+0x704>)
 8004a74:	f7fb fb78 	bl	8000168 <__aeabi_dsub>
 8004a78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a7c:	f7fb ff9e 	bl	80009bc <__aeabi_dcmplt>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	f040 8087 	bne.w	8004b94 <_dtoa_r+0x6bc>
 8004a86:	42a6      	cmp	r6, r4
 8004a88:	f43f af43 	beq.w	8004912 <_dtoa_r+0x43a>
 8004a8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a90:	2200      	movs	r2, #0
 8004a92:	4b53      	ldr	r3, [pc, #332]	@ (8004be0 <_dtoa_r+0x708>)
 8004a94:	f7fb fd20 	bl	80004d8 <__aeabi_dmul>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8004be0 <_dtoa_r+0x708>)
 8004aa4:	f7fb fd18 	bl	80004d8 <__aeabi_dmul>
 8004aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aac:	e7c4      	b.n	8004a38 <_dtoa_r+0x560>
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7fb fd11 	bl	80004d8 <__aeabi_dmul>
 8004ab6:	4656      	mov	r6, sl
 8004ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004abc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ac2:	f7fb ffb9 	bl	8000a38 <__aeabi_d2iz>
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	f7fb fc9c 	bl	8000404 <__aeabi_i2d>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ad4:	f7fb fb48 	bl	8000168 <__aeabi_dsub>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	3530      	adds	r5, #48	@ 0x30
 8004ade:	f806 5b01 	strb.w	r5, [r6], #1
 8004ae2:	42a6      	cmp	r6, r4
 8004ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	d124      	bne.n	8004b38 <_dtoa_r+0x660>
 8004aee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004af2:	4b39      	ldr	r3, [pc, #228]	@ (8004bd8 <_dtoa_r+0x700>)
 8004af4:	f7fb fb3a 	bl	800016c <__adddf3>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b00:	f7fb ff7a 	bl	80009f8 <__aeabi_dcmpgt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d145      	bne.n	8004b94 <_dtoa_r+0x6bc>
 8004b08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	4932      	ldr	r1, [pc, #200]	@ (8004bd8 <_dtoa_r+0x700>)
 8004b10:	f7fb fb2a 	bl	8000168 <__aeabi_dsub>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b1c:	f7fb ff4e 	bl	80009bc <__aeabi_dcmplt>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	f43f aef6 	beq.w	8004912 <_dtoa_r+0x43a>
 8004b26:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004b28:	1e73      	subs	r3, r6, #1
 8004b2a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b30:	2b30      	cmp	r3, #48	@ 0x30
 8004b32:	d0f8      	beq.n	8004b26 <_dtoa_r+0x64e>
 8004b34:	9f04      	ldr	r7, [sp, #16]
 8004b36:	e73f      	b.n	80049b8 <_dtoa_r+0x4e0>
 8004b38:	4b29      	ldr	r3, [pc, #164]	@ (8004be0 <_dtoa_r+0x708>)
 8004b3a:	f7fb fccd 	bl	80004d8 <__aeabi_dmul>
 8004b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b42:	e7bc      	b.n	8004abe <_dtoa_r+0x5e6>
 8004b44:	d10c      	bne.n	8004b60 <_dtoa_r+0x688>
 8004b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4b25      	ldr	r3, [pc, #148]	@ (8004be4 <_dtoa_r+0x70c>)
 8004b4e:	f7fb fcc3 	bl	80004d8 <__aeabi_dmul>
 8004b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b56:	f7fb ff45 	bl	80009e4 <__aeabi_dcmpge>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	f000 815b 	beq.w	8004e16 <_dtoa_r+0x93e>
 8004b60:	2400      	movs	r4, #0
 8004b62:	4625      	mov	r5, r4
 8004b64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b66:	4656      	mov	r6, sl
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	9304      	str	r3, [sp, #16]
 8004b6c:	2700      	movs	r7, #0
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4658      	mov	r0, fp
 8004b72:	f000 fbb7 	bl	80052e4 <_Bfree>
 8004b76:	2d00      	cmp	r5, #0
 8004b78:	d0dc      	beq.n	8004b34 <_dtoa_r+0x65c>
 8004b7a:	b12f      	cbz	r7, 8004b88 <_dtoa_r+0x6b0>
 8004b7c:	42af      	cmp	r7, r5
 8004b7e:	d003      	beq.n	8004b88 <_dtoa_r+0x6b0>
 8004b80:	4639      	mov	r1, r7
 8004b82:	4658      	mov	r0, fp
 8004b84:	f000 fbae 	bl	80052e4 <_Bfree>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4658      	mov	r0, fp
 8004b8c:	f000 fbaa 	bl	80052e4 <_Bfree>
 8004b90:	e7d0      	b.n	8004b34 <_dtoa_r+0x65c>
 8004b92:	9704      	str	r7, [sp, #16]
 8004b94:	4633      	mov	r3, r6
 8004b96:	461e      	mov	r6, r3
 8004b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b9c:	2a39      	cmp	r2, #57	@ 0x39
 8004b9e:	d107      	bne.n	8004bb0 <_dtoa_r+0x6d8>
 8004ba0:	459a      	cmp	sl, r3
 8004ba2:	d1f8      	bne.n	8004b96 <_dtoa_r+0x6be>
 8004ba4:	9a04      	ldr	r2, [sp, #16]
 8004ba6:	3201      	adds	r2, #1
 8004ba8:	9204      	str	r2, [sp, #16]
 8004baa:	2230      	movs	r2, #48	@ 0x30
 8004bac:	f88a 2000 	strb.w	r2, [sl]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	3201      	adds	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e7bd      	b.n	8004b34 <_dtoa_r+0x65c>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <_dtoa_r+0x708>)
 8004bbc:	f7fb fc8c 	bl	80004d8 <__aeabi_dmul>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	460d      	mov	r5, r1
 8004bc8:	f7fb feee 	bl	80009a8 <__aeabi_dcmpeq>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	f43f aebc 	beq.w	800494a <_dtoa_r+0x472>
 8004bd2:	e6f1      	b.n	80049b8 <_dtoa_r+0x4e0>
 8004bd4:	08007c00 	.word	0x08007c00
 8004bd8:	3fe00000 	.word	0x3fe00000
 8004bdc:	3ff00000 	.word	0x3ff00000
 8004be0:	40240000 	.word	0x40240000
 8004be4:	40140000 	.word	0x40140000
 8004be8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	f000 80db 	beq.w	8004da6 <_dtoa_r+0x8ce>
 8004bf0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004bf2:	2a01      	cmp	r2, #1
 8004bf4:	f300 80bf 	bgt.w	8004d76 <_dtoa_r+0x89e>
 8004bf8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004bfa:	2a00      	cmp	r2, #0
 8004bfc:	f000 80b7 	beq.w	8004d6e <_dtoa_r+0x896>
 8004c00:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004c04:	4646      	mov	r6, r8
 8004c06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	441a      	add	r2, r3
 8004c0e:	4658      	mov	r0, fp
 8004c10:	4498      	add	r8, r3
 8004c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c14:	f000 fc64 	bl	80054e0 <__i2b>
 8004c18:	4605      	mov	r5, r0
 8004c1a:	b15e      	cbz	r6, 8004c34 <_dtoa_r+0x75c>
 8004c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dd08      	ble.n	8004c34 <_dtoa_r+0x75c>
 8004c22:	42b3      	cmp	r3, r6
 8004c24:	bfa8      	it	ge
 8004c26:	4633      	movge	r3, r6
 8004c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c2a:	eba8 0803 	sub.w	r8, r8, r3
 8004c2e:	1af6      	subs	r6, r6, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c36:	b1f3      	cbz	r3, 8004c76 <_dtoa_r+0x79e>
 8004c38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80b7 	beq.w	8004dae <_dtoa_r+0x8d6>
 8004c40:	b18c      	cbz	r4, 8004c66 <_dtoa_r+0x78e>
 8004c42:	4629      	mov	r1, r5
 8004c44:	4622      	mov	r2, r4
 8004c46:	4658      	mov	r0, fp
 8004c48:	f000 fd08 	bl	800565c <__pow5mult>
 8004c4c:	464a      	mov	r2, r9
 8004c4e:	4601      	mov	r1, r0
 8004c50:	4605      	mov	r5, r0
 8004c52:	4658      	mov	r0, fp
 8004c54:	f000 fc5a 	bl	800550c <__multiply>
 8004c58:	4649      	mov	r1, r9
 8004c5a:	9004      	str	r0, [sp, #16]
 8004c5c:	4658      	mov	r0, fp
 8004c5e:	f000 fb41 	bl	80052e4 <_Bfree>
 8004c62:	9b04      	ldr	r3, [sp, #16]
 8004c64:	4699      	mov	r9, r3
 8004c66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c68:	1b1a      	subs	r2, r3, r4
 8004c6a:	d004      	beq.n	8004c76 <_dtoa_r+0x79e>
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	4658      	mov	r0, fp
 8004c70:	f000 fcf4 	bl	800565c <__pow5mult>
 8004c74:	4681      	mov	r9, r0
 8004c76:	2101      	movs	r1, #1
 8004c78:	4658      	mov	r0, fp
 8004c7a:	f000 fc31 	bl	80054e0 <__i2b>
 8004c7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c80:	4604      	mov	r4, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 81c9 	beq.w	800501a <_dtoa_r+0xb42>
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	4658      	mov	r0, fp
 8004c8e:	f000 fce5 	bl	800565c <__pow5mult>
 8004c92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c94:	4604      	mov	r4, r0
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	f300 808f 	bgt.w	8004dba <_dtoa_r+0x8e2>
 8004c9c:	9b02      	ldr	r3, [sp, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 8087 	bne.w	8004db2 <_dtoa_r+0x8da>
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 8083 	bne.w	8004db6 <_dtoa_r+0x8de>
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cb6:	0d1b      	lsrs	r3, r3, #20
 8004cb8:	051b      	lsls	r3, r3, #20
 8004cba:	b12b      	cbz	r3, 8004cc8 <_dtoa_r+0x7f0>
 8004cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cbe:	f108 0801 	add.w	r8, r8, #1
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 81aa 	beq.w	8005026 <_dtoa_r+0xb4e>
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cd8:	6918      	ldr	r0, [r3, #16]
 8004cda:	f000 fbb5 	bl	8005448 <__hi0bits>
 8004cde:	f1c0 0020 	rsb	r0, r0, #32
 8004ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce4:	4418      	add	r0, r3
 8004ce6:	f010 001f 	ands.w	r0, r0, #31
 8004cea:	d071      	beq.n	8004dd0 <_dtoa_r+0x8f8>
 8004cec:	f1c0 0320 	rsb	r3, r0, #32
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	dd65      	ble.n	8004dc0 <_dtoa_r+0x8e8>
 8004cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf6:	f1c0 001c 	rsb	r0, r0, #28
 8004cfa:	4403      	add	r3, r0
 8004cfc:	4480      	add	r8, r0
 8004cfe:	4406      	add	r6, r0
 8004d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d02:	f1b8 0f00 	cmp.w	r8, #0
 8004d06:	dd05      	ble.n	8004d14 <_dtoa_r+0x83c>
 8004d08:	4649      	mov	r1, r9
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	4658      	mov	r0, fp
 8004d0e:	f000 fcff 	bl	8005710 <__lshift>
 8004d12:	4681      	mov	r9, r0
 8004d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dd05      	ble.n	8004d26 <_dtoa_r+0x84e>
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4658      	mov	r0, fp
 8004d20:	f000 fcf6 	bl	8005710 <__lshift>
 8004d24:	4604      	mov	r4, r0
 8004d26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d053      	beq.n	8004dd4 <_dtoa_r+0x8fc>
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4648      	mov	r0, r9
 8004d30:	f000 fd5a 	bl	80057e8 <__mcmp>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	da4d      	bge.n	8004dd4 <_dtoa_r+0x8fc>
 8004d38:	1e7b      	subs	r3, r7, #1
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	9304      	str	r3, [sp, #16]
 8004d3e:	220a      	movs	r2, #10
 8004d40:	2300      	movs	r3, #0
 8004d42:	4658      	mov	r0, fp
 8004d44:	f000 faf0 	bl	8005328 <__multadd>
 8004d48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d4a:	4681      	mov	r9, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 816c 	beq.w	800502a <_dtoa_r+0xb52>
 8004d52:	2300      	movs	r3, #0
 8004d54:	4629      	mov	r1, r5
 8004d56:	220a      	movs	r2, #10
 8004d58:	4658      	mov	r0, fp
 8004d5a:	f000 fae5 	bl	8005328 <__multadd>
 8004d5e:	9b08      	ldr	r3, [sp, #32]
 8004d60:	4605      	mov	r5, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	dc61      	bgt.n	8004e2a <_dtoa_r+0x952>
 8004d66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	dc3b      	bgt.n	8004de4 <_dtoa_r+0x90c>
 8004d6c:	e05d      	b.n	8004e2a <_dtoa_r+0x952>
 8004d6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d70:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d74:	e746      	b.n	8004c04 <_dtoa_r+0x72c>
 8004d76:	9b07      	ldr	r3, [sp, #28]
 8004d78:	1e5c      	subs	r4, r3, #1
 8004d7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	bfbf      	itttt	lt
 8004d80:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d82:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004d84:	1ae3      	sublt	r3, r4, r3
 8004d86:	18d2      	addlt	r2, r2, r3
 8004d88:	bfa8      	it	ge
 8004d8a:	1b1c      	subge	r4, r3, r4
 8004d8c:	9b07      	ldr	r3, [sp, #28]
 8004d8e:	bfbe      	ittt	lt
 8004d90:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d92:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004d94:	2400      	movlt	r4, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfb5      	itete	lt
 8004d9a:	eba8 0603 	sublt.w	r6, r8, r3
 8004d9e:	4646      	movge	r6, r8
 8004da0:	2300      	movlt	r3, #0
 8004da2:	9b07      	ldrge	r3, [sp, #28]
 8004da4:	e730      	b.n	8004c08 <_dtoa_r+0x730>
 8004da6:	4646      	mov	r6, r8
 8004da8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004daa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004dac:	e735      	b.n	8004c1a <_dtoa_r+0x742>
 8004dae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004db0:	e75c      	b.n	8004c6c <_dtoa_r+0x794>
 8004db2:	2300      	movs	r3, #0
 8004db4:	e788      	b.n	8004cc8 <_dtoa_r+0x7f0>
 8004db6:	9b02      	ldr	r3, [sp, #8]
 8004db8:	e786      	b.n	8004cc8 <_dtoa_r+0x7f0>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dbe:	e788      	b.n	8004cd2 <_dtoa_r+0x7fa>
 8004dc0:	d09f      	beq.n	8004d02 <_dtoa_r+0x82a>
 8004dc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dc4:	331c      	adds	r3, #28
 8004dc6:	441a      	add	r2, r3
 8004dc8:	4498      	add	r8, r3
 8004dca:	441e      	add	r6, r3
 8004dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dce:	e798      	b.n	8004d02 <_dtoa_r+0x82a>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	e7f6      	b.n	8004dc2 <_dtoa_r+0x8ea>
 8004dd4:	9b07      	ldr	r3, [sp, #28]
 8004dd6:	9704      	str	r7, [sp, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dc20      	bgt.n	8004e1e <_dtoa_r+0x946>
 8004ddc:	9308      	str	r3, [sp, #32]
 8004dde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	dd1e      	ble.n	8004e22 <_dtoa_r+0x94a>
 8004de4:	9b08      	ldr	r3, [sp, #32]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f47f aebc 	bne.w	8004b64 <_dtoa_r+0x68c>
 8004dec:	4621      	mov	r1, r4
 8004dee:	2205      	movs	r2, #5
 8004df0:	4658      	mov	r0, fp
 8004df2:	f000 fa99 	bl	8005328 <__multadd>
 8004df6:	4601      	mov	r1, r0
 8004df8:	4604      	mov	r4, r0
 8004dfa:	4648      	mov	r0, r9
 8004dfc:	f000 fcf4 	bl	80057e8 <__mcmp>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	f77f aeaf 	ble.w	8004b64 <_dtoa_r+0x68c>
 8004e06:	2331      	movs	r3, #49	@ 0x31
 8004e08:	4656      	mov	r6, sl
 8004e0a:	f806 3b01 	strb.w	r3, [r6], #1
 8004e0e:	9b04      	ldr	r3, [sp, #16]
 8004e10:	3301      	adds	r3, #1
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	e6aa      	b.n	8004b6c <_dtoa_r+0x694>
 8004e16:	9c07      	ldr	r4, [sp, #28]
 8004e18:	9704      	str	r7, [sp, #16]
 8004e1a:	4625      	mov	r5, r4
 8004e1c:	e7f3      	b.n	8004e06 <_dtoa_r+0x92e>
 8004e1e:	9b07      	ldr	r3, [sp, #28]
 8004e20:	9308      	str	r3, [sp, #32]
 8004e22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8104 	beq.w	8005032 <_dtoa_r+0xb5a>
 8004e2a:	2e00      	cmp	r6, #0
 8004e2c:	dd05      	ble.n	8004e3a <_dtoa_r+0x962>
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4632      	mov	r2, r6
 8004e32:	4658      	mov	r0, fp
 8004e34:	f000 fc6c 	bl	8005710 <__lshift>
 8004e38:	4605      	mov	r5, r0
 8004e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d05a      	beq.n	8004ef6 <_dtoa_r+0xa1e>
 8004e40:	4658      	mov	r0, fp
 8004e42:	6869      	ldr	r1, [r5, #4]
 8004e44:	f000 fa0e 	bl	8005264 <_Balloc>
 8004e48:	4606      	mov	r6, r0
 8004e4a:	b928      	cbnz	r0, 8004e58 <_dtoa_r+0x980>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e52:	4b83      	ldr	r3, [pc, #524]	@ (8005060 <_dtoa_r+0xb88>)
 8004e54:	f7ff bb54 	b.w	8004500 <_dtoa_r+0x28>
 8004e58:	692a      	ldr	r2, [r5, #16]
 8004e5a:	f105 010c 	add.w	r1, r5, #12
 8004e5e:	3202      	adds	r2, #2
 8004e60:	0092      	lsls	r2, r2, #2
 8004e62:	300c      	adds	r0, #12
 8004e64:	f001 ff5e 	bl	8006d24 <memcpy>
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4658      	mov	r0, fp
 8004e6e:	f000 fc4f 	bl	8005710 <__lshift>
 8004e72:	462f      	mov	r7, r5
 8004e74:	4605      	mov	r5, r0
 8004e76:	f10a 0301 	add.w	r3, sl, #1
 8004e7a:	9307      	str	r3, [sp, #28]
 8004e7c:	9b08      	ldr	r3, [sp, #32]
 8004e7e:	4453      	add	r3, sl
 8004e80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e82:	9b02      	ldr	r3, [sp, #8]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e8a:	9b07      	ldr	r3, [sp, #28]
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	4648      	mov	r0, r9
 8004e92:	9302      	str	r3, [sp, #8]
 8004e94:	f7ff fa98 	bl	80043c8 <quorem>
 8004e98:	4639      	mov	r1, r7
 8004e9a:	9008      	str	r0, [sp, #32]
 8004e9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ea0:	4648      	mov	r0, r9
 8004ea2:	f000 fca1 	bl	80057e8 <__mcmp>
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004eaa:	4621      	mov	r1, r4
 8004eac:	4658      	mov	r0, fp
 8004eae:	f000 fcb7 	bl	8005820 <__mdiff>
 8004eb2:	68c2      	ldr	r2, [r0, #12]
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	bb02      	cbnz	r2, 8004efa <_dtoa_r+0xa22>
 8004eb8:	4601      	mov	r1, r0
 8004eba:	4648      	mov	r0, r9
 8004ebc:	f000 fc94 	bl	80057e8 <__mcmp>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4658      	mov	r0, fp
 8004ec6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ec8:	f000 fa0c 	bl	80052e4 <_Bfree>
 8004ecc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ece:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ed0:	9e07      	ldr	r6, [sp, #28]
 8004ed2:	ea43 0102 	orr.w	r1, r3, r2
 8004ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ed8:	4319      	orrs	r1, r3
 8004eda:	d110      	bne.n	8004efe <_dtoa_r+0xa26>
 8004edc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ee0:	d029      	beq.n	8004f36 <_dtoa_r+0xa5e>
 8004ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dd02      	ble.n	8004eee <_dtoa_r+0xa16>
 8004ee8:	9b08      	ldr	r3, [sp, #32]
 8004eea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004eee:	9b02      	ldr	r3, [sp, #8]
 8004ef0:	f883 8000 	strb.w	r8, [r3]
 8004ef4:	e63b      	b.n	8004b6e <_dtoa_r+0x696>
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	e7bb      	b.n	8004e72 <_dtoa_r+0x99a>
 8004efa:	2201      	movs	r2, #1
 8004efc:	e7e1      	b.n	8004ec2 <_dtoa_r+0x9ea>
 8004efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	db04      	blt.n	8004f0e <_dtoa_r+0xa36>
 8004f04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004f06:	430b      	orrs	r3, r1
 8004f08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	d120      	bne.n	8004f50 <_dtoa_r+0xa78>
 8004f0e:	2a00      	cmp	r2, #0
 8004f10:	dded      	ble.n	8004eee <_dtoa_r+0xa16>
 8004f12:	4649      	mov	r1, r9
 8004f14:	2201      	movs	r2, #1
 8004f16:	4658      	mov	r0, fp
 8004f18:	f000 fbfa 	bl	8005710 <__lshift>
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4681      	mov	r9, r0
 8004f20:	f000 fc62 	bl	80057e8 <__mcmp>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	dc03      	bgt.n	8004f30 <_dtoa_r+0xa58>
 8004f28:	d1e1      	bne.n	8004eee <_dtoa_r+0xa16>
 8004f2a:	f018 0f01 	tst.w	r8, #1
 8004f2e:	d0de      	beq.n	8004eee <_dtoa_r+0xa16>
 8004f30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f34:	d1d8      	bne.n	8004ee8 <_dtoa_r+0xa10>
 8004f36:	2339      	movs	r3, #57	@ 0x39
 8004f38:	9a02      	ldr	r2, [sp, #8]
 8004f3a:	7013      	strb	r3, [r2, #0]
 8004f3c:	4633      	mov	r3, r6
 8004f3e:	461e      	mov	r6, r3
 8004f40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	2a39      	cmp	r2, #57	@ 0x39
 8004f48:	d052      	beq.n	8004ff0 <_dtoa_r+0xb18>
 8004f4a:	3201      	adds	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	e60e      	b.n	8004b6e <_dtoa_r+0x696>
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	dd07      	ble.n	8004f64 <_dtoa_r+0xa8c>
 8004f54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f58:	d0ed      	beq.n	8004f36 <_dtoa_r+0xa5e>
 8004f5a:	9a02      	ldr	r2, [sp, #8]
 8004f5c:	f108 0301 	add.w	r3, r8, #1
 8004f60:	7013      	strb	r3, [r2, #0]
 8004f62:	e604      	b.n	8004b6e <_dtoa_r+0x696>
 8004f64:	9b07      	ldr	r3, [sp, #28]
 8004f66:	9a07      	ldr	r2, [sp, #28]
 8004f68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d028      	beq.n	8004fc4 <_dtoa_r+0xaec>
 8004f72:	4649      	mov	r1, r9
 8004f74:	2300      	movs	r3, #0
 8004f76:	220a      	movs	r2, #10
 8004f78:	4658      	mov	r0, fp
 8004f7a:	f000 f9d5 	bl	8005328 <__multadd>
 8004f7e:	42af      	cmp	r7, r5
 8004f80:	4681      	mov	r9, r0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	f04f 020a 	mov.w	r2, #10
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	d107      	bne.n	8004fa0 <_dtoa_r+0xac8>
 8004f90:	f000 f9ca 	bl	8005328 <__multadd>
 8004f94:	4607      	mov	r7, r0
 8004f96:	4605      	mov	r5, r0
 8004f98:	9b07      	ldr	r3, [sp, #28]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	9307      	str	r3, [sp, #28]
 8004f9e:	e774      	b.n	8004e8a <_dtoa_r+0x9b2>
 8004fa0:	f000 f9c2 	bl	8005328 <__multadd>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4607      	mov	r7, r0
 8004fa8:	2300      	movs	r3, #0
 8004faa:	220a      	movs	r2, #10
 8004fac:	4658      	mov	r0, fp
 8004fae:	f000 f9bb 	bl	8005328 <__multadd>
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	e7f0      	b.n	8004f98 <_dtoa_r+0xac0>
 8004fb6:	9b08      	ldr	r3, [sp, #32]
 8004fb8:	2700      	movs	r7, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bfcc      	ite	gt
 8004fbe:	461e      	movgt	r6, r3
 8004fc0:	2601      	movle	r6, #1
 8004fc2:	4456      	add	r6, sl
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	4658      	mov	r0, fp
 8004fca:	f000 fba1 	bl	8005710 <__lshift>
 8004fce:	4621      	mov	r1, r4
 8004fd0:	4681      	mov	r9, r0
 8004fd2:	f000 fc09 	bl	80057e8 <__mcmp>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	dcb0      	bgt.n	8004f3c <_dtoa_r+0xa64>
 8004fda:	d102      	bne.n	8004fe2 <_dtoa_r+0xb0a>
 8004fdc:	f018 0f01 	tst.w	r8, #1
 8004fe0:	d1ac      	bne.n	8004f3c <_dtoa_r+0xa64>
 8004fe2:	4633      	mov	r3, r6
 8004fe4:	461e      	mov	r6, r3
 8004fe6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fea:	2a30      	cmp	r2, #48	@ 0x30
 8004fec:	d0fa      	beq.n	8004fe4 <_dtoa_r+0xb0c>
 8004fee:	e5be      	b.n	8004b6e <_dtoa_r+0x696>
 8004ff0:	459a      	cmp	sl, r3
 8004ff2:	d1a4      	bne.n	8004f3e <_dtoa_r+0xa66>
 8004ff4:	9b04      	ldr	r3, [sp, #16]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	2331      	movs	r3, #49	@ 0x31
 8004ffc:	f88a 3000 	strb.w	r3, [sl]
 8005000:	e5b5      	b.n	8004b6e <_dtoa_r+0x696>
 8005002:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005004:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005064 <_dtoa_r+0xb8c>
 8005008:	b11b      	cbz	r3, 8005012 <_dtoa_r+0xb3a>
 800500a:	f10a 0308 	add.w	r3, sl, #8
 800500e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4650      	mov	r0, sl
 8005014:	b017      	add	sp, #92	@ 0x5c
 8005016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800501c:	2b01      	cmp	r3, #1
 800501e:	f77f ae3d 	ble.w	8004c9c <_dtoa_r+0x7c4>
 8005022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005024:	930a      	str	r3, [sp, #40]	@ 0x28
 8005026:	2001      	movs	r0, #1
 8005028:	e65b      	b.n	8004ce2 <_dtoa_r+0x80a>
 800502a:	9b08      	ldr	r3, [sp, #32]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f77f aed6 	ble.w	8004dde <_dtoa_r+0x906>
 8005032:	4656      	mov	r6, sl
 8005034:	4621      	mov	r1, r4
 8005036:	4648      	mov	r0, r9
 8005038:	f7ff f9c6 	bl	80043c8 <quorem>
 800503c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005040:	9b08      	ldr	r3, [sp, #32]
 8005042:	f806 8b01 	strb.w	r8, [r6], #1
 8005046:	eba6 020a 	sub.w	r2, r6, sl
 800504a:	4293      	cmp	r3, r2
 800504c:	ddb3      	ble.n	8004fb6 <_dtoa_r+0xade>
 800504e:	4649      	mov	r1, r9
 8005050:	2300      	movs	r3, #0
 8005052:	220a      	movs	r2, #10
 8005054:	4658      	mov	r0, fp
 8005056:	f000 f967 	bl	8005328 <__multadd>
 800505a:	4681      	mov	r9, r0
 800505c:	e7ea      	b.n	8005034 <_dtoa_r+0xb5c>
 800505e:	bf00      	nop
 8005060:	08007b5b 	.word	0x08007b5b
 8005064:	08007adf 	.word	0x08007adf

08005068 <_free_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4605      	mov	r5, r0
 800506c:	2900      	cmp	r1, #0
 800506e:	d040      	beq.n	80050f2 <_free_r+0x8a>
 8005070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005074:	1f0c      	subs	r4, r1, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfb8      	it	lt
 800507a:	18e4      	addlt	r4, r4, r3
 800507c:	f000 f8e6 	bl	800524c <__malloc_lock>
 8005080:	4a1c      	ldr	r2, [pc, #112]	@ (80050f4 <_free_r+0x8c>)
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	b933      	cbnz	r3, 8005094 <_free_r+0x2c>
 8005086:	6063      	str	r3, [r4, #4]
 8005088:	6014      	str	r4, [r2, #0]
 800508a:	4628      	mov	r0, r5
 800508c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005090:	f000 b8e2 	b.w	8005258 <__malloc_unlock>
 8005094:	42a3      	cmp	r3, r4
 8005096:	d908      	bls.n	80050aa <_free_r+0x42>
 8005098:	6820      	ldr	r0, [r4, #0]
 800509a:	1821      	adds	r1, r4, r0
 800509c:	428b      	cmp	r3, r1
 800509e:	bf01      	itttt	eq
 80050a0:	6819      	ldreq	r1, [r3, #0]
 80050a2:	685b      	ldreq	r3, [r3, #4]
 80050a4:	1809      	addeq	r1, r1, r0
 80050a6:	6021      	streq	r1, [r4, #0]
 80050a8:	e7ed      	b.n	8005086 <_free_r+0x1e>
 80050aa:	461a      	mov	r2, r3
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	b10b      	cbz	r3, 80050b4 <_free_r+0x4c>
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d9fa      	bls.n	80050aa <_free_r+0x42>
 80050b4:	6811      	ldr	r1, [r2, #0]
 80050b6:	1850      	adds	r0, r2, r1
 80050b8:	42a0      	cmp	r0, r4
 80050ba:	d10b      	bne.n	80050d4 <_free_r+0x6c>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	4401      	add	r1, r0
 80050c0:	1850      	adds	r0, r2, r1
 80050c2:	4283      	cmp	r3, r0
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	d1e0      	bne.n	800508a <_free_r+0x22>
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4408      	add	r0, r1
 80050ce:	6010      	str	r0, [r2, #0]
 80050d0:	6053      	str	r3, [r2, #4]
 80050d2:	e7da      	b.n	800508a <_free_r+0x22>
 80050d4:	d902      	bls.n	80050dc <_free_r+0x74>
 80050d6:	230c      	movs	r3, #12
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	e7d6      	b.n	800508a <_free_r+0x22>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	1821      	adds	r1, r4, r0
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf01      	itttt	eq
 80050e4:	6819      	ldreq	r1, [r3, #0]
 80050e6:	685b      	ldreq	r3, [r3, #4]
 80050e8:	1809      	addeq	r1, r1, r0
 80050ea:	6021      	streq	r1, [r4, #0]
 80050ec:	6063      	str	r3, [r4, #4]
 80050ee:	6054      	str	r4, [r2, #4]
 80050f0:	e7cb      	b.n	800508a <_free_r+0x22>
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20000420 	.word	0x20000420

080050f8 <malloc>:
 80050f8:	4b02      	ldr	r3, [pc, #8]	@ (8005104 <malloc+0xc>)
 80050fa:	4601      	mov	r1, r0
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	f000 b825 	b.w	800514c <_malloc_r>
 8005102:	bf00      	nop
 8005104:	20000018 	.word	0x20000018

08005108 <sbrk_aligned>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	4e0f      	ldr	r6, [pc, #60]	@ (8005148 <sbrk_aligned+0x40>)
 800510c:	460c      	mov	r4, r1
 800510e:	6831      	ldr	r1, [r6, #0]
 8005110:	4605      	mov	r5, r0
 8005112:	b911      	cbnz	r1, 800511a <sbrk_aligned+0x12>
 8005114:	f001 fdf6 	bl	8006d04 <_sbrk_r>
 8005118:	6030      	str	r0, [r6, #0]
 800511a:	4621      	mov	r1, r4
 800511c:	4628      	mov	r0, r5
 800511e:	f001 fdf1 	bl	8006d04 <_sbrk_r>
 8005122:	1c43      	adds	r3, r0, #1
 8005124:	d103      	bne.n	800512e <sbrk_aligned+0x26>
 8005126:	f04f 34ff 	mov.w	r4, #4294967295
 800512a:	4620      	mov	r0, r4
 800512c:	bd70      	pop	{r4, r5, r6, pc}
 800512e:	1cc4      	adds	r4, r0, #3
 8005130:	f024 0403 	bic.w	r4, r4, #3
 8005134:	42a0      	cmp	r0, r4
 8005136:	d0f8      	beq.n	800512a <sbrk_aligned+0x22>
 8005138:	1a21      	subs	r1, r4, r0
 800513a:	4628      	mov	r0, r5
 800513c:	f001 fde2 	bl	8006d04 <_sbrk_r>
 8005140:	3001      	adds	r0, #1
 8005142:	d1f2      	bne.n	800512a <sbrk_aligned+0x22>
 8005144:	e7ef      	b.n	8005126 <sbrk_aligned+0x1e>
 8005146:	bf00      	nop
 8005148:	2000041c 	.word	0x2000041c

0800514c <_malloc_r>:
 800514c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005150:	1ccd      	adds	r5, r1, #3
 8005152:	f025 0503 	bic.w	r5, r5, #3
 8005156:	3508      	adds	r5, #8
 8005158:	2d0c      	cmp	r5, #12
 800515a:	bf38      	it	cc
 800515c:	250c      	movcc	r5, #12
 800515e:	2d00      	cmp	r5, #0
 8005160:	4606      	mov	r6, r0
 8005162:	db01      	blt.n	8005168 <_malloc_r+0x1c>
 8005164:	42a9      	cmp	r1, r5
 8005166:	d904      	bls.n	8005172 <_malloc_r+0x26>
 8005168:	230c      	movs	r3, #12
 800516a:	6033      	str	r3, [r6, #0]
 800516c:	2000      	movs	r0, #0
 800516e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005248 <_malloc_r+0xfc>
 8005176:	f000 f869 	bl	800524c <__malloc_lock>
 800517a:	f8d8 3000 	ldr.w	r3, [r8]
 800517e:	461c      	mov	r4, r3
 8005180:	bb44      	cbnz	r4, 80051d4 <_malloc_r+0x88>
 8005182:	4629      	mov	r1, r5
 8005184:	4630      	mov	r0, r6
 8005186:	f7ff ffbf 	bl	8005108 <sbrk_aligned>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	4604      	mov	r4, r0
 800518e:	d158      	bne.n	8005242 <_malloc_r+0xf6>
 8005190:	f8d8 4000 	ldr.w	r4, [r8]
 8005194:	4627      	mov	r7, r4
 8005196:	2f00      	cmp	r7, #0
 8005198:	d143      	bne.n	8005222 <_malloc_r+0xd6>
 800519a:	2c00      	cmp	r4, #0
 800519c:	d04b      	beq.n	8005236 <_malloc_r+0xea>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	4639      	mov	r1, r7
 80051a2:	4630      	mov	r0, r6
 80051a4:	eb04 0903 	add.w	r9, r4, r3
 80051a8:	f001 fdac 	bl	8006d04 <_sbrk_r>
 80051ac:	4581      	cmp	r9, r0
 80051ae:	d142      	bne.n	8005236 <_malloc_r+0xea>
 80051b0:	6821      	ldr	r1, [r4, #0]
 80051b2:	4630      	mov	r0, r6
 80051b4:	1a6d      	subs	r5, r5, r1
 80051b6:	4629      	mov	r1, r5
 80051b8:	f7ff ffa6 	bl	8005108 <sbrk_aligned>
 80051bc:	3001      	adds	r0, #1
 80051be:	d03a      	beq.n	8005236 <_malloc_r+0xea>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	442b      	add	r3, r5
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	f8d8 3000 	ldr.w	r3, [r8]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	bb62      	cbnz	r2, 8005228 <_malloc_r+0xdc>
 80051ce:	f8c8 7000 	str.w	r7, [r8]
 80051d2:	e00f      	b.n	80051f4 <_malloc_r+0xa8>
 80051d4:	6822      	ldr	r2, [r4, #0]
 80051d6:	1b52      	subs	r2, r2, r5
 80051d8:	d420      	bmi.n	800521c <_malloc_r+0xd0>
 80051da:	2a0b      	cmp	r2, #11
 80051dc:	d917      	bls.n	800520e <_malloc_r+0xc2>
 80051de:	1961      	adds	r1, r4, r5
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	6025      	str	r5, [r4, #0]
 80051e4:	bf18      	it	ne
 80051e6:	6059      	strne	r1, [r3, #4]
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	bf08      	it	eq
 80051ec:	f8c8 1000 	streq.w	r1, [r8]
 80051f0:	5162      	str	r2, [r4, r5]
 80051f2:	604b      	str	r3, [r1, #4]
 80051f4:	4630      	mov	r0, r6
 80051f6:	f000 f82f 	bl	8005258 <__malloc_unlock>
 80051fa:	f104 000b 	add.w	r0, r4, #11
 80051fe:	1d23      	adds	r3, r4, #4
 8005200:	f020 0007 	bic.w	r0, r0, #7
 8005204:	1ac2      	subs	r2, r0, r3
 8005206:	bf1c      	itt	ne
 8005208:	1a1b      	subne	r3, r3, r0
 800520a:	50a3      	strne	r3, [r4, r2]
 800520c:	e7af      	b.n	800516e <_malloc_r+0x22>
 800520e:	6862      	ldr	r2, [r4, #4]
 8005210:	42a3      	cmp	r3, r4
 8005212:	bf0c      	ite	eq
 8005214:	f8c8 2000 	streq.w	r2, [r8]
 8005218:	605a      	strne	r2, [r3, #4]
 800521a:	e7eb      	b.n	80051f4 <_malloc_r+0xa8>
 800521c:	4623      	mov	r3, r4
 800521e:	6864      	ldr	r4, [r4, #4]
 8005220:	e7ae      	b.n	8005180 <_malloc_r+0x34>
 8005222:	463c      	mov	r4, r7
 8005224:	687f      	ldr	r7, [r7, #4]
 8005226:	e7b6      	b.n	8005196 <_malloc_r+0x4a>
 8005228:	461a      	mov	r2, r3
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	42a3      	cmp	r3, r4
 800522e:	d1fb      	bne.n	8005228 <_malloc_r+0xdc>
 8005230:	2300      	movs	r3, #0
 8005232:	6053      	str	r3, [r2, #4]
 8005234:	e7de      	b.n	80051f4 <_malloc_r+0xa8>
 8005236:	230c      	movs	r3, #12
 8005238:	4630      	mov	r0, r6
 800523a:	6033      	str	r3, [r6, #0]
 800523c:	f000 f80c 	bl	8005258 <__malloc_unlock>
 8005240:	e794      	b.n	800516c <_malloc_r+0x20>
 8005242:	6005      	str	r5, [r0, #0]
 8005244:	e7d6      	b.n	80051f4 <_malloc_r+0xa8>
 8005246:	bf00      	nop
 8005248:	20000420 	.word	0x20000420

0800524c <__malloc_lock>:
 800524c:	4801      	ldr	r0, [pc, #4]	@ (8005254 <__malloc_lock+0x8>)
 800524e:	f7ff b8a6 	b.w	800439e <__retarget_lock_acquire_recursive>
 8005252:	bf00      	nop
 8005254:	20000418 	.word	0x20000418

08005258 <__malloc_unlock>:
 8005258:	4801      	ldr	r0, [pc, #4]	@ (8005260 <__malloc_unlock+0x8>)
 800525a:	f7ff b8a1 	b.w	80043a0 <__retarget_lock_release_recursive>
 800525e:	bf00      	nop
 8005260:	20000418 	.word	0x20000418

08005264 <_Balloc>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	69c6      	ldr	r6, [r0, #28]
 8005268:	4604      	mov	r4, r0
 800526a:	460d      	mov	r5, r1
 800526c:	b976      	cbnz	r6, 800528c <_Balloc+0x28>
 800526e:	2010      	movs	r0, #16
 8005270:	f7ff ff42 	bl	80050f8 <malloc>
 8005274:	4602      	mov	r2, r0
 8005276:	61e0      	str	r0, [r4, #28]
 8005278:	b920      	cbnz	r0, 8005284 <_Balloc+0x20>
 800527a:	216b      	movs	r1, #107	@ 0x6b
 800527c:	4b17      	ldr	r3, [pc, #92]	@ (80052dc <_Balloc+0x78>)
 800527e:	4818      	ldr	r0, [pc, #96]	@ (80052e0 <_Balloc+0x7c>)
 8005280:	f001 fd64 	bl	8006d4c <__assert_func>
 8005284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005288:	6006      	str	r6, [r0, #0]
 800528a:	60c6      	str	r6, [r0, #12]
 800528c:	69e6      	ldr	r6, [r4, #28]
 800528e:	68f3      	ldr	r3, [r6, #12]
 8005290:	b183      	cbz	r3, 80052b4 <_Balloc+0x50>
 8005292:	69e3      	ldr	r3, [r4, #28]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800529a:	b9b8      	cbnz	r0, 80052cc <_Balloc+0x68>
 800529c:	2101      	movs	r1, #1
 800529e:	fa01 f605 	lsl.w	r6, r1, r5
 80052a2:	1d72      	adds	r2, r6, #5
 80052a4:	4620      	mov	r0, r4
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	f001 fd6e 	bl	8006d88 <_calloc_r>
 80052ac:	b160      	cbz	r0, 80052c8 <_Balloc+0x64>
 80052ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052b2:	e00e      	b.n	80052d2 <_Balloc+0x6e>
 80052b4:	2221      	movs	r2, #33	@ 0x21
 80052b6:	2104      	movs	r1, #4
 80052b8:	4620      	mov	r0, r4
 80052ba:	f001 fd65 	bl	8006d88 <_calloc_r>
 80052be:	69e3      	ldr	r3, [r4, #28]
 80052c0:	60f0      	str	r0, [r6, #12]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e4      	bne.n	8005292 <_Balloc+0x2e>
 80052c8:	2000      	movs	r0, #0
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	6802      	ldr	r2, [r0, #0]
 80052ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052d2:	2300      	movs	r3, #0
 80052d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052d8:	e7f7      	b.n	80052ca <_Balloc+0x66>
 80052da:	bf00      	nop
 80052dc:	08007aec 	.word	0x08007aec
 80052e0:	08007b6c 	.word	0x08007b6c

080052e4 <_Bfree>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	69c6      	ldr	r6, [r0, #28]
 80052e8:	4605      	mov	r5, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	b976      	cbnz	r6, 800530c <_Bfree+0x28>
 80052ee:	2010      	movs	r0, #16
 80052f0:	f7ff ff02 	bl	80050f8 <malloc>
 80052f4:	4602      	mov	r2, r0
 80052f6:	61e8      	str	r0, [r5, #28]
 80052f8:	b920      	cbnz	r0, 8005304 <_Bfree+0x20>
 80052fa:	218f      	movs	r1, #143	@ 0x8f
 80052fc:	4b08      	ldr	r3, [pc, #32]	@ (8005320 <_Bfree+0x3c>)
 80052fe:	4809      	ldr	r0, [pc, #36]	@ (8005324 <_Bfree+0x40>)
 8005300:	f001 fd24 	bl	8006d4c <__assert_func>
 8005304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005308:	6006      	str	r6, [r0, #0]
 800530a:	60c6      	str	r6, [r0, #12]
 800530c:	b13c      	cbz	r4, 800531e <_Bfree+0x3a>
 800530e:	69eb      	ldr	r3, [r5, #28]
 8005310:	6862      	ldr	r2, [r4, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005318:	6021      	str	r1, [r4, #0]
 800531a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	08007aec 	.word	0x08007aec
 8005324:	08007b6c 	.word	0x08007b6c

08005328 <__multadd>:
 8005328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800532c:	4607      	mov	r7, r0
 800532e:	460c      	mov	r4, r1
 8005330:	461e      	mov	r6, r3
 8005332:	2000      	movs	r0, #0
 8005334:	690d      	ldr	r5, [r1, #16]
 8005336:	f101 0c14 	add.w	ip, r1, #20
 800533a:	f8dc 3000 	ldr.w	r3, [ip]
 800533e:	3001      	adds	r0, #1
 8005340:	b299      	uxth	r1, r3
 8005342:	fb02 6101 	mla	r1, r2, r1, r6
 8005346:	0c1e      	lsrs	r6, r3, #16
 8005348:	0c0b      	lsrs	r3, r1, #16
 800534a:	fb02 3306 	mla	r3, r2, r6, r3
 800534e:	b289      	uxth	r1, r1
 8005350:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005354:	4285      	cmp	r5, r0
 8005356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800535a:	f84c 1b04 	str.w	r1, [ip], #4
 800535e:	dcec      	bgt.n	800533a <__multadd+0x12>
 8005360:	b30e      	cbz	r6, 80053a6 <__multadd+0x7e>
 8005362:	68a3      	ldr	r3, [r4, #8]
 8005364:	42ab      	cmp	r3, r5
 8005366:	dc19      	bgt.n	800539c <__multadd+0x74>
 8005368:	6861      	ldr	r1, [r4, #4]
 800536a:	4638      	mov	r0, r7
 800536c:	3101      	adds	r1, #1
 800536e:	f7ff ff79 	bl	8005264 <_Balloc>
 8005372:	4680      	mov	r8, r0
 8005374:	b928      	cbnz	r0, 8005382 <__multadd+0x5a>
 8005376:	4602      	mov	r2, r0
 8005378:	21ba      	movs	r1, #186	@ 0xba
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <__multadd+0x84>)
 800537c:	480c      	ldr	r0, [pc, #48]	@ (80053b0 <__multadd+0x88>)
 800537e:	f001 fce5 	bl	8006d4c <__assert_func>
 8005382:	6922      	ldr	r2, [r4, #16]
 8005384:	f104 010c 	add.w	r1, r4, #12
 8005388:	3202      	adds	r2, #2
 800538a:	0092      	lsls	r2, r2, #2
 800538c:	300c      	adds	r0, #12
 800538e:	f001 fcc9 	bl	8006d24 <memcpy>
 8005392:	4621      	mov	r1, r4
 8005394:	4638      	mov	r0, r7
 8005396:	f7ff ffa5 	bl	80052e4 <_Bfree>
 800539a:	4644      	mov	r4, r8
 800539c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053a0:	3501      	adds	r5, #1
 80053a2:	615e      	str	r6, [r3, #20]
 80053a4:	6125      	str	r5, [r4, #16]
 80053a6:	4620      	mov	r0, r4
 80053a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ac:	08007b5b 	.word	0x08007b5b
 80053b0:	08007b6c 	.word	0x08007b6c

080053b4 <__s2b>:
 80053b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	4615      	mov	r5, r2
 80053ba:	2209      	movs	r2, #9
 80053bc:	461f      	mov	r7, r3
 80053be:	3308      	adds	r3, #8
 80053c0:	460c      	mov	r4, r1
 80053c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053c6:	4606      	mov	r6, r0
 80053c8:	2201      	movs	r2, #1
 80053ca:	2100      	movs	r1, #0
 80053cc:	429a      	cmp	r2, r3
 80053ce:	db09      	blt.n	80053e4 <__s2b+0x30>
 80053d0:	4630      	mov	r0, r6
 80053d2:	f7ff ff47 	bl	8005264 <_Balloc>
 80053d6:	b940      	cbnz	r0, 80053ea <__s2b+0x36>
 80053d8:	4602      	mov	r2, r0
 80053da:	21d3      	movs	r1, #211	@ 0xd3
 80053dc:	4b18      	ldr	r3, [pc, #96]	@ (8005440 <__s2b+0x8c>)
 80053de:	4819      	ldr	r0, [pc, #100]	@ (8005444 <__s2b+0x90>)
 80053e0:	f001 fcb4 	bl	8006d4c <__assert_func>
 80053e4:	0052      	lsls	r2, r2, #1
 80053e6:	3101      	adds	r1, #1
 80053e8:	e7f0      	b.n	80053cc <__s2b+0x18>
 80053ea:	9b08      	ldr	r3, [sp, #32]
 80053ec:	2d09      	cmp	r5, #9
 80053ee:	6143      	str	r3, [r0, #20]
 80053f0:	f04f 0301 	mov.w	r3, #1
 80053f4:	6103      	str	r3, [r0, #16]
 80053f6:	dd16      	ble.n	8005426 <__s2b+0x72>
 80053f8:	f104 0909 	add.w	r9, r4, #9
 80053fc:	46c8      	mov	r8, r9
 80053fe:	442c      	add	r4, r5
 8005400:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005404:	4601      	mov	r1, r0
 8005406:	220a      	movs	r2, #10
 8005408:	4630      	mov	r0, r6
 800540a:	3b30      	subs	r3, #48	@ 0x30
 800540c:	f7ff ff8c 	bl	8005328 <__multadd>
 8005410:	45a0      	cmp	r8, r4
 8005412:	d1f5      	bne.n	8005400 <__s2b+0x4c>
 8005414:	f1a5 0408 	sub.w	r4, r5, #8
 8005418:	444c      	add	r4, r9
 800541a:	1b2d      	subs	r5, r5, r4
 800541c:	1963      	adds	r3, r4, r5
 800541e:	42bb      	cmp	r3, r7
 8005420:	db04      	blt.n	800542c <__s2b+0x78>
 8005422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005426:	2509      	movs	r5, #9
 8005428:	340a      	adds	r4, #10
 800542a:	e7f6      	b.n	800541a <__s2b+0x66>
 800542c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005430:	4601      	mov	r1, r0
 8005432:	220a      	movs	r2, #10
 8005434:	4630      	mov	r0, r6
 8005436:	3b30      	subs	r3, #48	@ 0x30
 8005438:	f7ff ff76 	bl	8005328 <__multadd>
 800543c:	e7ee      	b.n	800541c <__s2b+0x68>
 800543e:	bf00      	nop
 8005440:	08007b5b 	.word	0x08007b5b
 8005444:	08007b6c 	.word	0x08007b6c

08005448 <__hi0bits>:
 8005448:	4603      	mov	r3, r0
 800544a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800544e:	bf3a      	itte	cc
 8005450:	0403      	lslcc	r3, r0, #16
 8005452:	2010      	movcc	r0, #16
 8005454:	2000      	movcs	r0, #0
 8005456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800545a:	bf3c      	itt	cc
 800545c:	021b      	lslcc	r3, r3, #8
 800545e:	3008      	addcc	r0, #8
 8005460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005464:	bf3c      	itt	cc
 8005466:	011b      	lslcc	r3, r3, #4
 8005468:	3004      	addcc	r0, #4
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546e:	bf3c      	itt	cc
 8005470:	009b      	lslcc	r3, r3, #2
 8005472:	3002      	addcc	r0, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	db05      	blt.n	8005484 <__hi0bits+0x3c>
 8005478:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800547c:	f100 0001 	add.w	r0, r0, #1
 8005480:	bf08      	it	eq
 8005482:	2020      	moveq	r0, #32
 8005484:	4770      	bx	lr

08005486 <__lo0bits>:
 8005486:	6803      	ldr	r3, [r0, #0]
 8005488:	4602      	mov	r2, r0
 800548a:	f013 0007 	ands.w	r0, r3, #7
 800548e:	d00b      	beq.n	80054a8 <__lo0bits+0x22>
 8005490:	07d9      	lsls	r1, r3, #31
 8005492:	d421      	bmi.n	80054d8 <__lo0bits+0x52>
 8005494:	0798      	lsls	r0, r3, #30
 8005496:	bf49      	itett	mi
 8005498:	085b      	lsrmi	r3, r3, #1
 800549a:	089b      	lsrpl	r3, r3, #2
 800549c:	2001      	movmi	r0, #1
 800549e:	6013      	strmi	r3, [r2, #0]
 80054a0:	bf5c      	itt	pl
 80054a2:	2002      	movpl	r0, #2
 80054a4:	6013      	strpl	r3, [r2, #0]
 80054a6:	4770      	bx	lr
 80054a8:	b299      	uxth	r1, r3
 80054aa:	b909      	cbnz	r1, 80054b0 <__lo0bits+0x2a>
 80054ac:	2010      	movs	r0, #16
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	b2d9      	uxtb	r1, r3
 80054b2:	b909      	cbnz	r1, 80054b8 <__lo0bits+0x32>
 80054b4:	3008      	adds	r0, #8
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	0719      	lsls	r1, r3, #28
 80054ba:	bf04      	itt	eq
 80054bc:	091b      	lsreq	r3, r3, #4
 80054be:	3004      	addeq	r0, #4
 80054c0:	0799      	lsls	r1, r3, #30
 80054c2:	bf04      	itt	eq
 80054c4:	089b      	lsreq	r3, r3, #2
 80054c6:	3002      	addeq	r0, #2
 80054c8:	07d9      	lsls	r1, r3, #31
 80054ca:	d403      	bmi.n	80054d4 <__lo0bits+0x4e>
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	f100 0001 	add.w	r0, r0, #1
 80054d2:	d003      	beq.n	80054dc <__lo0bits+0x56>
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4770      	bx	lr
 80054d8:	2000      	movs	r0, #0
 80054da:	4770      	bx	lr
 80054dc:	2020      	movs	r0, #32
 80054de:	4770      	bx	lr

080054e0 <__i2b>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	460c      	mov	r4, r1
 80054e4:	2101      	movs	r1, #1
 80054e6:	f7ff febd 	bl	8005264 <_Balloc>
 80054ea:	4602      	mov	r2, r0
 80054ec:	b928      	cbnz	r0, 80054fa <__i2b+0x1a>
 80054ee:	f240 1145 	movw	r1, #325	@ 0x145
 80054f2:	4b04      	ldr	r3, [pc, #16]	@ (8005504 <__i2b+0x24>)
 80054f4:	4804      	ldr	r0, [pc, #16]	@ (8005508 <__i2b+0x28>)
 80054f6:	f001 fc29 	bl	8006d4c <__assert_func>
 80054fa:	2301      	movs	r3, #1
 80054fc:	6144      	str	r4, [r0, #20]
 80054fe:	6103      	str	r3, [r0, #16]
 8005500:	bd10      	pop	{r4, pc}
 8005502:	bf00      	nop
 8005504:	08007b5b 	.word	0x08007b5b
 8005508:	08007b6c 	.word	0x08007b6c

0800550c <__multiply>:
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	4614      	mov	r4, r2
 8005512:	690a      	ldr	r2, [r1, #16]
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	460f      	mov	r7, r1
 8005518:	429a      	cmp	r2, r3
 800551a:	bfa2      	ittt	ge
 800551c:	4623      	movge	r3, r4
 800551e:	460c      	movge	r4, r1
 8005520:	461f      	movge	r7, r3
 8005522:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005526:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800552a:	68a3      	ldr	r3, [r4, #8]
 800552c:	6861      	ldr	r1, [r4, #4]
 800552e:	eb0a 0609 	add.w	r6, sl, r9
 8005532:	42b3      	cmp	r3, r6
 8005534:	b085      	sub	sp, #20
 8005536:	bfb8      	it	lt
 8005538:	3101      	addlt	r1, #1
 800553a:	f7ff fe93 	bl	8005264 <_Balloc>
 800553e:	b930      	cbnz	r0, 800554e <__multiply+0x42>
 8005540:	4602      	mov	r2, r0
 8005542:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005546:	4b43      	ldr	r3, [pc, #268]	@ (8005654 <__multiply+0x148>)
 8005548:	4843      	ldr	r0, [pc, #268]	@ (8005658 <__multiply+0x14c>)
 800554a:	f001 fbff 	bl	8006d4c <__assert_func>
 800554e:	f100 0514 	add.w	r5, r0, #20
 8005552:	462b      	mov	r3, r5
 8005554:	2200      	movs	r2, #0
 8005556:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800555a:	4543      	cmp	r3, r8
 800555c:	d321      	bcc.n	80055a2 <__multiply+0x96>
 800555e:	f107 0114 	add.w	r1, r7, #20
 8005562:	f104 0214 	add.w	r2, r4, #20
 8005566:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800556a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800556e:	9302      	str	r3, [sp, #8]
 8005570:	1b13      	subs	r3, r2, r4
 8005572:	3b15      	subs	r3, #21
 8005574:	f023 0303 	bic.w	r3, r3, #3
 8005578:	3304      	adds	r3, #4
 800557a:	f104 0715 	add.w	r7, r4, #21
 800557e:	42ba      	cmp	r2, r7
 8005580:	bf38      	it	cc
 8005582:	2304      	movcc	r3, #4
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	9103      	str	r1, [sp, #12]
 800558a:	428b      	cmp	r3, r1
 800558c:	d80c      	bhi.n	80055a8 <__multiply+0x9c>
 800558e:	2e00      	cmp	r6, #0
 8005590:	dd03      	ble.n	800559a <__multiply+0x8e>
 8005592:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005596:	2b00      	cmp	r3, #0
 8005598:	d05a      	beq.n	8005650 <__multiply+0x144>
 800559a:	6106      	str	r6, [r0, #16]
 800559c:	b005      	add	sp, #20
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	f843 2b04 	str.w	r2, [r3], #4
 80055a6:	e7d8      	b.n	800555a <__multiply+0x4e>
 80055a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80055ac:	f1ba 0f00 	cmp.w	sl, #0
 80055b0:	d023      	beq.n	80055fa <__multiply+0xee>
 80055b2:	46a9      	mov	r9, r5
 80055b4:	f04f 0c00 	mov.w	ip, #0
 80055b8:	f104 0e14 	add.w	lr, r4, #20
 80055bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80055c0:	f8d9 3000 	ldr.w	r3, [r9]
 80055c4:	fa1f fb87 	uxth.w	fp, r7
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	fb0a 330b 	mla	r3, sl, fp, r3
 80055ce:	4463      	add	r3, ip
 80055d0:	f8d9 c000 	ldr.w	ip, [r9]
 80055d4:	0c3f      	lsrs	r7, r7, #16
 80055d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80055da:	fb0a c707 	mla	r7, sl, r7, ip
 80055de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055e8:	4572      	cmp	r2, lr
 80055ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80055ee:	f849 3b04 	str.w	r3, [r9], #4
 80055f2:	d8e3      	bhi.n	80055bc <__multiply+0xb0>
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	f845 c003 	str.w	ip, [r5, r3]
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	3104      	adds	r1, #4
 80055fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005602:	f1b9 0f00 	cmp.w	r9, #0
 8005606:	d021      	beq.n	800564c <__multiply+0x140>
 8005608:	46ae      	mov	lr, r5
 800560a:	f04f 0a00 	mov.w	sl, #0
 800560e:	682b      	ldr	r3, [r5, #0]
 8005610:	f104 0c14 	add.w	ip, r4, #20
 8005614:	f8bc b000 	ldrh.w	fp, [ip]
 8005618:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800561c:	b29b      	uxth	r3, r3
 800561e:	fb09 770b 	mla	r7, r9, fp, r7
 8005622:	4457      	add	r7, sl
 8005624:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005628:	f84e 3b04 	str.w	r3, [lr], #4
 800562c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005634:	f8be 3000 	ldrh.w	r3, [lr]
 8005638:	4562      	cmp	r2, ip
 800563a:	fb09 330a 	mla	r3, r9, sl, r3
 800563e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005642:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005646:	d8e5      	bhi.n	8005614 <__multiply+0x108>
 8005648:	9f01      	ldr	r7, [sp, #4]
 800564a:	51eb      	str	r3, [r5, r7]
 800564c:	3504      	adds	r5, #4
 800564e:	e79a      	b.n	8005586 <__multiply+0x7a>
 8005650:	3e01      	subs	r6, #1
 8005652:	e79c      	b.n	800558e <__multiply+0x82>
 8005654:	08007b5b 	.word	0x08007b5b
 8005658:	08007b6c 	.word	0x08007b6c

0800565c <__pow5mult>:
 800565c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005660:	4615      	mov	r5, r2
 8005662:	f012 0203 	ands.w	r2, r2, #3
 8005666:	4607      	mov	r7, r0
 8005668:	460e      	mov	r6, r1
 800566a:	d007      	beq.n	800567c <__pow5mult+0x20>
 800566c:	4c25      	ldr	r4, [pc, #148]	@ (8005704 <__pow5mult+0xa8>)
 800566e:	3a01      	subs	r2, #1
 8005670:	2300      	movs	r3, #0
 8005672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005676:	f7ff fe57 	bl	8005328 <__multadd>
 800567a:	4606      	mov	r6, r0
 800567c:	10ad      	asrs	r5, r5, #2
 800567e:	d03d      	beq.n	80056fc <__pow5mult+0xa0>
 8005680:	69fc      	ldr	r4, [r7, #28]
 8005682:	b97c      	cbnz	r4, 80056a4 <__pow5mult+0x48>
 8005684:	2010      	movs	r0, #16
 8005686:	f7ff fd37 	bl	80050f8 <malloc>
 800568a:	4602      	mov	r2, r0
 800568c:	61f8      	str	r0, [r7, #28]
 800568e:	b928      	cbnz	r0, 800569c <__pow5mult+0x40>
 8005690:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005694:	4b1c      	ldr	r3, [pc, #112]	@ (8005708 <__pow5mult+0xac>)
 8005696:	481d      	ldr	r0, [pc, #116]	@ (800570c <__pow5mult+0xb0>)
 8005698:	f001 fb58 	bl	8006d4c <__assert_func>
 800569c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056a0:	6004      	str	r4, [r0, #0]
 80056a2:	60c4      	str	r4, [r0, #12]
 80056a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80056a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80056ac:	b94c      	cbnz	r4, 80056c2 <__pow5mult+0x66>
 80056ae:	f240 2171 	movw	r1, #625	@ 0x271
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff ff14 	bl	80054e0 <__i2b>
 80056b8:	2300      	movs	r3, #0
 80056ba:	4604      	mov	r4, r0
 80056bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80056c0:	6003      	str	r3, [r0, #0]
 80056c2:	f04f 0900 	mov.w	r9, #0
 80056c6:	07eb      	lsls	r3, r5, #31
 80056c8:	d50a      	bpl.n	80056e0 <__pow5mult+0x84>
 80056ca:	4631      	mov	r1, r6
 80056cc:	4622      	mov	r2, r4
 80056ce:	4638      	mov	r0, r7
 80056d0:	f7ff ff1c 	bl	800550c <__multiply>
 80056d4:	4680      	mov	r8, r0
 80056d6:	4631      	mov	r1, r6
 80056d8:	4638      	mov	r0, r7
 80056da:	f7ff fe03 	bl	80052e4 <_Bfree>
 80056de:	4646      	mov	r6, r8
 80056e0:	106d      	asrs	r5, r5, #1
 80056e2:	d00b      	beq.n	80056fc <__pow5mult+0xa0>
 80056e4:	6820      	ldr	r0, [r4, #0]
 80056e6:	b938      	cbnz	r0, 80056f8 <__pow5mult+0x9c>
 80056e8:	4622      	mov	r2, r4
 80056ea:	4621      	mov	r1, r4
 80056ec:	4638      	mov	r0, r7
 80056ee:	f7ff ff0d 	bl	800550c <__multiply>
 80056f2:	6020      	str	r0, [r4, #0]
 80056f4:	f8c0 9000 	str.w	r9, [r0]
 80056f8:	4604      	mov	r4, r0
 80056fa:	e7e4      	b.n	80056c6 <__pow5mult+0x6a>
 80056fc:	4630      	mov	r0, r6
 80056fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005702:	bf00      	nop
 8005704:	08007bc8 	.word	0x08007bc8
 8005708:	08007aec 	.word	0x08007aec
 800570c:	08007b6c 	.word	0x08007b6c

08005710 <__lshift>:
 8005710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005714:	460c      	mov	r4, r1
 8005716:	4607      	mov	r7, r0
 8005718:	4691      	mov	r9, r2
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	6849      	ldr	r1, [r1, #4]
 800571e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005722:	68a3      	ldr	r3, [r4, #8]
 8005724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005728:	f108 0601 	add.w	r6, r8, #1
 800572c:	42b3      	cmp	r3, r6
 800572e:	db0b      	blt.n	8005748 <__lshift+0x38>
 8005730:	4638      	mov	r0, r7
 8005732:	f7ff fd97 	bl	8005264 <_Balloc>
 8005736:	4605      	mov	r5, r0
 8005738:	b948      	cbnz	r0, 800574e <__lshift+0x3e>
 800573a:	4602      	mov	r2, r0
 800573c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005740:	4b27      	ldr	r3, [pc, #156]	@ (80057e0 <__lshift+0xd0>)
 8005742:	4828      	ldr	r0, [pc, #160]	@ (80057e4 <__lshift+0xd4>)
 8005744:	f001 fb02 	bl	8006d4c <__assert_func>
 8005748:	3101      	adds	r1, #1
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	e7ee      	b.n	800572c <__lshift+0x1c>
 800574e:	2300      	movs	r3, #0
 8005750:	f100 0114 	add.w	r1, r0, #20
 8005754:	f100 0210 	add.w	r2, r0, #16
 8005758:	4618      	mov	r0, r3
 800575a:	4553      	cmp	r3, sl
 800575c:	db33      	blt.n	80057c6 <__lshift+0xb6>
 800575e:	6920      	ldr	r0, [r4, #16]
 8005760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005764:	f104 0314 	add.w	r3, r4, #20
 8005768:	f019 091f 	ands.w	r9, r9, #31
 800576c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005770:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005774:	d02b      	beq.n	80057ce <__lshift+0xbe>
 8005776:	468a      	mov	sl, r1
 8005778:	2200      	movs	r2, #0
 800577a:	f1c9 0e20 	rsb	lr, r9, #32
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	fa00 f009 	lsl.w	r0, r0, r9
 8005784:	4310      	orrs	r0, r2
 8005786:	f84a 0b04 	str.w	r0, [sl], #4
 800578a:	f853 2b04 	ldr.w	r2, [r3], #4
 800578e:	459c      	cmp	ip, r3
 8005790:	fa22 f20e 	lsr.w	r2, r2, lr
 8005794:	d8f3      	bhi.n	800577e <__lshift+0x6e>
 8005796:	ebac 0304 	sub.w	r3, ip, r4
 800579a:	3b15      	subs	r3, #21
 800579c:	f023 0303 	bic.w	r3, r3, #3
 80057a0:	3304      	adds	r3, #4
 80057a2:	f104 0015 	add.w	r0, r4, #21
 80057a6:	4584      	cmp	ip, r0
 80057a8:	bf38      	it	cc
 80057aa:	2304      	movcc	r3, #4
 80057ac:	50ca      	str	r2, [r1, r3]
 80057ae:	b10a      	cbz	r2, 80057b4 <__lshift+0xa4>
 80057b0:	f108 0602 	add.w	r6, r8, #2
 80057b4:	3e01      	subs	r6, #1
 80057b6:	4638      	mov	r0, r7
 80057b8:	4621      	mov	r1, r4
 80057ba:	612e      	str	r6, [r5, #16]
 80057bc:	f7ff fd92 	bl	80052e4 <_Bfree>
 80057c0:	4628      	mov	r0, r5
 80057c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80057ca:	3301      	adds	r3, #1
 80057cc:	e7c5      	b.n	800575a <__lshift+0x4a>
 80057ce:	3904      	subs	r1, #4
 80057d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057d4:	459c      	cmp	ip, r3
 80057d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80057da:	d8f9      	bhi.n	80057d0 <__lshift+0xc0>
 80057dc:	e7ea      	b.n	80057b4 <__lshift+0xa4>
 80057de:	bf00      	nop
 80057e0:	08007b5b 	.word	0x08007b5b
 80057e4:	08007b6c 	.word	0x08007b6c

080057e8 <__mcmp>:
 80057e8:	4603      	mov	r3, r0
 80057ea:	690a      	ldr	r2, [r1, #16]
 80057ec:	6900      	ldr	r0, [r0, #16]
 80057ee:	b530      	push	{r4, r5, lr}
 80057f0:	1a80      	subs	r0, r0, r2
 80057f2:	d10e      	bne.n	8005812 <__mcmp+0x2a>
 80057f4:	3314      	adds	r3, #20
 80057f6:	3114      	adds	r1, #20
 80057f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80057fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005800:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005804:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005808:	4295      	cmp	r5, r2
 800580a:	d003      	beq.n	8005814 <__mcmp+0x2c>
 800580c:	d205      	bcs.n	800581a <__mcmp+0x32>
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
 8005812:	bd30      	pop	{r4, r5, pc}
 8005814:	42a3      	cmp	r3, r4
 8005816:	d3f3      	bcc.n	8005800 <__mcmp+0x18>
 8005818:	e7fb      	b.n	8005812 <__mcmp+0x2a>
 800581a:	2001      	movs	r0, #1
 800581c:	e7f9      	b.n	8005812 <__mcmp+0x2a>
	...

08005820 <__mdiff>:
 8005820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	4689      	mov	r9, r1
 8005826:	4606      	mov	r6, r0
 8005828:	4611      	mov	r1, r2
 800582a:	4648      	mov	r0, r9
 800582c:	4614      	mov	r4, r2
 800582e:	f7ff ffdb 	bl	80057e8 <__mcmp>
 8005832:	1e05      	subs	r5, r0, #0
 8005834:	d112      	bne.n	800585c <__mdiff+0x3c>
 8005836:	4629      	mov	r1, r5
 8005838:	4630      	mov	r0, r6
 800583a:	f7ff fd13 	bl	8005264 <_Balloc>
 800583e:	4602      	mov	r2, r0
 8005840:	b928      	cbnz	r0, 800584e <__mdiff+0x2e>
 8005842:	f240 2137 	movw	r1, #567	@ 0x237
 8005846:	4b3e      	ldr	r3, [pc, #248]	@ (8005940 <__mdiff+0x120>)
 8005848:	483e      	ldr	r0, [pc, #248]	@ (8005944 <__mdiff+0x124>)
 800584a:	f001 fa7f 	bl	8006d4c <__assert_func>
 800584e:	2301      	movs	r3, #1
 8005850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005854:	4610      	mov	r0, r2
 8005856:	b003      	add	sp, #12
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585c:	bfbc      	itt	lt
 800585e:	464b      	movlt	r3, r9
 8005860:	46a1      	movlt	r9, r4
 8005862:	4630      	mov	r0, r6
 8005864:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005868:	bfba      	itte	lt
 800586a:	461c      	movlt	r4, r3
 800586c:	2501      	movlt	r5, #1
 800586e:	2500      	movge	r5, #0
 8005870:	f7ff fcf8 	bl	8005264 <_Balloc>
 8005874:	4602      	mov	r2, r0
 8005876:	b918      	cbnz	r0, 8005880 <__mdiff+0x60>
 8005878:	f240 2145 	movw	r1, #581	@ 0x245
 800587c:	4b30      	ldr	r3, [pc, #192]	@ (8005940 <__mdiff+0x120>)
 800587e:	e7e3      	b.n	8005848 <__mdiff+0x28>
 8005880:	f100 0b14 	add.w	fp, r0, #20
 8005884:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005888:	f109 0310 	add.w	r3, r9, #16
 800588c:	60c5      	str	r5, [r0, #12]
 800588e:	f04f 0c00 	mov.w	ip, #0
 8005892:	f109 0514 	add.w	r5, r9, #20
 8005896:	46d9      	mov	r9, fp
 8005898:	6926      	ldr	r6, [r4, #16]
 800589a:	f104 0e14 	add.w	lr, r4, #20
 800589e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80058a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80058ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80058b2:	b281      	uxth	r1, r0
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	fa1f f38a 	uxth.w	r3, sl
 80058ba:	1a5b      	subs	r3, r3, r1
 80058bc:	0c00      	lsrs	r0, r0, #16
 80058be:	4463      	add	r3, ip
 80058c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80058c4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80058ce:	4576      	cmp	r6, lr
 80058d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058d4:	f849 3b04 	str.w	r3, [r9], #4
 80058d8:	d8e6      	bhi.n	80058a8 <__mdiff+0x88>
 80058da:	1b33      	subs	r3, r6, r4
 80058dc:	3b15      	subs	r3, #21
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	3415      	adds	r4, #21
 80058e4:	3304      	adds	r3, #4
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	bf38      	it	cc
 80058ea:	2304      	movcc	r3, #4
 80058ec:	441d      	add	r5, r3
 80058ee:	445b      	add	r3, fp
 80058f0:	461e      	mov	r6, r3
 80058f2:	462c      	mov	r4, r5
 80058f4:	4544      	cmp	r4, r8
 80058f6:	d30e      	bcc.n	8005916 <__mdiff+0xf6>
 80058f8:	f108 0103 	add.w	r1, r8, #3
 80058fc:	1b49      	subs	r1, r1, r5
 80058fe:	f021 0103 	bic.w	r1, r1, #3
 8005902:	3d03      	subs	r5, #3
 8005904:	45a8      	cmp	r8, r5
 8005906:	bf38      	it	cc
 8005908:	2100      	movcc	r1, #0
 800590a:	440b      	add	r3, r1
 800590c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005910:	b199      	cbz	r1, 800593a <__mdiff+0x11a>
 8005912:	6117      	str	r7, [r2, #16]
 8005914:	e79e      	b.n	8005854 <__mdiff+0x34>
 8005916:	46e6      	mov	lr, ip
 8005918:	f854 1b04 	ldr.w	r1, [r4], #4
 800591c:	fa1f fc81 	uxth.w	ip, r1
 8005920:	44f4      	add	ip, lr
 8005922:	0c08      	lsrs	r0, r1, #16
 8005924:	4471      	add	r1, lr
 8005926:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800592a:	b289      	uxth	r1, r1
 800592c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005930:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005934:	f846 1b04 	str.w	r1, [r6], #4
 8005938:	e7dc      	b.n	80058f4 <__mdiff+0xd4>
 800593a:	3f01      	subs	r7, #1
 800593c:	e7e6      	b.n	800590c <__mdiff+0xec>
 800593e:	bf00      	nop
 8005940:	08007b5b 	.word	0x08007b5b
 8005944:	08007b6c 	.word	0x08007b6c

08005948 <__ulp>:
 8005948:	4b0e      	ldr	r3, [pc, #56]	@ (8005984 <__ulp+0x3c>)
 800594a:	400b      	ands	r3, r1
 800594c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005950:	2b00      	cmp	r3, #0
 8005952:	dc08      	bgt.n	8005966 <__ulp+0x1e>
 8005954:	425b      	negs	r3, r3
 8005956:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800595a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800595e:	da04      	bge.n	800596a <__ulp+0x22>
 8005960:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005964:	4113      	asrs	r3, r2
 8005966:	2200      	movs	r2, #0
 8005968:	e008      	b.n	800597c <__ulp+0x34>
 800596a:	f1a2 0314 	sub.w	r3, r2, #20
 800596e:	2b1e      	cmp	r3, #30
 8005970:	bfd6      	itet	le
 8005972:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005976:	2201      	movgt	r2, #1
 8005978:	40da      	lsrle	r2, r3
 800597a:	2300      	movs	r3, #0
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	7ff00000 	.word	0x7ff00000

08005988 <__b2d>:
 8005988:	6902      	ldr	r2, [r0, #16]
 800598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598c:	f100 0614 	add.w	r6, r0, #20
 8005990:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005994:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005998:	4f1e      	ldr	r7, [pc, #120]	@ (8005a14 <__b2d+0x8c>)
 800599a:	4620      	mov	r0, r4
 800599c:	f7ff fd54 	bl	8005448 <__hi0bits>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f1c0 0020 	rsb	r0, r0, #32
 80059a6:	2b0a      	cmp	r3, #10
 80059a8:	f1a2 0504 	sub.w	r5, r2, #4
 80059ac:	6008      	str	r0, [r1, #0]
 80059ae:	dc12      	bgt.n	80059d6 <__b2d+0x4e>
 80059b0:	42ae      	cmp	r6, r5
 80059b2:	bf2c      	ite	cs
 80059b4:	2200      	movcs	r2, #0
 80059b6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80059ba:	f1c3 0c0b 	rsb	ip, r3, #11
 80059be:	3315      	adds	r3, #21
 80059c0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80059c4:	fa04 f303 	lsl.w	r3, r4, r3
 80059c8:	fa22 f20c 	lsr.w	r2, r2, ip
 80059cc:	ea4e 0107 	orr.w	r1, lr, r7
 80059d0:	431a      	orrs	r2, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d6:	42ae      	cmp	r6, r5
 80059d8:	bf36      	itet	cc
 80059da:	f1a2 0508 	subcc.w	r5, r2, #8
 80059de:	2200      	movcs	r2, #0
 80059e0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80059e4:	3b0b      	subs	r3, #11
 80059e6:	d012      	beq.n	8005a0e <__b2d+0x86>
 80059e8:	f1c3 0720 	rsb	r7, r3, #32
 80059ec:	fa22 f107 	lsr.w	r1, r2, r7
 80059f0:	409c      	lsls	r4, r3
 80059f2:	430c      	orrs	r4, r1
 80059f4:	42b5      	cmp	r5, r6
 80059f6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80059fa:	bf94      	ite	ls
 80059fc:	2400      	movls	r4, #0
 80059fe:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005a02:	409a      	lsls	r2, r3
 8005a04:	40fc      	lsrs	r4, r7
 8005a06:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005a0a:	4322      	orrs	r2, r4
 8005a0c:	e7e1      	b.n	80059d2 <__b2d+0x4a>
 8005a0e:	ea44 0107 	orr.w	r1, r4, r7
 8005a12:	e7de      	b.n	80059d2 <__b2d+0x4a>
 8005a14:	3ff00000 	.word	0x3ff00000

08005a18 <__d2b>:
 8005a18:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4690      	mov	r8, r2
 8005a20:	4699      	mov	r9, r3
 8005a22:	9e08      	ldr	r6, [sp, #32]
 8005a24:	f7ff fc1e 	bl	8005264 <_Balloc>
 8005a28:	4604      	mov	r4, r0
 8005a2a:	b930      	cbnz	r0, 8005a3a <__d2b+0x22>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a32:	4b23      	ldr	r3, [pc, #140]	@ (8005ac0 <__d2b+0xa8>)
 8005a34:	4823      	ldr	r0, [pc, #140]	@ (8005ac4 <__d2b+0xac>)
 8005a36:	f001 f989 	bl	8006d4c <__assert_func>
 8005a3a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a42:	b10d      	cbz	r5, 8005a48 <__d2b+0x30>
 8005a44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	f1b8 0300 	subs.w	r3, r8, #0
 8005a4e:	d024      	beq.n	8005a9a <__d2b+0x82>
 8005a50:	4668      	mov	r0, sp
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	f7ff fd17 	bl	8005486 <__lo0bits>
 8005a58:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a5c:	b1d8      	cbz	r0, 8005a96 <__d2b+0x7e>
 8005a5e:	f1c0 0320 	rsb	r3, r0, #32
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	430b      	orrs	r3, r1
 8005a68:	40c2      	lsrs	r2, r0
 8005a6a:	6163      	str	r3, [r4, #20]
 8005a6c:	9201      	str	r2, [sp, #4]
 8005a6e:	9b01      	ldr	r3, [sp, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bf0c      	ite	eq
 8005a74:	2201      	moveq	r2, #1
 8005a76:	2202      	movne	r2, #2
 8005a78:	61a3      	str	r3, [r4, #24]
 8005a7a:	6122      	str	r2, [r4, #16]
 8005a7c:	b1ad      	cbz	r5, 8005aaa <__d2b+0x92>
 8005a7e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a82:	4405      	add	r5, r0
 8005a84:	6035      	str	r5, [r6, #0]
 8005a86:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a8c:	6018      	str	r0, [r3, #0]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	b002      	add	sp, #8
 8005a92:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005a96:	6161      	str	r1, [r4, #20]
 8005a98:	e7e9      	b.n	8005a6e <__d2b+0x56>
 8005a9a:	a801      	add	r0, sp, #4
 8005a9c:	f7ff fcf3 	bl	8005486 <__lo0bits>
 8005aa0:	9b01      	ldr	r3, [sp, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	6163      	str	r3, [r4, #20]
 8005aa6:	3020      	adds	r0, #32
 8005aa8:	e7e7      	b.n	8005a7a <__d2b+0x62>
 8005aaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005aae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ab2:	6030      	str	r0, [r6, #0]
 8005ab4:	6918      	ldr	r0, [r3, #16]
 8005ab6:	f7ff fcc7 	bl	8005448 <__hi0bits>
 8005aba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005abe:	e7e4      	b.n	8005a8a <__d2b+0x72>
 8005ac0:	08007b5b 	.word	0x08007b5b
 8005ac4:	08007b6c 	.word	0x08007b6c

08005ac8 <__ratio>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	b085      	sub	sp, #20
 8005ace:	e9cd 1000 	strd	r1, r0, [sp]
 8005ad2:	a902      	add	r1, sp, #8
 8005ad4:	f7ff ff58 	bl	8005988 <__b2d>
 8005ad8:	468b      	mov	fp, r1
 8005ada:	4606      	mov	r6, r0
 8005adc:	460f      	mov	r7, r1
 8005ade:	9800      	ldr	r0, [sp, #0]
 8005ae0:	a903      	add	r1, sp, #12
 8005ae2:	f7ff ff51 	bl	8005988 <__b2d>
 8005ae6:	460d      	mov	r5, r1
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	4689      	mov	r9, r1
 8005aec:	6919      	ldr	r1, [r3, #16]
 8005aee:	9b00      	ldr	r3, [sp, #0]
 8005af0:	4604      	mov	r4, r0
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	4630      	mov	r0, r6
 8005af6:	1ac9      	subs	r1, r1, r3
 8005af8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bfcd      	iteet	gt
 8005b06:	463a      	movgt	r2, r7
 8005b08:	462a      	movle	r2, r5
 8005b0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005b0e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005b12:	bfd8      	it	le
 8005b14:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005b18:	464b      	mov	r3, r9
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	f7fa fe05 	bl	800072c <__aeabi_ddiv>
 8005b22:	b005      	add	sp, #20
 8005b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b28 <__copybits>:
 8005b28:	3901      	subs	r1, #1
 8005b2a:	b570      	push	{r4, r5, r6, lr}
 8005b2c:	1149      	asrs	r1, r1, #5
 8005b2e:	6914      	ldr	r4, [r2, #16]
 8005b30:	3101      	adds	r1, #1
 8005b32:	f102 0314 	add.w	r3, r2, #20
 8005b36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b3e:	1f05      	subs	r5, r0, #4
 8005b40:	42a3      	cmp	r3, r4
 8005b42:	d30c      	bcc.n	8005b5e <__copybits+0x36>
 8005b44:	1aa3      	subs	r3, r4, r2
 8005b46:	3b11      	subs	r3, #17
 8005b48:	f023 0303 	bic.w	r3, r3, #3
 8005b4c:	3211      	adds	r2, #17
 8005b4e:	42a2      	cmp	r2, r4
 8005b50:	bf88      	it	hi
 8005b52:	2300      	movhi	r3, #0
 8005b54:	4418      	add	r0, r3
 8005b56:	2300      	movs	r3, #0
 8005b58:	4288      	cmp	r0, r1
 8005b5a:	d305      	bcc.n	8005b68 <__copybits+0x40>
 8005b5c:	bd70      	pop	{r4, r5, r6, pc}
 8005b5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005b62:	f845 6f04 	str.w	r6, [r5, #4]!
 8005b66:	e7eb      	b.n	8005b40 <__copybits+0x18>
 8005b68:	f840 3b04 	str.w	r3, [r0], #4
 8005b6c:	e7f4      	b.n	8005b58 <__copybits+0x30>

08005b6e <__any_on>:
 8005b6e:	f100 0214 	add.w	r2, r0, #20
 8005b72:	6900      	ldr	r0, [r0, #16]
 8005b74:	114b      	asrs	r3, r1, #5
 8005b76:	4298      	cmp	r0, r3
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	db11      	blt.n	8005ba0 <__any_on+0x32>
 8005b7c:	dd0a      	ble.n	8005b94 <__any_on+0x26>
 8005b7e:	f011 011f 	ands.w	r1, r1, #31
 8005b82:	d007      	beq.n	8005b94 <__any_on+0x26>
 8005b84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b88:	fa24 f001 	lsr.w	r0, r4, r1
 8005b8c:	fa00 f101 	lsl.w	r1, r0, r1
 8005b90:	428c      	cmp	r4, r1
 8005b92:	d10b      	bne.n	8005bac <__any_on+0x3e>
 8005b94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d803      	bhi.n	8005ba4 <__any_on+0x36>
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	bd10      	pop	{r4, pc}
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	e7f7      	b.n	8005b94 <__any_on+0x26>
 8005ba4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d0f5      	beq.n	8005b98 <__any_on+0x2a>
 8005bac:	2001      	movs	r0, #1
 8005bae:	e7f6      	b.n	8005b9e <__any_on+0x30>

08005bb0 <sulp>:
 8005bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb4:	460f      	mov	r7, r1
 8005bb6:	4690      	mov	r8, r2
 8005bb8:	f7ff fec6 	bl	8005948 <__ulp>
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	f1b8 0f00 	cmp.w	r8, #0
 8005bc4:	d011      	beq.n	8005bea <sulp+0x3a>
 8005bc6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005bca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dd0b      	ble.n	8005bea <sulp+0x3a>
 8005bd2:	2400      	movs	r4, #0
 8005bd4:	051b      	lsls	r3, r3, #20
 8005bd6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005bda:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005bde:	4622      	mov	r2, r4
 8005be0:	462b      	mov	r3, r5
 8005be2:	f7fa fc79 	bl	80004d8 <__aeabi_dmul>
 8005be6:	4604      	mov	r4, r0
 8005be8:	460d      	mov	r5, r1
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf2:	0000      	movs	r0, r0
 8005bf4:	0000      	movs	r0, r0
	...

08005bf8 <_strtod_l>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	b09f      	sub	sp, #124	@ 0x7c
 8005bfe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005c00:	2200      	movs	r2, #0
 8005c02:	460c      	mov	r4, r1
 8005c04:	921a      	str	r2, [sp, #104]	@ 0x68
 8005c06:	f04f 0a00 	mov.w	sl, #0
 8005c0a:	f04f 0b00 	mov.w	fp, #0
 8005c0e:	460a      	mov	r2, r1
 8005c10:	9005      	str	r0, [sp, #20]
 8005c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c14:	7811      	ldrb	r1, [r2, #0]
 8005c16:	292b      	cmp	r1, #43	@ 0x2b
 8005c18:	d048      	beq.n	8005cac <_strtod_l+0xb4>
 8005c1a:	d836      	bhi.n	8005c8a <_strtod_l+0x92>
 8005c1c:	290d      	cmp	r1, #13
 8005c1e:	d830      	bhi.n	8005c82 <_strtod_l+0x8a>
 8005c20:	2908      	cmp	r1, #8
 8005c22:	d830      	bhi.n	8005c86 <_strtod_l+0x8e>
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d039      	beq.n	8005c9c <_strtod_l+0xa4>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005c2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005c2e:	782a      	ldrb	r2, [r5, #0]
 8005c30:	2a30      	cmp	r2, #48	@ 0x30
 8005c32:	f040 80b1 	bne.w	8005d98 <_strtod_l+0x1a0>
 8005c36:	786a      	ldrb	r2, [r5, #1]
 8005c38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c3c:	2a58      	cmp	r2, #88	@ 0x58
 8005c3e:	d16c      	bne.n	8005d1a <_strtod_l+0x122>
 8005c40:	9302      	str	r3, [sp, #8]
 8005c42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c44:	4a8e      	ldr	r2, [pc, #568]	@ (8005e80 <_strtod_l+0x288>)
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	ab1a      	add	r3, sp, #104	@ 0x68
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	9805      	ldr	r0, [sp, #20]
 8005c4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005c50:	a919      	add	r1, sp, #100	@ 0x64
 8005c52:	f001 f915 	bl	8006e80 <__gethex>
 8005c56:	f010 060f 	ands.w	r6, r0, #15
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	d005      	beq.n	8005c6a <_strtod_l+0x72>
 8005c5e:	2e06      	cmp	r6, #6
 8005c60:	d126      	bne.n	8005cb0 <_strtod_l+0xb8>
 8005c62:	2300      	movs	r3, #0
 8005c64:	3501      	adds	r5, #1
 8005c66:	9519      	str	r5, [sp, #100]	@ 0x64
 8005c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 8584 	bne.w	800677a <_strtod_l+0xb82>
 8005c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c74:	b1bb      	cbz	r3, 8005ca6 <_strtod_l+0xae>
 8005c76:	4650      	mov	r0, sl
 8005c78:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005c7c:	b01f      	add	sp, #124	@ 0x7c
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	2920      	cmp	r1, #32
 8005c84:	d1d0      	bne.n	8005c28 <_strtod_l+0x30>
 8005c86:	3201      	adds	r2, #1
 8005c88:	e7c3      	b.n	8005c12 <_strtod_l+0x1a>
 8005c8a:	292d      	cmp	r1, #45	@ 0x2d
 8005c8c:	d1cc      	bne.n	8005c28 <_strtod_l+0x30>
 8005c8e:	2101      	movs	r1, #1
 8005c90:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005c92:	1c51      	adds	r1, r2, #1
 8005c94:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c96:	7852      	ldrb	r2, [r2, #1]
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	d1c7      	bne.n	8005c2c <_strtod_l+0x34>
 8005c9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c9e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f040 8568 	bne.w	8006776 <_strtod_l+0xb7e>
 8005ca6:	4650      	mov	r0, sl
 8005ca8:	4659      	mov	r1, fp
 8005caa:	e7e7      	b.n	8005c7c <_strtod_l+0x84>
 8005cac:	2100      	movs	r1, #0
 8005cae:	e7ef      	b.n	8005c90 <_strtod_l+0x98>
 8005cb0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005cb2:	b13a      	cbz	r2, 8005cc4 <_strtod_l+0xcc>
 8005cb4:	2135      	movs	r1, #53	@ 0x35
 8005cb6:	a81c      	add	r0, sp, #112	@ 0x70
 8005cb8:	f7ff ff36 	bl	8005b28 <__copybits>
 8005cbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005cbe:	9805      	ldr	r0, [sp, #20]
 8005cc0:	f7ff fb10 	bl	80052e4 <_Bfree>
 8005cc4:	3e01      	subs	r6, #1
 8005cc6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005cc8:	2e04      	cmp	r6, #4
 8005cca:	d806      	bhi.n	8005cda <_strtod_l+0xe2>
 8005ccc:	e8df f006 	tbb	[pc, r6]
 8005cd0:	201d0314 	.word	0x201d0314
 8005cd4:	14          	.byte	0x14
 8005cd5:	00          	.byte	0x00
 8005cd6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005cda:	05e1      	lsls	r1, r4, #23
 8005cdc:	bf48      	it	mi
 8005cde:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005ce2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ce6:	0d1b      	lsrs	r3, r3, #20
 8005ce8:	051b      	lsls	r3, r3, #20
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1bd      	bne.n	8005c6a <_strtod_l+0x72>
 8005cee:	f7fe fb2b 	bl	8004348 <__errno>
 8005cf2:	2322      	movs	r3, #34	@ 0x22
 8005cf4:	6003      	str	r3, [r0, #0]
 8005cf6:	e7b8      	b.n	8005c6a <_strtod_l+0x72>
 8005cf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005cfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005d00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d04:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d08:	e7e7      	b.n	8005cda <_strtod_l+0xe2>
 8005d0a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005e84 <_strtod_l+0x28c>
 8005d0e:	e7e4      	b.n	8005cda <_strtod_l+0xe2>
 8005d10:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005d14:	f04f 3aff 	mov.w	sl, #4294967295
 8005d18:	e7df      	b.n	8005cda <_strtod_l+0xe2>
 8005d1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b30      	cmp	r3, #48	@ 0x30
 8005d24:	d0f9      	beq.n	8005d1a <_strtod_l+0x122>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d09f      	beq.n	8005c6a <_strtod_l+0x72>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d30:	220a      	movs	r2, #10
 8005d32:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d34:	2300      	movs	r3, #0
 8005d36:	461f      	mov	r7, r3
 8005d38:	9308      	str	r3, [sp, #32]
 8005d3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d3c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005d3e:	7805      	ldrb	r5, [r0, #0]
 8005d40:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005d44:	b2d9      	uxtb	r1, r3
 8005d46:	2909      	cmp	r1, #9
 8005d48:	d928      	bls.n	8005d9c <_strtod_l+0x1a4>
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	494e      	ldr	r1, [pc, #312]	@ (8005e88 <_strtod_l+0x290>)
 8005d4e:	f000 ffc7 	bl	8006ce0 <strncmp>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d032      	beq.n	8005dbc <_strtod_l+0x1c4>
 8005d56:	2000      	movs	r0, #0
 8005d58:	462a      	mov	r2, r5
 8005d5a:	4681      	mov	r9, r0
 8005d5c:	463d      	mov	r5, r7
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2a65      	cmp	r2, #101	@ 0x65
 8005d62:	d001      	beq.n	8005d68 <_strtod_l+0x170>
 8005d64:	2a45      	cmp	r2, #69	@ 0x45
 8005d66:	d114      	bne.n	8005d92 <_strtod_l+0x19a>
 8005d68:	b91d      	cbnz	r5, 8005d72 <_strtod_l+0x17a>
 8005d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d6c:	4302      	orrs	r2, r0
 8005d6e:	d095      	beq.n	8005c9c <_strtod_l+0xa4>
 8005d70:	2500      	movs	r5, #0
 8005d72:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005d74:	1c62      	adds	r2, r4, #1
 8005d76:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d78:	7862      	ldrb	r2, [r4, #1]
 8005d7a:	2a2b      	cmp	r2, #43	@ 0x2b
 8005d7c:	d077      	beq.n	8005e6e <_strtod_l+0x276>
 8005d7e:	2a2d      	cmp	r2, #45	@ 0x2d
 8005d80:	d07b      	beq.n	8005e7a <_strtod_l+0x282>
 8005d82:	f04f 0c00 	mov.w	ip, #0
 8005d86:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005d8a:	2909      	cmp	r1, #9
 8005d8c:	f240 8082 	bls.w	8005e94 <_strtod_l+0x29c>
 8005d90:	9419      	str	r4, [sp, #100]	@ 0x64
 8005d92:	f04f 0800 	mov.w	r8, #0
 8005d96:	e0a2      	b.n	8005ede <_strtod_l+0x2e6>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e7c7      	b.n	8005d2c <_strtod_l+0x134>
 8005d9c:	2f08      	cmp	r7, #8
 8005d9e:	bfd5      	itete	le
 8005da0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005da2:	9908      	ldrgt	r1, [sp, #32]
 8005da4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005da8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005dac:	f100 0001 	add.w	r0, r0, #1
 8005db0:	bfd4      	ite	le
 8005db2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005db4:	9308      	strgt	r3, [sp, #32]
 8005db6:	3701      	adds	r7, #1
 8005db8:	9019      	str	r0, [sp, #100]	@ 0x64
 8005dba:	e7bf      	b.n	8005d3c <_strtod_l+0x144>
 8005dbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8005dc2:	785a      	ldrb	r2, [r3, #1]
 8005dc4:	b37f      	cbz	r7, 8005e26 <_strtod_l+0x22e>
 8005dc6:	4681      	mov	r9, r0
 8005dc8:	463d      	mov	r5, r7
 8005dca:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005dce:	2b09      	cmp	r3, #9
 8005dd0:	d912      	bls.n	8005df8 <_strtod_l+0x200>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e7c4      	b.n	8005d60 <_strtod_l+0x168>
 8005dd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dd8:	3001      	adds	r0, #1
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	9219      	str	r2, [sp, #100]	@ 0x64
 8005dde:	785a      	ldrb	r2, [r3, #1]
 8005de0:	2a30      	cmp	r2, #48	@ 0x30
 8005de2:	d0f8      	beq.n	8005dd6 <_strtod_l+0x1de>
 8005de4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	f200 84cb 	bhi.w	8006784 <_strtod_l+0xb8c>
 8005dee:	4681      	mov	r9, r0
 8005df0:	2000      	movs	r0, #0
 8005df2:	4605      	mov	r5, r0
 8005df4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005df6:	930c      	str	r3, [sp, #48]	@ 0x30
 8005df8:	3a30      	subs	r2, #48	@ 0x30
 8005dfa:	f100 0301 	add.w	r3, r0, #1
 8005dfe:	d02a      	beq.n	8005e56 <_strtod_l+0x25e>
 8005e00:	4499      	add	r9, r3
 8005e02:	210a      	movs	r1, #10
 8005e04:	462b      	mov	r3, r5
 8005e06:	eb00 0c05 	add.w	ip, r0, r5
 8005e0a:	4563      	cmp	r3, ip
 8005e0c:	d10d      	bne.n	8005e2a <_strtod_l+0x232>
 8005e0e:	1c69      	adds	r1, r5, #1
 8005e10:	4401      	add	r1, r0
 8005e12:	4428      	add	r0, r5
 8005e14:	2808      	cmp	r0, #8
 8005e16:	dc16      	bgt.n	8005e46 <_strtod_l+0x24e>
 8005e18:	230a      	movs	r3, #10
 8005e1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e1c:	fb03 2300 	mla	r3, r3, r0, r2
 8005e20:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e22:	2300      	movs	r3, #0
 8005e24:	e018      	b.n	8005e58 <_strtod_l+0x260>
 8005e26:	4638      	mov	r0, r7
 8005e28:	e7da      	b.n	8005de0 <_strtod_l+0x1e8>
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	f103 0301 	add.w	r3, r3, #1
 8005e30:	dc03      	bgt.n	8005e3a <_strtod_l+0x242>
 8005e32:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005e34:	434e      	muls	r6, r1
 8005e36:	960a      	str	r6, [sp, #40]	@ 0x28
 8005e38:	e7e7      	b.n	8005e0a <_strtod_l+0x212>
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	bfde      	ittt	le
 8005e3e:	9e08      	ldrle	r6, [sp, #32]
 8005e40:	434e      	mulle	r6, r1
 8005e42:	9608      	strle	r6, [sp, #32]
 8005e44:	e7e1      	b.n	8005e0a <_strtod_l+0x212>
 8005e46:	280f      	cmp	r0, #15
 8005e48:	dceb      	bgt.n	8005e22 <_strtod_l+0x22a>
 8005e4a:	230a      	movs	r3, #10
 8005e4c:	9808      	ldr	r0, [sp, #32]
 8005e4e:	fb03 2300 	mla	r3, r3, r0, r2
 8005e52:	9308      	str	r3, [sp, #32]
 8005e54:	e7e5      	b.n	8005e22 <_strtod_l+0x22a>
 8005e56:	4629      	mov	r1, r5
 8005e58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e5a:	460d      	mov	r5, r1
 8005e5c:	1c50      	adds	r0, r2, #1
 8005e5e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005e60:	7852      	ldrb	r2, [r2, #1]
 8005e62:	4618      	mov	r0, r3
 8005e64:	e7b1      	b.n	8005dca <_strtod_l+0x1d2>
 8005e66:	f04f 0900 	mov.w	r9, #0
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e77d      	b.n	8005d6a <_strtod_l+0x172>
 8005e6e:	f04f 0c00 	mov.w	ip, #0
 8005e72:	1ca2      	adds	r2, r4, #2
 8005e74:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e76:	78a2      	ldrb	r2, [r4, #2]
 8005e78:	e785      	b.n	8005d86 <_strtod_l+0x18e>
 8005e7a:	f04f 0c01 	mov.w	ip, #1
 8005e7e:	e7f8      	b.n	8005e72 <_strtod_l+0x27a>
 8005e80:	08007ce0 	.word	0x08007ce0
 8005e84:	7ff00000 	.word	0x7ff00000
 8005e88:	08007cc8 	.word	0x08007cc8
 8005e8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e8e:	1c51      	adds	r1, r2, #1
 8005e90:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e92:	7852      	ldrb	r2, [r2, #1]
 8005e94:	2a30      	cmp	r2, #48	@ 0x30
 8005e96:	d0f9      	beq.n	8005e8c <_strtod_l+0x294>
 8005e98:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005e9c:	2908      	cmp	r1, #8
 8005e9e:	f63f af78 	bhi.w	8005d92 <_strtod_l+0x19a>
 8005ea2:	f04f 080a 	mov.w	r8, #10
 8005ea6:	3a30      	subs	r2, #48	@ 0x30
 8005ea8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005eac:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005eae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005eb0:	1c56      	adds	r6, r2, #1
 8005eb2:	9619      	str	r6, [sp, #100]	@ 0x64
 8005eb4:	7852      	ldrb	r2, [r2, #1]
 8005eb6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005eba:	f1be 0f09 	cmp.w	lr, #9
 8005ebe:	d939      	bls.n	8005f34 <_strtod_l+0x33c>
 8005ec0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ec2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005ec6:	1a76      	subs	r6, r6, r1
 8005ec8:	2e08      	cmp	r6, #8
 8005eca:	dc03      	bgt.n	8005ed4 <_strtod_l+0x2dc>
 8005ecc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005ece:	4588      	cmp	r8, r1
 8005ed0:	bfa8      	it	ge
 8005ed2:	4688      	movge	r8, r1
 8005ed4:	f1bc 0f00 	cmp.w	ip, #0
 8005ed8:	d001      	beq.n	8005ede <_strtod_l+0x2e6>
 8005eda:	f1c8 0800 	rsb	r8, r8, #0
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	d14e      	bne.n	8005f80 <_strtod_l+0x388>
 8005ee2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ee4:	4308      	orrs	r0, r1
 8005ee6:	f47f aec0 	bne.w	8005c6a <_strtod_l+0x72>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f47f aed6 	bne.w	8005c9c <_strtod_l+0xa4>
 8005ef0:	2a69      	cmp	r2, #105	@ 0x69
 8005ef2:	d028      	beq.n	8005f46 <_strtod_l+0x34e>
 8005ef4:	dc25      	bgt.n	8005f42 <_strtod_l+0x34a>
 8005ef6:	2a49      	cmp	r2, #73	@ 0x49
 8005ef8:	d025      	beq.n	8005f46 <_strtod_l+0x34e>
 8005efa:	2a4e      	cmp	r2, #78	@ 0x4e
 8005efc:	f47f aece 	bne.w	8005c9c <_strtod_l+0xa4>
 8005f00:	499a      	ldr	r1, [pc, #616]	@ (800616c <_strtod_l+0x574>)
 8005f02:	a819      	add	r0, sp, #100	@ 0x64
 8005f04:	f001 f9de 	bl	80072c4 <__match>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	f43f aec7 	beq.w	8005c9c <_strtod_l+0xa4>
 8005f0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b28      	cmp	r3, #40	@ 0x28
 8005f14:	d12e      	bne.n	8005f74 <_strtod_l+0x37c>
 8005f16:	4996      	ldr	r1, [pc, #600]	@ (8006170 <_strtod_l+0x578>)
 8005f18:	aa1c      	add	r2, sp, #112	@ 0x70
 8005f1a:	a819      	add	r0, sp, #100	@ 0x64
 8005f1c:	f001 f9e6 	bl	80072ec <__hexnan>
 8005f20:	2805      	cmp	r0, #5
 8005f22:	d127      	bne.n	8005f74 <_strtod_l+0x37c>
 8005f24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005f26:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005f2a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005f2e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005f32:	e69a      	b.n	8005c6a <_strtod_l+0x72>
 8005f34:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005f36:	fb08 2101 	mla	r1, r8, r1, r2
 8005f3a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005f3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f40:	e7b5      	b.n	8005eae <_strtod_l+0x2b6>
 8005f42:	2a6e      	cmp	r2, #110	@ 0x6e
 8005f44:	e7da      	b.n	8005efc <_strtod_l+0x304>
 8005f46:	498b      	ldr	r1, [pc, #556]	@ (8006174 <_strtod_l+0x57c>)
 8005f48:	a819      	add	r0, sp, #100	@ 0x64
 8005f4a:	f001 f9bb 	bl	80072c4 <__match>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f43f aea4 	beq.w	8005c9c <_strtod_l+0xa4>
 8005f54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f56:	4988      	ldr	r1, [pc, #544]	@ (8006178 <_strtod_l+0x580>)
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	a819      	add	r0, sp, #100	@ 0x64
 8005f5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f5e:	f001 f9b1 	bl	80072c4 <__match>
 8005f62:	b910      	cbnz	r0, 8005f6a <_strtod_l+0x372>
 8005f64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f66:	3301      	adds	r3, #1
 8005f68:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f6a:	f04f 0a00 	mov.w	sl, #0
 8005f6e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800617c <_strtod_l+0x584>
 8005f72:	e67a      	b.n	8005c6a <_strtod_l+0x72>
 8005f74:	4882      	ldr	r0, [pc, #520]	@ (8006180 <_strtod_l+0x588>)
 8005f76:	f000 fee3 	bl	8006d40 <nan>
 8005f7a:	4682      	mov	sl, r0
 8005f7c:	468b      	mov	fp, r1
 8005f7e:	e674      	b.n	8005c6a <_strtod_l+0x72>
 8005f80:	eba8 0309 	sub.w	r3, r8, r9
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	bf08      	it	eq
 8005f88:	462f      	moveq	r7, r5
 8005f8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f8c:	2d10      	cmp	r5, #16
 8005f8e:	462c      	mov	r4, r5
 8005f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f92:	bfa8      	it	ge
 8005f94:	2410      	movge	r4, #16
 8005f96:	f7fa fa25 	bl	80003e4 <__aeabi_ui2d>
 8005f9a:	2d09      	cmp	r5, #9
 8005f9c:	4682      	mov	sl, r0
 8005f9e:	468b      	mov	fp, r1
 8005fa0:	dc11      	bgt.n	8005fc6 <_strtod_l+0x3ce>
 8005fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f43f ae60 	beq.w	8005c6a <_strtod_l+0x72>
 8005faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fac:	dd76      	ble.n	800609c <_strtod_l+0x4a4>
 8005fae:	2b16      	cmp	r3, #22
 8005fb0:	dc5d      	bgt.n	800606e <_strtod_l+0x476>
 8005fb2:	4974      	ldr	r1, [pc, #464]	@ (8006184 <_strtod_l+0x58c>)
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fba:	465b      	mov	r3, fp
 8005fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fc0:	f7fa fa8a 	bl	80004d8 <__aeabi_dmul>
 8005fc4:	e7d9      	b.n	8005f7a <_strtod_l+0x382>
 8005fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8006184 <_strtod_l+0x58c>)
 8005fc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005fd0:	f7fa fa82 	bl	80004d8 <__aeabi_dmul>
 8005fd4:	4682      	mov	sl, r0
 8005fd6:	9808      	ldr	r0, [sp, #32]
 8005fd8:	468b      	mov	fp, r1
 8005fda:	f7fa fa03 	bl	80003e4 <__aeabi_ui2d>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4650      	mov	r0, sl
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	f7fa f8c1 	bl	800016c <__adddf3>
 8005fea:	2d0f      	cmp	r5, #15
 8005fec:	4682      	mov	sl, r0
 8005fee:	468b      	mov	fp, r1
 8005ff0:	ddd7      	ble.n	8005fa2 <_strtod_l+0x3aa>
 8005ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff4:	1b2c      	subs	r4, r5, r4
 8005ff6:	441c      	add	r4, r3
 8005ff8:	2c00      	cmp	r4, #0
 8005ffa:	f340 8096 	ble.w	800612a <_strtod_l+0x532>
 8005ffe:	f014 030f 	ands.w	r3, r4, #15
 8006002:	d00a      	beq.n	800601a <_strtod_l+0x422>
 8006004:	495f      	ldr	r1, [pc, #380]	@ (8006184 <_strtod_l+0x58c>)
 8006006:	4652      	mov	r2, sl
 8006008:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800600c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006010:	465b      	mov	r3, fp
 8006012:	f7fa fa61 	bl	80004d8 <__aeabi_dmul>
 8006016:	4682      	mov	sl, r0
 8006018:	468b      	mov	fp, r1
 800601a:	f034 040f 	bics.w	r4, r4, #15
 800601e:	d073      	beq.n	8006108 <_strtod_l+0x510>
 8006020:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006024:	dd48      	ble.n	80060b8 <_strtod_l+0x4c0>
 8006026:	2400      	movs	r4, #0
 8006028:	46a0      	mov	r8, r4
 800602a:	46a1      	mov	r9, r4
 800602c:	940a      	str	r4, [sp, #40]	@ 0x28
 800602e:	2322      	movs	r3, #34	@ 0x22
 8006030:	f04f 0a00 	mov.w	sl, #0
 8006034:	9a05      	ldr	r2, [sp, #20]
 8006036:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800617c <_strtod_l+0x584>
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	f43f ae13 	beq.w	8005c6a <_strtod_l+0x72>
 8006044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006046:	9805      	ldr	r0, [sp, #20]
 8006048:	f7ff f94c 	bl	80052e4 <_Bfree>
 800604c:	4649      	mov	r1, r9
 800604e:	9805      	ldr	r0, [sp, #20]
 8006050:	f7ff f948 	bl	80052e4 <_Bfree>
 8006054:	4641      	mov	r1, r8
 8006056:	9805      	ldr	r0, [sp, #20]
 8006058:	f7ff f944 	bl	80052e4 <_Bfree>
 800605c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800605e:	9805      	ldr	r0, [sp, #20]
 8006060:	f7ff f940 	bl	80052e4 <_Bfree>
 8006064:	4621      	mov	r1, r4
 8006066:	9805      	ldr	r0, [sp, #20]
 8006068:	f7ff f93c 	bl	80052e4 <_Bfree>
 800606c:	e5fd      	b.n	8005c6a <_strtod_l+0x72>
 800606e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006070:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006074:	4293      	cmp	r3, r2
 8006076:	dbbc      	blt.n	8005ff2 <_strtod_l+0x3fa>
 8006078:	4c42      	ldr	r4, [pc, #264]	@ (8006184 <_strtod_l+0x58c>)
 800607a:	f1c5 050f 	rsb	r5, r5, #15
 800607e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006082:	4652      	mov	r2, sl
 8006084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006088:	465b      	mov	r3, fp
 800608a:	f7fa fa25 	bl	80004d8 <__aeabi_dmul>
 800608e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006090:	1b5d      	subs	r5, r3, r5
 8006092:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006096:	e9d4 2300 	ldrd	r2, r3, [r4]
 800609a:	e791      	b.n	8005fc0 <_strtod_l+0x3c8>
 800609c:	3316      	adds	r3, #22
 800609e:	dba8      	blt.n	8005ff2 <_strtod_l+0x3fa>
 80060a0:	4b38      	ldr	r3, [pc, #224]	@ (8006184 <_strtod_l+0x58c>)
 80060a2:	eba9 0808 	sub.w	r8, r9, r8
 80060a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80060aa:	4650      	mov	r0, sl
 80060ac:	e9d8 2300 	ldrd	r2, r3, [r8]
 80060b0:	4659      	mov	r1, fp
 80060b2:	f7fa fb3b 	bl	800072c <__aeabi_ddiv>
 80060b6:	e760      	b.n	8005f7a <_strtod_l+0x382>
 80060b8:	4b33      	ldr	r3, [pc, #204]	@ (8006188 <_strtod_l+0x590>)
 80060ba:	4650      	mov	r0, sl
 80060bc:	9308      	str	r3, [sp, #32]
 80060be:	2300      	movs	r3, #0
 80060c0:	4659      	mov	r1, fp
 80060c2:	461e      	mov	r6, r3
 80060c4:	1124      	asrs	r4, r4, #4
 80060c6:	2c01      	cmp	r4, #1
 80060c8:	dc21      	bgt.n	800610e <_strtod_l+0x516>
 80060ca:	b10b      	cbz	r3, 80060d0 <_strtod_l+0x4d8>
 80060cc:	4682      	mov	sl, r0
 80060ce:	468b      	mov	fp, r1
 80060d0:	492d      	ldr	r1, [pc, #180]	@ (8006188 <_strtod_l+0x590>)
 80060d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80060d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80060da:	4652      	mov	r2, sl
 80060dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060e0:	465b      	mov	r3, fp
 80060e2:	f7fa f9f9 	bl	80004d8 <__aeabi_dmul>
 80060e6:	4b25      	ldr	r3, [pc, #148]	@ (800617c <_strtod_l+0x584>)
 80060e8:	460a      	mov	r2, r1
 80060ea:	400b      	ands	r3, r1
 80060ec:	4927      	ldr	r1, [pc, #156]	@ (800618c <_strtod_l+0x594>)
 80060ee:	4682      	mov	sl, r0
 80060f0:	428b      	cmp	r3, r1
 80060f2:	d898      	bhi.n	8006026 <_strtod_l+0x42e>
 80060f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf86      	itte	hi
 80060fc:	f04f 3aff 	movhi.w	sl, #4294967295
 8006100:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006190 <_strtod_l+0x598>
 8006104:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006108:	2300      	movs	r3, #0
 800610a:	9308      	str	r3, [sp, #32]
 800610c:	e07a      	b.n	8006204 <_strtod_l+0x60c>
 800610e:	07e2      	lsls	r2, r4, #31
 8006110:	d505      	bpl.n	800611e <_strtod_l+0x526>
 8006112:	9b08      	ldr	r3, [sp, #32]
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f7fa f9de 	bl	80004d8 <__aeabi_dmul>
 800611c:	2301      	movs	r3, #1
 800611e:	9a08      	ldr	r2, [sp, #32]
 8006120:	3601      	adds	r6, #1
 8006122:	3208      	adds	r2, #8
 8006124:	1064      	asrs	r4, r4, #1
 8006126:	9208      	str	r2, [sp, #32]
 8006128:	e7cd      	b.n	80060c6 <_strtod_l+0x4ce>
 800612a:	d0ed      	beq.n	8006108 <_strtod_l+0x510>
 800612c:	4264      	negs	r4, r4
 800612e:	f014 020f 	ands.w	r2, r4, #15
 8006132:	d00a      	beq.n	800614a <_strtod_l+0x552>
 8006134:	4b13      	ldr	r3, [pc, #76]	@ (8006184 <_strtod_l+0x58c>)
 8006136:	4650      	mov	r0, sl
 8006138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800613c:	4659      	mov	r1, fp
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	f7fa faf3 	bl	800072c <__aeabi_ddiv>
 8006146:	4682      	mov	sl, r0
 8006148:	468b      	mov	fp, r1
 800614a:	1124      	asrs	r4, r4, #4
 800614c:	d0dc      	beq.n	8006108 <_strtod_l+0x510>
 800614e:	2c1f      	cmp	r4, #31
 8006150:	dd20      	ble.n	8006194 <_strtod_l+0x59c>
 8006152:	2400      	movs	r4, #0
 8006154:	46a0      	mov	r8, r4
 8006156:	46a1      	mov	r9, r4
 8006158:	940a      	str	r4, [sp, #40]	@ 0x28
 800615a:	2322      	movs	r3, #34	@ 0x22
 800615c:	9a05      	ldr	r2, [sp, #20]
 800615e:	f04f 0a00 	mov.w	sl, #0
 8006162:	f04f 0b00 	mov.w	fp, #0
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e768      	b.n	800603c <_strtod_l+0x444>
 800616a:	bf00      	nop
 800616c:	08007ab3 	.word	0x08007ab3
 8006170:	08007ccc 	.word	0x08007ccc
 8006174:	08007aab 	.word	0x08007aab
 8006178:	08007ae2 	.word	0x08007ae2
 800617c:	7ff00000 	.word	0x7ff00000
 8006180:	08007e75 	.word	0x08007e75
 8006184:	08007c00 	.word	0x08007c00
 8006188:	08007bd8 	.word	0x08007bd8
 800618c:	7ca00000 	.word	0x7ca00000
 8006190:	7fefffff 	.word	0x7fefffff
 8006194:	f014 0310 	ands.w	r3, r4, #16
 8006198:	bf18      	it	ne
 800619a:	236a      	movne	r3, #106	@ 0x6a
 800619c:	4650      	mov	r0, sl
 800619e:	9308      	str	r3, [sp, #32]
 80061a0:	4659      	mov	r1, fp
 80061a2:	2300      	movs	r3, #0
 80061a4:	4ea9      	ldr	r6, [pc, #676]	@ (800644c <_strtod_l+0x854>)
 80061a6:	07e2      	lsls	r2, r4, #31
 80061a8:	d504      	bpl.n	80061b4 <_strtod_l+0x5bc>
 80061aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061ae:	f7fa f993 	bl	80004d8 <__aeabi_dmul>
 80061b2:	2301      	movs	r3, #1
 80061b4:	1064      	asrs	r4, r4, #1
 80061b6:	f106 0608 	add.w	r6, r6, #8
 80061ba:	d1f4      	bne.n	80061a6 <_strtod_l+0x5ae>
 80061bc:	b10b      	cbz	r3, 80061c2 <_strtod_l+0x5ca>
 80061be:	4682      	mov	sl, r0
 80061c0:	468b      	mov	fp, r1
 80061c2:	9b08      	ldr	r3, [sp, #32]
 80061c4:	b1b3      	cbz	r3, 80061f4 <_strtod_l+0x5fc>
 80061c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80061ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	4659      	mov	r1, fp
 80061d2:	dd0f      	ble.n	80061f4 <_strtod_l+0x5fc>
 80061d4:	2b1f      	cmp	r3, #31
 80061d6:	dd57      	ble.n	8006288 <_strtod_l+0x690>
 80061d8:	2b34      	cmp	r3, #52	@ 0x34
 80061da:	bfd8      	it	le
 80061dc:	f04f 33ff 	movle.w	r3, #4294967295
 80061e0:	f04f 0a00 	mov.w	sl, #0
 80061e4:	bfcf      	iteee	gt
 80061e6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80061ea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80061ee:	4093      	lslle	r3, r2
 80061f0:	ea03 0b01 	andle.w	fp, r3, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	2300      	movs	r3, #0
 80061f8:	4650      	mov	r0, sl
 80061fa:	4659      	mov	r1, fp
 80061fc:	f7fa fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8006200:	2800      	cmp	r0, #0
 8006202:	d1a6      	bne.n	8006152 <_strtod_l+0x55a>
 8006204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006206:	463a      	mov	r2, r7
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800620c:	462b      	mov	r3, r5
 800620e:	9805      	ldr	r0, [sp, #20]
 8006210:	f7ff f8d0 	bl	80053b4 <__s2b>
 8006214:	900a      	str	r0, [sp, #40]	@ 0x28
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f af05 	beq.w	8006026 <_strtod_l+0x42e>
 800621c:	2400      	movs	r4, #0
 800621e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006220:	eba9 0308 	sub.w	r3, r9, r8
 8006224:	2a00      	cmp	r2, #0
 8006226:	bfa8      	it	ge
 8006228:	2300      	movge	r3, #0
 800622a:	46a0      	mov	r8, r4
 800622c:	9312      	str	r3, [sp, #72]	@ 0x48
 800622e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006232:	9316      	str	r3, [sp, #88]	@ 0x58
 8006234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006236:	9805      	ldr	r0, [sp, #20]
 8006238:	6859      	ldr	r1, [r3, #4]
 800623a:	f7ff f813 	bl	8005264 <_Balloc>
 800623e:	4681      	mov	r9, r0
 8006240:	2800      	cmp	r0, #0
 8006242:	f43f aef4 	beq.w	800602e <_strtod_l+0x436>
 8006246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006248:	300c      	adds	r0, #12
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	f103 010c 	add.w	r1, r3, #12
 8006250:	3202      	adds	r2, #2
 8006252:	0092      	lsls	r2, r2, #2
 8006254:	f000 fd66 	bl	8006d24 <memcpy>
 8006258:	ab1c      	add	r3, sp, #112	@ 0x70
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4652      	mov	r2, sl
 8006262:	465b      	mov	r3, fp
 8006264:	9805      	ldr	r0, [sp, #20]
 8006266:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800626a:	f7ff fbd5 	bl	8005a18 <__d2b>
 800626e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006270:	2800      	cmp	r0, #0
 8006272:	f43f aedc 	beq.w	800602e <_strtod_l+0x436>
 8006276:	2101      	movs	r1, #1
 8006278:	9805      	ldr	r0, [sp, #20]
 800627a:	f7ff f931 	bl	80054e0 <__i2b>
 800627e:	4680      	mov	r8, r0
 8006280:	b948      	cbnz	r0, 8006296 <_strtod_l+0x69e>
 8006282:	f04f 0800 	mov.w	r8, #0
 8006286:	e6d2      	b.n	800602e <_strtod_l+0x436>
 8006288:	f04f 32ff 	mov.w	r2, #4294967295
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	ea03 0a0a 	and.w	sl, r3, sl
 8006294:	e7ae      	b.n	80061f4 <_strtod_l+0x5fc>
 8006296:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006298:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800629a:	2d00      	cmp	r5, #0
 800629c:	bfab      	itete	ge
 800629e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80062a0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80062a2:	18ef      	addge	r7, r5, r3
 80062a4:	1b5e      	sublt	r6, r3, r5
 80062a6:	9b08      	ldr	r3, [sp, #32]
 80062a8:	bfa8      	it	ge
 80062aa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80062ac:	eba5 0503 	sub.w	r5, r5, r3
 80062b0:	4415      	add	r5, r2
 80062b2:	4b67      	ldr	r3, [pc, #412]	@ (8006450 <_strtod_l+0x858>)
 80062b4:	f105 35ff 	add.w	r5, r5, #4294967295
 80062b8:	bfb8      	it	lt
 80062ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80062bc:	429d      	cmp	r5, r3
 80062be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80062c2:	da50      	bge.n	8006366 <_strtod_l+0x76e>
 80062c4:	1b5b      	subs	r3, r3, r5
 80062c6:	2b1f      	cmp	r3, #31
 80062c8:	f04f 0101 	mov.w	r1, #1
 80062cc:	eba2 0203 	sub.w	r2, r2, r3
 80062d0:	dc3d      	bgt.n	800634e <_strtod_l+0x756>
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062d8:	2300      	movs	r3, #0
 80062da:	9310      	str	r3, [sp, #64]	@ 0x40
 80062dc:	18bd      	adds	r5, r7, r2
 80062de:	9b08      	ldr	r3, [sp, #32]
 80062e0:	42af      	cmp	r7, r5
 80062e2:	4416      	add	r6, r2
 80062e4:	441e      	add	r6, r3
 80062e6:	463b      	mov	r3, r7
 80062e8:	bfa8      	it	ge
 80062ea:	462b      	movge	r3, r5
 80062ec:	42b3      	cmp	r3, r6
 80062ee:	bfa8      	it	ge
 80062f0:	4633      	movge	r3, r6
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bfc2      	ittt	gt
 80062f6:	1aed      	subgt	r5, r5, r3
 80062f8:	1af6      	subgt	r6, r6, r3
 80062fa:	1aff      	subgt	r7, r7, r3
 80062fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dd16      	ble.n	8006330 <_strtod_l+0x738>
 8006302:	4641      	mov	r1, r8
 8006304:	461a      	mov	r2, r3
 8006306:	9805      	ldr	r0, [sp, #20]
 8006308:	f7ff f9a8 	bl	800565c <__pow5mult>
 800630c:	4680      	mov	r8, r0
 800630e:	2800      	cmp	r0, #0
 8006310:	d0b7      	beq.n	8006282 <_strtod_l+0x68a>
 8006312:	4601      	mov	r1, r0
 8006314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006316:	9805      	ldr	r0, [sp, #20]
 8006318:	f7ff f8f8 	bl	800550c <__multiply>
 800631c:	900e      	str	r0, [sp, #56]	@ 0x38
 800631e:	2800      	cmp	r0, #0
 8006320:	f43f ae85 	beq.w	800602e <_strtod_l+0x436>
 8006324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006326:	9805      	ldr	r0, [sp, #20]
 8006328:	f7fe ffdc 	bl	80052e4 <_Bfree>
 800632c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800632e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006330:	2d00      	cmp	r5, #0
 8006332:	dc1d      	bgt.n	8006370 <_strtod_l+0x778>
 8006334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	dd23      	ble.n	8006382 <_strtod_l+0x78a>
 800633a:	4649      	mov	r1, r9
 800633c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800633e:	9805      	ldr	r0, [sp, #20]
 8006340:	f7ff f98c 	bl	800565c <__pow5mult>
 8006344:	4681      	mov	r9, r0
 8006346:	b9e0      	cbnz	r0, 8006382 <_strtod_l+0x78a>
 8006348:	f04f 0900 	mov.w	r9, #0
 800634c:	e66f      	b.n	800602e <_strtod_l+0x436>
 800634e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006352:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006356:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800635a:	35e2      	adds	r5, #226	@ 0xe2
 800635c:	fa01 f305 	lsl.w	r3, r1, r5
 8006360:	9310      	str	r3, [sp, #64]	@ 0x40
 8006362:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006364:	e7ba      	b.n	80062dc <_strtod_l+0x6e4>
 8006366:	2300      	movs	r3, #0
 8006368:	9310      	str	r3, [sp, #64]	@ 0x40
 800636a:	2301      	movs	r3, #1
 800636c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800636e:	e7b5      	b.n	80062dc <_strtod_l+0x6e4>
 8006370:	462a      	mov	r2, r5
 8006372:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006374:	9805      	ldr	r0, [sp, #20]
 8006376:	f7ff f9cb 	bl	8005710 <__lshift>
 800637a:	901a      	str	r0, [sp, #104]	@ 0x68
 800637c:	2800      	cmp	r0, #0
 800637e:	d1d9      	bne.n	8006334 <_strtod_l+0x73c>
 8006380:	e655      	b.n	800602e <_strtod_l+0x436>
 8006382:	2e00      	cmp	r6, #0
 8006384:	dd07      	ble.n	8006396 <_strtod_l+0x79e>
 8006386:	4649      	mov	r1, r9
 8006388:	4632      	mov	r2, r6
 800638a:	9805      	ldr	r0, [sp, #20]
 800638c:	f7ff f9c0 	bl	8005710 <__lshift>
 8006390:	4681      	mov	r9, r0
 8006392:	2800      	cmp	r0, #0
 8006394:	d0d8      	beq.n	8006348 <_strtod_l+0x750>
 8006396:	2f00      	cmp	r7, #0
 8006398:	dd08      	ble.n	80063ac <_strtod_l+0x7b4>
 800639a:	4641      	mov	r1, r8
 800639c:	463a      	mov	r2, r7
 800639e:	9805      	ldr	r0, [sp, #20]
 80063a0:	f7ff f9b6 	bl	8005710 <__lshift>
 80063a4:	4680      	mov	r8, r0
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f ae41 	beq.w	800602e <_strtod_l+0x436>
 80063ac:	464a      	mov	r2, r9
 80063ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063b0:	9805      	ldr	r0, [sp, #20]
 80063b2:	f7ff fa35 	bl	8005820 <__mdiff>
 80063b6:	4604      	mov	r4, r0
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f43f ae38 	beq.w	800602e <_strtod_l+0x436>
 80063be:	68c3      	ldr	r3, [r0, #12]
 80063c0:	4641      	mov	r1, r8
 80063c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063c4:	2300      	movs	r3, #0
 80063c6:	60c3      	str	r3, [r0, #12]
 80063c8:	f7ff fa0e 	bl	80057e8 <__mcmp>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	da45      	bge.n	800645c <_strtod_l+0x864>
 80063d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063d2:	ea53 030a 	orrs.w	r3, r3, sl
 80063d6:	d16b      	bne.n	80064b0 <_strtod_l+0x8b8>
 80063d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d167      	bne.n	80064b0 <_strtod_l+0x8b8>
 80063e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063e4:	0d1b      	lsrs	r3, r3, #20
 80063e6:	051b      	lsls	r3, r3, #20
 80063e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80063ec:	d960      	bls.n	80064b0 <_strtod_l+0x8b8>
 80063ee:	6963      	ldr	r3, [r4, #20]
 80063f0:	b913      	cbnz	r3, 80063f8 <_strtod_l+0x800>
 80063f2:	6923      	ldr	r3, [r4, #16]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	dd5b      	ble.n	80064b0 <_strtod_l+0x8b8>
 80063f8:	4621      	mov	r1, r4
 80063fa:	2201      	movs	r2, #1
 80063fc:	9805      	ldr	r0, [sp, #20]
 80063fe:	f7ff f987 	bl	8005710 <__lshift>
 8006402:	4641      	mov	r1, r8
 8006404:	4604      	mov	r4, r0
 8006406:	f7ff f9ef 	bl	80057e8 <__mcmp>
 800640a:	2800      	cmp	r0, #0
 800640c:	dd50      	ble.n	80064b0 <_strtod_l+0x8b8>
 800640e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006412:	9a08      	ldr	r2, [sp, #32]
 8006414:	0d1b      	lsrs	r3, r3, #20
 8006416:	051b      	lsls	r3, r3, #20
 8006418:	2a00      	cmp	r2, #0
 800641a:	d06a      	beq.n	80064f2 <_strtod_l+0x8fa>
 800641c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006420:	d867      	bhi.n	80064f2 <_strtod_l+0x8fa>
 8006422:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006426:	f67f ae98 	bls.w	800615a <_strtod_l+0x562>
 800642a:	4650      	mov	r0, sl
 800642c:	4659      	mov	r1, fp
 800642e:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <_strtod_l+0x85c>)
 8006430:	2200      	movs	r2, #0
 8006432:	f7fa f851 	bl	80004d8 <__aeabi_dmul>
 8006436:	4b08      	ldr	r3, [pc, #32]	@ (8006458 <_strtod_l+0x860>)
 8006438:	4682      	mov	sl, r0
 800643a:	400b      	ands	r3, r1
 800643c:	468b      	mov	fp, r1
 800643e:	2b00      	cmp	r3, #0
 8006440:	f47f ae00 	bne.w	8006044 <_strtod_l+0x44c>
 8006444:	2322      	movs	r3, #34	@ 0x22
 8006446:	9a05      	ldr	r2, [sp, #20]
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e5fb      	b.n	8006044 <_strtod_l+0x44c>
 800644c:	08007cf8 	.word	0x08007cf8
 8006450:	fffffc02 	.word	0xfffffc02
 8006454:	39500000 	.word	0x39500000
 8006458:	7ff00000 	.word	0x7ff00000
 800645c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006460:	d165      	bne.n	800652e <_strtod_l+0x936>
 8006462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006468:	b35a      	cbz	r2, 80064c2 <_strtod_l+0x8ca>
 800646a:	4a99      	ldr	r2, [pc, #612]	@ (80066d0 <_strtod_l+0xad8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d12b      	bne.n	80064c8 <_strtod_l+0x8d0>
 8006470:	9b08      	ldr	r3, [sp, #32]
 8006472:	4651      	mov	r1, sl
 8006474:	b303      	cbz	r3, 80064b8 <_strtod_l+0x8c0>
 8006476:	465a      	mov	r2, fp
 8006478:	4b96      	ldr	r3, [pc, #600]	@ (80066d4 <_strtod_l+0xadc>)
 800647a:	4013      	ands	r3, r2
 800647c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006480:	f04f 32ff 	mov.w	r2, #4294967295
 8006484:	d81b      	bhi.n	80064be <_strtod_l+0x8c6>
 8006486:	0d1b      	lsrs	r3, r3, #20
 8006488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	4299      	cmp	r1, r3
 8006492:	d119      	bne.n	80064c8 <_strtod_l+0x8d0>
 8006494:	4b90      	ldr	r3, [pc, #576]	@ (80066d8 <_strtod_l+0xae0>)
 8006496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006498:	429a      	cmp	r2, r3
 800649a:	d102      	bne.n	80064a2 <_strtod_l+0x8aa>
 800649c:	3101      	adds	r1, #1
 800649e:	f43f adc6 	beq.w	800602e <_strtod_l+0x436>
 80064a2:	f04f 0a00 	mov.w	sl, #0
 80064a6:	4b8b      	ldr	r3, [pc, #556]	@ (80066d4 <_strtod_l+0xadc>)
 80064a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064aa:	401a      	ands	r2, r3
 80064ac:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80064b0:	9b08      	ldr	r3, [sp, #32]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1b9      	bne.n	800642a <_strtod_l+0x832>
 80064b6:	e5c5      	b.n	8006044 <_strtod_l+0x44c>
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	e7e8      	b.n	8006490 <_strtod_l+0x898>
 80064be:	4613      	mov	r3, r2
 80064c0:	e7e6      	b.n	8006490 <_strtod_l+0x898>
 80064c2:	ea53 030a 	orrs.w	r3, r3, sl
 80064c6:	d0a2      	beq.n	800640e <_strtod_l+0x816>
 80064c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064ca:	b1db      	cbz	r3, 8006504 <_strtod_l+0x90c>
 80064cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064ce:	4213      	tst	r3, r2
 80064d0:	d0ee      	beq.n	80064b0 <_strtod_l+0x8b8>
 80064d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064d4:	4650      	mov	r0, sl
 80064d6:	4659      	mov	r1, fp
 80064d8:	9a08      	ldr	r2, [sp, #32]
 80064da:	b1bb      	cbz	r3, 800650c <_strtod_l+0x914>
 80064dc:	f7ff fb68 	bl	8005bb0 <sulp>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064e8:	f7f9 fe40 	bl	800016c <__adddf3>
 80064ec:	4682      	mov	sl, r0
 80064ee:	468b      	mov	fp, r1
 80064f0:	e7de      	b.n	80064b0 <_strtod_l+0x8b8>
 80064f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80064f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80064fa:	f04f 3aff 	mov.w	sl, #4294967295
 80064fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006502:	e7d5      	b.n	80064b0 <_strtod_l+0x8b8>
 8006504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006506:	ea13 0f0a 	tst.w	r3, sl
 800650a:	e7e1      	b.n	80064d0 <_strtod_l+0x8d8>
 800650c:	f7ff fb50 	bl	8005bb0 <sulp>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006518:	f7f9 fe26 	bl	8000168 <__aeabi_dsub>
 800651c:	2200      	movs	r2, #0
 800651e:	2300      	movs	r3, #0
 8006520:	4682      	mov	sl, r0
 8006522:	468b      	mov	fp, r1
 8006524:	f7fa fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8006528:	2800      	cmp	r0, #0
 800652a:	d0c1      	beq.n	80064b0 <_strtod_l+0x8b8>
 800652c:	e615      	b.n	800615a <_strtod_l+0x562>
 800652e:	4641      	mov	r1, r8
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff fac9 	bl	8005ac8 <__ratio>
 8006536:	2200      	movs	r2, #0
 8006538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800653c:	4606      	mov	r6, r0
 800653e:	460f      	mov	r7, r1
 8006540:	f7fa fa46 	bl	80009d0 <__aeabi_dcmple>
 8006544:	2800      	cmp	r0, #0
 8006546:	d06d      	beq.n	8006624 <_strtod_l+0xa2c>
 8006548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d178      	bne.n	8006640 <_strtod_l+0xa48>
 800654e:	f1ba 0f00 	cmp.w	sl, #0
 8006552:	d156      	bne.n	8006602 <_strtod_l+0xa0a>
 8006554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800655a:	2b00      	cmp	r3, #0
 800655c:	d158      	bne.n	8006610 <_strtod_l+0xa18>
 800655e:	2200      	movs	r2, #0
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	4b5d      	ldr	r3, [pc, #372]	@ (80066dc <_strtod_l+0xae4>)
 8006566:	f7fa fa29 	bl	80009bc <__aeabi_dcmplt>
 800656a:	2800      	cmp	r0, #0
 800656c:	d157      	bne.n	800661e <_strtod_l+0xa26>
 800656e:	4630      	mov	r0, r6
 8006570:	4639      	mov	r1, r7
 8006572:	2200      	movs	r2, #0
 8006574:	4b5a      	ldr	r3, [pc, #360]	@ (80066e0 <_strtod_l+0xae8>)
 8006576:	f7f9 ffaf 	bl	80004d8 <__aeabi_dmul>
 800657a:	4606      	mov	r6, r0
 800657c:	460f      	mov	r7, r1
 800657e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006582:	9606      	str	r6, [sp, #24]
 8006584:	9307      	str	r3, [sp, #28]
 8006586:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800658a:	4d52      	ldr	r5, [pc, #328]	@ (80066d4 <_strtod_l+0xadc>)
 800658c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006592:	401d      	ands	r5, r3
 8006594:	4b53      	ldr	r3, [pc, #332]	@ (80066e4 <_strtod_l+0xaec>)
 8006596:	429d      	cmp	r5, r3
 8006598:	f040 80aa 	bne.w	80066f0 <_strtod_l+0xaf8>
 800659c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800659e:	4650      	mov	r0, sl
 80065a0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80065a4:	4659      	mov	r1, fp
 80065a6:	f7ff f9cf 	bl	8005948 <__ulp>
 80065aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065ae:	f7f9 ff93 	bl	80004d8 <__aeabi_dmul>
 80065b2:	4652      	mov	r2, sl
 80065b4:	465b      	mov	r3, fp
 80065b6:	f7f9 fdd9 	bl	800016c <__adddf3>
 80065ba:	460b      	mov	r3, r1
 80065bc:	4945      	ldr	r1, [pc, #276]	@ (80066d4 <_strtod_l+0xadc>)
 80065be:	4a4a      	ldr	r2, [pc, #296]	@ (80066e8 <_strtod_l+0xaf0>)
 80065c0:	4019      	ands	r1, r3
 80065c2:	4291      	cmp	r1, r2
 80065c4:	4682      	mov	sl, r0
 80065c6:	d942      	bls.n	800664e <_strtod_l+0xa56>
 80065c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065ca:	4b43      	ldr	r3, [pc, #268]	@ (80066d8 <_strtod_l+0xae0>)
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d103      	bne.n	80065d8 <_strtod_l+0x9e0>
 80065d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065d2:	3301      	adds	r3, #1
 80065d4:	f43f ad2b 	beq.w	800602e <_strtod_l+0x436>
 80065d8:	f04f 3aff 	mov.w	sl, #4294967295
 80065dc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80066d8 <_strtod_l+0xae0>
 80065e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065e2:	9805      	ldr	r0, [sp, #20]
 80065e4:	f7fe fe7e 	bl	80052e4 <_Bfree>
 80065e8:	4649      	mov	r1, r9
 80065ea:	9805      	ldr	r0, [sp, #20]
 80065ec:	f7fe fe7a 	bl	80052e4 <_Bfree>
 80065f0:	4641      	mov	r1, r8
 80065f2:	9805      	ldr	r0, [sp, #20]
 80065f4:	f7fe fe76 	bl	80052e4 <_Bfree>
 80065f8:	4621      	mov	r1, r4
 80065fa:	9805      	ldr	r0, [sp, #20]
 80065fc:	f7fe fe72 	bl	80052e4 <_Bfree>
 8006600:	e618      	b.n	8006234 <_strtod_l+0x63c>
 8006602:	f1ba 0f01 	cmp.w	sl, #1
 8006606:	d103      	bne.n	8006610 <_strtod_l+0xa18>
 8006608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800660a:	2b00      	cmp	r3, #0
 800660c:	f43f ada5 	beq.w	800615a <_strtod_l+0x562>
 8006610:	2200      	movs	r2, #0
 8006612:	4b36      	ldr	r3, [pc, #216]	@ (80066ec <_strtod_l+0xaf4>)
 8006614:	2600      	movs	r6, #0
 8006616:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800661a:	4f30      	ldr	r7, [pc, #192]	@ (80066dc <_strtod_l+0xae4>)
 800661c:	e7b3      	b.n	8006586 <_strtod_l+0x98e>
 800661e:	2600      	movs	r6, #0
 8006620:	4f2f      	ldr	r7, [pc, #188]	@ (80066e0 <_strtod_l+0xae8>)
 8006622:	e7ac      	b.n	800657e <_strtod_l+0x986>
 8006624:	4630      	mov	r0, r6
 8006626:	4639      	mov	r1, r7
 8006628:	4b2d      	ldr	r3, [pc, #180]	@ (80066e0 <_strtod_l+0xae8>)
 800662a:	2200      	movs	r2, #0
 800662c:	f7f9 ff54 	bl	80004d8 <__aeabi_dmul>
 8006630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006632:	4606      	mov	r6, r0
 8006634:	460f      	mov	r7, r1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0a1      	beq.n	800657e <_strtod_l+0x986>
 800663a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800663e:	e7a2      	b.n	8006586 <_strtod_l+0x98e>
 8006640:	2200      	movs	r2, #0
 8006642:	4b26      	ldr	r3, [pc, #152]	@ (80066dc <_strtod_l+0xae4>)
 8006644:	4616      	mov	r6, r2
 8006646:	461f      	mov	r7, r3
 8006648:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800664c:	e79b      	b.n	8006586 <_strtod_l+0x98e>
 800664e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006652:	9b08      	ldr	r3, [sp, #32]
 8006654:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1c1      	bne.n	80065e0 <_strtod_l+0x9e8>
 800665c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006660:	0d1b      	lsrs	r3, r3, #20
 8006662:	051b      	lsls	r3, r3, #20
 8006664:	429d      	cmp	r5, r3
 8006666:	d1bb      	bne.n	80065e0 <_strtod_l+0x9e8>
 8006668:	4630      	mov	r0, r6
 800666a:	4639      	mov	r1, r7
 800666c:	f7fa fcda 	bl	8001024 <__aeabi_d2lz>
 8006670:	f7f9 ff04 	bl	800047c <__aeabi_l2d>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7f9 fd74 	bl	8000168 <__aeabi_dsub>
 8006680:	460b      	mov	r3, r1
 8006682:	4602      	mov	r2, r0
 8006684:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006688:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800668c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800668e:	ea46 060a 	orr.w	r6, r6, sl
 8006692:	431e      	orrs	r6, r3
 8006694:	d069      	beq.n	800676a <_strtod_l+0xb72>
 8006696:	a30a      	add	r3, pc, #40	@ (adr r3, 80066c0 <_strtod_l+0xac8>)
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	f7fa f98e 	bl	80009bc <__aeabi_dcmplt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f47f accf 	bne.w	8006044 <_strtod_l+0x44c>
 80066a6:	a308      	add	r3, pc, #32	@ (adr r3, 80066c8 <_strtod_l+0xad0>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066b0:	f7fa f9a2 	bl	80009f8 <__aeabi_dcmpgt>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d093      	beq.n	80065e0 <_strtod_l+0x9e8>
 80066b8:	e4c4      	b.n	8006044 <_strtod_l+0x44c>
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w
 80066c0:	94a03595 	.word	0x94a03595
 80066c4:	3fdfffff 	.word	0x3fdfffff
 80066c8:	35afe535 	.word	0x35afe535
 80066cc:	3fe00000 	.word	0x3fe00000
 80066d0:	000fffff 	.word	0x000fffff
 80066d4:	7ff00000 	.word	0x7ff00000
 80066d8:	7fefffff 	.word	0x7fefffff
 80066dc:	3ff00000 	.word	0x3ff00000
 80066e0:	3fe00000 	.word	0x3fe00000
 80066e4:	7fe00000 	.word	0x7fe00000
 80066e8:	7c9fffff 	.word	0x7c9fffff
 80066ec:	bff00000 	.word	0xbff00000
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	b323      	cbz	r3, 800673e <_strtod_l+0xb46>
 80066f4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80066f8:	d821      	bhi.n	800673e <_strtod_l+0xb46>
 80066fa:	a327      	add	r3, pc, #156	@ (adr r3, 8006798 <_strtod_l+0xba0>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7fa f964 	bl	80009d0 <__aeabi_dcmple>
 8006708:	b1a0      	cbz	r0, 8006734 <_strtod_l+0xb3c>
 800670a:	4639      	mov	r1, r7
 800670c:	4630      	mov	r0, r6
 800670e:	f7fa f9bb 	bl	8000a88 <__aeabi_d2uiz>
 8006712:	2801      	cmp	r0, #1
 8006714:	bf38      	it	cc
 8006716:	2001      	movcc	r0, #1
 8006718:	f7f9 fe64 	bl	80003e4 <__aeabi_ui2d>
 800671c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800671e:	4606      	mov	r6, r0
 8006720:	460f      	mov	r7, r1
 8006722:	b9fb      	cbnz	r3, 8006764 <_strtod_l+0xb6c>
 8006724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006728:	9014      	str	r0, [sp, #80]	@ 0x50
 800672a:	9315      	str	r3, [sp, #84]	@ 0x54
 800672c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006730:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006734:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006736:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800673a:	1b5b      	subs	r3, r3, r5
 800673c:	9311      	str	r3, [sp, #68]	@ 0x44
 800673e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006742:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006746:	f7ff f8ff 	bl	8005948 <__ulp>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4650      	mov	r0, sl
 8006750:	4659      	mov	r1, fp
 8006752:	f7f9 fec1 	bl	80004d8 <__aeabi_dmul>
 8006756:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800675a:	f7f9 fd07 	bl	800016c <__adddf3>
 800675e:	4682      	mov	sl, r0
 8006760:	468b      	mov	fp, r1
 8006762:	e776      	b.n	8006652 <_strtod_l+0xa5a>
 8006764:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006768:	e7e0      	b.n	800672c <_strtod_l+0xb34>
 800676a:	a30d      	add	r3, pc, #52	@ (adr r3, 80067a0 <_strtod_l+0xba8>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7fa f924 	bl	80009bc <__aeabi_dcmplt>
 8006774:	e79e      	b.n	80066b4 <_strtod_l+0xabc>
 8006776:	2300      	movs	r3, #0
 8006778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800677a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800677c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	f7ff ba77 	b.w	8005c72 <_strtod_l+0x7a>
 8006784:	2a65      	cmp	r2, #101	@ 0x65
 8006786:	f43f ab6e 	beq.w	8005e66 <_strtod_l+0x26e>
 800678a:	2a45      	cmp	r2, #69	@ 0x45
 800678c:	f43f ab6b 	beq.w	8005e66 <_strtod_l+0x26e>
 8006790:	2301      	movs	r3, #1
 8006792:	f7ff bba6 	b.w	8005ee2 <_strtod_l+0x2ea>
 8006796:	bf00      	nop
 8006798:	ffc00000 	.word	0xffc00000
 800679c:	41dfffff 	.word	0x41dfffff
 80067a0:	94a03595 	.word	0x94a03595
 80067a4:	3fcfffff 	.word	0x3fcfffff

080067a8 <_strtod_r>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	@ (80067b0 <_strtod_r+0x8>)
 80067aa:	f7ff ba25 	b.w	8005bf8 <_strtod_l>
 80067ae:	bf00      	nop
 80067b0:	20000068 	.word	0x20000068

080067b4 <_strtol_l.constprop.0>:
 80067b4:	2b24      	cmp	r3, #36	@ 0x24
 80067b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ba:	4686      	mov	lr, r0
 80067bc:	4690      	mov	r8, r2
 80067be:	d801      	bhi.n	80067c4 <_strtol_l.constprop.0+0x10>
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d106      	bne.n	80067d2 <_strtol_l.constprop.0+0x1e>
 80067c4:	f7fd fdc0 	bl	8004348 <__errno>
 80067c8:	2316      	movs	r3, #22
 80067ca:	6003      	str	r3, [r0, #0]
 80067cc:	2000      	movs	r0, #0
 80067ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d2:	460d      	mov	r5, r1
 80067d4:	4833      	ldr	r0, [pc, #204]	@ (80068a4 <_strtol_l.constprop.0+0xf0>)
 80067d6:	462a      	mov	r2, r5
 80067d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067dc:	5d06      	ldrb	r6, [r0, r4]
 80067de:	f016 0608 	ands.w	r6, r6, #8
 80067e2:	d1f8      	bne.n	80067d6 <_strtol_l.constprop.0+0x22>
 80067e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80067e6:	d12d      	bne.n	8006844 <_strtol_l.constprop.0+0x90>
 80067e8:	2601      	movs	r6, #1
 80067ea:	782c      	ldrb	r4, [r5, #0]
 80067ec:	1c95      	adds	r5, r2, #2
 80067ee:	f033 0210 	bics.w	r2, r3, #16
 80067f2:	d109      	bne.n	8006808 <_strtol_l.constprop.0+0x54>
 80067f4:	2c30      	cmp	r4, #48	@ 0x30
 80067f6:	d12a      	bne.n	800684e <_strtol_l.constprop.0+0x9a>
 80067f8:	782a      	ldrb	r2, [r5, #0]
 80067fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067fe:	2a58      	cmp	r2, #88	@ 0x58
 8006800:	d125      	bne.n	800684e <_strtol_l.constprop.0+0x9a>
 8006802:	2310      	movs	r3, #16
 8006804:	786c      	ldrb	r4, [r5, #1]
 8006806:	3502      	adds	r5, #2
 8006808:	2200      	movs	r2, #0
 800680a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800680e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006812:	fbbc f9f3 	udiv	r9, ip, r3
 8006816:	4610      	mov	r0, r2
 8006818:	fb03 ca19 	mls	sl, r3, r9, ip
 800681c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006820:	2f09      	cmp	r7, #9
 8006822:	d81b      	bhi.n	800685c <_strtol_l.constprop.0+0xa8>
 8006824:	463c      	mov	r4, r7
 8006826:	42a3      	cmp	r3, r4
 8006828:	dd27      	ble.n	800687a <_strtol_l.constprop.0+0xc6>
 800682a:	1c57      	adds	r7, r2, #1
 800682c:	d007      	beq.n	800683e <_strtol_l.constprop.0+0x8a>
 800682e:	4581      	cmp	r9, r0
 8006830:	d320      	bcc.n	8006874 <_strtol_l.constprop.0+0xc0>
 8006832:	d101      	bne.n	8006838 <_strtol_l.constprop.0+0x84>
 8006834:	45a2      	cmp	sl, r4
 8006836:	db1d      	blt.n	8006874 <_strtol_l.constprop.0+0xc0>
 8006838:	2201      	movs	r2, #1
 800683a:	fb00 4003 	mla	r0, r0, r3, r4
 800683e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006842:	e7eb      	b.n	800681c <_strtol_l.constprop.0+0x68>
 8006844:	2c2b      	cmp	r4, #43	@ 0x2b
 8006846:	bf04      	itt	eq
 8006848:	782c      	ldrbeq	r4, [r5, #0]
 800684a:	1c95      	addeq	r5, r2, #2
 800684c:	e7cf      	b.n	80067ee <_strtol_l.constprop.0+0x3a>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1da      	bne.n	8006808 <_strtol_l.constprop.0+0x54>
 8006852:	2c30      	cmp	r4, #48	@ 0x30
 8006854:	bf0c      	ite	eq
 8006856:	2308      	moveq	r3, #8
 8006858:	230a      	movne	r3, #10
 800685a:	e7d5      	b.n	8006808 <_strtol_l.constprop.0+0x54>
 800685c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006860:	2f19      	cmp	r7, #25
 8006862:	d801      	bhi.n	8006868 <_strtol_l.constprop.0+0xb4>
 8006864:	3c37      	subs	r4, #55	@ 0x37
 8006866:	e7de      	b.n	8006826 <_strtol_l.constprop.0+0x72>
 8006868:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800686c:	2f19      	cmp	r7, #25
 800686e:	d804      	bhi.n	800687a <_strtol_l.constprop.0+0xc6>
 8006870:	3c57      	subs	r4, #87	@ 0x57
 8006872:	e7d8      	b.n	8006826 <_strtol_l.constprop.0+0x72>
 8006874:	f04f 32ff 	mov.w	r2, #4294967295
 8006878:	e7e1      	b.n	800683e <_strtol_l.constprop.0+0x8a>
 800687a:	1c53      	adds	r3, r2, #1
 800687c:	d108      	bne.n	8006890 <_strtol_l.constprop.0+0xdc>
 800687e:	2322      	movs	r3, #34	@ 0x22
 8006880:	4660      	mov	r0, ip
 8006882:	f8ce 3000 	str.w	r3, [lr]
 8006886:	f1b8 0f00 	cmp.w	r8, #0
 800688a:	d0a0      	beq.n	80067ce <_strtol_l.constprop.0+0x1a>
 800688c:	1e69      	subs	r1, r5, #1
 800688e:	e006      	b.n	800689e <_strtol_l.constprop.0+0xea>
 8006890:	b106      	cbz	r6, 8006894 <_strtol_l.constprop.0+0xe0>
 8006892:	4240      	negs	r0, r0
 8006894:	f1b8 0f00 	cmp.w	r8, #0
 8006898:	d099      	beq.n	80067ce <_strtol_l.constprop.0+0x1a>
 800689a:	2a00      	cmp	r2, #0
 800689c:	d1f6      	bne.n	800688c <_strtol_l.constprop.0+0xd8>
 800689e:	f8c8 1000 	str.w	r1, [r8]
 80068a2:	e794      	b.n	80067ce <_strtol_l.constprop.0+0x1a>
 80068a4:	08007d21 	.word	0x08007d21

080068a8 <_strtol_r>:
 80068a8:	f7ff bf84 	b.w	80067b4 <_strtol_l.constprop.0>

080068ac <__ssputs_r>:
 80068ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b0:	461f      	mov	r7, r3
 80068b2:	688e      	ldr	r6, [r1, #8]
 80068b4:	4682      	mov	sl, r0
 80068b6:	42be      	cmp	r6, r7
 80068b8:	460c      	mov	r4, r1
 80068ba:	4690      	mov	r8, r2
 80068bc:	680b      	ldr	r3, [r1, #0]
 80068be:	d82d      	bhi.n	800691c <__ssputs_r+0x70>
 80068c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068c8:	d026      	beq.n	8006918 <__ssputs_r+0x6c>
 80068ca:	6965      	ldr	r5, [r4, #20]
 80068cc:	6909      	ldr	r1, [r1, #16]
 80068ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068d2:	eba3 0901 	sub.w	r9, r3, r1
 80068d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068da:	1c7b      	adds	r3, r7, #1
 80068dc:	444b      	add	r3, r9
 80068de:	106d      	asrs	r5, r5, #1
 80068e0:	429d      	cmp	r5, r3
 80068e2:	bf38      	it	cc
 80068e4:	461d      	movcc	r5, r3
 80068e6:	0553      	lsls	r3, r2, #21
 80068e8:	d527      	bpl.n	800693a <__ssputs_r+0x8e>
 80068ea:	4629      	mov	r1, r5
 80068ec:	f7fe fc2e 	bl	800514c <_malloc_r>
 80068f0:	4606      	mov	r6, r0
 80068f2:	b360      	cbz	r0, 800694e <__ssputs_r+0xa2>
 80068f4:	464a      	mov	r2, r9
 80068f6:	6921      	ldr	r1, [r4, #16]
 80068f8:	f000 fa14 	bl	8006d24 <memcpy>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006906:	81a3      	strh	r3, [r4, #12]
 8006908:	6126      	str	r6, [r4, #16]
 800690a:	444e      	add	r6, r9
 800690c:	6026      	str	r6, [r4, #0]
 800690e:	463e      	mov	r6, r7
 8006910:	6165      	str	r5, [r4, #20]
 8006912:	eba5 0509 	sub.w	r5, r5, r9
 8006916:	60a5      	str	r5, [r4, #8]
 8006918:	42be      	cmp	r6, r7
 800691a:	d900      	bls.n	800691e <__ssputs_r+0x72>
 800691c:	463e      	mov	r6, r7
 800691e:	4632      	mov	r2, r6
 8006920:	4641      	mov	r1, r8
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	f000 f9c2 	bl	8006cac <memmove>
 8006928:	2000      	movs	r0, #0
 800692a:	68a3      	ldr	r3, [r4, #8]
 800692c:	1b9b      	subs	r3, r3, r6
 800692e:	60a3      	str	r3, [r4, #8]
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	4433      	add	r3, r6
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693a:	462a      	mov	r2, r5
 800693c:	f000 fd83 	bl	8007446 <_realloc_r>
 8006940:	4606      	mov	r6, r0
 8006942:	2800      	cmp	r0, #0
 8006944:	d1e0      	bne.n	8006908 <__ssputs_r+0x5c>
 8006946:	4650      	mov	r0, sl
 8006948:	6921      	ldr	r1, [r4, #16]
 800694a:	f7fe fb8d 	bl	8005068 <_free_r>
 800694e:	230c      	movs	r3, #12
 8006950:	f8ca 3000 	str.w	r3, [sl]
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800695e:	81a3      	strh	r3, [r4, #12]
 8006960:	e7e9      	b.n	8006936 <__ssputs_r+0x8a>
	...

08006964 <_svfiprintf_r>:
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	4698      	mov	r8, r3
 800696a:	898b      	ldrh	r3, [r1, #12]
 800696c:	4607      	mov	r7, r0
 800696e:	061b      	lsls	r3, r3, #24
 8006970:	460d      	mov	r5, r1
 8006972:	4614      	mov	r4, r2
 8006974:	b09d      	sub	sp, #116	@ 0x74
 8006976:	d510      	bpl.n	800699a <_svfiprintf_r+0x36>
 8006978:	690b      	ldr	r3, [r1, #16]
 800697a:	b973      	cbnz	r3, 800699a <_svfiprintf_r+0x36>
 800697c:	2140      	movs	r1, #64	@ 0x40
 800697e:	f7fe fbe5 	bl	800514c <_malloc_r>
 8006982:	6028      	str	r0, [r5, #0]
 8006984:	6128      	str	r0, [r5, #16]
 8006986:	b930      	cbnz	r0, 8006996 <_svfiprintf_r+0x32>
 8006988:	230c      	movs	r3, #12
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	b01d      	add	sp, #116	@ 0x74
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	2340      	movs	r3, #64	@ 0x40
 8006998:	616b      	str	r3, [r5, #20]
 800699a:	2300      	movs	r3, #0
 800699c:	9309      	str	r3, [sp, #36]	@ 0x24
 800699e:	2320      	movs	r3, #32
 80069a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069a4:	2330      	movs	r3, #48	@ 0x30
 80069a6:	f04f 0901 	mov.w	r9, #1
 80069aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006b48 <_svfiprintf_r+0x1e4>
 80069b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069b6:	4623      	mov	r3, r4
 80069b8:	469a      	mov	sl, r3
 80069ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069be:	b10a      	cbz	r2, 80069c4 <_svfiprintf_r+0x60>
 80069c0:	2a25      	cmp	r2, #37	@ 0x25
 80069c2:	d1f9      	bne.n	80069b8 <_svfiprintf_r+0x54>
 80069c4:	ebba 0b04 	subs.w	fp, sl, r4
 80069c8:	d00b      	beq.n	80069e2 <_svfiprintf_r+0x7e>
 80069ca:	465b      	mov	r3, fp
 80069cc:	4622      	mov	r2, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff ff6b 	bl	80068ac <__ssputs_r>
 80069d6:	3001      	adds	r0, #1
 80069d8:	f000 80a7 	beq.w	8006b2a <_svfiprintf_r+0x1c6>
 80069dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069de:	445a      	add	r2, fp
 80069e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80069e2:	f89a 3000 	ldrb.w	r3, [sl]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 809f 	beq.w	8006b2a <_svfiprintf_r+0x1c6>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069f6:	f10a 0a01 	add.w	sl, sl, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	9307      	str	r3, [sp, #28]
 80069fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a04:	4654      	mov	r4, sl
 8006a06:	2205      	movs	r2, #5
 8006a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0c:	484e      	ldr	r0, [pc, #312]	@ (8006b48 <_svfiprintf_r+0x1e4>)
 8006a0e:	f7fd fcc8 	bl	80043a2 <memchr>
 8006a12:	9a04      	ldr	r2, [sp, #16]
 8006a14:	b9d8      	cbnz	r0, 8006a4e <_svfiprintf_r+0xea>
 8006a16:	06d0      	lsls	r0, r2, #27
 8006a18:	bf44      	itt	mi
 8006a1a:	2320      	movmi	r3, #32
 8006a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a20:	0711      	lsls	r1, r2, #28
 8006a22:	bf44      	itt	mi
 8006a24:	232b      	movmi	r3, #43	@ 0x2b
 8006a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a30:	d015      	beq.n	8006a5e <_svfiprintf_r+0xfa>
 8006a32:	4654      	mov	r4, sl
 8006a34:	2000      	movs	r0, #0
 8006a36:	f04f 0c0a 	mov.w	ip, #10
 8006a3a:	9a07      	ldr	r2, [sp, #28]
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a42:	3b30      	subs	r3, #48	@ 0x30
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	d94b      	bls.n	8006ae0 <_svfiprintf_r+0x17c>
 8006a48:	b1b0      	cbz	r0, 8006a78 <_svfiprintf_r+0x114>
 8006a4a:	9207      	str	r2, [sp, #28]
 8006a4c:	e014      	b.n	8006a78 <_svfiprintf_r+0x114>
 8006a4e:	eba0 0308 	sub.w	r3, r0, r8
 8006a52:	fa09 f303 	lsl.w	r3, r9, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	46a2      	mov	sl, r4
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	e7d2      	b.n	8006a04 <_svfiprintf_r+0xa0>
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	1d19      	adds	r1, r3, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	9103      	str	r1, [sp, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfbb      	ittet	lt
 8006a6a:	425b      	neglt	r3, r3
 8006a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a70:	9307      	strge	r3, [sp, #28]
 8006a72:	9307      	strlt	r3, [sp, #28]
 8006a74:	bfb8      	it	lt
 8006a76:	9204      	strlt	r2, [sp, #16]
 8006a78:	7823      	ldrb	r3, [r4, #0]
 8006a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a7c:	d10a      	bne.n	8006a94 <_svfiprintf_r+0x130>
 8006a7e:	7863      	ldrb	r3, [r4, #1]
 8006a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a82:	d132      	bne.n	8006aea <_svfiprintf_r+0x186>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	3402      	adds	r4, #2
 8006a88:	1d1a      	adds	r2, r3, #4
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	9203      	str	r2, [sp, #12]
 8006a8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a92:	9305      	str	r3, [sp, #20]
 8006a94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006b4c <_svfiprintf_r+0x1e8>
 8006a98:	2203      	movs	r2, #3
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	7821      	ldrb	r1, [r4, #0]
 8006a9e:	f7fd fc80 	bl	80043a2 <memchr>
 8006aa2:	b138      	cbz	r0, 8006ab4 <_svfiprintf_r+0x150>
 8006aa4:	2240      	movs	r2, #64	@ 0x40
 8006aa6:	9b04      	ldr	r3, [sp, #16]
 8006aa8:	eba0 000a 	sub.w	r0, r0, sl
 8006aac:	4082      	lsls	r2, r0
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	3401      	adds	r4, #1
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab8:	2206      	movs	r2, #6
 8006aba:	4825      	ldr	r0, [pc, #148]	@ (8006b50 <_svfiprintf_r+0x1ec>)
 8006abc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ac0:	f7fd fc6f 	bl	80043a2 <memchr>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d036      	beq.n	8006b36 <_svfiprintf_r+0x1d2>
 8006ac8:	4b22      	ldr	r3, [pc, #136]	@ (8006b54 <_svfiprintf_r+0x1f0>)
 8006aca:	bb1b      	cbnz	r3, 8006b14 <_svfiprintf_r+0x1b0>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	3307      	adds	r3, #7
 8006ad0:	f023 0307 	bic.w	r3, r3, #7
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	9303      	str	r3, [sp, #12]
 8006ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ada:	4433      	add	r3, r6
 8006adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ade:	e76a      	b.n	80069b6 <_svfiprintf_r+0x52>
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ae8:	e7a8      	b.n	8006a3c <_svfiprintf_r+0xd8>
 8006aea:	2300      	movs	r3, #0
 8006aec:	f04f 0c0a 	mov.w	ip, #10
 8006af0:	4619      	mov	r1, r3
 8006af2:	3401      	adds	r4, #1
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	4620      	mov	r0, r4
 8006af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006afc:	3a30      	subs	r2, #48	@ 0x30
 8006afe:	2a09      	cmp	r2, #9
 8006b00:	d903      	bls.n	8006b0a <_svfiprintf_r+0x1a6>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c6      	beq.n	8006a94 <_svfiprintf_r+0x130>
 8006b06:	9105      	str	r1, [sp, #20]
 8006b08:	e7c4      	b.n	8006a94 <_svfiprintf_r+0x130>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b12:	e7f0      	b.n	8006af6 <_svfiprintf_r+0x192>
 8006b14:	ab03      	add	r3, sp, #12
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b58 <_svfiprintf_r+0x1f4>)
 8006b1e:	a904      	add	r1, sp, #16
 8006b20:	f7fc fccc 	bl	80034bc <_printf_float>
 8006b24:	1c42      	adds	r2, r0, #1
 8006b26:	4606      	mov	r6, r0
 8006b28:	d1d6      	bne.n	8006ad8 <_svfiprintf_r+0x174>
 8006b2a:	89ab      	ldrh	r3, [r5, #12]
 8006b2c:	065b      	lsls	r3, r3, #25
 8006b2e:	f53f af2d 	bmi.w	800698c <_svfiprintf_r+0x28>
 8006b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b34:	e72c      	b.n	8006990 <_svfiprintf_r+0x2c>
 8006b36:	ab03      	add	r3, sp, #12
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	4b06      	ldr	r3, [pc, #24]	@ (8006b58 <_svfiprintf_r+0x1f4>)
 8006b40:	a904      	add	r1, sp, #16
 8006b42:	f7fc ff59 	bl	80039f8 <_printf_i>
 8006b46:	e7ed      	b.n	8006b24 <_svfiprintf_r+0x1c0>
 8006b48:	08007e21 	.word	0x08007e21
 8006b4c:	08007e27 	.word	0x08007e27
 8006b50:	08007e2b 	.word	0x08007e2b
 8006b54:	080034bd 	.word	0x080034bd
 8006b58:	080068ad 	.word	0x080068ad

08006b5c <__sflush_r>:
 8006b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	0716      	lsls	r6, r2, #28
 8006b64:	4605      	mov	r5, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	d454      	bmi.n	8006c14 <__sflush_r+0xb8>
 8006b6a:	684b      	ldr	r3, [r1, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dc02      	bgt.n	8006b76 <__sflush_r+0x1a>
 8006b70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dd48      	ble.n	8006c08 <__sflush_r+0xac>
 8006b76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b78:	2e00      	cmp	r6, #0
 8006b7a:	d045      	beq.n	8006c08 <__sflush_r+0xac>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b82:	682f      	ldr	r7, [r5, #0]
 8006b84:	6a21      	ldr	r1, [r4, #32]
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	d030      	beq.n	8006bec <__sflush_r+0x90>
 8006b8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	0759      	lsls	r1, r3, #29
 8006b90:	d505      	bpl.n	8006b9e <__sflush_r+0x42>
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	1ad2      	subs	r2, r2, r3
 8006b96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b98:	b10b      	cbz	r3, 8006b9e <__sflush_r+0x42>
 8006b9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b9c:	1ad2      	subs	r2, r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ba4:	6a21      	ldr	r1, [r4, #32]
 8006ba6:	47b0      	blx	r6
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	d106      	bne.n	8006bbc <__sflush_r+0x60>
 8006bae:	6829      	ldr	r1, [r5, #0]
 8006bb0:	291d      	cmp	r1, #29
 8006bb2:	d82b      	bhi.n	8006c0c <__sflush_r+0xb0>
 8006bb4:	4a28      	ldr	r2, [pc, #160]	@ (8006c58 <__sflush_r+0xfc>)
 8006bb6:	410a      	asrs	r2, r1
 8006bb8:	07d6      	lsls	r6, r2, #31
 8006bba:	d427      	bmi.n	8006c0c <__sflush_r+0xb0>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	6062      	str	r2, [r4, #4]
 8006bc0:	6922      	ldr	r2, [r4, #16]
 8006bc2:	04d9      	lsls	r1, r3, #19
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	d504      	bpl.n	8006bd2 <__sflush_r+0x76>
 8006bc8:	1c42      	adds	r2, r0, #1
 8006bca:	d101      	bne.n	8006bd0 <__sflush_r+0x74>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b903      	cbnz	r3, 8006bd2 <__sflush_r+0x76>
 8006bd0:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bd4:	602f      	str	r7, [r5, #0]
 8006bd6:	b1b9      	cbz	r1, 8006c08 <__sflush_r+0xac>
 8006bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bdc:	4299      	cmp	r1, r3
 8006bde:	d002      	beq.n	8006be6 <__sflush_r+0x8a>
 8006be0:	4628      	mov	r0, r5
 8006be2:	f7fe fa41 	bl	8005068 <_free_r>
 8006be6:	2300      	movs	r3, #0
 8006be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bea:	e00d      	b.n	8006c08 <__sflush_r+0xac>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b0      	blx	r6
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	1c50      	adds	r0, r2, #1
 8006bf6:	d1c9      	bne.n	8006b8c <__sflush_r+0x30>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0c6      	beq.n	8006b8c <__sflush_r+0x30>
 8006bfe:	2b1d      	cmp	r3, #29
 8006c00:	d001      	beq.n	8006c06 <__sflush_r+0xaa>
 8006c02:	2b16      	cmp	r3, #22
 8006c04:	d11d      	bne.n	8006c42 <__sflush_r+0xe6>
 8006c06:	602f      	str	r7, [r5, #0]
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e021      	b.n	8006c50 <__sflush_r+0xf4>
 8006c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c10:	b21b      	sxth	r3, r3
 8006c12:	e01a      	b.n	8006c4a <__sflush_r+0xee>
 8006c14:	690f      	ldr	r7, [r1, #16]
 8006c16:	2f00      	cmp	r7, #0
 8006c18:	d0f6      	beq.n	8006c08 <__sflush_r+0xac>
 8006c1a:	0793      	lsls	r3, r2, #30
 8006c1c:	bf18      	it	ne
 8006c1e:	2300      	movne	r3, #0
 8006c20:	680e      	ldr	r6, [r1, #0]
 8006c22:	bf08      	it	eq
 8006c24:	694b      	ldreq	r3, [r1, #20]
 8006c26:	1bf6      	subs	r6, r6, r7
 8006c28:	600f      	str	r7, [r1, #0]
 8006c2a:	608b      	str	r3, [r1, #8]
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	ddeb      	ble.n	8006c08 <__sflush_r+0xac>
 8006c30:	4633      	mov	r3, r6
 8006c32:	463a      	mov	r2, r7
 8006c34:	4628      	mov	r0, r5
 8006c36:	6a21      	ldr	r1, [r4, #32]
 8006c38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006c3c:	47e0      	blx	ip
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	dc07      	bgt.n	8006c52 <__sflush_r+0xf6>
 8006c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c52:	4407      	add	r7, r0
 8006c54:	1a36      	subs	r6, r6, r0
 8006c56:	e7e9      	b.n	8006c2c <__sflush_r+0xd0>
 8006c58:	dfbffffe 	.word	0xdfbffffe

08006c5c <_fflush_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	690b      	ldr	r3, [r1, #16]
 8006c60:	4605      	mov	r5, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	b913      	cbnz	r3, 8006c6c <_fflush_r+0x10>
 8006c66:	2500      	movs	r5, #0
 8006c68:	4628      	mov	r0, r5
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	b118      	cbz	r0, 8006c76 <_fflush_r+0x1a>
 8006c6e:	6a03      	ldr	r3, [r0, #32]
 8006c70:	b90b      	cbnz	r3, 8006c76 <_fflush_r+0x1a>
 8006c72:	f7fd fa7d 	bl	8004170 <__sinit>
 8006c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f3      	beq.n	8006c66 <_fflush_r+0xa>
 8006c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c80:	07d0      	lsls	r0, r2, #31
 8006c82:	d404      	bmi.n	8006c8e <_fflush_r+0x32>
 8006c84:	0599      	lsls	r1, r3, #22
 8006c86:	d402      	bmi.n	8006c8e <_fflush_r+0x32>
 8006c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c8a:	f7fd fb88 	bl	800439e <__retarget_lock_acquire_recursive>
 8006c8e:	4628      	mov	r0, r5
 8006c90:	4621      	mov	r1, r4
 8006c92:	f7ff ff63 	bl	8006b5c <__sflush_r>
 8006c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c98:	4605      	mov	r5, r0
 8006c9a:	07da      	lsls	r2, r3, #31
 8006c9c:	d4e4      	bmi.n	8006c68 <_fflush_r+0xc>
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	059b      	lsls	r3, r3, #22
 8006ca2:	d4e1      	bmi.n	8006c68 <_fflush_r+0xc>
 8006ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ca6:	f7fd fb7b 	bl	80043a0 <__retarget_lock_release_recursive>
 8006caa:	e7dd      	b.n	8006c68 <_fflush_r+0xc>

08006cac <memmove>:
 8006cac:	4288      	cmp	r0, r1
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	eb01 0402 	add.w	r4, r1, r2
 8006cb4:	d902      	bls.n	8006cbc <memmove+0x10>
 8006cb6:	4284      	cmp	r4, r0
 8006cb8:	4623      	mov	r3, r4
 8006cba:	d807      	bhi.n	8006ccc <memmove+0x20>
 8006cbc:	1e43      	subs	r3, r0, #1
 8006cbe:	42a1      	cmp	r1, r4
 8006cc0:	d008      	beq.n	8006cd4 <memmove+0x28>
 8006cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cca:	e7f8      	b.n	8006cbe <memmove+0x12>
 8006ccc:	4601      	mov	r1, r0
 8006cce:	4402      	add	r2, r0
 8006cd0:	428a      	cmp	r2, r1
 8006cd2:	d100      	bne.n	8006cd6 <memmove+0x2a>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cde:	e7f7      	b.n	8006cd0 <memmove+0x24>

08006ce0 <strncmp>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	b16a      	cbz	r2, 8006d00 <strncmp+0x20>
 8006ce4:	3901      	subs	r1, #1
 8006ce6:	1884      	adds	r4, r0, r2
 8006ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d103      	bne.n	8006cfc <strncmp+0x1c>
 8006cf4:	42a0      	cmp	r0, r4
 8006cf6:	d001      	beq.n	8006cfc <strncmp+0x1c>
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	d1f5      	bne.n	8006ce8 <strncmp+0x8>
 8006cfc:	1ad0      	subs	r0, r2, r3
 8006cfe:	bd10      	pop	{r4, pc}
 8006d00:	4610      	mov	r0, r2
 8006d02:	e7fc      	b.n	8006cfe <strncmp+0x1e>

08006d04 <_sbrk_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	2300      	movs	r3, #0
 8006d08:	4d05      	ldr	r5, [pc, #20]	@ (8006d20 <_sbrk_r+0x1c>)
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	602b      	str	r3, [r5, #0]
 8006d10:	f7fa fc6a 	bl	80015e8 <_sbrk>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_sbrk_r+0x1a>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_sbrk_r+0x1a>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	20000414 	.word	0x20000414

08006d24 <memcpy>:
 8006d24:	440a      	add	r2, r1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d2c:	d100      	bne.n	8006d30 <memcpy+0xc>
 8006d2e:	4770      	bx	lr
 8006d30:	b510      	push	{r4, lr}
 8006d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d36:	4291      	cmp	r1, r2
 8006d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d3c:	d1f9      	bne.n	8006d32 <memcpy+0xe>
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <nan>:
 8006d40:	2000      	movs	r0, #0
 8006d42:	4901      	ldr	r1, [pc, #4]	@ (8006d48 <nan+0x8>)
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	7ff80000 	.word	0x7ff80000

08006d4c <__assert_func>:
 8006d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d4e:	4614      	mov	r4, r2
 8006d50:	461a      	mov	r2, r3
 8006d52:	4b09      	ldr	r3, [pc, #36]	@ (8006d78 <__assert_func+0x2c>)
 8006d54:	4605      	mov	r5, r0
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68d8      	ldr	r0, [r3, #12]
 8006d5a:	b954      	cbnz	r4, 8006d72 <__assert_func+0x26>
 8006d5c:	4b07      	ldr	r3, [pc, #28]	@ (8006d7c <__assert_func+0x30>)
 8006d5e:	461c      	mov	r4, r3
 8006d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d64:	9100      	str	r1, [sp, #0]
 8006d66:	462b      	mov	r3, r5
 8006d68:	4905      	ldr	r1, [pc, #20]	@ (8006d80 <__assert_func+0x34>)
 8006d6a:	f000 fba7 	bl	80074bc <fiprintf>
 8006d6e:	f000 fbb7 	bl	80074e0 <abort>
 8006d72:	4b04      	ldr	r3, [pc, #16]	@ (8006d84 <__assert_func+0x38>)
 8006d74:	e7f4      	b.n	8006d60 <__assert_func+0x14>
 8006d76:	bf00      	nop
 8006d78:	20000018 	.word	0x20000018
 8006d7c:	08007e75 	.word	0x08007e75
 8006d80:	08007e47 	.word	0x08007e47
 8006d84:	08007e3a 	.word	0x08007e3a

08006d88 <_calloc_r>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	fba1 5402 	umull	r5, r4, r1, r2
 8006d8e:	b93c      	cbnz	r4, 8006da0 <_calloc_r+0x18>
 8006d90:	4629      	mov	r1, r5
 8006d92:	f7fe f9db 	bl	800514c <_malloc_r>
 8006d96:	4606      	mov	r6, r0
 8006d98:	b928      	cbnz	r0, 8006da6 <_calloc_r+0x1e>
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	220c      	movs	r2, #12
 8006da2:	6002      	str	r2, [r0, #0]
 8006da4:	e7f9      	b.n	8006d9a <_calloc_r+0x12>
 8006da6:	462a      	mov	r2, r5
 8006da8:	4621      	mov	r1, r4
 8006daa:	f7fd fa7a 	bl	80042a2 <memset>
 8006dae:	e7f5      	b.n	8006d9c <_calloc_r+0x14>

08006db0 <rshift>:
 8006db0:	6903      	ldr	r3, [r0, #16]
 8006db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006db6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006dba:	f100 0414 	add.w	r4, r0, #20
 8006dbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006dc2:	dd46      	ble.n	8006e52 <rshift+0xa2>
 8006dc4:	f011 011f 	ands.w	r1, r1, #31
 8006dc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006dcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006dd0:	d10c      	bne.n	8006dec <rshift+0x3c>
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	f100 0710 	add.w	r7, r0, #16
 8006dd8:	42b1      	cmp	r1, r6
 8006dda:	d335      	bcc.n	8006e48 <rshift+0x98>
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	1eea      	subs	r2, r5, #3
 8006de2:	4296      	cmp	r6, r2
 8006de4:	bf38      	it	cc
 8006de6:	2300      	movcc	r3, #0
 8006de8:	4423      	add	r3, r4
 8006dea:	e015      	b.n	8006e18 <rshift+0x68>
 8006dec:	46a1      	mov	r9, r4
 8006dee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006df2:	f1c1 0820 	rsb	r8, r1, #32
 8006df6:	40cf      	lsrs	r7, r1
 8006df8:	f105 0e04 	add.w	lr, r5, #4
 8006dfc:	4576      	cmp	r6, lr
 8006dfe:	46f4      	mov	ip, lr
 8006e00:	d816      	bhi.n	8006e30 <rshift+0x80>
 8006e02:	1a9a      	subs	r2, r3, r2
 8006e04:	0092      	lsls	r2, r2, #2
 8006e06:	3a04      	subs	r2, #4
 8006e08:	3501      	adds	r5, #1
 8006e0a:	42ae      	cmp	r6, r5
 8006e0c:	bf38      	it	cc
 8006e0e:	2200      	movcc	r2, #0
 8006e10:	18a3      	adds	r3, r4, r2
 8006e12:	50a7      	str	r7, [r4, r2]
 8006e14:	b107      	cbz	r7, 8006e18 <rshift+0x68>
 8006e16:	3304      	adds	r3, #4
 8006e18:	42a3      	cmp	r3, r4
 8006e1a:	eba3 0204 	sub.w	r2, r3, r4
 8006e1e:	bf08      	it	eq
 8006e20:	2300      	moveq	r3, #0
 8006e22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e26:	6102      	str	r2, [r0, #16]
 8006e28:	bf08      	it	eq
 8006e2a:	6143      	streq	r3, [r0, #20]
 8006e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e30:	f8dc c000 	ldr.w	ip, [ip]
 8006e34:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e38:	ea4c 0707 	orr.w	r7, ip, r7
 8006e3c:	f849 7b04 	str.w	r7, [r9], #4
 8006e40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e44:	40cf      	lsrs	r7, r1
 8006e46:	e7d9      	b.n	8006dfc <rshift+0x4c>
 8006e48:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e4c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e50:	e7c2      	b.n	8006dd8 <rshift+0x28>
 8006e52:	4623      	mov	r3, r4
 8006e54:	e7e0      	b.n	8006e18 <rshift+0x68>

08006e56 <__hexdig_fun>:
 8006e56:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006e5a:	2b09      	cmp	r3, #9
 8006e5c:	d802      	bhi.n	8006e64 <__hexdig_fun+0xe>
 8006e5e:	3820      	subs	r0, #32
 8006e60:	b2c0      	uxtb	r0, r0
 8006e62:	4770      	bx	lr
 8006e64:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006e68:	2b05      	cmp	r3, #5
 8006e6a:	d801      	bhi.n	8006e70 <__hexdig_fun+0x1a>
 8006e6c:	3847      	subs	r0, #71	@ 0x47
 8006e6e:	e7f7      	b.n	8006e60 <__hexdig_fun+0xa>
 8006e70:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d801      	bhi.n	8006e7c <__hexdig_fun+0x26>
 8006e78:	3827      	subs	r0, #39	@ 0x27
 8006e7a:	e7f1      	b.n	8006e60 <__hexdig_fun+0xa>
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	4770      	bx	lr

08006e80 <__gethex>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	468a      	mov	sl, r1
 8006e86:	4690      	mov	r8, r2
 8006e88:	b085      	sub	sp, #20
 8006e8a:	9302      	str	r3, [sp, #8]
 8006e8c:	680b      	ldr	r3, [r1, #0]
 8006e8e:	9001      	str	r0, [sp, #4]
 8006e90:	1c9c      	adds	r4, r3, #2
 8006e92:	46a1      	mov	r9, r4
 8006e94:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006e98:	2830      	cmp	r0, #48	@ 0x30
 8006e9a:	d0fa      	beq.n	8006e92 <__gethex+0x12>
 8006e9c:	eba9 0303 	sub.w	r3, r9, r3
 8006ea0:	f1a3 0b02 	sub.w	fp, r3, #2
 8006ea4:	f7ff ffd7 	bl	8006e56 <__hexdig_fun>
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d168      	bne.n	8006f80 <__gethex+0x100>
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4648      	mov	r0, r9
 8006eb2:	499f      	ldr	r1, [pc, #636]	@ (8007130 <__gethex+0x2b0>)
 8006eb4:	f7ff ff14 	bl	8006ce0 <strncmp>
 8006eb8:	4607      	mov	r7, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d167      	bne.n	8006f8e <__gethex+0x10e>
 8006ebe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006ec2:	4626      	mov	r6, r4
 8006ec4:	f7ff ffc7 	bl	8006e56 <__hexdig_fun>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d062      	beq.n	8006f92 <__gethex+0x112>
 8006ecc:	4623      	mov	r3, r4
 8006ece:	7818      	ldrb	r0, [r3, #0]
 8006ed0:	4699      	mov	r9, r3
 8006ed2:	2830      	cmp	r0, #48	@ 0x30
 8006ed4:	f103 0301 	add.w	r3, r3, #1
 8006ed8:	d0f9      	beq.n	8006ece <__gethex+0x4e>
 8006eda:	f7ff ffbc 	bl	8006e56 <__hexdig_fun>
 8006ede:	fab0 f580 	clz	r5, r0
 8006ee2:	f04f 0b01 	mov.w	fp, #1
 8006ee6:	096d      	lsrs	r5, r5, #5
 8006ee8:	464a      	mov	r2, r9
 8006eea:	4616      	mov	r6, r2
 8006eec:	7830      	ldrb	r0, [r6, #0]
 8006eee:	3201      	adds	r2, #1
 8006ef0:	f7ff ffb1 	bl	8006e56 <__hexdig_fun>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d1f8      	bne.n	8006eea <__gethex+0x6a>
 8006ef8:	2201      	movs	r2, #1
 8006efa:	4630      	mov	r0, r6
 8006efc:	498c      	ldr	r1, [pc, #560]	@ (8007130 <__gethex+0x2b0>)
 8006efe:	f7ff feef 	bl	8006ce0 <strncmp>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d13f      	bne.n	8006f86 <__gethex+0x106>
 8006f06:	b944      	cbnz	r4, 8006f1a <__gethex+0x9a>
 8006f08:	1c74      	adds	r4, r6, #1
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	7830      	ldrb	r0, [r6, #0]
 8006f10:	3201      	adds	r2, #1
 8006f12:	f7ff ffa0 	bl	8006e56 <__hexdig_fun>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d1f8      	bne.n	8006f0c <__gethex+0x8c>
 8006f1a:	1ba4      	subs	r4, r4, r6
 8006f1c:	00a7      	lsls	r7, r4, #2
 8006f1e:	7833      	ldrb	r3, [r6, #0]
 8006f20:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006f24:	2b50      	cmp	r3, #80	@ 0x50
 8006f26:	d13e      	bne.n	8006fa6 <__gethex+0x126>
 8006f28:	7873      	ldrb	r3, [r6, #1]
 8006f2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006f2c:	d033      	beq.n	8006f96 <__gethex+0x116>
 8006f2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006f30:	d034      	beq.n	8006f9c <__gethex+0x11c>
 8006f32:	2400      	movs	r4, #0
 8006f34:	1c71      	adds	r1, r6, #1
 8006f36:	7808      	ldrb	r0, [r1, #0]
 8006f38:	f7ff ff8d 	bl	8006e56 <__hexdig_fun>
 8006f3c:	1e43      	subs	r3, r0, #1
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b18      	cmp	r3, #24
 8006f42:	d830      	bhi.n	8006fa6 <__gethex+0x126>
 8006f44:	f1a0 0210 	sub.w	r2, r0, #16
 8006f48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f4c:	f7ff ff83 	bl	8006e56 <__hexdig_fun>
 8006f50:	f100 3cff 	add.w	ip, r0, #4294967295
 8006f54:	fa5f fc8c 	uxtb.w	ip, ip
 8006f58:	f1bc 0f18 	cmp.w	ip, #24
 8006f5c:	f04f 030a 	mov.w	r3, #10
 8006f60:	d91e      	bls.n	8006fa0 <__gethex+0x120>
 8006f62:	b104      	cbz	r4, 8006f66 <__gethex+0xe6>
 8006f64:	4252      	negs	r2, r2
 8006f66:	4417      	add	r7, r2
 8006f68:	f8ca 1000 	str.w	r1, [sl]
 8006f6c:	b1ed      	cbz	r5, 8006faa <__gethex+0x12a>
 8006f6e:	f1bb 0f00 	cmp.w	fp, #0
 8006f72:	bf0c      	ite	eq
 8006f74:	2506      	moveq	r5, #6
 8006f76:	2500      	movne	r5, #0
 8006f78:	4628      	mov	r0, r5
 8006f7a:	b005      	add	sp, #20
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	2500      	movs	r5, #0
 8006f82:	462c      	mov	r4, r5
 8006f84:	e7b0      	b.n	8006ee8 <__gethex+0x68>
 8006f86:	2c00      	cmp	r4, #0
 8006f88:	d1c7      	bne.n	8006f1a <__gethex+0x9a>
 8006f8a:	4627      	mov	r7, r4
 8006f8c:	e7c7      	b.n	8006f1e <__gethex+0x9e>
 8006f8e:	464e      	mov	r6, r9
 8006f90:	462f      	mov	r7, r5
 8006f92:	2501      	movs	r5, #1
 8006f94:	e7c3      	b.n	8006f1e <__gethex+0x9e>
 8006f96:	2400      	movs	r4, #0
 8006f98:	1cb1      	adds	r1, r6, #2
 8006f9a:	e7cc      	b.n	8006f36 <__gethex+0xb6>
 8006f9c:	2401      	movs	r4, #1
 8006f9e:	e7fb      	b.n	8006f98 <__gethex+0x118>
 8006fa0:	fb03 0002 	mla	r0, r3, r2, r0
 8006fa4:	e7ce      	b.n	8006f44 <__gethex+0xc4>
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	e7de      	b.n	8006f68 <__gethex+0xe8>
 8006faa:	4629      	mov	r1, r5
 8006fac:	eba6 0309 	sub.w	r3, r6, r9
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	2b07      	cmp	r3, #7
 8006fb4:	dc0a      	bgt.n	8006fcc <__gethex+0x14c>
 8006fb6:	9801      	ldr	r0, [sp, #4]
 8006fb8:	f7fe f954 	bl	8005264 <_Balloc>
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	b940      	cbnz	r0, 8006fd2 <__gethex+0x152>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	21e4      	movs	r1, #228	@ 0xe4
 8006fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8007134 <__gethex+0x2b4>)
 8006fc6:	485c      	ldr	r0, [pc, #368]	@ (8007138 <__gethex+0x2b8>)
 8006fc8:	f7ff fec0 	bl	8006d4c <__assert_func>
 8006fcc:	3101      	adds	r1, #1
 8006fce:	105b      	asrs	r3, r3, #1
 8006fd0:	e7ef      	b.n	8006fb2 <__gethex+0x132>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f100 0a14 	add.w	sl, r0, #20
 8006fd8:	4655      	mov	r5, sl
 8006fda:	469b      	mov	fp, r3
 8006fdc:	45b1      	cmp	r9, r6
 8006fde:	d337      	bcc.n	8007050 <__gethex+0x1d0>
 8006fe0:	f845 bb04 	str.w	fp, [r5], #4
 8006fe4:	eba5 050a 	sub.w	r5, r5, sl
 8006fe8:	10ad      	asrs	r5, r5, #2
 8006fea:	6125      	str	r5, [r4, #16]
 8006fec:	4658      	mov	r0, fp
 8006fee:	f7fe fa2b 	bl	8005448 <__hi0bits>
 8006ff2:	016d      	lsls	r5, r5, #5
 8006ff4:	f8d8 6000 	ldr.w	r6, [r8]
 8006ff8:	1a2d      	subs	r5, r5, r0
 8006ffa:	42b5      	cmp	r5, r6
 8006ffc:	dd54      	ble.n	80070a8 <__gethex+0x228>
 8006ffe:	1bad      	subs	r5, r5, r6
 8007000:	4629      	mov	r1, r5
 8007002:	4620      	mov	r0, r4
 8007004:	f7fe fdb3 	bl	8005b6e <__any_on>
 8007008:	4681      	mov	r9, r0
 800700a:	b178      	cbz	r0, 800702c <__gethex+0x1ac>
 800700c:	f04f 0901 	mov.w	r9, #1
 8007010:	1e6b      	subs	r3, r5, #1
 8007012:	1159      	asrs	r1, r3, #5
 8007014:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007018:	f003 021f 	and.w	r2, r3, #31
 800701c:	fa09 f202 	lsl.w	r2, r9, r2
 8007020:	420a      	tst	r2, r1
 8007022:	d003      	beq.n	800702c <__gethex+0x1ac>
 8007024:	454b      	cmp	r3, r9
 8007026:	dc36      	bgt.n	8007096 <__gethex+0x216>
 8007028:	f04f 0902 	mov.w	r9, #2
 800702c:	4629      	mov	r1, r5
 800702e:	4620      	mov	r0, r4
 8007030:	f7ff febe 	bl	8006db0 <rshift>
 8007034:	442f      	add	r7, r5
 8007036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800703a:	42bb      	cmp	r3, r7
 800703c:	da42      	bge.n	80070c4 <__gethex+0x244>
 800703e:	4621      	mov	r1, r4
 8007040:	9801      	ldr	r0, [sp, #4]
 8007042:	f7fe f94f 	bl	80052e4 <_Bfree>
 8007046:	2300      	movs	r3, #0
 8007048:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800704a:	25a3      	movs	r5, #163	@ 0xa3
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	e793      	b.n	8006f78 <__gethex+0xf8>
 8007050:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007054:	2a2e      	cmp	r2, #46	@ 0x2e
 8007056:	d012      	beq.n	800707e <__gethex+0x1fe>
 8007058:	2b20      	cmp	r3, #32
 800705a:	d104      	bne.n	8007066 <__gethex+0x1e6>
 800705c:	f845 bb04 	str.w	fp, [r5], #4
 8007060:	f04f 0b00 	mov.w	fp, #0
 8007064:	465b      	mov	r3, fp
 8007066:	7830      	ldrb	r0, [r6, #0]
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	f7ff fef4 	bl	8006e56 <__hexdig_fun>
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	f000 000f 	and.w	r0, r0, #15
 8007074:	4098      	lsls	r0, r3
 8007076:	ea4b 0b00 	orr.w	fp, fp, r0
 800707a:	3304      	adds	r3, #4
 800707c:	e7ae      	b.n	8006fdc <__gethex+0x15c>
 800707e:	45b1      	cmp	r9, r6
 8007080:	d8ea      	bhi.n	8007058 <__gethex+0x1d8>
 8007082:	2201      	movs	r2, #1
 8007084:	4630      	mov	r0, r6
 8007086:	492a      	ldr	r1, [pc, #168]	@ (8007130 <__gethex+0x2b0>)
 8007088:	9303      	str	r3, [sp, #12]
 800708a:	f7ff fe29 	bl	8006ce0 <strncmp>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	2800      	cmp	r0, #0
 8007092:	d1e1      	bne.n	8007058 <__gethex+0x1d8>
 8007094:	e7a2      	b.n	8006fdc <__gethex+0x15c>
 8007096:	4620      	mov	r0, r4
 8007098:	1ea9      	subs	r1, r5, #2
 800709a:	f7fe fd68 	bl	8005b6e <__any_on>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0c2      	beq.n	8007028 <__gethex+0x1a8>
 80070a2:	f04f 0903 	mov.w	r9, #3
 80070a6:	e7c1      	b.n	800702c <__gethex+0x1ac>
 80070a8:	da09      	bge.n	80070be <__gethex+0x23e>
 80070aa:	1b75      	subs	r5, r6, r5
 80070ac:	4621      	mov	r1, r4
 80070ae:	462a      	mov	r2, r5
 80070b0:	9801      	ldr	r0, [sp, #4]
 80070b2:	f7fe fb2d 	bl	8005710 <__lshift>
 80070b6:	4604      	mov	r4, r0
 80070b8:	1b7f      	subs	r7, r7, r5
 80070ba:	f100 0a14 	add.w	sl, r0, #20
 80070be:	f04f 0900 	mov.w	r9, #0
 80070c2:	e7b8      	b.n	8007036 <__gethex+0x1b6>
 80070c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80070c8:	42bd      	cmp	r5, r7
 80070ca:	dd6f      	ble.n	80071ac <__gethex+0x32c>
 80070cc:	1bed      	subs	r5, r5, r7
 80070ce:	42ae      	cmp	r6, r5
 80070d0:	dc34      	bgt.n	800713c <__gethex+0x2bc>
 80070d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d022      	beq.n	8007120 <__gethex+0x2a0>
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d024      	beq.n	8007128 <__gethex+0x2a8>
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d115      	bne.n	800710e <__gethex+0x28e>
 80070e2:	42ae      	cmp	r6, r5
 80070e4:	d113      	bne.n	800710e <__gethex+0x28e>
 80070e6:	2e01      	cmp	r6, #1
 80070e8:	d10b      	bne.n	8007102 <__gethex+0x282>
 80070ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80070ee:	9a02      	ldr	r2, [sp, #8]
 80070f0:	2562      	movs	r5, #98	@ 0x62
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	2301      	movs	r3, #1
 80070f6:	6123      	str	r3, [r4, #16]
 80070f8:	f8ca 3000 	str.w	r3, [sl]
 80070fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fe:	601c      	str	r4, [r3, #0]
 8007100:	e73a      	b.n	8006f78 <__gethex+0xf8>
 8007102:	4620      	mov	r0, r4
 8007104:	1e71      	subs	r1, r6, #1
 8007106:	f7fe fd32 	bl	8005b6e <__any_on>
 800710a:	2800      	cmp	r0, #0
 800710c:	d1ed      	bne.n	80070ea <__gethex+0x26a>
 800710e:	4621      	mov	r1, r4
 8007110:	9801      	ldr	r0, [sp, #4]
 8007112:	f7fe f8e7 	bl	80052e4 <_Bfree>
 8007116:	2300      	movs	r3, #0
 8007118:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800711a:	2550      	movs	r5, #80	@ 0x50
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e72b      	b.n	8006f78 <__gethex+0xf8>
 8007120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1f3      	bne.n	800710e <__gethex+0x28e>
 8007126:	e7e0      	b.n	80070ea <__gethex+0x26a>
 8007128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1dd      	bne.n	80070ea <__gethex+0x26a>
 800712e:	e7ee      	b.n	800710e <__gethex+0x28e>
 8007130:	08007cc8 	.word	0x08007cc8
 8007134:	08007b5b 	.word	0x08007b5b
 8007138:	08007e76 	.word	0x08007e76
 800713c:	1e6f      	subs	r7, r5, #1
 800713e:	f1b9 0f00 	cmp.w	r9, #0
 8007142:	d130      	bne.n	80071a6 <__gethex+0x326>
 8007144:	b127      	cbz	r7, 8007150 <__gethex+0x2d0>
 8007146:	4639      	mov	r1, r7
 8007148:	4620      	mov	r0, r4
 800714a:	f7fe fd10 	bl	8005b6e <__any_on>
 800714e:	4681      	mov	r9, r0
 8007150:	2301      	movs	r3, #1
 8007152:	4629      	mov	r1, r5
 8007154:	1b76      	subs	r6, r6, r5
 8007156:	2502      	movs	r5, #2
 8007158:	117a      	asrs	r2, r7, #5
 800715a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800715e:	f007 071f 	and.w	r7, r7, #31
 8007162:	40bb      	lsls	r3, r7
 8007164:	4213      	tst	r3, r2
 8007166:	4620      	mov	r0, r4
 8007168:	bf18      	it	ne
 800716a:	f049 0902 	orrne.w	r9, r9, #2
 800716e:	f7ff fe1f 	bl	8006db0 <rshift>
 8007172:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007176:	f1b9 0f00 	cmp.w	r9, #0
 800717a:	d047      	beq.n	800720c <__gethex+0x38c>
 800717c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d015      	beq.n	80071b0 <__gethex+0x330>
 8007184:	2b03      	cmp	r3, #3
 8007186:	d017      	beq.n	80071b8 <__gethex+0x338>
 8007188:	2b01      	cmp	r3, #1
 800718a:	d109      	bne.n	80071a0 <__gethex+0x320>
 800718c:	f019 0f02 	tst.w	r9, #2
 8007190:	d006      	beq.n	80071a0 <__gethex+0x320>
 8007192:	f8da 3000 	ldr.w	r3, [sl]
 8007196:	ea49 0903 	orr.w	r9, r9, r3
 800719a:	f019 0f01 	tst.w	r9, #1
 800719e:	d10e      	bne.n	80071be <__gethex+0x33e>
 80071a0:	f045 0510 	orr.w	r5, r5, #16
 80071a4:	e032      	b.n	800720c <__gethex+0x38c>
 80071a6:	f04f 0901 	mov.w	r9, #1
 80071aa:	e7d1      	b.n	8007150 <__gethex+0x2d0>
 80071ac:	2501      	movs	r5, #1
 80071ae:	e7e2      	b.n	8007176 <__gethex+0x2f6>
 80071b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071b2:	f1c3 0301 	rsb	r3, r3, #1
 80071b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0f0      	beq.n	80071a0 <__gethex+0x320>
 80071be:	f04f 0c00 	mov.w	ip, #0
 80071c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80071c6:	f104 0314 	add.w	r3, r4, #20
 80071ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80071ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80071dc:	d01b      	beq.n	8007216 <__gethex+0x396>
 80071de:	3201      	adds	r2, #1
 80071e0:	6002      	str	r2, [r0, #0]
 80071e2:	2d02      	cmp	r5, #2
 80071e4:	f104 0314 	add.w	r3, r4, #20
 80071e8:	d13c      	bne.n	8007264 <__gethex+0x3e4>
 80071ea:	f8d8 2000 	ldr.w	r2, [r8]
 80071ee:	3a01      	subs	r2, #1
 80071f0:	42b2      	cmp	r2, r6
 80071f2:	d109      	bne.n	8007208 <__gethex+0x388>
 80071f4:	2201      	movs	r2, #1
 80071f6:	1171      	asrs	r1, r6, #5
 80071f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071fc:	f006 061f 	and.w	r6, r6, #31
 8007200:	fa02 f606 	lsl.w	r6, r2, r6
 8007204:	421e      	tst	r6, r3
 8007206:	d13a      	bne.n	800727e <__gethex+0x3fe>
 8007208:	f045 0520 	orr.w	r5, r5, #32
 800720c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800720e:	601c      	str	r4, [r3, #0]
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	601f      	str	r7, [r3, #0]
 8007214:	e6b0      	b.n	8006f78 <__gethex+0xf8>
 8007216:	4299      	cmp	r1, r3
 8007218:	f843 cc04 	str.w	ip, [r3, #-4]
 800721c:	d8d9      	bhi.n	80071d2 <__gethex+0x352>
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	459b      	cmp	fp, r3
 8007222:	db17      	blt.n	8007254 <__gethex+0x3d4>
 8007224:	6861      	ldr	r1, [r4, #4]
 8007226:	9801      	ldr	r0, [sp, #4]
 8007228:	3101      	adds	r1, #1
 800722a:	f7fe f81b 	bl	8005264 <_Balloc>
 800722e:	4681      	mov	r9, r0
 8007230:	b918      	cbnz	r0, 800723a <__gethex+0x3ba>
 8007232:	4602      	mov	r2, r0
 8007234:	2184      	movs	r1, #132	@ 0x84
 8007236:	4b19      	ldr	r3, [pc, #100]	@ (800729c <__gethex+0x41c>)
 8007238:	e6c5      	b.n	8006fc6 <__gethex+0x146>
 800723a:	6922      	ldr	r2, [r4, #16]
 800723c:	f104 010c 	add.w	r1, r4, #12
 8007240:	3202      	adds	r2, #2
 8007242:	0092      	lsls	r2, r2, #2
 8007244:	300c      	adds	r0, #12
 8007246:	f7ff fd6d 	bl	8006d24 <memcpy>
 800724a:	4621      	mov	r1, r4
 800724c:	9801      	ldr	r0, [sp, #4]
 800724e:	f7fe f849 	bl	80052e4 <_Bfree>
 8007252:	464c      	mov	r4, r9
 8007254:	6923      	ldr	r3, [r4, #16]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6122      	str	r2, [r4, #16]
 800725a:	2201      	movs	r2, #1
 800725c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007260:	615a      	str	r2, [r3, #20]
 8007262:	e7be      	b.n	80071e2 <__gethex+0x362>
 8007264:	6922      	ldr	r2, [r4, #16]
 8007266:	455a      	cmp	r2, fp
 8007268:	dd0b      	ble.n	8007282 <__gethex+0x402>
 800726a:	2101      	movs	r1, #1
 800726c:	4620      	mov	r0, r4
 800726e:	f7ff fd9f 	bl	8006db0 <rshift>
 8007272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007276:	3701      	adds	r7, #1
 8007278:	42bb      	cmp	r3, r7
 800727a:	f6ff aee0 	blt.w	800703e <__gethex+0x1be>
 800727e:	2501      	movs	r5, #1
 8007280:	e7c2      	b.n	8007208 <__gethex+0x388>
 8007282:	f016 061f 	ands.w	r6, r6, #31
 8007286:	d0fa      	beq.n	800727e <__gethex+0x3fe>
 8007288:	4453      	add	r3, sl
 800728a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800728e:	f7fe f8db 	bl	8005448 <__hi0bits>
 8007292:	f1c6 0620 	rsb	r6, r6, #32
 8007296:	42b0      	cmp	r0, r6
 8007298:	dbe7      	blt.n	800726a <__gethex+0x3ea>
 800729a:	e7f0      	b.n	800727e <__gethex+0x3fe>
 800729c:	08007b5b 	.word	0x08007b5b

080072a0 <L_shift>:
 80072a0:	f1c2 0208 	rsb	r2, r2, #8
 80072a4:	0092      	lsls	r2, r2, #2
 80072a6:	b570      	push	{r4, r5, r6, lr}
 80072a8:	f1c2 0620 	rsb	r6, r2, #32
 80072ac:	6843      	ldr	r3, [r0, #4]
 80072ae:	6804      	ldr	r4, [r0, #0]
 80072b0:	fa03 f506 	lsl.w	r5, r3, r6
 80072b4:	432c      	orrs	r4, r5
 80072b6:	40d3      	lsrs	r3, r2
 80072b8:	6004      	str	r4, [r0, #0]
 80072ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80072be:	4288      	cmp	r0, r1
 80072c0:	d3f4      	bcc.n	80072ac <L_shift+0xc>
 80072c2:	bd70      	pop	{r4, r5, r6, pc}

080072c4 <__match>:
 80072c4:	b530      	push	{r4, r5, lr}
 80072c6:	6803      	ldr	r3, [r0, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ce:	b914      	cbnz	r4, 80072d6 <__match+0x12>
 80072d0:	6003      	str	r3, [r0, #0]
 80072d2:	2001      	movs	r0, #1
 80072d4:	bd30      	pop	{r4, r5, pc}
 80072d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80072de:	2d19      	cmp	r5, #25
 80072e0:	bf98      	it	ls
 80072e2:	3220      	addls	r2, #32
 80072e4:	42a2      	cmp	r2, r4
 80072e6:	d0f0      	beq.n	80072ca <__match+0x6>
 80072e8:	2000      	movs	r0, #0
 80072ea:	e7f3      	b.n	80072d4 <__match+0x10>

080072ec <__hexnan>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	2500      	movs	r5, #0
 80072f2:	680b      	ldr	r3, [r1, #0]
 80072f4:	4682      	mov	sl, r0
 80072f6:	115e      	asrs	r6, r3, #5
 80072f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072fc:	f013 031f 	ands.w	r3, r3, #31
 8007300:	bf18      	it	ne
 8007302:	3604      	addne	r6, #4
 8007304:	1f37      	subs	r7, r6, #4
 8007306:	4690      	mov	r8, r2
 8007308:	46b9      	mov	r9, r7
 800730a:	463c      	mov	r4, r7
 800730c:	46ab      	mov	fp, r5
 800730e:	b087      	sub	sp, #28
 8007310:	6801      	ldr	r1, [r0, #0]
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	f846 5c04 	str.w	r5, [r6, #-4]
 8007318:	9502      	str	r5, [sp, #8]
 800731a:	784a      	ldrb	r2, [r1, #1]
 800731c:	1c4b      	adds	r3, r1, #1
 800731e:	9303      	str	r3, [sp, #12]
 8007320:	b342      	cbz	r2, 8007374 <__hexnan+0x88>
 8007322:	4610      	mov	r0, r2
 8007324:	9105      	str	r1, [sp, #20]
 8007326:	9204      	str	r2, [sp, #16]
 8007328:	f7ff fd95 	bl	8006e56 <__hexdig_fun>
 800732c:	2800      	cmp	r0, #0
 800732e:	d151      	bne.n	80073d4 <__hexnan+0xe8>
 8007330:	9a04      	ldr	r2, [sp, #16]
 8007332:	9905      	ldr	r1, [sp, #20]
 8007334:	2a20      	cmp	r2, #32
 8007336:	d818      	bhi.n	800736a <__hexnan+0x7e>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	459b      	cmp	fp, r3
 800733c:	dd13      	ble.n	8007366 <__hexnan+0x7a>
 800733e:	454c      	cmp	r4, r9
 8007340:	d206      	bcs.n	8007350 <__hexnan+0x64>
 8007342:	2d07      	cmp	r5, #7
 8007344:	dc04      	bgt.n	8007350 <__hexnan+0x64>
 8007346:	462a      	mov	r2, r5
 8007348:	4649      	mov	r1, r9
 800734a:	4620      	mov	r0, r4
 800734c:	f7ff ffa8 	bl	80072a0 <L_shift>
 8007350:	4544      	cmp	r4, r8
 8007352:	d952      	bls.n	80073fa <__hexnan+0x10e>
 8007354:	2300      	movs	r3, #0
 8007356:	f1a4 0904 	sub.w	r9, r4, #4
 800735a:	f844 3c04 	str.w	r3, [r4, #-4]
 800735e:	461d      	mov	r5, r3
 8007360:	464c      	mov	r4, r9
 8007362:	f8cd b008 	str.w	fp, [sp, #8]
 8007366:	9903      	ldr	r1, [sp, #12]
 8007368:	e7d7      	b.n	800731a <__hexnan+0x2e>
 800736a:	2a29      	cmp	r2, #41	@ 0x29
 800736c:	d157      	bne.n	800741e <__hexnan+0x132>
 800736e:	3102      	adds	r1, #2
 8007370:	f8ca 1000 	str.w	r1, [sl]
 8007374:	f1bb 0f00 	cmp.w	fp, #0
 8007378:	d051      	beq.n	800741e <__hexnan+0x132>
 800737a:	454c      	cmp	r4, r9
 800737c:	d206      	bcs.n	800738c <__hexnan+0xa0>
 800737e:	2d07      	cmp	r5, #7
 8007380:	dc04      	bgt.n	800738c <__hexnan+0xa0>
 8007382:	462a      	mov	r2, r5
 8007384:	4649      	mov	r1, r9
 8007386:	4620      	mov	r0, r4
 8007388:	f7ff ff8a 	bl	80072a0 <L_shift>
 800738c:	4544      	cmp	r4, r8
 800738e:	d936      	bls.n	80073fe <__hexnan+0x112>
 8007390:	4623      	mov	r3, r4
 8007392:	f1a8 0204 	sub.w	r2, r8, #4
 8007396:	f853 1b04 	ldr.w	r1, [r3], #4
 800739a:	429f      	cmp	r7, r3
 800739c:	f842 1f04 	str.w	r1, [r2, #4]!
 80073a0:	d2f9      	bcs.n	8007396 <__hexnan+0xaa>
 80073a2:	1b3b      	subs	r3, r7, r4
 80073a4:	f023 0303 	bic.w	r3, r3, #3
 80073a8:	3304      	adds	r3, #4
 80073aa:	3401      	adds	r4, #1
 80073ac:	3e03      	subs	r6, #3
 80073ae:	42b4      	cmp	r4, r6
 80073b0:	bf88      	it	hi
 80073b2:	2304      	movhi	r3, #4
 80073b4:	2200      	movs	r2, #0
 80073b6:	4443      	add	r3, r8
 80073b8:	f843 2b04 	str.w	r2, [r3], #4
 80073bc:	429f      	cmp	r7, r3
 80073be:	d2fb      	bcs.n	80073b8 <__hexnan+0xcc>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	b91b      	cbnz	r3, 80073cc <__hexnan+0xe0>
 80073c4:	4547      	cmp	r7, r8
 80073c6:	d128      	bne.n	800741a <__hexnan+0x12e>
 80073c8:	2301      	movs	r3, #1
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	2005      	movs	r0, #5
 80073ce:	b007      	add	sp, #28
 80073d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d4:	3501      	adds	r5, #1
 80073d6:	2d08      	cmp	r5, #8
 80073d8:	f10b 0b01 	add.w	fp, fp, #1
 80073dc:	dd06      	ble.n	80073ec <__hexnan+0x100>
 80073de:	4544      	cmp	r4, r8
 80073e0:	d9c1      	bls.n	8007366 <__hexnan+0x7a>
 80073e2:	2300      	movs	r3, #0
 80073e4:	2501      	movs	r5, #1
 80073e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80073ea:	3c04      	subs	r4, #4
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	f000 000f 	and.w	r0, r0, #15
 80073f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80073f6:	6020      	str	r0, [r4, #0]
 80073f8:	e7b5      	b.n	8007366 <__hexnan+0x7a>
 80073fa:	2508      	movs	r5, #8
 80073fc:	e7b3      	b.n	8007366 <__hexnan+0x7a>
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0dd      	beq.n	80073c0 <__hexnan+0xd4>
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	f1c3 0320 	rsb	r3, r3, #32
 800740c:	40da      	lsrs	r2, r3
 800740e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007412:	4013      	ands	r3, r2
 8007414:	f846 3c04 	str.w	r3, [r6, #-4]
 8007418:	e7d2      	b.n	80073c0 <__hexnan+0xd4>
 800741a:	3f04      	subs	r7, #4
 800741c:	e7d0      	b.n	80073c0 <__hexnan+0xd4>
 800741e:	2004      	movs	r0, #4
 8007420:	e7d5      	b.n	80073ce <__hexnan+0xe2>

08007422 <__ascii_mbtowc>:
 8007422:	b082      	sub	sp, #8
 8007424:	b901      	cbnz	r1, 8007428 <__ascii_mbtowc+0x6>
 8007426:	a901      	add	r1, sp, #4
 8007428:	b142      	cbz	r2, 800743c <__ascii_mbtowc+0x1a>
 800742a:	b14b      	cbz	r3, 8007440 <__ascii_mbtowc+0x1e>
 800742c:	7813      	ldrb	r3, [r2, #0]
 800742e:	600b      	str	r3, [r1, #0]
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	1e10      	subs	r0, r2, #0
 8007434:	bf18      	it	ne
 8007436:	2001      	movne	r0, #1
 8007438:	b002      	add	sp, #8
 800743a:	4770      	bx	lr
 800743c:	4610      	mov	r0, r2
 800743e:	e7fb      	b.n	8007438 <__ascii_mbtowc+0x16>
 8007440:	f06f 0001 	mvn.w	r0, #1
 8007444:	e7f8      	b.n	8007438 <__ascii_mbtowc+0x16>

08007446 <_realloc_r>:
 8007446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	4680      	mov	r8, r0
 800744c:	4615      	mov	r5, r2
 800744e:	460c      	mov	r4, r1
 8007450:	b921      	cbnz	r1, 800745c <_realloc_r+0x16>
 8007452:	4611      	mov	r1, r2
 8007454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007458:	f7fd be78 	b.w	800514c <_malloc_r>
 800745c:	b92a      	cbnz	r2, 800746a <_realloc_r+0x24>
 800745e:	f7fd fe03 	bl	8005068 <_free_r>
 8007462:	2400      	movs	r4, #0
 8007464:	4620      	mov	r0, r4
 8007466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800746a:	f000 f840 	bl	80074ee <_malloc_usable_size_r>
 800746e:	4285      	cmp	r5, r0
 8007470:	4606      	mov	r6, r0
 8007472:	d802      	bhi.n	800747a <_realloc_r+0x34>
 8007474:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007478:	d8f4      	bhi.n	8007464 <_realloc_r+0x1e>
 800747a:	4629      	mov	r1, r5
 800747c:	4640      	mov	r0, r8
 800747e:	f7fd fe65 	bl	800514c <_malloc_r>
 8007482:	4607      	mov	r7, r0
 8007484:	2800      	cmp	r0, #0
 8007486:	d0ec      	beq.n	8007462 <_realloc_r+0x1c>
 8007488:	42b5      	cmp	r5, r6
 800748a:	462a      	mov	r2, r5
 800748c:	4621      	mov	r1, r4
 800748e:	bf28      	it	cs
 8007490:	4632      	movcs	r2, r6
 8007492:	f7ff fc47 	bl	8006d24 <memcpy>
 8007496:	4621      	mov	r1, r4
 8007498:	4640      	mov	r0, r8
 800749a:	f7fd fde5 	bl	8005068 <_free_r>
 800749e:	463c      	mov	r4, r7
 80074a0:	e7e0      	b.n	8007464 <_realloc_r+0x1e>

080074a2 <__ascii_wctomb>:
 80074a2:	4603      	mov	r3, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	b141      	cbz	r1, 80074ba <__ascii_wctomb+0x18>
 80074a8:	2aff      	cmp	r2, #255	@ 0xff
 80074aa:	d904      	bls.n	80074b6 <__ascii_wctomb+0x14>
 80074ac:	228a      	movs	r2, #138	@ 0x8a
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	4770      	bx	lr
 80074b6:	2001      	movs	r0, #1
 80074b8:	700a      	strb	r2, [r1, #0]
 80074ba:	4770      	bx	lr

080074bc <fiprintf>:
 80074bc:	b40e      	push	{r1, r2, r3}
 80074be:	b503      	push	{r0, r1, lr}
 80074c0:	4601      	mov	r1, r0
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	4805      	ldr	r0, [pc, #20]	@ (80074dc <fiprintf+0x20>)
 80074c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	f000 f83d 	bl	800754c <_vfiprintf_r>
 80074d2:	b002      	add	sp, #8
 80074d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d8:	b003      	add	sp, #12
 80074da:	4770      	bx	lr
 80074dc:	20000018 	.word	0x20000018

080074e0 <abort>:
 80074e0:	2006      	movs	r0, #6
 80074e2:	b508      	push	{r3, lr}
 80074e4:	f000 fa06 	bl	80078f4 <raise>
 80074e8:	2001      	movs	r0, #1
 80074ea:	f7fa f808 	bl	80014fe <_exit>

080074ee <_malloc_usable_size_r>:
 80074ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f2:	1f18      	subs	r0, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbc      	itt	lt
 80074f8:	580b      	ldrlt	r3, [r1, r0]
 80074fa:	18c0      	addlt	r0, r0, r3
 80074fc:	4770      	bx	lr

080074fe <__sfputc_r>:
 80074fe:	6893      	ldr	r3, [r2, #8]
 8007500:	b410      	push	{r4}
 8007502:	3b01      	subs	r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	6093      	str	r3, [r2, #8]
 8007508:	da07      	bge.n	800751a <__sfputc_r+0x1c>
 800750a:	6994      	ldr	r4, [r2, #24]
 800750c:	42a3      	cmp	r3, r4
 800750e:	db01      	blt.n	8007514 <__sfputc_r+0x16>
 8007510:	290a      	cmp	r1, #10
 8007512:	d102      	bne.n	800751a <__sfputc_r+0x1c>
 8007514:	bc10      	pop	{r4}
 8007516:	f000 b931 	b.w	800777c <__swbuf_r>
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	1c58      	adds	r0, r3, #1
 800751e:	6010      	str	r0, [r2, #0]
 8007520:	7019      	strb	r1, [r3, #0]
 8007522:	4608      	mov	r0, r1
 8007524:	bc10      	pop	{r4}
 8007526:	4770      	bx	lr

08007528 <__sfputs_r>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	4606      	mov	r6, r0
 800752c:	460f      	mov	r7, r1
 800752e:	4614      	mov	r4, r2
 8007530:	18d5      	adds	r5, r2, r3
 8007532:	42ac      	cmp	r4, r5
 8007534:	d101      	bne.n	800753a <__sfputs_r+0x12>
 8007536:	2000      	movs	r0, #0
 8007538:	e007      	b.n	800754a <__sfputs_r+0x22>
 800753a:	463a      	mov	r2, r7
 800753c:	4630      	mov	r0, r6
 800753e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007542:	f7ff ffdc 	bl	80074fe <__sfputc_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d1f3      	bne.n	8007532 <__sfputs_r+0xa>
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800754c <_vfiprintf_r>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	460d      	mov	r5, r1
 8007552:	4614      	mov	r4, r2
 8007554:	4698      	mov	r8, r3
 8007556:	4606      	mov	r6, r0
 8007558:	b09d      	sub	sp, #116	@ 0x74
 800755a:	b118      	cbz	r0, 8007564 <_vfiprintf_r+0x18>
 800755c:	6a03      	ldr	r3, [r0, #32]
 800755e:	b90b      	cbnz	r3, 8007564 <_vfiprintf_r+0x18>
 8007560:	f7fc fe06 	bl	8004170 <__sinit>
 8007564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007566:	07d9      	lsls	r1, r3, #31
 8007568:	d405      	bmi.n	8007576 <_vfiprintf_r+0x2a>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	059a      	lsls	r2, r3, #22
 800756e:	d402      	bmi.n	8007576 <_vfiprintf_r+0x2a>
 8007570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007572:	f7fc ff14 	bl	800439e <__retarget_lock_acquire_recursive>
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	071b      	lsls	r3, r3, #28
 800757a:	d501      	bpl.n	8007580 <_vfiprintf_r+0x34>
 800757c:	692b      	ldr	r3, [r5, #16]
 800757e:	b99b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x5c>
 8007580:	4629      	mov	r1, r5
 8007582:	4630      	mov	r0, r6
 8007584:	f000 f938 	bl	80077f8 <__swsetup_r>
 8007588:	b170      	cbz	r0, 80075a8 <_vfiprintf_r+0x5c>
 800758a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800758c:	07dc      	lsls	r4, r3, #31
 800758e:	d504      	bpl.n	800759a <_vfiprintf_r+0x4e>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	b01d      	add	sp, #116	@ 0x74
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	89ab      	ldrh	r3, [r5, #12]
 800759c:	0598      	lsls	r0, r3, #22
 800759e:	d4f7      	bmi.n	8007590 <_vfiprintf_r+0x44>
 80075a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075a2:	f7fc fefd 	bl	80043a0 <__retarget_lock_release_recursive>
 80075a6:	e7f3      	b.n	8007590 <_vfiprintf_r+0x44>
 80075a8:	2300      	movs	r3, #0
 80075aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ac:	2320      	movs	r3, #32
 80075ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075b2:	2330      	movs	r3, #48	@ 0x30
 80075b4:	f04f 0901 	mov.w	r9, #1
 80075b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007768 <_vfiprintf_r+0x21c>
 80075c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075c4:	4623      	mov	r3, r4
 80075c6:	469a      	mov	sl, r3
 80075c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075cc:	b10a      	cbz	r2, 80075d2 <_vfiprintf_r+0x86>
 80075ce:	2a25      	cmp	r2, #37	@ 0x25
 80075d0:	d1f9      	bne.n	80075c6 <_vfiprintf_r+0x7a>
 80075d2:	ebba 0b04 	subs.w	fp, sl, r4
 80075d6:	d00b      	beq.n	80075f0 <_vfiprintf_r+0xa4>
 80075d8:	465b      	mov	r3, fp
 80075da:	4622      	mov	r2, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	4630      	mov	r0, r6
 80075e0:	f7ff ffa2 	bl	8007528 <__sfputs_r>
 80075e4:	3001      	adds	r0, #1
 80075e6:	f000 80a7 	beq.w	8007738 <_vfiprintf_r+0x1ec>
 80075ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075ec:	445a      	add	r2, fp
 80075ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80075f0:	f89a 3000 	ldrb.w	r3, [sl]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 809f 	beq.w	8007738 <_vfiprintf_r+0x1ec>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007604:	f10a 0a01 	add.w	sl, sl, #1
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	9307      	str	r3, [sp, #28]
 800760c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007610:	931a      	str	r3, [sp, #104]	@ 0x68
 8007612:	4654      	mov	r4, sl
 8007614:	2205      	movs	r2, #5
 8007616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761a:	4853      	ldr	r0, [pc, #332]	@ (8007768 <_vfiprintf_r+0x21c>)
 800761c:	f7fc fec1 	bl	80043a2 <memchr>
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	b9d8      	cbnz	r0, 800765c <_vfiprintf_r+0x110>
 8007624:	06d1      	lsls	r1, r2, #27
 8007626:	bf44      	itt	mi
 8007628:	2320      	movmi	r3, #32
 800762a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800762e:	0713      	lsls	r3, r2, #28
 8007630:	bf44      	itt	mi
 8007632:	232b      	movmi	r3, #43	@ 0x2b
 8007634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007638:	f89a 3000 	ldrb.w	r3, [sl]
 800763c:	2b2a      	cmp	r3, #42	@ 0x2a
 800763e:	d015      	beq.n	800766c <_vfiprintf_r+0x120>
 8007640:	4654      	mov	r4, sl
 8007642:	2000      	movs	r0, #0
 8007644:	f04f 0c0a 	mov.w	ip, #10
 8007648:	9a07      	ldr	r2, [sp, #28]
 800764a:	4621      	mov	r1, r4
 800764c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007650:	3b30      	subs	r3, #48	@ 0x30
 8007652:	2b09      	cmp	r3, #9
 8007654:	d94b      	bls.n	80076ee <_vfiprintf_r+0x1a2>
 8007656:	b1b0      	cbz	r0, 8007686 <_vfiprintf_r+0x13a>
 8007658:	9207      	str	r2, [sp, #28]
 800765a:	e014      	b.n	8007686 <_vfiprintf_r+0x13a>
 800765c:	eba0 0308 	sub.w	r3, r0, r8
 8007660:	fa09 f303 	lsl.w	r3, r9, r3
 8007664:	4313      	orrs	r3, r2
 8007666:	46a2      	mov	sl, r4
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	e7d2      	b.n	8007612 <_vfiprintf_r+0xc6>
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	1d19      	adds	r1, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	9103      	str	r1, [sp, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	bfbb      	ittet	lt
 8007678:	425b      	neglt	r3, r3
 800767a:	f042 0202 	orrlt.w	r2, r2, #2
 800767e:	9307      	strge	r3, [sp, #28]
 8007680:	9307      	strlt	r3, [sp, #28]
 8007682:	bfb8      	it	lt
 8007684:	9204      	strlt	r2, [sp, #16]
 8007686:	7823      	ldrb	r3, [r4, #0]
 8007688:	2b2e      	cmp	r3, #46	@ 0x2e
 800768a:	d10a      	bne.n	80076a2 <_vfiprintf_r+0x156>
 800768c:	7863      	ldrb	r3, [r4, #1]
 800768e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007690:	d132      	bne.n	80076f8 <_vfiprintf_r+0x1ac>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	3402      	adds	r4, #2
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	9203      	str	r2, [sp, #12]
 800769c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076a0:	9305      	str	r3, [sp, #20]
 80076a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800776c <_vfiprintf_r+0x220>
 80076a6:	2203      	movs	r2, #3
 80076a8:	4650      	mov	r0, sl
 80076aa:	7821      	ldrb	r1, [r4, #0]
 80076ac:	f7fc fe79 	bl	80043a2 <memchr>
 80076b0:	b138      	cbz	r0, 80076c2 <_vfiprintf_r+0x176>
 80076b2:	2240      	movs	r2, #64	@ 0x40
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	eba0 000a 	sub.w	r0, r0, sl
 80076ba:	4082      	lsls	r2, r0
 80076bc:	4313      	orrs	r3, r2
 80076be:	3401      	adds	r4, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c6:	2206      	movs	r2, #6
 80076c8:	4829      	ldr	r0, [pc, #164]	@ (8007770 <_vfiprintf_r+0x224>)
 80076ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076ce:	f7fc fe68 	bl	80043a2 <memchr>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d03f      	beq.n	8007756 <_vfiprintf_r+0x20a>
 80076d6:	4b27      	ldr	r3, [pc, #156]	@ (8007774 <_vfiprintf_r+0x228>)
 80076d8:	bb1b      	cbnz	r3, 8007722 <_vfiprintf_r+0x1d6>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	3307      	adds	r3, #7
 80076de:	f023 0307 	bic.w	r3, r3, #7
 80076e2:	3308      	adds	r3, #8
 80076e4:	9303      	str	r3, [sp, #12]
 80076e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e8:	443b      	add	r3, r7
 80076ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ec:	e76a      	b.n	80075c4 <_vfiprintf_r+0x78>
 80076ee:	460c      	mov	r4, r1
 80076f0:	2001      	movs	r0, #1
 80076f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076f6:	e7a8      	b.n	800764a <_vfiprintf_r+0xfe>
 80076f8:	2300      	movs	r3, #0
 80076fa:	f04f 0c0a 	mov.w	ip, #10
 80076fe:	4619      	mov	r1, r3
 8007700:	3401      	adds	r4, #1
 8007702:	9305      	str	r3, [sp, #20]
 8007704:	4620      	mov	r0, r4
 8007706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800770a:	3a30      	subs	r2, #48	@ 0x30
 800770c:	2a09      	cmp	r2, #9
 800770e:	d903      	bls.n	8007718 <_vfiprintf_r+0x1cc>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0c6      	beq.n	80076a2 <_vfiprintf_r+0x156>
 8007714:	9105      	str	r1, [sp, #20]
 8007716:	e7c4      	b.n	80076a2 <_vfiprintf_r+0x156>
 8007718:	4604      	mov	r4, r0
 800771a:	2301      	movs	r3, #1
 800771c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007720:	e7f0      	b.n	8007704 <_vfiprintf_r+0x1b8>
 8007722:	ab03      	add	r3, sp, #12
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	462a      	mov	r2, r5
 8007728:	4630      	mov	r0, r6
 800772a:	4b13      	ldr	r3, [pc, #76]	@ (8007778 <_vfiprintf_r+0x22c>)
 800772c:	a904      	add	r1, sp, #16
 800772e:	f7fb fec5 	bl	80034bc <_printf_float>
 8007732:	4607      	mov	r7, r0
 8007734:	1c78      	adds	r0, r7, #1
 8007736:	d1d6      	bne.n	80076e6 <_vfiprintf_r+0x19a>
 8007738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800773a:	07d9      	lsls	r1, r3, #31
 800773c:	d405      	bmi.n	800774a <_vfiprintf_r+0x1fe>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	059a      	lsls	r2, r3, #22
 8007742:	d402      	bmi.n	800774a <_vfiprintf_r+0x1fe>
 8007744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007746:	f7fc fe2b 	bl	80043a0 <__retarget_lock_release_recursive>
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	065b      	lsls	r3, r3, #25
 800774e:	f53f af1f 	bmi.w	8007590 <_vfiprintf_r+0x44>
 8007752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007754:	e71e      	b.n	8007594 <_vfiprintf_r+0x48>
 8007756:	ab03      	add	r3, sp, #12
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	462a      	mov	r2, r5
 800775c:	4630      	mov	r0, r6
 800775e:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <_vfiprintf_r+0x22c>)
 8007760:	a904      	add	r1, sp, #16
 8007762:	f7fc f949 	bl	80039f8 <_printf_i>
 8007766:	e7e4      	b.n	8007732 <_vfiprintf_r+0x1e6>
 8007768:	08007e21 	.word	0x08007e21
 800776c:	08007e27 	.word	0x08007e27
 8007770:	08007e2b 	.word	0x08007e2b
 8007774:	080034bd 	.word	0x080034bd
 8007778:	08007529 	.word	0x08007529

0800777c <__swbuf_r>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	460e      	mov	r6, r1
 8007780:	4614      	mov	r4, r2
 8007782:	4605      	mov	r5, r0
 8007784:	b118      	cbz	r0, 800778e <__swbuf_r+0x12>
 8007786:	6a03      	ldr	r3, [r0, #32]
 8007788:	b90b      	cbnz	r3, 800778e <__swbuf_r+0x12>
 800778a:	f7fc fcf1 	bl	8004170 <__sinit>
 800778e:	69a3      	ldr	r3, [r4, #24]
 8007790:	60a3      	str	r3, [r4, #8]
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	071a      	lsls	r2, r3, #28
 8007796:	d501      	bpl.n	800779c <__swbuf_r+0x20>
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	b943      	cbnz	r3, 80077ae <__swbuf_r+0x32>
 800779c:	4621      	mov	r1, r4
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f82a 	bl	80077f8 <__swsetup_r>
 80077a4:	b118      	cbz	r0, 80077ae <__swbuf_r+0x32>
 80077a6:	f04f 37ff 	mov.w	r7, #4294967295
 80077aa:	4638      	mov	r0, r7
 80077ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	6922      	ldr	r2, [r4, #16]
 80077b2:	b2f6      	uxtb	r6, r6
 80077b4:	1a98      	subs	r0, r3, r2
 80077b6:	6963      	ldr	r3, [r4, #20]
 80077b8:	4637      	mov	r7, r6
 80077ba:	4283      	cmp	r3, r0
 80077bc:	dc05      	bgt.n	80077ca <__swbuf_r+0x4e>
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f7ff fa4b 	bl	8006c5c <_fflush_r>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d1ed      	bne.n	80077a6 <__swbuf_r+0x2a>
 80077ca:	68a3      	ldr	r3, [r4, #8]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	60a3      	str	r3, [r4, #8]
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	6022      	str	r2, [r4, #0]
 80077d6:	701e      	strb	r6, [r3, #0]
 80077d8:	6962      	ldr	r2, [r4, #20]
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	429a      	cmp	r2, r3
 80077de:	d004      	beq.n	80077ea <__swbuf_r+0x6e>
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d5e1      	bpl.n	80077aa <__swbuf_r+0x2e>
 80077e6:	2e0a      	cmp	r6, #10
 80077e8:	d1df      	bne.n	80077aa <__swbuf_r+0x2e>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	f7ff fa35 	bl	8006c5c <_fflush_r>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d0d9      	beq.n	80077aa <__swbuf_r+0x2e>
 80077f6:	e7d6      	b.n	80077a6 <__swbuf_r+0x2a>

080077f8 <__swsetup_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4b29      	ldr	r3, [pc, #164]	@ (80078a0 <__swsetup_r+0xa8>)
 80077fc:	4605      	mov	r5, r0
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	460c      	mov	r4, r1
 8007802:	b118      	cbz	r0, 800780c <__swsetup_r+0x14>
 8007804:	6a03      	ldr	r3, [r0, #32]
 8007806:	b90b      	cbnz	r3, 800780c <__swsetup_r+0x14>
 8007808:	f7fc fcb2 	bl	8004170 <__sinit>
 800780c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007810:	0719      	lsls	r1, r3, #28
 8007812:	d422      	bmi.n	800785a <__swsetup_r+0x62>
 8007814:	06da      	lsls	r2, r3, #27
 8007816:	d407      	bmi.n	8007828 <__swsetup_r+0x30>
 8007818:	2209      	movs	r2, #9
 800781a:	602a      	str	r2, [r5, #0]
 800781c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007820:	f04f 30ff 	mov.w	r0, #4294967295
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	e033      	b.n	8007890 <__swsetup_r+0x98>
 8007828:	0758      	lsls	r0, r3, #29
 800782a:	d512      	bpl.n	8007852 <__swsetup_r+0x5a>
 800782c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800782e:	b141      	cbz	r1, 8007842 <__swsetup_r+0x4a>
 8007830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007834:	4299      	cmp	r1, r3
 8007836:	d002      	beq.n	800783e <__swsetup_r+0x46>
 8007838:	4628      	mov	r0, r5
 800783a:	f7fd fc15 	bl	8005068 <_free_r>
 800783e:	2300      	movs	r3, #0
 8007840:	6363      	str	r3, [r4, #52]	@ 0x34
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	2300      	movs	r3, #0
 800784c:	6063      	str	r3, [r4, #4]
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	f043 0308 	orr.w	r3, r3, #8
 8007858:	81a3      	strh	r3, [r4, #12]
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	b94b      	cbnz	r3, 8007872 <__swsetup_r+0x7a>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007868:	d003      	beq.n	8007872 <__swsetup_r+0x7a>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f000 f882 	bl	8007976 <__smakebuf_r>
 8007872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007876:	f013 0201 	ands.w	r2, r3, #1
 800787a:	d00a      	beq.n	8007892 <__swsetup_r+0x9a>
 800787c:	2200      	movs	r2, #0
 800787e:	60a2      	str	r2, [r4, #8]
 8007880:	6962      	ldr	r2, [r4, #20]
 8007882:	4252      	negs	r2, r2
 8007884:	61a2      	str	r2, [r4, #24]
 8007886:	6922      	ldr	r2, [r4, #16]
 8007888:	b942      	cbnz	r2, 800789c <__swsetup_r+0xa4>
 800788a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800788e:	d1c5      	bne.n	800781c <__swsetup_r+0x24>
 8007890:	bd38      	pop	{r3, r4, r5, pc}
 8007892:	0799      	lsls	r1, r3, #30
 8007894:	bf58      	it	pl
 8007896:	6962      	ldrpl	r2, [r4, #20]
 8007898:	60a2      	str	r2, [r4, #8]
 800789a:	e7f4      	b.n	8007886 <__swsetup_r+0x8e>
 800789c:	2000      	movs	r0, #0
 800789e:	e7f7      	b.n	8007890 <__swsetup_r+0x98>
 80078a0:	20000018 	.word	0x20000018

080078a4 <_raise_r>:
 80078a4:	291f      	cmp	r1, #31
 80078a6:	b538      	push	{r3, r4, r5, lr}
 80078a8:	4605      	mov	r5, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	d904      	bls.n	80078b8 <_raise_r+0x14>
 80078ae:	2316      	movs	r3, #22
 80078b0:	6003      	str	r3, [r0, #0]
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80078ba:	b112      	cbz	r2, 80078c2 <_raise_r+0x1e>
 80078bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078c0:	b94b      	cbnz	r3, 80078d6 <_raise_r+0x32>
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f830 	bl	8007928 <_getpid_r>
 80078c8:	4622      	mov	r2, r4
 80078ca:	4601      	mov	r1, r0
 80078cc:	4628      	mov	r0, r5
 80078ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d2:	f000 b817 	b.w	8007904 <_kill_r>
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d00a      	beq.n	80078f0 <_raise_r+0x4c>
 80078da:	1c59      	adds	r1, r3, #1
 80078dc:	d103      	bne.n	80078e6 <_raise_r+0x42>
 80078de:	2316      	movs	r3, #22
 80078e0:	6003      	str	r3, [r0, #0]
 80078e2:	2001      	movs	r0, #1
 80078e4:	e7e7      	b.n	80078b6 <_raise_r+0x12>
 80078e6:	2100      	movs	r1, #0
 80078e8:	4620      	mov	r0, r4
 80078ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80078ee:	4798      	blx	r3
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7e0      	b.n	80078b6 <_raise_r+0x12>

080078f4 <raise>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	@ (8007900 <raise+0xc>)
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f7ff bfd3 	b.w	80078a4 <_raise_r>
 80078fe:	bf00      	nop
 8007900:	20000018 	.word	0x20000018

08007904 <_kill_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	2300      	movs	r3, #0
 8007908:	4d06      	ldr	r5, [pc, #24]	@ (8007924 <_kill_r+0x20>)
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	4611      	mov	r1, r2
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	f7f9 fde4 	bl	80014de <_kill>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d102      	bne.n	8007920 <_kill_r+0x1c>
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	b103      	cbz	r3, 8007920 <_kill_r+0x1c>
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	bd38      	pop	{r3, r4, r5, pc}
 8007922:	bf00      	nop
 8007924:	20000414 	.word	0x20000414

08007928 <_getpid_r>:
 8007928:	f7f9 bdd2 	b.w	80014d0 <_getpid>

0800792c <__swhatbuf_r>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	460c      	mov	r4, r1
 8007930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007934:	4615      	mov	r5, r2
 8007936:	2900      	cmp	r1, #0
 8007938:	461e      	mov	r6, r3
 800793a:	b096      	sub	sp, #88	@ 0x58
 800793c:	da0c      	bge.n	8007958 <__swhatbuf_r+0x2c>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	2100      	movs	r1, #0
 8007942:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007946:	bf14      	ite	ne
 8007948:	2340      	movne	r3, #64	@ 0x40
 800794a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800794e:	2000      	movs	r0, #0
 8007950:	6031      	str	r1, [r6, #0]
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	b016      	add	sp, #88	@ 0x58
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	466a      	mov	r2, sp
 800795a:	f000 f849 	bl	80079f0 <_fstat_r>
 800795e:	2800      	cmp	r0, #0
 8007960:	dbed      	blt.n	800793e <__swhatbuf_r+0x12>
 8007962:	9901      	ldr	r1, [sp, #4]
 8007964:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007968:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800796c:	4259      	negs	r1, r3
 800796e:	4159      	adcs	r1, r3
 8007970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007974:	e7eb      	b.n	800794e <__swhatbuf_r+0x22>

08007976 <__smakebuf_r>:
 8007976:	898b      	ldrh	r3, [r1, #12]
 8007978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800797a:	079d      	lsls	r5, r3, #30
 800797c:	4606      	mov	r6, r0
 800797e:	460c      	mov	r4, r1
 8007980:	d507      	bpl.n	8007992 <__smakebuf_r+0x1c>
 8007982:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	2301      	movs	r3, #1
 800798c:	6163      	str	r3, [r4, #20]
 800798e:	b003      	add	sp, #12
 8007990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007992:	466a      	mov	r2, sp
 8007994:	ab01      	add	r3, sp, #4
 8007996:	f7ff ffc9 	bl	800792c <__swhatbuf_r>
 800799a:	9f00      	ldr	r7, [sp, #0]
 800799c:	4605      	mov	r5, r0
 800799e:	4639      	mov	r1, r7
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7fd fbd3 	bl	800514c <_malloc_r>
 80079a6:	b948      	cbnz	r0, 80079bc <__smakebuf_r+0x46>
 80079a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ac:	059a      	lsls	r2, r3, #22
 80079ae:	d4ee      	bmi.n	800798e <__smakebuf_r+0x18>
 80079b0:	f023 0303 	bic.w	r3, r3, #3
 80079b4:	f043 0302 	orr.w	r3, r3, #2
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	e7e2      	b.n	8007982 <__smakebuf_r+0xc>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	6020      	str	r0, [r4, #0]
 80079cc:	b15b      	cbz	r3, 80079e6 <__smakebuf_r+0x70>
 80079ce:	4630      	mov	r0, r6
 80079d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079d4:	f000 f81e 	bl	8007a14 <_isatty_r>
 80079d8:	b128      	cbz	r0, 80079e6 <__smakebuf_r+0x70>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f023 0303 	bic.w	r3, r3, #3
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	431d      	orrs	r5, r3
 80079ea:	81a5      	strh	r5, [r4, #12]
 80079ec:	e7cf      	b.n	800798e <__smakebuf_r+0x18>
	...

080079f0 <_fstat_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	2300      	movs	r3, #0
 80079f4:	4d06      	ldr	r5, [pc, #24]	@ (8007a10 <_fstat_r+0x20>)
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f7f9 fdcd 	bl	800159c <_fstat>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d102      	bne.n	8007a0c <_fstat_r+0x1c>
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	b103      	cbz	r3, 8007a0c <_fstat_r+0x1c>
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000414 	.word	0x20000414

08007a14 <_isatty_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	2300      	movs	r3, #0
 8007a18:	4d05      	ldr	r5, [pc, #20]	@ (8007a30 <_isatty_r+0x1c>)
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	f7f9 fdcb 	bl	80015ba <_isatty>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_isatty_r+0x1a>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_isatty_r+0x1a>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	20000414 	.word	0x20000414

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
