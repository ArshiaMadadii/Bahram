
LoRa_send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d38  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08007e48  08007e48  00008e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008308  08008308  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008308  08008308  00009308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008310  08008310  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008310  08008310  00009310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008314  08008314  00009314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008318  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001d4  080084ec  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080084ec  0000a47c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2e0  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7f  00000000  00000000  000144dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00016460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076c  00000000  00000000  00016e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001864f  00000000  00000000  000175a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c83a  00000000  00000000  0002fbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085cb3  00000000  00000000  0003c42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c20e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b24  00000000  00000000  000c2124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000c5c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e30 	.word	0x08007e30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007e30 	.word	0x08007e30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000bd4:	b4b0      	push	{r4, r5, r7}
 8000bd6:	b08f      	sub	sp, #60	@ 0x3c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000bdc:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000be2:	2307      	movs	r3, #7
 8000be4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000bfa:	2364      	movs	r3, #100	@ 0x64
 8000bfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000c00:	2308      	movs	r3, #8
 8000c02:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	461d      	mov	r5, r3
 8000c08:	f107 040c 	add.w	r4, r7, #12
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	373c      	adds	r7, #60	@ 0x3c
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bcb0      	pop	{r4, r5, r7}
 8000c24:	4770      	bx	lr

08000c26 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000c30:	2101      	movs	r1, #1
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f9ff 	bl	8001036 <LoRa_read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000c3c:	7bbb      	ldrb	r3, [r7, #14]
 8000c3e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d107      	bne.n	8000c56 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	f023 0307 	bic.w	r3, r3, #7
 8000c4c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
 8000c54:	e03e      	b.n	8000cd4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10c      	bne.n	8000c76 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c60:	f023 0307 	bic.w	r3, r3, #7
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	61da      	str	r2, [r3, #28]
 8000c74:	e02e      	b.n	8000cd4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d10c      	bne.n	8000c96 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c80:	f023 0307 	bic.w	r3, r3, #7
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	f043 0303 	orr.w	r3, r3, #3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2203      	movs	r2, #3
 8000c92:	61da      	str	r2, [r3, #28]
 8000c94:	e01e      	b.n	8000cd4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d10c      	bne.n	8000cb6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ca0:	f023 0307 	bic.w	r3, r3, #7
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	f043 0305 	orr.w	r3, r3, #5
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	61da      	str	r2, [r3, #28]
 8000cb4:	e00e      	b.n	8000cd4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d10b      	bne.n	8000cd4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cc0:	f023 0307 	bic.w	r3, r3, #7
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	f043 0306 	orr.w	r3, r3, #6
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2206      	movs	r2, #6
 8000cd2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2101      	movs	r1, #1
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f9c5 	bl	800106a <LoRa_write>
	//HAL_Delay(10);
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	f001 f9ae 	bl	8002064 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6998      	ldr	r0, [r3, #24]
 8000d0c:	88fa      	ldrh	r2, [r7, #6]
 8000d0e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	f001 fe52 	bl	80029bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d18:	bf00      	nop
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fa57 	bl	80031d2 <HAL_SPI_GetState>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d1f7      	bne.n	8000d1a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6998      	ldr	r0, [r3, #24]
 8000d2e:	8b3a      	ldrh	r2, [r7, #24]
 8000d30:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d34:	6839      	ldr	r1, [r7, #0]
 8000d36:	f001 ff84 	bl	8002c42 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d3a:	bf00      	nop
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fa46 	bl	80031d2 <HAL_SPI_GetState>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d1f7      	bne.n	8000d3c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	889b      	ldrh	r3, [r3, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	f001 f984 	bl	8002064 <HAL_GPIO_WritePin>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4613      	mov	r3, r2
 8000d72:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f001 f970 	bl	8002064 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6998      	ldr	r0, [r3, #24]
 8000d88:	88fa      	ldrh	r2, [r7, #6]
 8000d8a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	f001 fe14 	bl	80029bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d94:	bf00      	nop
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fa19 	bl	80031d2 <HAL_SPI_GetState>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d1f7      	bne.n	8000d96 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6998      	ldr	r0, [r3, #24]
 8000daa:	8b3a      	ldrh	r2, [r7, #24]
 8000dac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000db0:	6839      	ldr	r1, [r7, #0]
 8000db2:	f001 fe03 	bl	80029bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000db6:	bf00      	nop
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fa08 	bl	80031d2 <HAL_SPI_GetState>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d1f7      	bne.n	8000db8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	889b      	ldrh	r3, [r3, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f001 f946 	bl	8002064 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000dec:	2126      	movs	r1, #38	@ 0x26
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f921 	bl	8001036 <LoRa_read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e003      	b.n	8000e10 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	f023 0308 	bic.w	r3, r3, #8
 8000e0e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	461a      	mov	r2, r3
 8000e14:	2126      	movs	r1, #38	@ 0x26
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f927 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f000 fe95 	bl	8001b4c <HAL_Delay>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	@ 0x58
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000e34:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <LoRa_setAutoLDO+0x68>)
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	2250      	movs	r2, #80	@ 0x50
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 fcbb 	bl	80047ba <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fad7 	bl	8000404 <__aeabi_i2d>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	3358      	adds	r3, #88	@ 0x58
 8000e60:	443b      	add	r3, r7
 8000e62:	3b50      	subs	r3, #80	@ 0x50
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f7ff fc60 	bl	800072c <__aeabi_ddiv>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fde0 	bl	8000a38 <__aeabi_d2iz>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b10      	cmp	r3, #16
 8000e7c:	bfcc      	ite	gt
 8000e7e:	2301      	movgt	r3, #1
 8000e80:	2300      	movle	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffaa 	bl	8000de0 <LoRa_setLowDaraRateOptimization>
}
 8000e8c:	bf00      	nop
 8000e8e:	3758      	adds	r7, #88	@ 0x58
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	08007e48 	.word	0x08007e48

08000e98 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	04db      	lsls	r3, r3, #19
 8000ea6:	115b      	asrs	r3, r3, #5
 8000ea8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	0c1b      	lsrs	r3, r3, #16
 8000eae:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000eb0:	7afb      	ldrb	r3, [r7, #11]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	2106      	movs	r1, #6
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f8d7 	bl	800106a <LoRa_write>
	HAL_Delay(5);
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f000 fe45 	bl	8001b4c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	2107      	movs	r1, #7
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f8cb 	bl	800106a <LoRa_write>
	HAL_Delay(5);
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f000 fe39 	bl	8001b4c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000ede:	7afb      	ldrb	r3, [r7, #11]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f8c0 	bl	800106a <LoRa_write>
	HAL_Delay(5);
 8000eea:	2005      	movs	r0, #5
 8000eec:	f000 fe2e 	bl	8001b4c <HAL_Delay>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	dd01      	ble.n	8000f0c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	dc01      	bgt.n	8000f16 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000f12:	2307      	movs	r3, #7
 8000f14:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000f16:	211e      	movs	r1, #30
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f88c 	bl	8001036 <LoRa_read>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000f22:	200a      	movs	r0, #10
 8000f24:	f000 fe12 	bl	8001b4c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	211e      	movs	r1, #30
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f891 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f000 fdff 	bl	8001b4c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff6c 	bl	8000e2c <LoRa_setAutoLDO>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2109      	movs	r1, #9
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f87b 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8000f74:	200a      	movs	r0, #10
 8000f76:	f000 fde9 	bl	8001b4c <HAL_Delay>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f98:	d801      	bhi.n	8000f9e <LoRa_setOCP+0x1a>
		current = 45;
 8000f9a:	232d      	movs	r3, #45	@ 0x2d
 8000f9c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fa2:	d901      	bls.n	8000fa8 <LoRa_setOCP+0x24>
		current = 240;
 8000fa4:	23f0      	movs	r3, #240	@ 0xf0
 8000fa6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b78      	cmp	r3, #120	@ 0x78
 8000fac:	d809      	bhi.n	8000fc2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	3b2d      	subs	r3, #45	@ 0x2d
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <LoRa_setOCP+0x78>)
 8000fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb8:	1052      	asrs	r2, r2, #1
 8000fba:	17db      	asrs	r3, r3, #31
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e00b      	b.n	8000fda <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fc6:	d808      	bhi.n	8000fda <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	331e      	adds	r3, #30
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <LoRa_setOCP+0x78>)
 8000fce:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd2:	1092      	asrs	r2, r2, #2
 8000fd4:	17db      	asrs	r3, r3, #31
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3320      	adds	r3, #32
 8000fde:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	210b      	movs	r1, #11
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f83f 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f000 fdad 	bl	8001b4c <HAL_Delay>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	66666667 	.word	0x66666667

08001000 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001008:	211e      	movs	r1, #30
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f813 	bl	8001036 <LoRa_read>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f043 0307 	orr.w	r3, r3, #7
 800101a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	461a      	mov	r2, r3
 8001020:	211e      	movs	r1, #30
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f821 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f000 fd8f 	bl	8001b4c <HAL_Delay>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af02      	add	r7, sp, #8
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800104c:	f107 030f 	add.w	r3, r7, #15
 8001050:	f107 010e 	add.w	r1, r7, #14
 8001054:	2201      	movs	r2, #1
 8001056:	9200      	str	r2, [sp, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fe44 	bl	8000ce8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af02      	add	r7, sp, #8
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	4613      	mov	r3, r2
 8001078:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001084:	78bb      	ldrb	r3, [r7, #2]
 8001086:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	f107 010e 	add.w	r1, r7, #14
 8001090:	2201      	movs	r2, #1
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe64 	bl	8000d64 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	461a      	mov	r2, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	72fb      	strb	r3, [r7, #11]
 80010b4:	4613      	mov	r3, r2
 80010b6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	f000 ffc9 	bl	8002064 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6998      	ldr	r0, [r3, #24]
 80010d6:	f107 0117 	add.w	r1, r7, #23
 80010da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010de:	2201      	movs	r2, #1
 80010e0:	f001 fc6c 	bl	80029bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010e4:	bf00      	nop
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f871 	bl	80031d2 <HAL_SPI_GetState>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d1f7      	bne.n	80010e6 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6998      	ldr	r0, [r3, #24]
 80010fa:	7abb      	ldrb	r3, [r7, #10]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f001 fc5a 	bl	80029bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001108:	bf00      	nop
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f85f 	bl	80031d2 <HAL_SPI_GetState>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d1f7      	bne.n	800110a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	889b      	ldrh	r3, [r3, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	f000 ff9d 	bl	8002064 <HAL_GPIO_WritePin>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]

	return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	4611      	mov	r1, r2
 8001152:	461a      	mov	r2, r3
 8001154:	460b      	mov	r3, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001162:	2101      	movs	r1, #1
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff fd5e 	bl	8000c26 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800116a:	210e      	movs	r1, #14
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff ff62 	bl	8001036 <LoRa_read>
 8001172:	4603      	mov	r3, r0
 8001174:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001176:	7cfb      	ldrb	r3, [r7, #19]
 8001178:	461a      	mov	r2, r3
 800117a:	210d      	movs	r1, #13
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff ff74 	bl	800106a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	461a      	mov	r2, r3
 8001186:	2122      	movs	r1, #34	@ 0x22
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff ff6e 	bl	800106a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	2100      	movs	r1, #0
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f7ff ff85 	bl	80010a4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800119a:	2103      	movs	r1, #3
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fd42 	bl	8000c26 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80011a2:	2112      	movs	r1, #18
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff ff46 	bl	8001036 <LoRa_read>
 80011aa:	4603      	mov	r3, r0
 80011ac:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80011ae:	7cfb      	ldrb	r3, [r7, #19]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80011b8:	22ff      	movs	r2, #255	@ 0xff
 80011ba:	2112      	movs	r1, #18
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff ff54 	bl	800106a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80011c2:	6979      	ldr	r1, [r7, #20]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff fd2e 	bl	8000c26 <LoRa_gotoMode>
			return 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	80bb      	strh	r3, [r7, #4]
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80011da:	6979      	ldr	r1, [r7, #20]
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f7ff fd22 	bl	8000c26 <LoRa_gotoMode>
				return 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e003      	b.n	80011ee <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f000 fcb0 	bl	8001b4c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80011ec:	e7d9      	b.n	80011a2 <LoRa_transmit+0x5c>
	}
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff97 	bl	8001132 <LoRa_isvalid>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8096 	beq.w	8001338 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800120c:	2100      	movs	r1, #0
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fd09 	bl	8000c26 <LoRa_gotoMode>
			HAL_Delay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f000 fc99 	bl	8001b4c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800121a:	2101      	movs	r1, #1
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff0a 	bl	8001036 <LoRa_read>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f000 fc90 	bl	8001b4c <HAL_Delay>
			data = read | 0x80;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001232:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	461a      	mov	r2, r3
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff15 	bl	800106a <LoRa_write>
			HAL_Delay(100);
 8001240:	2064      	movs	r0, #100	@ 0x64
 8001242:	f000 fc83 	bl	8001b4c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4619      	mov	r1, r3
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fe23 	bl	8000e98 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe7e 	bl	8000f5c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001266:	4619      	mov	r1, r3
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fe8b 	bl	8000f84 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800126e:	2223      	movs	r2, #35	@ 0x23
 8001270:	210c      	movs	r1, #12
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fef9 	bl	800106a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fec1 	bl	8001000 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fe36 	bl	8000ef8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800128c:	22ff      	movs	r2, #255	@ 0xff
 800128e:	211f      	movs	r1, #31
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff feea 	bl	800106a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	461a      	mov	r2, r3
 80012b6:	211d      	movs	r1, #29
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fed6 	bl	800106a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fdb4 	bl	8000e2c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	2120      	movs	r1, #32
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fec9 	bl	800106a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	2121      	movs	r1, #33	@ 0x21
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fec1 	bl	800106a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80012e8:	2140      	movs	r1, #64	@ 0x40
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fea3 	bl	8001036 <LoRa_read>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80012fa:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	461a      	mov	r2, r3
 8001300:	2140      	movs	r1, #64	@ 0x40
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff feb1 	bl	800106a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001308:	2101      	movs	r1, #1
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fc8b 	bl	8000c26 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001316:	200a      	movs	r0, #10
 8001318:	f000 fc18 	bl	8001b4c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800131c:	2142      	movs	r1, #66	@ 0x42
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fe89 	bl	8001036 <LoRa_read>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b12      	cmp	r3, #18
 800132c:	d101      	bne.n	8001332 <LoRa_init+0x13c>
				return LORA_OK;
 800132e:	23c8      	movs	r3, #200	@ 0xc8
 8001330:	e004      	b.n	800133c <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001332:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001336:	e001      	b.n	800133c <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001338:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001358:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a22      	ldr	r2, [pc, #136]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a16      	ldr	r2, [pc, #88]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <MX_GPIO_Init+0xa4>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2103      	movs	r1, #3
 80013a4:	4811      	ldr	r0, [pc, #68]	@ (80013ec <MX_GPIO_Init+0xa8>)
 80013a6:	f000 fe5d 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 80013aa:	2303      	movs	r3, #3
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4619      	mov	r1, r3
 80013c0:	480a      	ldr	r0, [pc, #40]	@ (80013ec <MX_GPIO_Init+0xa8>)
 80013c2:	f000 fccb 	bl	8001d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIDO_Pin;
 80013c6:	2304      	movs	r3, #4
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_GPIO_Init+0xac>)
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIDO_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_GPIO_Init+0xa8>)
 80013da:	f000 fcbf 	bl	8001d5c <HAL_GPIO_Init>

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	10110000 	.word	0x10110000

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b08c      	sub	sp, #48	@ 0x30
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fa:	f000 fb45 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fe:	f000 f88d 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001402:	f7ff ff9f 	bl	8001344 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001406:	f000 f8d5 	bl	80015b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800140a:	f000 faa1 	bl	8001950 <MX_USART1_UART_Init>
  myLoRa = newLoRa();
 800140e:	4c39      	ldr	r4, [pc, #228]	@ (80014f4 <main+0x100>)
 8001410:	463b      	mov	r3, r7
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fbde 	bl	8000bd4 <newLoRa>
 8001418:	4625      	mov	r5, r4
 800141a:	463c      	mov	r4, r7
 800141c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001424:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001428:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	  myLoRa.CS_port         = NSS_GPIO_Port;
 800142c:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <main+0x100>)
 800142e:	4a32      	ldr	r2, [pc, #200]	@ (80014f8 <main+0x104>)
 8001430:	601a      	str	r2, [r3, #0]
	  myLoRa.CS_pin          = NSS_Pin;
 8001432:	4b30      	ldr	r3, [pc, #192]	@ (80014f4 <main+0x100>)
 8001434:	2201      	movs	r2, #1
 8001436:	809a      	strh	r2, [r3, #4]
	  myLoRa.reset_port      = RST_GPIO_Port;
 8001438:	4b2e      	ldr	r3, [pc, #184]	@ (80014f4 <main+0x100>)
 800143a:	4a2f      	ldr	r2, [pc, #188]	@ (80014f8 <main+0x104>)
 800143c:	609a      	str	r2, [r3, #8]
	  myLoRa.reset_pin       = RST_Pin;
 800143e:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <main+0x100>)
 8001440:	2202      	movs	r2, #2
 8001442:	819a      	strh	r2, [r3, #12]
	  myLoRa.DIO0_port       = DIDO_GPIO_Port;
 8001444:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <main+0x100>)
 8001446:	4a2c      	ldr	r2, [pc, #176]	@ (80014f8 <main+0x104>)
 8001448:	611a      	str	r2, [r3, #16]
	  myLoRa.DIO0_pin        = DIDO_Pin;
 800144a:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <main+0x100>)
 800144c:	2204      	movs	r2, #4
 800144e:	829a      	strh	r2, [r3, #20]
	  myLoRa.hSPIx           = &hspi1;
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <main+0x100>)
 8001452:	4a2a      	ldr	r2, [pc, #168]	@ (80014fc <main+0x108>)
 8001454:	619a      	str	r2, [r3, #24]

	  myLoRa.frequency			   = 433000000;             // default = 433 MHz
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <main+0x100>)
 8001458:	4a29      	ldr	r2, [pc, #164]	@ (8001500 <main+0x10c>)
 800145a:	621a      	str	r2, [r3, #32]
	  myLoRa.spredingFactor        = SF_9;            // default = SF_7
 800145c:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <main+0x100>)
 800145e:	2209      	movs	r2, #9
 8001460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <main+0x100>)
 8001466:	2207      	movs	r2, #7
 8001468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 800146c:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <main+0x100>)
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	  myLoRa.power                 = POWER_20db;      // default = 20db
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <main+0x100>)
 8001476:	22ff      	movs	r2, #255	@ 0xff
 8001478:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <main+0x100>)
 800147e:	2282      	movs	r2, #130	@ 0x82
 8001480:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	  myLoRa.preamble              = 10;              // default = 8;
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <main+0x100>)
 8001486:	220a      	movs	r2, #10
 8001488:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 800148a:	481a      	ldr	r0, [pc, #104]	@ (80014f4 <main+0x100>)
 800148c:	f7ff feb3 	bl	80011f6 <LoRa_init>
 8001490:	4603      	mov	r3, r0
 8001492:	2bc8      	cmp	r3, #200	@ 0xc8
 8001494:	d107      	bne.n	80014a6 <main+0xb2>
	  LoRa_status = 1 ;
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <main+0x110>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
	  uartx_write_text(&huart1, "LoRa Initialized!\r\n");
 800149c:	491a      	ldr	r1, [pc, #104]	@ (8001508 <main+0x114>)
 800149e:	481b      	ldr	r0, [pc, #108]	@ (800150c <main+0x118>)
 80014a0:	f000 fa3f 	bl	8001922 <uartx_write_text>
 80014a4:	e003      	b.n	80014ae <main+0xba>
  }
  else{
    uartx_write_text(&huart1,"LoRa Initialized!\r\n");
 80014a6:	4918      	ldr	r1, [pc, #96]	@ (8001508 <main+0x114>)
 80014a8:	4818      	ldr	r0, [pc, #96]	@ (800150c <main+0x118>)
 80014aa:	f000 fa3a 	bl	8001922 <uartx_write_text>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  for(i = 0 ; i<50 ; i++){
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <main+0x11c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e018      	b.n	80014e8 <main+0xf4>
		  LoRa_transmit(&myLoRa, (uint8_t*)i, sizeof(i), 1000);
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <main+0x11c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c0:	2204      	movs	r2, #4
 80014c2:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <main+0x100>)
 80014c4:	f7ff fe3f 	bl	8001146 <LoRa_transmit>
		  sprintf(buffer, "%d", i);
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <main+0x11c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4911      	ldr	r1, [pc, #68]	@ (8001514 <main+0x120>)
 80014d0:	4811      	ldr	r0, [pc, #68]	@ (8001518 <main+0x124>)
 80014d2:	f003 f881 	bl	80045d8 <siprintf>
		  uartx_write_text(&huart1,buffer);
 80014d6:	4910      	ldr	r1, [pc, #64]	@ (8001518 <main+0x124>)
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <main+0x118>)
 80014da:	f000 fa22 	bl	8001922 <uartx_write_text>
	  for(i = 0 ; i<50 ; i++){
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <main+0x11c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <main+0x11c>)
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <main+0x11c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b31      	cmp	r3, #49	@ 0x31
 80014ee:	dde2      	ble.n	80014b6 <main+0xc2>
 80014f0:	e7dd      	b.n	80014ae <main+0xba>
 80014f2:	bf00      	nop
 80014f4:	200001f0 	.word	0x200001f0
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	20000288 	.word	0x20000288
 8001500:	19cf0e40 	.word	0x19cf0e40
 8001504:	2000021c 	.word	0x2000021c
 8001508:	08007e98 	.word	0x08007e98
 800150c:	200002e4 	.word	0x200002e4
 8001510:	20000220 	.word	0x20000220
 8001514:	08007eac 	.word	0x08007eac
 8001518:	20000224 	.word	0x20000224

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	@ 0x40
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2228      	movs	r2, #40	@ 0x28
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f003 f8b7 	bl	800469e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153e:	2301      	movs	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001546:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800155a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800155e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001560:	f107 0318 	add.w	r3, r7, #24
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fd95 	bl	8002094 <HAL_RCC_OscConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001570:	f000 f819 	bl	80015a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001574:	230f      	movs	r3, #15
 8001576:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2302      	movs	r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f001 f802 	bl	8002598 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800159a:	f000 f804 	bl	80015a6 <Error_Handler>
  }
}
 800159e:	bf00      	nop
 80015a0:	3740      	adds	r7, #64	@ 0x40
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015aa:	b672      	cpsid	i
}
 80015ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ae:	bf00      	nop
 80015b0:	e7fd      	b.n	80015ae <Error_Handler+0x8>
	...

080015b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015ba:	4a18      	ldr	r2, [pc, #96]	@ (800161c <MX_SPI1_Init+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015e8:	2210      	movs	r2, #16
 80015ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f8:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_SPI1_Init+0x64>)
 8001600:	220a      	movs	r2, #10
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001604:	4804      	ldr	r0, [pc, #16]	@ (8001618 <MX_SPI1_Init+0x64>)
 8001606:	f001 f955 	bl	80028b4 <HAL_SPI_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001610:	f7ff ffc9 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000288 	.word	0x20000288
 800161c:	40013000 	.word	0x40013000

08001620 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1b      	ldr	r2, [pc, #108]	@ (80016a8 <HAL_SPI_MspInit+0x88>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d12f      	bne.n	80016a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_SPI_MspInit+0x8c>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <HAL_SPI_MspInit+0x8c>)
 8001646:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <HAL_SPI_MspInit+0x8c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_SPI_MspInit+0x8c>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a13      	ldr	r2, [pc, #76]	@ (80016ac <HAL_SPI_MspInit+0x8c>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <HAL_SPI_MspInit+0x8c>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001670:	23a0      	movs	r3, #160	@ 0xa0
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	480b      	ldr	r0, [pc, #44]	@ (80016b0 <HAL_SPI_MspInit+0x90>)
 8001684:	f000 fb6a 	bl	8001d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001688:	2340      	movs	r3, #64	@ 0x40
 800168a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <HAL_SPI_MspInit+0x90>)
 800169c:	f000 fb5e 	bl	8001d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013000 	.word	0x40013000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010800 	.word	0x40010800

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <HAL_MspInit+0x5c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <HAL_MspInit+0x5c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_MspInit+0x60>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4a04      	ldr	r2, [pc, #16]	@ (8001714 <HAL_MspInit+0x60>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <NMI_Handler+0x4>

08001720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <MemManage_Handler+0x4>

08001730 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <UsageFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 f9d4 	bl	8001b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <_kill>:

int _kill(int pid, int sig)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001788:	f002 ffdc 	bl	8004744 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	2216      	movs	r2, #22
 8001790:	601a      	str	r2, [r3, #0]
  return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_exit>:

void _exit (int status)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a6:	f04f 31ff 	mov.w	r1, #4294967295
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffe7 	bl	800177e <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <_exit+0x12>

080017b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e00a      	b.n	80017dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c6:	f3af 8000 	nop.w
 80017ca:	4601      	mov	r1, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf0      	blt.n	80017c6 <_read+0x12>
  }

  return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e009      	b.n	8001814 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf1      	blt.n	8001800 <_write+0x12>
  }
  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_close>:

int _close(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800184c:	605a      	str	r2, [r3, #4]
  return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <_isatty>:

int _isatty(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
	...

08001888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <_sbrk+0x5c>)
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <_sbrk+0x60>)
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b8:	f002 ff44 	bl	8004744 <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20005000 	.word	0x20005000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	200002e0 	.word	0x200002e0
 80018f0:	20000480 	.word	0x20000480

080018f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <uartx_write>:

#include "uart.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 800190c:	1cf9      	adds	r1, r7, #3
 800190e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001912:	2201      	movs	r2, #1
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f001 fdb1 	bl	800347c <HAL_UART_Transmit>

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 800192c:	e007      	b.n	800193e <uartx_write_text+0x1c>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	603a      	str	r2, [r7, #0]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ffe1 	bl	8001900 <uartx_write>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f3      	bne.n	800192e <uartx_write_text+0xc>

}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <MX_USART1_UART_Init+0x50>)
 8001958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 800195c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001988:	f001 fd28 	bl	80033dc <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001992:	f7ff fe08 	bl	80015a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002e4 	.word	0x200002e4
 80019a0:	40013800 	.word	0x40013800

080019a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <HAL_UART_MspInit+0x8c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d131      	bne.n	8001a28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_UART_MspInit+0x90>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a34 <HAL_UART_MspInit+0x90>)
 80019ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_UART_MspInit+0x90>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_UART_MspInit+0x90>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a14      	ldr	r2, [pc, #80]	@ (8001a34 <HAL_UART_MspInit+0x90>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_UART_MspInit+0x90>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	4619      	mov	r1, r3
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <HAL_UART_MspInit+0x94>)
 8001a0a:	f000 f9a7 	bl	8001d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4619      	mov	r1, r3
 8001a22:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <HAL_UART_MspInit+0x94>)
 8001a24:	f000 f99a 	bl	8001d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010800 	.word	0x40010800

08001a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a3c:	f7ff ff5a 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a42:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a44:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a58:	4c09      	ldr	r4, [pc, #36]	@ (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f002 fe73 	bl	8004750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6a:	f7ff fcc3 	bl	80013f4 <main>
  bx lr
 8001a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a78:	08008318 	.word	0x08008318
  ldr r2, =_sbss
 8001a7c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a80:	2000047c 	.word	0x2000047c

08001a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC1_2_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_Init+0x28>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <HAL_Init+0x28>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f92b 	bl	8001cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f000 f808 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fe06 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_InitTick+0x54>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x58>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f935 	bl	8001d42 <HAL_SYSTICK_Config>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00e      	b.n	8001b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d80a      	bhi.n	8001afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f000 f90b 	bl	8001d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af4:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <HAL_InitTick+0x5c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b18:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_IncTick+0x1c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a03      	ldr	r2, [pc, #12]	@ (8001b34 <HAL_IncTick+0x20>)
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000008 	.word	0x20000008
 8001b34:	2000032c 	.word	0x2000032c

08001b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	@ (8001b48 <HAL_GetTick+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	2000032c 	.word	0x2000032c

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b72:	bf00      	nop
 8001b74:	f7ff ffe0 	bl	8001b38 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc0:	d301      	bcc.n	8001cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00f      	b.n	8001ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <SysTick_Config+0x40>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f7ff ff90 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <SysTick_Config+0x40>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <SysTick_Config+0x40>)
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff49 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1c:	f7ff ff5e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7ff ff90 	bl	8001c4c <NVIC_EncodePriority>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff5f 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffb0 	bl	8001cb0 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b08b      	sub	sp, #44	@ 0x2c
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6e:	e169      	b.n	8002044 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d70:	2201      	movs	r2, #1
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8158 	bne.w	800203e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4a9a      	ldr	r2, [pc, #616]	@ (8001ffc <HAL_GPIO_Init+0x2a0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d05e      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001d98:	4a98      	ldr	r2, [pc, #608]	@ (8001ffc <HAL_GPIO_Init+0x2a0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d875      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001d9e:	4a98      	ldr	r2, [pc, #608]	@ (8002000 <HAL_GPIO_Init+0x2a4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d058      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001da4:	4a96      	ldr	r2, [pc, #600]	@ (8002000 <HAL_GPIO_Init+0x2a4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d86f      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001daa:	4a96      	ldr	r2, [pc, #600]	@ (8002004 <HAL_GPIO_Init+0x2a8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d052      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001db0:	4a94      	ldr	r2, [pc, #592]	@ (8002004 <HAL_GPIO_Init+0x2a8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d869      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001db6:	4a94      	ldr	r2, [pc, #592]	@ (8002008 <HAL_GPIO_Init+0x2ac>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d04c      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001dbc:	4a92      	ldr	r2, [pc, #584]	@ (8002008 <HAL_GPIO_Init+0x2ac>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d863      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001dc2:	4a92      	ldr	r2, [pc, #584]	@ (800200c <HAL_GPIO_Init+0x2b0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d046      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a90      	ldr	r2, [pc, #576]	@ (800200c <HAL_GPIO_Init+0x2b0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d85d      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001dce:	2b12      	cmp	r3, #18
 8001dd0:	d82a      	bhi.n	8001e28 <HAL_GPIO_Init+0xcc>
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d859      	bhi.n	8001e8a <HAL_GPIO_Init+0x12e>
 8001dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <HAL_GPIO_Init+0x80>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001e57 	.word	0x08001e57
 8001de0:	08001e31 	.word	0x08001e31
 8001de4:	08001e43 	.word	0x08001e43
 8001de8:	08001e85 	.word	0x08001e85
 8001dec:	08001e8b 	.word	0x08001e8b
 8001df0:	08001e8b 	.word	0x08001e8b
 8001df4:	08001e8b 	.word	0x08001e8b
 8001df8:	08001e8b 	.word	0x08001e8b
 8001dfc:	08001e8b 	.word	0x08001e8b
 8001e00:	08001e8b 	.word	0x08001e8b
 8001e04:	08001e8b 	.word	0x08001e8b
 8001e08:	08001e8b 	.word	0x08001e8b
 8001e0c:	08001e8b 	.word	0x08001e8b
 8001e10:	08001e8b 	.word	0x08001e8b
 8001e14:	08001e8b 	.word	0x08001e8b
 8001e18:	08001e8b 	.word	0x08001e8b
 8001e1c:	08001e8b 	.word	0x08001e8b
 8001e20:	08001e39 	.word	0x08001e39
 8001e24:	08001e4d 	.word	0x08001e4d
 8001e28:	4a79      	ldr	r2, [pc, #484]	@ (8002010 <HAL_GPIO_Init+0x2b4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e2e:	e02c      	b.n	8001e8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	623b      	str	r3, [r7, #32]
          break;
 8001e36:	e029      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e024      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	3308      	adds	r3, #8
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e01f      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	330c      	adds	r3, #12
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e01a      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	623b      	str	r3, [r7, #32]
          break;
 8001e62:	e013      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	611a      	str	r2, [r3, #16]
          break;
 8001e76:	e009      	b.n	8001e8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	615a      	str	r2, [r3, #20]
          break;
 8001e82:	e003      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	e000      	b.n	8001e8c <HAL_GPIO_Init+0x130>
          break;
 8001e8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2bff      	cmp	r3, #255	@ 0xff
 8001e90:	d801      	bhi.n	8001e96 <HAL_GPIO_Init+0x13a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	e001      	b.n	8001e9a <HAL_GPIO_Init+0x13e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ea0:	d802      	bhi.n	8001ea8 <HAL_GPIO_Init+0x14c>
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x152>
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	3b08      	subs	r3, #8
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	6a39      	ldr	r1, [r7, #32]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80b1 	beq.w	800203e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001edc:	4b4d      	ldr	r3, [pc, #308]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a4c      	ldr	r2, [pc, #304]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8002014 <HAL_GPIO_Init+0x2b8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ef4:	4a48      	ldr	r2, [pc, #288]	@ (8002018 <HAL_GPIO_Init+0x2bc>)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a40      	ldr	r2, [pc, #256]	@ (800201c <HAL_GPIO_Init+0x2c0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d013      	beq.n	8001f48 <HAL_GPIO_Init+0x1ec>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3f      	ldr	r2, [pc, #252]	@ (8002020 <HAL_GPIO_Init+0x2c4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00d      	beq.n	8001f44 <HAL_GPIO_Init+0x1e8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3e      	ldr	r2, [pc, #248]	@ (8002024 <HAL_GPIO_Init+0x2c8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <HAL_GPIO_Init+0x1e4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3d      	ldr	r2, [pc, #244]	@ (8002028 <HAL_GPIO_Init+0x2cc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_GPIO_Init+0x1e0>
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e006      	b.n	8001f4a <HAL_GPIO_Init+0x1ee>
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	e004      	b.n	8001f4a <HAL_GPIO_Init+0x1ee>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x1ee>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_GPIO_Init+0x1ee>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4c:	f002 0203 	and.w	r2, r2, #3
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	4093      	lsls	r3, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f5a:	492f      	ldr	r1, [pc, #188]	@ (8002018 <HAL_GPIO_Init+0x2bc>)
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f74:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	492c      	ldr	r1, [pc, #176]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f82:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4928      	ldr	r1, [pc, #160]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f9c:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4922      	ldr	r1, [pc, #136]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001faa:	4b20      	ldr	r3, [pc, #128]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	491e      	ldr	r1, [pc, #120]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4918      	ldr	r1, [pc, #96]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd2:	4b16      	ldr	r3, [pc, #88]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4914      	ldr	r1, [pc, #80]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d021      	beq.n	8002030 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fec:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	490e      	ldr	r1, [pc, #56]	@ (800202c <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e021      	b.n	800203e <HAL_GPIO_Init+0x2e2>
 8001ffa:	bf00      	nop
 8001ffc:	10320000 	.word	0x10320000
 8002000:	10310000 	.word	0x10310000
 8002004:	10220000 	.word	0x10220000
 8002008:	10210000 	.word	0x10210000
 800200c:	10120000 	.word	0x10120000
 8002010:	10110000 	.word	0x10110000
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	40010800 	.word	0x40010800
 8002020:	40010c00 	.word	0x40010c00
 8002024:	40011000 	.word	0x40011000
 8002028:	40011400 	.word	0x40011400
 800202c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <HAL_GPIO_Init+0x304>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	43db      	mvns	r3, r3
 8002038:	4909      	ldr	r1, [pc, #36]	@ (8002060 <HAL_GPIO_Init+0x304>)
 800203a:	4013      	ands	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	3301      	adds	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	f47f ae8e 	bne.w	8001d70 <HAL_GPIO_Init+0x14>
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	372c      	adds	r7, #44	@ 0x2c
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	40010400 	.word	0x40010400

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002080:	e003      	b.n	800208a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e272      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8087 	beq.w	80021c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b4:	4b92      	ldr	r3, [pc, #584]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d00c      	beq.n	80020da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d112      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
 80020cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b89      	ldr	r3, [pc, #548]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d06c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x12c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d168      	bne.n	80021c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e24c      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x76>
 80020fc:	4b80      	ldr	r3, [pc, #512]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a7f      	ldr	r2, [pc, #508]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e02e      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x98>
 8002112:	4b7b      	ldr	r3, [pc, #492]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7a      	ldr	r2, [pc, #488]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b78      	ldr	r3, [pc, #480]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0xbc>
 8002136:	4b72      	ldr	r3, [pc, #456]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a71      	ldr	r2, [pc, #452]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b6f      	ldr	r3, [pc, #444]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6e      	ldr	r2, [pc, #440]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 8002150:	4b6b      	ldr	r3, [pc, #428]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6a      	ldr	r2, [pc, #424]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b68      	ldr	r3, [pc, #416]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a67      	ldr	r2, [pc, #412]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fce2 	bl	8001b38 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff fcde 	bl	8001b38 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	@ 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e200      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b5d      	ldr	r3, [pc, #372]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xe4>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fcce 	bl	8001b38 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fcca 	bl	8001b38 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	@ 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1ec      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x10c>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021da:	4b49      	ldr	r3, [pc, #292]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x18c>
 80021e6:	4b46      	ldr	r3, [pc, #280]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b43      	ldr	r3, [pc, #268]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1c0      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4939      	ldr	r1, [pc, #228]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff fc83 	bl	8001b38 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff fc7f 	bl	8001b38 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1a1      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b2d      	ldr	r3, [pc, #180]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4927      	ldr	r1, [pc, #156]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b26      	ldr	r3, [pc, #152]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff fc62 	bl	8001b38 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7ff fc5e 	bl	8001b38 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e180      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d03a      	beq.n	8002318 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d019      	beq.n	80022de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_RCC_OscConfig+0x274>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b0:	f7ff fc42 	bl	8001b38 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff fc3e 	bl	8001b38 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e160      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f000 face 	bl	8002878 <RCC_Delay>
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_RCC_OscConfig+0x274>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7ff fc28 	bl	8001b38 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ea:	e00f      	b.n	800230c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7ff fc24 	bl	8001b38 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d908      	bls.n	800230c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e146      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	42420000 	.word	0x42420000
 8002308:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	4b92      	ldr	r3, [pc, #584]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e9      	bne.n	80022ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a6 	beq.w	8002472 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b8b      	ldr	r3, [pc, #556]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10d      	bne.n	8002352 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b88      	ldr	r3, [pc, #544]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a87      	ldr	r2, [pc, #540]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b85      	ldr	r3, [pc, #532]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b82      	ldr	r3, [pc, #520]	@ (800255c <HAL_RCC_OscConfig+0x4c8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b7f      	ldr	r3, [pc, #508]	@ (800255c <HAL_RCC_OscConfig+0x4c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7e      	ldr	r2, [pc, #504]	@ (800255c <HAL_RCC_OscConfig+0x4c8>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7ff fbe5 	bl	8001b38 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7ff fbe1 	bl	8001b38 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	@ 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e103      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b75      	ldr	r3, [pc, #468]	@ (800255c <HAL_RCC_OscConfig+0x4c8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x312>
 8002398:	4b6f      	ldr	r3, [pc, #444]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a6e      	ldr	r2, [pc, #440]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e02d      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x334>
 80023ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a69      	ldr	r2, [pc, #420]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b67      	ldr	r3, [pc, #412]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a66      	ldr	r2, [pc, #408]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	e01c      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x356>
 80023d0:	4b61      	ldr	r3, [pc, #388]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a60      	ldr	r2, [pc, #384]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a57      	ldr	r2, [pc, #348]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7ff fb95 	bl	8001b38 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7ff fb91 	bl	8001b38 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0b1      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	4b4b      	ldr	r3, [pc, #300]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ee      	beq.n	8002412 <HAL_RCC_OscConfig+0x37e>
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff fb7f 	bl	8001b38 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7ff fb7b 	bl	8001b38 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e09b      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	4b40      	ldr	r3, [pc, #256]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ee      	bne.n	800243e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b3c      	ldr	r3, [pc, #240]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a3b      	ldr	r2, [pc, #236]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8087 	beq.w	800258a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d061      	beq.n	800254c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d146      	bne.n	800251e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b33      	ldr	r3, [pc, #204]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7ff fb4f 	bl	8001b38 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7ff fb4b 	bl	8001b38 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e06d      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	4b29      	ldr	r3, [pc, #164]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c4:	d108      	bne.n	80024d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c6:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	4921      	ldr	r1, [pc, #132]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a19      	ldr	r1, [r3, #32]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	430b      	orrs	r3, r1
 80024ea:	491b      	ldr	r1, [pc, #108]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff fb1f 	bl	8001b38 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7ff fb1b 	bl	8001b38 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e03d      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x46a>
 800251c:	e035      	b.n	800258a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fb08 	bl	8001b38 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7ff fb04 	bl	8001b38 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e026      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x498>
 800254a:	e01e      	b.n	800258a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e019      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
 8002560:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCC_OscConfig+0x500>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0d0      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d910      	bls.n	80025dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 0207 	bic.w	r2, r3, #7
 80025c2:	4965      	ldr	r1, [pc, #404]	@ (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b8      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f4:	4b59      	ldr	r3, [pc, #356]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a58      	ldr	r2, [pc, #352]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800260c:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a52      	ldr	r2, [pc, #328]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002616:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b50      	ldr	r3, [pc, #320]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	494d      	ldr	r1, [pc, #308]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d040      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d115      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e07f      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	4b41      	ldr	r3, [pc, #260]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e073      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	4b3d      	ldr	r3, [pc, #244]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06b      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002676:	4b39      	ldr	r3, [pc, #228]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f023 0203 	bic.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4936      	ldr	r1, [pc, #216]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002688:	f7ff fa56 	bl	8001b38 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7ff fa52 	bl	8001b38 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e053      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 020c 	and.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1eb      	bne.n	8002690 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b8:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d210      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b24      	ldr	r3, [pc, #144]	@ (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	4922      	ldr	r1, [pc, #136]	@ (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e032      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b19      	ldr	r3, [pc, #100]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4916      	ldr	r1, [pc, #88]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002712:	4b12      	ldr	r3, [pc, #72]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	490e      	ldr	r1, [pc, #56]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002726:	f000 f821 	bl	800276c <HAL_RCC_GetSysClockFreq>
 800272a:	4602      	mov	r2, r0
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	490a      	ldr	r1, [pc, #40]	@ (8002760 <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	5ccb      	ldrb	r3, [r1, r3]
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <HAL_RCC_ClockConfig+0x1cc>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_ClockConfig+0x1d0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f9b4 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40022000 	.word	0x40022000
 800275c:	40021000 	.word	0x40021000
 8002760:	08007eb0 	.word	0x08007eb0
 8002764:	20000000 	.word	0x20000000
 8002768:	20000004 	.word	0x20000004

0800276c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002786:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x94>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x30>
 8002796:	2b08      	cmp	r3, #8
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x36>
 800279a:	e027      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 800279e:	613b      	str	r3, [r7, #16]
      break;
 80027a0:	e027      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	0c9b      	lsrs	r3, r3, #18
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ba:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x94>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0c5b      	lsrs	r3, r3, #17
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	4a11      	ldr	r2, [pc, #68]	@ (800280c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ce:	fb03 f202 	mul.w	r2, r3, r2
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e004      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a0c      	ldr	r2, [pc, #48]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	613b      	str	r3, [r7, #16]
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ee:	613b      	str	r3, [r7, #16]
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	693b      	ldr	r3, [r7, #16]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	007a1200 	.word	0x007a1200
 8002808:	08007ec8 	.word	0x08007ec8
 800280c:	08007ed8 	.word	0x08007ed8
 8002810:	003d0900 	.word	0x003d0900

08002814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002818:	4b02      	ldr	r3, [pc, #8]	@ (8002824 <HAL_RCC_GetHCLKFreq+0x10>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000000 	.word	0x20000000

08002828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800282c:	f7ff fff2 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	4903      	ldr	r1, [pc, #12]	@ (800284c <HAL_RCC_GetPCLK1Freq+0x24>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	08007ec0 	.word	0x08007ec0

08002850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002854:	f7ff ffde 	bl	8002814 <HAL_RCC_GetHCLKFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	0adb      	lsrs	r3, r3, #11
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4903      	ldr	r1, [pc, #12]	@ (8002874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	08007ec0 	.word	0x08007ec0

08002878 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002880:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <RCC_Delay+0x34>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <RCC_Delay+0x38>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0a5b      	lsrs	r3, r3, #9
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002894:	bf00      	nop
  }
  while (Delay --);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1e5a      	subs	r2, r3, #1
 800289a:	60fa      	str	r2, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f9      	bne.n	8002894 <RCC_Delay+0x1c>
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	20000000 	.word	0x20000000
 80028b0:	10624dd3 	.word	0x10624dd3

080028b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e076      	b.n	80029b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d108      	bne.n	80028e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028d6:	d009      	beq.n	80028ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
 80028de:	e005      	b.n	80028ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fe8a 	bl	8001620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002922:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002970:	ea42 0103 	orr.w	r1, r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	0c1a      	lsrs	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f002 0204 	and.w	r2, r2, #4
 8002992:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_SPI_Transmit+0x22>
 80029da:	2302      	movs	r3, #2
 80029dc:	e12d      	b.n	8002c3a <HAL_SPI_Transmit+0x27e>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029e6:	f7ff f8a7 	bl	8001b38 <HAL_GetTick>
 80029ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
 80029fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a00:	e116      	b.n	8002c30 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_SPI_Transmit+0x52>
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a12:	e10d      	b.n	8002c30 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2203      	movs	r2, #3
 8002a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	88fa      	ldrh	r2, [r7, #6]
 8002a2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a5a:	d10f      	bne.n	8002a7c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	d007      	beq.n	8002a9a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa2:	d14f      	bne.n	8002b44 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_SPI_Transmit+0xf6>
 8002aac:	8afb      	ldrh	r3, [r7, #22]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d142      	bne.n	8002b38 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	881a      	ldrh	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	1c9a      	adds	r2, r3, #2
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ad6:	e02f      	b.n	8002b38 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d112      	bne.n	8002b0c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	881a      	ldrh	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	1c9a      	adds	r2, r3, #2
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b0a:	e015      	b.n	8002b38 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b0c:	f7ff f814 	bl	8001b38 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d803      	bhi.n	8002b24 <HAL_SPI_Transmit+0x168>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d102      	bne.n	8002b2a <HAL_SPI_Transmit+0x16e>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002b36:	e07b      	b.n	8002c30 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ca      	bne.n	8002ad8 <HAL_SPI_Transmit+0x11c>
 8002b42:	e050      	b.n	8002be6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_Transmit+0x196>
 8002b4c:	8afb      	ldrh	r3, [r7, #22]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d144      	bne.n	8002bdc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	330c      	adds	r3, #12
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b78:	e030      	b.n	8002bdc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d113      	bne.n	8002bb0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002bae:	e015      	b.n	8002bdc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb0:	f7fe ffc2 	bl	8001b38 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d803      	bhi.n	8002bc8 <HAL_SPI_Transmit+0x20c>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d102      	bne.n	8002bce <HAL_SPI_Transmit+0x212>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002bda:	e029      	b.n	8002c30 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1c9      	bne.n	8002b7a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fbd8 	bl	80033a0 <SPI_EndRxTxTransaction>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	77fb      	strb	r3, [r7, #31]
 8002c26:	e003      	b.n	8002c30 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b088      	sub	sp, #32
 8002c46:	af02      	add	r7, sp, #8
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c66:	e0fb      	b.n	8002e60 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c70:	d112      	bne.n	8002c98 <HAL_SPI_Receive+0x56>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f8ef 	bl	8002e72 <HAL_SPI_TransmitReceive>
 8002c94:	4603      	mov	r3, r0
 8002c96:	e0e8      	b.n	8002e6a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_SPI_Receive+0x64>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e0e1      	b.n	8002e6a <HAL_SPI_Receive+0x228>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cae:	f7fe ff43 	bl	8001b38 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_SPI_Receive+0x7e>
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cc4:	e0cc      	b.n	8002e60 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d0c:	d10f      	bne.n	8002d2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d007      	beq.n	8002d4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d16a      	bne.n	8002e2a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d54:	e032      	b.n	8002dbc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d115      	bne.n	8002d90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f103 020c 	add.w	r2, r3, #12
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	7812      	ldrb	r2, [r2, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d8e:	e015      	b.n	8002dbc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d90:	f7fe fed2 	bl	8001b38 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d803      	bhi.n	8002da8 <HAL_SPI_Receive+0x166>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da6:	d102      	bne.n	8002dae <HAL_SPI_Receive+0x16c>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002dba:	e051      	b.n	8002e60 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1c7      	bne.n	8002d56 <HAL_SPI_Receive+0x114>
 8002dc6:	e035      	b.n	8002e34 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d113      	bne.n	8002dfe <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	b292      	uxth	r2, r2
 8002de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dfc:	e015      	b.n	8002e2a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dfe:	f7fe fe9b 	bl	8001b38 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d803      	bhi.n	8002e16 <HAL_SPI_Receive+0x1d4>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d102      	bne.n	8002e1c <HAL_SPI_Receive+0x1da>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002e28:	e01a      	b.n	8002e60 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1c9      	bne.n	8002dc8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	6839      	ldr	r1, [r7, #0]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fa5f 	bl	80032fc <SPI_EndRxTransaction>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
 8002e56:	e003      	b.n	8002e60 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b08c      	sub	sp, #48	@ 0x30
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e80:	2301      	movs	r3, #1
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_SPI_TransmitReceive+0x26>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e198      	b.n	80031ca <HAL_SPI_TransmitReceive+0x358>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea0:	f7fe fe4a 	bl	8001b38 <HAL_GetTick>
 8002ea4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002eba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d00f      	beq.n	8002ee2 <HAL_SPI_TransmitReceive+0x70>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec8:	d107      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x68>
 8002ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002ee0:	e16d      	b.n	80031be <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_SPI_TransmitReceive+0x82>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_SPI_TransmitReceive+0x82>
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002efa:	e160      	b.n	80031be <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d003      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	887a      	ldrh	r2, [r7, #2]
 8002f26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	887a      	ldrh	r2, [r7, #2]
 8002f32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f50:	2b40      	cmp	r3, #64	@ 0x40
 8002f52:	d007      	beq.n	8002f64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f6c:	d17c      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x10a>
 8002f76:	8b7b      	ldrh	r3, [r7, #26]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d16a      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	881a      	ldrh	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa0:	e057      	b.n	8003052 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d11b      	bne.n	8002fe8 <HAL_SPI_TransmitReceive+0x176>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_SPI_TransmitReceive+0x176>
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d113      	bne.n	8002fe8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d119      	bne.n	800302a <HAL_SPI_TransmitReceive+0x1b8>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d014      	beq.n	800302a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	b292      	uxth	r2, r2
 800300c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003026:	2301      	movs	r3, #1
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800302a:	f7fe fd85 	bl	8001b38 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003036:	429a      	cmp	r2, r3
 8003038:	d80b      	bhi.n	8003052 <HAL_SPI_TransmitReceive+0x1e0>
 800303a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d007      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003050:	e0b5      	b.n	80031be <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1a2      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x130>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d19d      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x130>
 8003066:	e080      	b.n	800316a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_SPI_TransmitReceive+0x204>
 8003070:	8b7b      	ldrh	r3, [r7, #26]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d16f      	bne.n	8003156 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800309c:	e05b      	b.n	8003156 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d11c      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0x274>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d017      	beq.n	80030e6 <HAL_SPI_TransmitReceive+0x274>
 80030b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d114      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	7812      	ldrb	r2, [r2, #0]
 80030c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d119      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x2b6>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d014      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003124:	2301      	movs	r3, #1
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003128:	f7fe fd06 	bl	8001b38 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003134:	429a      	cmp	r2, r3
 8003136:	d803      	bhi.n	8003140 <HAL_SPI_TransmitReceive+0x2ce>
 8003138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d102      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x2d4>
 8003140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003154:	e033      	b.n	80031be <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d19e      	bne.n	800309e <HAL_SPI_TransmitReceive+0x22c>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d199      	bne.n	800309e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800316a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f916 	bl	80033a0 <SPI_EndRxTxTransaction>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003186:	e01a      	b.n	80031be <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b4:	e003      	b.n	80031be <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80031c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3730      	adds	r7, #48	@ 0x30
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031e0:	b2db      	uxtb	r3, r3
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031fc:	f7fe fc9c 	bl	8001b38 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	4413      	add	r3, r2
 800320a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800320c:	f7fe fc94 	bl	8001b38 <HAL_GetTick>
 8003210:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003212:	4b39      	ldr	r3, [pc, #228]	@ (80032f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	015b      	lsls	r3, r3, #5
 8003218:	0d1b      	lsrs	r3, r3, #20
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003222:	e054      	b.n	80032ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d050      	beq.n	80032ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800322c:	f7fe fc84 	bl	8001b38 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	429a      	cmp	r2, r3
 800323a:	d902      	bls.n	8003242 <SPI_WaitFlagStateUntilTimeout+0x56>
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d13d      	bne.n	80032be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800325a:	d111      	bne.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x94>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003264:	d004      	beq.n	8003270 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326e:	d107      	bne.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800327e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003288:	d10f      	bne.n	80032aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e017      	b.n	80032ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4013      	ands	r3, r2
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d19b      	bne.n	8003224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000

080032fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003310:	d111      	bne.n	8003336 <SPI_EndRxTransaction+0x3a>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331a:	d004      	beq.n	8003326 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003324:	d107      	bne.n	8003336 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003334:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800333e:	d117      	bne.n	8003370 <SPI_EndRxTransaction+0x74>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003348:	d112      	bne.n	8003370 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	2101      	movs	r1, #1
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff ff49 	bl	80031ec <SPI_WaitFlagStateUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01a      	beq.n	8003396 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e013      	b.n	8003398 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2200      	movs	r2, #0
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff ff36 	bl	80031ec <SPI_WaitFlagStateUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e000      	b.n	8003398 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2180      	movs	r1, #128	@ 0x80
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff ff18 	bl	80031ec <SPI_WaitFlagStateUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e000      	b.n	80033d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e042      	b.n	8003474 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fe face 	bl	80019a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	@ 0x24
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800341e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f91d 	bl	8003660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	@ 0x28
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b20      	cmp	r3, #32
 800349a:	d16d      	bne.n	8003578 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_UART_Transmit+0x2c>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e066      	b.n	800357a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2221      	movs	r2, #33	@ 0x21
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ba:	f7fe fb3d 	bl	8001b38 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d4:	d108      	bne.n	80034e8 <HAL_UART_Transmit+0x6c>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	e003      	b.n	80034f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f0:	e02a      	b.n	8003548 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2180      	movs	r1, #128	@ 0x80
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f840 	bl	8003582 <UART_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e036      	b.n	800357a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	3302      	adds	r3, #2
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	e007      	b.n	800353a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	3301      	adds	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1cf      	bne.n	80034f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	2140      	movs	r1, #64	@ 0x40
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f810 	bl	8003582 <UART_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e006      	b.n	800357a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b090      	sub	sp, #64	@ 0x40
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003592:	e050      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d04c      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800359c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a2:	f7fe fac9 	bl	8001b38 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d241      	bcs.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80035c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80035e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e5      	bne.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3314      	adds	r3, #20
 80035ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	613b      	str	r3, [r7, #16]
   return(result);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3314      	adds	r3, #20
 8003604:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003606:	623a      	str	r2, [r7, #32]
 8003608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	69f9      	ldr	r1, [r7, #28]
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	61bb      	str	r3, [r7, #24]
   return(result);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e5      	bne.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d09f      	beq.n	8003594 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3740      	adds	r7, #64	@ 0x40
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800369a:	f023 030c 	bic.w	r3, r3, #12
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003774 <UART_SetConfig+0x114>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036c8:	f7ff f8c2 	bl	8002850 <HAL_RCC_GetPCLK2Freq>
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	e002      	b.n	80036d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036d0:	f7ff f8aa 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	4a22      	ldr	r2, [pc, #136]	@ (8003778 <UART_SetConfig+0x118>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	0119      	lsls	r1, r3, #4
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009a      	lsls	r2, r3, #2
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	fbb2 f2f3 	udiv	r2, r2, r3
 800370c:	4b1a      	ldr	r3, [pc, #104]	@ (8003778 <UART_SetConfig+0x118>)
 800370e:	fba3 0302 	umull	r0, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2064      	movs	r0, #100	@ 0x64
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	3332      	adds	r3, #50	@ 0x32
 8003720:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <UART_SetConfig+0x118>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800372c:	4419      	add	r1, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <UART_SetConfig+0x118>)
 8003746:	fba3 0302 	umull	r0, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2064      	movs	r0, #100	@ 0x64
 800374e:	fb00 f303 	mul.w	r3, r0, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	3332      	adds	r3, #50	@ 0x32
 8003758:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <UART_SetConfig+0x118>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	440a      	add	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40013800 	.word	0x40013800
 8003778:	51eb851f 	.word	0x51eb851f

0800377c <__cvt>:
 800377c:	2b00      	cmp	r3, #0
 800377e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003782:	461d      	mov	r5, r3
 8003784:	bfbb      	ittet	lt
 8003786:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800378a:	461d      	movlt	r5, r3
 800378c:	2300      	movge	r3, #0
 800378e:	232d      	movlt	r3, #45	@ 0x2d
 8003790:	b088      	sub	sp, #32
 8003792:	4614      	mov	r4, r2
 8003794:	bfb8      	it	lt
 8003796:	4614      	movlt	r4, r2
 8003798:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800379a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800379c:	7013      	strb	r3, [r2, #0]
 800379e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80037a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80037a4:	f023 0820 	bic.w	r8, r3, #32
 80037a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037ac:	d005      	beq.n	80037ba <__cvt+0x3e>
 80037ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80037b2:	d100      	bne.n	80037b6 <__cvt+0x3a>
 80037b4:	3601      	adds	r6, #1
 80037b6:	2302      	movs	r3, #2
 80037b8:	e000      	b.n	80037bc <__cvt+0x40>
 80037ba:	2303      	movs	r3, #3
 80037bc:	aa07      	add	r2, sp, #28
 80037be:	9204      	str	r2, [sp, #16]
 80037c0:	aa06      	add	r2, sp, #24
 80037c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80037c6:	e9cd 3600 	strd	r3, r6, [sp]
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f001 f88f 	bl	80048f0 <_dtoa_r>
 80037d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80037d6:	4607      	mov	r7, r0
 80037d8:	d119      	bne.n	800380e <__cvt+0x92>
 80037da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80037dc:	07db      	lsls	r3, r3, #31
 80037de:	d50e      	bpl.n	80037fe <__cvt+0x82>
 80037e0:	eb00 0906 	add.w	r9, r0, r6
 80037e4:	2200      	movs	r2, #0
 80037e6:	2300      	movs	r3, #0
 80037e8:	4620      	mov	r0, r4
 80037ea:	4629      	mov	r1, r5
 80037ec:	f7fd f8dc 	bl	80009a8 <__aeabi_dcmpeq>
 80037f0:	b108      	cbz	r0, 80037f6 <__cvt+0x7a>
 80037f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80037f6:	2230      	movs	r2, #48	@ 0x30
 80037f8:	9b07      	ldr	r3, [sp, #28]
 80037fa:	454b      	cmp	r3, r9
 80037fc:	d31e      	bcc.n	800383c <__cvt+0xc0>
 80037fe:	4638      	mov	r0, r7
 8003800:	9b07      	ldr	r3, [sp, #28]
 8003802:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003804:	1bdb      	subs	r3, r3, r7
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	b008      	add	sp, #32
 800380a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800380e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003812:	eb00 0906 	add.w	r9, r0, r6
 8003816:	d1e5      	bne.n	80037e4 <__cvt+0x68>
 8003818:	7803      	ldrb	r3, [r0, #0]
 800381a:	2b30      	cmp	r3, #48	@ 0x30
 800381c:	d10a      	bne.n	8003834 <__cvt+0xb8>
 800381e:	2200      	movs	r2, #0
 8003820:	2300      	movs	r3, #0
 8003822:	4620      	mov	r0, r4
 8003824:	4629      	mov	r1, r5
 8003826:	f7fd f8bf 	bl	80009a8 <__aeabi_dcmpeq>
 800382a:	b918      	cbnz	r0, 8003834 <__cvt+0xb8>
 800382c:	f1c6 0601 	rsb	r6, r6, #1
 8003830:	f8ca 6000 	str.w	r6, [sl]
 8003834:	f8da 3000 	ldr.w	r3, [sl]
 8003838:	4499      	add	r9, r3
 800383a:	e7d3      	b.n	80037e4 <__cvt+0x68>
 800383c:	1c59      	adds	r1, r3, #1
 800383e:	9107      	str	r1, [sp, #28]
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e7d9      	b.n	80037f8 <__cvt+0x7c>

08003844 <__exponent>:
 8003844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003846:	2900      	cmp	r1, #0
 8003848:	bfb6      	itet	lt
 800384a:	232d      	movlt	r3, #45	@ 0x2d
 800384c:	232b      	movge	r3, #43	@ 0x2b
 800384e:	4249      	neglt	r1, r1
 8003850:	2909      	cmp	r1, #9
 8003852:	7002      	strb	r2, [r0, #0]
 8003854:	7043      	strb	r3, [r0, #1]
 8003856:	dd29      	ble.n	80038ac <__exponent+0x68>
 8003858:	f10d 0307 	add.w	r3, sp, #7
 800385c:	461d      	mov	r5, r3
 800385e:	270a      	movs	r7, #10
 8003860:	fbb1 f6f7 	udiv	r6, r1, r7
 8003864:	461a      	mov	r2, r3
 8003866:	fb07 1416 	mls	r4, r7, r6, r1
 800386a:	3430      	adds	r4, #48	@ 0x30
 800386c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003870:	460c      	mov	r4, r1
 8003872:	2c63      	cmp	r4, #99	@ 0x63
 8003874:	4631      	mov	r1, r6
 8003876:	f103 33ff 	add.w	r3, r3, #4294967295
 800387a:	dcf1      	bgt.n	8003860 <__exponent+0x1c>
 800387c:	3130      	adds	r1, #48	@ 0x30
 800387e:	1e94      	subs	r4, r2, #2
 8003880:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003884:	4623      	mov	r3, r4
 8003886:	1c41      	adds	r1, r0, #1
 8003888:	42ab      	cmp	r3, r5
 800388a:	d30a      	bcc.n	80038a2 <__exponent+0x5e>
 800388c:	f10d 0309 	add.w	r3, sp, #9
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	42ac      	cmp	r4, r5
 8003894:	bf88      	it	hi
 8003896:	2300      	movhi	r3, #0
 8003898:	3302      	adds	r3, #2
 800389a:	4403      	add	r3, r0
 800389c:	1a18      	subs	r0, r3, r0
 800389e:	b003      	add	sp, #12
 80038a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80038a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80038aa:	e7ed      	b.n	8003888 <__exponent+0x44>
 80038ac:	2330      	movs	r3, #48	@ 0x30
 80038ae:	3130      	adds	r1, #48	@ 0x30
 80038b0:	7083      	strb	r3, [r0, #2]
 80038b2:	70c1      	strb	r1, [r0, #3]
 80038b4:	1d03      	adds	r3, r0, #4
 80038b6:	e7f1      	b.n	800389c <__exponent+0x58>

080038b8 <_printf_float>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	b091      	sub	sp, #68	@ 0x44
 80038be:	460c      	mov	r4, r1
 80038c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80038c4:	4616      	mov	r6, r2
 80038c6:	461f      	mov	r7, r3
 80038c8:	4605      	mov	r5, r0
 80038ca:	f000 fef1 	bl	80046b0 <_localeconv_r>
 80038ce:	6803      	ldr	r3, [r0, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	9308      	str	r3, [sp, #32]
 80038d4:	f7fc fc3c 	bl	8000150 <strlen>
 80038d8:	2300      	movs	r3, #0
 80038da:	930e      	str	r3, [sp, #56]	@ 0x38
 80038dc:	f8d8 3000 	ldr.w	r3, [r8]
 80038e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80038e2:	3307      	adds	r3, #7
 80038e4:	f023 0307 	bic.w	r3, r3, #7
 80038e8:	f103 0208 	add.w	r2, r3, #8
 80038ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80038f0:	f8d4 b000 	ldr.w	fp, [r4]
 80038f4:	f8c8 2000 	str.w	r2, [r8]
 80038f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80038fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003902:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003906:	f04f 32ff 	mov.w	r2, #4294967295
 800390a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800390e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003912:	4b9c      	ldr	r3, [pc, #624]	@ (8003b84 <_printf_float+0x2cc>)
 8003914:	f7fd f87a 	bl	8000a0c <__aeabi_dcmpun>
 8003918:	bb70      	cbnz	r0, 8003978 <_printf_float+0xc0>
 800391a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800391e:	f04f 32ff 	mov.w	r2, #4294967295
 8003922:	4b98      	ldr	r3, [pc, #608]	@ (8003b84 <_printf_float+0x2cc>)
 8003924:	f7fd f854 	bl	80009d0 <__aeabi_dcmple>
 8003928:	bb30      	cbnz	r0, 8003978 <_printf_float+0xc0>
 800392a:	2200      	movs	r2, #0
 800392c:	2300      	movs	r3, #0
 800392e:	4640      	mov	r0, r8
 8003930:	4649      	mov	r1, r9
 8003932:	f7fd f843 	bl	80009bc <__aeabi_dcmplt>
 8003936:	b110      	cbz	r0, 800393e <_printf_float+0x86>
 8003938:	232d      	movs	r3, #45	@ 0x2d
 800393a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800393e:	4a92      	ldr	r2, [pc, #584]	@ (8003b88 <_printf_float+0x2d0>)
 8003940:	4b92      	ldr	r3, [pc, #584]	@ (8003b8c <_printf_float+0x2d4>)
 8003942:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003946:	bf94      	ite	ls
 8003948:	4690      	movls	r8, r2
 800394a:	4698      	movhi	r8, r3
 800394c:	2303      	movs	r3, #3
 800394e:	f04f 0900 	mov.w	r9, #0
 8003952:	6123      	str	r3, [r4, #16]
 8003954:	f02b 0304 	bic.w	r3, fp, #4
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	4633      	mov	r3, r6
 800395c:	4621      	mov	r1, r4
 800395e:	4628      	mov	r0, r5
 8003960:	9700      	str	r7, [sp, #0]
 8003962:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003964:	f000 f9d4 	bl	8003d10 <_printf_common>
 8003968:	3001      	adds	r0, #1
 800396a:	f040 8090 	bne.w	8003a8e <_printf_float+0x1d6>
 800396e:	f04f 30ff 	mov.w	r0, #4294967295
 8003972:	b011      	add	sp, #68	@ 0x44
 8003974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003978:	4642      	mov	r2, r8
 800397a:	464b      	mov	r3, r9
 800397c:	4640      	mov	r0, r8
 800397e:	4649      	mov	r1, r9
 8003980:	f7fd f844 	bl	8000a0c <__aeabi_dcmpun>
 8003984:	b148      	cbz	r0, 800399a <_printf_float+0xe2>
 8003986:	464b      	mov	r3, r9
 8003988:	2b00      	cmp	r3, #0
 800398a:	bfb8      	it	lt
 800398c:	232d      	movlt	r3, #45	@ 0x2d
 800398e:	4a80      	ldr	r2, [pc, #512]	@ (8003b90 <_printf_float+0x2d8>)
 8003990:	bfb8      	it	lt
 8003992:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003996:	4b7f      	ldr	r3, [pc, #508]	@ (8003b94 <_printf_float+0x2dc>)
 8003998:	e7d3      	b.n	8003942 <_printf_float+0x8a>
 800399a:	6863      	ldr	r3, [r4, #4]
 800399c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	d13f      	bne.n	8003a24 <_printf_float+0x16c>
 80039a4:	2306      	movs	r3, #6
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	9206      	str	r2, [sp, #24]
 80039b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80039b4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80039b8:	aa0d      	add	r2, sp, #52	@ 0x34
 80039ba:	9203      	str	r2, [sp, #12]
 80039bc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80039c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80039c4:	6863      	ldr	r3, [r4, #4]
 80039c6:	4642      	mov	r2, r8
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	4628      	mov	r0, r5
 80039cc:	464b      	mov	r3, r9
 80039ce:	910a      	str	r1, [sp, #40]	@ 0x28
 80039d0:	f7ff fed4 	bl	800377c <__cvt>
 80039d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80039d6:	4680      	mov	r8, r0
 80039d8:	2947      	cmp	r1, #71	@ 0x47
 80039da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80039dc:	d128      	bne.n	8003a30 <_printf_float+0x178>
 80039de:	1cc8      	adds	r0, r1, #3
 80039e0:	db02      	blt.n	80039e8 <_printf_float+0x130>
 80039e2:	6863      	ldr	r3, [r4, #4]
 80039e4:	4299      	cmp	r1, r3
 80039e6:	dd40      	ble.n	8003a6a <_printf_float+0x1b2>
 80039e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80039ec:	fa5f fa8a 	uxtb.w	sl, sl
 80039f0:	4652      	mov	r2, sl
 80039f2:	3901      	subs	r1, #1
 80039f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80039f8:	910d      	str	r1, [sp, #52]	@ 0x34
 80039fa:	f7ff ff23 	bl	8003844 <__exponent>
 80039fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a00:	4681      	mov	r9, r0
 8003a02:	1813      	adds	r3, r2, r0
 8003a04:	2a01      	cmp	r2, #1
 8003a06:	6123      	str	r3, [r4, #16]
 8003a08:	dc02      	bgt.n	8003a10 <_printf_float+0x158>
 8003a0a:	6822      	ldr	r2, [r4, #0]
 8003a0c:	07d2      	lsls	r2, r2, #31
 8003a0e:	d501      	bpl.n	8003a14 <_printf_float+0x15c>
 8003a10:	3301      	adds	r3, #1
 8003a12:	6123      	str	r3, [r4, #16]
 8003a14:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d09e      	beq.n	800395a <_printf_float+0xa2>
 8003a1c:	232d      	movs	r3, #45	@ 0x2d
 8003a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a22:	e79a      	b.n	800395a <_printf_float+0xa2>
 8003a24:	2947      	cmp	r1, #71	@ 0x47
 8003a26:	d1bf      	bne.n	80039a8 <_printf_float+0xf0>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1bd      	bne.n	80039a8 <_printf_float+0xf0>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e7ba      	b.n	80039a6 <_printf_float+0xee>
 8003a30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a34:	d9dc      	bls.n	80039f0 <_printf_float+0x138>
 8003a36:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003a3a:	d118      	bne.n	8003a6e <_printf_float+0x1b6>
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	dd0b      	ble.n	8003a5a <_printf_float+0x1a2>
 8003a42:	6121      	str	r1, [r4, #16]
 8003a44:	b913      	cbnz	r3, 8003a4c <_printf_float+0x194>
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	07d0      	lsls	r0, r2, #31
 8003a4a:	d502      	bpl.n	8003a52 <_printf_float+0x19a>
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	440b      	add	r3, r1
 8003a50:	6123      	str	r3, [r4, #16]
 8003a52:	f04f 0900 	mov.w	r9, #0
 8003a56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003a58:	e7dc      	b.n	8003a14 <_printf_float+0x15c>
 8003a5a:	b913      	cbnz	r3, 8003a62 <_printf_float+0x1aa>
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	07d2      	lsls	r2, r2, #31
 8003a60:	d501      	bpl.n	8003a66 <_printf_float+0x1ae>
 8003a62:	3302      	adds	r3, #2
 8003a64:	e7f4      	b.n	8003a50 <_printf_float+0x198>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e7f2      	b.n	8003a50 <_printf_float+0x198>
 8003a6a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a70:	4299      	cmp	r1, r3
 8003a72:	db05      	blt.n	8003a80 <_printf_float+0x1c8>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	6121      	str	r1, [r4, #16]
 8003a78:	07d8      	lsls	r0, r3, #31
 8003a7a:	d5ea      	bpl.n	8003a52 <_printf_float+0x19a>
 8003a7c:	1c4b      	adds	r3, r1, #1
 8003a7e:	e7e7      	b.n	8003a50 <_printf_float+0x198>
 8003a80:	2900      	cmp	r1, #0
 8003a82:	bfcc      	ite	gt
 8003a84:	2201      	movgt	r2, #1
 8003a86:	f1c1 0202 	rsble	r2, r1, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	e7e0      	b.n	8003a50 <_printf_float+0x198>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	055a      	lsls	r2, r3, #21
 8003a92:	d407      	bmi.n	8003aa4 <_printf_float+0x1ec>
 8003a94:	6923      	ldr	r3, [r4, #16]
 8003a96:	4642      	mov	r2, r8
 8003a98:	4631      	mov	r1, r6
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	47b8      	blx	r7
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	d12b      	bne.n	8003afa <_printf_float+0x242>
 8003aa2:	e764      	b.n	800396e <_printf_float+0xb6>
 8003aa4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003aa8:	f240 80dc 	bls.w	8003c64 <_printf_float+0x3ac>
 8003aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f7fc ff78 	bl	80009a8 <__aeabi_dcmpeq>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d033      	beq.n	8003b24 <_printf_float+0x26c>
 8003abc:	2301      	movs	r3, #1
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	4a35      	ldr	r2, [pc, #212]	@ (8003b98 <_printf_float+0x2e0>)
 8003ac4:	47b8      	blx	r7
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	f43f af51 	beq.w	800396e <_printf_float+0xb6>
 8003acc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003ad0:	4543      	cmp	r3, r8
 8003ad2:	db02      	blt.n	8003ada <_printf_float+0x222>
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	07d8      	lsls	r0, r3, #31
 8003ad8:	d50f      	bpl.n	8003afa <_printf_float+0x242>
 8003ada:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f43f af42 	beq.w	800396e <_printf_float+0xb6>
 8003aea:	f04f 0900 	mov.w	r9, #0
 8003aee:	f108 38ff 	add.w	r8, r8, #4294967295
 8003af2:	f104 0a1a 	add.w	sl, r4, #26
 8003af6:	45c8      	cmp	r8, r9
 8003af8:	dc09      	bgt.n	8003b0e <_printf_float+0x256>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	079b      	lsls	r3, r3, #30
 8003afe:	f100 8102 	bmi.w	8003d06 <_printf_float+0x44e>
 8003b02:	68e0      	ldr	r0, [r4, #12]
 8003b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b06:	4298      	cmp	r0, r3
 8003b08:	bfb8      	it	lt
 8003b0a:	4618      	movlt	r0, r3
 8003b0c:	e731      	b.n	8003972 <_printf_float+0xba>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	4652      	mov	r2, sl
 8003b12:	4631      	mov	r1, r6
 8003b14:	4628      	mov	r0, r5
 8003b16:	47b8      	blx	r7
 8003b18:	3001      	adds	r0, #1
 8003b1a:	f43f af28 	beq.w	800396e <_printf_float+0xb6>
 8003b1e:	f109 0901 	add.w	r9, r9, #1
 8003b22:	e7e8      	b.n	8003af6 <_printf_float+0x23e>
 8003b24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	dc38      	bgt.n	8003b9c <_printf_float+0x2e4>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	4628      	mov	r0, r5
 8003b30:	4a19      	ldr	r2, [pc, #100]	@ (8003b98 <_printf_float+0x2e0>)
 8003b32:	47b8      	blx	r7
 8003b34:	3001      	adds	r0, #1
 8003b36:	f43f af1a 	beq.w	800396e <_printf_float+0xb6>
 8003b3a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003b3e:	ea59 0303 	orrs.w	r3, r9, r3
 8003b42:	d102      	bne.n	8003b4a <_printf_float+0x292>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	07d9      	lsls	r1, r3, #31
 8003b48:	d5d7      	bpl.n	8003afa <_printf_float+0x242>
 8003b4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b4e:	4631      	mov	r1, r6
 8003b50:	4628      	mov	r0, r5
 8003b52:	47b8      	blx	r7
 8003b54:	3001      	adds	r0, #1
 8003b56:	f43f af0a 	beq.w	800396e <_printf_float+0xb6>
 8003b5a:	f04f 0a00 	mov.w	sl, #0
 8003b5e:	f104 0b1a 	add.w	fp, r4, #26
 8003b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b64:	425b      	negs	r3, r3
 8003b66:	4553      	cmp	r3, sl
 8003b68:	dc01      	bgt.n	8003b6e <_printf_float+0x2b6>
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	e793      	b.n	8003a96 <_printf_float+0x1de>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	465a      	mov	r2, fp
 8003b72:	4631      	mov	r1, r6
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b8      	blx	r7
 8003b78:	3001      	adds	r0, #1
 8003b7a:	f43f aef8 	beq.w	800396e <_printf_float+0xb6>
 8003b7e:	f10a 0a01 	add.w	sl, sl, #1
 8003b82:	e7ee      	b.n	8003b62 <_printf_float+0x2aa>
 8003b84:	7fefffff 	.word	0x7fefffff
 8003b88:	08007eda 	.word	0x08007eda
 8003b8c:	08007ede 	.word	0x08007ede
 8003b90:	08007ee2 	.word	0x08007ee2
 8003b94:	08007ee6 	.word	0x08007ee6
 8003b98:	08007eea 	.word	0x08007eea
 8003b9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b9e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003ba2:	4553      	cmp	r3, sl
 8003ba4:	bfa8      	it	ge
 8003ba6:	4653      	movge	r3, sl
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	4699      	mov	r9, r3
 8003bac:	dc36      	bgt.n	8003c1c <_printf_float+0x364>
 8003bae:	f04f 0b00 	mov.w	fp, #0
 8003bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bb6:	f104 021a 	add.w	r2, r4, #26
 8003bba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bbe:	eba3 0309 	sub.w	r3, r3, r9
 8003bc2:	455b      	cmp	r3, fp
 8003bc4:	dc31      	bgt.n	8003c2a <_printf_float+0x372>
 8003bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bc8:	459a      	cmp	sl, r3
 8003bca:	dc3a      	bgt.n	8003c42 <_printf_float+0x38a>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	07da      	lsls	r2, r3, #31
 8003bd0:	d437      	bmi.n	8003c42 <_printf_float+0x38a>
 8003bd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bd4:	ebaa 0903 	sub.w	r9, sl, r3
 8003bd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003bda:	ebaa 0303 	sub.w	r3, sl, r3
 8003bde:	4599      	cmp	r9, r3
 8003be0:	bfa8      	it	ge
 8003be2:	4699      	movge	r9, r3
 8003be4:	f1b9 0f00 	cmp.w	r9, #0
 8003be8:	dc33      	bgt.n	8003c52 <_printf_float+0x39a>
 8003bea:	f04f 0800 	mov.w	r8, #0
 8003bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bf2:	f104 0b1a 	add.w	fp, r4, #26
 8003bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bf8:	ebaa 0303 	sub.w	r3, sl, r3
 8003bfc:	eba3 0309 	sub.w	r3, r3, r9
 8003c00:	4543      	cmp	r3, r8
 8003c02:	f77f af7a 	ble.w	8003afa <_printf_float+0x242>
 8003c06:	2301      	movs	r3, #1
 8003c08:	465a      	mov	r2, fp
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	47b8      	blx	r7
 8003c10:	3001      	adds	r0, #1
 8003c12:	f43f aeac 	beq.w	800396e <_printf_float+0xb6>
 8003c16:	f108 0801 	add.w	r8, r8, #1
 8003c1a:	e7ec      	b.n	8003bf6 <_printf_float+0x33e>
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	d1c2      	bne.n	8003bae <_printf_float+0x2f6>
 8003c28:	e6a1      	b.n	800396e <_printf_float+0xb6>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4628      	mov	r0, r5
 8003c30:	920a      	str	r2, [sp, #40]	@ 0x28
 8003c32:	47b8      	blx	r7
 8003c34:	3001      	adds	r0, #1
 8003c36:	f43f ae9a 	beq.w	800396e <_printf_float+0xb6>
 8003c3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c3c:	f10b 0b01 	add.w	fp, fp, #1
 8003c40:	e7bb      	b.n	8003bba <_printf_float+0x302>
 8003c42:	4631      	mov	r1, r6
 8003c44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c48:	4628      	mov	r0, r5
 8003c4a:	47b8      	blx	r7
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d1c0      	bne.n	8003bd2 <_printf_float+0x31a>
 8003c50:	e68d      	b.n	800396e <_printf_float+0xb6>
 8003c52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c54:	464b      	mov	r3, r9
 8003c56:	4631      	mov	r1, r6
 8003c58:	4628      	mov	r0, r5
 8003c5a:	4442      	add	r2, r8
 8003c5c:	47b8      	blx	r7
 8003c5e:	3001      	adds	r0, #1
 8003c60:	d1c3      	bne.n	8003bea <_printf_float+0x332>
 8003c62:	e684      	b.n	800396e <_printf_float+0xb6>
 8003c64:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c68:	f1ba 0f01 	cmp.w	sl, #1
 8003c6c:	dc01      	bgt.n	8003c72 <_printf_float+0x3ba>
 8003c6e:	07db      	lsls	r3, r3, #31
 8003c70:	d536      	bpl.n	8003ce0 <_printf_float+0x428>
 8003c72:	2301      	movs	r3, #1
 8003c74:	4642      	mov	r2, r8
 8003c76:	4631      	mov	r1, r6
 8003c78:	4628      	mov	r0, r5
 8003c7a:	47b8      	blx	r7
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	f43f ae76 	beq.w	800396e <_printf_float+0xb6>
 8003c82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c86:	4631      	mov	r1, r6
 8003c88:	4628      	mov	r0, r5
 8003c8a:	47b8      	blx	r7
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	f43f ae6e 	beq.w	800396e <_printf_float+0xb6>
 8003c92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c96:	2200      	movs	r2, #0
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c9e:	f7fc fe83 	bl	80009a8 <__aeabi_dcmpeq>
 8003ca2:	b9c0      	cbnz	r0, 8003cd6 <_printf_float+0x41e>
 8003ca4:	4653      	mov	r3, sl
 8003ca6:	f108 0201 	add.w	r2, r8, #1
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d10c      	bne.n	8003cce <_printf_float+0x416>
 8003cb4:	e65b      	b.n	800396e <_printf_float+0xb6>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	465a      	mov	r2, fp
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b8      	blx	r7
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	f43f ae54 	beq.w	800396e <_printf_float+0xb6>
 8003cc6:	f108 0801 	add.w	r8, r8, #1
 8003cca:	45d0      	cmp	r8, sl
 8003ccc:	dbf3      	blt.n	8003cb6 <_printf_float+0x3fe>
 8003cce:	464b      	mov	r3, r9
 8003cd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003cd4:	e6e0      	b.n	8003a98 <_printf_float+0x1e0>
 8003cd6:	f04f 0800 	mov.w	r8, #0
 8003cda:	f104 0b1a 	add.w	fp, r4, #26
 8003cde:	e7f4      	b.n	8003cca <_printf_float+0x412>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4642      	mov	r2, r8
 8003ce4:	e7e1      	b.n	8003caa <_printf_float+0x3f2>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	464a      	mov	r2, r9
 8003cea:	4631      	mov	r1, r6
 8003cec:	4628      	mov	r0, r5
 8003cee:	47b8      	blx	r7
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	f43f ae3c 	beq.w	800396e <_printf_float+0xb6>
 8003cf6:	f108 0801 	add.w	r8, r8, #1
 8003cfa:	68e3      	ldr	r3, [r4, #12]
 8003cfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003cfe:	1a5b      	subs	r3, r3, r1
 8003d00:	4543      	cmp	r3, r8
 8003d02:	dcf0      	bgt.n	8003ce6 <_printf_float+0x42e>
 8003d04:	e6fd      	b.n	8003b02 <_printf_float+0x24a>
 8003d06:	f04f 0800 	mov.w	r8, #0
 8003d0a:	f104 0919 	add.w	r9, r4, #25
 8003d0e:	e7f4      	b.n	8003cfa <_printf_float+0x442>

08003d10 <_printf_common>:
 8003d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	4616      	mov	r6, r2
 8003d16:	4698      	mov	r8, r3
 8003d18:	688a      	ldr	r2, [r1, #8]
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bfb8      	it	lt
 8003d22:	4613      	movlt	r3, r2
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d30:	b10a      	cbz	r2, 8003d36 <_printf_common+0x26>
 8003d32:	3301      	adds	r3, #1
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	0699      	lsls	r1, r3, #26
 8003d3a:	bf42      	ittt	mi
 8003d3c:	6833      	ldrmi	r3, [r6, #0]
 8003d3e:	3302      	addmi	r3, #2
 8003d40:	6033      	strmi	r3, [r6, #0]
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	f015 0506 	ands.w	r5, r5, #6
 8003d48:	d106      	bne.n	8003d58 <_printf_common+0x48>
 8003d4a:	f104 0a19 	add.w	sl, r4, #25
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	6832      	ldr	r2, [r6, #0]
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	42ab      	cmp	r3, r5
 8003d56:	dc2b      	bgt.n	8003db0 <_printf_common+0xa0>
 8003d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	3b00      	subs	r3, #0
 8003d60:	bf18      	it	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	0692      	lsls	r2, r2, #26
 8003d66:	d430      	bmi.n	8003dca <_printf_common+0xba>
 8003d68:	4641      	mov	r1, r8
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d70:	47c8      	blx	r9
 8003d72:	3001      	adds	r0, #1
 8003d74:	d023      	beq.n	8003dbe <_printf_common+0xae>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	6922      	ldr	r2, [r4, #16]
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf14      	ite	ne
 8003d82:	2500      	movne	r5, #0
 8003d84:	6833      	ldreq	r3, [r6, #0]
 8003d86:	f04f 0600 	mov.w	r6, #0
 8003d8a:	bf08      	it	eq
 8003d8c:	68e5      	ldreq	r5, [r4, #12]
 8003d8e:	f104 041a 	add.w	r4, r4, #26
 8003d92:	bf08      	it	eq
 8003d94:	1aed      	subeq	r5, r5, r3
 8003d96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d9a:	bf08      	it	eq
 8003d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da0:	4293      	cmp	r3, r2
 8003da2:	bfc4      	itt	gt
 8003da4:	1a9b      	subgt	r3, r3, r2
 8003da6:	18ed      	addgt	r5, r5, r3
 8003da8:	42b5      	cmp	r5, r6
 8003daa:	d11a      	bne.n	8003de2 <_printf_common+0xd2>
 8003dac:	2000      	movs	r0, #0
 8003dae:	e008      	b.n	8003dc2 <_printf_common+0xb2>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4652      	mov	r2, sl
 8003db4:	4641      	mov	r1, r8
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c8      	blx	r9
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d103      	bne.n	8003dc6 <_printf_common+0xb6>
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	e7c1      	b.n	8003d4e <_printf_common+0x3e>
 8003dca:	2030      	movs	r0, #48	@ 0x30
 8003dcc:	18e1      	adds	r1, r4, r3
 8003dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dd8:	4422      	add	r2, r4
 8003dda:	3302      	adds	r3, #2
 8003ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003de0:	e7c2      	b.n	8003d68 <_printf_common+0x58>
 8003de2:	2301      	movs	r3, #1
 8003de4:	4622      	mov	r2, r4
 8003de6:	4641      	mov	r1, r8
 8003de8:	4638      	mov	r0, r7
 8003dea:	47c8      	blx	r9
 8003dec:	3001      	adds	r0, #1
 8003dee:	d0e6      	beq.n	8003dbe <_printf_common+0xae>
 8003df0:	3601      	adds	r6, #1
 8003df2:	e7d9      	b.n	8003da8 <_printf_common+0x98>

08003df4 <_printf_i>:
 8003df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	7e0f      	ldrb	r7, [r1, #24]
 8003dfa:	4691      	mov	r9, r2
 8003dfc:	2f78      	cmp	r7, #120	@ 0x78
 8003dfe:	4680      	mov	r8, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	469a      	mov	sl, r3
 8003e04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e0a:	d807      	bhi.n	8003e1c <_printf_i+0x28>
 8003e0c:	2f62      	cmp	r7, #98	@ 0x62
 8003e0e:	d80a      	bhi.n	8003e26 <_printf_i+0x32>
 8003e10:	2f00      	cmp	r7, #0
 8003e12:	f000 80d3 	beq.w	8003fbc <_printf_i+0x1c8>
 8003e16:	2f58      	cmp	r7, #88	@ 0x58
 8003e18:	f000 80ba 	beq.w	8003f90 <_printf_i+0x19c>
 8003e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e24:	e03a      	b.n	8003e9c <_printf_i+0xa8>
 8003e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e2a:	2b15      	cmp	r3, #21
 8003e2c:	d8f6      	bhi.n	8003e1c <_printf_i+0x28>
 8003e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e34 <_printf_i+0x40>)
 8003e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e34:	08003e8d 	.word	0x08003e8d
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003e1d 	.word	0x08003e1d
 8003e40:	08003e1d 	.word	0x08003e1d
 8003e44:	08003e1d 	.word	0x08003e1d
 8003e48:	08003e1d 	.word	0x08003e1d
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003e1d 	.word	0x08003e1d
 8003e54:	08003e1d 	.word	0x08003e1d
 8003e58:	08003e1d 	.word	0x08003e1d
 8003e5c:	08003e1d 	.word	0x08003e1d
 8003e60:	08003fa3 	.word	0x08003fa3
 8003e64:	08003ecb 	.word	0x08003ecb
 8003e68:	08003f5d 	.word	0x08003f5d
 8003e6c:	08003e1d 	.word	0x08003e1d
 8003e70:	08003e1d 	.word	0x08003e1d
 8003e74:	08003fc5 	.word	0x08003fc5
 8003e78:	08003e1d 	.word	0x08003e1d
 8003e7c:	08003ecb 	.word	0x08003ecb
 8003e80:	08003e1d 	.word	0x08003e1d
 8003e84:	08003e1d 	.word	0x08003e1d
 8003e88:	08003f65 	.word	0x08003f65
 8003e8c:	6833      	ldr	r3, [r6, #0]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6032      	str	r2, [r6, #0]
 8003e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e09e      	b.n	8003fde <_printf_i+0x1ea>
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	6031      	str	r1, [r6, #0]
 8003ea8:	0606      	lsls	r6, r0, #24
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0xbc>
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	e003      	b.n	8003eb8 <_printf_i+0xc4>
 8003eb0:	0645      	lsls	r5, r0, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0xb8>
 8003eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	da03      	bge.n	8003ec4 <_printf_i+0xd0>
 8003ebc:	232d      	movs	r3, #45	@ 0x2d
 8003ebe:	426d      	negs	r5, r5
 8003ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	4859      	ldr	r0, [pc, #356]	@ (800402c <_printf_i+0x238>)
 8003ec8:	e011      	b.n	8003eee <_printf_i+0xfa>
 8003eca:	6821      	ldr	r1, [r4, #0]
 8003ecc:	6833      	ldr	r3, [r6, #0]
 8003ece:	0608      	lsls	r0, r1, #24
 8003ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ed4:	d402      	bmi.n	8003edc <_printf_i+0xe8>
 8003ed6:	0649      	lsls	r1, r1, #25
 8003ed8:	bf48      	it	mi
 8003eda:	b2ad      	uxthmi	r5, r5
 8003edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	bf14      	ite	ne
 8003ee2:	230a      	movne	r3, #10
 8003ee4:	2308      	moveq	r3, #8
 8003ee6:	4851      	ldr	r0, [pc, #324]	@ (800402c <_printf_i+0x238>)
 8003ee8:	2100      	movs	r1, #0
 8003eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eee:	6866      	ldr	r6, [r4, #4]
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	bfa8      	it	ge
 8003ef4:	6821      	ldrge	r1, [r4, #0]
 8003ef6:	60a6      	str	r6, [r4, #8]
 8003ef8:	bfa4      	itt	ge
 8003efa:	f021 0104 	bicge.w	r1, r1, #4
 8003efe:	6021      	strge	r1, [r4, #0]
 8003f00:	b90d      	cbnz	r5, 8003f06 <_printf_i+0x112>
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	d04b      	beq.n	8003f9e <_printf_i+0x1aa>
 8003f06:	4616      	mov	r6, r2
 8003f08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003f10:	5dc7      	ldrb	r7, [r0, r7]
 8003f12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f16:	462f      	mov	r7, r5
 8003f18:	42bb      	cmp	r3, r7
 8003f1a:	460d      	mov	r5, r1
 8003f1c:	d9f4      	bls.n	8003f08 <_printf_i+0x114>
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d10b      	bne.n	8003f3a <_printf_i+0x146>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	07df      	lsls	r7, r3, #31
 8003f26:	d508      	bpl.n	8003f3a <_printf_i+0x146>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	6861      	ldr	r1, [r4, #4]
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	bfde      	ittt	le
 8003f30:	2330      	movle	r3, #48	@ 0x30
 8003f32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f3a:	1b92      	subs	r2, r2, r6
 8003f3c:	6122      	str	r2, [r4, #16]
 8003f3e:	464b      	mov	r3, r9
 8003f40:	4621      	mov	r1, r4
 8003f42:	4640      	mov	r0, r8
 8003f44:	f8cd a000 	str.w	sl, [sp]
 8003f48:	aa03      	add	r2, sp, #12
 8003f4a:	f7ff fee1 	bl	8003d10 <_printf_common>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d14a      	bne.n	8003fe8 <_printf_i+0x1f4>
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	b004      	add	sp, #16
 8003f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	f043 0320 	orr.w	r3, r3, #32
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	2778      	movs	r7, #120	@ 0x78
 8003f66:	4832      	ldr	r0, [pc, #200]	@ (8004030 <_printf_i+0x23c>)
 8003f68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	6831      	ldr	r1, [r6, #0]
 8003f70:	061f      	lsls	r7, r3, #24
 8003f72:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f76:	d402      	bmi.n	8003f7e <_printf_i+0x18a>
 8003f78:	065f      	lsls	r7, r3, #25
 8003f7a:	bf48      	it	mi
 8003f7c:	b2ad      	uxthmi	r5, r5
 8003f7e:	6031      	str	r1, [r6, #0]
 8003f80:	07d9      	lsls	r1, r3, #31
 8003f82:	bf44      	itt	mi
 8003f84:	f043 0320 	orrmi.w	r3, r3, #32
 8003f88:	6023      	strmi	r3, [r4, #0]
 8003f8a:	b11d      	cbz	r5, 8003f94 <_printf_i+0x1a0>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	e7ab      	b.n	8003ee8 <_printf_i+0xf4>
 8003f90:	4826      	ldr	r0, [pc, #152]	@ (800402c <_printf_i+0x238>)
 8003f92:	e7e9      	b.n	8003f68 <_printf_i+0x174>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	f023 0320 	bic.w	r3, r3, #32
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	e7f6      	b.n	8003f8c <_printf_i+0x198>
 8003f9e:	4616      	mov	r6, r2
 8003fa0:	e7bd      	b.n	8003f1e <_printf_i+0x12a>
 8003fa2:	6833      	ldr	r3, [r6, #0]
 8003fa4:	6825      	ldr	r5, [r4, #0]
 8003fa6:	1d18      	adds	r0, r3, #4
 8003fa8:	6961      	ldr	r1, [r4, #20]
 8003faa:	6030      	str	r0, [r6, #0]
 8003fac:	062e      	lsls	r6, r5, #24
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	d501      	bpl.n	8003fb6 <_printf_i+0x1c2>
 8003fb2:	6019      	str	r1, [r3, #0]
 8003fb4:	e002      	b.n	8003fbc <_printf_i+0x1c8>
 8003fb6:	0668      	lsls	r0, r5, #25
 8003fb8:	d5fb      	bpl.n	8003fb2 <_printf_i+0x1be>
 8003fba:	8019      	strh	r1, [r3, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4616      	mov	r6, r2
 8003fc0:	6123      	str	r3, [r4, #16]
 8003fc2:	e7bc      	b.n	8003f3e <_printf_i+0x14a>
 8003fc4:	6833      	ldr	r3, [r6, #0]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	6032      	str	r2, [r6, #0]
 8003fcc:	681e      	ldr	r6, [r3, #0]
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 fbe4 	bl	800479e <memchr>
 8003fd6:	b108      	cbz	r0, 8003fdc <_printf_i+0x1e8>
 8003fd8:	1b80      	subs	r0, r0, r6
 8003fda:	6060      	str	r0, [r4, #4]
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	6123      	str	r3, [r4, #16]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe6:	e7aa      	b.n	8003f3e <_printf_i+0x14a>
 8003fe8:	4632      	mov	r2, r6
 8003fea:	4649      	mov	r1, r9
 8003fec:	4640      	mov	r0, r8
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	47d0      	blx	sl
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d0ad      	beq.n	8003f52 <_printf_i+0x15e>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	079b      	lsls	r3, r3, #30
 8003ffa:	d413      	bmi.n	8004024 <_printf_i+0x230>
 8003ffc:	68e0      	ldr	r0, [r4, #12]
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	4298      	cmp	r0, r3
 8004002:	bfb8      	it	lt
 8004004:	4618      	movlt	r0, r3
 8004006:	e7a6      	b.n	8003f56 <_printf_i+0x162>
 8004008:	2301      	movs	r3, #1
 800400a:	4632      	mov	r2, r6
 800400c:	4649      	mov	r1, r9
 800400e:	4640      	mov	r0, r8
 8004010:	47d0      	blx	sl
 8004012:	3001      	adds	r0, #1
 8004014:	d09d      	beq.n	8003f52 <_printf_i+0x15e>
 8004016:	3501      	adds	r5, #1
 8004018:	68e3      	ldr	r3, [r4, #12]
 800401a:	9903      	ldr	r1, [sp, #12]
 800401c:	1a5b      	subs	r3, r3, r1
 800401e:	42ab      	cmp	r3, r5
 8004020:	dcf2      	bgt.n	8004008 <_printf_i+0x214>
 8004022:	e7eb      	b.n	8003ffc <_printf_i+0x208>
 8004024:	2500      	movs	r5, #0
 8004026:	f104 0619 	add.w	r6, r4, #25
 800402a:	e7f5      	b.n	8004018 <_printf_i+0x224>
 800402c:	08007eec 	.word	0x08007eec
 8004030:	08007efd 	.word	0x08007efd

08004034 <_scanf_float>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	b087      	sub	sp, #28
 800403a:	9303      	str	r3, [sp, #12]
 800403c:	688b      	ldr	r3, [r1, #8]
 800403e:	4617      	mov	r7, r2
 8004040:	1e5a      	subs	r2, r3, #1
 8004042:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004046:	bf82      	ittt	hi
 8004048:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800404c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004050:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004054:	460a      	mov	r2, r1
 8004056:	f04f 0500 	mov.w	r5, #0
 800405a:	bf88      	it	hi
 800405c:	608b      	strhi	r3, [r1, #8]
 800405e:	680b      	ldr	r3, [r1, #0]
 8004060:	4680      	mov	r8, r0
 8004062:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004066:	f842 3b1c 	str.w	r3, [r2], #28
 800406a:	460c      	mov	r4, r1
 800406c:	bf98      	it	ls
 800406e:	f04f 0b00 	movls.w	fp, #0
 8004072:	4616      	mov	r6, r2
 8004074:	46aa      	mov	sl, r5
 8004076:	46a9      	mov	r9, r5
 8004078:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800407c:	9201      	str	r2, [sp, #4]
 800407e:	9502      	str	r5, [sp, #8]
 8004080:	68a2      	ldr	r2, [r4, #8]
 8004082:	b152      	cbz	r2, 800409a <_scanf_float+0x66>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b4e      	cmp	r3, #78	@ 0x4e
 800408a:	d865      	bhi.n	8004158 <_scanf_float+0x124>
 800408c:	2b40      	cmp	r3, #64	@ 0x40
 800408e:	d83d      	bhi.n	800410c <_scanf_float+0xd8>
 8004090:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004094:	b2c8      	uxtb	r0, r1
 8004096:	280e      	cmp	r0, #14
 8004098:	d93b      	bls.n	8004112 <_scanf_float+0xde>
 800409a:	f1b9 0f00 	cmp.w	r9, #0
 800409e:	d003      	beq.n	80040a8 <_scanf_float+0x74>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040ac:	f1ba 0f01 	cmp.w	sl, #1
 80040b0:	f200 8118 	bhi.w	80042e4 <_scanf_float+0x2b0>
 80040b4:	9b01      	ldr	r3, [sp, #4]
 80040b6:	429e      	cmp	r6, r3
 80040b8:	f200 8109 	bhi.w	80042ce <_scanf_float+0x29a>
 80040bc:	2001      	movs	r0, #1
 80040be:	b007      	add	sp, #28
 80040c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80040c8:	2a0d      	cmp	r2, #13
 80040ca:	d8e6      	bhi.n	800409a <_scanf_float+0x66>
 80040cc:	a101      	add	r1, pc, #4	@ (adr r1, 80040d4 <_scanf_float+0xa0>)
 80040ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	0800421b 	.word	0x0800421b
 80040d8:	0800409b 	.word	0x0800409b
 80040dc:	0800409b 	.word	0x0800409b
 80040e0:	0800409b 	.word	0x0800409b
 80040e4:	0800427b 	.word	0x0800427b
 80040e8:	08004253 	.word	0x08004253
 80040ec:	0800409b 	.word	0x0800409b
 80040f0:	0800409b 	.word	0x0800409b
 80040f4:	08004229 	.word	0x08004229
 80040f8:	0800409b 	.word	0x0800409b
 80040fc:	0800409b 	.word	0x0800409b
 8004100:	0800409b 	.word	0x0800409b
 8004104:	0800409b 	.word	0x0800409b
 8004108:	080041e1 	.word	0x080041e1
 800410c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004110:	e7da      	b.n	80040c8 <_scanf_float+0x94>
 8004112:	290e      	cmp	r1, #14
 8004114:	d8c1      	bhi.n	800409a <_scanf_float+0x66>
 8004116:	a001      	add	r0, pc, #4	@ (adr r0, 800411c <_scanf_float+0xe8>)
 8004118:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800411c:	080041d1 	.word	0x080041d1
 8004120:	0800409b 	.word	0x0800409b
 8004124:	080041d1 	.word	0x080041d1
 8004128:	08004267 	.word	0x08004267
 800412c:	0800409b 	.word	0x0800409b
 8004130:	08004179 	.word	0x08004179
 8004134:	080041b7 	.word	0x080041b7
 8004138:	080041b7 	.word	0x080041b7
 800413c:	080041b7 	.word	0x080041b7
 8004140:	080041b7 	.word	0x080041b7
 8004144:	080041b7 	.word	0x080041b7
 8004148:	080041b7 	.word	0x080041b7
 800414c:	080041b7 	.word	0x080041b7
 8004150:	080041b7 	.word	0x080041b7
 8004154:	080041b7 	.word	0x080041b7
 8004158:	2b6e      	cmp	r3, #110	@ 0x6e
 800415a:	d809      	bhi.n	8004170 <_scanf_float+0x13c>
 800415c:	2b60      	cmp	r3, #96	@ 0x60
 800415e:	d8b1      	bhi.n	80040c4 <_scanf_float+0x90>
 8004160:	2b54      	cmp	r3, #84	@ 0x54
 8004162:	d07b      	beq.n	800425c <_scanf_float+0x228>
 8004164:	2b59      	cmp	r3, #89	@ 0x59
 8004166:	d198      	bne.n	800409a <_scanf_float+0x66>
 8004168:	2d07      	cmp	r5, #7
 800416a:	d196      	bne.n	800409a <_scanf_float+0x66>
 800416c:	2508      	movs	r5, #8
 800416e:	e02c      	b.n	80041ca <_scanf_float+0x196>
 8004170:	2b74      	cmp	r3, #116	@ 0x74
 8004172:	d073      	beq.n	800425c <_scanf_float+0x228>
 8004174:	2b79      	cmp	r3, #121	@ 0x79
 8004176:	e7f6      	b.n	8004166 <_scanf_float+0x132>
 8004178:	6821      	ldr	r1, [r4, #0]
 800417a:	05c8      	lsls	r0, r1, #23
 800417c:	d51b      	bpl.n	80041b6 <_scanf_float+0x182>
 800417e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004182:	6021      	str	r1, [r4, #0]
 8004184:	f109 0901 	add.w	r9, r9, #1
 8004188:	f1bb 0f00 	cmp.w	fp, #0
 800418c:	d003      	beq.n	8004196 <_scanf_float+0x162>
 800418e:	3201      	adds	r2, #1
 8004190:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004194:	60a2      	str	r2, [r4, #8]
 8004196:	68a3      	ldr	r3, [r4, #8]
 8004198:	3b01      	subs	r3, #1
 800419a:	60a3      	str	r3, [r4, #8]
 800419c:	6923      	ldr	r3, [r4, #16]
 800419e:	3301      	adds	r3, #1
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	f340 8087 	ble.w	80042bc <_scanf_float+0x288>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	e764      	b.n	8004080 <_scanf_float+0x4c>
 80041b6:	eb1a 0105 	adds.w	r1, sl, r5
 80041ba:	f47f af6e 	bne.w	800409a <_scanf_float+0x66>
 80041be:	460d      	mov	r5, r1
 80041c0:	468a      	mov	sl, r1
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	f806 3b01 	strb.w	r3, [r6], #1
 80041ce:	e7e2      	b.n	8004196 <_scanf_float+0x162>
 80041d0:	6822      	ldr	r2, [r4, #0]
 80041d2:	0610      	lsls	r0, r2, #24
 80041d4:	f57f af61 	bpl.w	800409a <_scanf_float+0x66>
 80041d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041dc:	6022      	str	r2, [r4, #0]
 80041de:	e7f4      	b.n	80041ca <_scanf_float+0x196>
 80041e0:	f1ba 0f00 	cmp.w	sl, #0
 80041e4:	d10e      	bne.n	8004204 <_scanf_float+0x1d0>
 80041e6:	f1b9 0f00 	cmp.w	r9, #0
 80041ea:	d10e      	bne.n	800420a <_scanf_float+0x1d6>
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80041f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80041f6:	d108      	bne.n	800420a <_scanf_float+0x1d6>
 80041f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80041fc:	f04f 0a01 	mov.w	sl, #1
 8004200:	6022      	str	r2, [r4, #0]
 8004202:	e7e2      	b.n	80041ca <_scanf_float+0x196>
 8004204:	f1ba 0f02 	cmp.w	sl, #2
 8004208:	d055      	beq.n	80042b6 <_scanf_float+0x282>
 800420a:	2d01      	cmp	r5, #1
 800420c:	d002      	beq.n	8004214 <_scanf_float+0x1e0>
 800420e:	2d04      	cmp	r5, #4
 8004210:	f47f af43 	bne.w	800409a <_scanf_float+0x66>
 8004214:	3501      	adds	r5, #1
 8004216:	b2ed      	uxtb	r5, r5
 8004218:	e7d7      	b.n	80041ca <_scanf_float+0x196>
 800421a:	f1ba 0f01 	cmp.w	sl, #1
 800421e:	f47f af3c 	bne.w	800409a <_scanf_float+0x66>
 8004222:	f04f 0a02 	mov.w	sl, #2
 8004226:	e7d0      	b.n	80041ca <_scanf_float+0x196>
 8004228:	b97d      	cbnz	r5, 800424a <_scanf_float+0x216>
 800422a:	f1b9 0f00 	cmp.w	r9, #0
 800422e:	f47f af37 	bne.w	80040a0 <_scanf_float+0x6c>
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004238:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800423c:	f040 8103 	bne.w	8004446 <_scanf_float+0x412>
 8004240:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004244:	2501      	movs	r5, #1
 8004246:	6022      	str	r2, [r4, #0]
 8004248:	e7bf      	b.n	80041ca <_scanf_float+0x196>
 800424a:	2d03      	cmp	r5, #3
 800424c:	d0e2      	beq.n	8004214 <_scanf_float+0x1e0>
 800424e:	2d05      	cmp	r5, #5
 8004250:	e7de      	b.n	8004210 <_scanf_float+0x1dc>
 8004252:	2d02      	cmp	r5, #2
 8004254:	f47f af21 	bne.w	800409a <_scanf_float+0x66>
 8004258:	2503      	movs	r5, #3
 800425a:	e7b6      	b.n	80041ca <_scanf_float+0x196>
 800425c:	2d06      	cmp	r5, #6
 800425e:	f47f af1c 	bne.w	800409a <_scanf_float+0x66>
 8004262:	2507      	movs	r5, #7
 8004264:	e7b1      	b.n	80041ca <_scanf_float+0x196>
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	0591      	lsls	r1, r2, #22
 800426a:	f57f af16 	bpl.w	800409a <_scanf_float+0x66>
 800426e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004272:	6022      	str	r2, [r4, #0]
 8004274:	f8cd 9008 	str.w	r9, [sp, #8]
 8004278:	e7a7      	b.n	80041ca <_scanf_float+0x196>
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004280:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004284:	d006      	beq.n	8004294 <_scanf_float+0x260>
 8004286:	0550      	lsls	r0, r2, #21
 8004288:	f57f af07 	bpl.w	800409a <_scanf_float+0x66>
 800428c:	f1b9 0f00 	cmp.w	r9, #0
 8004290:	f000 80d9 	beq.w	8004446 <_scanf_float+0x412>
 8004294:	0591      	lsls	r1, r2, #22
 8004296:	bf58      	it	pl
 8004298:	9902      	ldrpl	r1, [sp, #8]
 800429a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800429e:	bf58      	it	pl
 80042a0:	eba9 0101 	subpl.w	r1, r9, r1
 80042a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80042a8:	f04f 0900 	mov.w	r9, #0
 80042ac:	bf58      	it	pl
 80042ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80042b2:	6022      	str	r2, [r4, #0]
 80042b4:	e789      	b.n	80041ca <_scanf_float+0x196>
 80042b6:	f04f 0a03 	mov.w	sl, #3
 80042ba:	e786      	b.n	80041ca <_scanf_float+0x196>
 80042bc:	4639      	mov	r1, r7
 80042be:	4640      	mov	r0, r8
 80042c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80042c4:	4798      	blx	r3
 80042c6:	2800      	cmp	r0, #0
 80042c8:	f43f aeda 	beq.w	8004080 <_scanf_float+0x4c>
 80042cc:	e6e5      	b.n	800409a <_scanf_float+0x66>
 80042ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042d2:	463a      	mov	r2, r7
 80042d4:	4640      	mov	r0, r8
 80042d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80042da:	4798      	blx	r3
 80042dc:	6923      	ldr	r3, [r4, #16]
 80042de:	3b01      	subs	r3, #1
 80042e0:	6123      	str	r3, [r4, #16]
 80042e2:	e6e7      	b.n	80040b4 <_scanf_float+0x80>
 80042e4:	1e6b      	subs	r3, r5, #1
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d824      	bhi.n	8004334 <_scanf_float+0x300>
 80042ea:	2d02      	cmp	r5, #2
 80042ec:	d836      	bhi.n	800435c <_scanf_float+0x328>
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	429e      	cmp	r6, r3
 80042f2:	f67f aee3 	bls.w	80040bc <_scanf_float+0x88>
 80042f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042fa:	463a      	mov	r2, r7
 80042fc:	4640      	mov	r0, r8
 80042fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004302:	4798      	blx	r3
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	3b01      	subs	r3, #1
 8004308:	6123      	str	r3, [r4, #16]
 800430a:	e7f0      	b.n	80042ee <_scanf_float+0x2ba>
 800430c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004310:	463a      	mov	r2, r7
 8004312:	4640      	mov	r0, r8
 8004314:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004318:	4798      	blx	r3
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	3b01      	subs	r3, #1
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004324:	fa5f fa8a 	uxtb.w	sl, sl
 8004328:	f1ba 0f02 	cmp.w	sl, #2
 800432c:	d1ee      	bne.n	800430c <_scanf_float+0x2d8>
 800432e:	3d03      	subs	r5, #3
 8004330:	b2ed      	uxtb	r5, r5
 8004332:	1b76      	subs	r6, r6, r5
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	05da      	lsls	r2, r3, #23
 8004338:	d530      	bpl.n	800439c <_scanf_float+0x368>
 800433a:	055b      	lsls	r3, r3, #21
 800433c:	d511      	bpl.n	8004362 <_scanf_float+0x32e>
 800433e:	9b01      	ldr	r3, [sp, #4]
 8004340:	429e      	cmp	r6, r3
 8004342:	f67f aebb 	bls.w	80040bc <_scanf_float+0x88>
 8004346:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800434a:	463a      	mov	r2, r7
 800434c:	4640      	mov	r0, r8
 800434e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004352:	4798      	blx	r3
 8004354:	6923      	ldr	r3, [r4, #16]
 8004356:	3b01      	subs	r3, #1
 8004358:	6123      	str	r3, [r4, #16]
 800435a:	e7f0      	b.n	800433e <_scanf_float+0x30a>
 800435c:	46aa      	mov	sl, r5
 800435e:	46b3      	mov	fp, r6
 8004360:	e7de      	b.n	8004320 <_scanf_float+0x2ec>
 8004362:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	2965      	cmp	r1, #101	@ 0x65
 800436a:	f103 33ff 	add.w	r3, r3, #4294967295
 800436e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004372:	6123      	str	r3, [r4, #16]
 8004374:	d00c      	beq.n	8004390 <_scanf_float+0x35c>
 8004376:	2945      	cmp	r1, #69	@ 0x45
 8004378:	d00a      	beq.n	8004390 <_scanf_float+0x35c>
 800437a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800437e:	463a      	mov	r2, r7
 8004380:	4640      	mov	r0, r8
 8004382:	4798      	blx	r3
 8004384:	6923      	ldr	r3, [r4, #16]
 8004386:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800438a:	3b01      	subs	r3, #1
 800438c:	1eb5      	subs	r5, r6, #2
 800438e:	6123      	str	r3, [r4, #16]
 8004390:	463a      	mov	r2, r7
 8004392:	4640      	mov	r0, r8
 8004394:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004398:	4798      	blx	r3
 800439a:	462e      	mov	r6, r5
 800439c:	6822      	ldr	r2, [r4, #0]
 800439e:	f012 0210 	ands.w	r2, r2, #16
 80043a2:	d001      	beq.n	80043a8 <_scanf_float+0x374>
 80043a4:	2000      	movs	r0, #0
 80043a6:	e68a      	b.n	80040be <_scanf_float+0x8a>
 80043a8:	7032      	strb	r2, [r6, #0]
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b4:	d11c      	bne.n	80043f0 <_scanf_float+0x3bc>
 80043b6:	9b02      	ldr	r3, [sp, #8]
 80043b8:	454b      	cmp	r3, r9
 80043ba:	eba3 0209 	sub.w	r2, r3, r9
 80043be:	d123      	bne.n	8004408 <_scanf_float+0x3d4>
 80043c0:	2200      	movs	r2, #0
 80043c2:	4640      	mov	r0, r8
 80043c4:	9901      	ldr	r1, [sp, #4]
 80043c6:	f002 fbfb 	bl	8006bc0 <_strtod_r>
 80043ca:	9b03      	ldr	r3, [sp, #12]
 80043cc:	6825      	ldr	r5, [r4, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f015 0f02 	tst.w	r5, #2
 80043d4:	4606      	mov	r6, r0
 80043d6:	460f      	mov	r7, r1
 80043d8:	f103 0204 	add.w	r2, r3, #4
 80043dc:	d01f      	beq.n	800441e <_scanf_float+0x3ea>
 80043de:	9903      	ldr	r1, [sp, #12]
 80043e0:	600a      	str	r2, [r1, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	e9c3 6700 	strd	r6, r7, [r3]
 80043e8:	68e3      	ldr	r3, [r4, #12]
 80043ea:	3301      	adds	r3, #1
 80043ec:	60e3      	str	r3, [r4, #12]
 80043ee:	e7d9      	b.n	80043a4 <_scanf_float+0x370>
 80043f0:	9b04      	ldr	r3, [sp, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0e4      	beq.n	80043c0 <_scanf_float+0x38c>
 80043f6:	9905      	ldr	r1, [sp, #20]
 80043f8:	230a      	movs	r3, #10
 80043fa:	4640      	mov	r0, r8
 80043fc:	3101      	adds	r1, #1
 80043fe:	f002 fc5f 	bl	8006cc0 <_strtol_r>
 8004402:	9b04      	ldr	r3, [sp, #16]
 8004404:	9e05      	ldr	r6, [sp, #20]
 8004406:	1ac2      	subs	r2, r0, r3
 8004408:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800440c:	429e      	cmp	r6, r3
 800440e:	bf28      	it	cs
 8004410:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004414:	4630      	mov	r0, r6
 8004416:	490d      	ldr	r1, [pc, #52]	@ (800444c <_scanf_float+0x418>)
 8004418:	f000 f8de 	bl	80045d8 <siprintf>
 800441c:	e7d0      	b.n	80043c0 <_scanf_float+0x38c>
 800441e:	076d      	lsls	r5, r5, #29
 8004420:	d4dd      	bmi.n	80043de <_scanf_float+0x3aa>
 8004422:	9d03      	ldr	r5, [sp, #12]
 8004424:	602a      	str	r2, [r5, #0]
 8004426:	681d      	ldr	r5, [r3, #0]
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	f7fc faee 	bl	8000a0c <__aeabi_dcmpun>
 8004430:	b120      	cbz	r0, 800443c <_scanf_float+0x408>
 8004432:	4807      	ldr	r0, [pc, #28]	@ (8004450 <_scanf_float+0x41c>)
 8004434:	f000 f9d0 	bl	80047d8 <nanf>
 8004438:	6028      	str	r0, [r5, #0]
 800443a:	e7d5      	b.n	80043e8 <_scanf_float+0x3b4>
 800443c:	4630      	mov	r0, r6
 800443e:	4639      	mov	r1, r7
 8004440:	f7fc fb42 	bl	8000ac8 <__aeabi_d2f>
 8004444:	e7f8      	b.n	8004438 <_scanf_float+0x404>
 8004446:	f04f 0900 	mov.w	r9, #0
 800444a:	e62d      	b.n	80040a8 <_scanf_float+0x74>
 800444c:	08007f0e 	.word	0x08007f0e
 8004450:	080082a5 	.word	0x080082a5

08004454 <std>:
 8004454:	2300      	movs	r3, #0
 8004456:	b510      	push	{r4, lr}
 8004458:	4604      	mov	r4, r0
 800445a:	e9c0 3300 	strd	r3, r3, [r0]
 800445e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004462:	6083      	str	r3, [r0, #8]
 8004464:	8181      	strh	r1, [r0, #12]
 8004466:	6643      	str	r3, [r0, #100]	@ 0x64
 8004468:	81c2      	strh	r2, [r0, #14]
 800446a:	6183      	str	r3, [r0, #24]
 800446c:	4619      	mov	r1, r3
 800446e:	2208      	movs	r2, #8
 8004470:	305c      	adds	r0, #92	@ 0x5c
 8004472:	f000 f914 	bl	800469e <memset>
 8004476:	4b0d      	ldr	r3, [pc, #52]	@ (80044ac <std+0x58>)
 8004478:	6224      	str	r4, [r4, #32]
 800447a:	6263      	str	r3, [r4, #36]	@ 0x24
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <std+0x5c>)
 800447e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <std+0x60>)
 8004482:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <std+0x64>)
 8004486:	6323      	str	r3, [r4, #48]	@ 0x30
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <std+0x68>)
 800448a:	429c      	cmp	r4, r3
 800448c:	d006      	beq.n	800449c <std+0x48>
 800448e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004492:	4294      	cmp	r4, r2
 8004494:	d002      	beq.n	800449c <std+0x48>
 8004496:	33d0      	adds	r3, #208	@ 0xd0
 8004498:	429c      	cmp	r4, r3
 800449a:	d105      	bne.n	80044a8 <std+0x54>
 800449c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a4:	f000 b978 	b.w	8004798 <__retarget_lock_init_recursive>
 80044a8:	bd10      	pop	{r4, pc}
 80044aa:	bf00      	nop
 80044ac:	08004619 	.word	0x08004619
 80044b0:	0800463b 	.word	0x0800463b
 80044b4:	08004673 	.word	0x08004673
 80044b8:	08004697 	.word	0x08004697
 80044bc:	20000330 	.word	0x20000330

080044c0 <stdio_exit_handler>:
 80044c0:	4a02      	ldr	r2, [pc, #8]	@ (80044cc <stdio_exit_handler+0xc>)
 80044c2:	4903      	ldr	r1, [pc, #12]	@ (80044d0 <stdio_exit_handler+0x10>)
 80044c4:	4803      	ldr	r0, [pc, #12]	@ (80044d4 <stdio_exit_handler+0x14>)
 80044c6:	f000 b869 	b.w	800459c <_fwalk_sglue>
 80044ca:	bf00      	nop
 80044cc:	2000000c 	.word	0x2000000c
 80044d0:	08007075 	.word	0x08007075
 80044d4:	2000001c 	.word	0x2000001c

080044d8 <cleanup_stdio>:
 80044d8:	6841      	ldr	r1, [r0, #4]
 80044da:	4b0c      	ldr	r3, [pc, #48]	@ (800450c <cleanup_stdio+0x34>)
 80044dc:	b510      	push	{r4, lr}
 80044de:	4299      	cmp	r1, r3
 80044e0:	4604      	mov	r4, r0
 80044e2:	d001      	beq.n	80044e8 <cleanup_stdio+0x10>
 80044e4:	f002 fdc6 	bl	8007074 <_fflush_r>
 80044e8:	68a1      	ldr	r1, [r4, #8]
 80044ea:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <cleanup_stdio+0x38>)
 80044ec:	4299      	cmp	r1, r3
 80044ee:	d002      	beq.n	80044f6 <cleanup_stdio+0x1e>
 80044f0:	4620      	mov	r0, r4
 80044f2:	f002 fdbf 	bl	8007074 <_fflush_r>
 80044f6:	68e1      	ldr	r1, [r4, #12]
 80044f8:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <cleanup_stdio+0x3c>)
 80044fa:	4299      	cmp	r1, r3
 80044fc:	d004      	beq.n	8004508 <cleanup_stdio+0x30>
 80044fe:	4620      	mov	r0, r4
 8004500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004504:	f002 bdb6 	b.w	8007074 <_fflush_r>
 8004508:	bd10      	pop	{r4, pc}
 800450a:	bf00      	nop
 800450c:	20000330 	.word	0x20000330
 8004510:	20000398 	.word	0x20000398
 8004514:	20000400 	.word	0x20000400

08004518 <global_stdio_init.part.0>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <global_stdio_init.part.0+0x30>)
 800451c:	4c0b      	ldr	r4, [pc, #44]	@ (800454c <global_stdio_init.part.0+0x34>)
 800451e:	4a0c      	ldr	r2, [pc, #48]	@ (8004550 <global_stdio_init.part.0+0x38>)
 8004520:	4620      	mov	r0, r4
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	2104      	movs	r1, #4
 8004526:	2200      	movs	r2, #0
 8004528:	f7ff ff94 	bl	8004454 <std>
 800452c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004530:	2201      	movs	r2, #1
 8004532:	2109      	movs	r1, #9
 8004534:	f7ff ff8e 	bl	8004454 <std>
 8004538:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800453c:	2202      	movs	r2, #2
 800453e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004542:	2112      	movs	r1, #18
 8004544:	f7ff bf86 	b.w	8004454 <std>
 8004548:	20000468 	.word	0x20000468
 800454c:	20000330 	.word	0x20000330
 8004550:	080044c1 	.word	0x080044c1

08004554 <__sfp_lock_acquire>:
 8004554:	4801      	ldr	r0, [pc, #4]	@ (800455c <__sfp_lock_acquire+0x8>)
 8004556:	f000 b920 	b.w	800479a <__retarget_lock_acquire_recursive>
 800455a:	bf00      	nop
 800455c:	20000471 	.word	0x20000471

08004560 <__sfp_lock_release>:
 8004560:	4801      	ldr	r0, [pc, #4]	@ (8004568 <__sfp_lock_release+0x8>)
 8004562:	f000 b91b 	b.w	800479c <__retarget_lock_release_recursive>
 8004566:	bf00      	nop
 8004568:	20000471 	.word	0x20000471

0800456c <__sinit>:
 800456c:	b510      	push	{r4, lr}
 800456e:	4604      	mov	r4, r0
 8004570:	f7ff fff0 	bl	8004554 <__sfp_lock_acquire>
 8004574:	6a23      	ldr	r3, [r4, #32]
 8004576:	b11b      	cbz	r3, 8004580 <__sinit+0x14>
 8004578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800457c:	f7ff bff0 	b.w	8004560 <__sfp_lock_release>
 8004580:	4b04      	ldr	r3, [pc, #16]	@ (8004594 <__sinit+0x28>)
 8004582:	6223      	str	r3, [r4, #32]
 8004584:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <__sinit+0x2c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f5      	bne.n	8004578 <__sinit+0xc>
 800458c:	f7ff ffc4 	bl	8004518 <global_stdio_init.part.0>
 8004590:	e7f2      	b.n	8004578 <__sinit+0xc>
 8004592:	bf00      	nop
 8004594:	080044d9 	.word	0x080044d9
 8004598:	20000468 	.word	0x20000468

0800459c <_fwalk_sglue>:
 800459c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a0:	4607      	mov	r7, r0
 80045a2:	4688      	mov	r8, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	2600      	movs	r6, #0
 80045a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045ac:	f1b9 0901 	subs.w	r9, r9, #1
 80045b0:	d505      	bpl.n	80045be <_fwalk_sglue+0x22>
 80045b2:	6824      	ldr	r4, [r4, #0]
 80045b4:	2c00      	cmp	r4, #0
 80045b6:	d1f7      	bne.n	80045a8 <_fwalk_sglue+0xc>
 80045b8:	4630      	mov	r0, r6
 80045ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045be:	89ab      	ldrh	r3, [r5, #12]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d907      	bls.n	80045d4 <_fwalk_sglue+0x38>
 80045c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045c8:	3301      	adds	r3, #1
 80045ca:	d003      	beq.n	80045d4 <_fwalk_sglue+0x38>
 80045cc:	4629      	mov	r1, r5
 80045ce:	4638      	mov	r0, r7
 80045d0:	47c0      	blx	r8
 80045d2:	4306      	orrs	r6, r0
 80045d4:	3568      	adds	r5, #104	@ 0x68
 80045d6:	e7e9      	b.n	80045ac <_fwalk_sglue+0x10>

080045d8 <siprintf>:
 80045d8:	b40e      	push	{r1, r2, r3}
 80045da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045de:	b500      	push	{lr}
 80045e0:	b09c      	sub	sp, #112	@ 0x70
 80045e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80045e4:	9002      	str	r0, [sp, #8]
 80045e6:	9006      	str	r0, [sp, #24]
 80045e8:	9107      	str	r1, [sp, #28]
 80045ea:	9104      	str	r1, [sp, #16]
 80045ec:	4808      	ldr	r0, [pc, #32]	@ (8004610 <siprintf+0x38>)
 80045ee:	4909      	ldr	r1, [pc, #36]	@ (8004614 <siprintf+0x3c>)
 80045f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045f4:	9105      	str	r1, [sp, #20]
 80045f6:	6800      	ldr	r0, [r0, #0]
 80045f8:	a902      	add	r1, sp, #8
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	f002 fbbe 	bl	8006d7c <_svfiprintf_r>
 8004600:	2200      	movs	r2, #0
 8004602:	9b02      	ldr	r3, [sp, #8]
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	b01c      	add	sp, #112	@ 0x70
 8004608:	f85d eb04 	ldr.w	lr, [sp], #4
 800460c:	b003      	add	sp, #12
 800460e:	4770      	bx	lr
 8004610:	20000018 	.word	0x20000018
 8004614:	ffff0208 	.word	0xffff0208

08004618 <__sread>:
 8004618:	b510      	push	{r4, lr}
 800461a:	460c      	mov	r4, r1
 800461c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004620:	f000 f86c 	bl	80046fc <_read_r>
 8004624:	2800      	cmp	r0, #0
 8004626:	bfab      	itete	ge
 8004628:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800462a:	89a3      	ldrhlt	r3, [r4, #12]
 800462c:	181b      	addge	r3, r3, r0
 800462e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004632:	bfac      	ite	ge
 8004634:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004636:	81a3      	strhlt	r3, [r4, #12]
 8004638:	bd10      	pop	{r4, pc}

0800463a <__swrite>:
 800463a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463e:	461f      	mov	r7, r3
 8004640:	898b      	ldrh	r3, [r1, #12]
 8004642:	4605      	mov	r5, r0
 8004644:	05db      	lsls	r3, r3, #23
 8004646:	460c      	mov	r4, r1
 8004648:	4616      	mov	r6, r2
 800464a:	d505      	bpl.n	8004658 <__swrite+0x1e>
 800464c:	2302      	movs	r3, #2
 800464e:	2200      	movs	r2, #0
 8004650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004654:	f000 f840 	bl	80046d8 <_lseek_r>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	4632      	mov	r2, r6
 800465c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004660:	81a3      	strh	r3, [r4, #12]
 8004662:	4628      	mov	r0, r5
 8004664:	463b      	mov	r3, r7
 8004666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800466a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800466e:	f000 b857 	b.w	8004720 <_write_r>

08004672 <__sseek>:
 8004672:	b510      	push	{r4, lr}
 8004674:	460c      	mov	r4, r1
 8004676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800467a:	f000 f82d 	bl	80046d8 <_lseek_r>
 800467e:	1c43      	adds	r3, r0, #1
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	bf15      	itete	ne
 8004684:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004686:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800468a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800468e:	81a3      	strheq	r3, [r4, #12]
 8004690:	bf18      	it	ne
 8004692:	81a3      	strhne	r3, [r4, #12]
 8004694:	bd10      	pop	{r4, pc}

08004696 <__sclose>:
 8004696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800469a:	f000 b80d 	b.w	80046b8 <_close_r>

0800469e <memset>:
 800469e:	4603      	mov	r3, r0
 80046a0:	4402      	add	r2, r0
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d100      	bne.n	80046a8 <memset+0xa>
 80046a6:	4770      	bx	lr
 80046a8:	f803 1b01 	strb.w	r1, [r3], #1
 80046ac:	e7f9      	b.n	80046a2 <memset+0x4>
	...

080046b0 <_localeconv_r>:
 80046b0:	4800      	ldr	r0, [pc, #0]	@ (80046b4 <_localeconv_r+0x4>)
 80046b2:	4770      	bx	lr
 80046b4:	20000158 	.word	0x20000158

080046b8 <_close_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	2300      	movs	r3, #0
 80046bc:	4d05      	ldr	r5, [pc, #20]	@ (80046d4 <_close_r+0x1c>)
 80046be:	4604      	mov	r4, r0
 80046c0:	4608      	mov	r0, r1
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	f7fd f8af 	bl	8001826 <_close>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d102      	bne.n	80046d2 <_close_r+0x1a>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b103      	cbz	r3, 80046d2 <_close_r+0x1a>
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	2000046c 	.word	0x2000046c

080046d8 <_lseek_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4604      	mov	r4, r0
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	2200      	movs	r2, #0
 80046e2:	4d05      	ldr	r5, [pc, #20]	@ (80046f8 <_lseek_r+0x20>)
 80046e4:	602a      	str	r2, [r5, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	f7fd f8c1 	bl	800186e <_lseek>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d102      	bne.n	80046f6 <_lseek_r+0x1e>
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	b103      	cbz	r3, 80046f6 <_lseek_r+0x1e>
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	bd38      	pop	{r3, r4, r5, pc}
 80046f8:	2000046c 	.word	0x2000046c

080046fc <_read_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4604      	mov	r4, r0
 8004700:	4608      	mov	r0, r1
 8004702:	4611      	mov	r1, r2
 8004704:	2200      	movs	r2, #0
 8004706:	4d05      	ldr	r5, [pc, #20]	@ (800471c <_read_r+0x20>)
 8004708:	602a      	str	r2, [r5, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	f7fd f852 	bl	80017b4 <_read>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d102      	bne.n	800471a <_read_r+0x1e>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	b103      	cbz	r3, 800471a <_read_r+0x1e>
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	2000046c 	.word	0x2000046c

08004720 <_write_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	4611      	mov	r1, r2
 8004728:	2200      	movs	r2, #0
 800472a:	4d05      	ldr	r5, [pc, #20]	@ (8004740 <_write_r+0x20>)
 800472c:	602a      	str	r2, [r5, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	f7fd f85d 	bl	80017ee <_write>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_write_r+0x1e>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_write_r+0x1e>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	2000046c 	.word	0x2000046c

08004744 <__errno>:
 8004744:	4b01      	ldr	r3, [pc, #4]	@ (800474c <__errno+0x8>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000018 	.word	0x20000018

08004750 <__libc_init_array>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	2600      	movs	r6, #0
 8004754:	4d0c      	ldr	r5, [pc, #48]	@ (8004788 <__libc_init_array+0x38>)
 8004756:	4c0d      	ldr	r4, [pc, #52]	@ (800478c <__libc_init_array+0x3c>)
 8004758:	1b64      	subs	r4, r4, r5
 800475a:	10a4      	asrs	r4, r4, #2
 800475c:	42a6      	cmp	r6, r4
 800475e:	d109      	bne.n	8004774 <__libc_init_array+0x24>
 8004760:	f003 fb66 	bl	8007e30 <_init>
 8004764:	2600      	movs	r6, #0
 8004766:	4d0a      	ldr	r5, [pc, #40]	@ (8004790 <__libc_init_array+0x40>)
 8004768:	4c0a      	ldr	r4, [pc, #40]	@ (8004794 <__libc_init_array+0x44>)
 800476a:	1b64      	subs	r4, r4, r5
 800476c:	10a4      	asrs	r4, r4, #2
 800476e:	42a6      	cmp	r6, r4
 8004770:	d105      	bne.n	800477e <__libc_init_array+0x2e>
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	f855 3b04 	ldr.w	r3, [r5], #4
 8004778:	4798      	blx	r3
 800477a:	3601      	adds	r6, #1
 800477c:	e7ee      	b.n	800475c <__libc_init_array+0xc>
 800477e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004782:	4798      	blx	r3
 8004784:	3601      	adds	r6, #1
 8004786:	e7f2      	b.n	800476e <__libc_init_array+0x1e>
 8004788:	08008310 	.word	0x08008310
 800478c:	08008310 	.word	0x08008310
 8004790:	08008310 	.word	0x08008310
 8004794:	08008314 	.word	0x08008314

08004798 <__retarget_lock_init_recursive>:
 8004798:	4770      	bx	lr

0800479a <__retarget_lock_acquire_recursive>:
 800479a:	4770      	bx	lr

0800479c <__retarget_lock_release_recursive>:
 800479c:	4770      	bx	lr

0800479e <memchr>:
 800479e:	4603      	mov	r3, r0
 80047a0:	b510      	push	{r4, lr}
 80047a2:	b2c9      	uxtb	r1, r1
 80047a4:	4402      	add	r2, r0
 80047a6:	4293      	cmp	r3, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	d101      	bne.n	80047b0 <memchr+0x12>
 80047ac:	2000      	movs	r0, #0
 80047ae:	e003      	b.n	80047b8 <memchr+0x1a>
 80047b0:	7804      	ldrb	r4, [r0, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	428c      	cmp	r4, r1
 80047b6:	d1f6      	bne.n	80047a6 <memchr+0x8>
 80047b8:	bd10      	pop	{r4, pc}

080047ba <memcpy>:
 80047ba:	440a      	add	r2, r1
 80047bc:	4291      	cmp	r1, r2
 80047be:	f100 33ff 	add.w	r3, r0, #4294967295
 80047c2:	d100      	bne.n	80047c6 <memcpy+0xc>
 80047c4:	4770      	bx	lr
 80047c6:	b510      	push	{r4, lr}
 80047c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047cc:	4291      	cmp	r1, r2
 80047ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047d2:	d1f9      	bne.n	80047c8 <memcpy+0xe>
 80047d4:	bd10      	pop	{r4, pc}
	...

080047d8 <nanf>:
 80047d8:	4800      	ldr	r0, [pc, #0]	@ (80047dc <nanf+0x4>)
 80047da:	4770      	bx	lr
 80047dc:	7fc00000 	.word	0x7fc00000

080047e0 <quorem>:
 80047e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	6903      	ldr	r3, [r0, #16]
 80047e6:	690c      	ldr	r4, [r1, #16]
 80047e8:	4607      	mov	r7, r0
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	db7e      	blt.n	80048ec <quorem+0x10c>
 80047ee:	3c01      	subs	r4, #1
 80047f0:	00a3      	lsls	r3, r4, #2
 80047f2:	f100 0514 	add.w	r5, r0, #20
 80047f6:	f101 0814 	add.w	r8, r1, #20
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800480a:	3301      	adds	r3, #1
 800480c:	429a      	cmp	r2, r3
 800480e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004812:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004816:	d32e      	bcc.n	8004876 <quorem+0x96>
 8004818:	f04f 0a00 	mov.w	sl, #0
 800481c:	46c4      	mov	ip, r8
 800481e:	46ae      	mov	lr, r5
 8004820:	46d3      	mov	fp, sl
 8004822:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004826:	b298      	uxth	r0, r3
 8004828:	fb06 a000 	mla	r0, r6, r0, sl
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	0c02      	lsrs	r2, r0, #16
 8004830:	fb06 2303 	mla	r3, r6, r3, r2
 8004834:	f8de 2000 	ldr.w	r2, [lr]
 8004838:	b280      	uxth	r0, r0
 800483a:	b292      	uxth	r2, r2
 800483c:	1a12      	subs	r2, r2, r0
 800483e:	445a      	add	r2, fp
 8004840:	f8de 0000 	ldr.w	r0, [lr]
 8004844:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004848:	b29b      	uxth	r3, r3
 800484a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800484e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004852:	b292      	uxth	r2, r2
 8004854:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004858:	45e1      	cmp	r9, ip
 800485a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800485e:	f84e 2b04 	str.w	r2, [lr], #4
 8004862:	d2de      	bcs.n	8004822 <quorem+0x42>
 8004864:	9b00      	ldr	r3, [sp, #0]
 8004866:	58eb      	ldr	r3, [r5, r3]
 8004868:	b92b      	cbnz	r3, 8004876 <quorem+0x96>
 800486a:	9b01      	ldr	r3, [sp, #4]
 800486c:	3b04      	subs	r3, #4
 800486e:	429d      	cmp	r5, r3
 8004870:	461a      	mov	r2, r3
 8004872:	d32f      	bcc.n	80048d4 <quorem+0xf4>
 8004874:	613c      	str	r4, [r7, #16]
 8004876:	4638      	mov	r0, r7
 8004878:	f001 f9c2 	bl	8005c00 <__mcmp>
 800487c:	2800      	cmp	r0, #0
 800487e:	db25      	blt.n	80048cc <quorem+0xec>
 8004880:	4629      	mov	r1, r5
 8004882:	2000      	movs	r0, #0
 8004884:	f858 2b04 	ldr.w	r2, [r8], #4
 8004888:	f8d1 c000 	ldr.w	ip, [r1]
 800488c:	fa1f fe82 	uxth.w	lr, r2
 8004890:	fa1f f38c 	uxth.w	r3, ip
 8004894:	eba3 030e 	sub.w	r3, r3, lr
 8004898:	4403      	add	r3, r0
 800489a:	0c12      	lsrs	r2, r2, #16
 800489c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80048a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048aa:	45c1      	cmp	r9, r8
 80048ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048b0:	f841 3b04 	str.w	r3, [r1], #4
 80048b4:	d2e6      	bcs.n	8004884 <quorem+0xa4>
 80048b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048be:	b922      	cbnz	r2, 80048ca <quorem+0xea>
 80048c0:	3b04      	subs	r3, #4
 80048c2:	429d      	cmp	r5, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	d30b      	bcc.n	80048e0 <quorem+0x100>
 80048c8:	613c      	str	r4, [r7, #16]
 80048ca:	3601      	adds	r6, #1
 80048cc:	4630      	mov	r0, r6
 80048ce:	b003      	add	sp, #12
 80048d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	3b04      	subs	r3, #4
 80048d8:	2a00      	cmp	r2, #0
 80048da:	d1cb      	bne.n	8004874 <quorem+0x94>
 80048dc:	3c01      	subs	r4, #1
 80048de:	e7c6      	b.n	800486e <quorem+0x8e>
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	3b04      	subs	r3, #4
 80048e4:	2a00      	cmp	r2, #0
 80048e6:	d1ef      	bne.n	80048c8 <quorem+0xe8>
 80048e8:	3c01      	subs	r4, #1
 80048ea:	e7ea      	b.n	80048c2 <quorem+0xe2>
 80048ec:	2000      	movs	r0, #0
 80048ee:	e7ee      	b.n	80048ce <quorem+0xee>

080048f0 <_dtoa_r>:
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	4614      	mov	r4, r2
 80048f6:	461d      	mov	r5, r3
 80048f8:	69c7      	ldr	r7, [r0, #28]
 80048fa:	b097      	sub	sp, #92	@ 0x5c
 80048fc:	4683      	mov	fp, r0
 80048fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004902:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004904:	b97f      	cbnz	r7, 8004926 <_dtoa_r+0x36>
 8004906:	2010      	movs	r0, #16
 8004908:	f000 fe02 	bl	8005510 <malloc>
 800490c:	4602      	mov	r2, r0
 800490e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004912:	b920      	cbnz	r0, 800491e <_dtoa_r+0x2e>
 8004914:	21ef      	movs	r1, #239	@ 0xef
 8004916:	4ba8      	ldr	r3, [pc, #672]	@ (8004bb8 <_dtoa_r+0x2c8>)
 8004918:	48a8      	ldr	r0, [pc, #672]	@ (8004bbc <_dtoa_r+0x2cc>)
 800491a:	f002 fc15 	bl	8007148 <__assert_func>
 800491e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004922:	6007      	str	r7, [r0, #0]
 8004924:	60c7      	str	r7, [r0, #12]
 8004926:	f8db 301c 	ldr.w	r3, [fp, #28]
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	b159      	cbz	r1, 8004946 <_dtoa_r+0x56>
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	2301      	movs	r3, #1
 8004932:	4093      	lsls	r3, r2
 8004934:	604a      	str	r2, [r1, #4]
 8004936:	608b      	str	r3, [r1, #8]
 8004938:	4658      	mov	r0, fp
 800493a:	f000 fedf 	bl	80056fc <_Bfree>
 800493e:	2200      	movs	r2, #0
 8004940:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	1e2b      	subs	r3, r5, #0
 8004948:	bfaf      	iteee	ge
 800494a:	2300      	movge	r3, #0
 800494c:	2201      	movlt	r2, #1
 800494e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004952:	9303      	strlt	r3, [sp, #12]
 8004954:	bfa8      	it	ge
 8004956:	6033      	strge	r3, [r6, #0]
 8004958:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800495c:	4b98      	ldr	r3, [pc, #608]	@ (8004bc0 <_dtoa_r+0x2d0>)
 800495e:	bfb8      	it	lt
 8004960:	6032      	strlt	r2, [r6, #0]
 8004962:	ea33 0308 	bics.w	r3, r3, r8
 8004966:	d112      	bne.n	800498e <_dtoa_r+0x9e>
 8004968:	f242 730f 	movw	r3, #9999	@ 0x270f
 800496c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004974:	4323      	orrs	r3, r4
 8004976:	f000 8550 	beq.w	800541a <_dtoa_r+0xb2a>
 800497a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800497c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004bc4 <_dtoa_r+0x2d4>
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8552 	beq.w	800542a <_dtoa_r+0xb3a>
 8004986:	f10a 0303 	add.w	r3, sl, #3
 800498a:	f000 bd4c 	b.w	8005426 <_dtoa_r+0xb36>
 800498e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004992:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800499a:	2200      	movs	r2, #0
 800499c:	2300      	movs	r3, #0
 800499e:	f7fc f803 	bl	80009a8 <__aeabi_dcmpeq>
 80049a2:	4607      	mov	r7, r0
 80049a4:	b158      	cbz	r0, 80049be <_dtoa_r+0xce>
 80049a6:	2301      	movs	r3, #1
 80049a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049ae:	b113      	cbz	r3, 80049b6 <_dtoa_r+0xc6>
 80049b0:	4b85      	ldr	r3, [pc, #532]	@ (8004bc8 <_dtoa_r+0x2d8>)
 80049b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004bcc <_dtoa_r+0x2dc>
 80049ba:	f000 bd36 	b.w	800542a <_dtoa_r+0xb3a>
 80049be:	ab14      	add	r3, sp, #80	@ 0x50
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	ab15      	add	r3, sp, #84	@ 0x54
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4658      	mov	r0, fp
 80049c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80049cc:	f001 fa30 	bl	8005e30 <__d2b>
 80049d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80049d4:	4681      	mov	r9, r0
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	d077      	beq.n	8004aca <_dtoa_r+0x1da>
 80049da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80049e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80049ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80049f0:	9712      	str	r7, [sp, #72]	@ 0x48
 80049f2:	4619      	mov	r1, r3
 80049f4:	2200      	movs	r2, #0
 80049f6:	4b76      	ldr	r3, [pc, #472]	@ (8004bd0 <_dtoa_r+0x2e0>)
 80049f8:	f7fb fbb6 	bl	8000168 <__aeabi_dsub>
 80049fc:	a368      	add	r3, pc, #416	@ (adr r3, 8004ba0 <_dtoa_r+0x2b0>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f7fb fd69 	bl	80004d8 <__aeabi_dmul>
 8004a06:	a368      	add	r3, pc, #416	@ (adr r3, 8004ba8 <_dtoa_r+0x2b8>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f7fb fbae 	bl	800016c <__adddf3>
 8004a10:	4604      	mov	r4, r0
 8004a12:	4630      	mov	r0, r6
 8004a14:	460d      	mov	r5, r1
 8004a16:	f7fb fcf5 	bl	8000404 <__aeabi_i2d>
 8004a1a:	a365      	add	r3, pc, #404	@ (adr r3, 8004bb0 <_dtoa_r+0x2c0>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f7fb fd5a 	bl	80004d8 <__aeabi_dmul>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fb9e 	bl	800016c <__adddf3>
 8004a30:	4604      	mov	r4, r0
 8004a32:	460d      	mov	r5, r1
 8004a34:	f7fc f800 	bl	8000a38 <__aeabi_d2iz>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb ffbb 	bl	80009bc <__aeabi_dcmplt>
 8004a46:	b140      	cbz	r0, 8004a5a <_dtoa_r+0x16a>
 8004a48:	4638      	mov	r0, r7
 8004a4a:	f7fb fcdb 	bl	8000404 <__aeabi_i2d>
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	f7fb ffa9 	bl	80009a8 <__aeabi_dcmpeq>
 8004a56:	b900      	cbnz	r0, 8004a5a <_dtoa_r+0x16a>
 8004a58:	3f01      	subs	r7, #1
 8004a5a:	2f16      	cmp	r7, #22
 8004a5c:	d853      	bhi.n	8004b06 <_dtoa_r+0x216>
 8004a5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a62:	4b5c      	ldr	r3, [pc, #368]	@ (8004bd4 <_dtoa_r+0x2e4>)
 8004a64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f7fb ffa6 	bl	80009bc <__aeabi_dcmplt>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d04a      	beq.n	8004b0a <_dtoa_r+0x21a>
 8004a74:	2300      	movs	r3, #0
 8004a76:	3f01      	subs	r7, #1
 8004a78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a7c:	1b9b      	subs	r3, r3, r6
 8004a7e:	1e5a      	subs	r2, r3, #1
 8004a80:	bf46      	itte	mi
 8004a82:	f1c3 0801 	rsbmi	r8, r3, #1
 8004a86:	2300      	movmi	r3, #0
 8004a88:	f04f 0800 	movpl.w	r8, #0
 8004a8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a8e:	bf48      	it	mi
 8004a90:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004a92:	2f00      	cmp	r7, #0
 8004a94:	db3b      	blt.n	8004b0e <_dtoa_r+0x21e>
 8004a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a98:	970e      	str	r7, [sp, #56]	@ 0x38
 8004a9a:	443b      	add	r3, r7
 8004a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aa2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d866      	bhi.n	8004b76 <_dtoa_r+0x286>
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	bfc4      	itt	gt
 8004aac:	3b04      	subgt	r3, #4
 8004aae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004ab0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ab2:	bfc8      	it	gt
 8004ab4:	2400      	movgt	r4, #0
 8004ab6:	f1a3 0302 	sub.w	r3, r3, #2
 8004aba:	bfd8      	it	le
 8004abc:	2401      	movle	r4, #1
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d864      	bhi.n	8004b8c <_dtoa_r+0x29c>
 8004ac2:	e8df f003 	tbb	[pc, r3]
 8004ac6:	382b      	.short	0x382b
 8004ac8:	5636      	.short	0x5636
 8004aca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004ace:	441e      	add	r6, r3
 8004ad0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	bfc1      	itttt	gt
 8004ad8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004adc:	fa08 f803 	lslgt.w	r8, r8, r3
 8004ae0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004ae4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004ae8:	bfd6      	itet	le
 8004aea:	f1c3 0320 	rsble	r3, r3, #32
 8004aee:	ea48 0003 	orrgt.w	r0, r8, r3
 8004af2:	fa04 f003 	lslle.w	r0, r4, r3
 8004af6:	f7fb fc75 	bl	80003e4 <__aeabi_ui2d>
 8004afa:	2201      	movs	r2, #1
 8004afc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b00:	3e01      	subs	r6, #1
 8004b02:	9212      	str	r2, [sp, #72]	@ 0x48
 8004b04:	e775      	b.n	80049f2 <_dtoa_r+0x102>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e7b6      	b.n	8004a78 <_dtoa_r+0x188>
 8004b0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004b0c:	e7b5      	b.n	8004a7a <_dtoa_r+0x18a>
 8004b0e:	427b      	negs	r3, r7
 8004b10:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b12:	2300      	movs	r3, #0
 8004b14:	eba8 0807 	sub.w	r8, r8, r7
 8004b18:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b1a:	e7c2      	b.n	8004aa2 <_dtoa_r+0x1b2>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dc35      	bgt.n	8004b92 <_dtoa_r+0x2a2>
 8004b26:	2301      	movs	r3, #1
 8004b28:	461a      	mov	r2, r3
 8004b2a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b2e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004b30:	e00b      	b.n	8004b4a <_dtoa_r+0x25a>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e7f3      	b.n	8004b1e <_dtoa_r+0x22e>
 8004b36:	2300      	movs	r3, #0
 8004b38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	9308      	str	r3, [sp, #32]
 8004b40:	3301      	adds	r3, #1
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	9307      	str	r3, [sp, #28]
 8004b46:	bfb8      	it	lt
 8004b48:	2301      	movlt	r3, #1
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004b52:	f102 0514 	add.w	r5, r2, #20
 8004b56:	429d      	cmp	r5, r3
 8004b58:	d91f      	bls.n	8004b9a <_dtoa_r+0x2aa>
 8004b5a:	6041      	str	r1, [r0, #4]
 8004b5c:	4658      	mov	r0, fp
 8004b5e:	f000 fd8d 	bl	800567c <_Balloc>
 8004b62:	4682      	mov	sl, r0
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d139      	bne.n	8004bdc <_dtoa_r+0x2ec>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd8 <_dtoa_r+0x2e8>)
 8004b70:	e6d2      	b.n	8004918 <_dtoa_r+0x28>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e7e0      	b.n	8004b38 <_dtoa_r+0x248>
 8004b76:	2401      	movs	r4, #1
 8004b78:	2300      	movs	r3, #0
 8004b7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b7c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b82:	2200      	movs	r2, #0
 8004b84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b88:	2312      	movs	r3, #18
 8004b8a:	e7d0      	b.n	8004b2e <_dtoa_r+0x23e>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b90:	e7f5      	b.n	8004b7e <_dtoa_r+0x28e>
 8004b92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b98:	e7d7      	b.n	8004b4a <_dtoa_r+0x25a>
 8004b9a:	3101      	adds	r1, #1
 8004b9c:	0052      	lsls	r2, r2, #1
 8004b9e:	e7d8      	b.n	8004b52 <_dtoa_r+0x262>
 8004ba0:	636f4361 	.word	0x636f4361
 8004ba4:	3fd287a7 	.word	0x3fd287a7
 8004ba8:	8b60c8b3 	.word	0x8b60c8b3
 8004bac:	3fc68a28 	.word	0x3fc68a28
 8004bb0:	509f79fb 	.word	0x509f79fb
 8004bb4:	3fd34413 	.word	0x3fd34413
 8004bb8:	08007f20 	.word	0x08007f20
 8004bbc:	08007f37 	.word	0x08007f37
 8004bc0:	7ff00000 	.word	0x7ff00000
 8004bc4:	08007f1c 	.word	0x08007f1c
 8004bc8:	08007eeb 	.word	0x08007eeb
 8004bcc:	08007eea 	.word	0x08007eea
 8004bd0:	3ff80000 	.word	0x3ff80000
 8004bd4:	08008030 	.word	0x08008030
 8004bd8:	08007f8f 	.word	0x08007f8f
 8004bdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004be0:	6018      	str	r0, [r3, #0]
 8004be2:	9b07      	ldr	r3, [sp, #28]
 8004be4:	2b0e      	cmp	r3, #14
 8004be6:	f200 80a4 	bhi.w	8004d32 <_dtoa_r+0x442>
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	f000 80a1 	beq.w	8004d32 <_dtoa_r+0x442>
 8004bf0:	2f00      	cmp	r7, #0
 8004bf2:	dd33      	ble.n	8004c5c <_dtoa_r+0x36c>
 8004bf4:	4b86      	ldr	r3, [pc, #536]	@ (8004e10 <_dtoa_r+0x520>)
 8004bf6:	f007 020f 	and.w	r2, r7, #15
 8004bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bfe:	05f8      	lsls	r0, r7, #23
 8004c00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c0c:	d516      	bpl.n	8004c3c <_dtoa_r+0x34c>
 8004c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c12:	4b80      	ldr	r3, [pc, #512]	@ (8004e14 <_dtoa_r+0x524>)
 8004c14:	2603      	movs	r6, #3
 8004c16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c1a:	f7fb fd87 	bl	800072c <__aeabi_ddiv>
 8004c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c22:	f004 040f 	and.w	r4, r4, #15
 8004c26:	4d7b      	ldr	r5, [pc, #492]	@ (8004e14 <_dtoa_r+0x524>)
 8004c28:	b954      	cbnz	r4, 8004c40 <_dtoa_r+0x350>
 8004c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c32:	f7fb fd7b 	bl	800072c <__aeabi_ddiv>
 8004c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c3a:	e028      	b.n	8004c8e <_dtoa_r+0x39e>
 8004c3c:	2602      	movs	r6, #2
 8004c3e:	e7f2      	b.n	8004c26 <_dtoa_r+0x336>
 8004c40:	07e1      	lsls	r1, r4, #31
 8004c42:	d508      	bpl.n	8004c56 <_dtoa_r+0x366>
 8004c44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c4c:	f7fb fc44 	bl	80004d8 <__aeabi_dmul>
 8004c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c54:	3601      	adds	r6, #1
 8004c56:	1064      	asrs	r4, r4, #1
 8004c58:	3508      	adds	r5, #8
 8004c5a:	e7e5      	b.n	8004c28 <_dtoa_r+0x338>
 8004c5c:	f000 80d2 	beq.w	8004e04 <_dtoa_r+0x514>
 8004c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c64:	427c      	negs	r4, r7
 8004c66:	4b6a      	ldr	r3, [pc, #424]	@ (8004e10 <_dtoa_r+0x520>)
 8004c68:	f004 020f 	and.w	r2, r4, #15
 8004c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f7fb fc30 	bl	80004d8 <__aeabi_dmul>
 8004c78:	2602      	movs	r6, #2
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c80:	4d64      	ldr	r5, [pc, #400]	@ (8004e14 <_dtoa_r+0x524>)
 8004c82:	1124      	asrs	r4, r4, #4
 8004c84:	2c00      	cmp	r4, #0
 8004c86:	f040 80b2 	bne.w	8004dee <_dtoa_r+0x4fe>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1d3      	bne.n	8004c36 <_dtoa_r+0x346>
 8004c8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80b7 	beq.w	8004e08 <_dtoa_r+0x518>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	4b5d      	ldr	r3, [pc, #372]	@ (8004e18 <_dtoa_r+0x528>)
 8004ca2:	f7fb fe8b 	bl	80009bc <__aeabi_dcmplt>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	f000 80ae 	beq.w	8004e08 <_dtoa_r+0x518>
 8004cac:	9b07      	ldr	r3, [sp, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80aa 	beq.w	8004e08 <_dtoa_r+0x518>
 8004cb4:	9b08      	ldr	r3, [sp, #32]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	dd37      	ble.n	8004d2a <_dtoa_r+0x43a>
 8004cba:	1e7b      	subs	r3, r7, #1
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	9304      	str	r3, [sp, #16]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4b55      	ldr	r3, [pc, #340]	@ (8004e1c <_dtoa_r+0x52c>)
 8004cc6:	f7fb fc07 	bl	80004d8 <__aeabi_dmul>
 8004cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cce:	9c08      	ldr	r4, [sp, #32]
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f7fb fb96 	bl	8000404 <__aeabi_i2d>
 8004cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cdc:	f7fb fbfc 	bl	80004d8 <__aeabi_dmul>
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e20 <_dtoa_r+0x530>)
 8004ce4:	f7fb fa42 	bl	800016c <__adddf3>
 8004ce8:	4605      	mov	r5, r0
 8004cea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004cee:	2c00      	cmp	r4, #0
 8004cf0:	f040 809a 	bne.w	8004e28 <_dtoa_r+0x538>
 8004cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8004e24 <_dtoa_r+0x534>)
 8004cfc:	f7fb fa34 	bl	8000168 <__aeabi_dsub>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4633      	mov	r3, r6
 8004d0c:	f7fb fe74 	bl	80009f8 <__aeabi_dcmpgt>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	f040 828e 	bne.w	8005232 <_dtoa_r+0x942>
 8004d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d20:	f7fb fe4c 	bl	80009bc <__aeabi_dcmplt>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f040 8127 	bne.w	8004f78 <_dtoa_r+0x688>
 8004d2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004d2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004d32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f2c0 8163 	blt.w	8005000 <_dtoa_r+0x710>
 8004d3a:	2f0e      	cmp	r7, #14
 8004d3c:	f300 8160 	bgt.w	8005000 <_dtoa_r+0x710>
 8004d40:	4b33      	ldr	r3, [pc, #204]	@ (8004e10 <_dtoa_r+0x520>)
 8004d42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da03      	bge.n	8004d5c <_dtoa_r+0x46c>
 8004d54:	9b07      	ldr	r3, [sp, #28]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f340 8100 	ble.w	8004f5c <_dtoa_r+0x66c>
 8004d5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d60:	4656      	mov	r6, sl
 8004d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f7fb fcdf 	bl	800072c <__aeabi_ddiv>
 8004d6e:	f7fb fe63 	bl	8000a38 <__aeabi_d2iz>
 8004d72:	4680      	mov	r8, r0
 8004d74:	f7fb fb46 	bl	8000404 <__aeabi_i2d>
 8004d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d7c:	f7fb fbac 	bl	80004d8 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4620      	mov	r0, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	f7fb f9ee 	bl	8000168 <__aeabi_dsub>
 8004d8c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004d90:	9d07      	ldr	r5, [sp, #28]
 8004d92:	f806 4b01 	strb.w	r4, [r6], #1
 8004d96:	eba6 040a 	sub.w	r4, r6, sl
 8004d9a:	42a5      	cmp	r5, r4
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	f040 8116 	bne.w	8004fd0 <_dtoa_r+0x6e0>
 8004da4:	f7fb f9e2 	bl	800016c <__adddf3>
 8004da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dac:	4604      	mov	r4, r0
 8004dae:	460d      	mov	r5, r1
 8004db0:	f7fb fe22 	bl	80009f8 <__aeabi_dcmpgt>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	f040 80f8 	bne.w	8004faa <_dtoa_r+0x6ba>
 8004dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f7fb fdf1 	bl	80009a8 <__aeabi_dcmpeq>
 8004dc6:	b118      	cbz	r0, 8004dd0 <_dtoa_r+0x4e0>
 8004dc8:	f018 0f01 	tst.w	r8, #1
 8004dcc:	f040 80ed 	bne.w	8004faa <_dtoa_r+0x6ba>
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	4658      	mov	r0, fp
 8004dd4:	f000 fc92 	bl	80056fc <_Bfree>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	7033      	strb	r3, [r6, #0]
 8004ddc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004dde:	3701      	adds	r7, #1
 8004de0:	601f      	str	r7, [r3, #0]
 8004de2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8320 	beq.w	800542a <_dtoa_r+0xb3a>
 8004dea:	601e      	str	r6, [r3, #0]
 8004dec:	e31d      	b.n	800542a <_dtoa_r+0xb3a>
 8004dee:	07e2      	lsls	r2, r4, #31
 8004df0:	d505      	bpl.n	8004dfe <_dtoa_r+0x50e>
 8004df2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004df6:	f7fb fb6f 	bl	80004d8 <__aeabi_dmul>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	1064      	asrs	r4, r4, #1
 8004e00:	3508      	adds	r5, #8
 8004e02:	e73f      	b.n	8004c84 <_dtoa_r+0x394>
 8004e04:	2602      	movs	r6, #2
 8004e06:	e742      	b.n	8004c8e <_dtoa_r+0x39e>
 8004e08:	9c07      	ldr	r4, [sp, #28]
 8004e0a:	9704      	str	r7, [sp, #16]
 8004e0c:	e761      	b.n	8004cd2 <_dtoa_r+0x3e2>
 8004e0e:	bf00      	nop
 8004e10:	08008030 	.word	0x08008030
 8004e14:	08008008 	.word	0x08008008
 8004e18:	3ff00000 	.word	0x3ff00000
 8004e1c:	40240000 	.word	0x40240000
 8004e20:	401c0000 	.word	0x401c0000
 8004e24:	40140000 	.word	0x40140000
 8004e28:	4b70      	ldr	r3, [pc, #448]	@ (8004fec <_dtoa_r+0x6fc>)
 8004e2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e34:	4454      	add	r4, sl
 8004e36:	2900      	cmp	r1, #0
 8004e38:	d045      	beq.n	8004ec6 <_dtoa_r+0x5d6>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	496c      	ldr	r1, [pc, #432]	@ (8004ff0 <_dtoa_r+0x700>)
 8004e3e:	f7fb fc75 	bl	800072c <__aeabi_ddiv>
 8004e42:	4633      	mov	r3, r6
 8004e44:	462a      	mov	r2, r5
 8004e46:	f7fb f98f 	bl	8000168 <__aeabi_dsub>
 8004e4a:	4656      	mov	r6, sl
 8004e4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e54:	f7fb fdf0 	bl	8000a38 <__aeabi_d2iz>
 8004e58:	4605      	mov	r5, r0
 8004e5a:	f7fb fad3 	bl	8000404 <__aeabi_i2d>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e66:	f7fb f97f 	bl	8000168 <__aeabi_dsub>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	3530      	adds	r5, #48	@ 0x30
 8004e70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e78:	f806 5b01 	strb.w	r5, [r6], #1
 8004e7c:	f7fb fd9e 	bl	80009bc <__aeabi_dcmplt>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d163      	bne.n	8004f4c <_dtoa_r+0x65c>
 8004e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e88:	2000      	movs	r0, #0
 8004e8a:	495a      	ldr	r1, [pc, #360]	@ (8004ff4 <_dtoa_r+0x704>)
 8004e8c:	f7fb f96c 	bl	8000168 <__aeabi_dsub>
 8004e90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e94:	f7fb fd92 	bl	80009bc <__aeabi_dcmplt>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	f040 8087 	bne.w	8004fac <_dtoa_r+0x6bc>
 8004e9e:	42a6      	cmp	r6, r4
 8004ea0:	f43f af43 	beq.w	8004d2a <_dtoa_r+0x43a>
 8004ea4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <_dtoa_r+0x708>)
 8004eac:	f7fb fb14 	bl	80004d8 <__aeabi_dmul>
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eba:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff8 <_dtoa_r+0x708>)
 8004ebc:	f7fb fb0c 	bl	80004d8 <__aeabi_dmul>
 8004ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec4:	e7c4      	b.n	8004e50 <_dtoa_r+0x560>
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f7fb fb05 	bl	80004d8 <__aeabi_dmul>
 8004ece:	4656      	mov	r6, sl
 8004ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ed4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eda:	f7fb fdad 	bl	8000a38 <__aeabi_d2iz>
 8004ede:	4605      	mov	r5, r0
 8004ee0:	f7fb fa90 	bl	8000404 <__aeabi_i2d>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eec:	f7fb f93c 	bl	8000168 <__aeabi_dsub>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	3530      	adds	r5, #48	@ 0x30
 8004ef6:	f806 5b01 	strb.w	r5, [r6], #1
 8004efa:	42a6      	cmp	r6, r4
 8004efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	d124      	bne.n	8004f50 <_dtoa_r+0x660>
 8004f06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f0a:	4b39      	ldr	r3, [pc, #228]	@ (8004ff0 <_dtoa_r+0x700>)
 8004f0c:	f7fb f92e 	bl	800016c <__adddf3>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f18:	f7fb fd6e 	bl	80009f8 <__aeabi_dcmpgt>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d145      	bne.n	8004fac <_dtoa_r+0x6bc>
 8004f20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f24:	2000      	movs	r0, #0
 8004f26:	4932      	ldr	r1, [pc, #200]	@ (8004ff0 <_dtoa_r+0x700>)
 8004f28:	f7fb f91e 	bl	8000168 <__aeabi_dsub>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f34:	f7fb fd42 	bl	80009bc <__aeabi_dcmplt>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	f43f aef6 	beq.w	8004d2a <_dtoa_r+0x43a>
 8004f3e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004f40:	1e73      	subs	r3, r6, #1
 8004f42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f48:	2b30      	cmp	r3, #48	@ 0x30
 8004f4a:	d0f8      	beq.n	8004f3e <_dtoa_r+0x64e>
 8004f4c:	9f04      	ldr	r7, [sp, #16]
 8004f4e:	e73f      	b.n	8004dd0 <_dtoa_r+0x4e0>
 8004f50:	4b29      	ldr	r3, [pc, #164]	@ (8004ff8 <_dtoa_r+0x708>)
 8004f52:	f7fb fac1 	bl	80004d8 <__aeabi_dmul>
 8004f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f5a:	e7bc      	b.n	8004ed6 <_dtoa_r+0x5e6>
 8004f5c:	d10c      	bne.n	8004f78 <_dtoa_r+0x688>
 8004f5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f62:	2200      	movs	r2, #0
 8004f64:	4b25      	ldr	r3, [pc, #148]	@ (8004ffc <_dtoa_r+0x70c>)
 8004f66:	f7fb fab7 	bl	80004d8 <__aeabi_dmul>
 8004f6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f6e:	f7fb fd39 	bl	80009e4 <__aeabi_dcmpge>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	f000 815b 	beq.w	800522e <_dtoa_r+0x93e>
 8004f78:	2400      	movs	r4, #0
 8004f7a:	4625      	mov	r5, r4
 8004f7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f7e:	4656      	mov	r6, sl
 8004f80:	43db      	mvns	r3, r3
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	2700      	movs	r7, #0
 8004f86:	4621      	mov	r1, r4
 8004f88:	4658      	mov	r0, fp
 8004f8a:	f000 fbb7 	bl	80056fc <_Bfree>
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	d0dc      	beq.n	8004f4c <_dtoa_r+0x65c>
 8004f92:	b12f      	cbz	r7, 8004fa0 <_dtoa_r+0x6b0>
 8004f94:	42af      	cmp	r7, r5
 8004f96:	d003      	beq.n	8004fa0 <_dtoa_r+0x6b0>
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4658      	mov	r0, fp
 8004f9c:	f000 fbae 	bl	80056fc <_Bfree>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4658      	mov	r0, fp
 8004fa4:	f000 fbaa 	bl	80056fc <_Bfree>
 8004fa8:	e7d0      	b.n	8004f4c <_dtoa_r+0x65c>
 8004faa:	9704      	str	r7, [sp, #16]
 8004fac:	4633      	mov	r3, r6
 8004fae:	461e      	mov	r6, r3
 8004fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fb4:	2a39      	cmp	r2, #57	@ 0x39
 8004fb6:	d107      	bne.n	8004fc8 <_dtoa_r+0x6d8>
 8004fb8:	459a      	cmp	sl, r3
 8004fba:	d1f8      	bne.n	8004fae <_dtoa_r+0x6be>
 8004fbc:	9a04      	ldr	r2, [sp, #16]
 8004fbe:	3201      	adds	r2, #1
 8004fc0:	9204      	str	r2, [sp, #16]
 8004fc2:	2230      	movs	r2, #48	@ 0x30
 8004fc4:	f88a 2000 	strb.w	r2, [sl]
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	3201      	adds	r2, #1
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e7bd      	b.n	8004f4c <_dtoa_r+0x65c>
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <_dtoa_r+0x708>)
 8004fd4:	f7fb fa80 	bl	80004d8 <__aeabi_dmul>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2300      	movs	r3, #0
 8004fdc:	4604      	mov	r4, r0
 8004fde:	460d      	mov	r5, r1
 8004fe0:	f7fb fce2 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	f43f aebc 	beq.w	8004d62 <_dtoa_r+0x472>
 8004fea:	e6f1      	b.n	8004dd0 <_dtoa_r+0x4e0>
 8004fec:	08008030 	.word	0x08008030
 8004ff0:	3fe00000 	.word	0x3fe00000
 8004ff4:	3ff00000 	.word	0x3ff00000
 8004ff8:	40240000 	.word	0x40240000
 8004ffc:	40140000 	.word	0x40140000
 8005000:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005002:	2a00      	cmp	r2, #0
 8005004:	f000 80db 	beq.w	80051be <_dtoa_r+0x8ce>
 8005008:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800500a:	2a01      	cmp	r2, #1
 800500c:	f300 80bf 	bgt.w	800518e <_dtoa_r+0x89e>
 8005010:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005012:	2a00      	cmp	r2, #0
 8005014:	f000 80b7 	beq.w	8005186 <_dtoa_r+0x896>
 8005018:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800501c:	4646      	mov	r6, r8
 800501e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005022:	2101      	movs	r1, #1
 8005024:	441a      	add	r2, r3
 8005026:	4658      	mov	r0, fp
 8005028:	4498      	add	r8, r3
 800502a:	9209      	str	r2, [sp, #36]	@ 0x24
 800502c:	f000 fc64 	bl	80058f8 <__i2b>
 8005030:	4605      	mov	r5, r0
 8005032:	b15e      	cbz	r6, 800504c <_dtoa_r+0x75c>
 8005034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	dd08      	ble.n	800504c <_dtoa_r+0x75c>
 800503a:	42b3      	cmp	r3, r6
 800503c:	bfa8      	it	ge
 800503e:	4633      	movge	r3, r6
 8005040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005042:	eba8 0803 	sub.w	r8, r8, r3
 8005046:	1af6      	subs	r6, r6, r3
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	9309      	str	r3, [sp, #36]	@ 0x24
 800504c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800504e:	b1f3      	cbz	r3, 800508e <_dtoa_r+0x79e>
 8005050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80b7 	beq.w	80051c6 <_dtoa_r+0x8d6>
 8005058:	b18c      	cbz	r4, 800507e <_dtoa_r+0x78e>
 800505a:	4629      	mov	r1, r5
 800505c:	4622      	mov	r2, r4
 800505e:	4658      	mov	r0, fp
 8005060:	f000 fd08 	bl	8005a74 <__pow5mult>
 8005064:	464a      	mov	r2, r9
 8005066:	4601      	mov	r1, r0
 8005068:	4605      	mov	r5, r0
 800506a:	4658      	mov	r0, fp
 800506c:	f000 fc5a 	bl	8005924 <__multiply>
 8005070:	4649      	mov	r1, r9
 8005072:	9004      	str	r0, [sp, #16]
 8005074:	4658      	mov	r0, fp
 8005076:	f000 fb41 	bl	80056fc <_Bfree>
 800507a:	9b04      	ldr	r3, [sp, #16]
 800507c:	4699      	mov	r9, r3
 800507e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005080:	1b1a      	subs	r2, r3, r4
 8005082:	d004      	beq.n	800508e <_dtoa_r+0x79e>
 8005084:	4649      	mov	r1, r9
 8005086:	4658      	mov	r0, fp
 8005088:	f000 fcf4 	bl	8005a74 <__pow5mult>
 800508c:	4681      	mov	r9, r0
 800508e:	2101      	movs	r1, #1
 8005090:	4658      	mov	r0, fp
 8005092:	f000 fc31 	bl	80058f8 <__i2b>
 8005096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005098:	4604      	mov	r4, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 81c9 	beq.w	8005432 <_dtoa_r+0xb42>
 80050a0:	461a      	mov	r2, r3
 80050a2:	4601      	mov	r1, r0
 80050a4:	4658      	mov	r0, fp
 80050a6:	f000 fce5 	bl	8005a74 <__pow5mult>
 80050aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050ac:	4604      	mov	r4, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	f300 808f 	bgt.w	80051d2 <_dtoa_r+0x8e2>
 80050b4:	9b02      	ldr	r3, [sp, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f040 8087 	bne.w	80051ca <_dtoa_r+0x8da>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 8083 	bne.w	80051ce <_dtoa_r+0x8de>
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050ce:	0d1b      	lsrs	r3, r3, #20
 80050d0:	051b      	lsls	r3, r3, #20
 80050d2:	b12b      	cbz	r3, 80050e0 <_dtoa_r+0x7f0>
 80050d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050d6:	f108 0801 	add.w	r8, r8, #1
 80050da:	3301      	adds	r3, #1
 80050dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050de:	2301      	movs	r3, #1
 80050e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80050e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 81aa 	beq.w	800543e <_dtoa_r+0xb4e>
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80050f0:	6918      	ldr	r0, [r3, #16]
 80050f2:	f000 fbb5 	bl	8005860 <__hi0bits>
 80050f6:	f1c0 0020 	rsb	r0, r0, #32
 80050fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050fc:	4418      	add	r0, r3
 80050fe:	f010 001f 	ands.w	r0, r0, #31
 8005102:	d071      	beq.n	80051e8 <_dtoa_r+0x8f8>
 8005104:	f1c0 0320 	rsb	r3, r0, #32
 8005108:	2b04      	cmp	r3, #4
 800510a:	dd65      	ble.n	80051d8 <_dtoa_r+0x8e8>
 800510c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800510e:	f1c0 001c 	rsb	r0, r0, #28
 8005112:	4403      	add	r3, r0
 8005114:	4480      	add	r8, r0
 8005116:	4406      	add	r6, r0
 8005118:	9309      	str	r3, [sp, #36]	@ 0x24
 800511a:	f1b8 0f00 	cmp.w	r8, #0
 800511e:	dd05      	ble.n	800512c <_dtoa_r+0x83c>
 8005120:	4649      	mov	r1, r9
 8005122:	4642      	mov	r2, r8
 8005124:	4658      	mov	r0, fp
 8005126:	f000 fcff 	bl	8005b28 <__lshift>
 800512a:	4681      	mov	r9, r0
 800512c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	dd05      	ble.n	800513e <_dtoa_r+0x84e>
 8005132:	4621      	mov	r1, r4
 8005134:	461a      	mov	r2, r3
 8005136:	4658      	mov	r0, fp
 8005138:	f000 fcf6 	bl	8005b28 <__lshift>
 800513c:	4604      	mov	r4, r0
 800513e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d053      	beq.n	80051ec <_dtoa_r+0x8fc>
 8005144:	4621      	mov	r1, r4
 8005146:	4648      	mov	r0, r9
 8005148:	f000 fd5a 	bl	8005c00 <__mcmp>
 800514c:	2800      	cmp	r0, #0
 800514e:	da4d      	bge.n	80051ec <_dtoa_r+0x8fc>
 8005150:	1e7b      	subs	r3, r7, #1
 8005152:	4649      	mov	r1, r9
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	220a      	movs	r2, #10
 8005158:	2300      	movs	r3, #0
 800515a:	4658      	mov	r0, fp
 800515c:	f000 faf0 	bl	8005740 <__multadd>
 8005160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005162:	4681      	mov	r9, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 816c 	beq.w	8005442 <_dtoa_r+0xb52>
 800516a:	2300      	movs	r3, #0
 800516c:	4629      	mov	r1, r5
 800516e:	220a      	movs	r2, #10
 8005170:	4658      	mov	r0, fp
 8005172:	f000 fae5 	bl	8005740 <__multadd>
 8005176:	9b08      	ldr	r3, [sp, #32]
 8005178:	4605      	mov	r5, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	dc61      	bgt.n	8005242 <_dtoa_r+0x952>
 800517e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005180:	2b02      	cmp	r3, #2
 8005182:	dc3b      	bgt.n	80051fc <_dtoa_r+0x90c>
 8005184:	e05d      	b.n	8005242 <_dtoa_r+0x952>
 8005186:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005188:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800518c:	e746      	b.n	800501c <_dtoa_r+0x72c>
 800518e:	9b07      	ldr	r3, [sp, #28]
 8005190:	1e5c      	subs	r4, r3, #1
 8005192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005194:	42a3      	cmp	r3, r4
 8005196:	bfbf      	itttt	lt
 8005198:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800519a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800519c:	1ae3      	sublt	r3, r4, r3
 800519e:	18d2      	addlt	r2, r2, r3
 80051a0:	bfa8      	it	ge
 80051a2:	1b1c      	subge	r4, r3, r4
 80051a4:	9b07      	ldr	r3, [sp, #28]
 80051a6:	bfbe      	ittt	lt
 80051a8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80051aa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80051ac:	2400      	movlt	r4, #0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb5      	itete	lt
 80051b2:	eba8 0603 	sublt.w	r6, r8, r3
 80051b6:	4646      	movge	r6, r8
 80051b8:	2300      	movlt	r3, #0
 80051ba:	9b07      	ldrge	r3, [sp, #28]
 80051bc:	e730      	b.n	8005020 <_dtoa_r+0x730>
 80051be:	4646      	mov	r6, r8
 80051c0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80051c2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80051c4:	e735      	b.n	8005032 <_dtoa_r+0x742>
 80051c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051c8:	e75c      	b.n	8005084 <_dtoa_r+0x794>
 80051ca:	2300      	movs	r3, #0
 80051cc:	e788      	b.n	80050e0 <_dtoa_r+0x7f0>
 80051ce:	9b02      	ldr	r3, [sp, #8]
 80051d0:	e786      	b.n	80050e0 <_dtoa_r+0x7f0>
 80051d2:	2300      	movs	r3, #0
 80051d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80051d6:	e788      	b.n	80050ea <_dtoa_r+0x7fa>
 80051d8:	d09f      	beq.n	800511a <_dtoa_r+0x82a>
 80051da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051dc:	331c      	adds	r3, #28
 80051de:	441a      	add	r2, r3
 80051e0:	4498      	add	r8, r3
 80051e2:	441e      	add	r6, r3
 80051e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80051e6:	e798      	b.n	800511a <_dtoa_r+0x82a>
 80051e8:	4603      	mov	r3, r0
 80051ea:	e7f6      	b.n	80051da <_dtoa_r+0x8ea>
 80051ec:	9b07      	ldr	r3, [sp, #28]
 80051ee:	9704      	str	r7, [sp, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dc20      	bgt.n	8005236 <_dtoa_r+0x946>
 80051f4:	9308      	str	r3, [sp, #32]
 80051f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	dd1e      	ble.n	800523a <_dtoa_r+0x94a>
 80051fc:	9b08      	ldr	r3, [sp, #32]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f47f aebc 	bne.w	8004f7c <_dtoa_r+0x68c>
 8005204:	4621      	mov	r1, r4
 8005206:	2205      	movs	r2, #5
 8005208:	4658      	mov	r0, fp
 800520a:	f000 fa99 	bl	8005740 <__multadd>
 800520e:	4601      	mov	r1, r0
 8005210:	4604      	mov	r4, r0
 8005212:	4648      	mov	r0, r9
 8005214:	f000 fcf4 	bl	8005c00 <__mcmp>
 8005218:	2800      	cmp	r0, #0
 800521a:	f77f aeaf 	ble.w	8004f7c <_dtoa_r+0x68c>
 800521e:	2331      	movs	r3, #49	@ 0x31
 8005220:	4656      	mov	r6, sl
 8005222:	f806 3b01 	strb.w	r3, [r6], #1
 8005226:	9b04      	ldr	r3, [sp, #16]
 8005228:	3301      	adds	r3, #1
 800522a:	9304      	str	r3, [sp, #16]
 800522c:	e6aa      	b.n	8004f84 <_dtoa_r+0x694>
 800522e:	9c07      	ldr	r4, [sp, #28]
 8005230:	9704      	str	r7, [sp, #16]
 8005232:	4625      	mov	r5, r4
 8005234:	e7f3      	b.n	800521e <_dtoa_r+0x92e>
 8005236:	9b07      	ldr	r3, [sp, #28]
 8005238:	9308      	str	r3, [sp, #32]
 800523a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8104 	beq.w	800544a <_dtoa_r+0xb5a>
 8005242:	2e00      	cmp	r6, #0
 8005244:	dd05      	ble.n	8005252 <_dtoa_r+0x962>
 8005246:	4629      	mov	r1, r5
 8005248:	4632      	mov	r2, r6
 800524a:	4658      	mov	r0, fp
 800524c:	f000 fc6c 	bl	8005b28 <__lshift>
 8005250:	4605      	mov	r5, r0
 8005252:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005254:	2b00      	cmp	r3, #0
 8005256:	d05a      	beq.n	800530e <_dtoa_r+0xa1e>
 8005258:	4658      	mov	r0, fp
 800525a:	6869      	ldr	r1, [r5, #4]
 800525c:	f000 fa0e 	bl	800567c <_Balloc>
 8005260:	4606      	mov	r6, r0
 8005262:	b928      	cbnz	r0, 8005270 <_dtoa_r+0x980>
 8005264:	4602      	mov	r2, r0
 8005266:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800526a:	4b83      	ldr	r3, [pc, #524]	@ (8005478 <_dtoa_r+0xb88>)
 800526c:	f7ff bb54 	b.w	8004918 <_dtoa_r+0x28>
 8005270:	692a      	ldr	r2, [r5, #16]
 8005272:	f105 010c 	add.w	r1, r5, #12
 8005276:	3202      	adds	r2, #2
 8005278:	0092      	lsls	r2, r2, #2
 800527a:	300c      	adds	r0, #12
 800527c:	f7ff fa9d 	bl	80047ba <memcpy>
 8005280:	2201      	movs	r2, #1
 8005282:	4631      	mov	r1, r6
 8005284:	4658      	mov	r0, fp
 8005286:	f000 fc4f 	bl	8005b28 <__lshift>
 800528a:	462f      	mov	r7, r5
 800528c:	4605      	mov	r5, r0
 800528e:	f10a 0301 	add.w	r3, sl, #1
 8005292:	9307      	str	r3, [sp, #28]
 8005294:	9b08      	ldr	r3, [sp, #32]
 8005296:	4453      	add	r3, sl
 8005298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800529a:	9b02      	ldr	r3, [sp, #8]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80052a2:	9b07      	ldr	r3, [sp, #28]
 80052a4:	4621      	mov	r1, r4
 80052a6:	3b01      	subs	r3, #1
 80052a8:	4648      	mov	r0, r9
 80052aa:	9302      	str	r3, [sp, #8]
 80052ac:	f7ff fa98 	bl	80047e0 <quorem>
 80052b0:	4639      	mov	r1, r7
 80052b2:	9008      	str	r0, [sp, #32]
 80052b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80052b8:	4648      	mov	r0, r9
 80052ba:	f000 fca1 	bl	8005c00 <__mcmp>
 80052be:	462a      	mov	r2, r5
 80052c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80052c2:	4621      	mov	r1, r4
 80052c4:	4658      	mov	r0, fp
 80052c6:	f000 fcb7 	bl	8005c38 <__mdiff>
 80052ca:	68c2      	ldr	r2, [r0, #12]
 80052cc:	4606      	mov	r6, r0
 80052ce:	bb02      	cbnz	r2, 8005312 <_dtoa_r+0xa22>
 80052d0:	4601      	mov	r1, r0
 80052d2:	4648      	mov	r0, r9
 80052d4:	f000 fc94 	bl	8005c00 <__mcmp>
 80052d8:	4602      	mov	r2, r0
 80052da:	4631      	mov	r1, r6
 80052dc:	4658      	mov	r0, fp
 80052de:	920c      	str	r2, [sp, #48]	@ 0x30
 80052e0:	f000 fa0c 	bl	80056fc <_Bfree>
 80052e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80052e8:	9e07      	ldr	r6, [sp, #28]
 80052ea:	ea43 0102 	orr.w	r1, r3, r2
 80052ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052f0:	4319      	orrs	r1, r3
 80052f2:	d110      	bne.n	8005316 <_dtoa_r+0xa26>
 80052f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052f8:	d029      	beq.n	800534e <_dtoa_r+0xa5e>
 80052fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dd02      	ble.n	8005306 <_dtoa_r+0xa16>
 8005300:	9b08      	ldr	r3, [sp, #32]
 8005302:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005306:	9b02      	ldr	r3, [sp, #8]
 8005308:	f883 8000 	strb.w	r8, [r3]
 800530c:	e63b      	b.n	8004f86 <_dtoa_r+0x696>
 800530e:	4628      	mov	r0, r5
 8005310:	e7bb      	b.n	800528a <_dtoa_r+0x99a>
 8005312:	2201      	movs	r2, #1
 8005314:	e7e1      	b.n	80052da <_dtoa_r+0x9ea>
 8005316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005318:	2b00      	cmp	r3, #0
 800531a:	db04      	blt.n	8005326 <_dtoa_r+0xa36>
 800531c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800531e:	430b      	orrs	r3, r1
 8005320:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005322:	430b      	orrs	r3, r1
 8005324:	d120      	bne.n	8005368 <_dtoa_r+0xa78>
 8005326:	2a00      	cmp	r2, #0
 8005328:	dded      	ble.n	8005306 <_dtoa_r+0xa16>
 800532a:	4649      	mov	r1, r9
 800532c:	2201      	movs	r2, #1
 800532e:	4658      	mov	r0, fp
 8005330:	f000 fbfa 	bl	8005b28 <__lshift>
 8005334:	4621      	mov	r1, r4
 8005336:	4681      	mov	r9, r0
 8005338:	f000 fc62 	bl	8005c00 <__mcmp>
 800533c:	2800      	cmp	r0, #0
 800533e:	dc03      	bgt.n	8005348 <_dtoa_r+0xa58>
 8005340:	d1e1      	bne.n	8005306 <_dtoa_r+0xa16>
 8005342:	f018 0f01 	tst.w	r8, #1
 8005346:	d0de      	beq.n	8005306 <_dtoa_r+0xa16>
 8005348:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800534c:	d1d8      	bne.n	8005300 <_dtoa_r+0xa10>
 800534e:	2339      	movs	r3, #57	@ 0x39
 8005350:	9a02      	ldr	r2, [sp, #8]
 8005352:	7013      	strb	r3, [r2, #0]
 8005354:	4633      	mov	r3, r6
 8005356:	461e      	mov	r6, r3
 8005358:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800535c:	3b01      	subs	r3, #1
 800535e:	2a39      	cmp	r2, #57	@ 0x39
 8005360:	d052      	beq.n	8005408 <_dtoa_r+0xb18>
 8005362:	3201      	adds	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	e60e      	b.n	8004f86 <_dtoa_r+0x696>
 8005368:	2a00      	cmp	r2, #0
 800536a:	dd07      	ble.n	800537c <_dtoa_r+0xa8c>
 800536c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005370:	d0ed      	beq.n	800534e <_dtoa_r+0xa5e>
 8005372:	9a02      	ldr	r2, [sp, #8]
 8005374:	f108 0301 	add.w	r3, r8, #1
 8005378:	7013      	strb	r3, [r2, #0]
 800537a:	e604      	b.n	8004f86 <_dtoa_r+0x696>
 800537c:	9b07      	ldr	r3, [sp, #28]
 800537e:	9a07      	ldr	r2, [sp, #28]
 8005380:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005384:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005386:	4293      	cmp	r3, r2
 8005388:	d028      	beq.n	80053dc <_dtoa_r+0xaec>
 800538a:	4649      	mov	r1, r9
 800538c:	2300      	movs	r3, #0
 800538e:	220a      	movs	r2, #10
 8005390:	4658      	mov	r0, fp
 8005392:	f000 f9d5 	bl	8005740 <__multadd>
 8005396:	42af      	cmp	r7, r5
 8005398:	4681      	mov	r9, r0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	f04f 020a 	mov.w	r2, #10
 80053a2:	4639      	mov	r1, r7
 80053a4:	4658      	mov	r0, fp
 80053a6:	d107      	bne.n	80053b8 <_dtoa_r+0xac8>
 80053a8:	f000 f9ca 	bl	8005740 <__multadd>
 80053ac:	4607      	mov	r7, r0
 80053ae:	4605      	mov	r5, r0
 80053b0:	9b07      	ldr	r3, [sp, #28]
 80053b2:	3301      	adds	r3, #1
 80053b4:	9307      	str	r3, [sp, #28]
 80053b6:	e774      	b.n	80052a2 <_dtoa_r+0x9b2>
 80053b8:	f000 f9c2 	bl	8005740 <__multadd>
 80053bc:	4629      	mov	r1, r5
 80053be:	4607      	mov	r7, r0
 80053c0:	2300      	movs	r3, #0
 80053c2:	220a      	movs	r2, #10
 80053c4:	4658      	mov	r0, fp
 80053c6:	f000 f9bb 	bl	8005740 <__multadd>
 80053ca:	4605      	mov	r5, r0
 80053cc:	e7f0      	b.n	80053b0 <_dtoa_r+0xac0>
 80053ce:	9b08      	ldr	r3, [sp, #32]
 80053d0:	2700      	movs	r7, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfcc      	ite	gt
 80053d6:	461e      	movgt	r6, r3
 80053d8:	2601      	movle	r6, #1
 80053da:	4456      	add	r6, sl
 80053dc:	4649      	mov	r1, r9
 80053de:	2201      	movs	r2, #1
 80053e0:	4658      	mov	r0, fp
 80053e2:	f000 fba1 	bl	8005b28 <__lshift>
 80053e6:	4621      	mov	r1, r4
 80053e8:	4681      	mov	r9, r0
 80053ea:	f000 fc09 	bl	8005c00 <__mcmp>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	dcb0      	bgt.n	8005354 <_dtoa_r+0xa64>
 80053f2:	d102      	bne.n	80053fa <_dtoa_r+0xb0a>
 80053f4:	f018 0f01 	tst.w	r8, #1
 80053f8:	d1ac      	bne.n	8005354 <_dtoa_r+0xa64>
 80053fa:	4633      	mov	r3, r6
 80053fc:	461e      	mov	r6, r3
 80053fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005402:	2a30      	cmp	r2, #48	@ 0x30
 8005404:	d0fa      	beq.n	80053fc <_dtoa_r+0xb0c>
 8005406:	e5be      	b.n	8004f86 <_dtoa_r+0x696>
 8005408:	459a      	cmp	sl, r3
 800540a:	d1a4      	bne.n	8005356 <_dtoa_r+0xa66>
 800540c:	9b04      	ldr	r3, [sp, #16]
 800540e:	3301      	adds	r3, #1
 8005410:	9304      	str	r3, [sp, #16]
 8005412:	2331      	movs	r3, #49	@ 0x31
 8005414:	f88a 3000 	strb.w	r3, [sl]
 8005418:	e5b5      	b.n	8004f86 <_dtoa_r+0x696>
 800541a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800541c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800547c <_dtoa_r+0xb8c>
 8005420:	b11b      	cbz	r3, 800542a <_dtoa_r+0xb3a>
 8005422:	f10a 0308 	add.w	r3, sl, #8
 8005426:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4650      	mov	r0, sl
 800542c:	b017      	add	sp, #92	@ 0x5c
 800542e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005432:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005434:	2b01      	cmp	r3, #1
 8005436:	f77f ae3d 	ble.w	80050b4 <_dtoa_r+0x7c4>
 800543a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800543c:	930a      	str	r3, [sp, #40]	@ 0x28
 800543e:	2001      	movs	r0, #1
 8005440:	e65b      	b.n	80050fa <_dtoa_r+0x80a>
 8005442:	9b08      	ldr	r3, [sp, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f77f aed6 	ble.w	80051f6 <_dtoa_r+0x906>
 800544a:	4656      	mov	r6, sl
 800544c:	4621      	mov	r1, r4
 800544e:	4648      	mov	r0, r9
 8005450:	f7ff f9c6 	bl	80047e0 <quorem>
 8005454:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005458:	9b08      	ldr	r3, [sp, #32]
 800545a:	f806 8b01 	strb.w	r8, [r6], #1
 800545e:	eba6 020a 	sub.w	r2, r6, sl
 8005462:	4293      	cmp	r3, r2
 8005464:	ddb3      	ble.n	80053ce <_dtoa_r+0xade>
 8005466:	4649      	mov	r1, r9
 8005468:	2300      	movs	r3, #0
 800546a:	220a      	movs	r2, #10
 800546c:	4658      	mov	r0, fp
 800546e:	f000 f967 	bl	8005740 <__multadd>
 8005472:	4681      	mov	r9, r0
 8005474:	e7ea      	b.n	800544c <_dtoa_r+0xb5c>
 8005476:	bf00      	nop
 8005478:	08007f8f 	.word	0x08007f8f
 800547c:	08007f13 	.word	0x08007f13

08005480 <_free_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4605      	mov	r5, r0
 8005484:	2900      	cmp	r1, #0
 8005486:	d040      	beq.n	800550a <_free_r+0x8a>
 8005488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800548c:	1f0c      	subs	r4, r1, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	bfb8      	it	lt
 8005492:	18e4      	addlt	r4, r4, r3
 8005494:	f000 f8e6 	bl	8005664 <__malloc_lock>
 8005498:	4a1c      	ldr	r2, [pc, #112]	@ (800550c <_free_r+0x8c>)
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	b933      	cbnz	r3, 80054ac <_free_r+0x2c>
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	6014      	str	r4, [r2, #0]
 80054a2:	4628      	mov	r0, r5
 80054a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054a8:	f000 b8e2 	b.w	8005670 <__malloc_unlock>
 80054ac:	42a3      	cmp	r3, r4
 80054ae:	d908      	bls.n	80054c2 <_free_r+0x42>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	1821      	adds	r1, r4, r0
 80054b4:	428b      	cmp	r3, r1
 80054b6:	bf01      	itttt	eq
 80054b8:	6819      	ldreq	r1, [r3, #0]
 80054ba:	685b      	ldreq	r3, [r3, #4]
 80054bc:	1809      	addeq	r1, r1, r0
 80054be:	6021      	streq	r1, [r4, #0]
 80054c0:	e7ed      	b.n	800549e <_free_r+0x1e>
 80054c2:	461a      	mov	r2, r3
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	b10b      	cbz	r3, 80054cc <_free_r+0x4c>
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	d9fa      	bls.n	80054c2 <_free_r+0x42>
 80054cc:	6811      	ldr	r1, [r2, #0]
 80054ce:	1850      	adds	r0, r2, r1
 80054d0:	42a0      	cmp	r0, r4
 80054d2:	d10b      	bne.n	80054ec <_free_r+0x6c>
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	4401      	add	r1, r0
 80054d8:	1850      	adds	r0, r2, r1
 80054da:	4283      	cmp	r3, r0
 80054dc:	6011      	str	r1, [r2, #0]
 80054de:	d1e0      	bne.n	80054a2 <_free_r+0x22>
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4408      	add	r0, r1
 80054e6:	6010      	str	r0, [r2, #0]
 80054e8:	6053      	str	r3, [r2, #4]
 80054ea:	e7da      	b.n	80054a2 <_free_r+0x22>
 80054ec:	d902      	bls.n	80054f4 <_free_r+0x74>
 80054ee:	230c      	movs	r3, #12
 80054f0:	602b      	str	r3, [r5, #0]
 80054f2:	e7d6      	b.n	80054a2 <_free_r+0x22>
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	1821      	adds	r1, r4, r0
 80054f8:	428b      	cmp	r3, r1
 80054fa:	bf01      	itttt	eq
 80054fc:	6819      	ldreq	r1, [r3, #0]
 80054fe:	685b      	ldreq	r3, [r3, #4]
 8005500:	1809      	addeq	r1, r1, r0
 8005502:	6021      	streq	r1, [r4, #0]
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	6054      	str	r4, [r2, #4]
 8005508:	e7cb      	b.n	80054a2 <_free_r+0x22>
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	20000478 	.word	0x20000478

08005510 <malloc>:
 8005510:	4b02      	ldr	r3, [pc, #8]	@ (800551c <malloc+0xc>)
 8005512:	4601      	mov	r1, r0
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	f000 b825 	b.w	8005564 <_malloc_r>
 800551a:	bf00      	nop
 800551c:	20000018 	.word	0x20000018

08005520 <sbrk_aligned>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	4e0f      	ldr	r6, [pc, #60]	@ (8005560 <sbrk_aligned+0x40>)
 8005524:	460c      	mov	r4, r1
 8005526:	6831      	ldr	r1, [r6, #0]
 8005528:	4605      	mov	r5, r0
 800552a:	b911      	cbnz	r1, 8005532 <sbrk_aligned+0x12>
 800552c:	f001 fdf6 	bl	800711c <_sbrk_r>
 8005530:	6030      	str	r0, [r6, #0]
 8005532:	4621      	mov	r1, r4
 8005534:	4628      	mov	r0, r5
 8005536:	f001 fdf1 	bl	800711c <_sbrk_r>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	d103      	bne.n	8005546 <sbrk_aligned+0x26>
 800553e:	f04f 34ff 	mov.w	r4, #4294967295
 8005542:	4620      	mov	r0, r4
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	1cc4      	adds	r4, r0, #3
 8005548:	f024 0403 	bic.w	r4, r4, #3
 800554c:	42a0      	cmp	r0, r4
 800554e:	d0f8      	beq.n	8005542 <sbrk_aligned+0x22>
 8005550:	1a21      	subs	r1, r4, r0
 8005552:	4628      	mov	r0, r5
 8005554:	f001 fde2 	bl	800711c <_sbrk_r>
 8005558:	3001      	adds	r0, #1
 800555a:	d1f2      	bne.n	8005542 <sbrk_aligned+0x22>
 800555c:	e7ef      	b.n	800553e <sbrk_aligned+0x1e>
 800555e:	bf00      	nop
 8005560:	20000474 	.word	0x20000474

08005564 <_malloc_r>:
 8005564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005568:	1ccd      	adds	r5, r1, #3
 800556a:	f025 0503 	bic.w	r5, r5, #3
 800556e:	3508      	adds	r5, #8
 8005570:	2d0c      	cmp	r5, #12
 8005572:	bf38      	it	cc
 8005574:	250c      	movcc	r5, #12
 8005576:	2d00      	cmp	r5, #0
 8005578:	4606      	mov	r6, r0
 800557a:	db01      	blt.n	8005580 <_malloc_r+0x1c>
 800557c:	42a9      	cmp	r1, r5
 800557e:	d904      	bls.n	800558a <_malloc_r+0x26>
 8005580:	230c      	movs	r3, #12
 8005582:	6033      	str	r3, [r6, #0]
 8005584:	2000      	movs	r0, #0
 8005586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800558a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005660 <_malloc_r+0xfc>
 800558e:	f000 f869 	bl	8005664 <__malloc_lock>
 8005592:	f8d8 3000 	ldr.w	r3, [r8]
 8005596:	461c      	mov	r4, r3
 8005598:	bb44      	cbnz	r4, 80055ec <_malloc_r+0x88>
 800559a:	4629      	mov	r1, r5
 800559c:	4630      	mov	r0, r6
 800559e:	f7ff ffbf 	bl	8005520 <sbrk_aligned>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	4604      	mov	r4, r0
 80055a6:	d158      	bne.n	800565a <_malloc_r+0xf6>
 80055a8:	f8d8 4000 	ldr.w	r4, [r8]
 80055ac:	4627      	mov	r7, r4
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	d143      	bne.n	800563a <_malloc_r+0xd6>
 80055b2:	2c00      	cmp	r4, #0
 80055b4:	d04b      	beq.n	800564e <_malloc_r+0xea>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	4639      	mov	r1, r7
 80055ba:	4630      	mov	r0, r6
 80055bc:	eb04 0903 	add.w	r9, r4, r3
 80055c0:	f001 fdac 	bl	800711c <_sbrk_r>
 80055c4:	4581      	cmp	r9, r0
 80055c6:	d142      	bne.n	800564e <_malloc_r+0xea>
 80055c8:	6821      	ldr	r1, [r4, #0]
 80055ca:	4630      	mov	r0, r6
 80055cc:	1a6d      	subs	r5, r5, r1
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7ff ffa6 	bl	8005520 <sbrk_aligned>
 80055d4:	3001      	adds	r0, #1
 80055d6:	d03a      	beq.n	800564e <_malloc_r+0xea>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	442b      	add	r3, r5
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	f8d8 3000 	ldr.w	r3, [r8]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	bb62      	cbnz	r2, 8005640 <_malloc_r+0xdc>
 80055e6:	f8c8 7000 	str.w	r7, [r8]
 80055ea:	e00f      	b.n	800560c <_malloc_r+0xa8>
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	1b52      	subs	r2, r2, r5
 80055f0:	d420      	bmi.n	8005634 <_malloc_r+0xd0>
 80055f2:	2a0b      	cmp	r2, #11
 80055f4:	d917      	bls.n	8005626 <_malloc_r+0xc2>
 80055f6:	1961      	adds	r1, r4, r5
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	6025      	str	r5, [r4, #0]
 80055fc:	bf18      	it	ne
 80055fe:	6059      	strne	r1, [r3, #4]
 8005600:	6863      	ldr	r3, [r4, #4]
 8005602:	bf08      	it	eq
 8005604:	f8c8 1000 	streq.w	r1, [r8]
 8005608:	5162      	str	r2, [r4, r5]
 800560a:	604b      	str	r3, [r1, #4]
 800560c:	4630      	mov	r0, r6
 800560e:	f000 f82f 	bl	8005670 <__malloc_unlock>
 8005612:	f104 000b 	add.w	r0, r4, #11
 8005616:	1d23      	adds	r3, r4, #4
 8005618:	f020 0007 	bic.w	r0, r0, #7
 800561c:	1ac2      	subs	r2, r0, r3
 800561e:	bf1c      	itt	ne
 8005620:	1a1b      	subne	r3, r3, r0
 8005622:	50a3      	strne	r3, [r4, r2]
 8005624:	e7af      	b.n	8005586 <_malloc_r+0x22>
 8005626:	6862      	ldr	r2, [r4, #4]
 8005628:	42a3      	cmp	r3, r4
 800562a:	bf0c      	ite	eq
 800562c:	f8c8 2000 	streq.w	r2, [r8]
 8005630:	605a      	strne	r2, [r3, #4]
 8005632:	e7eb      	b.n	800560c <_malloc_r+0xa8>
 8005634:	4623      	mov	r3, r4
 8005636:	6864      	ldr	r4, [r4, #4]
 8005638:	e7ae      	b.n	8005598 <_malloc_r+0x34>
 800563a:	463c      	mov	r4, r7
 800563c:	687f      	ldr	r7, [r7, #4]
 800563e:	e7b6      	b.n	80055ae <_malloc_r+0x4a>
 8005640:	461a      	mov	r2, r3
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	42a3      	cmp	r3, r4
 8005646:	d1fb      	bne.n	8005640 <_malloc_r+0xdc>
 8005648:	2300      	movs	r3, #0
 800564a:	6053      	str	r3, [r2, #4]
 800564c:	e7de      	b.n	800560c <_malloc_r+0xa8>
 800564e:	230c      	movs	r3, #12
 8005650:	4630      	mov	r0, r6
 8005652:	6033      	str	r3, [r6, #0]
 8005654:	f000 f80c 	bl	8005670 <__malloc_unlock>
 8005658:	e794      	b.n	8005584 <_malloc_r+0x20>
 800565a:	6005      	str	r5, [r0, #0]
 800565c:	e7d6      	b.n	800560c <_malloc_r+0xa8>
 800565e:	bf00      	nop
 8005660:	20000478 	.word	0x20000478

08005664 <__malloc_lock>:
 8005664:	4801      	ldr	r0, [pc, #4]	@ (800566c <__malloc_lock+0x8>)
 8005666:	f7ff b898 	b.w	800479a <__retarget_lock_acquire_recursive>
 800566a:	bf00      	nop
 800566c:	20000470 	.word	0x20000470

08005670 <__malloc_unlock>:
 8005670:	4801      	ldr	r0, [pc, #4]	@ (8005678 <__malloc_unlock+0x8>)
 8005672:	f7ff b893 	b.w	800479c <__retarget_lock_release_recursive>
 8005676:	bf00      	nop
 8005678:	20000470 	.word	0x20000470

0800567c <_Balloc>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	69c6      	ldr	r6, [r0, #28]
 8005680:	4604      	mov	r4, r0
 8005682:	460d      	mov	r5, r1
 8005684:	b976      	cbnz	r6, 80056a4 <_Balloc+0x28>
 8005686:	2010      	movs	r0, #16
 8005688:	f7ff ff42 	bl	8005510 <malloc>
 800568c:	4602      	mov	r2, r0
 800568e:	61e0      	str	r0, [r4, #28]
 8005690:	b920      	cbnz	r0, 800569c <_Balloc+0x20>
 8005692:	216b      	movs	r1, #107	@ 0x6b
 8005694:	4b17      	ldr	r3, [pc, #92]	@ (80056f4 <_Balloc+0x78>)
 8005696:	4818      	ldr	r0, [pc, #96]	@ (80056f8 <_Balloc+0x7c>)
 8005698:	f001 fd56 	bl	8007148 <__assert_func>
 800569c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056a0:	6006      	str	r6, [r0, #0]
 80056a2:	60c6      	str	r6, [r0, #12]
 80056a4:	69e6      	ldr	r6, [r4, #28]
 80056a6:	68f3      	ldr	r3, [r6, #12]
 80056a8:	b183      	cbz	r3, 80056cc <_Balloc+0x50>
 80056aa:	69e3      	ldr	r3, [r4, #28]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056b2:	b9b8      	cbnz	r0, 80056e4 <_Balloc+0x68>
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f605 	lsl.w	r6, r1, r5
 80056ba:	1d72      	adds	r2, r6, #5
 80056bc:	4620      	mov	r0, r4
 80056be:	0092      	lsls	r2, r2, #2
 80056c0:	f001 fd60 	bl	8007184 <_calloc_r>
 80056c4:	b160      	cbz	r0, 80056e0 <_Balloc+0x64>
 80056c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056ca:	e00e      	b.n	80056ea <_Balloc+0x6e>
 80056cc:	2221      	movs	r2, #33	@ 0x21
 80056ce:	2104      	movs	r1, #4
 80056d0:	4620      	mov	r0, r4
 80056d2:	f001 fd57 	bl	8007184 <_calloc_r>
 80056d6:	69e3      	ldr	r3, [r4, #28]
 80056d8:	60f0      	str	r0, [r6, #12]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e4      	bne.n	80056aa <_Balloc+0x2e>
 80056e0:	2000      	movs	r0, #0
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	6802      	ldr	r2, [r0, #0]
 80056e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056ea:	2300      	movs	r3, #0
 80056ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056f0:	e7f7      	b.n	80056e2 <_Balloc+0x66>
 80056f2:	bf00      	nop
 80056f4:	08007f20 	.word	0x08007f20
 80056f8:	08007fa0 	.word	0x08007fa0

080056fc <_Bfree>:
 80056fc:	b570      	push	{r4, r5, r6, lr}
 80056fe:	69c6      	ldr	r6, [r0, #28]
 8005700:	4605      	mov	r5, r0
 8005702:	460c      	mov	r4, r1
 8005704:	b976      	cbnz	r6, 8005724 <_Bfree+0x28>
 8005706:	2010      	movs	r0, #16
 8005708:	f7ff ff02 	bl	8005510 <malloc>
 800570c:	4602      	mov	r2, r0
 800570e:	61e8      	str	r0, [r5, #28]
 8005710:	b920      	cbnz	r0, 800571c <_Bfree+0x20>
 8005712:	218f      	movs	r1, #143	@ 0x8f
 8005714:	4b08      	ldr	r3, [pc, #32]	@ (8005738 <_Bfree+0x3c>)
 8005716:	4809      	ldr	r0, [pc, #36]	@ (800573c <_Bfree+0x40>)
 8005718:	f001 fd16 	bl	8007148 <__assert_func>
 800571c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005720:	6006      	str	r6, [r0, #0]
 8005722:	60c6      	str	r6, [r0, #12]
 8005724:	b13c      	cbz	r4, 8005736 <_Bfree+0x3a>
 8005726:	69eb      	ldr	r3, [r5, #28]
 8005728:	6862      	ldr	r2, [r4, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005730:	6021      	str	r1, [r4, #0]
 8005732:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	08007f20 	.word	0x08007f20
 800573c:	08007fa0 	.word	0x08007fa0

08005740 <__multadd>:
 8005740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005744:	4607      	mov	r7, r0
 8005746:	460c      	mov	r4, r1
 8005748:	461e      	mov	r6, r3
 800574a:	2000      	movs	r0, #0
 800574c:	690d      	ldr	r5, [r1, #16]
 800574e:	f101 0c14 	add.w	ip, r1, #20
 8005752:	f8dc 3000 	ldr.w	r3, [ip]
 8005756:	3001      	adds	r0, #1
 8005758:	b299      	uxth	r1, r3
 800575a:	fb02 6101 	mla	r1, r2, r1, r6
 800575e:	0c1e      	lsrs	r6, r3, #16
 8005760:	0c0b      	lsrs	r3, r1, #16
 8005762:	fb02 3306 	mla	r3, r2, r6, r3
 8005766:	b289      	uxth	r1, r1
 8005768:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800576c:	4285      	cmp	r5, r0
 800576e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005772:	f84c 1b04 	str.w	r1, [ip], #4
 8005776:	dcec      	bgt.n	8005752 <__multadd+0x12>
 8005778:	b30e      	cbz	r6, 80057be <__multadd+0x7e>
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	42ab      	cmp	r3, r5
 800577e:	dc19      	bgt.n	80057b4 <__multadd+0x74>
 8005780:	6861      	ldr	r1, [r4, #4]
 8005782:	4638      	mov	r0, r7
 8005784:	3101      	adds	r1, #1
 8005786:	f7ff ff79 	bl	800567c <_Balloc>
 800578a:	4680      	mov	r8, r0
 800578c:	b928      	cbnz	r0, 800579a <__multadd+0x5a>
 800578e:	4602      	mov	r2, r0
 8005790:	21ba      	movs	r1, #186	@ 0xba
 8005792:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <__multadd+0x84>)
 8005794:	480c      	ldr	r0, [pc, #48]	@ (80057c8 <__multadd+0x88>)
 8005796:	f001 fcd7 	bl	8007148 <__assert_func>
 800579a:	6922      	ldr	r2, [r4, #16]
 800579c:	f104 010c 	add.w	r1, r4, #12
 80057a0:	3202      	adds	r2, #2
 80057a2:	0092      	lsls	r2, r2, #2
 80057a4:	300c      	adds	r0, #12
 80057a6:	f7ff f808 	bl	80047ba <memcpy>
 80057aa:	4621      	mov	r1, r4
 80057ac:	4638      	mov	r0, r7
 80057ae:	f7ff ffa5 	bl	80056fc <_Bfree>
 80057b2:	4644      	mov	r4, r8
 80057b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057b8:	3501      	adds	r5, #1
 80057ba:	615e      	str	r6, [r3, #20]
 80057bc:	6125      	str	r5, [r4, #16]
 80057be:	4620      	mov	r0, r4
 80057c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c4:	08007f8f 	.word	0x08007f8f
 80057c8:	08007fa0 	.word	0x08007fa0

080057cc <__s2b>:
 80057cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d0:	4615      	mov	r5, r2
 80057d2:	2209      	movs	r2, #9
 80057d4:	461f      	mov	r7, r3
 80057d6:	3308      	adds	r3, #8
 80057d8:	460c      	mov	r4, r1
 80057da:	fb93 f3f2 	sdiv	r3, r3, r2
 80057de:	4606      	mov	r6, r0
 80057e0:	2201      	movs	r2, #1
 80057e2:	2100      	movs	r1, #0
 80057e4:	429a      	cmp	r2, r3
 80057e6:	db09      	blt.n	80057fc <__s2b+0x30>
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff ff47 	bl	800567c <_Balloc>
 80057ee:	b940      	cbnz	r0, 8005802 <__s2b+0x36>
 80057f0:	4602      	mov	r2, r0
 80057f2:	21d3      	movs	r1, #211	@ 0xd3
 80057f4:	4b18      	ldr	r3, [pc, #96]	@ (8005858 <__s2b+0x8c>)
 80057f6:	4819      	ldr	r0, [pc, #100]	@ (800585c <__s2b+0x90>)
 80057f8:	f001 fca6 	bl	8007148 <__assert_func>
 80057fc:	0052      	lsls	r2, r2, #1
 80057fe:	3101      	adds	r1, #1
 8005800:	e7f0      	b.n	80057e4 <__s2b+0x18>
 8005802:	9b08      	ldr	r3, [sp, #32]
 8005804:	2d09      	cmp	r5, #9
 8005806:	6143      	str	r3, [r0, #20]
 8005808:	f04f 0301 	mov.w	r3, #1
 800580c:	6103      	str	r3, [r0, #16]
 800580e:	dd16      	ble.n	800583e <__s2b+0x72>
 8005810:	f104 0909 	add.w	r9, r4, #9
 8005814:	46c8      	mov	r8, r9
 8005816:	442c      	add	r4, r5
 8005818:	f818 3b01 	ldrb.w	r3, [r8], #1
 800581c:	4601      	mov	r1, r0
 800581e:	220a      	movs	r2, #10
 8005820:	4630      	mov	r0, r6
 8005822:	3b30      	subs	r3, #48	@ 0x30
 8005824:	f7ff ff8c 	bl	8005740 <__multadd>
 8005828:	45a0      	cmp	r8, r4
 800582a:	d1f5      	bne.n	8005818 <__s2b+0x4c>
 800582c:	f1a5 0408 	sub.w	r4, r5, #8
 8005830:	444c      	add	r4, r9
 8005832:	1b2d      	subs	r5, r5, r4
 8005834:	1963      	adds	r3, r4, r5
 8005836:	42bb      	cmp	r3, r7
 8005838:	db04      	blt.n	8005844 <__s2b+0x78>
 800583a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583e:	2509      	movs	r5, #9
 8005840:	340a      	adds	r4, #10
 8005842:	e7f6      	b.n	8005832 <__s2b+0x66>
 8005844:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005848:	4601      	mov	r1, r0
 800584a:	220a      	movs	r2, #10
 800584c:	4630      	mov	r0, r6
 800584e:	3b30      	subs	r3, #48	@ 0x30
 8005850:	f7ff ff76 	bl	8005740 <__multadd>
 8005854:	e7ee      	b.n	8005834 <__s2b+0x68>
 8005856:	bf00      	nop
 8005858:	08007f8f 	.word	0x08007f8f
 800585c:	08007fa0 	.word	0x08007fa0

08005860 <__hi0bits>:
 8005860:	4603      	mov	r3, r0
 8005862:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005866:	bf3a      	itte	cc
 8005868:	0403      	lslcc	r3, r0, #16
 800586a:	2010      	movcc	r0, #16
 800586c:	2000      	movcs	r0, #0
 800586e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005872:	bf3c      	itt	cc
 8005874:	021b      	lslcc	r3, r3, #8
 8005876:	3008      	addcc	r0, #8
 8005878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800587c:	bf3c      	itt	cc
 800587e:	011b      	lslcc	r3, r3, #4
 8005880:	3004      	addcc	r0, #4
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005886:	bf3c      	itt	cc
 8005888:	009b      	lslcc	r3, r3, #2
 800588a:	3002      	addcc	r0, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	db05      	blt.n	800589c <__hi0bits+0x3c>
 8005890:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005894:	f100 0001 	add.w	r0, r0, #1
 8005898:	bf08      	it	eq
 800589a:	2020      	moveq	r0, #32
 800589c:	4770      	bx	lr

0800589e <__lo0bits>:
 800589e:	6803      	ldr	r3, [r0, #0]
 80058a0:	4602      	mov	r2, r0
 80058a2:	f013 0007 	ands.w	r0, r3, #7
 80058a6:	d00b      	beq.n	80058c0 <__lo0bits+0x22>
 80058a8:	07d9      	lsls	r1, r3, #31
 80058aa:	d421      	bmi.n	80058f0 <__lo0bits+0x52>
 80058ac:	0798      	lsls	r0, r3, #30
 80058ae:	bf49      	itett	mi
 80058b0:	085b      	lsrmi	r3, r3, #1
 80058b2:	089b      	lsrpl	r3, r3, #2
 80058b4:	2001      	movmi	r0, #1
 80058b6:	6013      	strmi	r3, [r2, #0]
 80058b8:	bf5c      	itt	pl
 80058ba:	2002      	movpl	r0, #2
 80058bc:	6013      	strpl	r3, [r2, #0]
 80058be:	4770      	bx	lr
 80058c0:	b299      	uxth	r1, r3
 80058c2:	b909      	cbnz	r1, 80058c8 <__lo0bits+0x2a>
 80058c4:	2010      	movs	r0, #16
 80058c6:	0c1b      	lsrs	r3, r3, #16
 80058c8:	b2d9      	uxtb	r1, r3
 80058ca:	b909      	cbnz	r1, 80058d0 <__lo0bits+0x32>
 80058cc:	3008      	adds	r0, #8
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	0719      	lsls	r1, r3, #28
 80058d2:	bf04      	itt	eq
 80058d4:	091b      	lsreq	r3, r3, #4
 80058d6:	3004      	addeq	r0, #4
 80058d8:	0799      	lsls	r1, r3, #30
 80058da:	bf04      	itt	eq
 80058dc:	089b      	lsreq	r3, r3, #2
 80058de:	3002      	addeq	r0, #2
 80058e0:	07d9      	lsls	r1, r3, #31
 80058e2:	d403      	bmi.n	80058ec <__lo0bits+0x4e>
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	f100 0001 	add.w	r0, r0, #1
 80058ea:	d003      	beq.n	80058f4 <__lo0bits+0x56>
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	4770      	bx	lr
 80058f0:	2000      	movs	r0, #0
 80058f2:	4770      	bx	lr
 80058f4:	2020      	movs	r0, #32
 80058f6:	4770      	bx	lr

080058f8 <__i2b>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	460c      	mov	r4, r1
 80058fc:	2101      	movs	r1, #1
 80058fe:	f7ff febd 	bl	800567c <_Balloc>
 8005902:	4602      	mov	r2, r0
 8005904:	b928      	cbnz	r0, 8005912 <__i2b+0x1a>
 8005906:	f240 1145 	movw	r1, #325	@ 0x145
 800590a:	4b04      	ldr	r3, [pc, #16]	@ (800591c <__i2b+0x24>)
 800590c:	4804      	ldr	r0, [pc, #16]	@ (8005920 <__i2b+0x28>)
 800590e:	f001 fc1b 	bl	8007148 <__assert_func>
 8005912:	2301      	movs	r3, #1
 8005914:	6144      	str	r4, [r0, #20]
 8005916:	6103      	str	r3, [r0, #16]
 8005918:	bd10      	pop	{r4, pc}
 800591a:	bf00      	nop
 800591c:	08007f8f 	.word	0x08007f8f
 8005920:	08007fa0 	.word	0x08007fa0

08005924 <__multiply>:
 8005924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	4614      	mov	r4, r2
 800592a:	690a      	ldr	r2, [r1, #16]
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	460f      	mov	r7, r1
 8005930:	429a      	cmp	r2, r3
 8005932:	bfa2      	ittt	ge
 8005934:	4623      	movge	r3, r4
 8005936:	460c      	movge	r4, r1
 8005938:	461f      	movge	r7, r3
 800593a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800593e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005942:	68a3      	ldr	r3, [r4, #8]
 8005944:	6861      	ldr	r1, [r4, #4]
 8005946:	eb0a 0609 	add.w	r6, sl, r9
 800594a:	42b3      	cmp	r3, r6
 800594c:	b085      	sub	sp, #20
 800594e:	bfb8      	it	lt
 8005950:	3101      	addlt	r1, #1
 8005952:	f7ff fe93 	bl	800567c <_Balloc>
 8005956:	b930      	cbnz	r0, 8005966 <__multiply+0x42>
 8005958:	4602      	mov	r2, r0
 800595a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800595e:	4b43      	ldr	r3, [pc, #268]	@ (8005a6c <__multiply+0x148>)
 8005960:	4843      	ldr	r0, [pc, #268]	@ (8005a70 <__multiply+0x14c>)
 8005962:	f001 fbf1 	bl	8007148 <__assert_func>
 8005966:	f100 0514 	add.w	r5, r0, #20
 800596a:	462b      	mov	r3, r5
 800596c:	2200      	movs	r2, #0
 800596e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005972:	4543      	cmp	r3, r8
 8005974:	d321      	bcc.n	80059ba <__multiply+0x96>
 8005976:	f107 0114 	add.w	r1, r7, #20
 800597a:	f104 0214 	add.w	r2, r4, #20
 800597e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005982:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005986:	9302      	str	r3, [sp, #8]
 8005988:	1b13      	subs	r3, r2, r4
 800598a:	3b15      	subs	r3, #21
 800598c:	f023 0303 	bic.w	r3, r3, #3
 8005990:	3304      	adds	r3, #4
 8005992:	f104 0715 	add.w	r7, r4, #21
 8005996:	42ba      	cmp	r2, r7
 8005998:	bf38      	it	cc
 800599a:	2304      	movcc	r3, #4
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	9b02      	ldr	r3, [sp, #8]
 80059a0:	9103      	str	r1, [sp, #12]
 80059a2:	428b      	cmp	r3, r1
 80059a4:	d80c      	bhi.n	80059c0 <__multiply+0x9c>
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	dd03      	ble.n	80059b2 <__multiply+0x8e>
 80059aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d05a      	beq.n	8005a68 <__multiply+0x144>
 80059b2:	6106      	str	r6, [r0, #16]
 80059b4:	b005      	add	sp, #20
 80059b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ba:	f843 2b04 	str.w	r2, [r3], #4
 80059be:	e7d8      	b.n	8005972 <__multiply+0x4e>
 80059c0:	f8b1 a000 	ldrh.w	sl, [r1]
 80059c4:	f1ba 0f00 	cmp.w	sl, #0
 80059c8:	d023      	beq.n	8005a12 <__multiply+0xee>
 80059ca:	46a9      	mov	r9, r5
 80059cc:	f04f 0c00 	mov.w	ip, #0
 80059d0:	f104 0e14 	add.w	lr, r4, #20
 80059d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80059d8:	f8d9 3000 	ldr.w	r3, [r9]
 80059dc:	fa1f fb87 	uxth.w	fp, r7
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	fb0a 330b 	mla	r3, sl, fp, r3
 80059e6:	4463      	add	r3, ip
 80059e8:	f8d9 c000 	ldr.w	ip, [r9]
 80059ec:	0c3f      	lsrs	r7, r7, #16
 80059ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80059f2:	fb0a c707 	mla	r7, sl, r7, ip
 80059f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a00:	4572      	cmp	r2, lr
 8005a02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a06:	f849 3b04 	str.w	r3, [r9], #4
 8005a0a:	d8e3      	bhi.n	80059d4 <__multiply+0xb0>
 8005a0c:	9b01      	ldr	r3, [sp, #4]
 8005a0e:	f845 c003 	str.w	ip, [r5, r3]
 8005a12:	9b03      	ldr	r3, [sp, #12]
 8005a14:	3104      	adds	r1, #4
 8005a16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005a1a:	f1b9 0f00 	cmp.w	r9, #0
 8005a1e:	d021      	beq.n	8005a64 <__multiply+0x140>
 8005a20:	46ae      	mov	lr, r5
 8005a22:	f04f 0a00 	mov.w	sl, #0
 8005a26:	682b      	ldr	r3, [r5, #0]
 8005a28:	f104 0c14 	add.w	ip, r4, #20
 8005a2c:	f8bc b000 	ldrh.w	fp, [ip]
 8005a30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	fb09 770b 	mla	r7, r9, fp, r7
 8005a3a:	4457      	add	r7, sl
 8005a3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a40:	f84e 3b04 	str.w	r3, [lr], #4
 8005a44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a4c:	f8be 3000 	ldrh.w	r3, [lr]
 8005a50:	4562      	cmp	r2, ip
 8005a52:	fb09 330a 	mla	r3, r9, sl, r3
 8005a56:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005a5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a5e:	d8e5      	bhi.n	8005a2c <__multiply+0x108>
 8005a60:	9f01      	ldr	r7, [sp, #4]
 8005a62:	51eb      	str	r3, [r5, r7]
 8005a64:	3504      	adds	r5, #4
 8005a66:	e79a      	b.n	800599e <__multiply+0x7a>
 8005a68:	3e01      	subs	r6, #1
 8005a6a:	e79c      	b.n	80059a6 <__multiply+0x82>
 8005a6c:	08007f8f 	.word	0x08007f8f
 8005a70:	08007fa0 	.word	0x08007fa0

08005a74 <__pow5mult>:
 8005a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a78:	4615      	mov	r5, r2
 8005a7a:	f012 0203 	ands.w	r2, r2, #3
 8005a7e:	4607      	mov	r7, r0
 8005a80:	460e      	mov	r6, r1
 8005a82:	d007      	beq.n	8005a94 <__pow5mult+0x20>
 8005a84:	4c25      	ldr	r4, [pc, #148]	@ (8005b1c <__pow5mult+0xa8>)
 8005a86:	3a01      	subs	r2, #1
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a8e:	f7ff fe57 	bl	8005740 <__multadd>
 8005a92:	4606      	mov	r6, r0
 8005a94:	10ad      	asrs	r5, r5, #2
 8005a96:	d03d      	beq.n	8005b14 <__pow5mult+0xa0>
 8005a98:	69fc      	ldr	r4, [r7, #28]
 8005a9a:	b97c      	cbnz	r4, 8005abc <__pow5mult+0x48>
 8005a9c:	2010      	movs	r0, #16
 8005a9e:	f7ff fd37 	bl	8005510 <malloc>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	61f8      	str	r0, [r7, #28]
 8005aa6:	b928      	cbnz	r0, 8005ab4 <__pow5mult+0x40>
 8005aa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005aac:	4b1c      	ldr	r3, [pc, #112]	@ (8005b20 <__pow5mult+0xac>)
 8005aae:	481d      	ldr	r0, [pc, #116]	@ (8005b24 <__pow5mult+0xb0>)
 8005ab0:	f001 fb4a 	bl	8007148 <__assert_func>
 8005ab4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ab8:	6004      	str	r4, [r0, #0]
 8005aba:	60c4      	str	r4, [r0, #12]
 8005abc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ac4:	b94c      	cbnz	r4, 8005ada <__pow5mult+0x66>
 8005ac6:	f240 2171 	movw	r1, #625	@ 0x271
 8005aca:	4638      	mov	r0, r7
 8005acc:	f7ff ff14 	bl	80058f8 <__i2b>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ad8:	6003      	str	r3, [r0, #0]
 8005ada:	f04f 0900 	mov.w	r9, #0
 8005ade:	07eb      	lsls	r3, r5, #31
 8005ae0:	d50a      	bpl.n	8005af8 <__pow5mult+0x84>
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	f7ff ff1c 	bl	8005924 <__multiply>
 8005aec:	4680      	mov	r8, r0
 8005aee:	4631      	mov	r1, r6
 8005af0:	4638      	mov	r0, r7
 8005af2:	f7ff fe03 	bl	80056fc <_Bfree>
 8005af6:	4646      	mov	r6, r8
 8005af8:	106d      	asrs	r5, r5, #1
 8005afa:	d00b      	beq.n	8005b14 <__pow5mult+0xa0>
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	b938      	cbnz	r0, 8005b10 <__pow5mult+0x9c>
 8005b00:	4622      	mov	r2, r4
 8005b02:	4621      	mov	r1, r4
 8005b04:	4638      	mov	r0, r7
 8005b06:	f7ff ff0d 	bl	8005924 <__multiply>
 8005b0a:	6020      	str	r0, [r4, #0]
 8005b0c:	f8c0 9000 	str.w	r9, [r0]
 8005b10:	4604      	mov	r4, r0
 8005b12:	e7e4      	b.n	8005ade <__pow5mult+0x6a>
 8005b14:	4630      	mov	r0, r6
 8005b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1a:	bf00      	nop
 8005b1c:	08007ffc 	.word	0x08007ffc
 8005b20:	08007f20 	.word	0x08007f20
 8005b24:	08007fa0 	.word	0x08007fa0

08005b28 <__lshift>:
 8005b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	4607      	mov	r7, r0
 8005b30:	4691      	mov	r9, r2
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	6849      	ldr	r1, [r1, #4]
 8005b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b3a:	68a3      	ldr	r3, [r4, #8]
 8005b3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b40:	f108 0601 	add.w	r6, r8, #1
 8005b44:	42b3      	cmp	r3, r6
 8005b46:	db0b      	blt.n	8005b60 <__lshift+0x38>
 8005b48:	4638      	mov	r0, r7
 8005b4a:	f7ff fd97 	bl	800567c <_Balloc>
 8005b4e:	4605      	mov	r5, r0
 8005b50:	b948      	cbnz	r0, 8005b66 <__lshift+0x3e>
 8005b52:	4602      	mov	r2, r0
 8005b54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005b58:	4b27      	ldr	r3, [pc, #156]	@ (8005bf8 <__lshift+0xd0>)
 8005b5a:	4828      	ldr	r0, [pc, #160]	@ (8005bfc <__lshift+0xd4>)
 8005b5c:	f001 faf4 	bl	8007148 <__assert_func>
 8005b60:	3101      	adds	r1, #1
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	e7ee      	b.n	8005b44 <__lshift+0x1c>
 8005b66:	2300      	movs	r3, #0
 8005b68:	f100 0114 	add.w	r1, r0, #20
 8005b6c:	f100 0210 	add.w	r2, r0, #16
 8005b70:	4618      	mov	r0, r3
 8005b72:	4553      	cmp	r3, sl
 8005b74:	db33      	blt.n	8005bde <__lshift+0xb6>
 8005b76:	6920      	ldr	r0, [r4, #16]
 8005b78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b7c:	f104 0314 	add.w	r3, r4, #20
 8005b80:	f019 091f 	ands.w	r9, r9, #31
 8005b84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b8c:	d02b      	beq.n	8005be6 <__lshift+0xbe>
 8005b8e:	468a      	mov	sl, r1
 8005b90:	2200      	movs	r2, #0
 8005b92:	f1c9 0e20 	rsb	lr, r9, #32
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	fa00 f009 	lsl.w	r0, r0, r9
 8005b9c:	4310      	orrs	r0, r2
 8005b9e:	f84a 0b04 	str.w	r0, [sl], #4
 8005ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba6:	459c      	cmp	ip, r3
 8005ba8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005bac:	d8f3      	bhi.n	8005b96 <__lshift+0x6e>
 8005bae:	ebac 0304 	sub.w	r3, ip, r4
 8005bb2:	3b15      	subs	r3, #21
 8005bb4:	f023 0303 	bic.w	r3, r3, #3
 8005bb8:	3304      	adds	r3, #4
 8005bba:	f104 0015 	add.w	r0, r4, #21
 8005bbe:	4584      	cmp	ip, r0
 8005bc0:	bf38      	it	cc
 8005bc2:	2304      	movcc	r3, #4
 8005bc4:	50ca      	str	r2, [r1, r3]
 8005bc6:	b10a      	cbz	r2, 8005bcc <__lshift+0xa4>
 8005bc8:	f108 0602 	add.w	r6, r8, #2
 8005bcc:	3e01      	subs	r6, #1
 8005bce:	4638      	mov	r0, r7
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	612e      	str	r6, [r5, #16]
 8005bd4:	f7ff fd92 	bl	80056fc <_Bfree>
 8005bd8:	4628      	mov	r0, r5
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bde:	f842 0f04 	str.w	r0, [r2, #4]!
 8005be2:	3301      	adds	r3, #1
 8005be4:	e7c5      	b.n	8005b72 <__lshift+0x4a>
 8005be6:	3904      	subs	r1, #4
 8005be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bec:	459c      	cmp	ip, r3
 8005bee:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bf2:	d8f9      	bhi.n	8005be8 <__lshift+0xc0>
 8005bf4:	e7ea      	b.n	8005bcc <__lshift+0xa4>
 8005bf6:	bf00      	nop
 8005bf8:	08007f8f 	.word	0x08007f8f
 8005bfc:	08007fa0 	.word	0x08007fa0

08005c00 <__mcmp>:
 8005c00:	4603      	mov	r3, r0
 8005c02:	690a      	ldr	r2, [r1, #16]
 8005c04:	6900      	ldr	r0, [r0, #16]
 8005c06:	b530      	push	{r4, r5, lr}
 8005c08:	1a80      	subs	r0, r0, r2
 8005c0a:	d10e      	bne.n	8005c2a <__mcmp+0x2a>
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	3114      	adds	r1, #20
 8005c10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c20:	4295      	cmp	r5, r2
 8005c22:	d003      	beq.n	8005c2c <__mcmp+0x2c>
 8005c24:	d205      	bcs.n	8005c32 <__mcmp+0x32>
 8005c26:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2a:	bd30      	pop	{r4, r5, pc}
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d3f3      	bcc.n	8005c18 <__mcmp+0x18>
 8005c30:	e7fb      	b.n	8005c2a <__mcmp+0x2a>
 8005c32:	2001      	movs	r0, #1
 8005c34:	e7f9      	b.n	8005c2a <__mcmp+0x2a>
	...

08005c38 <__mdiff>:
 8005c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	4689      	mov	r9, r1
 8005c3e:	4606      	mov	r6, r0
 8005c40:	4611      	mov	r1, r2
 8005c42:	4648      	mov	r0, r9
 8005c44:	4614      	mov	r4, r2
 8005c46:	f7ff ffdb 	bl	8005c00 <__mcmp>
 8005c4a:	1e05      	subs	r5, r0, #0
 8005c4c:	d112      	bne.n	8005c74 <__mdiff+0x3c>
 8005c4e:	4629      	mov	r1, r5
 8005c50:	4630      	mov	r0, r6
 8005c52:	f7ff fd13 	bl	800567c <_Balloc>
 8005c56:	4602      	mov	r2, r0
 8005c58:	b928      	cbnz	r0, 8005c66 <__mdiff+0x2e>
 8005c5a:	f240 2137 	movw	r1, #567	@ 0x237
 8005c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d58 <__mdiff+0x120>)
 8005c60:	483e      	ldr	r0, [pc, #248]	@ (8005d5c <__mdiff+0x124>)
 8005c62:	f001 fa71 	bl	8007148 <__assert_func>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	b003      	add	sp, #12
 8005c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c74:	bfbc      	itt	lt
 8005c76:	464b      	movlt	r3, r9
 8005c78:	46a1      	movlt	r9, r4
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c80:	bfba      	itte	lt
 8005c82:	461c      	movlt	r4, r3
 8005c84:	2501      	movlt	r5, #1
 8005c86:	2500      	movge	r5, #0
 8005c88:	f7ff fcf8 	bl	800567c <_Balloc>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	b918      	cbnz	r0, 8005c98 <__mdiff+0x60>
 8005c90:	f240 2145 	movw	r1, #581	@ 0x245
 8005c94:	4b30      	ldr	r3, [pc, #192]	@ (8005d58 <__mdiff+0x120>)
 8005c96:	e7e3      	b.n	8005c60 <__mdiff+0x28>
 8005c98:	f100 0b14 	add.w	fp, r0, #20
 8005c9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ca0:	f109 0310 	add.w	r3, r9, #16
 8005ca4:	60c5      	str	r5, [r0, #12]
 8005ca6:	f04f 0c00 	mov.w	ip, #0
 8005caa:	f109 0514 	add.w	r5, r9, #20
 8005cae:	46d9      	mov	r9, fp
 8005cb0:	6926      	ldr	r6, [r4, #16]
 8005cb2:	f104 0e14 	add.w	lr, r4, #20
 8005cb6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005cba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005cbe:	9301      	str	r3, [sp, #4]
 8005cc0:	9b01      	ldr	r3, [sp, #4]
 8005cc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005cc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005cca:	b281      	uxth	r1, r0
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	fa1f f38a 	uxth.w	r3, sl
 8005cd2:	1a5b      	subs	r3, r3, r1
 8005cd4:	0c00      	lsrs	r0, r0, #16
 8005cd6:	4463      	add	r3, ip
 8005cd8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005cdc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ce6:	4576      	cmp	r6, lr
 8005ce8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cec:	f849 3b04 	str.w	r3, [r9], #4
 8005cf0:	d8e6      	bhi.n	8005cc0 <__mdiff+0x88>
 8005cf2:	1b33      	subs	r3, r6, r4
 8005cf4:	3b15      	subs	r3, #21
 8005cf6:	f023 0303 	bic.w	r3, r3, #3
 8005cfa:	3415      	adds	r4, #21
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	42a6      	cmp	r6, r4
 8005d00:	bf38      	it	cc
 8005d02:	2304      	movcc	r3, #4
 8005d04:	441d      	add	r5, r3
 8005d06:	445b      	add	r3, fp
 8005d08:	461e      	mov	r6, r3
 8005d0a:	462c      	mov	r4, r5
 8005d0c:	4544      	cmp	r4, r8
 8005d0e:	d30e      	bcc.n	8005d2e <__mdiff+0xf6>
 8005d10:	f108 0103 	add.w	r1, r8, #3
 8005d14:	1b49      	subs	r1, r1, r5
 8005d16:	f021 0103 	bic.w	r1, r1, #3
 8005d1a:	3d03      	subs	r5, #3
 8005d1c:	45a8      	cmp	r8, r5
 8005d1e:	bf38      	it	cc
 8005d20:	2100      	movcc	r1, #0
 8005d22:	440b      	add	r3, r1
 8005d24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d28:	b199      	cbz	r1, 8005d52 <__mdiff+0x11a>
 8005d2a:	6117      	str	r7, [r2, #16]
 8005d2c:	e79e      	b.n	8005c6c <__mdiff+0x34>
 8005d2e:	46e6      	mov	lr, ip
 8005d30:	f854 1b04 	ldr.w	r1, [r4], #4
 8005d34:	fa1f fc81 	uxth.w	ip, r1
 8005d38:	44f4      	add	ip, lr
 8005d3a:	0c08      	lsrs	r0, r1, #16
 8005d3c:	4471      	add	r1, lr
 8005d3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005d42:	b289      	uxth	r1, r1
 8005d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005d48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d4c:	f846 1b04 	str.w	r1, [r6], #4
 8005d50:	e7dc      	b.n	8005d0c <__mdiff+0xd4>
 8005d52:	3f01      	subs	r7, #1
 8005d54:	e7e6      	b.n	8005d24 <__mdiff+0xec>
 8005d56:	bf00      	nop
 8005d58:	08007f8f 	.word	0x08007f8f
 8005d5c:	08007fa0 	.word	0x08007fa0

08005d60 <__ulp>:
 8005d60:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <__ulp+0x3c>)
 8005d62:	400b      	ands	r3, r1
 8005d64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dc08      	bgt.n	8005d7e <__ulp+0x1e>
 8005d6c:	425b      	negs	r3, r3
 8005d6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005d72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005d76:	da04      	bge.n	8005d82 <__ulp+0x22>
 8005d78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005d7c:	4113      	asrs	r3, r2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	e008      	b.n	8005d94 <__ulp+0x34>
 8005d82:	f1a2 0314 	sub.w	r3, r2, #20
 8005d86:	2b1e      	cmp	r3, #30
 8005d88:	bfd6      	itet	le
 8005d8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005d8e:	2201      	movgt	r2, #1
 8005d90:	40da      	lsrle	r2, r3
 8005d92:	2300      	movs	r3, #0
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	7ff00000 	.word	0x7ff00000

08005da0 <__b2d>:
 8005da0:	6902      	ldr	r2, [r0, #16]
 8005da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da4:	f100 0614 	add.w	r6, r0, #20
 8005da8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005dac:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005db0:	4f1e      	ldr	r7, [pc, #120]	@ (8005e2c <__b2d+0x8c>)
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff fd54 	bl	8005860 <__hi0bits>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f1c0 0020 	rsb	r0, r0, #32
 8005dbe:	2b0a      	cmp	r3, #10
 8005dc0:	f1a2 0504 	sub.w	r5, r2, #4
 8005dc4:	6008      	str	r0, [r1, #0]
 8005dc6:	dc12      	bgt.n	8005dee <__b2d+0x4e>
 8005dc8:	42ae      	cmp	r6, r5
 8005dca:	bf2c      	ite	cs
 8005dcc:	2200      	movcs	r2, #0
 8005dce:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005dd2:	f1c3 0c0b 	rsb	ip, r3, #11
 8005dd6:	3315      	adds	r3, #21
 8005dd8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005ddc:	fa04 f303 	lsl.w	r3, r4, r3
 8005de0:	fa22 f20c 	lsr.w	r2, r2, ip
 8005de4:	ea4e 0107 	orr.w	r1, lr, r7
 8005de8:	431a      	orrs	r2, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dee:	42ae      	cmp	r6, r5
 8005df0:	bf36      	itet	cc
 8005df2:	f1a2 0508 	subcc.w	r5, r2, #8
 8005df6:	2200      	movcs	r2, #0
 8005df8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005dfc:	3b0b      	subs	r3, #11
 8005dfe:	d012      	beq.n	8005e26 <__b2d+0x86>
 8005e00:	f1c3 0720 	rsb	r7, r3, #32
 8005e04:	fa22 f107 	lsr.w	r1, r2, r7
 8005e08:	409c      	lsls	r4, r3
 8005e0a:	430c      	orrs	r4, r1
 8005e0c:	42b5      	cmp	r5, r6
 8005e0e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005e12:	bf94      	ite	ls
 8005e14:	2400      	movls	r4, #0
 8005e16:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	40fc      	lsrs	r4, r7
 8005e1e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005e22:	4322      	orrs	r2, r4
 8005e24:	e7e1      	b.n	8005dea <__b2d+0x4a>
 8005e26:	ea44 0107 	orr.w	r1, r4, r7
 8005e2a:	e7de      	b.n	8005dea <__b2d+0x4a>
 8005e2c:	3ff00000 	.word	0x3ff00000

08005e30 <__d2b>:
 8005e30:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005e34:	2101      	movs	r1, #1
 8005e36:	4690      	mov	r8, r2
 8005e38:	4699      	mov	r9, r3
 8005e3a:	9e08      	ldr	r6, [sp, #32]
 8005e3c:	f7ff fc1e 	bl	800567c <_Balloc>
 8005e40:	4604      	mov	r4, r0
 8005e42:	b930      	cbnz	r0, 8005e52 <__d2b+0x22>
 8005e44:	4602      	mov	r2, r0
 8005e46:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e4a:	4b23      	ldr	r3, [pc, #140]	@ (8005ed8 <__d2b+0xa8>)
 8005e4c:	4823      	ldr	r0, [pc, #140]	@ (8005edc <__d2b+0xac>)
 8005e4e:	f001 f97b 	bl	8007148 <__assert_func>
 8005e52:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e5a:	b10d      	cbz	r5, 8005e60 <__d2b+0x30>
 8005e5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	f1b8 0300 	subs.w	r3, r8, #0
 8005e66:	d024      	beq.n	8005eb2 <__d2b+0x82>
 8005e68:	4668      	mov	r0, sp
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	f7ff fd17 	bl	800589e <__lo0bits>
 8005e70:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e74:	b1d8      	cbz	r0, 8005eae <__d2b+0x7e>
 8005e76:	f1c0 0320 	rsb	r3, r0, #32
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	40c2      	lsrs	r2, r0
 8005e82:	6163      	str	r3, [r4, #20]
 8005e84:	9201      	str	r2, [sp, #4]
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2201      	moveq	r2, #1
 8005e8e:	2202      	movne	r2, #2
 8005e90:	61a3      	str	r3, [r4, #24]
 8005e92:	6122      	str	r2, [r4, #16]
 8005e94:	b1ad      	cbz	r5, 8005ec2 <__d2b+0x92>
 8005e96:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005e9a:	4405      	add	r5, r0
 8005e9c:	6035      	str	r5, [r6, #0]
 8005e9e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea4:	6018      	str	r0, [r3, #0]
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	b002      	add	sp, #8
 8005eaa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005eae:	6161      	str	r1, [r4, #20]
 8005eb0:	e7e9      	b.n	8005e86 <__d2b+0x56>
 8005eb2:	a801      	add	r0, sp, #4
 8005eb4:	f7ff fcf3 	bl	800589e <__lo0bits>
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	6163      	str	r3, [r4, #20]
 8005ebe:	3020      	adds	r0, #32
 8005ec0:	e7e7      	b.n	8005e92 <__d2b+0x62>
 8005ec2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ec6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005eca:	6030      	str	r0, [r6, #0]
 8005ecc:	6918      	ldr	r0, [r3, #16]
 8005ece:	f7ff fcc7 	bl	8005860 <__hi0bits>
 8005ed2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ed6:	e7e4      	b.n	8005ea2 <__d2b+0x72>
 8005ed8:	08007f8f 	.word	0x08007f8f
 8005edc:	08007fa0 	.word	0x08007fa0

08005ee0 <__ratio>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	e9cd 1000 	strd	r1, r0, [sp]
 8005eea:	a902      	add	r1, sp, #8
 8005eec:	f7ff ff58 	bl	8005da0 <__b2d>
 8005ef0:	468b      	mov	fp, r1
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	9800      	ldr	r0, [sp, #0]
 8005ef8:	a903      	add	r1, sp, #12
 8005efa:	f7ff ff51 	bl	8005da0 <__b2d>
 8005efe:	460d      	mov	r5, r1
 8005f00:	9b01      	ldr	r3, [sp, #4]
 8005f02:	4689      	mov	r9, r1
 8005f04:	6919      	ldr	r1, [r3, #16]
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	4604      	mov	r4, r0
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	1ac9      	subs	r1, r1, r3
 8005f10:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bfcd      	iteet	gt
 8005f1e:	463a      	movgt	r2, r7
 8005f20:	462a      	movle	r2, r5
 8005f22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005f26:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005f2a:	bfd8      	it	le
 8005f2c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005f30:	464b      	mov	r3, r9
 8005f32:	4622      	mov	r2, r4
 8005f34:	4659      	mov	r1, fp
 8005f36:	f7fa fbf9 	bl	800072c <__aeabi_ddiv>
 8005f3a:	b005      	add	sp, #20
 8005f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f40 <__copybits>:
 8005f40:	3901      	subs	r1, #1
 8005f42:	b570      	push	{r4, r5, r6, lr}
 8005f44:	1149      	asrs	r1, r1, #5
 8005f46:	6914      	ldr	r4, [r2, #16]
 8005f48:	3101      	adds	r1, #1
 8005f4a:	f102 0314 	add.w	r3, r2, #20
 8005f4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005f52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005f56:	1f05      	subs	r5, r0, #4
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d30c      	bcc.n	8005f76 <__copybits+0x36>
 8005f5c:	1aa3      	subs	r3, r4, r2
 8005f5e:	3b11      	subs	r3, #17
 8005f60:	f023 0303 	bic.w	r3, r3, #3
 8005f64:	3211      	adds	r2, #17
 8005f66:	42a2      	cmp	r2, r4
 8005f68:	bf88      	it	hi
 8005f6a:	2300      	movhi	r3, #0
 8005f6c:	4418      	add	r0, r3
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4288      	cmp	r0, r1
 8005f72:	d305      	bcc.n	8005f80 <__copybits+0x40>
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	f853 6b04 	ldr.w	r6, [r3], #4
 8005f7a:	f845 6f04 	str.w	r6, [r5, #4]!
 8005f7e:	e7eb      	b.n	8005f58 <__copybits+0x18>
 8005f80:	f840 3b04 	str.w	r3, [r0], #4
 8005f84:	e7f4      	b.n	8005f70 <__copybits+0x30>

08005f86 <__any_on>:
 8005f86:	f100 0214 	add.w	r2, r0, #20
 8005f8a:	6900      	ldr	r0, [r0, #16]
 8005f8c:	114b      	asrs	r3, r1, #5
 8005f8e:	4298      	cmp	r0, r3
 8005f90:	b510      	push	{r4, lr}
 8005f92:	db11      	blt.n	8005fb8 <__any_on+0x32>
 8005f94:	dd0a      	ble.n	8005fac <__any_on+0x26>
 8005f96:	f011 011f 	ands.w	r1, r1, #31
 8005f9a:	d007      	beq.n	8005fac <__any_on+0x26>
 8005f9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005fa0:	fa24 f001 	lsr.w	r0, r4, r1
 8005fa4:	fa00 f101 	lsl.w	r1, r0, r1
 8005fa8:	428c      	cmp	r4, r1
 8005faa:	d10b      	bne.n	8005fc4 <__any_on+0x3e>
 8005fac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d803      	bhi.n	8005fbc <__any_on+0x36>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	bd10      	pop	{r4, pc}
 8005fb8:	4603      	mov	r3, r0
 8005fba:	e7f7      	b.n	8005fac <__any_on+0x26>
 8005fbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	d0f5      	beq.n	8005fb0 <__any_on+0x2a>
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	e7f6      	b.n	8005fb6 <__any_on+0x30>

08005fc8 <sulp>:
 8005fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fcc:	460f      	mov	r7, r1
 8005fce:	4690      	mov	r8, r2
 8005fd0:	f7ff fec6 	bl	8005d60 <__ulp>
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	f1b8 0f00 	cmp.w	r8, #0
 8005fdc:	d011      	beq.n	8006002 <sulp+0x3a>
 8005fde:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005fe2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dd0b      	ble.n	8006002 <sulp+0x3a>
 8005fea:	2400      	movs	r4, #0
 8005fec:	051b      	lsls	r3, r3, #20
 8005fee:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005ff2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	f7fa fa6d 	bl	80004d8 <__aeabi_dmul>
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600a:	0000      	movs	r0, r0
 800600c:	0000      	movs	r0, r0
	...

08006010 <_strtod_l>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	b09f      	sub	sp, #124	@ 0x7c
 8006016:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006018:	2200      	movs	r2, #0
 800601a:	460c      	mov	r4, r1
 800601c:	921a      	str	r2, [sp, #104]	@ 0x68
 800601e:	f04f 0a00 	mov.w	sl, #0
 8006022:	f04f 0b00 	mov.w	fp, #0
 8006026:	460a      	mov	r2, r1
 8006028:	9005      	str	r0, [sp, #20]
 800602a:	9219      	str	r2, [sp, #100]	@ 0x64
 800602c:	7811      	ldrb	r1, [r2, #0]
 800602e:	292b      	cmp	r1, #43	@ 0x2b
 8006030:	d048      	beq.n	80060c4 <_strtod_l+0xb4>
 8006032:	d836      	bhi.n	80060a2 <_strtod_l+0x92>
 8006034:	290d      	cmp	r1, #13
 8006036:	d830      	bhi.n	800609a <_strtod_l+0x8a>
 8006038:	2908      	cmp	r1, #8
 800603a:	d830      	bhi.n	800609e <_strtod_l+0x8e>
 800603c:	2900      	cmp	r1, #0
 800603e:	d039      	beq.n	80060b4 <_strtod_l+0xa4>
 8006040:	2200      	movs	r2, #0
 8006042:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006044:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006046:	782a      	ldrb	r2, [r5, #0]
 8006048:	2a30      	cmp	r2, #48	@ 0x30
 800604a:	f040 80b1 	bne.w	80061b0 <_strtod_l+0x1a0>
 800604e:	786a      	ldrb	r2, [r5, #1]
 8006050:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006054:	2a58      	cmp	r2, #88	@ 0x58
 8006056:	d16c      	bne.n	8006132 <_strtod_l+0x122>
 8006058:	9302      	str	r3, [sp, #8]
 800605a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800605c:	4a8e      	ldr	r2, [pc, #568]	@ (8006298 <_strtod_l+0x288>)
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	ab1a      	add	r3, sp, #104	@ 0x68
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	9805      	ldr	r0, [sp, #20]
 8006066:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006068:	a919      	add	r1, sp, #100	@ 0x64
 800606a:	f001 f907 	bl	800727c <__gethex>
 800606e:	f010 060f 	ands.w	r6, r0, #15
 8006072:	4604      	mov	r4, r0
 8006074:	d005      	beq.n	8006082 <_strtod_l+0x72>
 8006076:	2e06      	cmp	r6, #6
 8006078:	d126      	bne.n	80060c8 <_strtod_l+0xb8>
 800607a:	2300      	movs	r3, #0
 800607c:	3501      	adds	r5, #1
 800607e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006080:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006084:	2b00      	cmp	r3, #0
 8006086:	f040 8584 	bne.w	8006b92 <_strtod_l+0xb82>
 800608a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800608c:	b1bb      	cbz	r3, 80060be <_strtod_l+0xae>
 800608e:	4650      	mov	r0, sl
 8006090:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006094:	b01f      	add	sp, #124	@ 0x7c
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	2920      	cmp	r1, #32
 800609c:	d1d0      	bne.n	8006040 <_strtod_l+0x30>
 800609e:	3201      	adds	r2, #1
 80060a0:	e7c3      	b.n	800602a <_strtod_l+0x1a>
 80060a2:	292d      	cmp	r1, #45	@ 0x2d
 80060a4:	d1cc      	bne.n	8006040 <_strtod_l+0x30>
 80060a6:	2101      	movs	r1, #1
 80060a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80060aa:	1c51      	adds	r1, r2, #1
 80060ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80060ae:	7852      	ldrb	r2, [r2, #1]
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	d1c7      	bne.n	8006044 <_strtod_l+0x34>
 80060b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80060b6:	9419      	str	r4, [sp, #100]	@ 0x64
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 8568 	bne.w	8006b8e <_strtod_l+0xb7e>
 80060be:	4650      	mov	r0, sl
 80060c0:	4659      	mov	r1, fp
 80060c2:	e7e7      	b.n	8006094 <_strtod_l+0x84>
 80060c4:	2100      	movs	r1, #0
 80060c6:	e7ef      	b.n	80060a8 <_strtod_l+0x98>
 80060c8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80060ca:	b13a      	cbz	r2, 80060dc <_strtod_l+0xcc>
 80060cc:	2135      	movs	r1, #53	@ 0x35
 80060ce:	a81c      	add	r0, sp, #112	@ 0x70
 80060d0:	f7ff ff36 	bl	8005f40 <__copybits>
 80060d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060d6:	9805      	ldr	r0, [sp, #20]
 80060d8:	f7ff fb10 	bl	80056fc <_Bfree>
 80060dc:	3e01      	subs	r6, #1
 80060de:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80060e0:	2e04      	cmp	r6, #4
 80060e2:	d806      	bhi.n	80060f2 <_strtod_l+0xe2>
 80060e4:	e8df f006 	tbb	[pc, r6]
 80060e8:	201d0314 	.word	0x201d0314
 80060ec:	14          	.byte	0x14
 80060ed:	00          	.byte	0x00
 80060ee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80060f2:	05e1      	lsls	r1, r4, #23
 80060f4:	bf48      	it	mi
 80060f6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80060fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80060fe:	0d1b      	lsrs	r3, r3, #20
 8006100:	051b      	lsls	r3, r3, #20
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1bd      	bne.n	8006082 <_strtod_l+0x72>
 8006106:	f7fe fb1d 	bl	8004744 <__errno>
 800610a:	2322      	movs	r3, #34	@ 0x22
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	e7b8      	b.n	8006082 <_strtod_l+0x72>
 8006110:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006114:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006118:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800611c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006120:	e7e7      	b.n	80060f2 <_strtod_l+0xe2>
 8006122:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800629c <_strtod_l+0x28c>
 8006126:	e7e4      	b.n	80060f2 <_strtod_l+0xe2>
 8006128:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800612c:	f04f 3aff 	mov.w	sl, #4294967295
 8006130:	e7df      	b.n	80060f2 <_strtod_l+0xe2>
 8006132:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	9219      	str	r2, [sp, #100]	@ 0x64
 8006138:	785b      	ldrb	r3, [r3, #1]
 800613a:	2b30      	cmp	r3, #48	@ 0x30
 800613c:	d0f9      	beq.n	8006132 <_strtod_l+0x122>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d09f      	beq.n	8006082 <_strtod_l+0x72>
 8006142:	2301      	movs	r3, #1
 8006144:	9309      	str	r3, [sp, #36]	@ 0x24
 8006146:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006148:	220a      	movs	r2, #10
 800614a:	930c      	str	r3, [sp, #48]	@ 0x30
 800614c:	2300      	movs	r3, #0
 800614e:	461f      	mov	r7, r3
 8006150:	9308      	str	r3, [sp, #32]
 8006152:	930a      	str	r3, [sp, #40]	@ 0x28
 8006154:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006156:	7805      	ldrb	r5, [r0, #0]
 8006158:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800615c:	b2d9      	uxtb	r1, r3
 800615e:	2909      	cmp	r1, #9
 8006160:	d928      	bls.n	80061b4 <_strtod_l+0x1a4>
 8006162:	2201      	movs	r2, #1
 8006164:	494e      	ldr	r1, [pc, #312]	@ (80062a0 <_strtod_l+0x290>)
 8006166:	f000 ffc7 	bl	80070f8 <strncmp>
 800616a:	2800      	cmp	r0, #0
 800616c:	d032      	beq.n	80061d4 <_strtod_l+0x1c4>
 800616e:	2000      	movs	r0, #0
 8006170:	462a      	mov	r2, r5
 8006172:	4681      	mov	r9, r0
 8006174:	463d      	mov	r5, r7
 8006176:	4603      	mov	r3, r0
 8006178:	2a65      	cmp	r2, #101	@ 0x65
 800617a:	d001      	beq.n	8006180 <_strtod_l+0x170>
 800617c:	2a45      	cmp	r2, #69	@ 0x45
 800617e:	d114      	bne.n	80061aa <_strtod_l+0x19a>
 8006180:	b91d      	cbnz	r5, 800618a <_strtod_l+0x17a>
 8006182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006184:	4302      	orrs	r2, r0
 8006186:	d095      	beq.n	80060b4 <_strtod_l+0xa4>
 8006188:	2500      	movs	r5, #0
 800618a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800618c:	1c62      	adds	r2, r4, #1
 800618e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006190:	7862      	ldrb	r2, [r4, #1]
 8006192:	2a2b      	cmp	r2, #43	@ 0x2b
 8006194:	d077      	beq.n	8006286 <_strtod_l+0x276>
 8006196:	2a2d      	cmp	r2, #45	@ 0x2d
 8006198:	d07b      	beq.n	8006292 <_strtod_l+0x282>
 800619a:	f04f 0c00 	mov.w	ip, #0
 800619e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80061a2:	2909      	cmp	r1, #9
 80061a4:	f240 8082 	bls.w	80062ac <_strtod_l+0x29c>
 80061a8:	9419      	str	r4, [sp, #100]	@ 0x64
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	e0a2      	b.n	80062f6 <_strtod_l+0x2e6>
 80061b0:	2300      	movs	r3, #0
 80061b2:	e7c7      	b.n	8006144 <_strtod_l+0x134>
 80061b4:	2f08      	cmp	r7, #8
 80061b6:	bfd5      	itete	le
 80061b8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80061ba:	9908      	ldrgt	r1, [sp, #32]
 80061bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80061c0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80061c4:	f100 0001 	add.w	r0, r0, #1
 80061c8:	bfd4      	ite	le
 80061ca:	930a      	strle	r3, [sp, #40]	@ 0x28
 80061cc:	9308      	strgt	r3, [sp, #32]
 80061ce:	3701      	adds	r7, #1
 80061d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80061d2:	e7bf      	b.n	8006154 <_strtod_l+0x144>
 80061d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80061da:	785a      	ldrb	r2, [r3, #1]
 80061dc:	b37f      	cbz	r7, 800623e <_strtod_l+0x22e>
 80061de:	4681      	mov	r9, r0
 80061e0:	463d      	mov	r5, r7
 80061e2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	d912      	bls.n	8006210 <_strtod_l+0x200>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e7c4      	b.n	8006178 <_strtod_l+0x168>
 80061ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061f0:	3001      	adds	r0, #1
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80061f6:	785a      	ldrb	r2, [r3, #1]
 80061f8:	2a30      	cmp	r2, #48	@ 0x30
 80061fa:	d0f8      	beq.n	80061ee <_strtod_l+0x1de>
 80061fc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006200:	2b08      	cmp	r3, #8
 8006202:	f200 84cb 	bhi.w	8006b9c <_strtod_l+0xb8c>
 8006206:	4681      	mov	r9, r0
 8006208:	2000      	movs	r0, #0
 800620a:	4605      	mov	r5, r0
 800620c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800620e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006210:	3a30      	subs	r2, #48	@ 0x30
 8006212:	f100 0301 	add.w	r3, r0, #1
 8006216:	d02a      	beq.n	800626e <_strtod_l+0x25e>
 8006218:	4499      	add	r9, r3
 800621a:	210a      	movs	r1, #10
 800621c:	462b      	mov	r3, r5
 800621e:	eb00 0c05 	add.w	ip, r0, r5
 8006222:	4563      	cmp	r3, ip
 8006224:	d10d      	bne.n	8006242 <_strtod_l+0x232>
 8006226:	1c69      	adds	r1, r5, #1
 8006228:	4401      	add	r1, r0
 800622a:	4428      	add	r0, r5
 800622c:	2808      	cmp	r0, #8
 800622e:	dc16      	bgt.n	800625e <_strtod_l+0x24e>
 8006230:	230a      	movs	r3, #10
 8006232:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006234:	fb03 2300 	mla	r3, r3, r0, r2
 8006238:	930a      	str	r3, [sp, #40]	@ 0x28
 800623a:	2300      	movs	r3, #0
 800623c:	e018      	b.n	8006270 <_strtod_l+0x260>
 800623e:	4638      	mov	r0, r7
 8006240:	e7da      	b.n	80061f8 <_strtod_l+0x1e8>
 8006242:	2b08      	cmp	r3, #8
 8006244:	f103 0301 	add.w	r3, r3, #1
 8006248:	dc03      	bgt.n	8006252 <_strtod_l+0x242>
 800624a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800624c:	434e      	muls	r6, r1
 800624e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006250:	e7e7      	b.n	8006222 <_strtod_l+0x212>
 8006252:	2b10      	cmp	r3, #16
 8006254:	bfde      	ittt	le
 8006256:	9e08      	ldrle	r6, [sp, #32]
 8006258:	434e      	mulle	r6, r1
 800625a:	9608      	strle	r6, [sp, #32]
 800625c:	e7e1      	b.n	8006222 <_strtod_l+0x212>
 800625e:	280f      	cmp	r0, #15
 8006260:	dceb      	bgt.n	800623a <_strtod_l+0x22a>
 8006262:	230a      	movs	r3, #10
 8006264:	9808      	ldr	r0, [sp, #32]
 8006266:	fb03 2300 	mla	r3, r3, r0, r2
 800626a:	9308      	str	r3, [sp, #32]
 800626c:	e7e5      	b.n	800623a <_strtod_l+0x22a>
 800626e:	4629      	mov	r1, r5
 8006270:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006272:	460d      	mov	r5, r1
 8006274:	1c50      	adds	r0, r2, #1
 8006276:	9019      	str	r0, [sp, #100]	@ 0x64
 8006278:	7852      	ldrb	r2, [r2, #1]
 800627a:	4618      	mov	r0, r3
 800627c:	e7b1      	b.n	80061e2 <_strtod_l+0x1d2>
 800627e:	f04f 0900 	mov.w	r9, #0
 8006282:	2301      	movs	r3, #1
 8006284:	e77d      	b.n	8006182 <_strtod_l+0x172>
 8006286:	f04f 0c00 	mov.w	ip, #0
 800628a:	1ca2      	adds	r2, r4, #2
 800628c:	9219      	str	r2, [sp, #100]	@ 0x64
 800628e:	78a2      	ldrb	r2, [r4, #2]
 8006290:	e785      	b.n	800619e <_strtod_l+0x18e>
 8006292:	f04f 0c01 	mov.w	ip, #1
 8006296:	e7f8      	b.n	800628a <_strtod_l+0x27a>
 8006298:	08008110 	.word	0x08008110
 800629c:	7ff00000 	.word	0x7ff00000
 80062a0:	080080f8 	.word	0x080080f8
 80062a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80062a6:	1c51      	adds	r1, r2, #1
 80062a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80062aa:	7852      	ldrb	r2, [r2, #1]
 80062ac:	2a30      	cmp	r2, #48	@ 0x30
 80062ae:	d0f9      	beq.n	80062a4 <_strtod_l+0x294>
 80062b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80062b4:	2908      	cmp	r1, #8
 80062b6:	f63f af78 	bhi.w	80061aa <_strtod_l+0x19a>
 80062ba:	f04f 080a 	mov.w	r8, #10
 80062be:	3a30      	subs	r2, #48	@ 0x30
 80062c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80062c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80062c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80062c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80062c8:	1c56      	adds	r6, r2, #1
 80062ca:	9619      	str	r6, [sp, #100]	@ 0x64
 80062cc:	7852      	ldrb	r2, [r2, #1]
 80062ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80062d2:	f1be 0f09 	cmp.w	lr, #9
 80062d6:	d939      	bls.n	800634c <_strtod_l+0x33c>
 80062d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80062da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80062de:	1a76      	subs	r6, r6, r1
 80062e0:	2e08      	cmp	r6, #8
 80062e2:	dc03      	bgt.n	80062ec <_strtod_l+0x2dc>
 80062e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80062e6:	4588      	cmp	r8, r1
 80062e8:	bfa8      	it	ge
 80062ea:	4688      	movge	r8, r1
 80062ec:	f1bc 0f00 	cmp.w	ip, #0
 80062f0:	d001      	beq.n	80062f6 <_strtod_l+0x2e6>
 80062f2:	f1c8 0800 	rsb	r8, r8, #0
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	d14e      	bne.n	8006398 <_strtod_l+0x388>
 80062fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062fc:	4308      	orrs	r0, r1
 80062fe:	f47f aec0 	bne.w	8006082 <_strtod_l+0x72>
 8006302:	2b00      	cmp	r3, #0
 8006304:	f47f aed6 	bne.w	80060b4 <_strtod_l+0xa4>
 8006308:	2a69      	cmp	r2, #105	@ 0x69
 800630a:	d028      	beq.n	800635e <_strtod_l+0x34e>
 800630c:	dc25      	bgt.n	800635a <_strtod_l+0x34a>
 800630e:	2a49      	cmp	r2, #73	@ 0x49
 8006310:	d025      	beq.n	800635e <_strtod_l+0x34e>
 8006312:	2a4e      	cmp	r2, #78	@ 0x4e
 8006314:	f47f aece 	bne.w	80060b4 <_strtod_l+0xa4>
 8006318:	499a      	ldr	r1, [pc, #616]	@ (8006584 <_strtod_l+0x574>)
 800631a:	a819      	add	r0, sp, #100	@ 0x64
 800631c:	f001 f9d0 	bl	80076c0 <__match>
 8006320:	2800      	cmp	r0, #0
 8006322:	f43f aec7 	beq.w	80060b4 <_strtod_l+0xa4>
 8006326:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b28      	cmp	r3, #40	@ 0x28
 800632c:	d12e      	bne.n	800638c <_strtod_l+0x37c>
 800632e:	4996      	ldr	r1, [pc, #600]	@ (8006588 <_strtod_l+0x578>)
 8006330:	aa1c      	add	r2, sp, #112	@ 0x70
 8006332:	a819      	add	r0, sp, #100	@ 0x64
 8006334:	f001 f9d8 	bl	80076e8 <__hexnan>
 8006338:	2805      	cmp	r0, #5
 800633a:	d127      	bne.n	800638c <_strtod_l+0x37c>
 800633c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800633e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006342:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006346:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800634a:	e69a      	b.n	8006082 <_strtod_l+0x72>
 800634c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800634e:	fb08 2101 	mla	r1, r8, r1, r2
 8006352:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006356:	920e      	str	r2, [sp, #56]	@ 0x38
 8006358:	e7b5      	b.n	80062c6 <_strtod_l+0x2b6>
 800635a:	2a6e      	cmp	r2, #110	@ 0x6e
 800635c:	e7da      	b.n	8006314 <_strtod_l+0x304>
 800635e:	498b      	ldr	r1, [pc, #556]	@ (800658c <_strtod_l+0x57c>)
 8006360:	a819      	add	r0, sp, #100	@ 0x64
 8006362:	f001 f9ad 	bl	80076c0 <__match>
 8006366:	2800      	cmp	r0, #0
 8006368:	f43f aea4 	beq.w	80060b4 <_strtod_l+0xa4>
 800636c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800636e:	4988      	ldr	r1, [pc, #544]	@ (8006590 <_strtod_l+0x580>)
 8006370:	3b01      	subs	r3, #1
 8006372:	a819      	add	r0, sp, #100	@ 0x64
 8006374:	9319      	str	r3, [sp, #100]	@ 0x64
 8006376:	f001 f9a3 	bl	80076c0 <__match>
 800637a:	b910      	cbnz	r0, 8006382 <_strtod_l+0x372>
 800637c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800637e:	3301      	adds	r3, #1
 8006380:	9319      	str	r3, [sp, #100]	@ 0x64
 8006382:	f04f 0a00 	mov.w	sl, #0
 8006386:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006594 <_strtod_l+0x584>
 800638a:	e67a      	b.n	8006082 <_strtod_l+0x72>
 800638c:	4882      	ldr	r0, [pc, #520]	@ (8006598 <_strtod_l+0x588>)
 800638e:	f000 fed5 	bl	800713c <nan>
 8006392:	4682      	mov	sl, r0
 8006394:	468b      	mov	fp, r1
 8006396:	e674      	b.n	8006082 <_strtod_l+0x72>
 8006398:	eba8 0309 	sub.w	r3, r8, r9
 800639c:	2f00      	cmp	r7, #0
 800639e:	bf08      	it	eq
 80063a0:	462f      	moveq	r7, r5
 80063a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80063a4:	2d10      	cmp	r5, #16
 80063a6:	462c      	mov	r4, r5
 80063a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063aa:	bfa8      	it	ge
 80063ac:	2410      	movge	r4, #16
 80063ae:	f7fa f819 	bl	80003e4 <__aeabi_ui2d>
 80063b2:	2d09      	cmp	r5, #9
 80063b4:	4682      	mov	sl, r0
 80063b6:	468b      	mov	fp, r1
 80063b8:	dc11      	bgt.n	80063de <_strtod_l+0x3ce>
 80063ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f43f ae60 	beq.w	8006082 <_strtod_l+0x72>
 80063c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c4:	dd76      	ble.n	80064b4 <_strtod_l+0x4a4>
 80063c6:	2b16      	cmp	r3, #22
 80063c8:	dc5d      	bgt.n	8006486 <_strtod_l+0x476>
 80063ca:	4974      	ldr	r1, [pc, #464]	@ (800659c <_strtod_l+0x58c>)
 80063cc:	4652      	mov	r2, sl
 80063ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063d2:	465b      	mov	r3, fp
 80063d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d8:	f7fa f87e 	bl	80004d8 <__aeabi_dmul>
 80063dc:	e7d9      	b.n	8006392 <_strtod_l+0x382>
 80063de:	4b6f      	ldr	r3, [pc, #444]	@ (800659c <_strtod_l+0x58c>)
 80063e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80063e8:	f7fa f876 	bl	80004d8 <__aeabi_dmul>
 80063ec:	4682      	mov	sl, r0
 80063ee:	9808      	ldr	r0, [sp, #32]
 80063f0:	468b      	mov	fp, r1
 80063f2:	f7f9 fff7 	bl	80003e4 <__aeabi_ui2d>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4650      	mov	r0, sl
 80063fc:	4659      	mov	r1, fp
 80063fe:	f7f9 feb5 	bl	800016c <__adddf3>
 8006402:	2d0f      	cmp	r5, #15
 8006404:	4682      	mov	sl, r0
 8006406:	468b      	mov	fp, r1
 8006408:	ddd7      	ble.n	80063ba <_strtod_l+0x3aa>
 800640a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640c:	1b2c      	subs	r4, r5, r4
 800640e:	441c      	add	r4, r3
 8006410:	2c00      	cmp	r4, #0
 8006412:	f340 8096 	ble.w	8006542 <_strtod_l+0x532>
 8006416:	f014 030f 	ands.w	r3, r4, #15
 800641a:	d00a      	beq.n	8006432 <_strtod_l+0x422>
 800641c:	495f      	ldr	r1, [pc, #380]	@ (800659c <_strtod_l+0x58c>)
 800641e:	4652      	mov	r2, sl
 8006420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006428:	465b      	mov	r3, fp
 800642a:	f7fa f855 	bl	80004d8 <__aeabi_dmul>
 800642e:	4682      	mov	sl, r0
 8006430:	468b      	mov	fp, r1
 8006432:	f034 040f 	bics.w	r4, r4, #15
 8006436:	d073      	beq.n	8006520 <_strtod_l+0x510>
 8006438:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800643c:	dd48      	ble.n	80064d0 <_strtod_l+0x4c0>
 800643e:	2400      	movs	r4, #0
 8006440:	46a0      	mov	r8, r4
 8006442:	46a1      	mov	r9, r4
 8006444:	940a      	str	r4, [sp, #40]	@ 0x28
 8006446:	2322      	movs	r3, #34	@ 0x22
 8006448:	f04f 0a00 	mov.w	sl, #0
 800644c:	9a05      	ldr	r2, [sp, #20]
 800644e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006594 <_strtod_l+0x584>
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	f43f ae13 	beq.w	8006082 <_strtod_l+0x72>
 800645c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800645e:	9805      	ldr	r0, [sp, #20]
 8006460:	f7ff f94c 	bl	80056fc <_Bfree>
 8006464:	4649      	mov	r1, r9
 8006466:	9805      	ldr	r0, [sp, #20]
 8006468:	f7ff f948 	bl	80056fc <_Bfree>
 800646c:	4641      	mov	r1, r8
 800646e:	9805      	ldr	r0, [sp, #20]
 8006470:	f7ff f944 	bl	80056fc <_Bfree>
 8006474:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006476:	9805      	ldr	r0, [sp, #20]
 8006478:	f7ff f940 	bl	80056fc <_Bfree>
 800647c:	4621      	mov	r1, r4
 800647e:	9805      	ldr	r0, [sp, #20]
 8006480:	f7ff f93c 	bl	80056fc <_Bfree>
 8006484:	e5fd      	b.n	8006082 <_strtod_l+0x72>
 8006486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006488:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800648c:	4293      	cmp	r3, r2
 800648e:	dbbc      	blt.n	800640a <_strtod_l+0x3fa>
 8006490:	4c42      	ldr	r4, [pc, #264]	@ (800659c <_strtod_l+0x58c>)
 8006492:	f1c5 050f 	rsb	r5, r5, #15
 8006496:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800649a:	4652      	mov	r2, sl
 800649c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064a0:	465b      	mov	r3, fp
 80064a2:	f7fa f819 	bl	80004d8 <__aeabi_dmul>
 80064a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a8:	1b5d      	subs	r5, r3, r5
 80064aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80064ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80064b2:	e791      	b.n	80063d8 <_strtod_l+0x3c8>
 80064b4:	3316      	adds	r3, #22
 80064b6:	dba8      	blt.n	800640a <_strtod_l+0x3fa>
 80064b8:	4b38      	ldr	r3, [pc, #224]	@ (800659c <_strtod_l+0x58c>)
 80064ba:	eba9 0808 	sub.w	r8, r9, r8
 80064be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80064c2:	4650      	mov	r0, sl
 80064c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80064c8:	4659      	mov	r1, fp
 80064ca:	f7fa f92f 	bl	800072c <__aeabi_ddiv>
 80064ce:	e760      	b.n	8006392 <_strtod_l+0x382>
 80064d0:	4b33      	ldr	r3, [pc, #204]	@ (80065a0 <_strtod_l+0x590>)
 80064d2:	4650      	mov	r0, sl
 80064d4:	9308      	str	r3, [sp, #32]
 80064d6:	2300      	movs	r3, #0
 80064d8:	4659      	mov	r1, fp
 80064da:	461e      	mov	r6, r3
 80064dc:	1124      	asrs	r4, r4, #4
 80064de:	2c01      	cmp	r4, #1
 80064e0:	dc21      	bgt.n	8006526 <_strtod_l+0x516>
 80064e2:	b10b      	cbz	r3, 80064e8 <_strtod_l+0x4d8>
 80064e4:	4682      	mov	sl, r0
 80064e6:	468b      	mov	fp, r1
 80064e8:	492d      	ldr	r1, [pc, #180]	@ (80065a0 <_strtod_l+0x590>)
 80064ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80064ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80064f2:	4652      	mov	r2, sl
 80064f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064f8:	465b      	mov	r3, fp
 80064fa:	f7f9 ffed 	bl	80004d8 <__aeabi_dmul>
 80064fe:	4b25      	ldr	r3, [pc, #148]	@ (8006594 <_strtod_l+0x584>)
 8006500:	460a      	mov	r2, r1
 8006502:	400b      	ands	r3, r1
 8006504:	4927      	ldr	r1, [pc, #156]	@ (80065a4 <_strtod_l+0x594>)
 8006506:	4682      	mov	sl, r0
 8006508:	428b      	cmp	r3, r1
 800650a:	d898      	bhi.n	800643e <_strtod_l+0x42e>
 800650c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006510:	428b      	cmp	r3, r1
 8006512:	bf86      	itte	hi
 8006514:	f04f 3aff 	movhi.w	sl, #4294967295
 8006518:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80065a8 <_strtod_l+0x598>
 800651c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006520:	2300      	movs	r3, #0
 8006522:	9308      	str	r3, [sp, #32]
 8006524:	e07a      	b.n	800661c <_strtod_l+0x60c>
 8006526:	07e2      	lsls	r2, r4, #31
 8006528:	d505      	bpl.n	8006536 <_strtod_l+0x526>
 800652a:	9b08      	ldr	r3, [sp, #32]
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f7f9 ffd2 	bl	80004d8 <__aeabi_dmul>
 8006534:	2301      	movs	r3, #1
 8006536:	9a08      	ldr	r2, [sp, #32]
 8006538:	3601      	adds	r6, #1
 800653a:	3208      	adds	r2, #8
 800653c:	1064      	asrs	r4, r4, #1
 800653e:	9208      	str	r2, [sp, #32]
 8006540:	e7cd      	b.n	80064de <_strtod_l+0x4ce>
 8006542:	d0ed      	beq.n	8006520 <_strtod_l+0x510>
 8006544:	4264      	negs	r4, r4
 8006546:	f014 020f 	ands.w	r2, r4, #15
 800654a:	d00a      	beq.n	8006562 <_strtod_l+0x552>
 800654c:	4b13      	ldr	r3, [pc, #76]	@ (800659c <_strtod_l+0x58c>)
 800654e:	4650      	mov	r0, sl
 8006550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006554:	4659      	mov	r1, fp
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7fa f8e7 	bl	800072c <__aeabi_ddiv>
 800655e:	4682      	mov	sl, r0
 8006560:	468b      	mov	fp, r1
 8006562:	1124      	asrs	r4, r4, #4
 8006564:	d0dc      	beq.n	8006520 <_strtod_l+0x510>
 8006566:	2c1f      	cmp	r4, #31
 8006568:	dd20      	ble.n	80065ac <_strtod_l+0x59c>
 800656a:	2400      	movs	r4, #0
 800656c:	46a0      	mov	r8, r4
 800656e:	46a1      	mov	r9, r4
 8006570:	940a      	str	r4, [sp, #40]	@ 0x28
 8006572:	2322      	movs	r3, #34	@ 0x22
 8006574:	9a05      	ldr	r2, [sp, #20]
 8006576:	f04f 0a00 	mov.w	sl, #0
 800657a:	f04f 0b00 	mov.w	fp, #0
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	e768      	b.n	8006454 <_strtod_l+0x444>
 8006582:	bf00      	nop
 8006584:	08007ee7 	.word	0x08007ee7
 8006588:	080080fc 	.word	0x080080fc
 800658c:	08007edf 	.word	0x08007edf
 8006590:	08007f16 	.word	0x08007f16
 8006594:	7ff00000 	.word	0x7ff00000
 8006598:	080082a5 	.word	0x080082a5
 800659c:	08008030 	.word	0x08008030
 80065a0:	08008008 	.word	0x08008008
 80065a4:	7ca00000 	.word	0x7ca00000
 80065a8:	7fefffff 	.word	0x7fefffff
 80065ac:	f014 0310 	ands.w	r3, r4, #16
 80065b0:	bf18      	it	ne
 80065b2:	236a      	movne	r3, #106	@ 0x6a
 80065b4:	4650      	mov	r0, sl
 80065b6:	9308      	str	r3, [sp, #32]
 80065b8:	4659      	mov	r1, fp
 80065ba:	2300      	movs	r3, #0
 80065bc:	4ea9      	ldr	r6, [pc, #676]	@ (8006864 <_strtod_l+0x854>)
 80065be:	07e2      	lsls	r2, r4, #31
 80065c0:	d504      	bpl.n	80065cc <_strtod_l+0x5bc>
 80065c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065c6:	f7f9 ff87 	bl	80004d8 <__aeabi_dmul>
 80065ca:	2301      	movs	r3, #1
 80065cc:	1064      	asrs	r4, r4, #1
 80065ce:	f106 0608 	add.w	r6, r6, #8
 80065d2:	d1f4      	bne.n	80065be <_strtod_l+0x5ae>
 80065d4:	b10b      	cbz	r3, 80065da <_strtod_l+0x5ca>
 80065d6:	4682      	mov	sl, r0
 80065d8:	468b      	mov	fp, r1
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	b1b3      	cbz	r3, 800660c <_strtod_l+0x5fc>
 80065de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80065e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	4659      	mov	r1, fp
 80065ea:	dd0f      	ble.n	800660c <_strtod_l+0x5fc>
 80065ec:	2b1f      	cmp	r3, #31
 80065ee:	dd57      	ble.n	80066a0 <_strtod_l+0x690>
 80065f0:	2b34      	cmp	r3, #52	@ 0x34
 80065f2:	bfd8      	it	le
 80065f4:	f04f 33ff 	movle.w	r3, #4294967295
 80065f8:	f04f 0a00 	mov.w	sl, #0
 80065fc:	bfcf      	iteee	gt
 80065fe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006602:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006606:	4093      	lslle	r3, r2
 8006608:	ea03 0b01 	andle.w	fp, r3, r1
 800660c:	2200      	movs	r2, #0
 800660e:	2300      	movs	r3, #0
 8006610:	4650      	mov	r0, sl
 8006612:	4659      	mov	r1, fp
 8006614:	f7fa f9c8 	bl	80009a8 <__aeabi_dcmpeq>
 8006618:	2800      	cmp	r0, #0
 800661a:	d1a6      	bne.n	800656a <_strtod_l+0x55a>
 800661c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800661e:	463a      	mov	r2, r7
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006624:	462b      	mov	r3, r5
 8006626:	9805      	ldr	r0, [sp, #20]
 8006628:	f7ff f8d0 	bl	80057cc <__s2b>
 800662c:	900a      	str	r0, [sp, #40]	@ 0x28
 800662e:	2800      	cmp	r0, #0
 8006630:	f43f af05 	beq.w	800643e <_strtod_l+0x42e>
 8006634:	2400      	movs	r4, #0
 8006636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006638:	eba9 0308 	sub.w	r3, r9, r8
 800663c:	2a00      	cmp	r2, #0
 800663e:	bfa8      	it	ge
 8006640:	2300      	movge	r3, #0
 8006642:	46a0      	mov	r8, r4
 8006644:	9312      	str	r3, [sp, #72]	@ 0x48
 8006646:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800664a:	9316      	str	r3, [sp, #88]	@ 0x58
 800664c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800664e:	9805      	ldr	r0, [sp, #20]
 8006650:	6859      	ldr	r1, [r3, #4]
 8006652:	f7ff f813 	bl	800567c <_Balloc>
 8006656:	4681      	mov	r9, r0
 8006658:	2800      	cmp	r0, #0
 800665a:	f43f aef4 	beq.w	8006446 <_strtod_l+0x436>
 800665e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006660:	300c      	adds	r0, #12
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	f103 010c 	add.w	r1, r3, #12
 8006668:	3202      	adds	r2, #2
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	f7fe f8a5 	bl	80047ba <memcpy>
 8006670:	ab1c      	add	r3, sp, #112	@ 0x70
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4652      	mov	r2, sl
 800667a:	465b      	mov	r3, fp
 800667c:	9805      	ldr	r0, [sp, #20]
 800667e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006682:	f7ff fbd5 	bl	8005e30 <__d2b>
 8006686:	901a      	str	r0, [sp, #104]	@ 0x68
 8006688:	2800      	cmp	r0, #0
 800668a:	f43f aedc 	beq.w	8006446 <_strtod_l+0x436>
 800668e:	2101      	movs	r1, #1
 8006690:	9805      	ldr	r0, [sp, #20]
 8006692:	f7ff f931 	bl	80058f8 <__i2b>
 8006696:	4680      	mov	r8, r0
 8006698:	b948      	cbnz	r0, 80066ae <_strtod_l+0x69e>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	e6d2      	b.n	8006446 <_strtod_l+0x436>
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	ea03 0a0a 	and.w	sl, r3, sl
 80066ac:	e7ae      	b.n	800660c <_strtod_l+0x5fc>
 80066ae:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80066b0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80066b2:	2d00      	cmp	r5, #0
 80066b4:	bfab      	itete	ge
 80066b6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80066b8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80066ba:	18ef      	addge	r7, r5, r3
 80066bc:	1b5e      	sublt	r6, r3, r5
 80066be:	9b08      	ldr	r3, [sp, #32]
 80066c0:	bfa8      	it	ge
 80066c2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80066c4:	eba5 0503 	sub.w	r5, r5, r3
 80066c8:	4415      	add	r5, r2
 80066ca:	4b67      	ldr	r3, [pc, #412]	@ (8006868 <_strtod_l+0x858>)
 80066cc:	f105 35ff 	add.w	r5, r5, #4294967295
 80066d0:	bfb8      	it	lt
 80066d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80066d4:	429d      	cmp	r5, r3
 80066d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80066da:	da50      	bge.n	800677e <_strtod_l+0x76e>
 80066dc:	1b5b      	subs	r3, r3, r5
 80066de:	2b1f      	cmp	r3, #31
 80066e0:	f04f 0101 	mov.w	r1, #1
 80066e4:	eba2 0203 	sub.w	r2, r2, r3
 80066e8:	dc3d      	bgt.n	8006766 <_strtod_l+0x756>
 80066ea:	fa01 f303 	lsl.w	r3, r1, r3
 80066ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066f0:	2300      	movs	r3, #0
 80066f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80066f4:	18bd      	adds	r5, r7, r2
 80066f6:	9b08      	ldr	r3, [sp, #32]
 80066f8:	42af      	cmp	r7, r5
 80066fa:	4416      	add	r6, r2
 80066fc:	441e      	add	r6, r3
 80066fe:	463b      	mov	r3, r7
 8006700:	bfa8      	it	ge
 8006702:	462b      	movge	r3, r5
 8006704:	42b3      	cmp	r3, r6
 8006706:	bfa8      	it	ge
 8006708:	4633      	movge	r3, r6
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfc2      	ittt	gt
 800670e:	1aed      	subgt	r5, r5, r3
 8006710:	1af6      	subgt	r6, r6, r3
 8006712:	1aff      	subgt	r7, r7, r3
 8006714:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006716:	2b00      	cmp	r3, #0
 8006718:	dd16      	ble.n	8006748 <_strtod_l+0x738>
 800671a:	4641      	mov	r1, r8
 800671c:	461a      	mov	r2, r3
 800671e:	9805      	ldr	r0, [sp, #20]
 8006720:	f7ff f9a8 	bl	8005a74 <__pow5mult>
 8006724:	4680      	mov	r8, r0
 8006726:	2800      	cmp	r0, #0
 8006728:	d0b7      	beq.n	800669a <_strtod_l+0x68a>
 800672a:	4601      	mov	r1, r0
 800672c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800672e:	9805      	ldr	r0, [sp, #20]
 8006730:	f7ff f8f8 	bl	8005924 <__multiply>
 8006734:	900e      	str	r0, [sp, #56]	@ 0x38
 8006736:	2800      	cmp	r0, #0
 8006738:	f43f ae85 	beq.w	8006446 <_strtod_l+0x436>
 800673c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800673e:	9805      	ldr	r0, [sp, #20]
 8006740:	f7fe ffdc 	bl	80056fc <_Bfree>
 8006744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006746:	931a      	str	r3, [sp, #104]	@ 0x68
 8006748:	2d00      	cmp	r5, #0
 800674a:	dc1d      	bgt.n	8006788 <_strtod_l+0x778>
 800674c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	dd23      	ble.n	800679a <_strtod_l+0x78a>
 8006752:	4649      	mov	r1, r9
 8006754:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006756:	9805      	ldr	r0, [sp, #20]
 8006758:	f7ff f98c 	bl	8005a74 <__pow5mult>
 800675c:	4681      	mov	r9, r0
 800675e:	b9e0      	cbnz	r0, 800679a <_strtod_l+0x78a>
 8006760:	f04f 0900 	mov.w	r9, #0
 8006764:	e66f      	b.n	8006446 <_strtod_l+0x436>
 8006766:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800676a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800676e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006772:	35e2      	adds	r5, #226	@ 0xe2
 8006774:	fa01 f305 	lsl.w	r3, r1, r5
 8006778:	9310      	str	r3, [sp, #64]	@ 0x40
 800677a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800677c:	e7ba      	b.n	80066f4 <_strtod_l+0x6e4>
 800677e:	2300      	movs	r3, #0
 8006780:	9310      	str	r3, [sp, #64]	@ 0x40
 8006782:	2301      	movs	r3, #1
 8006784:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006786:	e7b5      	b.n	80066f4 <_strtod_l+0x6e4>
 8006788:	462a      	mov	r2, r5
 800678a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800678c:	9805      	ldr	r0, [sp, #20]
 800678e:	f7ff f9cb 	bl	8005b28 <__lshift>
 8006792:	901a      	str	r0, [sp, #104]	@ 0x68
 8006794:	2800      	cmp	r0, #0
 8006796:	d1d9      	bne.n	800674c <_strtod_l+0x73c>
 8006798:	e655      	b.n	8006446 <_strtod_l+0x436>
 800679a:	2e00      	cmp	r6, #0
 800679c:	dd07      	ble.n	80067ae <_strtod_l+0x79e>
 800679e:	4649      	mov	r1, r9
 80067a0:	4632      	mov	r2, r6
 80067a2:	9805      	ldr	r0, [sp, #20]
 80067a4:	f7ff f9c0 	bl	8005b28 <__lshift>
 80067a8:	4681      	mov	r9, r0
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d0d8      	beq.n	8006760 <_strtod_l+0x750>
 80067ae:	2f00      	cmp	r7, #0
 80067b0:	dd08      	ble.n	80067c4 <_strtod_l+0x7b4>
 80067b2:	4641      	mov	r1, r8
 80067b4:	463a      	mov	r2, r7
 80067b6:	9805      	ldr	r0, [sp, #20]
 80067b8:	f7ff f9b6 	bl	8005b28 <__lshift>
 80067bc:	4680      	mov	r8, r0
 80067be:	2800      	cmp	r0, #0
 80067c0:	f43f ae41 	beq.w	8006446 <_strtod_l+0x436>
 80067c4:	464a      	mov	r2, r9
 80067c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067c8:	9805      	ldr	r0, [sp, #20]
 80067ca:	f7ff fa35 	bl	8005c38 <__mdiff>
 80067ce:	4604      	mov	r4, r0
 80067d0:	2800      	cmp	r0, #0
 80067d2:	f43f ae38 	beq.w	8006446 <_strtod_l+0x436>
 80067d6:	68c3      	ldr	r3, [r0, #12]
 80067d8:	4641      	mov	r1, r8
 80067da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80067dc:	2300      	movs	r3, #0
 80067de:	60c3      	str	r3, [r0, #12]
 80067e0:	f7ff fa0e 	bl	8005c00 <__mcmp>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	da45      	bge.n	8006874 <_strtod_l+0x864>
 80067e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067ea:	ea53 030a 	orrs.w	r3, r3, sl
 80067ee:	d16b      	bne.n	80068c8 <_strtod_l+0x8b8>
 80067f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d167      	bne.n	80068c8 <_strtod_l+0x8b8>
 80067f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067fc:	0d1b      	lsrs	r3, r3, #20
 80067fe:	051b      	lsls	r3, r3, #20
 8006800:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006804:	d960      	bls.n	80068c8 <_strtod_l+0x8b8>
 8006806:	6963      	ldr	r3, [r4, #20]
 8006808:	b913      	cbnz	r3, 8006810 <_strtod_l+0x800>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	2b01      	cmp	r3, #1
 800680e:	dd5b      	ble.n	80068c8 <_strtod_l+0x8b8>
 8006810:	4621      	mov	r1, r4
 8006812:	2201      	movs	r2, #1
 8006814:	9805      	ldr	r0, [sp, #20]
 8006816:	f7ff f987 	bl	8005b28 <__lshift>
 800681a:	4641      	mov	r1, r8
 800681c:	4604      	mov	r4, r0
 800681e:	f7ff f9ef 	bl	8005c00 <__mcmp>
 8006822:	2800      	cmp	r0, #0
 8006824:	dd50      	ble.n	80068c8 <_strtod_l+0x8b8>
 8006826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800682a:	9a08      	ldr	r2, [sp, #32]
 800682c:	0d1b      	lsrs	r3, r3, #20
 800682e:	051b      	lsls	r3, r3, #20
 8006830:	2a00      	cmp	r2, #0
 8006832:	d06a      	beq.n	800690a <_strtod_l+0x8fa>
 8006834:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006838:	d867      	bhi.n	800690a <_strtod_l+0x8fa>
 800683a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800683e:	f67f ae98 	bls.w	8006572 <_strtod_l+0x562>
 8006842:	4650      	mov	r0, sl
 8006844:	4659      	mov	r1, fp
 8006846:	4b09      	ldr	r3, [pc, #36]	@ (800686c <_strtod_l+0x85c>)
 8006848:	2200      	movs	r2, #0
 800684a:	f7f9 fe45 	bl	80004d8 <__aeabi_dmul>
 800684e:	4b08      	ldr	r3, [pc, #32]	@ (8006870 <_strtod_l+0x860>)
 8006850:	4682      	mov	sl, r0
 8006852:	400b      	ands	r3, r1
 8006854:	468b      	mov	fp, r1
 8006856:	2b00      	cmp	r3, #0
 8006858:	f47f ae00 	bne.w	800645c <_strtod_l+0x44c>
 800685c:	2322      	movs	r3, #34	@ 0x22
 800685e:	9a05      	ldr	r2, [sp, #20]
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e5fb      	b.n	800645c <_strtod_l+0x44c>
 8006864:	08008128 	.word	0x08008128
 8006868:	fffffc02 	.word	0xfffffc02
 800686c:	39500000 	.word	0x39500000
 8006870:	7ff00000 	.word	0x7ff00000
 8006874:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006878:	d165      	bne.n	8006946 <_strtod_l+0x936>
 800687a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800687c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006880:	b35a      	cbz	r2, 80068da <_strtod_l+0x8ca>
 8006882:	4a99      	ldr	r2, [pc, #612]	@ (8006ae8 <_strtod_l+0xad8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d12b      	bne.n	80068e0 <_strtod_l+0x8d0>
 8006888:	9b08      	ldr	r3, [sp, #32]
 800688a:	4651      	mov	r1, sl
 800688c:	b303      	cbz	r3, 80068d0 <_strtod_l+0x8c0>
 800688e:	465a      	mov	r2, fp
 8006890:	4b96      	ldr	r3, [pc, #600]	@ (8006aec <_strtod_l+0xadc>)
 8006892:	4013      	ands	r3, r2
 8006894:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006898:	f04f 32ff 	mov.w	r2, #4294967295
 800689c:	d81b      	bhi.n	80068d6 <_strtod_l+0x8c6>
 800689e:	0d1b      	lsrs	r3, r3, #20
 80068a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80068a4:	fa02 f303 	lsl.w	r3, r2, r3
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d119      	bne.n	80068e0 <_strtod_l+0x8d0>
 80068ac:	4b90      	ldr	r3, [pc, #576]	@ (8006af0 <_strtod_l+0xae0>)
 80068ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d102      	bne.n	80068ba <_strtod_l+0x8aa>
 80068b4:	3101      	adds	r1, #1
 80068b6:	f43f adc6 	beq.w	8006446 <_strtod_l+0x436>
 80068ba:	f04f 0a00 	mov.w	sl, #0
 80068be:	4b8b      	ldr	r3, [pc, #556]	@ (8006aec <_strtod_l+0xadc>)
 80068c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068c2:	401a      	ands	r2, r3
 80068c4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80068c8:	9b08      	ldr	r3, [sp, #32]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1b9      	bne.n	8006842 <_strtod_l+0x832>
 80068ce:	e5c5      	b.n	800645c <_strtod_l+0x44c>
 80068d0:	f04f 33ff 	mov.w	r3, #4294967295
 80068d4:	e7e8      	b.n	80068a8 <_strtod_l+0x898>
 80068d6:	4613      	mov	r3, r2
 80068d8:	e7e6      	b.n	80068a8 <_strtod_l+0x898>
 80068da:	ea53 030a 	orrs.w	r3, r3, sl
 80068de:	d0a2      	beq.n	8006826 <_strtod_l+0x816>
 80068e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068e2:	b1db      	cbz	r3, 800691c <_strtod_l+0x90c>
 80068e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068e6:	4213      	tst	r3, r2
 80068e8:	d0ee      	beq.n	80068c8 <_strtod_l+0x8b8>
 80068ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068ec:	4650      	mov	r0, sl
 80068ee:	4659      	mov	r1, fp
 80068f0:	9a08      	ldr	r2, [sp, #32]
 80068f2:	b1bb      	cbz	r3, 8006924 <_strtod_l+0x914>
 80068f4:	f7ff fb68 	bl	8005fc8 <sulp>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006900:	f7f9 fc34 	bl	800016c <__adddf3>
 8006904:	4682      	mov	sl, r0
 8006906:	468b      	mov	fp, r1
 8006908:	e7de      	b.n	80068c8 <_strtod_l+0x8b8>
 800690a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800690e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006912:	f04f 3aff 	mov.w	sl, #4294967295
 8006916:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800691a:	e7d5      	b.n	80068c8 <_strtod_l+0x8b8>
 800691c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800691e:	ea13 0f0a 	tst.w	r3, sl
 8006922:	e7e1      	b.n	80068e8 <_strtod_l+0x8d8>
 8006924:	f7ff fb50 	bl	8005fc8 <sulp>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006930:	f7f9 fc1a 	bl	8000168 <__aeabi_dsub>
 8006934:	2200      	movs	r2, #0
 8006936:	2300      	movs	r3, #0
 8006938:	4682      	mov	sl, r0
 800693a:	468b      	mov	fp, r1
 800693c:	f7fa f834 	bl	80009a8 <__aeabi_dcmpeq>
 8006940:	2800      	cmp	r0, #0
 8006942:	d0c1      	beq.n	80068c8 <_strtod_l+0x8b8>
 8006944:	e615      	b.n	8006572 <_strtod_l+0x562>
 8006946:	4641      	mov	r1, r8
 8006948:	4620      	mov	r0, r4
 800694a:	f7ff fac9 	bl	8005ee0 <__ratio>
 800694e:	2200      	movs	r2, #0
 8006950:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006954:	4606      	mov	r6, r0
 8006956:	460f      	mov	r7, r1
 8006958:	f7fa f83a 	bl	80009d0 <__aeabi_dcmple>
 800695c:	2800      	cmp	r0, #0
 800695e:	d06d      	beq.n	8006a3c <_strtod_l+0xa2c>
 8006960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d178      	bne.n	8006a58 <_strtod_l+0xa48>
 8006966:	f1ba 0f00 	cmp.w	sl, #0
 800696a:	d156      	bne.n	8006a1a <_strtod_l+0xa0a>
 800696c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800696e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006972:	2b00      	cmp	r3, #0
 8006974:	d158      	bne.n	8006a28 <_strtod_l+0xa18>
 8006976:	2200      	movs	r2, #0
 8006978:	4630      	mov	r0, r6
 800697a:	4639      	mov	r1, r7
 800697c:	4b5d      	ldr	r3, [pc, #372]	@ (8006af4 <_strtod_l+0xae4>)
 800697e:	f7fa f81d 	bl	80009bc <__aeabi_dcmplt>
 8006982:	2800      	cmp	r0, #0
 8006984:	d157      	bne.n	8006a36 <_strtod_l+0xa26>
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	2200      	movs	r2, #0
 800698c:	4b5a      	ldr	r3, [pc, #360]	@ (8006af8 <_strtod_l+0xae8>)
 800698e:	f7f9 fda3 	bl	80004d8 <__aeabi_dmul>
 8006992:	4606      	mov	r6, r0
 8006994:	460f      	mov	r7, r1
 8006996:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800699a:	9606      	str	r6, [sp, #24]
 800699c:	9307      	str	r3, [sp, #28]
 800699e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069a2:	4d52      	ldr	r5, [pc, #328]	@ (8006aec <_strtod_l+0xadc>)
 80069a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80069a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069aa:	401d      	ands	r5, r3
 80069ac:	4b53      	ldr	r3, [pc, #332]	@ (8006afc <_strtod_l+0xaec>)
 80069ae:	429d      	cmp	r5, r3
 80069b0:	f040 80aa 	bne.w	8006b08 <_strtod_l+0xaf8>
 80069b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069b6:	4650      	mov	r0, sl
 80069b8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80069bc:	4659      	mov	r1, fp
 80069be:	f7ff f9cf 	bl	8005d60 <__ulp>
 80069c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069c6:	f7f9 fd87 	bl	80004d8 <__aeabi_dmul>
 80069ca:	4652      	mov	r2, sl
 80069cc:	465b      	mov	r3, fp
 80069ce:	f7f9 fbcd 	bl	800016c <__adddf3>
 80069d2:	460b      	mov	r3, r1
 80069d4:	4945      	ldr	r1, [pc, #276]	@ (8006aec <_strtod_l+0xadc>)
 80069d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006b00 <_strtod_l+0xaf0>)
 80069d8:	4019      	ands	r1, r3
 80069da:	4291      	cmp	r1, r2
 80069dc:	4682      	mov	sl, r0
 80069de:	d942      	bls.n	8006a66 <_strtod_l+0xa56>
 80069e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80069e2:	4b43      	ldr	r3, [pc, #268]	@ (8006af0 <_strtod_l+0xae0>)
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d103      	bne.n	80069f0 <_strtod_l+0x9e0>
 80069e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069ea:	3301      	adds	r3, #1
 80069ec:	f43f ad2b 	beq.w	8006446 <_strtod_l+0x436>
 80069f0:	f04f 3aff 	mov.w	sl, #4294967295
 80069f4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006af0 <_strtod_l+0xae0>
 80069f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069fa:	9805      	ldr	r0, [sp, #20]
 80069fc:	f7fe fe7e 	bl	80056fc <_Bfree>
 8006a00:	4649      	mov	r1, r9
 8006a02:	9805      	ldr	r0, [sp, #20]
 8006a04:	f7fe fe7a 	bl	80056fc <_Bfree>
 8006a08:	4641      	mov	r1, r8
 8006a0a:	9805      	ldr	r0, [sp, #20]
 8006a0c:	f7fe fe76 	bl	80056fc <_Bfree>
 8006a10:	4621      	mov	r1, r4
 8006a12:	9805      	ldr	r0, [sp, #20]
 8006a14:	f7fe fe72 	bl	80056fc <_Bfree>
 8006a18:	e618      	b.n	800664c <_strtod_l+0x63c>
 8006a1a:	f1ba 0f01 	cmp.w	sl, #1
 8006a1e:	d103      	bne.n	8006a28 <_strtod_l+0xa18>
 8006a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f43f ada5 	beq.w	8006572 <_strtod_l+0x562>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4b36      	ldr	r3, [pc, #216]	@ (8006b04 <_strtod_l+0xaf4>)
 8006a2c:	2600      	movs	r6, #0
 8006a2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a32:	4f30      	ldr	r7, [pc, #192]	@ (8006af4 <_strtod_l+0xae4>)
 8006a34:	e7b3      	b.n	800699e <_strtod_l+0x98e>
 8006a36:	2600      	movs	r6, #0
 8006a38:	4f2f      	ldr	r7, [pc, #188]	@ (8006af8 <_strtod_l+0xae8>)
 8006a3a:	e7ac      	b.n	8006996 <_strtod_l+0x986>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	4639      	mov	r1, r7
 8006a40:	4b2d      	ldr	r3, [pc, #180]	@ (8006af8 <_strtod_l+0xae8>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	f7f9 fd48 	bl	80004d8 <__aeabi_dmul>
 8006a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0a1      	beq.n	8006996 <_strtod_l+0x986>
 8006a52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006a56:	e7a2      	b.n	800699e <_strtod_l+0x98e>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4b26      	ldr	r3, [pc, #152]	@ (8006af4 <_strtod_l+0xae4>)
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	461f      	mov	r7, r3
 8006a60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a64:	e79b      	b.n	800699e <_strtod_l+0x98e>
 8006a66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1c1      	bne.n	80069f8 <_strtod_l+0x9e8>
 8006a74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a78:	0d1b      	lsrs	r3, r3, #20
 8006a7a:	051b      	lsls	r3, r3, #20
 8006a7c:	429d      	cmp	r5, r3
 8006a7e:	d1bb      	bne.n	80069f8 <_strtod_l+0x9e8>
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7fa f870 	bl	8000b68 <__aeabi_d2lz>
 8006a88:	f7f9 fcf8 	bl	800047c <__aeabi_l2d>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4630      	mov	r0, r6
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7f9 fb68 	bl	8000168 <__aeabi_dsub>
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006aa0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006aa6:	ea46 060a 	orr.w	r6, r6, sl
 8006aaa:	431e      	orrs	r6, r3
 8006aac:	d069      	beq.n	8006b82 <_strtod_l+0xb72>
 8006aae:	a30a      	add	r3, pc, #40	@ (adr r3, 8006ad8 <_strtod_l+0xac8>)
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	f7f9 ff82 	bl	80009bc <__aeabi_dcmplt>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	f47f accf 	bne.w	800645c <_strtod_l+0x44c>
 8006abe:	a308      	add	r3, pc, #32	@ (adr r3, 8006ae0 <_strtod_l+0xad0>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ac8:	f7f9 ff96 	bl	80009f8 <__aeabi_dcmpgt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d093      	beq.n	80069f8 <_strtod_l+0x9e8>
 8006ad0:	e4c4      	b.n	800645c <_strtod_l+0x44c>
 8006ad2:	bf00      	nop
 8006ad4:	f3af 8000 	nop.w
 8006ad8:	94a03595 	.word	0x94a03595
 8006adc:	3fdfffff 	.word	0x3fdfffff
 8006ae0:	35afe535 	.word	0x35afe535
 8006ae4:	3fe00000 	.word	0x3fe00000
 8006ae8:	000fffff 	.word	0x000fffff
 8006aec:	7ff00000 	.word	0x7ff00000
 8006af0:	7fefffff 	.word	0x7fefffff
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	3fe00000 	.word	0x3fe00000
 8006afc:	7fe00000 	.word	0x7fe00000
 8006b00:	7c9fffff 	.word	0x7c9fffff
 8006b04:	bff00000 	.word	0xbff00000
 8006b08:	9b08      	ldr	r3, [sp, #32]
 8006b0a:	b323      	cbz	r3, 8006b56 <_strtod_l+0xb46>
 8006b0c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006b10:	d821      	bhi.n	8006b56 <_strtod_l+0xb46>
 8006b12:	a327      	add	r3, pc, #156	@ (adr r3, 8006bb0 <_strtod_l+0xba0>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 ff58 	bl	80009d0 <__aeabi_dcmple>
 8006b20:	b1a0      	cbz	r0, 8006b4c <_strtod_l+0xb3c>
 8006b22:	4639      	mov	r1, r7
 8006b24:	4630      	mov	r0, r6
 8006b26:	f7f9 ffaf 	bl	8000a88 <__aeabi_d2uiz>
 8006b2a:	2801      	cmp	r0, #1
 8006b2c:	bf38      	it	cc
 8006b2e:	2001      	movcc	r0, #1
 8006b30:	f7f9 fc58 	bl	80003e4 <__aeabi_ui2d>
 8006b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b36:	4606      	mov	r6, r0
 8006b38:	460f      	mov	r7, r1
 8006b3a:	b9fb      	cbnz	r3, 8006b7c <_strtod_l+0xb6c>
 8006b3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b40:	9014      	str	r0, [sp, #80]	@ 0x50
 8006b42:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006b48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006b4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b4e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006b52:	1b5b      	subs	r3, r3, r5
 8006b54:	9311      	str	r3, [sp, #68]	@ 0x44
 8006b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b5a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006b5e:	f7ff f8ff 	bl	8005d60 <__ulp>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4650      	mov	r0, sl
 8006b68:	4659      	mov	r1, fp
 8006b6a:	f7f9 fcb5 	bl	80004d8 <__aeabi_dmul>
 8006b6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006b72:	f7f9 fafb 	bl	800016c <__adddf3>
 8006b76:	4682      	mov	sl, r0
 8006b78:	468b      	mov	fp, r1
 8006b7a:	e776      	b.n	8006a6a <_strtod_l+0xa5a>
 8006b7c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006b80:	e7e0      	b.n	8006b44 <_strtod_l+0xb34>
 8006b82:	a30d      	add	r3, pc, #52	@ (adr r3, 8006bb8 <_strtod_l+0xba8>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 ff18 	bl	80009bc <__aeabi_dcmplt>
 8006b8c:	e79e      	b.n	8006acc <_strtod_l+0xabc>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b94:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	f7ff ba77 	b.w	800608a <_strtod_l+0x7a>
 8006b9c:	2a65      	cmp	r2, #101	@ 0x65
 8006b9e:	f43f ab6e 	beq.w	800627e <_strtod_l+0x26e>
 8006ba2:	2a45      	cmp	r2, #69	@ 0x45
 8006ba4:	f43f ab6b 	beq.w	800627e <_strtod_l+0x26e>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f7ff bba6 	b.w	80062fa <_strtod_l+0x2ea>
 8006bae:	bf00      	nop
 8006bb0:	ffc00000 	.word	0xffc00000
 8006bb4:	41dfffff 	.word	0x41dfffff
 8006bb8:	94a03595 	.word	0x94a03595
 8006bbc:	3fcfffff 	.word	0x3fcfffff

08006bc0 <_strtod_r>:
 8006bc0:	4b01      	ldr	r3, [pc, #4]	@ (8006bc8 <_strtod_r+0x8>)
 8006bc2:	f7ff ba25 	b.w	8006010 <_strtod_l>
 8006bc6:	bf00      	nop
 8006bc8:	20000068 	.word	0x20000068

08006bcc <_strtol_l.constprop.0>:
 8006bcc:	2b24      	cmp	r3, #36	@ 0x24
 8006bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd2:	4686      	mov	lr, r0
 8006bd4:	4690      	mov	r8, r2
 8006bd6:	d801      	bhi.n	8006bdc <_strtol_l.constprop.0+0x10>
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d106      	bne.n	8006bea <_strtol_l.constprop.0+0x1e>
 8006bdc:	f7fd fdb2 	bl	8004744 <__errno>
 8006be0:	2316      	movs	r3, #22
 8006be2:	6003      	str	r3, [r0, #0]
 8006be4:	2000      	movs	r0, #0
 8006be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bea:	460d      	mov	r5, r1
 8006bec:	4833      	ldr	r0, [pc, #204]	@ (8006cbc <_strtol_l.constprop.0+0xf0>)
 8006bee:	462a      	mov	r2, r5
 8006bf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bf4:	5d06      	ldrb	r6, [r0, r4]
 8006bf6:	f016 0608 	ands.w	r6, r6, #8
 8006bfa:	d1f8      	bne.n	8006bee <_strtol_l.constprop.0+0x22>
 8006bfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8006bfe:	d12d      	bne.n	8006c5c <_strtol_l.constprop.0+0x90>
 8006c00:	2601      	movs	r6, #1
 8006c02:	782c      	ldrb	r4, [r5, #0]
 8006c04:	1c95      	adds	r5, r2, #2
 8006c06:	f033 0210 	bics.w	r2, r3, #16
 8006c0a:	d109      	bne.n	8006c20 <_strtol_l.constprop.0+0x54>
 8006c0c:	2c30      	cmp	r4, #48	@ 0x30
 8006c0e:	d12a      	bne.n	8006c66 <_strtol_l.constprop.0+0x9a>
 8006c10:	782a      	ldrb	r2, [r5, #0]
 8006c12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006c16:	2a58      	cmp	r2, #88	@ 0x58
 8006c18:	d125      	bne.n	8006c66 <_strtol_l.constprop.0+0x9a>
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	786c      	ldrb	r4, [r5, #1]
 8006c1e:	3502      	adds	r5, #2
 8006c20:	2200      	movs	r2, #0
 8006c22:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006c26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006c2a:	fbbc f9f3 	udiv	r9, ip, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	fb03 ca19 	mls	sl, r3, r9, ip
 8006c34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006c38:	2f09      	cmp	r7, #9
 8006c3a:	d81b      	bhi.n	8006c74 <_strtol_l.constprop.0+0xa8>
 8006c3c:	463c      	mov	r4, r7
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	dd27      	ble.n	8006c92 <_strtol_l.constprop.0+0xc6>
 8006c42:	1c57      	adds	r7, r2, #1
 8006c44:	d007      	beq.n	8006c56 <_strtol_l.constprop.0+0x8a>
 8006c46:	4581      	cmp	r9, r0
 8006c48:	d320      	bcc.n	8006c8c <_strtol_l.constprop.0+0xc0>
 8006c4a:	d101      	bne.n	8006c50 <_strtol_l.constprop.0+0x84>
 8006c4c:	45a2      	cmp	sl, r4
 8006c4e:	db1d      	blt.n	8006c8c <_strtol_l.constprop.0+0xc0>
 8006c50:	2201      	movs	r2, #1
 8006c52:	fb00 4003 	mla	r0, r0, r3, r4
 8006c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c5a:	e7eb      	b.n	8006c34 <_strtol_l.constprop.0+0x68>
 8006c5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8006c5e:	bf04      	itt	eq
 8006c60:	782c      	ldrbeq	r4, [r5, #0]
 8006c62:	1c95      	addeq	r5, r2, #2
 8006c64:	e7cf      	b.n	8006c06 <_strtol_l.constprop.0+0x3a>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1da      	bne.n	8006c20 <_strtol_l.constprop.0+0x54>
 8006c6a:	2c30      	cmp	r4, #48	@ 0x30
 8006c6c:	bf0c      	ite	eq
 8006c6e:	2308      	moveq	r3, #8
 8006c70:	230a      	movne	r3, #10
 8006c72:	e7d5      	b.n	8006c20 <_strtol_l.constprop.0+0x54>
 8006c74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006c78:	2f19      	cmp	r7, #25
 8006c7a:	d801      	bhi.n	8006c80 <_strtol_l.constprop.0+0xb4>
 8006c7c:	3c37      	subs	r4, #55	@ 0x37
 8006c7e:	e7de      	b.n	8006c3e <_strtol_l.constprop.0+0x72>
 8006c80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006c84:	2f19      	cmp	r7, #25
 8006c86:	d804      	bhi.n	8006c92 <_strtol_l.constprop.0+0xc6>
 8006c88:	3c57      	subs	r4, #87	@ 0x57
 8006c8a:	e7d8      	b.n	8006c3e <_strtol_l.constprop.0+0x72>
 8006c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c90:	e7e1      	b.n	8006c56 <_strtol_l.constprop.0+0x8a>
 8006c92:	1c53      	adds	r3, r2, #1
 8006c94:	d108      	bne.n	8006ca8 <_strtol_l.constprop.0+0xdc>
 8006c96:	2322      	movs	r3, #34	@ 0x22
 8006c98:	4660      	mov	r0, ip
 8006c9a:	f8ce 3000 	str.w	r3, [lr]
 8006c9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ca2:	d0a0      	beq.n	8006be6 <_strtol_l.constprop.0+0x1a>
 8006ca4:	1e69      	subs	r1, r5, #1
 8006ca6:	e006      	b.n	8006cb6 <_strtol_l.constprop.0+0xea>
 8006ca8:	b106      	cbz	r6, 8006cac <_strtol_l.constprop.0+0xe0>
 8006caa:	4240      	negs	r0, r0
 8006cac:	f1b8 0f00 	cmp.w	r8, #0
 8006cb0:	d099      	beq.n	8006be6 <_strtol_l.constprop.0+0x1a>
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	d1f6      	bne.n	8006ca4 <_strtol_l.constprop.0+0xd8>
 8006cb6:	f8c8 1000 	str.w	r1, [r8]
 8006cba:	e794      	b.n	8006be6 <_strtol_l.constprop.0+0x1a>
 8006cbc:	08008151 	.word	0x08008151

08006cc0 <_strtol_r>:
 8006cc0:	f7ff bf84 	b.w	8006bcc <_strtol_l.constprop.0>

08006cc4 <__ssputs_r>:
 8006cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	461f      	mov	r7, r3
 8006cca:	688e      	ldr	r6, [r1, #8]
 8006ccc:	4682      	mov	sl, r0
 8006cce:	42be      	cmp	r6, r7
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	4690      	mov	r8, r2
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	d82d      	bhi.n	8006d34 <__ssputs_r+0x70>
 8006cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ce0:	d026      	beq.n	8006d30 <__ssputs_r+0x6c>
 8006ce2:	6965      	ldr	r5, [r4, #20]
 8006ce4:	6909      	ldr	r1, [r1, #16]
 8006ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cea:	eba3 0901 	sub.w	r9, r3, r1
 8006cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cf2:	1c7b      	adds	r3, r7, #1
 8006cf4:	444b      	add	r3, r9
 8006cf6:	106d      	asrs	r5, r5, #1
 8006cf8:	429d      	cmp	r5, r3
 8006cfa:	bf38      	it	cc
 8006cfc:	461d      	movcc	r5, r3
 8006cfe:	0553      	lsls	r3, r2, #21
 8006d00:	d527      	bpl.n	8006d52 <__ssputs_r+0x8e>
 8006d02:	4629      	mov	r1, r5
 8006d04:	f7fe fc2e 	bl	8005564 <_malloc_r>
 8006d08:	4606      	mov	r6, r0
 8006d0a:	b360      	cbz	r0, 8006d66 <__ssputs_r+0xa2>
 8006d0c:	464a      	mov	r2, r9
 8006d0e:	6921      	ldr	r1, [r4, #16]
 8006d10:	f7fd fd53 	bl	80047ba <memcpy>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	6126      	str	r6, [r4, #16]
 8006d22:	444e      	add	r6, r9
 8006d24:	6026      	str	r6, [r4, #0]
 8006d26:	463e      	mov	r6, r7
 8006d28:	6165      	str	r5, [r4, #20]
 8006d2a:	eba5 0509 	sub.w	r5, r5, r9
 8006d2e:	60a5      	str	r5, [r4, #8]
 8006d30:	42be      	cmp	r6, r7
 8006d32:	d900      	bls.n	8006d36 <__ssputs_r+0x72>
 8006d34:	463e      	mov	r6, r7
 8006d36:	4632      	mov	r2, r6
 8006d38:	4641      	mov	r1, r8
 8006d3a:	6820      	ldr	r0, [r4, #0]
 8006d3c:	f000 f9c2 	bl	80070c4 <memmove>
 8006d40:	2000      	movs	r0, #0
 8006d42:	68a3      	ldr	r3, [r4, #8]
 8006d44:	1b9b      	subs	r3, r3, r6
 8006d46:	60a3      	str	r3, [r4, #8]
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	4433      	add	r3, r6
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	462a      	mov	r2, r5
 8006d54:	f000 fd75 	bl	8007842 <_realloc_r>
 8006d58:	4606      	mov	r6, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d1e0      	bne.n	8006d20 <__ssputs_r+0x5c>
 8006d5e:	4650      	mov	r0, sl
 8006d60:	6921      	ldr	r1, [r4, #16]
 8006d62:	f7fe fb8d 	bl	8005480 <_free_r>
 8006d66:	230c      	movs	r3, #12
 8006d68:	f8ca 3000 	str.w	r3, [sl]
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d76:	81a3      	strh	r3, [r4, #12]
 8006d78:	e7e9      	b.n	8006d4e <__ssputs_r+0x8a>
	...

08006d7c <_svfiprintf_r>:
 8006d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d80:	4698      	mov	r8, r3
 8006d82:	898b      	ldrh	r3, [r1, #12]
 8006d84:	4607      	mov	r7, r0
 8006d86:	061b      	lsls	r3, r3, #24
 8006d88:	460d      	mov	r5, r1
 8006d8a:	4614      	mov	r4, r2
 8006d8c:	b09d      	sub	sp, #116	@ 0x74
 8006d8e:	d510      	bpl.n	8006db2 <_svfiprintf_r+0x36>
 8006d90:	690b      	ldr	r3, [r1, #16]
 8006d92:	b973      	cbnz	r3, 8006db2 <_svfiprintf_r+0x36>
 8006d94:	2140      	movs	r1, #64	@ 0x40
 8006d96:	f7fe fbe5 	bl	8005564 <_malloc_r>
 8006d9a:	6028      	str	r0, [r5, #0]
 8006d9c:	6128      	str	r0, [r5, #16]
 8006d9e:	b930      	cbnz	r0, 8006dae <_svfiprintf_r+0x32>
 8006da0:	230c      	movs	r3, #12
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	b01d      	add	sp, #116	@ 0x74
 8006daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dae:	2340      	movs	r3, #64	@ 0x40
 8006db0:	616b      	str	r3, [r5, #20]
 8006db2:	2300      	movs	r3, #0
 8006db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db6:	2320      	movs	r3, #32
 8006db8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006dbc:	2330      	movs	r3, #48	@ 0x30
 8006dbe:	f04f 0901 	mov.w	r9, #1
 8006dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dc6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006f60 <_svfiprintf_r+0x1e4>
 8006dca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dce:	4623      	mov	r3, r4
 8006dd0:	469a      	mov	sl, r3
 8006dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd6:	b10a      	cbz	r2, 8006ddc <_svfiprintf_r+0x60>
 8006dd8:	2a25      	cmp	r2, #37	@ 0x25
 8006dda:	d1f9      	bne.n	8006dd0 <_svfiprintf_r+0x54>
 8006ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8006de0:	d00b      	beq.n	8006dfa <_svfiprintf_r+0x7e>
 8006de2:	465b      	mov	r3, fp
 8006de4:	4622      	mov	r2, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7ff ff6b 	bl	8006cc4 <__ssputs_r>
 8006dee:	3001      	adds	r0, #1
 8006df0:	f000 80a7 	beq.w	8006f42 <_svfiprintf_r+0x1c6>
 8006df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df6:	445a      	add	r2, fp
 8006df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 809f 	beq.w	8006f42 <_svfiprintf_r+0x1c6>
 8006e04:	2300      	movs	r3, #0
 8006e06:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e0e:	f10a 0a01 	add.w	sl, sl, #1
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	9307      	str	r3, [sp, #28]
 8006e16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e1c:	4654      	mov	r4, sl
 8006e1e:	2205      	movs	r2, #5
 8006e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e24:	484e      	ldr	r0, [pc, #312]	@ (8006f60 <_svfiprintf_r+0x1e4>)
 8006e26:	f7fd fcba 	bl	800479e <memchr>
 8006e2a:	9a04      	ldr	r2, [sp, #16]
 8006e2c:	b9d8      	cbnz	r0, 8006e66 <_svfiprintf_r+0xea>
 8006e2e:	06d0      	lsls	r0, r2, #27
 8006e30:	bf44      	itt	mi
 8006e32:	2320      	movmi	r3, #32
 8006e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e38:	0711      	lsls	r1, r2, #28
 8006e3a:	bf44      	itt	mi
 8006e3c:	232b      	movmi	r3, #43	@ 0x2b
 8006e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e42:	f89a 3000 	ldrb.w	r3, [sl]
 8006e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e48:	d015      	beq.n	8006e76 <_svfiprintf_r+0xfa>
 8006e4a:	4654      	mov	r4, sl
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f04f 0c0a 	mov.w	ip, #10
 8006e52:	9a07      	ldr	r2, [sp, #28]
 8006e54:	4621      	mov	r1, r4
 8006e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e5a:	3b30      	subs	r3, #48	@ 0x30
 8006e5c:	2b09      	cmp	r3, #9
 8006e5e:	d94b      	bls.n	8006ef8 <_svfiprintf_r+0x17c>
 8006e60:	b1b0      	cbz	r0, 8006e90 <_svfiprintf_r+0x114>
 8006e62:	9207      	str	r2, [sp, #28]
 8006e64:	e014      	b.n	8006e90 <_svfiprintf_r+0x114>
 8006e66:	eba0 0308 	sub.w	r3, r0, r8
 8006e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	46a2      	mov	sl, r4
 8006e72:	9304      	str	r3, [sp, #16]
 8006e74:	e7d2      	b.n	8006e1c <_svfiprintf_r+0xa0>
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	1d19      	adds	r1, r3, #4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	9103      	str	r1, [sp, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bfbb      	ittet	lt
 8006e82:	425b      	neglt	r3, r3
 8006e84:	f042 0202 	orrlt.w	r2, r2, #2
 8006e88:	9307      	strge	r3, [sp, #28]
 8006e8a:	9307      	strlt	r3, [sp, #28]
 8006e8c:	bfb8      	it	lt
 8006e8e:	9204      	strlt	r2, [sp, #16]
 8006e90:	7823      	ldrb	r3, [r4, #0]
 8006e92:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e94:	d10a      	bne.n	8006eac <_svfiprintf_r+0x130>
 8006e96:	7863      	ldrb	r3, [r4, #1]
 8006e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e9a:	d132      	bne.n	8006f02 <_svfiprintf_r+0x186>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	3402      	adds	r4, #2
 8006ea0:	1d1a      	adds	r2, r3, #4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	9203      	str	r2, [sp, #12]
 8006ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006eaa:	9305      	str	r3, [sp, #20]
 8006eac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006f64 <_svfiprintf_r+0x1e8>
 8006eb0:	2203      	movs	r2, #3
 8006eb2:	4650      	mov	r0, sl
 8006eb4:	7821      	ldrb	r1, [r4, #0]
 8006eb6:	f7fd fc72 	bl	800479e <memchr>
 8006eba:	b138      	cbz	r0, 8006ecc <_svfiprintf_r+0x150>
 8006ebc:	2240      	movs	r2, #64	@ 0x40
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	eba0 000a 	sub.w	r0, r0, sl
 8006ec4:	4082      	lsls	r2, r0
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	3401      	adds	r4, #1
 8006eca:	9304      	str	r3, [sp, #16]
 8006ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed0:	2206      	movs	r2, #6
 8006ed2:	4825      	ldr	r0, [pc, #148]	@ (8006f68 <_svfiprintf_r+0x1ec>)
 8006ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ed8:	f7fd fc61 	bl	800479e <memchr>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d036      	beq.n	8006f4e <_svfiprintf_r+0x1d2>
 8006ee0:	4b22      	ldr	r3, [pc, #136]	@ (8006f6c <_svfiprintf_r+0x1f0>)
 8006ee2:	bb1b      	cbnz	r3, 8006f2c <_svfiprintf_r+0x1b0>
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	3307      	adds	r3, #7
 8006ee8:	f023 0307 	bic.w	r3, r3, #7
 8006eec:	3308      	adds	r3, #8
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef2:	4433      	add	r3, r6
 8006ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef6:	e76a      	b.n	8006dce <_svfiprintf_r+0x52>
 8006ef8:	460c      	mov	r4, r1
 8006efa:	2001      	movs	r0, #1
 8006efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f00:	e7a8      	b.n	8006e54 <_svfiprintf_r+0xd8>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f04f 0c0a 	mov.w	ip, #10
 8006f08:	4619      	mov	r1, r3
 8006f0a:	3401      	adds	r4, #1
 8006f0c:	9305      	str	r3, [sp, #20]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f14:	3a30      	subs	r2, #48	@ 0x30
 8006f16:	2a09      	cmp	r2, #9
 8006f18:	d903      	bls.n	8006f22 <_svfiprintf_r+0x1a6>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0c6      	beq.n	8006eac <_svfiprintf_r+0x130>
 8006f1e:	9105      	str	r1, [sp, #20]
 8006f20:	e7c4      	b.n	8006eac <_svfiprintf_r+0x130>
 8006f22:	4604      	mov	r4, r0
 8006f24:	2301      	movs	r3, #1
 8006f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f2a:	e7f0      	b.n	8006f0e <_svfiprintf_r+0x192>
 8006f2c:	ab03      	add	r3, sp, #12
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	462a      	mov	r2, r5
 8006f32:	4638      	mov	r0, r7
 8006f34:	4b0e      	ldr	r3, [pc, #56]	@ (8006f70 <_svfiprintf_r+0x1f4>)
 8006f36:	a904      	add	r1, sp, #16
 8006f38:	f7fc fcbe 	bl	80038b8 <_printf_float>
 8006f3c:	1c42      	adds	r2, r0, #1
 8006f3e:	4606      	mov	r6, r0
 8006f40:	d1d6      	bne.n	8006ef0 <_svfiprintf_r+0x174>
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	065b      	lsls	r3, r3, #25
 8006f46:	f53f af2d 	bmi.w	8006da4 <_svfiprintf_r+0x28>
 8006f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f4c:	e72c      	b.n	8006da8 <_svfiprintf_r+0x2c>
 8006f4e:	ab03      	add	r3, sp, #12
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	462a      	mov	r2, r5
 8006f54:	4638      	mov	r0, r7
 8006f56:	4b06      	ldr	r3, [pc, #24]	@ (8006f70 <_svfiprintf_r+0x1f4>)
 8006f58:	a904      	add	r1, sp, #16
 8006f5a:	f7fc ff4b 	bl	8003df4 <_printf_i>
 8006f5e:	e7ed      	b.n	8006f3c <_svfiprintf_r+0x1c0>
 8006f60:	08008251 	.word	0x08008251
 8006f64:	08008257 	.word	0x08008257
 8006f68:	0800825b 	.word	0x0800825b
 8006f6c:	080038b9 	.word	0x080038b9
 8006f70:	08006cc5 	.word	0x08006cc5

08006f74 <__sflush_r>:
 8006f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	0716      	lsls	r6, r2, #28
 8006f7c:	4605      	mov	r5, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	d454      	bmi.n	800702c <__sflush_r+0xb8>
 8006f82:	684b      	ldr	r3, [r1, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dc02      	bgt.n	8006f8e <__sflush_r+0x1a>
 8006f88:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	dd48      	ble.n	8007020 <__sflush_r+0xac>
 8006f8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f90:	2e00      	cmp	r6, #0
 8006f92:	d045      	beq.n	8007020 <__sflush_r+0xac>
 8006f94:	2300      	movs	r3, #0
 8006f96:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f9a:	682f      	ldr	r7, [r5, #0]
 8006f9c:	6a21      	ldr	r1, [r4, #32]
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	d030      	beq.n	8007004 <__sflush_r+0x90>
 8006fa2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	0759      	lsls	r1, r3, #29
 8006fa8:	d505      	bpl.n	8006fb6 <__sflush_r+0x42>
 8006faa:	6863      	ldr	r3, [r4, #4]
 8006fac:	1ad2      	subs	r2, r2, r3
 8006fae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fb0:	b10b      	cbz	r3, 8006fb6 <__sflush_r+0x42>
 8006fb2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006fb4:	1ad2      	subs	r2, r2, r3
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	4628      	mov	r0, r5
 8006fba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fbc:	6a21      	ldr	r1, [r4, #32]
 8006fbe:	47b0      	blx	r6
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	d106      	bne.n	8006fd4 <__sflush_r+0x60>
 8006fc6:	6829      	ldr	r1, [r5, #0]
 8006fc8:	291d      	cmp	r1, #29
 8006fca:	d82b      	bhi.n	8007024 <__sflush_r+0xb0>
 8006fcc:	4a28      	ldr	r2, [pc, #160]	@ (8007070 <__sflush_r+0xfc>)
 8006fce:	410a      	asrs	r2, r1
 8006fd0:	07d6      	lsls	r6, r2, #31
 8006fd2:	d427      	bmi.n	8007024 <__sflush_r+0xb0>
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	6062      	str	r2, [r4, #4]
 8006fd8:	6922      	ldr	r2, [r4, #16]
 8006fda:	04d9      	lsls	r1, r3, #19
 8006fdc:	6022      	str	r2, [r4, #0]
 8006fde:	d504      	bpl.n	8006fea <__sflush_r+0x76>
 8006fe0:	1c42      	adds	r2, r0, #1
 8006fe2:	d101      	bne.n	8006fe8 <__sflush_r+0x74>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b903      	cbnz	r3, 8006fea <__sflush_r+0x76>
 8006fe8:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fec:	602f      	str	r7, [r5, #0]
 8006fee:	b1b9      	cbz	r1, 8007020 <__sflush_r+0xac>
 8006ff0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	d002      	beq.n	8006ffe <__sflush_r+0x8a>
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f7fe fa41 	bl	8005480 <_free_r>
 8006ffe:	2300      	movs	r3, #0
 8007000:	6363      	str	r3, [r4, #52]	@ 0x34
 8007002:	e00d      	b.n	8007020 <__sflush_r+0xac>
 8007004:	2301      	movs	r3, #1
 8007006:	4628      	mov	r0, r5
 8007008:	47b0      	blx	r6
 800700a:	4602      	mov	r2, r0
 800700c:	1c50      	adds	r0, r2, #1
 800700e:	d1c9      	bne.n	8006fa4 <__sflush_r+0x30>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0c6      	beq.n	8006fa4 <__sflush_r+0x30>
 8007016:	2b1d      	cmp	r3, #29
 8007018:	d001      	beq.n	800701e <__sflush_r+0xaa>
 800701a:	2b16      	cmp	r3, #22
 800701c:	d11d      	bne.n	800705a <__sflush_r+0xe6>
 800701e:	602f      	str	r7, [r5, #0]
 8007020:	2000      	movs	r0, #0
 8007022:	e021      	b.n	8007068 <__sflush_r+0xf4>
 8007024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007028:	b21b      	sxth	r3, r3
 800702a:	e01a      	b.n	8007062 <__sflush_r+0xee>
 800702c:	690f      	ldr	r7, [r1, #16]
 800702e:	2f00      	cmp	r7, #0
 8007030:	d0f6      	beq.n	8007020 <__sflush_r+0xac>
 8007032:	0793      	lsls	r3, r2, #30
 8007034:	bf18      	it	ne
 8007036:	2300      	movne	r3, #0
 8007038:	680e      	ldr	r6, [r1, #0]
 800703a:	bf08      	it	eq
 800703c:	694b      	ldreq	r3, [r1, #20]
 800703e:	1bf6      	subs	r6, r6, r7
 8007040:	600f      	str	r7, [r1, #0]
 8007042:	608b      	str	r3, [r1, #8]
 8007044:	2e00      	cmp	r6, #0
 8007046:	ddeb      	ble.n	8007020 <__sflush_r+0xac>
 8007048:	4633      	mov	r3, r6
 800704a:	463a      	mov	r2, r7
 800704c:	4628      	mov	r0, r5
 800704e:	6a21      	ldr	r1, [r4, #32]
 8007050:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007054:	47e0      	blx	ip
 8007056:	2800      	cmp	r0, #0
 8007058:	dc07      	bgt.n	800706a <__sflush_r+0xf6>
 800705a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007062:	f04f 30ff 	mov.w	r0, #4294967295
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800706a:	4407      	add	r7, r0
 800706c:	1a36      	subs	r6, r6, r0
 800706e:	e7e9      	b.n	8007044 <__sflush_r+0xd0>
 8007070:	dfbffffe 	.word	0xdfbffffe

08007074 <_fflush_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	690b      	ldr	r3, [r1, #16]
 8007078:	4605      	mov	r5, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b913      	cbnz	r3, 8007084 <_fflush_r+0x10>
 800707e:	2500      	movs	r5, #0
 8007080:	4628      	mov	r0, r5
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	b118      	cbz	r0, 800708e <_fflush_r+0x1a>
 8007086:	6a03      	ldr	r3, [r0, #32]
 8007088:	b90b      	cbnz	r3, 800708e <_fflush_r+0x1a>
 800708a:	f7fd fa6f 	bl	800456c <__sinit>
 800708e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f3      	beq.n	800707e <_fflush_r+0xa>
 8007096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007098:	07d0      	lsls	r0, r2, #31
 800709a:	d404      	bmi.n	80070a6 <_fflush_r+0x32>
 800709c:	0599      	lsls	r1, r3, #22
 800709e:	d402      	bmi.n	80070a6 <_fflush_r+0x32>
 80070a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070a2:	f7fd fb7a 	bl	800479a <__retarget_lock_acquire_recursive>
 80070a6:	4628      	mov	r0, r5
 80070a8:	4621      	mov	r1, r4
 80070aa:	f7ff ff63 	bl	8006f74 <__sflush_r>
 80070ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070b0:	4605      	mov	r5, r0
 80070b2:	07da      	lsls	r2, r3, #31
 80070b4:	d4e4      	bmi.n	8007080 <_fflush_r+0xc>
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	059b      	lsls	r3, r3, #22
 80070ba:	d4e1      	bmi.n	8007080 <_fflush_r+0xc>
 80070bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070be:	f7fd fb6d 	bl	800479c <__retarget_lock_release_recursive>
 80070c2:	e7dd      	b.n	8007080 <_fflush_r+0xc>

080070c4 <memmove>:
 80070c4:	4288      	cmp	r0, r1
 80070c6:	b510      	push	{r4, lr}
 80070c8:	eb01 0402 	add.w	r4, r1, r2
 80070cc:	d902      	bls.n	80070d4 <memmove+0x10>
 80070ce:	4284      	cmp	r4, r0
 80070d0:	4623      	mov	r3, r4
 80070d2:	d807      	bhi.n	80070e4 <memmove+0x20>
 80070d4:	1e43      	subs	r3, r0, #1
 80070d6:	42a1      	cmp	r1, r4
 80070d8:	d008      	beq.n	80070ec <memmove+0x28>
 80070da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070e2:	e7f8      	b.n	80070d6 <memmove+0x12>
 80070e4:	4601      	mov	r1, r0
 80070e6:	4402      	add	r2, r0
 80070e8:	428a      	cmp	r2, r1
 80070ea:	d100      	bne.n	80070ee <memmove+0x2a>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f6:	e7f7      	b.n	80070e8 <memmove+0x24>

080070f8 <strncmp>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	b16a      	cbz	r2, 8007118 <strncmp+0x20>
 80070fc:	3901      	subs	r1, #1
 80070fe:	1884      	adds	r4, r0, r2
 8007100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007104:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007108:	429a      	cmp	r2, r3
 800710a:	d103      	bne.n	8007114 <strncmp+0x1c>
 800710c:	42a0      	cmp	r0, r4
 800710e:	d001      	beq.n	8007114 <strncmp+0x1c>
 8007110:	2a00      	cmp	r2, #0
 8007112:	d1f5      	bne.n	8007100 <strncmp+0x8>
 8007114:	1ad0      	subs	r0, r2, r3
 8007116:	bd10      	pop	{r4, pc}
 8007118:	4610      	mov	r0, r2
 800711a:	e7fc      	b.n	8007116 <strncmp+0x1e>

0800711c <_sbrk_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	2300      	movs	r3, #0
 8007120:	4d05      	ldr	r5, [pc, #20]	@ (8007138 <_sbrk_r+0x1c>)
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7fa fbae 	bl	8001888 <_sbrk>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_sbrk_r+0x1a>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_sbrk_r+0x1a>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	2000046c 	.word	0x2000046c

0800713c <nan>:
 800713c:	2000      	movs	r0, #0
 800713e:	4901      	ldr	r1, [pc, #4]	@ (8007144 <nan+0x8>)
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	7ff80000 	.word	0x7ff80000

08007148 <__assert_func>:
 8007148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800714a:	4614      	mov	r4, r2
 800714c:	461a      	mov	r2, r3
 800714e:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <__assert_func+0x2c>)
 8007150:	4605      	mov	r5, r0
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68d8      	ldr	r0, [r3, #12]
 8007156:	b954      	cbnz	r4, 800716e <__assert_func+0x26>
 8007158:	4b07      	ldr	r3, [pc, #28]	@ (8007178 <__assert_func+0x30>)
 800715a:	461c      	mov	r4, r3
 800715c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007160:	9100      	str	r1, [sp, #0]
 8007162:	462b      	mov	r3, r5
 8007164:	4905      	ldr	r1, [pc, #20]	@ (800717c <__assert_func+0x34>)
 8007166:	f000 fba7 	bl	80078b8 <fiprintf>
 800716a:	f000 fbb7 	bl	80078dc <abort>
 800716e:	4b04      	ldr	r3, [pc, #16]	@ (8007180 <__assert_func+0x38>)
 8007170:	e7f4      	b.n	800715c <__assert_func+0x14>
 8007172:	bf00      	nop
 8007174:	20000018 	.word	0x20000018
 8007178:	080082a5 	.word	0x080082a5
 800717c:	08008277 	.word	0x08008277
 8007180:	0800826a 	.word	0x0800826a

08007184 <_calloc_r>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	fba1 5402 	umull	r5, r4, r1, r2
 800718a:	b93c      	cbnz	r4, 800719c <_calloc_r+0x18>
 800718c:	4629      	mov	r1, r5
 800718e:	f7fe f9e9 	bl	8005564 <_malloc_r>
 8007192:	4606      	mov	r6, r0
 8007194:	b928      	cbnz	r0, 80071a2 <_calloc_r+0x1e>
 8007196:	2600      	movs	r6, #0
 8007198:	4630      	mov	r0, r6
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	220c      	movs	r2, #12
 800719e:	6002      	str	r2, [r0, #0]
 80071a0:	e7f9      	b.n	8007196 <_calloc_r+0x12>
 80071a2:	462a      	mov	r2, r5
 80071a4:	4621      	mov	r1, r4
 80071a6:	f7fd fa7a 	bl	800469e <memset>
 80071aa:	e7f5      	b.n	8007198 <_calloc_r+0x14>

080071ac <rshift>:
 80071ac:	6903      	ldr	r3, [r0, #16]
 80071ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80071b6:	f100 0414 	add.w	r4, r0, #20
 80071ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80071be:	dd46      	ble.n	800724e <rshift+0xa2>
 80071c0:	f011 011f 	ands.w	r1, r1, #31
 80071c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80071c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80071cc:	d10c      	bne.n	80071e8 <rshift+0x3c>
 80071ce:	4629      	mov	r1, r5
 80071d0:	f100 0710 	add.w	r7, r0, #16
 80071d4:	42b1      	cmp	r1, r6
 80071d6:	d335      	bcc.n	8007244 <rshift+0x98>
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	1eea      	subs	r2, r5, #3
 80071de:	4296      	cmp	r6, r2
 80071e0:	bf38      	it	cc
 80071e2:	2300      	movcc	r3, #0
 80071e4:	4423      	add	r3, r4
 80071e6:	e015      	b.n	8007214 <rshift+0x68>
 80071e8:	46a1      	mov	r9, r4
 80071ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071ee:	f1c1 0820 	rsb	r8, r1, #32
 80071f2:	40cf      	lsrs	r7, r1
 80071f4:	f105 0e04 	add.w	lr, r5, #4
 80071f8:	4576      	cmp	r6, lr
 80071fa:	46f4      	mov	ip, lr
 80071fc:	d816      	bhi.n	800722c <rshift+0x80>
 80071fe:	1a9a      	subs	r2, r3, r2
 8007200:	0092      	lsls	r2, r2, #2
 8007202:	3a04      	subs	r2, #4
 8007204:	3501      	adds	r5, #1
 8007206:	42ae      	cmp	r6, r5
 8007208:	bf38      	it	cc
 800720a:	2200      	movcc	r2, #0
 800720c:	18a3      	adds	r3, r4, r2
 800720e:	50a7      	str	r7, [r4, r2]
 8007210:	b107      	cbz	r7, 8007214 <rshift+0x68>
 8007212:	3304      	adds	r3, #4
 8007214:	42a3      	cmp	r3, r4
 8007216:	eba3 0204 	sub.w	r2, r3, r4
 800721a:	bf08      	it	eq
 800721c:	2300      	moveq	r3, #0
 800721e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007222:	6102      	str	r2, [r0, #16]
 8007224:	bf08      	it	eq
 8007226:	6143      	streq	r3, [r0, #20]
 8007228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800722c:	f8dc c000 	ldr.w	ip, [ip]
 8007230:	fa0c fc08 	lsl.w	ip, ip, r8
 8007234:	ea4c 0707 	orr.w	r7, ip, r7
 8007238:	f849 7b04 	str.w	r7, [r9], #4
 800723c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007240:	40cf      	lsrs	r7, r1
 8007242:	e7d9      	b.n	80071f8 <rshift+0x4c>
 8007244:	f851 cb04 	ldr.w	ip, [r1], #4
 8007248:	f847 cf04 	str.w	ip, [r7, #4]!
 800724c:	e7c2      	b.n	80071d4 <rshift+0x28>
 800724e:	4623      	mov	r3, r4
 8007250:	e7e0      	b.n	8007214 <rshift+0x68>

08007252 <__hexdig_fun>:
 8007252:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007256:	2b09      	cmp	r3, #9
 8007258:	d802      	bhi.n	8007260 <__hexdig_fun+0xe>
 800725a:	3820      	subs	r0, #32
 800725c:	b2c0      	uxtb	r0, r0
 800725e:	4770      	bx	lr
 8007260:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007264:	2b05      	cmp	r3, #5
 8007266:	d801      	bhi.n	800726c <__hexdig_fun+0x1a>
 8007268:	3847      	subs	r0, #71	@ 0x47
 800726a:	e7f7      	b.n	800725c <__hexdig_fun+0xa>
 800726c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007270:	2b05      	cmp	r3, #5
 8007272:	d801      	bhi.n	8007278 <__hexdig_fun+0x26>
 8007274:	3827      	subs	r0, #39	@ 0x27
 8007276:	e7f1      	b.n	800725c <__hexdig_fun+0xa>
 8007278:	2000      	movs	r0, #0
 800727a:	4770      	bx	lr

0800727c <__gethex>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	468a      	mov	sl, r1
 8007282:	4690      	mov	r8, r2
 8007284:	b085      	sub	sp, #20
 8007286:	9302      	str	r3, [sp, #8]
 8007288:	680b      	ldr	r3, [r1, #0]
 800728a:	9001      	str	r0, [sp, #4]
 800728c:	1c9c      	adds	r4, r3, #2
 800728e:	46a1      	mov	r9, r4
 8007290:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007294:	2830      	cmp	r0, #48	@ 0x30
 8007296:	d0fa      	beq.n	800728e <__gethex+0x12>
 8007298:	eba9 0303 	sub.w	r3, r9, r3
 800729c:	f1a3 0b02 	sub.w	fp, r3, #2
 80072a0:	f7ff ffd7 	bl	8007252 <__hexdig_fun>
 80072a4:	4605      	mov	r5, r0
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d168      	bne.n	800737c <__gethex+0x100>
 80072aa:	2201      	movs	r2, #1
 80072ac:	4648      	mov	r0, r9
 80072ae:	499f      	ldr	r1, [pc, #636]	@ (800752c <__gethex+0x2b0>)
 80072b0:	f7ff ff22 	bl	80070f8 <strncmp>
 80072b4:	4607      	mov	r7, r0
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d167      	bne.n	800738a <__gethex+0x10e>
 80072ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80072be:	4626      	mov	r6, r4
 80072c0:	f7ff ffc7 	bl	8007252 <__hexdig_fun>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d062      	beq.n	800738e <__gethex+0x112>
 80072c8:	4623      	mov	r3, r4
 80072ca:	7818      	ldrb	r0, [r3, #0]
 80072cc:	4699      	mov	r9, r3
 80072ce:	2830      	cmp	r0, #48	@ 0x30
 80072d0:	f103 0301 	add.w	r3, r3, #1
 80072d4:	d0f9      	beq.n	80072ca <__gethex+0x4e>
 80072d6:	f7ff ffbc 	bl	8007252 <__hexdig_fun>
 80072da:	fab0 f580 	clz	r5, r0
 80072de:	f04f 0b01 	mov.w	fp, #1
 80072e2:	096d      	lsrs	r5, r5, #5
 80072e4:	464a      	mov	r2, r9
 80072e6:	4616      	mov	r6, r2
 80072e8:	7830      	ldrb	r0, [r6, #0]
 80072ea:	3201      	adds	r2, #1
 80072ec:	f7ff ffb1 	bl	8007252 <__hexdig_fun>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d1f8      	bne.n	80072e6 <__gethex+0x6a>
 80072f4:	2201      	movs	r2, #1
 80072f6:	4630      	mov	r0, r6
 80072f8:	498c      	ldr	r1, [pc, #560]	@ (800752c <__gethex+0x2b0>)
 80072fa:	f7ff fefd 	bl	80070f8 <strncmp>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d13f      	bne.n	8007382 <__gethex+0x106>
 8007302:	b944      	cbnz	r4, 8007316 <__gethex+0x9a>
 8007304:	1c74      	adds	r4, r6, #1
 8007306:	4622      	mov	r2, r4
 8007308:	4616      	mov	r6, r2
 800730a:	7830      	ldrb	r0, [r6, #0]
 800730c:	3201      	adds	r2, #1
 800730e:	f7ff ffa0 	bl	8007252 <__hexdig_fun>
 8007312:	2800      	cmp	r0, #0
 8007314:	d1f8      	bne.n	8007308 <__gethex+0x8c>
 8007316:	1ba4      	subs	r4, r4, r6
 8007318:	00a7      	lsls	r7, r4, #2
 800731a:	7833      	ldrb	r3, [r6, #0]
 800731c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007320:	2b50      	cmp	r3, #80	@ 0x50
 8007322:	d13e      	bne.n	80073a2 <__gethex+0x126>
 8007324:	7873      	ldrb	r3, [r6, #1]
 8007326:	2b2b      	cmp	r3, #43	@ 0x2b
 8007328:	d033      	beq.n	8007392 <__gethex+0x116>
 800732a:	2b2d      	cmp	r3, #45	@ 0x2d
 800732c:	d034      	beq.n	8007398 <__gethex+0x11c>
 800732e:	2400      	movs	r4, #0
 8007330:	1c71      	adds	r1, r6, #1
 8007332:	7808      	ldrb	r0, [r1, #0]
 8007334:	f7ff ff8d 	bl	8007252 <__hexdig_fun>
 8007338:	1e43      	subs	r3, r0, #1
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b18      	cmp	r3, #24
 800733e:	d830      	bhi.n	80073a2 <__gethex+0x126>
 8007340:	f1a0 0210 	sub.w	r2, r0, #16
 8007344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007348:	f7ff ff83 	bl	8007252 <__hexdig_fun>
 800734c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007350:	fa5f fc8c 	uxtb.w	ip, ip
 8007354:	f1bc 0f18 	cmp.w	ip, #24
 8007358:	f04f 030a 	mov.w	r3, #10
 800735c:	d91e      	bls.n	800739c <__gethex+0x120>
 800735e:	b104      	cbz	r4, 8007362 <__gethex+0xe6>
 8007360:	4252      	negs	r2, r2
 8007362:	4417      	add	r7, r2
 8007364:	f8ca 1000 	str.w	r1, [sl]
 8007368:	b1ed      	cbz	r5, 80073a6 <__gethex+0x12a>
 800736a:	f1bb 0f00 	cmp.w	fp, #0
 800736e:	bf0c      	ite	eq
 8007370:	2506      	moveq	r5, #6
 8007372:	2500      	movne	r5, #0
 8007374:	4628      	mov	r0, r5
 8007376:	b005      	add	sp, #20
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	2500      	movs	r5, #0
 800737e:	462c      	mov	r4, r5
 8007380:	e7b0      	b.n	80072e4 <__gethex+0x68>
 8007382:	2c00      	cmp	r4, #0
 8007384:	d1c7      	bne.n	8007316 <__gethex+0x9a>
 8007386:	4627      	mov	r7, r4
 8007388:	e7c7      	b.n	800731a <__gethex+0x9e>
 800738a:	464e      	mov	r6, r9
 800738c:	462f      	mov	r7, r5
 800738e:	2501      	movs	r5, #1
 8007390:	e7c3      	b.n	800731a <__gethex+0x9e>
 8007392:	2400      	movs	r4, #0
 8007394:	1cb1      	adds	r1, r6, #2
 8007396:	e7cc      	b.n	8007332 <__gethex+0xb6>
 8007398:	2401      	movs	r4, #1
 800739a:	e7fb      	b.n	8007394 <__gethex+0x118>
 800739c:	fb03 0002 	mla	r0, r3, r2, r0
 80073a0:	e7ce      	b.n	8007340 <__gethex+0xc4>
 80073a2:	4631      	mov	r1, r6
 80073a4:	e7de      	b.n	8007364 <__gethex+0xe8>
 80073a6:	4629      	mov	r1, r5
 80073a8:	eba6 0309 	sub.w	r3, r6, r9
 80073ac:	3b01      	subs	r3, #1
 80073ae:	2b07      	cmp	r3, #7
 80073b0:	dc0a      	bgt.n	80073c8 <__gethex+0x14c>
 80073b2:	9801      	ldr	r0, [sp, #4]
 80073b4:	f7fe f962 	bl	800567c <_Balloc>
 80073b8:	4604      	mov	r4, r0
 80073ba:	b940      	cbnz	r0, 80073ce <__gethex+0x152>
 80073bc:	4602      	mov	r2, r0
 80073be:	21e4      	movs	r1, #228	@ 0xe4
 80073c0:	4b5b      	ldr	r3, [pc, #364]	@ (8007530 <__gethex+0x2b4>)
 80073c2:	485c      	ldr	r0, [pc, #368]	@ (8007534 <__gethex+0x2b8>)
 80073c4:	f7ff fec0 	bl	8007148 <__assert_func>
 80073c8:	3101      	adds	r1, #1
 80073ca:	105b      	asrs	r3, r3, #1
 80073cc:	e7ef      	b.n	80073ae <__gethex+0x132>
 80073ce:	2300      	movs	r3, #0
 80073d0:	f100 0a14 	add.w	sl, r0, #20
 80073d4:	4655      	mov	r5, sl
 80073d6:	469b      	mov	fp, r3
 80073d8:	45b1      	cmp	r9, r6
 80073da:	d337      	bcc.n	800744c <__gethex+0x1d0>
 80073dc:	f845 bb04 	str.w	fp, [r5], #4
 80073e0:	eba5 050a 	sub.w	r5, r5, sl
 80073e4:	10ad      	asrs	r5, r5, #2
 80073e6:	6125      	str	r5, [r4, #16]
 80073e8:	4658      	mov	r0, fp
 80073ea:	f7fe fa39 	bl	8005860 <__hi0bits>
 80073ee:	016d      	lsls	r5, r5, #5
 80073f0:	f8d8 6000 	ldr.w	r6, [r8]
 80073f4:	1a2d      	subs	r5, r5, r0
 80073f6:	42b5      	cmp	r5, r6
 80073f8:	dd54      	ble.n	80074a4 <__gethex+0x228>
 80073fa:	1bad      	subs	r5, r5, r6
 80073fc:	4629      	mov	r1, r5
 80073fe:	4620      	mov	r0, r4
 8007400:	f7fe fdc1 	bl	8005f86 <__any_on>
 8007404:	4681      	mov	r9, r0
 8007406:	b178      	cbz	r0, 8007428 <__gethex+0x1ac>
 8007408:	f04f 0901 	mov.w	r9, #1
 800740c:	1e6b      	subs	r3, r5, #1
 800740e:	1159      	asrs	r1, r3, #5
 8007410:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007414:	f003 021f 	and.w	r2, r3, #31
 8007418:	fa09 f202 	lsl.w	r2, r9, r2
 800741c:	420a      	tst	r2, r1
 800741e:	d003      	beq.n	8007428 <__gethex+0x1ac>
 8007420:	454b      	cmp	r3, r9
 8007422:	dc36      	bgt.n	8007492 <__gethex+0x216>
 8007424:	f04f 0902 	mov.w	r9, #2
 8007428:	4629      	mov	r1, r5
 800742a:	4620      	mov	r0, r4
 800742c:	f7ff febe 	bl	80071ac <rshift>
 8007430:	442f      	add	r7, r5
 8007432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007436:	42bb      	cmp	r3, r7
 8007438:	da42      	bge.n	80074c0 <__gethex+0x244>
 800743a:	4621      	mov	r1, r4
 800743c:	9801      	ldr	r0, [sp, #4]
 800743e:	f7fe f95d 	bl	80056fc <_Bfree>
 8007442:	2300      	movs	r3, #0
 8007444:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007446:	25a3      	movs	r5, #163	@ 0xa3
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e793      	b.n	8007374 <__gethex+0xf8>
 800744c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007450:	2a2e      	cmp	r2, #46	@ 0x2e
 8007452:	d012      	beq.n	800747a <__gethex+0x1fe>
 8007454:	2b20      	cmp	r3, #32
 8007456:	d104      	bne.n	8007462 <__gethex+0x1e6>
 8007458:	f845 bb04 	str.w	fp, [r5], #4
 800745c:	f04f 0b00 	mov.w	fp, #0
 8007460:	465b      	mov	r3, fp
 8007462:	7830      	ldrb	r0, [r6, #0]
 8007464:	9303      	str	r3, [sp, #12]
 8007466:	f7ff fef4 	bl	8007252 <__hexdig_fun>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	f000 000f 	and.w	r0, r0, #15
 8007470:	4098      	lsls	r0, r3
 8007472:	ea4b 0b00 	orr.w	fp, fp, r0
 8007476:	3304      	adds	r3, #4
 8007478:	e7ae      	b.n	80073d8 <__gethex+0x15c>
 800747a:	45b1      	cmp	r9, r6
 800747c:	d8ea      	bhi.n	8007454 <__gethex+0x1d8>
 800747e:	2201      	movs	r2, #1
 8007480:	4630      	mov	r0, r6
 8007482:	492a      	ldr	r1, [pc, #168]	@ (800752c <__gethex+0x2b0>)
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	f7ff fe37 	bl	80070f8 <strncmp>
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	2800      	cmp	r0, #0
 800748e:	d1e1      	bne.n	8007454 <__gethex+0x1d8>
 8007490:	e7a2      	b.n	80073d8 <__gethex+0x15c>
 8007492:	4620      	mov	r0, r4
 8007494:	1ea9      	subs	r1, r5, #2
 8007496:	f7fe fd76 	bl	8005f86 <__any_on>
 800749a:	2800      	cmp	r0, #0
 800749c:	d0c2      	beq.n	8007424 <__gethex+0x1a8>
 800749e:	f04f 0903 	mov.w	r9, #3
 80074a2:	e7c1      	b.n	8007428 <__gethex+0x1ac>
 80074a4:	da09      	bge.n	80074ba <__gethex+0x23e>
 80074a6:	1b75      	subs	r5, r6, r5
 80074a8:	4621      	mov	r1, r4
 80074aa:	462a      	mov	r2, r5
 80074ac:	9801      	ldr	r0, [sp, #4]
 80074ae:	f7fe fb3b 	bl	8005b28 <__lshift>
 80074b2:	4604      	mov	r4, r0
 80074b4:	1b7f      	subs	r7, r7, r5
 80074b6:	f100 0a14 	add.w	sl, r0, #20
 80074ba:	f04f 0900 	mov.w	r9, #0
 80074be:	e7b8      	b.n	8007432 <__gethex+0x1b6>
 80074c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80074c4:	42bd      	cmp	r5, r7
 80074c6:	dd6f      	ble.n	80075a8 <__gethex+0x32c>
 80074c8:	1bed      	subs	r5, r5, r7
 80074ca:	42ae      	cmp	r6, r5
 80074cc:	dc34      	bgt.n	8007538 <__gethex+0x2bc>
 80074ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d022      	beq.n	800751c <__gethex+0x2a0>
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d024      	beq.n	8007524 <__gethex+0x2a8>
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d115      	bne.n	800750a <__gethex+0x28e>
 80074de:	42ae      	cmp	r6, r5
 80074e0:	d113      	bne.n	800750a <__gethex+0x28e>
 80074e2:	2e01      	cmp	r6, #1
 80074e4:	d10b      	bne.n	80074fe <__gethex+0x282>
 80074e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80074ea:	9a02      	ldr	r2, [sp, #8]
 80074ec:	2562      	movs	r5, #98	@ 0x62
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	2301      	movs	r3, #1
 80074f2:	6123      	str	r3, [r4, #16]
 80074f4:	f8ca 3000 	str.w	r3, [sl]
 80074f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074fa:	601c      	str	r4, [r3, #0]
 80074fc:	e73a      	b.n	8007374 <__gethex+0xf8>
 80074fe:	4620      	mov	r0, r4
 8007500:	1e71      	subs	r1, r6, #1
 8007502:	f7fe fd40 	bl	8005f86 <__any_on>
 8007506:	2800      	cmp	r0, #0
 8007508:	d1ed      	bne.n	80074e6 <__gethex+0x26a>
 800750a:	4621      	mov	r1, r4
 800750c:	9801      	ldr	r0, [sp, #4]
 800750e:	f7fe f8f5 	bl	80056fc <_Bfree>
 8007512:	2300      	movs	r3, #0
 8007514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007516:	2550      	movs	r5, #80	@ 0x50
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	e72b      	b.n	8007374 <__gethex+0xf8>
 800751c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f3      	bne.n	800750a <__gethex+0x28e>
 8007522:	e7e0      	b.n	80074e6 <__gethex+0x26a>
 8007524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1dd      	bne.n	80074e6 <__gethex+0x26a>
 800752a:	e7ee      	b.n	800750a <__gethex+0x28e>
 800752c:	080080f8 	.word	0x080080f8
 8007530:	08007f8f 	.word	0x08007f8f
 8007534:	080082a6 	.word	0x080082a6
 8007538:	1e6f      	subs	r7, r5, #1
 800753a:	f1b9 0f00 	cmp.w	r9, #0
 800753e:	d130      	bne.n	80075a2 <__gethex+0x326>
 8007540:	b127      	cbz	r7, 800754c <__gethex+0x2d0>
 8007542:	4639      	mov	r1, r7
 8007544:	4620      	mov	r0, r4
 8007546:	f7fe fd1e 	bl	8005f86 <__any_on>
 800754a:	4681      	mov	r9, r0
 800754c:	2301      	movs	r3, #1
 800754e:	4629      	mov	r1, r5
 8007550:	1b76      	subs	r6, r6, r5
 8007552:	2502      	movs	r5, #2
 8007554:	117a      	asrs	r2, r7, #5
 8007556:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800755a:	f007 071f 	and.w	r7, r7, #31
 800755e:	40bb      	lsls	r3, r7
 8007560:	4213      	tst	r3, r2
 8007562:	4620      	mov	r0, r4
 8007564:	bf18      	it	ne
 8007566:	f049 0902 	orrne.w	r9, r9, #2
 800756a:	f7ff fe1f 	bl	80071ac <rshift>
 800756e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007572:	f1b9 0f00 	cmp.w	r9, #0
 8007576:	d047      	beq.n	8007608 <__gethex+0x38c>
 8007578:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d015      	beq.n	80075ac <__gethex+0x330>
 8007580:	2b03      	cmp	r3, #3
 8007582:	d017      	beq.n	80075b4 <__gethex+0x338>
 8007584:	2b01      	cmp	r3, #1
 8007586:	d109      	bne.n	800759c <__gethex+0x320>
 8007588:	f019 0f02 	tst.w	r9, #2
 800758c:	d006      	beq.n	800759c <__gethex+0x320>
 800758e:	f8da 3000 	ldr.w	r3, [sl]
 8007592:	ea49 0903 	orr.w	r9, r9, r3
 8007596:	f019 0f01 	tst.w	r9, #1
 800759a:	d10e      	bne.n	80075ba <__gethex+0x33e>
 800759c:	f045 0510 	orr.w	r5, r5, #16
 80075a0:	e032      	b.n	8007608 <__gethex+0x38c>
 80075a2:	f04f 0901 	mov.w	r9, #1
 80075a6:	e7d1      	b.n	800754c <__gethex+0x2d0>
 80075a8:	2501      	movs	r5, #1
 80075aa:	e7e2      	b.n	8007572 <__gethex+0x2f6>
 80075ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ae:	f1c3 0301 	rsb	r3, r3, #1
 80075b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f0      	beq.n	800759c <__gethex+0x320>
 80075ba:	f04f 0c00 	mov.w	ip, #0
 80075be:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80075c2:	f104 0314 	add.w	r3, r4, #20
 80075c6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80075ca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80075d8:	d01b      	beq.n	8007612 <__gethex+0x396>
 80075da:	3201      	adds	r2, #1
 80075dc:	6002      	str	r2, [r0, #0]
 80075de:	2d02      	cmp	r5, #2
 80075e0:	f104 0314 	add.w	r3, r4, #20
 80075e4:	d13c      	bne.n	8007660 <__gethex+0x3e4>
 80075e6:	f8d8 2000 	ldr.w	r2, [r8]
 80075ea:	3a01      	subs	r2, #1
 80075ec:	42b2      	cmp	r2, r6
 80075ee:	d109      	bne.n	8007604 <__gethex+0x388>
 80075f0:	2201      	movs	r2, #1
 80075f2:	1171      	asrs	r1, r6, #5
 80075f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075f8:	f006 061f 	and.w	r6, r6, #31
 80075fc:	fa02 f606 	lsl.w	r6, r2, r6
 8007600:	421e      	tst	r6, r3
 8007602:	d13a      	bne.n	800767a <__gethex+0x3fe>
 8007604:	f045 0520 	orr.w	r5, r5, #32
 8007608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800760a:	601c      	str	r4, [r3, #0]
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	601f      	str	r7, [r3, #0]
 8007610:	e6b0      	b.n	8007374 <__gethex+0xf8>
 8007612:	4299      	cmp	r1, r3
 8007614:	f843 cc04 	str.w	ip, [r3, #-4]
 8007618:	d8d9      	bhi.n	80075ce <__gethex+0x352>
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	459b      	cmp	fp, r3
 800761e:	db17      	blt.n	8007650 <__gethex+0x3d4>
 8007620:	6861      	ldr	r1, [r4, #4]
 8007622:	9801      	ldr	r0, [sp, #4]
 8007624:	3101      	adds	r1, #1
 8007626:	f7fe f829 	bl	800567c <_Balloc>
 800762a:	4681      	mov	r9, r0
 800762c:	b918      	cbnz	r0, 8007636 <__gethex+0x3ba>
 800762e:	4602      	mov	r2, r0
 8007630:	2184      	movs	r1, #132	@ 0x84
 8007632:	4b19      	ldr	r3, [pc, #100]	@ (8007698 <__gethex+0x41c>)
 8007634:	e6c5      	b.n	80073c2 <__gethex+0x146>
 8007636:	6922      	ldr	r2, [r4, #16]
 8007638:	f104 010c 	add.w	r1, r4, #12
 800763c:	3202      	adds	r2, #2
 800763e:	0092      	lsls	r2, r2, #2
 8007640:	300c      	adds	r0, #12
 8007642:	f7fd f8ba 	bl	80047ba <memcpy>
 8007646:	4621      	mov	r1, r4
 8007648:	9801      	ldr	r0, [sp, #4]
 800764a:	f7fe f857 	bl	80056fc <_Bfree>
 800764e:	464c      	mov	r4, r9
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	6122      	str	r2, [r4, #16]
 8007656:	2201      	movs	r2, #1
 8007658:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800765c:	615a      	str	r2, [r3, #20]
 800765e:	e7be      	b.n	80075de <__gethex+0x362>
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	455a      	cmp	r2, fp
 8007664:	dd0b      	ble.n	800767e <__gethex+0x402>
 8007666:	2101      	movs	r1, #1
 8007668:	4620      	mov	r0, r4
 800766a:	f7ff fd9f 	bl	80071ac <rshift>
 800766e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007672:	3701      	adds	r7, #1
 8007674:	42bb      	cmp	r3, r7
 8007676:	f6ff aee0 	blt.w	800743a <__gethex+0x1be>
 800767a:	2501      	movs	r5, #1
 800767c:	e7c2      	b.n	8007604 <__gethex+0x388>
 800767e:	f016 061f 	ands.w	r6, r6, #31
 8007682:	d0fa      	beq.n	800767a <__gethex+0x3fe>
 8007684:	4453      	add	r3, sl
 8007686:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800768a:	f7fe f8e9 	bl	8005860 <__hi0bits>
 800768e:	f1c6 0620 	rsb	r6, r6, #32
 8007692:	42b0      	cmp	r0, r6
 8007694:	dbe7      	blt.n	8007666 <__gethex+0x3ea>
 8007696:	e7f0      	b.n	800767a <__gethex+0x3fe>
 8007698:	08007f8f 	.word	0x08007f8f

0800769c <L_shift>:
 800769c:	f1c2 0208 	rsb	r2, r2, #8
 80076a0:	0092      	lsls	r2, r2, #2
 80076a2:	b570      	push	{r4, r5, r6, lr}
 80076a4:	f1c2 0620 	rsb	r6, r2, #32
 80076a8:	6843      	ldr	r3, [r0, #4]
 80076aa:	6804      	ldr	r4, [r0, #0]
 80076ac:	fa03 f506 	lsl.w	r5, r3, r6
 80076b0:	432c      	orrs	r4, r5
 80076b2:	40d3      	lsrs	r3, r2
 80076b4:	6004      	str	r4, [r0, #0]
 80076b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80076ba:	4288      	cmp	r0, r1
 80076bc:	d3f4      	bcc.n	80076a8 <L_shift+0xc>
 80076be:	bd70      	pop	{r4, r5, r6, pc}

080076c0 <__match>:
 80076c0:	b530      	push	{r4, r5, lr}
 80076c2:	6803      	ldr	r3, [r0, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ca:	b914      	cbnz	r4, 80076d2 <__match+0x12>
 80076cc:	6003      	str	r3, [r0, #0]
 80076ce:	2001      	movs	r0, #1
 80076d0:	bd30      	pop	{r4, r5, pc}
 80076d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80076da:	2d19      	cmp	r5, #25
 80076dc:	bf98      	it	ls
 80076de:	3220      	addls	r2, #32
 80076e0:	42a2      	cmp	r2, r4
 80076e2:	d0f0      	beq.n	80076c6 <__match+0x6>
 80076e4:	2000      	movs	r0, #0
 80076e6:	e7f3      	b.n	80076d0 <__match+0x10>

080076e8 <__hexnan>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	2500      	movs	r5, #0
 80076ee:	680b      	ldr	r3, [r1, #0]
 80076f0:	4682      	mov	sl, r0
 80076f2:	115e      	asrs	r6, r3, #5
 80076f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80076f8:	f013 031f 	ands.w	r3, r3, #31
 80076fc:	bf18      	it	ne
 80076fe:	3604      	addne	r6, #4
 8007700:	1f37      	subs	r7, r6, #4
 8007702:	4690      	mov	r8, r2
 8007704:	46b9      	mov	r9, r7
 8007706:	463c      	mov	r4, r7
 8007708:	46ab      	mov	fp, r5
 800770a:	b087      	sub	sp, #28
 800770c:	6801      	ldr	r1, [r0, #0]
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	f846 5c04 	str.w	r5, [r6, #-4]
 8007714:	9502      	str	r5, [sp, #8]
 8007716:	784a      	ldrb	r2, [r1, #1]
 8007718:	1c4b      	adds	r3, r1, #1
 800771a:	9303      	str	r3, [sp, #12]
 800771c:	b342      	cbz	r2, 8007770 <__hexnan+0x88>
 800771e:	4610      	mov	r0, r2
 8007720:	9105      	str	r1, [sp, #20]
 8007722:	9204      	str	r2, [sp, #16]
 8007724:	f7ff fd95 	bl	8007252 <__hexdig_fun>
 8007728:	2800      	cmp	r0, #0
 800772a:	d151      	bne.n	80077d0 <__hexnan+0xe8>
 800772c:	9a04      	ldr	r2, [sp, #16]
 800772e:	9905      	ldr	r1, [sp, #20]
 8007730:	2a20      	cmp	r2, #32
 8007732:	d818      	bhi.n	8007766 <__hexnan+0x7e>
 8007734:	9b02      	ldr	r3, [sp, #8]
 8007736:	459b      	cmp	fp, r3
 8007738:	dd13      	ble.n	8007762 <__hexnan+0x7a>
 800773a:	454c      	cmp	r4, r9
 800773c:	d206      	bcs.n	800774c <__hexnan+0x64>
 800773e:	2d07      	cmp	r5, #7
 8007740:	dc04      	bgt.n	800774c <__hexnan+0x64>
 8007742:	462a      	mov	r2, r5
 8007744:	4649      	mov	r1, r9
 8007746:	4620      	mov	r0, r4
 8007748:	f7ff ffa8 	bl	800769c <L_shift>
 800774c:	4544      	cmp	r4, r8
 800774e:	d952      	bls.n	80077f6 <__hexnan+0x10e>
 8007750:	2300      	movs	r3, #0
 8007752:	f1a4 0904 	sub.w	r9, r4, #4
 8007756:	f844 3c04 	str.w	r3, [r4, #-4]
 800775a:	461d      	mov	r5, r3
 800775c:	464c      	mov	r4, r9
 800775e:	f8cd b008 	str.w	fp, [sp, #8]
 8007762:	9903      	ldr	r1, [sp, #12]
 8007764:	e7d7      	b.n	8007716 <__hexnan+0x2e>
 8007766:	2a29      	cmp	r2, #41	@ 0x29
 8007768:	d157      	bne.n	800781a <__hexnan+0x132>
 800776a:	3102      	adds	r1, #2
 800776c:	f8ca 1000 	str.w	r1, [sl]
 8007770:	f1bb 0f00 	cmp.w	fp, #0
 8007774:	d051      	beq.n	800781a <__hexnan+0x132>
 8007776:	454c      	cmp	r4, r9
 8007778:	d206      	bcs.n	8007788 <__hexnan+0xa0>
 800777a:	2d07      	cmp	r5, #7
 800777c:	dc04      	bgt.n	8007788 <__hexnan+0xa0>
 800777e:	462a      	mov	r2, r5
 8007780:	4649      	mov	r1, r9
 8007782:	4620      	mov	r0, r4
 8007784:	f7ff ff8a 	bl	800769c <L_shift>
 8007788:	4544      	cmp	r4, r8
 800778a:	d936      	bls.n	80077fa <__hexnan+0x112>
 800778c:	4623      	mov	r3, r4
 800778e:	f1a8 0204 	sub.w	r2, r8, #4
 8007792:	f853 1b04 	ldr.w	r1, [r3], #4
 8007796:	429f      	cmp	r7, r3
 8007798:	f842 1f04 	str.w	r1, [r2, #4]!
 800779c:	d2f9      	bcs.n	8007792 <__hexnan+0xaa>
 800779e:	1b3b      	subs	r3, r7, r4
 80077a0:	f023 0303 	bic.w	r3, r3, #3
 80077a4:	3304      	adds	r3, #4
 80077a6:	3401      	adds	r4, #1
 80077a8:	3e03      	subs	r6, #3
 80077aa:	42b4      	cmp	r4, r6
 80077ac:	bf88      	it	hi
 80077ae:	2304      	movhi	r3, #4
 80077b0:	2200      	movs	r2, #0
 80077b2:	4443      	add	r3, r8
 80077b4:	f843 2b04 	str.w	r2, [r3], #4
 80077b8:	429f      	cmp	r7, r3
 80077ba:	d2fb      	bcs.n	80077b4 <__hexnan+0xcc>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	b91b      	cbnz	r3, 80077c8 <__hexnan+0xe0>
 80077c0:	4547      	cmp	r7, r8
 80077c2:	d128      	bne.n	8007816 <__hexnan+0x12e>
 80077c4:	2301      	movs	r3, #1
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	2005      	movs	r0, #5
 80077ca:	b007      	add	sp, #28
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	3501      	adds	r5, #1
 80077d2:	2d08      	cmp	r5, #8
 80077d4:	f10b 0b01 	add.w	fp, fp, #1
 80077d8:	dd06      	ble.n	80077e8 <__hexnan+0x100>
 80077da:	4544      	cmp	r4, r8
 80077dc:	d9c1      	bls.n	8007762 <__hexnan+0x7a>
 80077de:	2300      	movs	r3, #0
 80077e0:	2501      	movs	r5, #1
 80077e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80077e6:	3c04      	subs	r4, #4
 80077e8:	6822      	ldr	r2, [r4, #0]
 80077ea:	f000 000f 	and.w	r0, r0, #15
 80077ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80077f2:	6020      	str	r0, [r4, #0]
 80077f4:	e7b5      	b.n	8007762 <__hexnan+0x7a>
 80077f6:	2508      	movs	r5, #8
 80077f8:	e7b3      	b.n	8007762 <__hexnan+0x7a>
 80077fa:	9b01      	ldr	r3, [sp, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0dd      	beq.n	80077bc <__hexnan+0xd4>
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	f1c3 0320 	rsb	r3, r3, #32
 8007808:	40da      	lsrs	r2, r3
 800780a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800780e:	4013      	ands	r3, r2
 8007810:	f846 3c04 	str.w	r3, [r6, #-4]
 8007814:	e7d2      	b.n	80077bc <__hexnan+0xd4>
 8007816:	3f04      	subs	r7, #4
 8007818:	e7d0      	b.n	80077bc <__hexnan+0xd4>
 800781a:	2004      	movs	r0, #4
 800781c:	e7d5      	b.n	80077ca <__hexnan+0xe2>

0800781e <__ascii_mbtowc>:
 800781e:	b082      	sub	sp, #8
 8007820:	b901      	cbnz	r1, 8007824 <__ascii_mbtowc+0x6>
 8007822:	a901      	add	r1, sp, #4
 8007824:	b142      	cbz	r2, 8007838 <__ascii_mbtowc+0x1a>
 8007826:	b14b      	cbz	r3, 800783c <__ascii_mbtowc+0x1e>
 8007828:	7813      	ldrb	r3, [r2, #0]
 800782a:	600b      	str	r3, [r1, #0]
 800782c:	7812      	ldrb	r2, [r2, #0]
 800782e:	1e10      	subs	r0, r2, #0
 8007830:	bf18      	it	ne
 8007832:	2001      	movne	r0, #1
 8007834:	b002      	add	sp, #8
 8007836:	4770      	bx	lr
 8007838:	4610      	mov	r0, r2
 800783a:	e7fb      	b.n	8007834 <__ascii_mbtowc+0x16>
 800783c:	f06f 0001 	mvn.w	r0, #1
 8007840:	e7f8      	b.n	8007834 <__ascii_mbtowc+0x16>

08007842 <_realloc_r>:
 8007842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	4680      	mov	r8, r0
 8007848:	4615      	mov	r5, r2
 800784a:	460c      	mov	r4, r1
 800784c:	b921      	cbnz	r1, 8007858 <_realloc_r+0x16>
 800784e:	4611      	mov	r1, r2
 8007850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007854:	f7fd be86 	b.w	8005564 <_malloc_r>
 8007858:	b92a      	cbnz	r2, 8007866 <_realloc_r+0x24>
 800785a:	f7fd fe11 	bl	8005480 <_free_r>
 800785e:	2400      	movs	r4, #0
 8007860:	4620      	mov	r0, r4
 8007862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007866:	f000 f840 	bl	80078ea <_malloc_usable_size_r>
 800786a:	4285      	cmp	r5, r0
 800786c:	4606      	mov	r6, r0
 800786e:	d802      	bhi.n	8007876 <_realloc_r+0x34>
 8007870:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007874:	d8f4      	bhi.n	8007860 <_realloc_r+0x1e>
 8007876:	4629      	mov	r1, r5
 8007878:	4640      	mov	r0, r8
 800787a:	f7fd fe73 	bl	8005564 <_malloc_r>
 800787e:	4607      	mov	r7, r0
 8007880:	2800      	cmp	r0, #0
 8007882:	d0ec      	beq.n	800785e <_realloc_r+0x1c>
 8007884:	42b5      	cmp	r5, r6
 8007886:	462a      	mov	r2, r5
 8007888:	4621      	mov	r1, r4
 800788a:	bf28      	it	cs
 800788c:	4632      	movcs	r2, r6
 800788e:	f7fc ff94 	bl	80047ba <memcpy>
 8007892:	4621      	mov	r1, r4
 8007894:	4640      	mov	r0, r8
 8007896:	f7fd fdf3 	bl	8005480 <_free_r>
 800789a:	463c      	mov	r4, r7
 800789c:	e7e0      	b.n	8007860 <_realloc_r+0x1e>

0800789e <__ascii_wctomb>:
 800789e:	4603      	mov	r3, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	b141      	cbz	r1, 80078b6 <__ascii_wctomb+0x18>
 80078a4:	2aff      	cmp	r2, #255	@ 0xff
 80078a6:	d904      	bls.n	80078b2 <__ascii_wctomb+0x14>
 80078a8:	228a      	movs	r2, #138	@ 0x8a
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	4770      	bx	lr
 80078b2:	2001      	movs	r0, #1
 80078b4:	700a      	strb	r2, [r1, #0]
 80078b6:	4770      	bx	lr

080078b8 <fiprintf>:
 80078b8:	b40e      	push	{r1, r2, r3}
 80078ba:	b503      	push	{r0, r1, lr}
 80078bc:	4601      	mov	r1, r0
 80078be:	ab03      	add	r3, sp, #12
 80078c0:	4805      	ldr	r0, [pc, #20]	@ (80078d8 <fiprintf+0x20>)
 80078c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c6:	6800      	ldr	r0, [r0, #0]
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	f000 f83d 	bl	8007948 <_vfiprintf_r>
 80078ce:	b002      	add	sp, #8
 80078d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d4:	b003      	add	sp, #12
 80078d6:	4770      	bx	lr
 80078d8:	20000018 	.word	0x20000018

080078dc <abort>:
 80078dc:	2006      	movs	r0, #6
 80078de:	b508      	push	{r3, lr}
 80078e0:	f000 fa06 	bl	8007cf0 <raise>
 80078e4:	2001      	movs	r0, #1
 80078e6:	f7f9 ff5a 	bl	800179e <_exit>

080078ea <_malloc_usable_size_r>:
 80078ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ee:	1f18      	subs	r0, r3, #4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfbc      	itt	lt
 80078f4:	580b      	ldrlt	r3, [r1, r0]
 80078f6:	18c0      	addlt	r0, r0, r3
 80078f8:	4770      	bx	lr

080078fa <__sfputc_r>:
 80078fa:	6893      	ldr	r3, [r2, #8]
 80078fc:	b410      	push	{r4}
 80078fe:	3b01      	subs	r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	6093      	str	r3, [r2, #8]
 8007904:	da07      	bge.n	8007916 <__sfputc_r+0x1c>
 8007906:	6994      	ldr	r4, [r2, #24]
 8007908:	42a3      	cmp	r3, r4
 800790a:	db01      	blt.n	8007910 <__sfputc_r+0x16>
 800790c:	290a      	cmp	r1, #10
 800790e:	d102      	bne.n	8007916 <__sfputc_r+0x1c>
 8007910:	bc10      	pop	{r4}
 8007912:	f000 b931 	b.w	8007b78 <__swbuf_r>
 8007916:	6813      	ldr	r3, [r2, #0]
 8007918:	1c58      	adds	r0, r3, #1
 800791a:	6010      	str	r0, [r2, #0]
 800791c:	7019      	strb	r1, [r3, #0]
 800791e:	4608      	mov	r0, r1
 8007920:	bc10      	pop	{r4}
 8007922:	4770      	bx	lr

08007924 <__sfputs_r>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	4606      	mov	r6, r0
 8007928:	460f      	mov	r7, r1
 800792a:	4614      	mov	r4, r2
 800792c:	18d5      	adds	r5, r2, r3
 800792e:	42ac      	cmp	r4, r5
 8007930:	d101      	bne.n	8007936 <__sfputs_r+0x12>
 8007932:	2000      	movs	r0, #0
 8007934:	e007      	b.n	8007946 <__sfputs_r+0x22>
 8007936:	463a      	mov	r2, r7
 8007938:	4630      	mov	r0, r6
 800793a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793e:	f7ff ffdc 	bl	80078fa <__sfputc_r>
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	d1f3      	bne.n	800792e <__sfputs_r+0xa>
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007948 <_vfiprintf_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	460d      	mov	r5, r1
 800794e:	4614      	mov	r4, r2
 8007950:	4698      	mov	r8, r3
 8007952:	4606      	mov	r6, r0
 8007954:	b09d      	sub	sp, #116	@ 0x74
 8007956:	b118      	cbz	r0, 8007960 <_vfiprintf_r+0x18>
 8007958:	6a03      	ldr	r3, [r0, #32]
 800795a:	b90b      	cbnz	r3, 8007960 <_vfiprintf_r+0x18>
 800795c:	f7fc fe06 	bl	800456c <__sinit>
 8007960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007962:	07d9      	lsls	r1, r3, #31
 8007964:	d405      	bmi.n	8007972 <_vfiprintf_r+0x2a>
 8007966:	89ab      	ldrh	r3, [r5, #12]
 8007968:	059a      	lsls	r2, r3, #22
 800796a:	d402      	bmi.n	8007972 <_vfiprintf_r+0x2a>
 800796c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800796e:	f7fc ff14 	bl	800479a <__retarget_lock_acquire_recursive>
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	071b      	lsls	r3, r3, #28
 8007976:	d501      	bpl.n	800797c <_vfiprintf_r+0x34>
 8007978:	692b      	ldr	r3, [r5, #16]
 800797a:	b99b      	cbnz	r3, 80079a4 <_vfiprintf_r+0x5c>
 800797c:	4629      	mov	r1, r5
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f938 	bl	8007bf4 <__swsetup_r>
 8007984:	b170      	cbz	r0, 80079a4 <_vfiprintf_r+0x5c>
 8007986:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007988:	07dc      	lsls	r4, r3, #31
 800798a:	d504      	bpl.n	8007996 <_vfiprintf_r+0x4e>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b01d      	add	sp, #116	@ 0x74
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	0598      	lsls	r0, r3, #22
 800799a:	d4f7      	bmi.n	800798c <_vfiprintf_r+0x44>
 800799c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800799e:	f7fc fefd 	bl	800479c <__retarget_lock_release_recursive>
 80079a2:	e7f3      	b.n	800798c <_vfiprintf_r+0x44>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079a8:	2320      	movs	r3, #32
 80079aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079ae:	2330      	movs	r3, #48	@ 0x30
 80079b0:	f04f 0901 	mov.w	r9, #1
 80079b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80079b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007b64 <_vfiprintf_r+0x21c>
 80079bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079c0:	4623      	mov	r3, r4
 80079c2:	469a      	mov	sl, r3
 80079c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079c8:	b10a      	cbz	r2, 80079ce <_vfiprintf_r+0x86>
 80079ca:	2a25      	cmp	r2, #37	@ 0x25
 80079cc:	d1f9      	bne.n	80079c2 <_vfiprintf_r+0x7a>
 80079ce:	ebba 0b04 	subs.w	fp, sl, r4
 80079d2:	d00b      	beq.n	80079ec <_vfiprintf_r+0xa4>
 80079d4:	465b      	mov	r3, fp
 80079d6:	4622      	mov	r2, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ffa2 	bl	8007924 <__sfputs_r>
 80079e0:	3001      	adds	r0, #1
 80079e2:	f000 80a7 	beq.w	8007b34 <_vfiprintf_r+0x1ec>
 80079e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079e8:	445a      	add	r2, fp
 80079ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80079ec:	f89a 3000 	ldrb.w	r3, [sl]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 809f 	beq.w	8007b34 <_vfiprintf_r+0x1ec>
 80079f6:	2300      	movs	r3, #0
 80079f8:	f04f 32ff 	mov.w	r2, #4294967295
 80079fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a00:	f10a 0a01 	add.w	sl, sl, #1
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	9307      	str	r3, [sp, #28]
 8007a08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a0e:	4654      	mov	r4, sl
 8007a10:	2205      	movs	r2, #5
 8007a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a16:	4853      	ldr	r0, [pc, #332]	@ (8007b64 <_vfiprintf_r+0x21c>)
 8007a18:	f7fc fec1 	bl	800479e <memchr>
 8007a1c:	9a04      	ldr	r2, [sp, #16]
 8007a1e:	b9d8      	cbnz	r0, 8007a58 <_vfiprintf_r+0x110>
 8007a20:	06d1      	lsls	r1, r2, #27
 8007a22:	bf44      	itt	mi
 8007a24:	2320      	movmi	r3, #32
 8007a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a2a:	0713      	lsls	r3, r2, #28
 8007a2c:	bf44      	itt	mi
 8007a2e:	232b      	movmi	r3, #43	@ 0x2b
 8007a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a34:	f89a 3000 	ldrb.w	r3, [sl]
 8007a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a3a:	d015      	beq.n	8007a68 <_vfiprintf_r+0x120>
 8007a3c:	4654      	mov	r4, sl
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f04f 0c0a 	mov.w	ip, #10
 8007a44:	9a07      	ldr	r2, [sp, #28]
 8007a46:	4621      	mov	r1, r4
 8007a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a4c:	3b30      	subs	r3, #48	@ 0x30
 8007a4e:	2b09      	cmp	r3, #9
 8007a50:	d94b      	bls.n	8007aea <_vfiprintf_r+0x1a2>
 8007a52:	b1b0      	cbz	r0, 8007a82 <_vfiprintf_r+0x13a>
 8007a54:	9207      	str	r2, [sp, #28]
 8007a56:	e014      	b.n	8007a82 <_vfiprintf_r+0x13a>
 8007a58:	eba0 0308 	sub.w	r3, r0, r8
 8007a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	46a2      	mov	sl, r4
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	e7d2      	b.n	8007a0e <_vfiprintf_r+0xc6>
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	1d19      	adds	r1, r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	9103      	str	r1, [sp, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bfbb      	ittet	lt
 8007a74:	425b      	neglt	r3, r3
 8007a76:	f042 0202 	orrlt.w	r2, r2, #2
 8007a7a:	9307      	strge	r3, [sp, #28]
 8007a7c:	9307      	strlt	r3, [sp, #28]
 8007a7e:	bfb8      	it	lt
 8007a80:	9204      	strlt	r2, [sp, #16]
 8007a82:	7823      	ldrb	r3, [r4, #0]
 8007a84:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a86:	d10a      	bne.n	8007a9e <_vfiprintf_r+0x156>
 8007a88:	7863      	ldrb	r3, [r4, #1]
 8007a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a8c:	d132      	bne.n	8007af4 <_vfiprintf_r+0x1ac>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	3402      	adds	r4, #2
 8007a92:	1d1a      	adds	r2, r3, #4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	9203      	str	r2, [sp, #12]
 8007a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a9c:	9305      	str	r3, [sp, #20]
 8007a9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007b68 <_vfiprintf_r+0x220>
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	7821      	ldrb	r1, [r4, #0]
 8007aa8:	f7fc fe79 	bl	800479e <memchr>
 8007aac:	b138      	cbz	r0, 8007abe <_vfiprintf_r+0x176>
 8007aae:	2240      	movs	r2, #64	@ 0x40
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	eba0 000a 	sub.w	r0, r0, sl
 8007ab6:	4082      	lsls	r2, r0
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	3401      	adds	r4, #1
 8007abc:	9304      	str	r3, [sp, #16]
 8007abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac2:	2206      	movs	r2, #6
 8007ac4:	4829      	ldr	r0, [pc, #164]	@ (8007b6c <_vfiprintf_r+0x224>)
 8007ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aca:	f7fc fe68 	bl	800479e <memchr>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d03f      	beq.n	8007b52 <_vfiprintf_r+0x20a>
 8007ad2:	4b27      	ldr	r3, [pc, #156]	@ (8007b70 <_vfiprintf_r+0x228>)
 8007ad4:	bb1b      	cbnz	r3, 8007b1e <_vfiprintf_r+0x1d6>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	3307      	adds	r3, #7
 8007ada:	f023 0307 	bic.w	r3, r3, #7
 8007ade:	3308      	adds	r3, #8
 8007ae0:	9303      	str	r3, [sp, #12]
 8007ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae4:	443b      	add	r3, r7
 8007ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae8:	e76a      	b.n	80079c0 <_vfiprintf_r+0x78>
 8007aea:	460c      	mov	r4, r1
 8007aec:	2001      	movs	r0, #1
 8007aee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007af2:	e7a8      	b.n	8007a46 <_vfiprintf_r+0xfe>
 8007af4:	2300      	movs	r3, #0
 8007af6:	f04f 0c0a 	mov.w	ip, #10
 8007afa:	4619      	mov	r1, r3
 8007afc:	3401      	adds	r4, #1
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	4620      	mov	r0, r4
 8007b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b06:	3a30      	subs	r2, #48	@ 0x30
 8007b08:	2a09      	cmp	r2, #9
 8007b0a:	d903      	bls.n	8007b14 <_vfiprintf_r+0x1cc>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0c6      	beq.n	8007a9e <_vfiprintf_r+0x156>
 8007b10:	9105      	str	r1, [sp, #20]
 8007b12:	e7c4      	b.n	8007a9e <_vfiprintf_r+0x156>
 8007b14:	4604      	mov	r4, r0
 8007b16:	2301      	movs	r3, #1
 8007b18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b1c:	e7f0      	b.n	8007b00 <_vfiprintf_r+0x1b8>
 8007b1e:	ab03      	add	r3, sp, #12
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	462a      	mov	r2, r5
 8007b24:	4630      	mov	r0, r6
 8007b26:	4b13      	ldr	r3, [pc, #76]	@ (8007b74 <_vfiprintf_r+0x22c>)
 8007b28:	a904      	add	r1, sp, #16
 8007b2a:	f7fb fec5 	bl	80038b8 <_printf_float>
 8007b2e:	4607      	mov	r7, r0
 8007b30:	1c78      	adds	r0, r7, #1
 8007b32:	d1d6      	bne.n	8007ae2 <_vfiprintf_r+0x19a>
 8007b34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b36:	07d9      	lsls	r1, r3, #31
 8007b38:	d405      	bmi.n	8007b46 <_vfiprintf_r+0x1fe>
 8007b3a:	89ab      	ldrh	r3, [r5, #12]
 8007b3c:	059a      	lsls	r2, r3, #22
 8007b3e:	d402      	bmi.n	8007b46 <_vfiprintf_r+0x1fe>
 8007b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b42:	f7fc fe2b 	bl	800479c <__retarget_lock_release_recursive>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	065b      	lsls	r3, r3, #25
 8007b4a:	f53f af1f 	bmi.w	800798c <_vfiprintf_r+0x44>
 8007b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b50:	e71e      	b.n	8007990 <_vfiprintf_r+0x48>
 8007b52:	ab03      	add	r3, sp, #12
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	462a      	mov	r2, r5
 8007b58:	4630      	mov	r0, r6
 8007b5a:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <_vfiprintf_r+0x22c>)
 8007b5c:	a904      	add	r1, sp, #16
 8007b5e:	f7fc f949 	bl	8003df4 <_printf_i>
 8007b62:	e7e4      	b.n	8007b2e <_vfiprintf_r+0x1e6>
 8007b64:	08008251 	.word	0x08008251
 8007b68:	08008257 	.word	0x08008257
 8007b6c:	0800825b 	.word	0x0800825b
 8007b70:	080038b9 	.word	0x080038b9
 8007b74:	08007925 	.word	0x08007925

08007b78 <__swbuf_r>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	460e      	mov	r6, r1
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	4605      	mov	r5, r0
 8007b80:	b118      	cbz	r0, 8007b8a <__swbuf_r+0x12>
 8007b82:	6a03      	ldr	r3, [r0, #32]
 8007b84:	b90b      	cbnz	r3, 8007b8a <__swbuf_r+0x12>
 8007b86:	f7fc fcf1 	bl	800456c <__sinit>
 8007b8a:	69a3      	ldr	r3, [r4, #24]
 8007b8c:	60a3      	str	r3, [r4, #8]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	071a      	lsls	r2, r3, #28
 8007b92:	d501      	bpl.n	8007b98 <__swbuf_r+0x20>
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	b943      	cbnz	r3, 8007baa <__swbuf_r+0x32>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f82a 	bl	8007bf4 <__swsetup_r>
 8007ba0:	b118      	cbz	r0, 8007baa <__swbuf_r+0x32>
 8007ba2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	6922      	ldr	r2, [r4, #16]
 8007bae:	b2f6      	uxtb	r6, r6
 8007bb0:	1a98      	subs	r0, r3, r2
 8007bb2:	6963      	ldr	r3, [r4, #20]
 8007bb4:	4637      	mov	r7, r6
 8007bb6:	4283      	cmp	r3, r0
 8007bb8:	dc05      	bgt.n	8007bc6 <__swbuf_r+0x4e>
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f7ff fa59 	bl	8007074 <_fflush_r>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d1ed      	bne.n	8007ba2 <__swbuf_r+0x2a>
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	60a3      	str	r3, [r4, #8]
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	6022      	str	r2, [r4, #0]
 8007bd2:	701e      	strb	r6, [r3, #0]
 8007bd4:	6962      	ldr	r2, [r4, #20]
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d004      	beq.n	8007be6 <__swbuf_r+0x6e>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	07db      	lsls	r3, r3, #31
 8007be0:	d5e1      	bpl.n	8007ba6 <__swbuf_r+0x2e>
 8007be2:	2e0a      	cmp	r6, #10
 8007be4:	d1df      	bne.n	8007ba6 <__swbuf_r+0x2e>
 8007be6:	4621      	mov	r1, r4
 8007be8:	4628      	mov	r0, r5
 8007bea:	f7ff fa43 	bl	8007074 <_fflush_r>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d0d9      	beq.n	8007ba6 <__swbuf_r+0x2e>
 8007bf2:	e7d6      	b.n	8007ba2 <__swbuf_r+0x2a>

08007bf4 <__swsetup_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4b29      	ldr	r3, [pc, #164]	@ (8007c9c <__swsetup_r+0xa8>)
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	b118      	cbz	r0, 8007c08 <__swsetup_r+0x14>
 8007c00:	6a03      	ldr	r3, [r0, #32]
 8007c02:	b90b      	cbnz	r3, 8007c08 <__swsetup_r+0x14>
 8007c04:	f7fc fcb2 	bl	800456c <__sinit>
 8007c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c0c:	0719      	lsls	r1, r3, #28
 8007c0e:	d422      	bmi.n	8007c56 <__swsetup_r+0x62>
 8007c10:	06da      	lsls	r2, r3, #27
 8007c12:	d407      	bmi.n	8007c24 <__swsetup_r+0x30>
 8007c14:	2209      	movs	r2, #9
 8007c16:	602a      	str	r2, [r5, #0]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	e033      	b.n	8007c8c <__swsetup_r+0x98>
 8007c24:	0758      	lsls	r0, r3, #29
 8007c26:	d512      	bpl.n	8007c4e <__swsetup_r+0x5a>
 8007c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c2a:	b141      	cbz	r1, 8007c3e <__swsetup_r+0x4a>
 8007c2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c30:	4299      	cmp	r1, r3
 8007c32:	d002      	beq.n	8007c3a <__swsetup_r+0x46>
 8007c34:	4628      	mov	r0, r5
 8007c36:	f7fd fc23 	bl	8005480 <_free_r>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	2300      	movs	r3, #0
 8007c48:	6063      	str	r3, [r4, #4]
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	f043 0308 	orr.w	r3, r3, #8
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	b94b      	cbnz	r3, 8007c6e <__swsetup_r+0x7a>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c64:	d003      	beq.n	8007c6e <__swsetup_r+0x7a>
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 f882 	bl	8007d72 <__smakebuf_r>
 8007c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c72:	f013 0201 	ands.w	r2, r3, #1
 8007c76:	d00a      	beq.n	8007c8e <__swsetup_r+0x9a>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	60a2      	str	r2, [r4, #8]
 8007c7c:	6962      	ldr	r2, [r4, #20]
 8007c7e:	4252      	negs	r2, r2
 8007c80:	61a2      	str	r2, [r4, #24]
 8007c82:	6922      	ldr	r2, [r4, #16]
 8007c84:	b942      	cbnz	r2, 8007c98 <__swsetup_r+0xa4>
 8007c86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c8a:	d1c5      	bne.n	8007c18 <__swsetup_r+0x24>
 8007c8c:	bd38      	pop	{r3, r4, r5, pc}
 8007c8e:	0799      	lsls	r1, r3, #30
 8007c90:	bf58      	it	pl
 8007c92:	6962      	ldrpl	r2, [r4, #20]
 8007c94:	60a2      	str	r2, [r4, #8]
 8007c96:	e7f4      	b.n	8007c82 <__swsetup_r+0x8e>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e7f7      	b.n	8007c8c <__swsetup_r+0x98>
 8007c9c:	20000018 	.word	0x20000018

08007ca0 <_raise_r>:
 8007ca0:	291f      	cmp	r1, #31
 8007ca2:	b538      	push	{r3, r4, r5, lr}
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	d904      	bls.n	8007cb4 <_raise_r+0x14>
 8007caa:	2316      	movs	r3, #22
 8007cac:	6003      	str	r3, [r0, #0]
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cb6:	b112      	cbz	r2, 8007cbe <_raise_r+0x1e>
 8007cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cbc:	b94b      	cbnz	r3, 8007cd2 <_raise_r+0x32>
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 f830 	bl	8007d24 <_getpid_r>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cce:	f000 b817 	b.w	8007d00 <_kill_r>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d00a      	beq.n	8007cec <_raise_r+0x4c>
 8007cd6:	1c59      	adds	r1, r3, #1
 8007cd8:	d103      	bne.n	8007ce2 <_raise_r+0x42>
 8007cda:	2316      	movs	r3, #22
 8007cdc:	6003      	str	r3, [r0, #0]
 8007cde:	2001      	movs	r0, #1
 8007ce0:	e7e7      	b.n	8007cb2 <_raise_r+0x12>
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007cea:	4798      	blx	r3
 8007cec:	2000      	movs	r0, #0
 8007cee:	e7e0      	b.n	8007cb2 <_raise_r+0x12>

08007cf0 <raise>:
 8007cf0:	4b02      	ldr	r3, [pc, #8]	@ (8007cfc <raise+0xc>)
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f7ff bfd3 	b.w	8007ca0 <_raise_r>
 8007cfa:	bf00      	nop
 8007cfc:	20000018 	.word	0x20000018

08007d00 <_kill_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	2300      	movs	r3, #0
 8007d04:	4d06      	ldr	r5, [pc, #24]	@ (8007d20 <_kill_r+0x20>)
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	602b      	str	r3, [r5, #0]
 8007d0e:	f7f9 fd36 	bl	800177e <_kill>
 8007d12:	1c43      	adds	r3, r0, #1
 8007d14:	d102      	bne.n	8007d1c <_kill_r+0x1c>
 8007d16:	682b      	ldr	r3, [r5, #0]
 8007d18:	b103      	cbz	r3, 8007d1c <_kill_r+0x1c>
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	bf00      	nop
 8007d20:	2000046c 	.word	0x2000046c

08007d24 <_getpid_r>:
 8007d24:	f7f9 bd24 	b.w	8001770 <_getpid>

08007d28 <__swhatbuf_r>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d30:	4615      	mov	r5, r2
 8007d32:	2900      	cmp	r1, #0
 8007d34:	461e      	mov	r6, r3
 8007d36:	b096      	sub	sp, #88	@ 0x58
 8007d38:	da0c      	bge.n	8007d54 <__swhatbuf_r+0x2c>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d42:	bf14      	ite	ne
 8007d44:	2340      	movne	r3, #64	@ 0x40
 8007d46:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	6031      	str	r1, [r6, #0]
 8007d4e:	602b      	str	r3, [r5, #0]
 8007d50:	b016      	add	sp, #88	@ 0x58
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	466a      	mov	r2, sp
 8007d56:	f000 f849 	bl	8007dec <_fstat_r>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	dbed      	blt.n	8007d3a <__swhatbuf_r+0x12>
 8007d5e:	9901      	ldr	r1, [sp, #4]
 8007d60:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d64:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d68:	4259      	negs	r1, r3
 8007d6a:	4159      	adcs	r1, r3
 8007d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d70:	e7eb      	b.n	8007d4a <__swhatbuf_r+0x22>

08007d72 <__smakebuf_r>:
 8007d72:	898b      	ldrh	r3, [r1, #12]
 8007d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d76:	079d      	lsls	r5, r3, #30
 8007d78:	4606      	mov	r6, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	d507      	bpl.n	8007d8e <__smakebuf_r+0x1c>
 8007d7e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	2301      	movs	r3, #1
 8007d88:	6163      	str	r3, [r4, #20]
 8007d8a:	b003      	add	sp, #12
 8007d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d8e:	466a      	mov	r2, sp
 8007d90:	ab01      	add	r3, sp, #4
 8007d92:	f7ff ffc9 	bl	8007d28 <__swhatbuf_r>
 8007d96:	9f00      	ldr	r7, [sp, #0]
 8007d98:	4605      	mov	r5, r0
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f7fd fbe1 	bl	8005564 <_malloc_r>
 8007da2:	b948      	cbnz	r0, 8007db8 <__smakebuf_r+0x46>
 8007da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da8:	059a      	lsls	r2, r3, #22
 8007daa:	d4ee      	bmi.n	8007d8a <__smakebuf_r+0x18>
 8007dac:	f023 0303 	bic.w	r3, r3, #3
 8007db0:	f043 0302 	orr.w	r3, r3, #2
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	e7e2      	b.n	8007d7e <__smakebuf_r+0xc>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	6020      	str	r0, [r4, #0]
 8007dc8:	b15b      	cbz	r3, 8007de2 <__smakebuf_r+0x70>
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dd0:	f000 f81e 	bl	8007e10 <_isatty_r>
 8007dd4:	b128      	cbz	r0, 8007de2 <__smakebuf_r+0x70>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	f023 0303 	bic.w	r3, r3, #3
 8007ddc:	f043 0301 	orr.w	r3, r3, #1
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	431d      	orrs	r5, r3
 8007de6:	81a5      	strh	r5, [r4, #12]
 8007de8:	e7cf      	b.n	8007d8a <__smakebuf_r+0x18>
	...

08007dec <_fstat_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	2300      	movs	r3, #0
 8007df0:	4d06      	ldr	r5, [pc, #24]	@ (8007e0c <_fstat_r+0x20>)
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	f7f9 fd1f 	bl	800183c <_fstat>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d102      	bne.n	8007e08 <_fstat_r+0x1c>
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	b103      	cbz	r3, 8007e08 <_fstat_r+0x1c>
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	bd38      	pop	{r3, r4, r5, pc}
 8007e0a:	bf00      	nop
 8007e0c:	2000046c 	.word	0x2000046c

08007e10 <_isatty_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	2300      	movs	r3, #0
 8007e14:	4d05      	ldr	r5, [pc, #20]	@ (8007e2c <_isatty_r+0x1c>)
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7f9 fd1d 	bl	800185a <_isatty>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_isatty_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_isatty_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	2000046c 	.word	0x2000046c

08007e30 <_init>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	bf00      	nop
 8007e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e36:	bc08      	pop	{r3}
 8007e38:	469e      	mov	lr, r3
 8007e3a:	4770      	bx	lr

08007e3c <_fini>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	bf00      	nop
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr
